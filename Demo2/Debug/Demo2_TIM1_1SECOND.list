
Demo2_TIM1_1SECOND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a64  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800ab70  0800ab70  0000ab70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac08  0800ac08  00010070  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac08  0800ac08  00010070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac08  0800ac08  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac08  0800ac08  0000ac08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac0c  0800ac0c  0000ac0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ac10  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  0800ac80  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  0800ac80  00010164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae06  00000000  00000000  00010099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d78  00000000  00000000  0001ae9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c00  00000000  00000000  0001cc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0001d818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015224  00000000  00000000  0001e310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009133  00000000  00000000  00033534  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072b23  00000000  00000000  0003c667  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af18a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003640  00000000  00000000  000af208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000070 	.word	0x20000070
 8008128:	00000000 	.word	0x00000000
 800812c:	0800ab58 	.word	0x0800ab58

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	20000074 	.word	0x20000074
 8008148:	0800ab58 	.word	0x0800ab58

0800814c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008152:	f107 0310 	add.w	r3, r7, #16
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	605a      	str	r2, [r3, #4]
 800815c:	609a      	str	r2, [r3, #8]
 800815e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008160:	4b2d      	ldr	r3, [pc, #180]	; (8008218 <MX_GPIO_Init+0xcc>)
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	4a2c      	ldr	r2, [pc, #176]	; (8008218 <MX_GPIO_Init+0xcc>)
 8008166:	f043 0310 	orr.w	r3, r3, #16
 800816a:	6193      	str	r3, [r2, #24]
 800816c:	4b2a      	ldr	r3, [pc, #168]	; (8008218 <MX_GPIO_Init+0xcc>)
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f003 0310 	and.w	r3, r3, #16
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008178:	4b27      	ldr	r3, [pc, #156]	; (8008218 <MX_GPIO_Init+0xcc>)
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	4a26      	ldr	r2, [pc, #152]	; (8008218 <MX_GPIO_Init+0xcc>)
 800817e:	f043 0320 	orr.w	r3, r3, #32
 8008182:	6193      	str	r3, [r2, #24]
 8008184:	4b24      	ldr	r3, [pc, #144]	; (8008218 <MX_GPIO_Init+0xcc>)
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	60bb      	str	r3, [r7, #8]
 800818e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008190:	4b21      	ldr	r3, [pc, #132]	; (8008218 <MX_GPIO_Init+0xcc>)
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4a20      	ldr	r2, [pc, #128]	; (8008218 <MX_GPIO_Init+0xcc>)
 8008196:	f043 0304 	orr.w	r3, r3, #4
 800819a:	6193      	str	r3, [r2, #24]
 800819c:	4b1e      	ldr	r3, [pc, #120]	; (8008218 <MX_GPIO_Init+0xcc>)
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081a8:	4b1b      	ldr	r3, [pc, #108]	; (8008218 <MX_GPIO_Init+0xcc>)
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <MX_GPIO_Init+0xcc>)
 80081ae:	f043 0308 	orr.w	r3, r3, #8
 80081b2:	6193      	str	r3, [r2, #24]
 80081b4:	4b18      	ldr	r3, [pc, #96]	; (8008218 <MX_GPIO_Init+0xcc>)
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	603b      	str	r3, [r7, #0]
 80081be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80081c0:	2200      	movs	r2, #0
 80081c2:	2120      	movs	r1, #32
 80081c4:	4815      	ldr	r0, [pc, #84]	; (800821c <MX_GPIO_Init+0xd0>)
 80081c6:	f000 fe37 	bl	8008e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80081ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80081d0:	4b13      	ldr	r3, [pc, #76]	; (8008220 <MX_GPIO_Init+0xd4>)
 80081d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80081d8:	f107 0310 	add.w	r3, r7, #16
 80081dc:	4619      	mov	r1, r3
 80081de:	4811      	ldr	r0, [pc, #68]	; (8008224 <MX_GPIO_Init+0xd8>)
 80081e0:	f000 fcd0 	bl	8008b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80081e4:	2320      	movs	r3, #32
 80081e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081e8:	2301      	movs	r3, #1
 80081ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081f0:	2302      	movs	r3, #2
 80081f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80081f4:	f107 0310 	add.w	r3, r7, #16
 80081f8:	4619      	mov	r1, r3
 80081fa:	4808      	ldr	r0, [pc, #32]	; (800821c <MX_GPIO_Init+0xd0>)
 80081fc:	f000 fcc2 	bl	8008b84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008200:	2200      	movs	r2, #0
 8008202:	2100      	movs	r1, #0
 8008204:	2028      	movs	r0, #40	; 0x28
 8008206:	f000 fc86 	bl	8008b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800820a:	2028      	movs	r0, #40	; 0x28
 800820c:	f000 fc9f 	bl	8008b4e <HAL_NVIC_EnableIRQ>

}
 8008210:	bf00      	nop
 8008212:	3720      	adds	r7, #32
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	40021000 	.word	0x40021000
 800821c:	40010800 	.word	0x40010800
 8008220:	10110000 	.word	0x10110000
 8008224:	40011000 	.word	0x40011000

08008228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800822c:	f000 fb3a 	bl	80088a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008230:	f000 f824 	bl	800827c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008234:	f7ff ff8a 	bl	800814c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008238:	f000 fa5a 	bl	80086f0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800823c:	f000 f9b8 	bl	80085b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008240:	f000 fa2c 	bl	800869c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8008244:	4809      	ldr	r0, [pc, #36]	; (800826c <main+0x44>)
 8008246:	f001 fa90 	bl	800976a <HAL_TIM_Base_Start_IT>
  printf("fafda\n");
 800824a:	4809      	ldr	r0, [pc, #36]	; (8008270 <main+0x48>)
 800824c:	f002 f87a 	bl	800a344 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if(time == 2000) {
 8008250:	4b08      	ldr	r3, [pc, #32]	; (8008274 <main+0x4c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008258:	d1fa      	bne.n	8008250 <main+0x28>
	  		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800825a:	2120      	movs	r1, #32
 800825c:	4806      	ldr	r0, [pc, #24]	; (8008278 <main+0x50>)
 800825e:	f000 fe03 	bl	8008e68 <HAL_GPIO_TogglePin>
	  		  time = 0;
 8008262:	4b04      	ldr	r3, [pc, #16]	; (8008274 <main+0x4c>)
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]
	 if(time == 2000) {
 8008268:	e7f2      	b.n	8008250 <main+0x28>
 800826a:	bf00      	nop
 800826c:	2000009c 	.word	0x2000009c
 8008270:	0800ab70 	.word	0x0800ab70
 8008274:	2000008c 	.word	0x2000008c
 8008278:	40010800 	.word	0x40010800

0800827c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b090      	sub	sp, #64	; 0x40
 8008280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008282:	f107 0318 	add.w	r3, r7, #24
 8008286:	2228      	movs	r2, #40	; 0x28
 8008288:	2100      	movs	r1, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f001 fff6 	bl	800a27c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008290:	1d3b      	adds	r3, r7, #4
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	605a      	str	r2, [r3, #4]
 8008298:	609a      	str	r2, [r3, #8]
 800829a:	60da      	str	r2, [r3, #12]
 800829c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800829e:	2302      	movs	r3, #2
 80082a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80082a2:	2301      	movs	r3, #1
 80082a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80082a6:	2310      	movs	r3, #16
 80082a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80082aa:	2302      	movs	r3, #2
 80082ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80082ae:	2300      	movs	r3, #0
 80082b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80082b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80082b8:	f107 0318 	add.w	r3, r7, #24
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 fe0d 	bl	8008edc <HAL_RCC_OscConfig>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80082c8:	f000 f832 	bl	8008330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082cc:	230f      	movs	r3, #15
 80082ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082d0:	2302      	movs	r3, #2
 80082d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80082d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	2102      	movs	r1, #2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 f878 	bl	80093dc <HAL_RCC_ClockConfig>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80082f2:	f000 f81d 	bl	8008330 <Error_Handler>
  }
}
 80082f6:	bf00      	nop
 80082f8:	3740      	adds	r7, #64	; 0x40
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim1.Instance) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	4b06      	ldr	r3, [pc, #24]	; (8008328 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d104      	bne.n	800831e <HAL_TIM_PeriodElapsedCallback+0x1e>
		time++;
 8008314:	4b05      	ldr	r3, [pc, #20]	; (800832c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3301      	adds	r3, #1
 800831a:	4a04      	ldr	r2, [pc, #16]	; (800832c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800831c:	6013      	str	r3, [r2, #0]
	}

}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr
 8008328:	2000009c 	.word	0x2000009c
 800832c:	2000008c 	.word	0x2000008c

08008330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008330:	b480      	push	{r7}
 8008332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr

0800833c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008342:	4b15      	ldr	r3, [pc, #84]	; (8008398 <HAL_MspInit+0x5c>)
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	4a14      	ldr	r2, [pc, #80]	; (8008398 <HAL_MspInit+0x5c>)
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	6193      	str	r3, [r2, #24]
 800834e:	4b12      	ldr	r3, [pc, #72]	; (8008398 <HAL_MspInit+0x5c>)
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	60bb      	str	r3, [r7, #8]
 8008358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800835a:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <HAL_MspInit+0x5c>)
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	4a0e      	ldr	r2, [pc, #56]	; (8008398 <HAL_MspInit+0x5c>)
 8008360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008364:	61d3      	str	r3, [r2, #28]
 8008366:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <HAL_MspInit+0x5c>)
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800836e:	607b      	str	r3, [r7, #4]
 8008370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008372:	4b0a      	ldr	r3, [pc, #40]	; (800839c <HAL_MspInit+0x60>)
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	4a04      	ldr	r2, [pc, #16]	; (800839c <HAL_MspInit+0x60>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr
 8008398:	40021000 	.word	0x40021000
 800839c:	40010000 	.word	0x40010000

080083a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80083a4:	bf00      	nop
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr

080083ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083b0:	e7fe      	b.n	80083b0 <HardFault_Handler+0x4>

080083b2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083b2:	b480      	push	{r7}
 80083b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083b6:	e7fe      	b.n	80083b6 <MemManage_Handler+0x4>

080083b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083bc:	e7fe      	b.n	80083bc <BusFault_Handler+0x4>

080083be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083be:	b480      	push	{r7}
 80083c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083c2:	e7fe      	b.n	80083c2 <UsageFault_Handler+0x4>

080083c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083c8:	bf00      	nop
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083d4:	bf00      	nop
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr

080083dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083e0:	bf00      	nop
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr

080083e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083ec:	f000 faa0 	bl	8008930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083f0:	bf00      	nop
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80083f8:	4802      	ldr	r0, [pc, #8]	; (8008404 <TIM1_UP_IRQHandler+0x10>)
 80083fa:	f001 f9d9 	bl	80097b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80083fe:	bf00      	nop
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	2000009c 	.word	0x2000009c

08008408 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800840c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008410:	f000 fd42 	bl	8008e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008414:	bf00      	nop
 8008416:	bd80      	pop	{r7, pc}

08008418 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	e00a      	b.n	8008440 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800842a:	f3af 8000 	nop.w
 800842e:	4601      	mov	r1, r0
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	60ba      	str	r2, [r7, #8]
 8008436:	b2ca      	uxtb	r2, r1
 8008438:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	3301      	adds	r3, #1
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	429a      	cmp	r2, r3
 8008446:	dbf0      	blt.n	800842a <_read+0x12>
	}

return len;
 8008448:	687b      	ldr	r3, [r7, #4]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b086      	sub	sp, #24
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800845e:	2300      	movs	r3, #0
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	e009      	b.n	8008478 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	60ba      	str	r2, [r7, #8]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 f9e1 	bl	8008834 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	3301      	adds	r3, #1
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	429a      	cmp	r2, r3
 800847e:	dbf1      	blt.n	8008464 <_write+0x12>
	}
	return len;
 8008480:	687b      	ldr	r3, [r7, #4]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <_close>:

int _close(int file)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
	return -1;
 8008492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008496:	4618      	mov	r0, r3
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr

080084a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084b0:	605a      	str	r2, [r3, #4]
	return 0;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bc80      	pop	{r7}
 80084bc:	4770      	bx	lr

080084be <_isatty>:

int _isatty(int file)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
	return 1;
 80084c6:	2301      	movs	r3, #1
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bc80      	pop	{r7}
 80084d0:	4770      	bx	lr

080084d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	607a      	str	r2, [r7, #4]
	return 0;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bc80      	pop	{r7}
 80084e8:	4770      	bx	lr
	...

080084ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80084f4:	4b11      	ldr	r3, [pc, #68]	; (800853c <_sbrk+0x50>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d102      	bne.n	8008502 <_sbrk+0x16>
		heap_end = &end;
 80084fc:	4b0f      	ldr	r3, [pc, #60]	; (800853c <_sbrk+0x50>)
 80084fe:	4a10      	ldr	r2, [pc, #64]	; (8008540 <_sbrk+0x54>)
 8008500:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008502:	4b0e      	ldr	r3, [pc, #56]	; (800853c <_sbrk+0x50>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <_sbrk+0x50>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4413      	add	r3, r2
 8008510:	466a      	mov	r2, sp
 8008512:	4293      	cmp	r3, r2
 8008514:	d907      	bls.n	8008526 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008516:	f001 fe87 	bl	800a228 <__errno>
 800851a:	4602      	mov	r2, r0
 800851c:	230c      	movs	r3, #12
 800851e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008520:	f04f 33ff 	mov.w	r3, #4294967295
 8008524:	e006      	b.n	8008534 <_sbrk+0x48>
	}

	heap_end += incr;
 8008526:	4b05      	ldr	r3, [pc, #20]	; (800853c <_sbrk+0x50>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	4a03      	ldr	r2, [pc, #12]	; (800853c <_sbrk+0x50>)
 8008530:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008532:	68fb      	ldr	r3, [r7, #12]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000090 	.word	0x20000090
 8008540:	20000168 	.word	0x20000168

08008544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008548:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <SystemInit+0x5c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a14      	ldr	r2, [pc, #80]	; (80085a0 <SystemInit+0x5c>)
 800854e:	f043 0301 	orr.w	r3, r3, #1
 8008552:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008554:	4b12      	ldr	r3, [pc, #72]	; (80085a0 <SystemInit+0x5c>)
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	4911      	ldr	r1, [pc, #68]	; (80085a0 <SystemInit+0x5c>)
 800855a:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <SystemInit+0x60>)
 800855c:	4013      	ands	r3, r2
 800855e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008560:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <SystemInit+0x5c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a0e      	ldr	r2, [pc, #56]	; (80085a0 <SystemInit+0x5c>)
 8008566:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800856a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800856e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008570:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <SystemInit+0x5c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a0a      	ldr	r2, [pc, #40]	; (80085a0 <SystemInit+0x5c>)
 8008576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800857a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800857c:	4b08      	ldr	r3, [pc, #32]	; (80085a0 <SystemInit+0x5c>)
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	4a07      	ldr	r2, [pc, #28]	; (80085a0 <SystemInit+0x5c>)
 8008582:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8008586:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008588:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <SystemInit+0x5c>)
 800858a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800858e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <SystemInit+0x64>)
 8008592:	4a06      	ldr	r2, [pc, #24]	; (80085ac <SystemInit+0x68>)
 8008594:	609a      	str	r2, [r3, #8]
#endif 
}
 8008596:	bf00      	nop
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	40021000 	.word	0x40021000
 80085a4:	f8ff0000 	.word	0xf8ff0000
 80085a8:	e000ed00 	.word	0xe000ed00
 80085ac:	08008000 	.word	0x08008000

080085b0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085b6:	f107 0308 	add.w	r3, r7, #8
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	605a      	str	r2, [r3, #4]
 80085c0:	609a      	str	r2, [r3, #8]
 80085c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085c4:	463b      	mov	r3, r7
 80085c6:	2200      	movs	r2, #0
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80085cc:	4b1e      	ldr	r3, [pc, #120]	; (8008648 <MX_TIM1_Init+0x98>)
 80085ce:	4a1f      	ldr	r2, [pc, #124]	; (800864c <MX_TIM1_Init+0x9c>)
 80085d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80085d2:	4b1d      	ldr	r3, [pc, #116]	; (8008648 <MX_TIM1_Init+0x98>)
 80085d4:	223f      	movs	r2, #63	; 0x3f
 80085d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085d8:	4b1b      	ldr	r3, [pc, #108]	; (8008648 <MX_TIM1_Init+0x98>)
 80085da:	2200      	movs	r2, #0
 80085dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80085de:	4b1a      	ldr	r3, [pc, #104]	; (8008648 <MX_TIM1_Init+0x98>)
 80085e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085e6:	4b18      	ldr	r3, [pc, #96]	; (8008648 <MX_TIM1_Init+0x98>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80085ec:	4b16      	ldr	r3, [pc, #88]	; (8008648 <MX_TIM1_Init+0x98>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085f2:	4b15      	ldr	r3, [pc, #84]	; (8008648 <MX_TIM1_Init+0x98>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80085f8:	4813      	ldr	r0, [pc, #76]	; (8008648 <MX_TIM1_Init+0x98>)
 80085fa:	f001 f88b 	bl	8009714 <HAL_TIM_Base_Init>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8008604:	f7ff fe94 	bl	8008330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800860c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800860e:	f107 0308 	add.w	r3, r7, #8
 8008612:	4619      	mov	r1, r3
 8008614:	480c      	ldr	r0, [pc, #48]	; (8008648 <MX_TIM1_Init+0x98>)
 8008616:	f001 f9d3 	bl	80099c0 <HAL_TIM_ConfigClockSource>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8008620:	f7ff fe86 	bl	8008330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008624:	2300      	movs	r3, #0
 8008626:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008628:	2300      	movs	r3, #0
 800862a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800862c:	463b      	mov	r3, r7
 800862e:	4619      	mov	r1, r3
 8008630:	4805      	ldr	r0, [pc, #20]	; (8008648 <MX_TIM1_Init+0x98>)
 8008632:	f001 fb99 	bl	8009d68 <HAL_TIMEx_MasterConfigSynchronization>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800863c:	f7ff fe78 	bl	8008330 <Error_Handler>
  }

}
 8008640:	bf00      	nop
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	2000009c 	.word	0x2000009c
 800864c:	40012c00 	.word	0x40012c00

08008650 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a0d      	ldr	r2, [pc, #52]	; (8008694 <HAL_TIM_Base_MspInit+0x44>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d113      	bne.n	800868a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008662:	4b0d      	ldr	r3, [pc, #52]	; (8008698 <HAL_TIM_Base_MspInit+0x48>)
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	4a0c      	ldr	r2, [pc, #48]	; (8008698 <HAL_TIM_Base_MspInit+0x48>)
 8008668:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800866c:	6193      	str	r3, [r2, #24]
 800866e:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <HAL_TIM_Base_MspInit+0x48>)
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800867a:	2200      	movs	r2, #0
 800867c:	2100      	movs	r1, #0
 800867e:	2019      	movs	r0, #25
 8008680:	f000 fa49 	bl	8008b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008684:	2019      	movs	r0, #25
 8008686:	f000 fa62 	bl	8008b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800868a:	bf00      	nop
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	40012c00 	.word	0x40012c00
 8008698:	40021000 	.word	0x40021000

0800869c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80086a0:	4b11      	ldr	r3, [pc, #68]	; (80086e8 <MX_USART1_UART_Init+0x4c>)
 80086a2:	4a12      	ldr	r2, [pc, #72]	; (80086ec <MX_USART1_UART_Init+0x50>)
 80086a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80086a6:	4b10      	ldr	r3, [pc, #64]	; (80086e8 <MX_USART1_UART_Init+0x4c>)
 80086a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80086ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80086ae:	4b0e      	ldr	r3, [pc, #56]	; (80086e8 <MX_USART1_UART_Init+0x4c>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80086b4:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <MX_USART1_UART_Init+0x4c>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80086ba:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <MX_USART1_UART_Init+0x4c>)
 80086bc:	2200      	movs	r2, #0
 80086be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80086c0:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <MX_USART1_UART_Init+0x4c>)
 80086c2:	220c      	movs	r2, #12
 80086c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086c6:	4b08      	ldr	r3, [pc, #32]	; (80086e8 <MX_USART1_UART_Init+0x4c>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80086cc:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <MX_USART1_UART_Init+0x4c>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80086d2:	4805      	ldr	r0, [pc, #20]	; (80086e8 <MX_USART1_UART_Init+0x4c>)
 80086d4:	f001 fb9e 	bl	8009e14 <HAL_UART_Init>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80086de:	f7ff fe27 	bl	8008330 <Error_Handler>
  }

}
 80086e2:	bf00      	nop
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	200000dc 	.word	0x200000dc
 80086ec:	40013800 	.word	0x40013800

080086f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80086f4:	4b11      	ldr	r3, [pc, #68]	; (800873c <MX_USART2_UART_Init+0x4c>)
 80086f6:	4a12      	ldr	r2, [pc, #72]	; (8008740 <MX_USART2_UART_Init+0x50>)
 80086f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80086fa:	4b10      	ldr	r3, [pc, #64]	; (800873c <MX_USART2_UART_Init+0x4c>)
 80086fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008702:	4b0e      	ldr	r3, [pc, #56]	; (800873c <MX_USART2_UART_Init+0x4c>)
 8008704:	2200      	movs	r2, #0
 8008706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008708:	4b0c      	ldr	r3, [pc, #48]	; (800873c <MX_USART2_UART_Init+0x4c>)
 800870a:	2200      	movs	r2, #0
 800870c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800870e:	4b0b      	ldr	r3, [pc, #44]	; (800873c <MX_USART2_UART_Init+0x4c>)
 8008710:	2200      	movs	r2, #0
 8008712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008714:	4b09      	ldr	r3, [pc, #36]	; (800873c <MX_USART2_UART_Init+0x4c>)
 8008716:	220c      	movs	r2, #12
 8008718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800871a:	4b08      	ldr	r3, [pc, #32]	; (800873c <MX_USART2_UART_Init+0x4c>)
 800871c:	2200      	movs	r2, #0
 800871e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008720:	4b06      	ldr	r3, [pc, #24]	; (800873c <MX_USART2_UART_Init+0x4c>)
 8008722:	2200      	movs	r2, #0
 8008724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008726:	4805      	ldr	r0, [pc, #20]	; (800873c <MX_USART2_UART_Init+0x4c>)
 8008728:	f001 fb74 	bl	8009e14 <HAL_UART_Init>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008732:	f7ff fdfd 	bl	8008330 <Error_Handler>
  }

}
 8008736:	bf00      	nop
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	2000011c 	.word	0x2000011c
 8008740:	40004400 	.word	0x40004400

08008744 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b08a      	sub	sp, #40	; 0x28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800874c:	f107 0318 	add.w	r3, r7, #24
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	605a      	str	r2, [r3, #4]
 8008756:	609a      	str	r2, [r3, #8]
 8008758:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a31      	ldr	r2, [pc, #196]	; (8008824 <HAL_UART_MspInit+0xe0>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d132      	bne.n	80087ca <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008764:	4b30      	ldr	r3, [pc, #192]	; (8008828 <HAL_UART_MspInit+0xe4>)
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	4a2f      	ldr	r2, [pc, #188]	; (8008828 <HAL_UART_MspInit+0xe4>)
 800876a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800876e:	6193      	str	r3, [r2, #24]
 8008770:	4b2d      	ldr	r3, [pc, #180]	; (8008828 <HAL_UART_MspInit+0xe4>)
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008778:	617b      	str	r3, [r7, #20]
 800877a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800877c:	4b2a      	ldr	r3, [pc, #168]	; (8008828 <HAL_UART_MspInit+0xe4>)
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	4a29      	ldr	r2, [pc, #164]	; (8008828 <HAL_UART_MspInit+0xe4>)
 8008782:	f043 0304 	orr.w	r3, r3, #4
 8008786:	6193      	str	r3, [r2, #24]
 8008788:	4b27      	ldr	r3, [pc, #156]	; (8008828 <HAL_UART_MspInit+0xe4>)
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	613b      	str	r3, [r7, #16]
 8008792:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800879a:	2302      	movs	r3, #2
 800879c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800879e:	2303      	movs	r3, #3
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087a2:	f107 0318 	add.w	r3, r7, #24
 80087a6:	4619      	mov	r1, r3
 80087a8:	4820      	ldr	r0, [pc, #128]	; (800882c <HAL_UART_MspInit+0xe8>)
 80087aa:	f000 f9eb 	bl	8008b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80087ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80087b4:	2300      	movs	r3, #0
 80087b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087bc:	f107 0318 	add.w	r3, r7, #24
 80087c0:	4619      	mov	r1, r3
 80087c2:	481a      	ldr	r0, [pc, #104]	; (800882c <HAL_UART_MspInit+0xe8>)
 80087c4:	f000 f9de 	bl	8008b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80087c8:	e028      	b.n	800881c <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART2)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a18      	ldr	r2, [pc, #96]	; (8008830 <HAL_UART_MspInit+0xec>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d123      	bne.n	800881c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80087d4:	4b14      	ldr	r3, [pc, #80]	; (8008828 <HAL_UART_MspInit+0xe4>)
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	4a13      	ldr	r2, [pc, #76]	; (8008828 <HAL_UART_MspInit+0xe4>)
 80087da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087de:	61d3      	str	r3, [r2, #28]
 80087e0:	4b11      	ldr	r3, [pc, #68]	; (8008828 <HAL_UART_MspInit+0xe4>)
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ec:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <HAL_UART_MspInit+0xe4>)
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	4a0d      	ldr	r2, [pc, #52]	; (8008828 <HAL_UART_MspInit+0xe4>)
 80087f2:	f043 0304 	orr.w	r3, r3, #4
 80087f6:	6193      	str	r3, [r2, #24]
 80087f8:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <HAL_UART_MspInit+0xe4>)
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	60bb      	str	r3, [r7, #8]
 8008802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008804:	230c      	movs	r3, #12
 8008806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008808:	2302      	movs	r3, #2
 800880a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800880c:	2302      	movs	r3, #2
 800880e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008810:	f107 0318 	add.w	r3, r7, #24
 8008814:	4619      	mov	r1, r3
 8008816:	4805      	ldr	r0, [pc, #20]	; (800882c <HAL_UART_MspInit+0xe8>)
 8008818:	f000 f9b4 	bl	8008b84 <HAL_GPIO_Init>
}
 800881c:	bf00      	nop
 800881e:	3728      	adds	r7, #40	; 0x28
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	40013800 	.word	0x40013800
 8008828:	40021000 	.word	0x40021000
 800882c:	40010800 	.word	0x40010800
 8008830:	40004400 	.word	0x40004400

08008834 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800883c:	1d39      	adds	r1, r7, #4
 800883e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008842:	2201      	movs	r2, #1
 8008844:	4803      	ldr	r0, [pc, #12]	; (8008854 <__io_putchar+0x20>)
 8008846:	f001 fb32 	bl	8009eae <HAL_UART_Transmit>
  return ch;
 800884a:	687b      	ldr	r3, [r7, #4]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	200000dc 	.word	0x200000dc

08008858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008858:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800885a:	e003      	b.n	8008864 <LoopCopyDataInit>

0800885c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800885c:	4b0b      	ldr	r3, [pc, #44]	; (800888c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800885e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008860:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008862:	3104      	adds	r1, #4

08008864 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008864:	480a      	ldr	r0, [pc, #40]	; (8008890 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8008866:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008868:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800886a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800886c:	d3f6      	bcc.n	800885c <CopyDataInit>
  ldr r2, =_sbss
 800886e:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008870:	e002      	b.n	8008878 <LoopFillZerobss>

08008872 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008872:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008874:	f842 3b04 	str.w	r3, [r2], #4

08008878 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008878:	4b08      	ldr	r3, [pc, #32]	; (800889c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800887a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800887c:	d3f9      	bcc.n	8008872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800887e:	f7ff fe61 	bl	8008544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008882:	f001 fcd7 	bl	800a234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008886:	f7ff fccf 	bl	8008228 <main>
  bx lr
 800888a:	4770      	bx	lr
  ldr r3, =_sidata
 800888c:	0800ac10 	.word	0x0800ac10
  ldr r0, =_sdata
 8008890:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008894:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8008898:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800889c:	20000164 	.word	0x20000164

080088a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80088a0:	e7fe      	b.n	80088a0 <ADC1_2_IRQHandler>
	...

080088a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80088a8:	4b08      	ldr	r3, [pc, #32]	; (80088cc <HAL_Init+0x28>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a07      	ldr	r2, [pc, #28]	; (80088cc <HAL_Init+0x28>)
 80088ae:	f043 0310 	orr.w	r3, r3, #16
 80088b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80088b4:	2003      	movs	r0, #3
 80088b6:	f000 f923 	bl	8008b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80088ba:	2000      	movs	r0, #0
 80088bc:	f000 f808 	bl	80088d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80088c0:	f7ff fd3c 	bl	800833c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40022000 	.word	0x40022000

080088d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80088d8:	4b12      	ldr	r3, [pc, #72]	; (8008924 <HAL_InitTick+0x54>)
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	4b12      	ldr	r3, [pc, #72]	; (8008928 <HAL_InitTick+0x58>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	4619      	mov	r1, r3
 80088e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80088e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80088ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f93b 	bl	8008b6a <HAL_SYSTICK_Config>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e00e      	b.n	800891c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b0f      	cmp	r3, #15
 8008902:	d80a      	bhi.n	800891a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008904:	2200      	movs	r2, #0
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	f000 f903 	bl	8008b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008910:	4a06      	ldr	r2, [pc, #24]	; (800892c <HAL_InitTick+0x5c>)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	e000      	b.n	800891c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
}
 800891c:	4618      	mov	r0, r3
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	20000000 	.word	0x20000000
 8008928:	20000008 	.word	0x20000008
 800892c:	20000004 	.word	0x20000004

08008930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008930:	b480      	push	{r7}
 8008932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <HAL_IncTick+0x1c>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	461a      	mov	r2, r3
 800893a:	4b05      	ldr	r3, [pc, #20]	; (8008950 <HAL_IncTick+0x20>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4413      	add	r3, r2
 8008940:	4a03      	ldr	r2, [pc, #12]	; (8008950 <HAL_IncTick+0x20>)
 8008942:	6013      	str	r3, [r2, #0]
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr
 800894c:	20000008 	.word	0x20000008
 8008950:	2000015c 	.word	0x2000015c

08008954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
  return uwTick;
 8008958:	4b02      	ldr	r3, [pc, #8]	; (8008964 <HAL_GetTick+0x10>)
 800895a:	681b      	ldr	r3, [r3, #0]
}
 800895c:	4618      	mov	r0, r3
 800895e:	46bd      	mov	sp, r7
 8008960:	bc80      	pop	{r7}
 8008962:	4770      	bx	lr
 8008964:	2000015c 	.word	0x2000015c

08008968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008978:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <__NVIC_SetPriorityGrouping+0x44>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008984:	4013      	ands	r3, r2
 8008986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800899a:	4a04      	ldr	r2, [pc, #16]	; (80089ac <__NVIC_SetPriorityGrouping+0x44>)
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	60d3      	str	r3, [r2, #12]
}
 80089a0:	bf00      	nop
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bc80      	pop	{r7}
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	e000ed00 	.word	0xe000ed00

080089b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089b4:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <__NVIC_GetPriorityGrouping+0x18>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	0a1b      	lsrs	r3, r3, #8
 80089ba:	f003 0307 	and.w	r3, r3, #7
}
 80089be:	4618      	mov	r0, r3
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bc80      	pop	{r7}
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	e000ed00 	.word	0xe000ed00

080089cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	db0b      	blt.n	80089f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	f003 021f 	and.w	r2, r3, #31
 80089e4:	4906      	ldr	r1, [pc, #24]	; (8008a00 <__NVIC_EnableIRQ+0x34>)
 80089e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ea:	095b      	lsrs	r3, r3, #5
 80089ec:	2001      	movs	r0, #1
 80089ee:	fa00 f202 	lsl.w	r2, r0, r2
 80089f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bc80      	pop	{r7}
 80089fe:	4770      	bx	lr
 8008a00:	e000e100 	.word	0xe000e100

08008a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	6039      	str	r1, [r7, #0]
 8008a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	db0a      	blt.n	8008a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	490c      	ldr	r1, [pc, #48]	; (8008a50 <__NVIC_SetPriority+0x4c>)
 8008a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a22:	0112      	lsls	r2, r2, #4
 8008a24:	b2d2      	uxtb	r2, r2
 8008a26:	440b      	add	r3, r1
 8008a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a2c:	e00a      	b.n	8008a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	4908      	ldr	r1, [pc, #32]	; (8008a54 <__NVIC_SetPriority+0x50>)
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	f003 030f 	and.w	r3, r3, #15
 8008a3a:	3b04      	subs	r3, #4
 8008a3c:	0112      	lsls	r2, r2, #4
 8008a3e:	b2d2      	uxtb	r2, r2
 8008a40:	440b      	add	r3, r1
 8008a42:	761a      	strb	r2, [r3, #24]
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bc80      	pop	{r7}
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	e000e100 	.word	0xe000e100
 8008a54:	e000ed00 	.word	0xe000ed00

08008a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b089      	sub	sp, #36	; 0x24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f1c3 0307 	rsb	r3, r3, #7
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	bf28      	it	cs
 8008a76:	2304      	movcs	r3, #4
 8008a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	2b06      	cmp	r3, #6
 8008a80:	d902      	bls.n	8008a88 <NVIC_EncodePriority+0x30>
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	3b03      	subs	r3, #3
 8008a86:	e000      	b.n	8008a8a <NVIC_EncodePriority+0x32>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	43da      	mvns	r2, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	401a      	ands	r2, r3
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aaa:	43d9      	mvns	r1, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ab0:	4313      	orrs	r3, r2
         );
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3724      	adds	r7, #36	; 0x24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr

08008abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008acc:	d301      	bcc.n	8008ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e00f      	b.n	8008af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ad2:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <SysTick_Config+0x40>)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ada:	210f      	movs	r1, #15
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae0:	f7ff ff90 	bl	8008a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ae4:	4b05      	ldr	r3, [pc, #20]	; (8008afc <SysTick_Config+0x40>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008aea:	4b04      	ldr	r3, [pc, #16]	; (8008afc <SysTick_Config+0x40>)
 8008aec:	2207      	movs	r2, #7
 8008aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	e000e010 	.word	0xe000e010

08008b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7ff ff2d 	bl	8008968 <__NVIC_SetPriorityGrouping>
}
 8008b0e:	bf00      	nop
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
 8008b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b28:	f7ff ff42 	bl	80089b0 <__NVIC_GetPriorityGrouping>
 8008b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	68b9      	ldr	r1, [r7, #8]
 8008b32:	6978      	ldr	r0, [r7, #20]
 8008b34:	f7ff ff90 	bl	8008a58 <NVIC_EncodePriority>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff ff5f 	bl	8008a04 <__NVIC_SetPriority>
}
 8008b46:	bf00      	nop
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b082      	sub	sp, #8
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	4603      	mov	r3, r0
 8008b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff ff35 	bl	80089cc <__NVIC_EnableIRQ>
}
 8008b62:	bf00      	nop
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff ffa2 	bl	8008abc <SysTick_Config>
 8008b78:	4603      	mov	r3, r0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b08b      	sub	sp, #44	; 0x2c
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008b92:	2300      	movs	r3, #0
 8008b94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b96:	e127      	b.n	8008de8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008b98:	2201      	movs	r2, #1
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	f040 8116 	bne.w	8008de2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	2b12      	cmp	r3, #18
 8008bbc:	d034      	beq.n	8008c28 <HAL_GPIO_Init+0xa4>
 8008bbe:	2b12      	cmp	r3, #18
 8008bc0:	d80d      	bhi.n	8008bde <HAL_GPIO_Init+0x5a>
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d02b      	beq.n	8008c1e <HAL_GPIO_Init+0x9a>
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d804      	bhi.n	8008bd4 <HAL_GPIO_Init+0x50>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d031      	beq.n	8008c32 <HAL_GPIO_Init+0xae>
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d01c      	beq.n	8008c0c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008bd2:	e048      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d043      	beq.n	8008c60 <HAL_GPIO_Init+0xdc>
 8008bd8:	2b11      	cmp	r3, #17
 8008bda:	d01b      	beq.n	8008c14 <HAL_GPIO_Init+0x90>
          break;
 8008bdc:	e043      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008bde:	4a89      	ldr	r2, [pc, #548]	; (8008e04 <HAL_GPIO_Init+0x280>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d026      	beq.n	8008c32 <HAL_GPIO_Init+0xae>
 8008be4:	4a87      	ldr	r2, [pc, #540]	; (8008e04 <HAL_GPIO_Init+0x280>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d806      	bhi.n	8008bf8 <HAL_GPIO_Init+0x74>
 8008bea:	4a87      	ldr	r2, [pc, #540]	; (8008e08 <HAL_GPIO_Init+0x284>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d020      	beq.n	8008c32 <HAL_GPIO_Init+0xae>
 8008bf0:	4a86      	ldr	r2, [pc, #536]	; (8008e0c <HAL_GPIO_Init+0x288>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d01d      	beq.n	8008c32 <HAL_GPIO_Init+0xae>
          break;
 8008bf6:	e036      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008bf8:	4a85      	ldr	r2, [pc, #532]	; (8008e10 <HAL_GPIO_Init+0x28c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d019      	beq.n	8008c32 <HAL_GPIO_Init+0xae>
 8008bfe:	4a85      	ldr	r2, [pc, #532]	; (8008e14 <HAL_GPIO_Init+0x290>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d016      	beq.n	8008c32 <HAL_GPIO_Init+0xae>
 8008c04:	4a84      	ldr	r2, [pc, #528]	; (8008e18 <HAL_GPIO_Init+0x294>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d013      	beq.n	8008c32 <HAL_GPIO_Init+0xae>
          break;
 8008c0a:	e02c      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	623b      	str	r3, [r7, #32]
          break;
 8008c12:	e028      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	3304      	adds	r3, #4
 8008c1a:	623b      	str	r3, [r7, #32]
          break;
 8008c1c:	e023      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	3308      	adds	r3, #8
 8008c24:	623b      	str	r3, [r7, #32]
          break;
 8008c26:	e01e      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	330c      	adds	r3, #12
 8008c2e:	623b      	str	r3, [r7, #32]
          break;
 8008c30:	e019      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d102      	bne.n	8008c40 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008c3a:	2304      	movs	r3, #4
 8008c3c:	623b      	str	r3, [r7, #32]
          break;
 8008c3e:	e012      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d105      	bne.n	8008c54 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c48:	2308      	movs	r3, #8
 8008c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	611a      	str	r2, [r3, #16]
          break;
 8008c52:	e008      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c54:	2308      	movs	r3, #8
 8008c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	615a      	str	r2, [r3, #20]
          break;
 8008c5e:	e002      	b.n	8008c66 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008c60:	2300      	movs	r3, #0
 8008c62:	623b      	str	r3, [r7, #32]
          break;
 8008c64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	2bff      	cmp	r3, #255	; 0xff
 8008c6a:	d801      	bhi.n	8008c70 <HAL_GPIO_Init+0xec>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	e001      	b.n	8008c74 <HAL_GPIO_Init+0xf0>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3304      	adds	r3, #4
 8008c74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	2bff      	cmp	r3, #255	; 0xff
 8008c7a:	d802      	bhi.n	8008c82 <HAL_GPIO_Init+0xfe>
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	e002      	b.n	8008c88 <HAL_GPIO_Init+0x104>
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	3b08      	subs	r3, #8
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	210f      	movs	r1, #15
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	fa01 f303 	lsl.w	r3, r1, r3
 8008c96:	43db      	mvns	r3, r3
 8008c98:	401a      	ands	r2, r3
 8008c9a:	6a39      	ldr	r1, [r7, #32]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 8096 	beq.w	8008de2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008cb6:	4b59      	ldr	r3, [pc, #356]	; (8008e1c <HAL_GPIO_Init+0x298>)
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	4a58      	ldr	r2, [pc, #352]	; (8008e1c <HAL_GPIO_Init+0x298>)
 8008cbc:	f043 0301 	orr.w	r3, r3, #1
 8008cc0:	6193      	str	r3, [r2, #24]
 8008cc2:	4b56      	ldr	r3, [pc, #344]	; (8008e1c <HAL_GPIO_Init+0x298>)
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	60bb      	str	r3, [r7, #8]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008cce:	4a54      	ldr	r2, [pc, #336]	; (8008e20 <HAL_GPIO_Init+0x29c>)
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	089b      	lsrs	r3, r3, #2
 8008cd4:	3302      	adds	r3, #2
 8008cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cda:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	220f      	movs	r2, #15
 8008ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cea:	43db      	mvns	r3, r3
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a4b      	ldr	r2, [pc, #300]	; (8008e24 <HAL_GPIO_Init+0x2a0>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d013      	beq.n	8008d22 <HAL_GPIO_Init+0x19e>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a4a      	ldr	r2, [pc, #296]	; (8008e28 <HAL_GPIO_Init+0x2a4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00d      	beq.n	8008d1e <HAL_GPIO_Init+0x19a>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a49      	ldr	r2, [pc, #292]	; (8008e2c <HAL_GPIO_Init+0x2a8>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d007      	beq.n	8008d1a <HAL_GPIO_Init+0x196>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a48      	ldr	r2, [pc, #288]	; (8008e30 <HAL_GPIO_Init+0x2ac>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d101      	bne.n	8008d16 <HAL_GPIO_Init+0x192>
 8008d12:	2303      	movs	r3, #3
 8008d14:	e006      	b.n	8008d24 <HAL_GPIO_Init+0x1a0>
 8008d16:	2304      	movs	r3, #4
 8008d18:	e004      	b.n	8008d24 <HAL_GPIO_Init+0x1a0>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e002      	b.n	8008d24 <HAL_GPIO_Init+0x1a0>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e000      	b.n	8008d24 <HAL_GPIO_Init+0x1a0>
 8008d22:	2300      	movs	r3, #0
 8008d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d26:	f002 0203 	and.w	r2, r2, #3
 8008d2a:	0092      	lsls	r2, r2, #2
 8008d2c:	4093      	lsls	r3, r2
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008d34:	493a      	ldr	r1, [pc, #232]	; (8008e20 <HAL_GPIO_Init+0x29c>)
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	089b      	lsrs	r3, r3, #2
 8008d3a:	3302      	adds	r3, #2
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d006      	beq.n	8008d5c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008d4e:	4b39      	ldr	r3, [pc, #228]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	4938      	ldr	r1, [pc, #224]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	600b      	str	r3, [r1, #0]
 8008d5a:	e006      	b.n	8008d6a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008d5c:	4b35      	ldr	r3, [pc, #212]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	43db      	mvns	r3, r3
 8008d64:	4933      	ldr	r1, [pc, #204]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d006      	beq.n	8008d84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008d76:	4b2f      	ldr	r3, [pc, #188]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	492e      	ldr	r1, [pc, #184]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	604b      	str	r3, [r1, #4]
 8008d82:	e006      	b.n	8008d92 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008d84:	4b2b      	ldr	r3, [pc, #172]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	4929      	ldr	r1, [pc, #164]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008d8e:	4013      	ands	r3, r2
 8008d90:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d006      	beq.n	8008dac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008d9e:	4b25      	ldr	r3, [pc, #148]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	4924      	ldr	r1, [pc, #144]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	608b      	str	r3, [r1, #8]
 8008daa:	e006      	b.n	8008dba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008dac:	4b21      	ldr	r3, [pc, #132]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	43db      	mvns	r3, r3
 8008db4:	491f      	ldr	r1, [pc, #124]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008db6:	4013      	ands	r3, r2
 8008db8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d006      	beq.n	8008dd4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008dc6:	4b1b      	ldr	r3, [pc, #108]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	491a      	ldr	r1, [pc, #104]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60cb      	str	r3, [r1, #12]
 8008dd2:	e006      	b.n	8008de2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008dd4:	4b17      	ldr	r3, [pc, #92]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	43db      	mvns	r3, r3
 8008ddc:	4915      	ldr	r1, [pc, #84]	; (8008e34 <HAL_GPIO_Init+0x2b0>)
 8008dde:	4013      	ands	r3, r2
 8008de0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	3301      	adds	r3, #1
 8008de6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	fa22 f303 	lsr.w	r3, r2, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f47f aed0 	bne.w	8008b98 <HAL_GPIO_Init+0x14>
  }
}
 8008df8:	bf00      	nop
 8008dfa:	372c      	adds	r7, #44	; 0x2c
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bc80      	pop	{r7}
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	10210000 	.word	0x10210000
 8008e08:	10110000 	.word	0x10110000
 8008e0c:	10120000 	.word	0x10120000
 8008e10:	10310000 	.word	0x10310000
 8008e14:	10320000 	.word	0x10320000
 8008e18:	10220000 	.word	0x10220000
 8008e1c:	40021000 	.word	0x40021000
 8008e20:	40010000 	.word	0x40010000
 8008e24:	40010800 	.word	0x40010800
 8008e28:	40010c00 	.word	0x40010c00
 8008e2c:	40011000 	.word	0x40011000
 8008e30:	40011400 	.word	0x40011400
 8008e34:	40010400 	.word	0x40010400

08008e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	807b      	strh	r3, [r7, #2]
 8008e44:	4613      	mov	r3, r2
 8008e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e48:	787b      	ldrb	r3, [r7, #1]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e4e:	887a      	ldrh	r2, [r7, #2]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008e54:	e003      	b.n	8008e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008e56:	887b      	ldrh	r3, [r7, #2]
 8008e58:	041a      	lsls	r2, r3, #16
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	611a      	str	r2, [r3, #16]
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr

08008e68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	887b      	ldrh	r3, [r7, #2]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e80:	887a      	ldrh	r2, [r7, #2]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008e86:	e002      	b.n	8008e8e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e88:	887a      	ldrh	r2, [r7, #2]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	611a      	str	r2, [r3, #16]
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bc80      	pop	{r7}
 8008e96:	4770      	bx	lr

08008e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008ea2:	4b08      	ldr	r3, [pc, #32]	; (8008ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ea4:	695a      	ldr	r2, [r3, #20]
 8008ea6:	88fb      	ldrh	r3, [r7, #6]
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d006      	beq.n	8008ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008eae:	4a05      	ldr	r2, [pc, #20]	; (8008ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008eb0:	88fb      	ldrh	r3, [r7, #6]
 8008eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008eb4:	88fb      	ldrh	r3, [r7, #6]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 f806 	bl	8008ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	40010400 	.word	0x40010400

08008ec8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008ed2:	bf00      	nop
 8008ed4:	370c      	adds	r7, #12
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr

08008edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e26c      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 8087 	beq.w	800900a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008efc:	4b92      	ldr	r3, [pc, #584]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f003 030c 	and.w	r3, r3, #12
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d00c      	beq.n	8008f22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008f08:	4b8f      	ldr	r3, [pc, #572]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f003 030c 	and.w	r3, r3, #12
 8008f10:	2b08      	cmp	r3, #8
 8008f12:	d112      	bne.n	8008f3a <HAL_RCC_OscConfig+0x5e>
 8008f14:	4b8c      	ldr	r3, [pc, #560]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f20:	d10b      	bne.n	8008f3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f22:	4b89      	ldr	r3, [pc, #548]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d06c      	beq.n	8009008 <HAL_RCC_OscConfig+0x12c>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d168      	bne.n	8009008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e246      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f42:	d106      	bne.n	8008f52 <HAL_RCC_OscConfig+0x76>
 8008f44:	4b80      	ldr	r3, [pc, #512]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a7f      	ldr	r2, [pc, #508]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	e02e      	b.n	8008fb0 <HAL_RCC_OscConfig+0xd4>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10c      	bne.n	8008f74 <HAL_RCC_OscConfig+0x98>
 8008f5a:	4b7b      	ldr	r3, [pc, #492]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a7a      	ldr	r2, [pc, #488]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	4b78      	ldr	r3, [pc, #480]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a77      	ldr	r2, [pc, #476]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	e01d      	b.n	8008fb0 <HAL_RCC_OscConfig+0xd4>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f7c:	d10c      	bne.n	8008f98 <HAL_RCC_OscConfig+0xbc>
 8008f7e:	4b72      	ldr	r3, [pc, #456]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a71      	ldr	r2, [pc, #452]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	4b6f      	ldr	r3, [pc, #444]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a6e      	ldr	r2, [pc, #440]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f94:	6013      	str	r3, [r2, #0]
 8008f96:	e00b      	b.n	8008fb0 <HAL_RCC_OscConfig+0xd4>
 8008f98:	4b6b      	ldr	r3, [pc, #428]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a6a      	ldr	r2, [pc, #424]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	4b68      	ldr	r3, [pc, #416]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a67      	ldr	r2, [pc, #412]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d013      	beq.n	8008fe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fb8:	f7ff fccc 	bl	8008954 <HAL_GetTick>
 8008fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fbe:	e008      	b.n	8008fd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fc0:	f7ff fcc8 	bl	8008954 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b64      	cmp	r3, #100	; 0x64
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e1fa      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fd2:	4b5d      	ldr	r3, [pc, #372]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0f0      	beq.n	8008fc0 <HAL_RCC_OscConfig+0xe4>
 8008fde:	e014      	b.n	800900a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fe0:	f7ff fcb8 	bl	8008954 <HAL_GetTick>
 8008fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fe6:	e008      	b.n	8008ffa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fe8:	f7ff fcb4 	bl	8008954 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	2b64      	cmp	r3, #100	; 0x64
 8008ff4:	d901      	bls.n	8008ffa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e1e6      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ffa:	4b53      	ldr	r3, [pc, #332]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1f0      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x10c>
 8009006:	e000      	b.n	800900a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d063      	beq.n	80090de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009016:	4b4c      	ldr	r3, [pc, #304]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f003 030c 	and.w	r3, r3, #12
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00b      	beq.n	800903a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009022:	4b49      	ldr	r3, [pc, #292]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f003 030c 	and.w	r3, r3, #12
 800902a:	2b08      	cmp	r3, #8
 800902c:	d11c      	bne.n	8009068 <HAL_RCC_OscConfig+0x18c>
 800902e:	4b46      	ldr	r3, [pc, #280]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d116      	bne.n	8009068 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800903a:	4b43      	ldr	r3, [pc, #268]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d005      	beq.n	8009052 <HAL_RCC_OscConfig+0x176>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d001      	beq.n	8009052 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e1ba      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009052:	4b3d      	ldr	r3, [pc, #244]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	4939      	ldr	r1, [pc, #228]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8009062:	4313      	orrs	r3, r2
 8009064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009066:	e03a      	b.n	80090de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d020      	beq.n	80090b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009070:	4b36      	ldr	r3, [pc, #216]	; (800914c <HAL_RCC_OscConfig+0x270>)
 8009072:	2201      	movs	r2, #1
 8009074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009076:	f7ff fc6d 	bl	8008954 <HAL_GetTick>
 800907a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800907c:	e008      	b.n	8009090 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800907e:	f7ff fc69 	bl	8008954 <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	2b02      	cmp	r3, #2
 800908a:	d901      	bls.n	8009090 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e19b      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009090:	4b2d      	ldr	r3, [pc, #180]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d0f0      	beq.n	800907e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800909c:	4b2a      	ldr	r3, [pc, #168]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	4927      	ldr	r1, [pc, #156]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	600b      	str	r3, [r1, #0]
 80090b0:	e015      	b.n	80090de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090b2:	4b26      	ldr	r3, [pc, #152]	; (800914c <HAL_RCC_OscConfig+0x270>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090b8:	f7ff fc4c 	bl	8008954 <HAL_GetTick>
 80090bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090be:	e008      	b.n	80090d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090c0:	f7ff fc48 	bl	8008954 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d901      	bls.n	80090d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e17a      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090d2:	4b1d      	ldr	r3, [pc, #116]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1f0      	bne.n	80090c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0308 	and.w	r3, r3, #8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d03a      	beq.n	8009160 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d019      	beq.n	8009126 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090f2:	4b17      	ldr	r3, [pc, #92]	; (8009150 <HAL_RCC_OscConfig+0x274>)
 80090f4:	2201      	movs	r2, #1
 80090f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090f8:	f7ff fc2c 	bl	8008954 <HAL_GetTick>
 80090fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090fe:	e008      	b.n	8009112 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009100:	f7ff fc28 	bl	8008954 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	2b02      	cmp	r3, #2
 800910c:	d901      	bls.n	8009112 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e15a      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009112:	4b0d      	ldr	r3, [pc, #52]	; (8009148 <HAL_RCC_OscConfig+0x26c>)
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d0f0      	beq.n	8009100 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800911e:	2001      	movs	r0, #1
 8009120:	f000 fada 	bl	80096d8 <RCC_Delay>
 8009124:	e01c      	b.n	8009160 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009126:	4b0a      	ldr	r3, [pc, #40]	; (8009150 <HAL_RCC_OscConfig+0x274>)
 8009128:	2200      	movs	r2, #0
 800912a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800912c:	f7ff fc12 	bl	8008954 <HAL_GetTick>
 8009130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009132:	e00f      	b.n	8009154 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009134:	f7ff fc0e 	bl	8008954 <HAL_GetTick>
 8009138:	4602      	mov	r2, r0
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	2b02      	cmp	r3, #2
 8009140:	d908      	bls.n	8009154 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	e140      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
 8009146:	bf00      	nop
 8009148:	40021000 	.word	0x40021000
 800914c:	42420000 	.word	0x42420000
 8009150:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009154:	4b9e      	ldr	r3, [pc, #632]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	f003 0302 	and.w	r3, r3, #2
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e9      	bne.n	8009134 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 80a6 	beq.w	80092ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800916e:	2300      	movs	r3, #0
 8009170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009172:	4b97      	ldr	r3, [pc, #604]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10d      	bne.n	800919a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800917e:	4b94      	ldr	r3, [pc, #592]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	4a93      	ldr	r2, [pc, #588]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009188:	61d3      	str	r3, [r2, #28]
 800918a:	4b91      	ldr	r3, [pc, #580]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009192:	60bb      	str	r3, [r7, #8]
 8009194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009196:	2301      	movs	r3, #1
 8009198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800919a:	4b8e      	ldr	r3, [pc, #568]	; (80093d4 <HAL_RCC_OscConfig+0x4f8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d118      	bne.n	80091d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091a6:	4b8b      	ldr	r3, [pc, #556]	; (80093d4 <HAL_RCC_OscConfig+0x4f8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a8a      	ldr	r2, [pc, #552]	; (80093d4 <HAL_RCC_OscConfig+0x4f8>)
 80091ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091b2:	f7ff fbcf 	bl	8008954 <HAL_GetTick>
 80091b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091b8:	e008      	b.n	80091cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091ba:	f7ff fbcb 	bl	8008954 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	2b64      	cmp	r3, #100	; 0x64
 80091c6:	d901      	bls.n	80091cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e0fd      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091cc:	4b81      	ldr	r3, [pc, #516]	; (80093d4 <HAL_RCC_OscConfig+0x4f8>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0f0      	beq.n	80091ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d106      	bne.n	80091ee <HAL_RCC_OscConfig+0x312>
 80091e0:	4b7b      	ldr	r3, [pc, #492]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	4a7a      	ldr	r2, [pc, #488]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 80091e6:	f043 0301 	orr.w	r3, r3, #1
 80091ea:	6213      	str	r3, [r2, #32]
 80091ec:	e02d      	b.n	800924a <HAL_RCC_OscConfig+0x36e>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10c      	bne.n	8009210 <HAL_RCC_OscConfig+0x334>
 80091f6:	4b76      	ldr	r3, [pc, #472]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	4a75      	ldr	r2, [pc, #468]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 80091fc:	f023 0301 	bic.w	r3, r3, #1
 8009200:	6213      	str	r3, [r2, #32]
 8009202:	4b73      	ldr	r3, [pc, #460]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	4a72      	ldr	r2, [pc, #456]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009208:	f023 0304 	bic.w	r3, r3, #4
 800920c:	6213      	str	r3, [r2, #32]
 800920e:	e01c      	b.n	800924a <HAL_RCC_OscConfig+0x36e>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	2b05      	cmp	r3, #5
 8009216:	d10c      	bne.n	8009232 <HAL_RCC_OscConfig+0x356>
 8009218:	4b6d      	ldr	r3, [pc, #436]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	4a6c      	ldr	r2, [pc, #432]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 800921e:	f043 0304 	orr.w	r3, r3, #4
 8009222:	6213      	str	r3, [r2, #32]
 8009224:	4b6a      	ldr	r3, [pc, #424]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	4a69      	ldr	r2, [pc, #420]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 800922a:	f043 0301 	orr.w	r3, r3, #1
 800922e:	6213      	str	r3, [r2, #32]
 8009230:	e00b      	b.n	800924a <HAL_RCC_OscConfig+0x36e>
 8009232:	4b67      	ldr	r3, [pc, #412]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	4a66      	ldr	r2, [pc, #408]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009238:	f023 0301 	bic.w	r3, r3, #1
 800923c:	6213      	str	r3, [r2, #32]
 800923e:	4b64      	ldr	r3, [pc, #400]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	4a63      	ldr	r2, [pc, #396]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009244:	f023 0304 	bic.w	r3, r3, #4
 8009248:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d015      	beq.n	800927e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009252:	f7ff fb7f 	bl	8008954 <HAL_GetTick>
 8009256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009258:	e00a      	b.n	8009270 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800925a:	f7ff fb7b 	bl	8008954 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	f241 3288 	movw	r2, #5000	; 0x1388
 8009268:	4293      	cmp	r3, r2
 800926a:	d901      	bls.n	8009270 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e0ab      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009270:	4b57      	ldr	r3, [pc, #348]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0ee      	beq.n	800925a <HAL_RCC_OscConfig+0x37e>
 800927c:	e014      	b.n	80092a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800927e:	f7ff fb69 	bl	8008954 <HAL_GetTick>
 8009282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009284:	e00a      	b.n	800929c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009286:	f7ff fb65 	bl	8008954 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	f241 3288 	movw	r2, #5000	; 0x1388
 8009294:	4293      	cmp	r3, r2
 8009296:	d901      	bls.n	800929c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e095      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800929c:	4b4c      	ldr	r3, [pc, #304]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	f003 0302 	and.w	r3, r3, #2
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1ee      	bne.n	8009286 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80092a8:	7dfb      	ldrb	r3, [r7, #23]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d105      	bne.n	80092ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092ae:	4b48      	ldr	r3, [pc, #288]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	4a47      	ldr	r2, [pc, #284]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 80092b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 8081 	beq.w	80093c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092c4:	4b42      	ldr	r3, [pc, #264]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f003 030c 	and.w	r3, r3, #12
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d061      	beq.n	8009394 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d146      	bne.n	8009366 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092d8:	4b3f      	ldr	r3, [pc, #252]	; (80093d8 <HAL_RCC_OscConfig+0x4fc>)
 80092da:	2200      	movs	r2, #0
 80092dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092de:	f7ff fb39 	bl	8008954 <HAL_GetTick>
 80092e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092e4:	e008      	b.n	80092f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092e6:	f7ff fb35 	bl	8008954 <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d901      	bls.n	80092f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e067      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092f8:	4b35      	ldr	r3, [pc, #212]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1f0      	bne.n	80092e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800930c:	d108      	bne.n	8009320 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800930e:	4b30      	ldr	r3, [pc, #192]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	492d      	ldr	r1, [pc, #180]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 800931c:	4313      	orrs	r3, r2
 800931e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009320:	4b2b      	ldr	r3, [pc, #172]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a19      	ldr	r1, [r3, #32]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	430b      	orrs	r3, r1
 8009332:	4927      	ldr	r1, [pc, #156]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009334:	4313      	orrs	r3, r2
 8009336:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009338:	4b27      	ldr	r3, [pc, #156]	; (80093d8 <HAL_RCC_OscConfig+0x4fc>)
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800933e:	f7ff fb09 	bl	8008954 <HAL_GetTick>
 8009342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009344:	e008      	b.n	8009358 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009346:	f7ff fb05 	bl	8008954 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	d901      	bls.n	8009358 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e037      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009358:	4b1d      	ldr	r3, [pc, #116]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0f0      	beq.n	8009346 <HAL_RCC_OscConfig+0x46a>
 8009364:	e02f      	b.n	80093c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009366:	4b1c      	ldr	r3, [pc, #112]	; (80093d8 <HAL_RCC_OscConfig+0x4fc>)
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800936c:	f7ff faf2 	bl	8008954 <HAL_GetTick>
 8009370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009372:	e008      	b.n	8009386 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009374:	f7ff faee 	bl	8008954 <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d901      	bls.n	8009386 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e020      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009386:	4b12      	ldr	r3, [pc, #72]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1f0      	bne.n	8009374 <HAL_RCC_OscConfig+0x498>
 8009392:	e018      	b.n	80093c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	69db      	ldr	r3, [r3, #28]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e013      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80093a0:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <HAL_RCC_OscConfig+0x4f4>)
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d106      	bne.n	80093c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093be:	429a      	cmp	r2, r3
 80093c0:	d001      	beq.n	80093c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e000      	b.n	80093c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	40021000 	.word	0x40021000
 80093d4:	40007000 	.word	0x40007000
 80093d8:	42420060 	.word	0x42420060

080093dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e0d0      	b.n	8009592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093f0:	4b6a      	ldr	r3, [pc, #424]	; (800959c <HAL_RCC_ClockConfig+0x1c0>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0307 	and.w	r3, r3, #7
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d910      	bls.n	8009420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093fe:	4b67      	ldr	r3, [pc, #412]	; (800959c <HAL_RCC_ClockConfig+0x1c0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f023 0207 	bic.w	r2, r3, #7
 8009406:	4965      	ldr	r1, [pc, #404]	; (800959c <HAL_RCC_ClockConfig+0x1c0>)
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	4313      	orrs	r3, r2
 800940c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800940e:	4b63      	ldr	r3, [pc, #396]	; (800959c <HAL_RCC_ClockConfig+0x1c0>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0307 	and.w	r3, r3, #7
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d001      	beq.n	8009420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e0b8      	b.n	8009592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0302 	and.w	r3, r3, #2
 8009428:	2b00      	cmp	r3, #0
 800942a:	d020      	beq.n	800946e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009438:	4b59      	ldr	r3, [pc, #356]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	4a58      	ldr	r2, [pc, #352]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 800943e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009450:	4b53      	ldr	r3, [pc, #332]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	4a52      	ldr	r2, [pc, #328]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 8009456:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800945a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800945c:	4b50      	ldr	r3, [pc, #320]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	494d      	ldr	r1, [pc, #308]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 800946a:	4313      	orrs	r3, r2
 800946c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d040      	beq.n	80094fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d107      	bne.n	8009492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009482:	4b47      	ldr	r3, [pc, #284]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d115      	bne.n	80094ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	e07f      	b.n	8009592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d107      	bne.n	80094aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800949a:	4b41      	ldr	r3, [pc, #260]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e073      	b.n	8009592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094aa:	4b3d      	ldr	r3, [pc, #244]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d101      	bne.n	80094ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e06b      	b.n	8009592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094ba:	4b39      	ldr	r3, [pc, #228]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f023 0203 	bic.w	r2, r3, #3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	4936      	ldr	r1, [pc, #216]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80094cc:	f7ff fa42 	bl	8008954 <HAL_GetTick>
 80094d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094d2:	e00a      	b.n	80094ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094d4:	f7ff fa3e 	bl	8008954 <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d901      	bls.n	80094ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e053      	b.n	8009592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ea:	4b2d      	ldr	r3, [pc, #180]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f003 020c 	and.w	r2, r3, #12
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d1eb      	bne.n	80094d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80094fc:	4b27      	ldr	r3, [pc, #156]	; (800959c <HAL_RCC_ClockConfig+0x1c0>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0307 	and.w	r3, r3, #7
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d210      	bcs.n	800952c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800950a:	4b24      	ldr	r3, [pc, #144]	; (800959c <HAL_RCC_ClockConfig+0x1c0>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f023 0207 	bic.w	r2, r3, #7
 8009512:	4922      	ldr	r1, [pc, #136]	; (800959c <HAL_RCC_ClockConfig+0x1c0>)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	4313      	orrs	r3, r2
 8009518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800951a:	4b20      	ldr	r3, [pc, #128]	; (800959c <HAL_RCC_ClockConfig+0x1c0>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0307 	and.w	r3, r3, #7
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d001      	beq.n	800952c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e032      	b.n	8009592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	d008      	beq.n	800954a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009538:	4b19      	ldr	r3, [pc, #100]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	4916      	ldr	r1, [pc, #88]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 8009546:	4313      	orrs	r3, r2
 8009548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0308 	and.w	r3, r3, #8
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009556:	4b12      	ldr	r3, [pc, #72]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	490e      	ldr	r1, [pc, #56]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 8009566:	4313      	orrs	r3, r2
 8009568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800956a:	f000 f821 	bl	80095b0 <HAL_RCC_GetSysClockFreq>
 800956e:	4601      	mov	r1, r0
 8009570:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <HAL_RCC_ClockConfig+0x1c4>)
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	091b      	lsrs	r3, r3, #4
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	4a0a      	ldr	r2, [pc, #40]	; (80095a4 <HAL_RCC_ClockConfig+0x1c8>)
 800957c:	5cd3      	ldrb	r3, [r2, r3]
 800957e:	fa21 f303 	lsr.w	r3, r1, r3
 8009582:	4a09      	ldr	r2, [pc, #36]	; (80095a8 <HAL_RCC_ClockConfig+0x1cc>)
 8009584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009586:	4b09      	ldr	r3, [pc, #36]	; (80095ac <HAL_RCC_ClockConfig+0x1d0>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff f9a0 	bl	80088d0 <HAL_InitTick>

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	40022000 	.word	0x40022000
 80095a0:	40021000 	.word	0x40021000
 80095a4:	0800ab8c 	.word	0x0800ab8c
 80095a8:	20000000 	.word	0x20000000
 80095ac:	20000004 	.word	0x20000004

080095b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095b0:	b490      	push	{r4, r7}
 80095b2:	b08a      	sub	sp, #40	; 0x28
 80095b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80095b6:	4b2a      	ldr	r3, [pc, #168]	; (8009660 <HAL_RCC_GetSysClockFreq+0xb0>)
 80095b8:	1d3c      	adds	r4, r7, #4
 80095ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80095c0:	4b28      	ldr	r3, [pc, #160]	; (8009664 <HAL_RCC_GetSysClockFreq+0xb4>)
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	61fb      	str	r3, [r7, #28]
 80095ca:	2300      	movs	r3, #0
 80095cc:	61bb      	str	r3, [r7, #24]
 80095ce:	2300      	movs	r3, #0
 80095d0:	627b      	str	r3, [r7, #36]	; 0x24
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80095da:	4b23      	ldr	r3, [pc, #140]	; (8009668 <HAL_RCC_GetSysClockFreq+0xb8>)
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	f003 030c 	and.w	r3, r3, #12
 80095e6:	2b04      	cmp	r3, #4
 80095e8:	d002      	beq.n	80095f0 <HAL_RCC_GetSysClockFreq+0x40>
 80095ea:	2b08      	cmp	r3, #8
 80095ec:	d003      	beq.n	80095f6 <HAL_RCC_GetSysClockFreq+0x46>
 80095ee:	e02d      	b.n	800964c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80095f0:	4b1e      	ldr	r3, [pc, #120]	; (800966c <HAL_RCC_GetSysClockFreq+0xbc>)
 80095f2:	623b      	str	r3, [r7, #32]
      break;
 80095f4:	e02d      	b.n	8009652 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	0c9b      	lsrs	r3, r3, #18
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009602:	4413      	add	r3, r2
 8009604:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009608:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d013      	beq.n	800963c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009614:	4b14      	ldr	r3, [pc, #80]	; (8009668 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	0c5b      	lsrs	r3, r3, #17
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009622:	4413      	add	r3, r2
 8009624:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009628:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	4a0f      	ldr	r2, [pc, #60]	; (800966c <HAL_RCC_GetSysClockFreq+0xbc>)
 800962e:	fb02 f203 	mul.w	r2, r2, r3
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	fbb2 f3f3 	udiv	r3, r2, r3
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
 800963a:	e004      	b.n	8009646 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	4a0c      	ldr	r2, [pc, #48]	; (8009670 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009640:	fb02 f303 	mul.w	r3, r2, r3
 8009644:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	623b      	str	r3, [r7, #32]
      break;
 800964a:	e002      	b.n	8009652 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800964c:	4b07      	ldr	r3, [pc, #28]	; (800966c <HAL_RCC_GetSysClockFreq+0xbc>)
 800964e:	623b      	str	r3, [r7, #32]
      break;
 8009650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009652:	6a3b      	ldr	r3, [r7, #32]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3728      	adds	r7, #40	; 0x28
 8009658:	46bd      	mov	sp, r7
 800965a:	bc90      	pop	{r4, r7}
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	0800ab78 	.word	0x0800ab78
 8009664:	0800ab88 	.word	0x0800ab88
 8009668:	40021000 	.word	0x40021000
 800966c:	007a1200 	.word	0x007a1200
 8009670:	003d0900 	.word	0x003d0900

08009674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009674:	b480      	push	{r7}
 8009676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009678:	4b02      	ldr	r3, [pc, #8]	; (8009684 <HAL_RCC_GetHCLKFreq+0x10>)
 800967a:	681b      	ldr	r3, [r3, #0]
}
 800967c:	4618      	mov	r0, r3
 800967e:	46bd      	mov	sp, r7
 8009680:	bc80      	pop	{r7}
 8009682:	4770      	bx	lr
 8009684:	20000000 	.word	0x20000000

08009688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800968c:	f7ff fff2 	bl	8009674 <HAL_RCC_GetHCLKFreq>
 8009690:	4601      	mov	r1, r0
 8009692:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	0a1b      	lsrs	r3, r3, #8
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	4a03      	ldr	r2, [pc, #12]	; (80096ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800969e:	5cd3      	ldrb	r3, [r2, r3]
 80096a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	40021000 	.word	0x40021000
 80096ac:	0800ab9c 	.word	0x0800ab9c

080096b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80096b4:	f7ff ffde 	bl	8009674 <HAL_RCC_GetHCLKFreq>
 80096b8:	4601      	mov	r1, r0
 80096ba:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	0adb      	lsrs	r3, r3, #11
 80096c0:	f003 0307 	and.w	r3, r3, #7
 80096c4:	4a03      	ldr	r2, [pc, #12]	; (80096d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096c6:	5cd3      	ldrb	r3, [r2, r3]
 80096c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	40021000 	.word	0x40021000
 80096d4:	0800ab9c 	.word	0x0800ab9c

080096d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80096e0:	4b0a      	ldr	r3, [pc, #40]	; (800970c <RCC_Delay+0x34>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a0a      	ldr	r2, [pc, #40]	; (8009710 <RCC_Delay+0x38>)
 80096e6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ea:	0a5b      	lsrs	r3, r3, #9
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	fb02 f303 	mul.w	r3, r2, r3
 80096f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80096f4:	bf00      	nop
  }
  while (Delay --);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	1e5a      	subs	r2, r3, #1
 80096fa:	60fa      	str	r2, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1f9      	bne.n	80096f4 <RCC_Delay+0x1c>
}
 8009700:	bf00      	nop
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	bc80      	pop	{r7}
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20000000 	.word	0x20000000
 8009710:	10624dd3 	.word	0x10624dd3

08009714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e01d      	b.n	8009762 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d106      	bne.n	8009740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7fe ff88 	bl	8008650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3304      	adds	r3, #4
 8009750:	4619      	mov	r1, r3
 8009752:	4610      	mov	r0, r2
 8009754:	f000 fa10 	bl	8009b78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800976a:	b480      	push	{r7}
 800976c:	b085      	sub	sp, #20
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68da      	ldr	r2, [r3, #12]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f042 0201 	orr.w	r2, r2, #1
 8009780:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b06      	cmp	r3, #6
 8009792:	d007      	beq.n	80097a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0201 	orr.w	r2, r2, #1
 80097a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bc80      	pop	{r7}
 80097ae:	4770      	bx	lr

080097b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d122      	bne.n	800980c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	f003 0302 	and.w	r3, r3, #2
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d11b      	bne.n	800980c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f06f 0202 	mvn.w	r2, #2
 80097dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	f003 0303 	and.w	r3, r3, #3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f9a4 	bl	8009b40 <HAL_TIM_IC_CaptureCallback>
 80097f8:	e005      	b.n	8009806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f997 	bl	8009b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f9a6 	bl	8009b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f003 0304 	and.w	r3, r3, #4
 8009816:	2b04      	cmp	r3, #4
 8009818:	d122      	bne.n	8009860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b04      	cmp	r3, #4
 8009826:	d11b      	bne.n	8009860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f06f 0204 	mvn.w	r2, #4
 8009830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2202      	movs	r2, #2
 8009836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009842:	2b00      	cmp	r3, #0
 8009844:	d003      	beq.n	800984e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f97a 	bl	8009b40 <HAL_TIM_IC_CaptureCallback>
 800984c:	e005      	b.n	800985a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f96d 	bl	8009b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f97c 	bl	8009b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	f003 0308 	and.w	r3, r3, #8
 800986a:	2b08      	cmp	r3, #8
 800986c:	d122      	bne.n	80098b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f003 0308 	and.w	r3, r3, #8
 8009878:	2b08      	cmp	r3, #8
 800987a:	d11b      	bne.n	80098b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f06f 0208 	mvn.w	r2, #8
 8009884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2204      	movs	r2, #4
 800988a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f950 	bl	8009b40 <HAL_TIM_IC_CaptureCallback>
 80098a0:	e005      	b.n	80098ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f943 	bl	8009b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f952 	bl	8009b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	f003 0310 	and.w	r3, r3, #16
 80098be:	2b10      	cmp	r3, #16
 80098c0:	d122      	bne.n	8009908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f003 0310 	and.w	r3, r3, #16
 80098cc:	2b10      	cmp	r3, #16
 80098ce:	d11b      	bne.n	8009908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f06f 0210 	mvn.w	r2, #16
 80098d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2208      	movs	r2, #8
 80098de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f926 	bl	8009b40 <HAL_TIM_IC_CaptureCallback>
 80098f4:	e005      	b.n	8009902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f919 	bl	8009b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f928 	bl	8009b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b01      	cmp	r3, #1
 8009914:	d10e      	bne.n	8009934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b01      	cmp	r3, #1
 8009922:	d107      	bne.n	8009934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f06f 0201 	mvn.w	r2, #1
 800992c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7fe fce6 	bl	8008300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800993e:	2b80      	cmp	r3, #128	; 0x80
 8009940:	d10e      	bne.n	8009960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994c:	2b80      	cmp	r3, #128	; 0x80
 800994e:	d107      	bne.n	8009960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa51 	bl	8009e02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996a:	2b40      	cmp	r3, #64	; 0x40
 800996c:	d10e      	bne.n	800998c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009978:	2b40      	cmp	r3, #64	; 0x40
 800997a:	d107      	bne.n	800998c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f8ec 	bl	8009b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f003 0320 	and.w	r3, r3, #32
 8009996:	2b20      	cmp	r3, #32
 8009998:	d10e      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	d107      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0220 	mvn.w	r2, #32
 80099b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fa1c 	bl	8009df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099b8:	bf00      	nop
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d101      	bne.n	80099d8 <HAL_TIM_ConfigClockSource+0x18>
 80099d4:	2302      	movs	r3, #2
 80099d6:	e0a6      	b.n	8009b26 <HAL_TIM_ConfigClockSource+0x166>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80099f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b40      	cmp	r3, #64	; 0x40
 8009a0e:	d067      	beq.n	8009ae0 <HAL_TIM_ConfigClockSource+0x120>
 8009a10:	2b40      	cmp	r3, #64	; 0x40
 8009a12:	d80b      	bhi.n	8009a2c <HAL_TIM_ConfigClockSource+0x6c>
 8009a14:	2b10      	cmp	r3, #16
 8009a16:	d073      	beq.n	8009b00 <HAL_TIM_ConfigClockSource+0x140>
 8009a18:	2b10      	cmp	r3, #16
 8009a1a:	d802      	bhi.n	8009a22 <HAL_TIM_ConfigClockSource+0x62>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d06f      	beq.n	8009b00 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009a20:	e078      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a22:	2b20      	cmp	r3, #32
 8009a24:	d06c      	beq.n	8009b00 <HAL_TIM_ConfigClockSource+0x140>
 8009a26:	2b30      	cmp	r3, #48	; 0x30
 8009a28:	d06a      	beq.n	8009b00 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009a2a:	e073      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a2c:	2b70      	cmp	r3, #112	; 0x70
 8009a2e:	d00d      	beq.n	8009a4c <HAL_TIM_ConfigClockSource+0x8c>
 8009a30:	2b70      	cmp	r3, #112	; 0x70
 8009a32:	d804      	bhi.n	8009a3e <HAL_TIM_ConfigClockSource+0x7e>
 8009a34:	2b50      	cmp	r3, #80	; 0x50
 8009a36:	d033      	beq.n	8009aa0 <HAL_TIM_ConfigClockSource+0xe0>
 8009a38:	2b60      	cmp	r3, #96	; 0x60
 8009a3a:	d041      	beq.n	8009ac0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009a3c:	e06a      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a42:	d066      	beq.n	8009b12 <HAL_TIM_ConfigClockSource+0x152>
 8009a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a48:	d017      	beq.n	8009a7a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009a4a:	e063      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	6899      	ldr	r1, [r3, #8]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f000 f965 	bl	8009d2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	609a      	str	r2, [r3, #8]
      break;
 8009a78:	e04c      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	6899      	ldr	r1, [r3, #8]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	f000 f94e 	bl	8009d2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a9c:	609a      	str	r2, [r3, #8]
      break;
 8009a9e:	e039      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	6859      	ldr	r1, [r3, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	461a      	mov	r2, r3
 8009aae:	f000 f8c5 	bl	8009c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2150      	movs	r1, #80	; 0x50
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 f91c 	bl	8009cf6 <TIM_ITRx_SetConfig>
      break;
 8009abe:	e029      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	6859      	ldr	r1, [r3, #4]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	461a      	mov	r2, r3
 8009ace:	f000 f8e3 	bl	8009c98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2160      	movs	r1, #96	; 0x60
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 f90c 	bl	8009cf6 <TIM_ITRx_SetConfig>
      break;
 8009ade:	e019      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6818      	ldr	r0, [r3, #0]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	6859      	ldr	r1, [r3, #4]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	461a      	mov	r2, r3
 8009aee:	f000 f8a5 	bl	8009c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2140      	movs	r1, #64	; 0x40
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 f8fc 	bl	8009cf6 <TIM_ITRx_SetConfig>
      break;
 8009afe:	e009      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	f000 f8f3 	bl	8009cf6 <TIM_ITRx_SetConfig>
      break;
 8009b10:	e000      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b083      	sub	sp, #12
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b36:	bf00      	nop
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bc80      	pop	{r7}
 8009b3e:	4770      	bx	lr

08009b40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bc80      	pop	{r7}
 8009b50:	4770      	bx	lr

08009b52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b5a:	bf00      	nop
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr

08009b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bc80      	pop	{r7}
 8009b74:	4770      	bx	lr
	...

08009b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a29      	ldr	r2, [pc, #164]	; (8009c30 <TIM_Base_SetConfig+0xb8>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d00b      	beq.n	8009ba8 <TIM_Base_SetConfig+0x30>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b96:	d007      	beq.n	8009ba8 <TIM_Base_SetConfig+0x30>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a26      	ldr	r2, [pc, #152]	; (8009c34 <TIM_Base_SetConfig+0xbc>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d003      	beq.n	8009ba8 <TIM_Base_SetConfig+0x30>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a25      	ldr	r2, [pc, #148]	; (8009c38 <TIM_Base_SetConfig+0xc0>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d108      	bne.n	8009bba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a1c      	ldr	r2, [pc, #112]	; (8009c30 <TIM_Base_SetConfig+0xb8>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d00b      	beq.n	8009bda <TIM_Base_SetConfig+0x62>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc8:	d007      	beq.n	8009bda <TIM_Base_SetConfig+0x62>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a19      	ldr	r2, [pc, #100]	; (8009c34 <TIM_Base_SetConfig+0xbc>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d003      	beq.n	8009bda <TIM_Base_SetConfig+0x62>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a18      	ldr	r2, [pc, #96]	; (8009c38 <TIM_Base_SetConfig+0xc0>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d108      	bne.n	8009bec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a07      	ldr	r2, [pc, #28]	; (8009c30 <TIM_Base_SetConfig+0xb8>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d103      	bne.n	8009c20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	691a      	ldr	r2, [r3, #16]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	615a      	str	r2, [r3, #20]
}
 8009c26:	bf00      	nop
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bc80      	pop	{r7}
 8009c2e:	4770      	bx	lr
 8009c30:	40012c00 	.word	0x40012c00
 8009c34:	40000400 	.word	0x40000400
 8009c38:	40000800 	.word	0x40000800

08009c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	f023 0201 	bic.w	r2, r3, #1
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	011b      	lsls	r3, r3, #4
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f023 030a 	bic.w	r3, r3, #10
 8009c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	621a      	str	r2, [r3, #32]
}
 8009c8e:	bf00      	nop
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bc80      	pop	{r7}
 8009c96:	4770      	bx	lr

08009c98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	f023 0210 	bic.w	r2, r3, #16
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	031b      	lsls	r3, r3, #12
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	621a      	str	r2, [r3, #32]
}
 8009cec:	bf00      	nop
 8009cee:	371c      	adds	r7, #28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bc80      	pop	{r7}
 8009cf4:	4770      	bx	lr

08009cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	f043 0307 	orr.w	r3, r3, #7
 8009d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	609a      	str	r2, [r3, #8]
}
 8009d20:	bf00      	nop
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bc80      	pop	{r7}
 8009d28:	4770      	bx	lr

08009d2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b087      	sub	sp, #28
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	60f8      	str	r0, [r7, #12]
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	021a      	lsls	r2, r3, #8
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	609a      	str	r2, [r3, #8]
}
 8009d5e:	bf00      	nop
 8009d60:	371c      	adds	r7, #28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bc80      	pop	{r7}
 8009d66:	4770      	bx	lr

08009d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d101      	bne.n	8009d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e032      	b.n	8009de6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009db8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bc80      	pop	{r7}
 8009dee:	4770      	bx	lr

08009df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bc80      	pop	{r7}
 8009e00:	4770      	bx	lr

08009e02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr

08009e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e03f      	b.n	8009ea6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d106      	bne.n	8009e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7fe fc82 	bl	8008744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2224      	movs	r2, #36	; 0x24
 8009e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68da      	ldr	r2, [r3, #12]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f90b 	bl	800a074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	691a      	ldr	r2, [r3, #16]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	695a      	ldr	r2, [r3, #20]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68da      	ldr	r2, [r3, #12]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2220      	movs	r2, #32
 8009e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b088      	sub	sp, #32
 8009eb2:	af02      	add	r7, sp, #8
 8009eb4:	60f8      	str	r0, [r7, #12]
 8009eb6:	60b9      	str	r1, [r7, #8]
 8009eb8:	603b      	str	r3, [r7, #0]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b20      	cmp	r3, #32
 8009ecc:	f040 8083 	bne.w	8009fd6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d002      	beq.n	8009edc <HAL_UART_Transmit+0x2e>
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e07b      	b.n	8009fd8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d101      	bne.n	8009eee <HAL_UART_Transmit+0x40>
 8009eea:	2302      	movs	r3, #2
 8009eec:	e074      	b.n	8009fd8 <HAL_UART_Transmit+0x12a>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2221      	movs	r2, #33	; 0x21
 8009f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009f04:	f7fe fd26 	bl	8008954 <HAL_GetTick>
 8009f08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	88fa      	ldrh	r2, [r7, #6]
 8009f0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	88fa      	ldrh	r2, [r7, #6]
 8009f14:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009f16:	e042      	b.n	8009f9e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2e:	d122      	bne.n	8009f76 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2200      	movs	r2, #0
 8009f38:	2180      	movs	r1, #128	; 0x80
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 f850 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8009f46:	2303      	movs	r3, #3
 8009f48:	e046      	b.n	8009fd8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f5c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d103      	bne.n	8009f6e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	3302      	adds	r3, #2
 8009f6a:	60bb      	str	r3, [r7, #8]
 8009f6c:	e017      	b.n	8009f9e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	3301      	adds	r3, #1
 8009f72:	60bb      	str	r3, [r7, #8]
 8009f74:	e013      	b.n	8009f9e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2180      	movs	r1, #128	; 0x80
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f000 f82d 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e023      	b.n	8009fd8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	60ba      	str	r2, [r7, #8]
 8009f96:	781a      	ldrb	r2, [r3, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1b7      	bne.n	8009f18 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2140      	movs	r1, #64	; 0x40
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 f814 	bl	8009fe0 <UART_WaitOnFlagUntilTimeout>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e00a      	b.n	8009fd8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	e000      	b.n	8009fd8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009fd6:	2302      	movs	r3, #2
  }
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	4613      	mov	r3, r2
 8009fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff0:	e02c      	b.n	800a04c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff8:	d028      	beq.n	800a04c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d007      	beq.n	800a010 <UART_WaitOnFlagUntilTimeout+0x30>
 800a000:	f7fe fca8 	bl	8008954 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d21d      	bcs.n	800a04c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68da      	ldr	r2, [r3, #12]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a01e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	695a      	ldr	r2, [r3, #20]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f022 0201 	bic.w	r2, r2, #1
 800a02e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2220      	movs	r2, #32
 800a034:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2220      	movs	r2, #32
 800a03c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e00f      	b.n	800a06c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	4013      	ands	r3, r2
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	429a      	cmp	r2, r3
 800a05a:	bf0c      	ite	eq
 800a05c:	2301      	moveq	r3, #1
 800a05e:	2300      	movne	r3, #0
 800a060:	b2db      	uxtb	r3, r3
 800a062:	461a      	mov	r2, r3
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	429a      	cmp	r2, r3
 800a068:	d0c3      	beq.n	8009ff2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68da      	ldr	r2, [r3, #12]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	431a      	orrs	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a0ae:	f023 030c 	bic.w	r3, r3, #12
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	6812      	ldr	r2, [r2, #0]
 800a0b6:	68f9      	ldr	r1, [r7, #12]
 800a0b8:	430b      	orrs	r3, r1
 800a0ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	699a      	ldr	r2, [r3, #24]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a52      	ldr	r2, [pc, #328]	; (800a220 <UART_SetConfig+0x1ac>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d14e      	bne.n	800a17a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a0dc:	f7ff fae8 	bl	80096b0 <HAL_RCC_GetPCLK2Freq>
 800a0e0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	009a      	lsls	r2, r3, #2
 800a0ec:	441a      	add	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f8:	4a4a      	ldr	r2, [pc, #296]	; (800a224 <UART_SetConfig+0x1b0>)
 800a0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a0fe:	095b      	lsrs	r3, r3, #5
 800a100:	0119      	lsls	r1, r3, #4
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009a      	lsls	r2, r3, #2
 800a10c:	441a      	add	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	fbb2 f2f3 	udiv	r2, r2, r3
 800a118:	4b42      	ldr	r3, [pc, #264]	; (800a224 <UART_SetConfig+0x1b0>)
 800a11a:	fba3 0302 	umull	r0, r3, r3, r2
 800a11e:	095b      	lsrs	r3, r3, #5
 800a120:	2064      	movs	r0, #100	; 0x64
 800a122:	fb00 f303 	mul.w	r3, r0, r3
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	3332      	adds	r3, #50	; 0x32
 800a12c:	4a3d      	ldr	r2, [pc, #244]	; (800a224 <UART_SetConfig+0x1b0>)
 800a12e:	fba2 2303 	umull	r2, r3, r2, r3
 800a132:	095b      	lsrs	r3, r3, #5
 800a134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a138:	4419      	add	r1, r3
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	4613      	mov	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	009a      	lsls	r2, r3, #2
 800a144:	441a      	add	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a150:	4b34      	ldr	r3, [pc, #208]	; (800a224 <UART_SetConfig+0x1b0>)
 800a152:	fba3 0302 	umull	r0, r3, r3, r2
 800a156:	095b      	lsrs	r3, r3, #5
 800a158:	2064      	movs	r0, #100	; 0x64
 800a15a:	fb00 f303 	mul.w	r3, r0, r3
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	011b      	lsls	r3, r3, #4
 800a162:	3332      	adds	r3, #50	; 0x32
 800a164:	4a2f      	ldr	r2, [pc, #188]	; (800a224 <UART_SetConfig+0x1b0>)
 800a166:	fba2 2303 	umull	r2, r3, r2, r3
 800a16a:	095b      	lsrs	r3, r3, #5
 800a16c:	f003 020f 	and.w	r2, r3, #15
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	440a      	add	r2, r1
 800a176:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800a178:	e04d      	b.n	800a216 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800a17a:	f7ff fa85 	bl	8009688 <HAL_RCC_GetPCLK1Freq>
 800a17e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009a      	lsls	r2, r3, #2
 800a18a:	441a      	add	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	fbb2 f3f3 	udiv	r3, r2, r3
 800a196:	4a23      	ldr	r2, [pc, #140]	; (800a224 <UART_SetConfig+0x1b0>)
 800a198:	fba2 2303 	umull	r2, r3, r2, r3
 800a19c:	095b      	lsrs	r3, r3, #5
 800a19e:	0119      	lsls	r1, r3, #4
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	009a      	lsls	r2, r3, #2
 800a1aa:	441a      	add	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a1b6:	4b1b      	ldr	r3, [pc, #108]	; (800a224 <UART_SetConfig+0x1b0>)
 800a1b8:	fba3 0302 	umull	r0, r3, r3, r2
 800a1bc:	095b      	lsrs	r3, r3, #5
 800a1be:	2064      	movs	r0, #100	; 0x64
 800a1c0:	fb00 f303 	mul.w	r3, r0, r3
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	011b      	lsls	r3, r3, #4
 800a1c8:	3332      	adds	r3, #50	; 0x32
 800a1ca:	4a16      	ldr	r2, [pc, #88]	; (800a224 <UART_SetConfig+0x1b0>)
 800a1cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d0:	095b      	lsrs	r3, r3, #5
 800a1d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1d6:	4419      	add	r1, r3
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	009a      	lsls	r2, r3, #2
 800a1e2:	441a      	add	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	fbb2 f2f3 	udiv	r2, r2, r3
 800a1ee:	4b0d      	ldr	r3, [pc, #52]	; (800a224 <UART_SetConfig+0x1b0>)
 800a1f0:	fba3 0302 	umull	r0, r3, r3, r2
 800a1f4:	095b      	lsrs	r3, r3, #5
 800a1f6:	2064      	movs	r0, #100	; 0x64
 800a1f8:	fb00 f303 	mul.w	r3, r0, r3
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	011b      	lsls	r3, r3, #4
 800a200:	3332      	adds	r3, #50	; 0x32
 800a202:	4a08      	ldr	r2, [pc, #32]	; (800a224 <UART_SetConfig+0x1b0>)
 800a204:	fba2 2303 	umull	r2, r3, r2, r3
 800a208:	095b      	lsrs	r3, r3, #5
 800a20a:	f003 020f 	and.w	r2, r3, #15
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	440a      	add	r2, r1
 800a214:	609a      	str	r2, [r3, #8]
}
 800a216:	bf00      	nop
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	40013800 	.word	0x40013800
 800a224:	51eb851f 	.word	0x51eb851f

0800a228 <__errno>:
 800a228:	4b01      	ldr	r3, [pc, #4]	; (800a230 <__errno+0x8>)
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	2000000c 	.word	0x2000000c

0800a234 <__libc_init_array>:
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	2500      	movs	r5, #0
 800a238:	4e0c      	ldr	r6, [pc, #48]	; (800a26c <__libc_init_array+0x38>)
 800a23a:	4c0d      	ldr	r4, [pc, #52]	; (800a270 <__libc_init_array+0x3c>)
 800a23c:	1ba4      	subs	r4, r4, r6
 800a23e:	10a4      	asrs	r4, r4, #2
 800a240:	42a5      	cmp	r5, r4
 800a242:	d109      	bne.n	800a258 <__libc_init_array+0x24>
 800a244:	f000 fc88 	bl	800ab58 <_init>
 800a248:	2500      	movs	r5, #0
 800a24a:	4e0a      	ldr	r6, [pc, #40]	; (800a274 <__libc_init_array+0x40>)
 800a24c:	4c0a      	ldr	r4, [pc, #40]	; (800a278 <__libc_init_array+0x44>)
 800a24e:	1ba4      	subs	r4, r4, r6
 800a250:	10a4      	asrs	r4, r4, #2
 800a252:	42a5      	cmp	r5, r4
 800a254:	d105      	bne.n	800a262 <__libc_init_array+0x2e>
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a25c:	4798      	blx	r3
 800a25e:	3501      	adds	r5, #1
 800a260:	e7ee      	b.n	800a240 <__libc_init_array+0xc>
 800a262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a266:	4798      	blx	r3
 800a268:	3501      	adds	r5, #1
 800a26a:	e7f2      	b.n	800a252 <__libc_init_array+0x1e>
 800a26c:	0800ac08 	.word	0x0800ac08
 800a270:	0800ac08 	.word	0x0800ac08
 800a274:	0800ac08 	.word	0x0800ac08
 800a278:	0800ac0c 	.word	0x0800ac0c

0800a27c <memset>:
 800a27c:	4603      	mov	r3, r0
 800a27e:	4402      	add	r2, r0
 800a280:	4293      	cmp	r3, r2
 800a282:	d100      	bne.n	800a286 <memset+0xa>
 800a284:	4770      	bx	lr
 800a286:	f803 1b01 	strb.w	r1, [r3], #1
 800a28a:	e7f9      	b.n	800a280 <memset+0x4>

0800a28c <_puts_r>:
 800a28c:	b570      	push	{r4, r5, r6, lr}
 800a28e:	460e      	mov	r6, r1
 800a290:	4605      	mov	r5, r0
 800a292:	b118      	cbz	r0, 800a29c <_puts_r+0x10>
 800a294:	6983      	ldr	r3, [r0, #24]
 800a296:	b90b      	cbnz	r3, 800a29c <_puts_r+0x10>
 800a298:	f000 fa0c 	bl	800a6b4 <__sinit>
 800a29c:	69ab      	ldr	r3, [r5, #24]
 800a29e:	68ac      	ldr	r4, [r5, #8]
 800a2a0:	b913      	cbnz	r3, 800a2a8 <_puts_r+0x1c>
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f000 fa06 	bl	800a6b4 <__sinit>
 800a2a8:	4b23      	ldr	r3, [pc, #140]	; (800a338 <_puts_r+0xac>)
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	d117      	bne.n	800a2de <_puts_r+0x52>
 800a2ae:	686c      	ldr	r4, [r5, #4]
 800a2b0:	89a3      	ldrh	r3, [r4, #12]
 800a2b2:	071b      	lsls	r3, r3, #28
 800a2b4:	d51d      	bpl.n	800a2f2 <_puts_r+0x66>
 800a2b6:	6923      	ldr	r3, [r4, #16]
 800a2b8:	b1db      	cbz	r3, 800a2f2 <_puts_r+0x66>
 800a2ba:	3e01      	subs	r6, #1
 800a2bc:	68a3      	ldr	r3, [r4, #8]
 800a2be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	60a3      	str	r3, [r4, #8]
 800a2c6:	b9e9      	cbnz	r1, 800a304 <_puts_r+0x78>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	da2e      	bge.n	800a32a <_puts_r+0x9e>
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	210a      	movs	r1, #10
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	f000 f83f 	bl	800a354 <__swbuf_r>
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	d011      	beq.n	800a2fe <_puts_r+0x72>
 800a2da:	200a      	movs	r0, #10
 800a2dc:	e011      	b.n	800a302 <_puts_r+0x76>
 800a2de:	4b17      	ldr	r3, [pc, #92]	; (800a33c <_puts_r+0xb0>)
 800a2e0:	429c      	cmp	r4, r3
 800a2e2:	d101      	bne.n	800a2e8 <_puts_r+0x5c>
 800a2e4:	68ac      	ldr	r4, [r5, #8]
 800a2e6:	e7e3      	b.n	800a2b0 <_puts_r+0x24>
 800a2e8:	4b15      	ldr	r3, [pc, #84]	; (800a340 <_puts_r+0xb4>)
 800a2ea:	429c      	cmp	r4, r3
 800a2ec:	bf08      	it	eq
 800a2ee:	68ec      	ldreq	r4, [r5, #12]
 800a2f0:	e7de      	b.n	800a2b0 <_puts_r+0x24>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f000 f87f 	bl	800a3f8 <__swsetup_r>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d0dd      	beq.n	800a2ba <_puts_r+0x2e>
 800a2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	2b00      	cmp	r3, #0
 800a306:	da04      	bge.n	800a312 <_puts_r+0x86>
 800a308:	69a2      	ldr	r2, [r4, #24]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	dc06      	bgt.n	800a31c <_puts_r+0x90>
 800a30e:	290a      	cmp	r1, #10
 800a310:	d004      	beq.n	800a31c <_puts_r+0x90>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	6022      	str	r2, [r4, #0]
 800a318:	7019      	strb	r1, [r3, #0]
 800a31a:	e7cf      	b.n	800a2bc <_puts_r+0x30>
 800a31c:	4622      	mov	r2, r4
 800a31e:	4628      	mov	r0, r5
 800a320:	f000 f818 	bl	800a354 <__swbuf_r>
 800a324:	3001      	adds	r0, #1
 800a326:	d1c9      	bne.n	800a2bc <_puts_r+0x30>
 800a328:	e7e9      	b.n	800a2fe <_puts_r+0x72>
 800a32a:	200a      	movs	r0, #10
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	6022      	str	r2, [r4, #0]
 800a332:	7018      	strb	r0, [r3, #0]
 800a334:	e7e5      	b.n	800a302 <_puts_r+0x76>
 800a336:	bf00      	nop
 800a338:	0800abc8 	.word	0x0800abc8
 800a33c:	0800abe8 	.word	0x0800abe8
 800a340:	0800aba8 	.word	0x0800aba8

0800a344 <puts>:
 800a344:	4b02      	ldr	r3, [pc, #8]	; (800a350 <puts+0xc>)
 800a346:	4601      	mov	r1, r0
 800a348:	6818      	ldr	r0, [r3, #0]
 800a34a:	f7ff bf9f 	b.w	800a28c <_puts_r>
 800a34e:	bf00      	nop
 800a350:	2000000c 	.word	0x2000000c

0800a354 <__swbuf_r>:
 800a354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a356:	460e      	mov	r6, r1
 800a358:	4614      	mov	r4, r2
 800a35a:	4605      	mov	r5, r0
 800a35c:	b118      	cbz	r0, 800a366 <__swbuf_r+0x12>
 800a35e:	6983      	ldr	r3, [r0, #24]
 800a360:	b90b      	cbnz	r3, 800a366 <__swbuf_r+0x12>
 800a362:	f000 f9a7 	bl	800a6b4 <__sinit>
 800a366:	4b21      	ldr	r3, [pc, #132]	; (800a3ec <__swbuf_r+0x98>)
 800a368:	429c      	cmp	r4, r3
 800a36a:	d12a      	bne.n	800a3c2 <__swbuf_r+0x6e>
 800a36c:	686c      	ldr	r4, [r5, #4]
 800a36e:	69a3      	ldr	r3, [r4, #24]
 800a370:	60a3      	str	r3, [r4, #8]
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	071a      	lsls	r2, r3, #28
 800a376:	d52e      	bpl.n	800a3d6 <__swbuf_r+0x82>
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	b363      	cbz	r3, 800a3d6 <__swbuf_r+0x82>
 800a37c:	6923      	ldr	r3, [r4, #16]
 800a37e:	6820      	ldr	r0, [r4, #0]
 800a380:	b2f6      	uxtb	r6, r6
 800a382:	1ac0      	subs	r0, r0, r3
 800a384:	6963      	ldr	r3, [r4, #20]
 800a386:	4637      	mov	r7, r6
 800a388:	4283      	cmp	r3, r0
 800a38a:	dc04      	bgt.n	800a396 <__swbuf_r+0x42>
 800a38c:	4621      	mov	r1, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	f000 f926 	bl	800a5e0 <_fflush_r>
 800a394:	bb28      	cbnz	r0, 800a3e2 <__swbuf_r+0x8e>
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	3001      	adds	r0, #1
 800a39a:	3b01      	subs	r3, #1
 800a39c:	60a3      	str	r3, [r4, #8]
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	1c5a      	adds	r2, r3, #1
 800a3a2:	6022      	str	r2, [r4, #0]
 800a3a4:	701e      	strb	r6, [r3, #0]
 800a3a6:	6963      	ldr	r3, [r4, #20]
 800a3a8:	4283      	cmp	r3, r0
 800a3aa:	d004      	beq.n	800a3b6 <__swbuf_r+0x62>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	07db      	lsls	r3, r3, #31
 800a3b0:	d519      	bpl.n	800a3e6 <__swbuf_r+0x92>
 800a3b2:	2e0a      	cmp	r6, #10
 800a3b4:	d117      	bne.n	800a3e6 <__swbuf_r+0x92>
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f000 f911 	bl	800a5e0 <_fflush_r>
 800a3be:	b190      	cbz	r0, 800a3e6 <__swbuf_r+0x92>
 800a3c0:	e00f      	b.n	800a3e2 <__swbuf_r+0x8e>
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <__swbuf_r+0x9c>)
 800a3c4:	429c      	cmp	r4, r3
 800a3c6:	d101      	bne.n	800a3cc <__swbuf_r+0x78>
 800a3c8:	68ac      	ldr	r4, [r5, #8]
 800a3ca:	e7d0      	b.n	800a36e <__swbuf_r+0x1a>
 800a3cc:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <__swbuf_r+0xa0>)
 800a3ce:	429c      	cmp	r4, r3
 800a3d0:	bf08      	it	eq
 800a3d2:	68ec      	ldreq	r4, [r5, #12]
 800a3d4:	e7cb      	b.n	800a36e <__swbuf_r+0x1a>
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f000 f80d 	bl	800a3f8 <__swsetup_r>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d0cc      	beq.n	800a37c <__swbuf_r+0x28>
 800a3e2:	f04f 37ff 	mov.w	r7, #4294967295
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0800abc8 	.word	0x0800abc8
 800a3f0:	0800abe8 	.word	0x0800abe8
 800a3f4:	0800aba8 	.word	0x0800aba8

0800a3f8 <__swsetup_r>:
 800a3f8:	4b32      	ldr	r3, [pc, #200]	; (800a4c4 <__swsetup_r+0xcc>)
 800a3fa:	b570      	push	{r4, r5, r6, lr}
 800a3fc:	681d      	ldr	r5, [r3, #0]
 800a3fe:	4606      	mov	r6, r0
 800a400:	460c      	mov	r4, r1
 800a402:	b125      	cbz	r5, 800a40e <__swsetup_r+0x16>
 800a404:	69ab      	ldr	r3, [r5, #24]
 800a406:	b913      	cbnz	r3, 800a40e <__swsetup_r+0x16>
 800a408:	4628      	mov	r0, r5
 800a40a:	f000 f953 	bl	800a6b4 <__sinit>
 800a40e:	4b2e      	ldr	r3, [pc, #184]	; (800a4c8 <__swsetup_r+0xd0>)
 800a410:	429c      	cmp	r4, r3
 800a412:	d10f      	bne.n	800a434 <__swsetup_r+0x3c>
 800a414:	686c      	ldr	r4, [r5, #4]
 800a416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	0715      	lsls	r5, r2, #28
 800a41e:	d42c      	bmi.n	800a47a <__swsetup_r+0x82>
 800a420:	06d0      	lsls	r0, r2, #27
 800a422:	d411      	bmi.n	800a448 <__swsetup_r+0x50>
 800a424:	2209      	movs	r2, #9
 800a426:	6032      	str	r2, [r6, #0]
 800a428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a42c:	81a3      	strh	r3, [r4, #12]
 800a42e:	f04f 30ff 	mov.w	r0, #4294967295
 800a432:	e03e      	b.n	800a4b2 <__swsetup_r+0xba>
 800a434:	4b25      	ldr	r3, [pc, #148]	; (800a4cc <__swsetup_r+0xd4>)
 800a436:	429c      	cmp	r4, r3
 800a438:	d101      	bne.n	800a43e <__swsetup_r+0x46>
 800a43a:	68ac      	ldr	r4, [r5, #8]
 800a43c:	e7eb      	b.n	800a416 <__swsetup_r+0x1e>
 800a43e:	4b24      	ldr	r3, [pc, #144]	; (800a4d0 <__swsetup_r+0xd8>)
 800a440:	429c      	cmp	r4, r3
 800a442:	bf08      	it	eq
 800a444:	68ec      	ldreq	r4, [r5, #12]
 800a446:	e7e6      	b.n	800a416 <__swsetup_r+0x1e>
 800a448:	0751      	lsls	r1, r2, #29
 800a44a:	d512      	bpl.n	800a472 <__swsetup_r+0x7a>
 800a44c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a44e:	b141      	cbz	r1, 800a462 <__swsetup_r+0x6a>
 800a450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a454:	4299      	cmp	r1, r3
 800a456:	d002      	beq.n	800a45e <__swsetup_r+0x66>
 800a458:	4630      	mov	r0, r6
 800a45a:	f000 fa19 	bl	800a890 <_free_r>
 800a45e:	2300      	movs	r3, #0
 800a460:	6363      	str	r3, [r4, #52]	; 0x34
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a468:	81a3      	strh	r3, [r4, #12]
 800a46a:	2300      	movs	r3, #0
 800a46c:	6063      	str	r3, [r4, #4]
 800a46e:	6923      	ldr	r3, [r4, #16]
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	f043 0308 	orr.w	r3, r3, #8
 800a478:	81a3      	strh	r3, [r4, #12]
 800a47a:	6923      	ldr	r3, [r4, #16]
 800a47c:	b94b      	cbnz	r3, 800a492 <__swsetup_r+0x9a>
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a488:	d003      	beq.n	800a492 <__swsetup_r+0x9a>
 800a48a:	4621      	mov	r1, r4
 800a48c:	4630      	mov	r0, r6
 800a48e:	f000 f9bf 	bl	800a810 <__smakebuf_r>
 800a492:	89a2      	ldrh	r2, [r4, #12]
 800a494:	f012 0301 	ands.w	r3, r2, #1
 800a498:	d00c      	beq.n	800a4b4 <__swsetup_r+0xbc>
 800a49a:	2300      	movs	r3, #0
 800a49c:	60a3      	str	r3, [r4, #8]
 800a49e:	6963      	ldr	r3, [r4, #20]
 800a4a0:	425b      	negs	r3, r3
 800a4a2:	61a3      	str	r3, [r4, #24]
 800a4a4:	6923      	ldr	r3, [r4, #16]
 800a4a6:	b953      	cbnz	r3, 800a4be <__swsetup_r+0xc6>
 800a4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a4b0:	d1ba      	bne.n	800a428 <__swsetup_r+0x30>
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	0792      	lsls	r2, r2, #30
 800a4b6:	bf58      	it	pl
 800a4b8:	6963      	ldrpl	r3, [r4, #20]
 800a4ba:	60a3      	str	r3, [r4, #8]
 800a4bc:	e7f2      	b.n	800a4a4 <__swsetup_r+0xac>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	e7f7      	b.n	800a4b2 <__swsetup_r+0xba>
 800a4c2:	bf00      	nop
 800a4c4:	2000000c 	.word	0x2000000c
 800a4c8:	0800abc8 	.word	0x0800abc8
 800a4cc:	0800abe8 	.word	0x0800abe8
 800a4d0:	0800aba8 	.word	0x0800aba8

0800a4d4 <__sflush_r>:
 800a4d4:	898a      	ldrh	r2, [r1, #12]
 800a4d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4da:	4605      	mov	r5, r0
 800a4dc:	0710      	lsls	r0, r2, #28
 800a4de:	460c      	mov	r4, r1
 800a4e0:	d458      	bmi.n	800a594 <__sflush_r+0xc0>
 800a4e2:	684b      	ldr	r3, [r1, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	dc05      	bgt.n	800a4f4 <__sflush_r+0x20>
 800a4e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	dc02      	bgt.n	800a4f4 <__sflush_r+0x20>
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4f6:	2e00      	cmp	r6, #0
 800a4f8:	d0f9      	beq.n	800a4ee <__sflush_r+0x1a>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a500:	682f      	ldr	r7, [r5, #0]
 800a502:	6a21      	ldr	r1, [r4, #32]
 800a504:	602b      	str	r3, [r5, #0]
 800a506:	d032      	beq.n	800a56e <__sflush_r+0x9a>
 800a508:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a50a:	89a3      	ldrh	r3, [r4, #12]
 800a50c:	075a      	lsls	r2, r3, #29
 800a50e:	d505      	bpl.n	800a51c <__sflush_r+0x48>
 800a510:	6863      	ldr	r3, [r4, #4]
 800a512:	1ac0      	subs	r0, r0, r3
 800a514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a516:	b10b      	cbz	r3, 800a51c <__sflush_r+0x48>
 800a518:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a51a:	1ac0      	subs	r0, r0, r3
 800a51c:	2300      	movs	r3, #0
 800a51e:	4602      	mov	r2, r0
 800a520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a522:	6a21      	ldr	r1, [r4, #32]
 800a524:	4628      	mov	r0, r5
 800a526:	47b0      	blx	r6
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	d106      	bne.n	800a53c <__sflush_r+0x68>
 800a52e:	6829      	ldr	r1, [r5, #0]
 800a530:	291d      	cmp	r1, #29
 800a532:	d848      	bhi.n	800a5c6 <__sflush_r+0xf2>
 800a534:	4a29      	ldr	r2, [pc, #164]	; (800a5dc <__sflush_r+0x108>)
 800a536:	40ca      	lsrs	r2, r1
 800a538:	07d6      	lsls	r6, r2, #31
 800a53a:	d544      	bpl.n	800a5c6 <__sflush_r+0xf2>
 800a53c:	2200      	movs	r2, #0
 800a53e:	6062      	str	r2, [r4, #4]
 800a540:	6922      	ldr	r2, [r4, #16]
 800a542:	04d9      	lsls	r1, r3, #19
 800a544:	6022      	str	r2, [r4, #0]
 800a546:	d504      	bpl.n	800a552 <__sflush_r+0x7e>
 800a548:	1c42      	adds	r2, r0, #1
 800a54a:	d101      	bne.n	800a550 <__sflush_r+0x7c>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b903      	cbnz	r3, 800a552 <__sflush_r+0x7e>
 800a550:	6560      	str	r0, [r4, #84]	; 0x54
 800a552:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a554:	602f      	str	r7, [r5, #0]
 800a556:	2900      	cmp	r1, #0
 800a558:	d0c9      	beq.n	800a4ee <__sflush_r+0x1a>
 800a55a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a55e:	4299      	cmp	r1, r3
 800a560:	d002      	beq.n	800a568 <__sflush_r+0x94>
 800a562:	4628      	mov	r0, r5
 800a564:	f000 f994 	bl	800a890 <_free_r>
 800a568:	2000      	movs	r0, #0
 800a56a:	6360      	str	r0, [r4, #52]	; 0x34
 800a56c:	e7c0      	b.n	800a4f0 <__sflush_r+0x1c>
 800a56e:	2301      	movs	r3, #1
 800a570:	4628      	mov	r0, r5
 800a572:	47b0      	blx	r6
 800a574:	1c41      	adds	r1, r0, #1
 800a576:	d1c8      	bne.n	800a50a <__sflush_r+0x36>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d0c5      	beq.n	800a50a <__sflush_r+0x36>
 800a57e:	2b1d      	cmp	r3, #29
 800a580:	d001      	beq.n	800a586 <__sflush_r+0xb2>
 800a582:	2b16      	cmp	r3, #22
 800a584:	d101      	bne.n	800a58a <__sflush_r+0xb6>
 800a586:	602f      	str	r7, [r5, #0]
 800a588:	e7b1      	b.n	800a4ee <__sflush_r+0x1a>
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a590:	81a3      	strh	r3, [r4, #12]
 800a592:	e7ad      	b.n	800a4f0 <__sflush_r+0x1c>
 800a594:	690f      	ldr	r7, [r1, #16]
 800a596:	2f00      	cmp	r7, #0
 800a598:	d0a9      	beq.n	800a4ee <__sflush_r+0x1a>
 800a59a:	0793      	lsls	r3, r2, #30
 800a59c:	bf18      	it	ne
 800a59e:	2300      	movne	r3, #0
 800a5a0:	680e      	ldr	r6, [r1, #0]
 800a5a2:	bf08      	it	eq
 800a5a4:	694b      	ldreq	r3, [r1, #20]
 800a5a6:	eba6 0807 	sub.w	r8, r6, r7
 800a5aa:	600f      	str	r7, [r1, #0]
 800a5ac:	608b      	str	r3, [r1, #8]
 800a5ae:	f1b8 0f00 	cmp.w	r8, #0
 800a5b2:	dd9c      	ble.n	800a4ee <__sflush_r+0x1a>
 800a5b4:	4643      	mov	r3, r8
 800a5b6:	463a      	mov	r2, r7
 800a5b8:	6a21      	ldr	r1, [r4, #32]
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5be:	47b0      	blx	r6
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	dc06      	bgt.n	800a5d2 <__sflush_r+0xfe>
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ca:	81a3      	strh	r3, [r4, #12]
 800a5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d0:	e78e      	b.n	800a4f0 <__sflush_r+0x1c>
 800a5d2:	4407      	add	r7, r0
 800a5d4:	eba8 0800 	sub.w	r8, r8, r0
 800a5d8:	e7e9      	b.n	800a5ae <__sflush_r+0xda>
 800a5da:	bf00      	nop
 800a5dc:	20400001 	.word	0x20400001

0800a5e0 <_fflush_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	690b      	ldr	r3, [r1, #16]
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	b1db      	cbz	r3, 800a622 <_fflush_r+0x42>
 800a5ea:	b118      	cbz	r0, 800a5f4 <_fflush_r+0x14>
 800a5ec:	6983      	ldr	r3, [r0, #24]
 800a5ee:	b90b      	cbnz	r3, 800a5f4 <_fflush_r+0x14>
 800a5f0:	f000 f860 	bl	800a6b4 <__sinit>
 800a5f4:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <_fflush_r+0x48>)
 800a5f6:	429c      	cmp	r4, r3
 800a5f8:	d109      	bne.n	800a60e <_fflush_r+0x2e>
 800a5fa:	686c      	ldr	r4, [r5, #4]
 800a5fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a600:	b17b      	cbz	r3, 800a622 <_fflush_r+0x42>
 800a602:	4621      	mov	r1, r4
 800a604:	4628      	mov	r0, r5
 800a606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a60a:	f7ff bf63 	b.w	800a4d4 <__sflush_r>
 800a60e:	4b07      	ldr	r3, [pc, #28]	; (800a62c <_fflush_r+0x4c>)
 800a610:	429c      	cmp	r4, r3
 800a612:	d101      	bne.n	800a618 <_fflush_r+0x38>
 800a614:	68ac      	ldr	r4, [r5, #8]
 800a616:	e7f1      	b.n	800a5fc <_fflush_r+0x1c>
 800a618:	4b05      	ldr	r3, [pc, #20]	; (800a630 <_fflush_r+0x50>)
 800a61a:	429c      	cmp	r4, r3
 800a61c:	bf08      	it	eq
 800a61e:	68ec      	ldreq	r4, [r5, #12]
 800a620:	e7ec      	b.n	800a5fc <_fflush_r+0x1c>
 800a622:	2000      	movs	r0, #0
 800a624:	bd38      	pop	{r3, r4, r5, pc}
 800a626:	bf00      	nop
 800a628:	0800abc8 	.word	0x0800abc8
 800a62c:	0800abe8 	.word	0x0800abe8
 800a630:	0800aba8 	.word	0x0800aba8

0800a634 <std>:
 800a634:	2300      	movs	r3, #0
 800a636:	b510      	push	{r4, lr}
 800a638:	4604      	mov	r4, r0
 800a63a:	e9c0 3300 	strd	r3, r3, [r0]
 800a63e:	6083      	str	r3, [r0, #8]
 800a640:	8181      	strh	r1, [r0, #12]
 800a642:	6643      	str	r3, [r0, #100]	; 0x64
 800a644:	81c2      	strh	r2, [r0, #14]
 800a646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a64a:	6183      	str	r3, [r0, #24]
 800a64c:	4619      	mov	r1, r3
 800a64e:	2208      	movs	r2, #8
 800a650:	305c      	adds	r0, #92	; 0x5c
 800a652:	f7ff fe13 	bl	800a27c <memset>
 800a656:	4b05      	ldr	r3, [pc, #20]	; (800a66c <std+0x38>)
 800a658:	6224      	str	r4, [r4, #32]
 800a65a:	6263      	str	r3, [r4, #36]	; 0x24
 800a65c:	4b04      	ldr	r3, [pc, #16]	; (800a670 <std+0x3c>)
 800a65e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a660:	4b04      	ldr	r3, [pc, #16]	; (800a674 <std+0x40>)
 800a662:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a664:	4b04      	ldr	r3, [pc, #16]	; (800a678 <std+0x44>)
 800a666:	6323      	str	r3, [r4, #48]	; 0x30
 800a668:	bd10      	pop	{r4, pc}
 800a66a:	bf00      	nop
 800a66c:	0800a9fd 	.word	0x0800a9fd
 800a670:	0800aa1f 	.word	0x0800aa1f
 800a674:	0800aa57 	.word	0x0800aa57
 800a678:	0800aa7b 	.word	0x0800aa7b

0800a67c <_cleanup_r>:
 800a67c:	4901      	ldr	r1, [pc, #4]	; (800a684 <_cleanup_r+0x8>)
 800a67e:	f000 b885 	b.w	800a78c <_fwalk_reent>
 800a682:	bf00      	nop
 800a684:	0800a5e1 	.word	0x0800a5e1

0800a688 <__sfmoreglue>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	2568      	movs	r5, #104	; 0x68
 800a68c:	1e4a      	subs	r2, r1, #1
 800a68e:	4355      	muls	r5, r2
 800a690:	460e      	mov	r6, r1
 800a692:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a696:	f000 f947 	bl	800a928 <_malloc_r>
 800a69a:	4604      	mov	r4, r0
 800a69c:	b140      	cbz	r0, 800a6b0 <__sfmoreglue+0x28>
 800a69e:	2100      	movs	r1, #0
 800a6a0:	e9c0 1600 	strd	r1, r6, [r0]
 800a6a4:	300c      	adds	r0, #12
 800a6a6:	60a0      	str	r0, [r4, #8]
 800a6a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6ac:	f7ff fde6 	bl	800a27c <memset>
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}

0800a6b4 <__sinit>:
 800a6b4:	6983      	ldr	r3, [r0, #24]
 800a6b6:	b510      	push	{r4, lr}
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	bb33      	cbnz	r3, 800a70a <__sinit+0x56>
 800a6bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a6c0:	6503      	str	r3, [r0, #80]	; 0x50
 800a6c2:	4b12      	ldr	r3, [pc, #72]	; (800a70c <__sinit+0x58>)
 800a6c4:	4a12      	ldr	r2, [pc, #72]	; (800a710 <__sinit+0x5c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6282      	str	r2, [r0, #40]	; 0x28
 800a6ca:	4298      	cmp	r0, r3
 800a6cc:	bf04      	itt	eq
 800a6ce:	2301      	moveq	r3, #1
 800a6d0:	6183      	streq	r3, [r0, #24]
 800a6d2:	f000 f81f 	bl	800a714 <__sfp>
 800a6d6:	6060      	str	r0, [r4, #4]
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f000 f81b 	bl	800a714 <__sfp>
 800a6de:	60a0      	str	r0, [r4, #8]
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f000 f817 	bl	800a714 <__sfp>
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	60e0      	str	r0, [r4, #12]
 800a6ea:	2104      	movs	r1, #4
 800a6ec:	6860      	ldr	r0, [r4, #4]
 800a6ee:	f7ff ffa1 	bl	800a634 <std>
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	2109      	movs	r1, #9
 800a6f6:	68a0      	ldr	r0, [r4, #8]
 800a6f8:	f7ff ff9c 	bl	800a634 <std>
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	2112      	movs	r1, #18
 800a700:	68e0      	ldr	r0, [r4, #12]
 800a702:	f7ff ff97 	bl	800a634 <std>
 800a706:	2301      	movs	r3, #1
 800a708:	61a3      	str	r3, [r4, #24]
 800a70a:	bd10      	pop	{r4, pc}
 800a70c:	0800aba4 	.word	0x0800aba4
 800a710:	0800a67d 	.word	0x0800a67d

0800a714 <__sfp>:
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	4b1b      	ldr	r3, [pc, #108]	; (800a784 <__sfp+0x70>)
 800a718:	4607      	mov	r7, r0
 800a71a:	681e      	ldr	r6, [r3, #0]
 800a71c:	69b3      	ldr	r3, [r6, #24]
 800a71e:	b913      	cbnz	r3, 800a726 <__sfp+0x12>
 800a720:	4630      	mov	r0, r6
 800a722:	f7ff ffc7 	bl	800a6b4 <__sinit>
 800a726:	3648      	adds	r6, #72	; 0x48
 800a728:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	d503      	bpl.n	800a738 <__sfp+0x24>
 800a730:	6833      	ldr	r3, [r6, #0]
 800a732:	b133      	cbz	r3, 800a742 <__sfp+0x2e>
 800a734:	6836      	ldr	r6, [r6, #0]
 800a736:	e7f7      	b.n	800a728 <__sfp+0x14>
 800a738:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a73c:	b16d      	cbz	r5, 800a75a <__sfp+0x46>
 800a73e:	3468      	adds	r4, #104	; 0x68
 800a740:	e7f4      	b.n	800a72c <__sfp+0x18>
 800a742:	2104      	movs	r1, #4
 800a744:	4638      	mov	r0, r7
 800a746:	f7ff ff9f 	bl	800a688 <__sfmoreglue>
 800a74a:	6030      	str	r0, [r6, #0]
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d1f1      	bne.n	800a734 <__sfp+0x20>
 800a750:	230c      	movs	r3, #12
 800a752:	4604      	mov	r4, r0
 800a754:	603b      	str	r3, [r7, #0]
 800a756:	4620      	mov	r0, r4
 800a758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a75a:	4b0b      	ldr	r3, [pc, #44]	; (800a788 <__sfp+0x74>)
 800a75c:	6665      	str	r5, [r4, #100]	; 0x64
 800a75e:	e9c4 5500 	strd	r5, r5, [r4]
 800a762:	60a5      	str	r5, [r4, #8]
 800a764:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a768:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a76c:	2208      	movs	r2, #8
 800a76e:	4629      	mov	r1, r5
 800a770:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a774:	f7ff fd82 	bl	800a27c <memset>
 800a778:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a77c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a780:	e7e9      	b.n	800a756 <__sfp+0x42>
 800a782:	bf00      	nop
 800a784:	0800aba4 	.word	0x0800aba4
 800a788:	ffff0001 	.word	0xffff0001

0800a78c <_fwalk_reent>:
 800a78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a790:	4680      	mov	r8, r0
 800a792:	4689      	mov	r9, r1
 800a794:	2600      	movs	r6, #0
 800a796:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a79a:	b914      	cbnz	r4, 800a7a2 <_fwalk_reent+0x16>
 800a79c:	4630      	mov	r0, r6
 800a79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a7a6:	3f01      	subs	r7, #1
 800a7a8:	d501      	bpl.n	800a7ae <_fwalk_reent+0x22>
 800a7aa:	6824      	ldr	r4, [r4, #0]
 800a7ac:	e7f5      	b.n	800a79a <_fwalk_reent+0xe>
 800a7ae:	89ab      	ldrh	r3, [r5, #12]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d907      	bls.n	800a7c4 <_fwalk_reent+0x38>
 800a7b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	d003      	beq.n	800a7c4 <_fwalk_reent+0x38>
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4640      	mov	r0, r8
 800a7c0:	47c8      	blx	r9
 800a7c2:	4306      	orrs	r6, r0
 800a7c4:	3568      	adds	r5, #104	; 0x68
 800a7c6:	e7ee      	b.n	800a7a6 <_fwalk_reent+0x1a>

0800a7c8 <__swhatbuf_r>:
 800a7c8:	b570      	push	{r4, r5, r6, lr}
 800a7ca:	460e      	mov	r6, r1
 800a7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d0:	b096      	sub	sp, #88	; 0x58
 800a7d2:	2900      	cmp	r1, #0
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	461d      	mov	r5, r3
 800a7d8:	da07      	bge.n	800a7ea <__swhatbuf_r+0x22>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	602b      	str	r3, [r5, #0]
 800a7de:	89b3      	ldrh	r3, [r6, #12]
 800a7e0:	061a      	lsls	r2, r3, #24
 800a7e2:	d410      	bmi.n	800a806 <__swhatbuf_r+0x3e>
 800a7e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7e8:	e00e      	b.n	800a808 <__swhatbuf_r+0x40>
 800a7ea:	466a      	mov	r2, sp
 800a7ec:	f000 f96c 	bl	800aac8 <_fstat_r>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	dbf2      	blt.n	800a7da <__swhatbuf_r+0x12>
 800a7f4:	9a01      	ldr	r2, [sp, #4]
 800a7f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7fe:	425a      	negs	r2, r3
 800a800:	415a      	adcs	r2, r3
 800a802:	602a      	str	r2, [r5, #0]
 800a804:	e7ee      	b.n	800a7e4 <__swhatbuf_r+0x1c>
 800a806:	2340      	movs	r3, #64	; 0x40
 800a808:	2000      	movs	r0, #0
 800a80a:	6023      	str	r3, [r4, #0]
 800a80c:	b016      	add	sp, #88	; 0x58
 800a80e:	bd70      	pop	{r4, r5, r6, pc}

0800a810 <__smakebuf_r>:
 800a810:	898b      	ldrh	r3, [r1, #12]
 800a812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a814:	079d      	lsls	r5, r3, #30
 800a816:	4606      	mov	r6, r0
 800a818:	460c      	mov	r4, r1
 800a81a:	d507      	bpl.n	800a82c <__smakebuf_r+0x1c>
 800a81c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	6123      	str	r3, [r4, #16]
 800a824:	2301      	movs	r3, #1
 800a826:	6163      	str	r3, [r4, #20]
 800a828:	b002      	add	sp, #8
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	ab01      	add	r3, sp, #4
 800a82e:	466a      	mov	r2, sp
 800a830:	f7ff ffca 	bl	800a7c8 <__swhatbuf_r>
 800a834:	9900      	ldr	r1, [sp, #0]
 800a836:	4605      	mov	r5, r0
 800a838:	4630      	mov	r0, r6
 800a83a:	f000 f875 	bl	800a928 <_malloc_r>
 800a83e:	b948      	cbnz	r0, 800a854 <__smakebuf_r+0x44>
 800a840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a844:	059a      	lsls	r2, r3, #22
 800a846:	d4ef      	bmi.n	800a828 <__smakebuf_r+0x18>
 800a848:	f023 0303 	bic.w	r3, r3, #3
 800a84c:	f043 0302 	orr.w	r3, r3, #2
 800a850:	81a3      	strh	r3, [r4, #12]
 800a852:	e7e3      	b.n	800a81c <__smakebuf_r+0xc>
 800a854:	4b0d      	ldr	r3, [pc, #52]	; (800a88c <__smakebuf_r+0x7c>)
 800a856:	62b3      	str	r3, [r6, #40]	; 0x28
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	6020      	str	r0, [r4, #0]
 800a85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	9b00      	ldr	r3, [sp, #0]
 800a864:	6120      	str	r0, [r4, #16]
 800a866:	6163      	str	r3, [r4, #20]
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	b15b      	cbz	r3, 800a884 <__smakebuf_r+0x74>
 800a86c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a870:	4630      	mov	r0, r6
 800a872:	f000 f93b 	bl	800aaec <_isatty_r>
 800a876:	b128      	cbz	r0, 800a884 <__smakebuf_r+0x74>
 800a878:	89a3      	ldrh	r3, [r4, #12]
 800a87a:	f023 0303 	bic.w	r3, r3, #3
 800a87e:	f043 0301 	orr.w	r3, r3, #1
 800a882:	81a3      	strh	r3, [r4, #12]
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	431d      	orrs	r5, r3
 800a888:	81a5      	strh	r5, [r4, #12]
 800a88a:	e7cd      	b.n	800a828 <__smakebuf_r+0x18>
 800a88c:	0800a67d 	.word	0x0800a67d

0800a890 <_free_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4605      	mov	r5, r0
 800a894:	2900      	cmp	r1, #0
 800a896:	d043      	beq.n	800a920 <_free_r+0x90>
 800a898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a89c:	1f0c      	subs	r4, r1, #4
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bfb8      	it	lt
 800a8a2:	18e4      	addlt	r4, r4, r3
 800a8a4:	f000 f944 	bl	800ab30 <__malloc_lock>
 800a8a8:	4a1e      	ldr	r2, [pc, #120]	; (800a924 <_free_r+0x94>)
 800a8aa:	6813      	ldr	r3, [r2, #0]
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	b933      	cbnz	r3, 800a8be <_free_r+0x2e>
 800a8b0:	6063      	str	r3, [r4, #4]
 800a8b2:	6014      	str	r4, [r2, #0]
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ba:	f000 b93a 	b.w	800ab32 <__malloc_unlock>
 800a8be:	42a3      	cmp	r3, r4
 800a8c0:	d90b      	bls.n	800a8da <_free_r+0x4a>
 800a8c2:	6821      	ldr	r1, [r4, #0]
 800a8c4:	1862      	adds	r2, r4, r1
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	bf01      	itttt	eq
 800a8ca:	681a      	ldreq	r2, [r3, #0]
 800a8cc:	685b      	ldreq	r3, [r3, #4]
 800a8ce:	1852      	addeq	r2, r2, r1
 800a8d0:	6022      	streq	r2, [r4, #0]
 800a8d2:	6063      	str	r3, [r4, #4]
 800a8d4:	6004      	str	r4, [r0, #0]
 800a8d6:	e7ed      	b.n	800a8b4 <_free_r+0x24>
 800a8d8:	4613      	mov	r3, r2
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	b10a      	cbz	r2, 800a8e2 <_free_r+0x52>
 800a8de:	42a2      	cmp	r2, r4
 800a8e0:	d9fa      	bls.n	800a8d8 <_free_r+0x48>
 800a8e2:	6819      	ldr	r1, [r3, #0]
 800a8e4:	1858      	adds	r0, r3, r1
 800a8e6:	42a0      	cmp	r0, r4
 800a8e8:	d10b      	bne.n	800a902 <_free_r+0x72>
 800a8ea:	6820      	ldr	r0, [r4, #0]
 800a8ec:	4401      	add	r1, r0
 800a8ee:	1858      	adds	r0, r3, r1
 800a8f0:	4282      	cmp	r2, r0
 800a8f2:	6019      	str	r1, [r3, #0]
 800a8f4:	d1de      	bne.n	800a8b4 <_free_r+0x24>
 800a8f6:	6810      	ldr	r0, [r2, #0]
 800a8f8:	6852      	ldr	r2, [r2, #4]
 800a8fa:	4401      	add	r1, r0
 800a8fc:	6019      	str	r1, [r3, #0]
 800a8fe:	605a      	str	r2, [r3, #4]
 800a900:	e7d8      	b.n	800a8b4 <_free_r+0x24>
 800a902:	d902      	bls.n	800a90a <_free_r+0x7a>
 800a904:	230c      	movs	r3, #12
 800a906:	602b      	str	r3, [r5, #0]
 800a908:	e7d4      	b.n	800a8b4 <_free_r+0x24>
 800a90a:	6820      	ldr	r0, [r4, #0]
 800a90c:	1821      	adds	r1, r4, r0
 800a90e:	428a      	cmp	r2, r1
 800a910:	bf01      	itttt	eq
 800a912:	6811      	ldreq	r1, [r2, #0]
 800a914:	6852      	ldreq	r2, [r2, #4]
 800a916:	1809      	addeq	r1, r1, r0
 800a918:	6021      	streq	r1, [r4, #0]
 800a91a:	6062      	str	r2, [r4, #4]
 800a91c:	605c      	str	r4, [r3, #4]
 800a91e:	e7c9      	b.n	800a8b4 <_free_r+0x24>
 800a920:	bd38      	pop	{r3, r4, r5, pc}
 800a922:	bf00      	nop
 800a924:	20000094 	.word	0x20000094

0800a928 <_malloc_r>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	1ccd      	adds	r5, r1, #3
 800a92c:	f025 0503 	bic.w	r5, r5, #3
 800a930:	3508      	adds	r5, #8
 800a932:	2d0c      	cmp	r5, #12
 800a934:	bf38      	it	cc
 800a936:	250c      	movcc	r5, #12
 800a938:	2d00      	cmp	r5, #0
 800a93a:	4606      	mov	r6, r0
 800a93c:	db01      	blt.n	800a942 <_malloc_r+0x1a>
 800a93e:	42a9      	cmp	r1, r5
 800a940:	d903      	bls.n	800a94a <_malloc_r+0x22>
 800a942:	230c      	movs	r3, #12
 800a944:	6033      	str	r3, [r6, #0]
 800a946:	2000      	movs	r0, #0
 800a948:	bd70      	pop	{r4, r5, r6, pc}
 800a94a:	f000 f8f1 	bl	800ab30 <__malloc_lock>
 800a94e:	4a21      	ldr	r2, [pc, #132]	; (800a9d4 <_malloc_r+0xac>)
 800a950:	6814      	ldr	r4, [r2, #0]
 800a952:	4621      	mov	r1, r4
 800a954:	b991      	cbnz	r1, 800a97c <_malloc_r+0x54>
 800a956:	4c20      	ldr	r4, [pc, #128]	; (800a9d8 <_malloc_r+0xb0>)
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	b91b      	cbnz	r3, 800a964 <_malloc_r+0x3c>
 800a95c:	4630      	mov	r0, r6
 800a95e:	f000 f83d 	bl	800a9dc <_sbrk_r>
 800a962:	6020      	str	r0, [r4, #0]
 800a964:	4629      	mov	r1, r5
 800a966:	4630      	mov	r0, r6
 800a968:	f000 f838 	bl	800a9dc <_sbrk_r>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d124      	bne.n	800a9ba <_malloc_r+0x92>
 800a970:	230c      	movs	r3, #12
 800a972:	4630      	mov	r0, r6
 800a974:	6033      	str	r3, [r6, #0]
 800a976:	f000 f8dc 	bl	800ab32 <__malloc_unlock>
 800a97a:	e7e4      	b.n	800a946 <_malloc_r+0x1e>
 800a97c:	680b      	ldr	r3, [r1, #0]
 800a97e:	1b5b      	subs	r3, r3, r5
 800a980:	d418      	bmi.n	800a9b4 <_malloc_r+0x8c>
 800a982:	2b0b      	cmp	r3, #11
 800a984:	d90f      	bls.n	800a9a6 <_malloc_r+0x7e>
 800a986:	600b      	str	r3, [r1, #0]
 800a988:	18cc      	adds	r4, r1, r3
 800a98a:	50cd      	str	r5, [r1, r3]
 800a98c:	4630      	mov	r0, r6
 800a98e:	f000 f8d0 	bl	800ab32 <__malloc_unlock>
 800a992:	f104 000b 	add.w	r0, r4, #11
 800a996:	1d23      	adds	r3, r4, #4
 800a998:	f020 0007 	bic.w	r0, r0, #7
 800a99c:	1ac3      	subs	r3, r0, r3
 800a99e:	d0d3      	beq.n	800a948 <_malloc_r+0x20>
 800a9a0:	425a      	negs	r2, r3
 800a9a2:	50e2      	str	r2, [r4, r3]
 800a9a4:	e7d0      	b.n	800a948 <_malloc_r+0x20>
 800a9a6:	684b      	ldr	r3, [r1, #4]
 800a9a8:	428c      	cmp	r4, r1
 800a9aa:	bf16      	itet	ne
 800a9ac:	6063      	strne	r3, [r4, #4]
 800a9ae:	6013      	streq	r3, [r2, #0]
 800a9b0:	460c      	movne	r4, r1
 800a9b2:	e7eb      	b.n	800a98c <_malloc_r+0x64>
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	6849      	ldr	r1, [r1, #4]
 800a9b8:	e7cc      	b.n	800a954 <_malloc_r+0x2c>
 800a9ba:	1cc4      	adds	r4, r0, #3
 800a9bc:	f024 0403 	bic.w	r4, r4, #3
 800a9c0:	42a0      	cmp	r0, r4
 800a9c2:	d005      	beq.n	800a9d0 <_malloc_r+0xa8>
 800a9c4:	1a21      	subs	r1, r4, r0
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f000 f808 	bl	800a9dc <_sbrk_r>
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d0cf      	beq.n	800a970 <_malloc_r+0x48>
 800a9d0:	6025      	str	r5, [r4, #0]
 800a9d2:	e7db      	b.n	800a98c <_malloc_r+0x64>
 800a9d4:	20000094 	.word	0x20000094
 800a9d8:	20000098 	.word	0x20000098

0800a9dc <_sbrk_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	2300      	movs	r3, #0
 800a9e0:	4c05      	ldr	r4, [pc, #20]	; (800a9f8 <_sbrk_r+0x1c>)
 800a9e2:	4605      	mov	r5, r0
 800a9e4:	4608      	mov	r0, r1
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	f7fd fd80 	bl	80084ec <_sbrk>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	d102      	bne.n	800a9f6 <_sbrk_r+0x1a>
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	b103      	cbz	r3, 800a9f6 <_sbrk_r+0x1a>
 800a9f4:	602b      	str	r3, [r5, #0]
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	20000160 	.word	0x20000160

0800a9fc <__sread>:
 800a9fc:	b510      	push	{r4, lr}
 800a9fe:	460c      	mov	r4, r1
 800aa00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa04:	f000 f896 	bl	800ab34 <_read_r>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	bfab      	itete	ge
 800aa0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa0e:	89a3      	ldrhlt	r3, [r4, #12]
 800aa10:	181b      	addge	r3, r3, r0
 800aa12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa16:	bfac      	ite	ge
 800aa18:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa1a:	81a3      	strhlt	r3, [r4, #12]
 800aa1c:	bd10      	pop	{r4, pc}

0800aa1e <__swrite>:
 800aa1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa22:	461f      	mov	r7, r3
 800aa24:	898b      	ldrh	r3, [r1, #12]
 800aa26:	4605      	mov	r5, r0
 800aa28:	05db      	lsls	r3, r3, #23
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	4616      	mov	r6, r2
 800aa2e:	d505      	bpl.n	800aa3c <__swrite+0x1e>
 800aa30:	2302      	movs	r3, #2
 800aa32:	2200      	movs	r2, #0
 800aa34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa38:	f000 f868 	bl	800ab0c <_lseek_r>
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	4632      	mov	r2, r6
 800aa40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa44:	81a3      	strh	r3, [r4, #12]
 800aa46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa4a:	463b      	mov	r3, r7
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa52:	f000 b817 	b.w	800aa84 <_write_r>

0800aa56 <__sseek>:
 800aa56:	b510      	push	{r4, lr}
 800aa58:	460c      	mov	r4, r1
 800aa5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa5e:	f000 f855 	bl	800ab0c <_lseek_r>
 800aa62:	1c43      	adds	r3, r0, #1
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	bf15      	itete	ne
 800aa68:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa72:	81a3      	strheq	r3, [r4, #12]
 800aa74:	bf18      	it	ne
 800aa76:	81a3      	strhne	r3, [r4, #12]
 800aa78:	bd10      	pop	{r4, pc}

0800aa7a <__sclose>:
 800aa7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa7e:	f000 b813 	b.w	800aaa8 <_close_r>
	...

0800aa84 <_write_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4605      	mov	r5, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	4c05      	ldr	r4, [pc, #20]	; (800aaa4 <_write_r+0x20>)
 800aa90:	6022      	str	r2, [r4, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	f7fd fcdd 	bl	8008452 <_write>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_write_r+0x1e>
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_write_r+0x1e>
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	20000160 	.word	0x20000160

0800aaa8 <_close_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	2300      	movs	r3, #0
 800aaac:	4c05      	ldr	r4, [pc, #20]	; (800aac4 <_close_r+0x1c>)
 800aaae:	4605      	mov	r5, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	f7fd fce9 	bl	800848a <_close>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_close_r+0x1a>
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_close_r+0x1a>
 800aac0:	602b      	str	r3, [r5, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	20000160 	.word	0x20000160

0800aac8 <_fstat_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	2300      	movs	r3, #0
 800aacc:	4c06      	ldr	r4, [pc, #24]	; (800aae8 <_fstat_r+0x20>)
 800aace:	4605      	mov	r5, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	4611      	mov	r1, r2
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	f7fd fce3 	bl	80084a0 <_fstat>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d102      	bne.n	800aae4 <_fstat_r+0x1c>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	b103      	cbz	r3, 800aae4 <_fstat_r+0x1c>
 800aae2:	602b      	str	r3, [r5, #0]
 800aae4:	bd38      	pop	{r3, r4, r5, pc}
 800aae6:	bf00      	nop
 800aae8:	20000160 	.word	0x20000160

0800aaec <_isatty_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	2300      	movs	r3, #0
 800aaf0:	4c05      	ldr	r4, [pc, #20]	; (800ab08 <_isatty_r+0x1c>)
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	f7fd fce1 	bl	80084be <_isatty>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_isatty_r+0x1a>
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_isatty_r+0x1a>
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	20000160 	.word	0x20000160

0800ab0c <_lseek_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4605      	mov	r5, r0
 800ab10:	4608      	mov	r0, r1
 800ab12:	4611      	mov	r1, r2
 800ab14:	2200      	movs	r2, #0
 800ab16:	4c05      	ldr	r4, [pc, #20]	; (800ab2c <_lseek_r+0x20>)
 800ab18:	6022      	str	r2, [r4, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f7fd fcd9 	bl	80084d2 <_lseek>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_lseek_r+0x1e>
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_lseek_r+0x1e>
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	20000160 	.word	0x20000160

0800ab30 <__malloc_lock>:
 800ab30:	4770      	bx	lr

0800ab32 <__malloc_unlock>:
 800ab32:	4770      	bx	lr

0800ab34 <_read_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4605      	mov	r5, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	4c05      	ldr	r4, [pc, #20]	; (800ab54 <_read_r+0x20>)
 800ab40:	6022      	str	r2, [r4, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	f7fd fc68 	bl	8008418 <_read>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_read_r+0x1e>
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_read_r+0x1e>
 800ab50:	602b      	str	r3, [r5, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	20000160 	.word	0x20000160

0800ab58 <_init>:
 800ab58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5a:	bf00      	nop
 800ab5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab5e:	bc08      	pop	{r3}
 800ab60:	469e      	mov	lr, r3
 800ab62:	4770      	bx	lr

0800ab64 <_fini>:
 800ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab66:	bf00      	nop
 800ab68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6a:	bc08      	pop	{r3}
 800ab6c:	469e      	mov	lr, r3
 800ab6e:	4770      	bx	lr
