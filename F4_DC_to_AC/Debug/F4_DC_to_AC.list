
F4_DC_to_AC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bcc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005d58  08005d58  00015d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f50  08005f50  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f58  08005f58  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f58  08005f58  00015f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f5c  08005f5c  00015f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000080  08005fe0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  08005fe0  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf62  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ddc  00000000  00000000  0002c012  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a48  00000000  00000000  0002e950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002144b  00000000  00000000  0002f398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f24  00000000  00000000  000507e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb2e7  00000000  00000000  0005a707  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001259ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032c0  00000000  00000000  00125a6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d3c 	.word	0x08005d3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08005d3c 	.word	0x08005d3c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b972 	b.w	8000ecc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9e08      	ldr	r6, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	4688      	mov	r8, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14b      	bne.n	8000ca6 <__udivmoddi4+0xa6>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4615      	mov	r5, r2
 8000c12:	d967      	bls.n	8000ce4 <__udivmoddi4+0xe4>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0720 	rsb	r7, r2, #32
 8000c1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c22:	fa20 f707 	lsr.w	r7, r0, r7
 8000c26:	4095      	lsls	r5, r2
 8000c28:	ea47 0803 	orr.w	r8, r7, r3
 8000c2c:	4094      	lsls	r4, r2
 8000c2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c38:	fa1f fc85 	uxth.w	ip, r5
 8000c3c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c40:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c44:	fb07 f10c 	mul.w	r1, r7, ip
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x60>
 8000c4c:	18eb      	adds	r3, r5, r3
 8000c4e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c52:	f080 811b 	bcs.w	8000e8c <__udivmoddi4+0x28c>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 8118 	bls.w	8000e8c <__udivmoddi4+0x28c>
 8000c5c:	3f02      	subs	r7, #2
 8000c5e:	442b      	add	r3, r5
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c74:	45a4      	cmp	ip, r4
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x8c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	f080 8107 	bcs.w	8000e90 <__udivmoddi4+0x290>
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	f240 8104 	bls.w	8000e90 <__udivmoddi4+0x290>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	442c      	add	r4, r5
 8000c8c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c90:	eba4 040c 	sub.w	r4, r4, ip
 8000c94:	2700      	movs	r7, #0
 8000c96:	b11e      	cbz	r6, 8000ca0 <__udivmoddi4+0xa0>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0xbe>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	f000 80eb 	beq.w	8000e86 <__udivmoddi4+0x286>
 8000cb0:	2700      	movs	r7, #0
 8000cb2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f783 	clz	r7, r3
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d147      	bne.n	8000d56 <__udivmoddi4+0x156>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xd0>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80fa 	bhi.w	8000ec4 <__udivmoddi4+0x2c4>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4698      	mov	r8, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <__udivmoddi4+0xa0>
 8000cde:	e9c6 4800 	strd	r4, r8, [r6]
 8000ce2:	e7dd      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000ce4:	b902      	cbnz	r2, 8000ce8 <__udivmoddi4+0xe8>
 8000ce6:	deff      	udf	#255	; 0xff
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	f040 808f 	bne.w	8000e10 <__udivmoddi4+0x210>
 8000cf2:	1b49      	subs	r1, r1, r5
 8000cf4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf8:	fa1f f885 	uxth.w	r8, r5
 8000cfc:	2701      	movs	r7, #1
 8000cfe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d02:	0c23      	lsrs	r3, r4, #16
 8000d04:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x124>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x122>
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2bc>
 8000d22:	4684      	mov	ip, r0
 8000d24:	1a59      	subs	r1, r3, r1
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d2c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d30:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d34:	fb08 f800 	mul.w	r8, r8, r0
 8000d38:	45a0      	cmp	r8, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x14c>
 8000d3c:	192c      	adds	r4, r5, r4
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x14a>
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	f200 80b6 	bhi.w	8000eb6 <__udivmoddi4+0x2b6>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 0408 	sub.w	r4, r4, r8
 8000d50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d54:	e79f      	b.n	8000c96 <__udivmoddi4+0x96>
 8000d56:	f1c7 0c20 	rsb	ip, r7, #32
 8000d5a:	40bb      	lsls	r3, r7
 8000d5c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d60:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d64:	fa01 f407 	lsl.w	r4, r1, r7
 8000d68:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d6c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d70:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d74:	4325      	orrs	r5, r4
 8000d76:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d7a:	0c2c      	lsrs	r4, r5, #16
 8000d7c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d80:	fa1f fa8e 	uxth.w	sl, lr
 8000d84:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d88:	fb09 f40a 	mul.w	r4, r9, sl
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d92:	fa00 f107 	lsl.w	r1, r0, r7
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b0>
 8000d98:	eb1e 0303 	adds.w	r3, lr, r3
 8000d9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da0:	f080 8087 	bcs.w	8000eb2 <__udivmoddi4+0x2b2>
 8000da4:	429c      	cmp	r4, r3
 8000da6:	f240 8084 	bls.w	8000eb2 <__udivmoddi4+0x2b2>
 8000daa:	f1a9 0902 	sub.w	r9, r9, #2
 8000dae:	4473      	add	r3, lr
 8000db0:	1b1b      	subs	r3, r3, r4
 8000db2:	b2ad      	uxth	r5, r5
 8000db4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dbc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dc4:	45a2      	cmp	sl, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1da>
 8000dc8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd0:	d26b      	bcs.n	8000eaa <__udivmoddi4+0x2aa>
 8000dd2:	45a2      	cmp	sl, r4
 8000dd4:	d969      	bls.n	8000eaa <__udivmoddi4+0x2aa>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4474      	add	r4, lr
 8000dda:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dde:	fba0 8902 	umull	r8, r9, r0, r2
 8000de2:	eba4 040a 	sub.w	r4, r4, sl
 8000de6:	454c      	cmp	r4, r9
 8000de8:	46c2      	mov	sl, r8
 8000dea:	464b      	mov	r3, r9
 8000dec:	d354      	bcc.n	8000e98 <__udivmoddi4+0x298>
 8000dee:	d051      	beq.n	8000e94 <__udivmoddi4+0x294>
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d069      	beq.n	8000ec8 <__udivmoddi4+0x2c8>
 8000df4:	ebb1 050a 	subs.w	r5, r1, sl
 8000df8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dfc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e00:	40fd      	lsrs	r5, r7
 8000e02:	40fc      	lsrs	r4, r7
 8000e04:	ea4c 0505 	orr.w	r5, ip, r5
 8000e08:	e9c6 5400 	strd	r5, r4, [r6]
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	e747      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e10:	f1c2 0320 	rsb	r3, r2, #32
 8000e14:	fa20 f703 	lsr.w	r7, r0, r3
 8000e18:	4095      	lsls	r5, r2
 8000e1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e26:	4338      	orrs	r0, r7
 8000e28:	0c01      	lsrs	r1, r0, #16
 8000e2a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e2e:	fa1f f885 	uxth.w	r8, r5
 8000e32:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3a:	fb07 f308 	mul.w	r3, r7, r8
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x256>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e4c:	d22f      	bcs.n	8000eae <__udivmoddi4+0x2ae>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d92d      	bls.n	8000eae <__udivmoddi4+0x2ae>
 8000e52:	3f02      	subs	r7, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1acb      	subs	r3, r1, r3
 8000e58:	b281      	uxth	r1, r0
 8000e5a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb00 f308 	mul.w	r3, r0, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x27e>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e74:	d217      	bcs.n	8000ea6 <__udivmoddi4+0x2a6>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d915      	bls.n	8000ea6 <__udivmoddi4+0x2a6>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1ac9      	subs	r1, r1, r3
 8000e80:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e84:	e73b      	b.n	8000cfe <__udivmoddi4+0xfe>
 8000e86:	4637      	mov	r7, r6
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e709      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	e6e7      	b.n	8000c60 <__udivmoddi4+0x60>
 8000e90:	4618      	mov	r0, r3
 8000e92:	e6fb      	b.n	8000c8c <__udivmoddi4+0x8c>
 8000e94:	4541      	cmp	r1, r8
 8000e96:	d2ab      	bcs.n	8000df0 <__udivmoddi4+0x1f0>
 8000e98:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e9c:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea0:	3801      	subs	r0, #1
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	e7a4      	b.n	8000df0 <__udivmoddi4+0x1f0>
 8000ea6:	4660      	mov	r0, ip
 8000ea8:	e7e9      	b.n	8000e7e <__udivmoddi4+0x27e>
 8000eaa:	4618      	mov	r0, r3
 8000eac:	e795      	b.n	8000dda <__udivmoddi4+0x1da>
 8000eae:	4667      	mov	r7, ip
 8000eb0:	e7d1      	b.n	8000e56 <__udivmoddi4+0x256>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e77c      	b.n	8000db0 <__udivmoddi4+0x1b0>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	442c      	add	r4, r5
 8000eba:	e747      	b.n	8000d4c <__udivmoddi4+0x14c>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	442b      	add	r3, r5
 8000ec2:	e72f      	b.n	8000d24 <__udivmoddi4+0x124>
 8000ec4:	4638      	mov	r0, r7
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xda>
 8000ec8:	4637      	mov	r7, r6
 8000eca:	e6e9      	b.n	8000ca0 <__udivmoddi4+0xa0>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <MX_ADC1_Init+0xa0>)
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f32:	f000 fff7 	bl	8001f24 <HAL_ADC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f3c:	f000 fbec 	bl	8001718 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f52:	f001 f93b 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f5c:	f000 fbdc 	bl	8001718 <Error_Handler>
  }

}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000768 	.word	0x20000768
 8000f6c:	40012000 	.word	0x40012000
 8000f70:	0f000001 	.word	0x0f000001

08000f74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d157      	bne.n	8001046 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b27      	ldr	r3, [pc, #156]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a26      	ldr	r2, [pc, #152]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b24      	ldr	r3, [pc, #144]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481d      	ldr	r0, [pc, #116]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8000fe2:	f002 f813 	bl	800300c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_ADC_MspInit+0xec>)
 8000fea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8001008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800100c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8001010:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001014:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8001018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800102a:	480c      	ldr	r0, [pc, #48]	; (800105c <HAL_ADC_MspInit+0xe8>)
 800102c:	f001 fc80 	bl	8002930 <HAL_DMA_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001036:	f000 fb6f 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_ADC_MspInit+0xe8>)
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_ADC_MspInit+0xe8>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40012000 	.word	0x40012000
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000
 800105c:	200007b0 	.word	0x200007b0
 8001060:	40026410 	.word	0x40026410

08001064 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_DMA_Init+0x3c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <MX_DMA_Init+0x3c>)
 8001074:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_DMA_Init+0x3c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2038      	movs	r0, #56	; 0x38
 800108c:	f001 fc19 	bl	80028c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001090:	2038      	movs	r0, #56	; 0x38
 8001092:	f001 fc32 	bl	80028fa <HAL_NVIC_EnableIRQ>

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a2c      	ldr	r2, [pc, #176]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a25      	ldr	r2, [pc, #148]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <MX_GPIO_Init+0xd0>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_GPIO_Init+0xd0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_GPIO_Init+0xd0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <MX_GPIO_Init+0xd0>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_GPIO_Init+0xd0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_GPIO_Init+0xd0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <MX_GPIO_Init+0xd0>)
 8001134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_GPIO_Init+0xd0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2108      	movs	r1, #8
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <MX_GPIO_Init+0xd4>)
 800114c:	f002 f8f8 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001150:	2308      	movs	r3, #8
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001154:	2311      	movs	r3, #17
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <MX_GPIO_Init+0xd4>)
 8001168:	f001 ff50 	bl	800300c <HAL_GPIO_Init>

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	40021800 	.word	0x40021800

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f000 fe5d 	bl	8001e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f931 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f7ff ff8b 	bl	80010a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800118e:	f7ff ff69 	bl	8001064 <MX_DMA_Init>
  MX_ADC1_Init();
 8001192:	f7ff fe9d 	bl	8000ed0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001196:	f000 fb51 	bl	800183c <MX_TIM1_Init>
  MX_TIM2_Init();
 800119a:	f000 fc07 	bl	80019ac <MX_TIM2_Init>
  MX_TIM7_Init();
 800119e:	f000 fc51 	bl	8001a44 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_ConvertedValue, Channel_Num); //开启ADC的DMA采集通道
 80011a2:	2202      	movs	r2, #2
 80011a4:	4981      	ldr	r1, [pc, #516]	; (80013ac <main+0x230>)
 80011a6:	4882      	ldr	r0, [pc, #520]	; (80013b0 <main+0x234>)
 80011a8:	f000 ff00 	bl	8001fac <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1); //开启PWM通道1输出，控制boost的占空比
 80011ac:	2100      	movs	r1, #0
 80011ae:	4881      	ldr	r0, [pc, #516]	; (80013b4 <main+0x238>)
 80011b0:	f002 fd92 	bl	8003cd8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);//设置初值，重装值为8400
 80011b4:	4b7f      	ldr	r3, [pc, #508]	; (80013b4 <main+0x238>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80011bc:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2); //开启PWM通道2输出，控制一个桥臂
 80011be:	2104      	movs	r1, #4
 80011c0:	487c      	ldr	r0, [pc, #496]	; (80013b4 <main+0x238>)
 80011c2:	f002 fd89 	bl	8003cd8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 4200);//设置初值，重装值为8400
 80011c6:	4b7b      	ldr	r3, [pc, #492]	; (80013b4 <main+0x238>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f241 0268 	movw	r2, #4200	; 0x1068
 80011ce:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3); //开启PWM通道3输出，控制另外一个桥臂
 80011d0:	2108      	movs	r1, #8
 80011d2:	4878      	ldr	r0, [pc, #480]	; (80013b4 <main+0x238>)
 80011d4:	f002 fd80 	bl	8003cd8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 4200);//设置初值，重装值为8400
 80011d8:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <main+0x238>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f241 0268 	movw	r2, #4200	; 0x1068
 80011e0:	63da      	str	r2, [r3, #60]	; 0x3c
  Make_Sin_List(); //生成正弦表
 80011e2:	f000 f96d 	bl	80014c0 <Make_Sin_List>
  HAL_TIM_Base_Start_IT(&htim2); //开启定时器2，中断中输出正弦调制波
 80011e6:	4874      	ldr	r0, [pc, #464]	; (80013b8 <main+0x23c>)
 80011e8:	f002 fd1d 	bl	8003c26 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7); //开启定时器7，中断中进行数据采样和 闭环控制
 80011ec:	4873      	ldr	r0, [pc, #460]	; (80013bc <main+0x240>)
 80011ee:	f002 fd1a 	bl	8003c26 <HAL_TIM_Base_Start_IT>
  Set_PID_Parameter(kp,ki,kd); //PID参数配置
 80011f2:	4b73      	ldr	r3, [pc, #460]	; (80013c0 <main+0x244>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <main+0x248>)
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <main+0x24c>)
 8001200:	edd3 6a00 	vldr	s13, [r3]
 8001204:	eeb0 1a66 	vmov.f32	s2, s13
 8001208:	eef0 0a47 	vmov.f32	s1, s14
 800120c:	eeb0 0a67 	vmov.f32	s0, s15
 8001210:	f000 fdf8 	bl	8001e04 <Set_PID_Parameter>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Get_Data_Cycle_Flag == 1) { //标志为1 对一个周期的数据计算处理
 8001214:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <main+0x250>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d1fb      	bne.n	8001214 <main+0x98>

		  float SumV = 0, SumI = 0; //存储总值
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
		  float I_Diff = 2.1; //电流用INA282可采到负值，但有偏置，计算时应减去
 8001228:	4b69      	ldr	r3, [pc, #420]	; (80013d0 <main+0x254>)
 800122a:	607b      	str	r3, [r7, #4]
		  for(int i = 0; i < Cycle_Num; i++) { //做平方求和
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	e034      	b.n	800129c <main+0x120>
			  SumV += ADC_Cycle_Date[i][0] * ADC_Cycle_Date[i][0];
 8001232:	4a68      	ldr	r2, [pc, #416]	; (80013d4 <main+0x258>)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	ed93 7a00 	vldr	s14, [r3]
 800123e:	4a65      	ldr	r2, [pc, #404]	; (80013d4 <main+0x258>)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	4413      	add	r3, r2
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001256:	edc7 7a05 	vstr	s15, [r7, #20]
			  SumI += (ADC_Cycle_Date[i][1] - I_Diff) * (ADC_Cycle_Date[i][1] - I_Diff);
 800125a:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <main+0x258>)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	3304      	adds	r3, #4
 8001264:	ed93 7a00 	vldr	s14, [r3]
 8001268:	edd7 7a01 	vldr	s15, [r7, #4]
 800126c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001270:	4a58      	ldr	r2, [pc, #352]	; (80013d4 <main+0x258>)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4413      	add	r3, r2
 8001278:	3304      	adds	r3, #4
 800127a:	edd3 6a00 	vldr	s13, [r3]
 800127e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001282:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128a:	ed97 7a04 	vldr	s14, [r7, #16]
 800128e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001292:	edc7 7a04 	vstr	s15, [r7, #16]
		  for(int i = 0; i < Cycle_Num; i++) { //做平方求和
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3301      	adds	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2bc7      	cmp	r3, #199	; 0xc7
 80012a0:	ddc7      	ble.n	8001232 <main+0xb6>
		  }
		  ADC_ValueAverage[0] = sqrt(SumV * 2 / Cycle_Num); //电压有效值  在负半周采样结果为0，故乘2
 80012a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012aa:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80013d8 <main+0x25c>
 80012ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012b2:	ee16 0a90 	vmov	r0, s13
 80012b6:	f7ff f8eb 	bl	8000490 <__aeabi_f2d>
 80012ba:	4603      	mov	r3, r0
 80012bc:	460c      	mov	r4, r1
 80012be:	ec44 3b10 	vmov	d0, r3, r4
 80012c2:	f003 fc61 	bl	8004b88 <sqrt>
 80012c6:	ec54 3b10 	vmov	r3, r4, d0
 80012ca:	4618      	mov	r0, r3
 80012cc:	4621      	mov	r1, r4
 80012ce:	f7ff fc2f 	bl	8000b30 <__aeabi_d2f>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b41      	ldr	r3, [pc, #260]	; (80013dc <main+0x260>)
 80012d6:	601a      	str	r2, [r3, #0]
		  ADC_ValueAverage[1] = sqrt(SumI / Cycle_Num); //电流有效值
 80012d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012dc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80013d8 <main+0x25c>
 80012e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012e4:	ee16 0a90 	vmov	r0, s13
 80012e8:	f7ff f8d2 	bl	8000490 <__aeabi_f2d>
 80012ec:	4603      	mov	r3, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	ec44 3b10 	vmov	d0, r3, r4
 80012f4:	f003 fc48 	bl	8004b88 <sqrt>
 80012f8:	ec54 3b10 	vmov	r3, r4, d0
 80012fc:	4618      	mov	r0, r3
 80012fe:	4621      	mov	r1, r4
 8001300:	f7ff fc16 	bl	8000b30 <__aeabi_d2f>
 8001304:	4602      	mov	r2, r0
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <main+0x260>)
 8001308:	605a      	str	r2, [r3, #4]




		  if(ADC_ValueAverage[1] < Max_I) { //如果采集到的电流值小于最大电流，则保持恒压状态
 800130a:	4b34      	ldr	r3, [pc, #208]	; (80013dc <main+0x260>)
 800130c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <main+0x264>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	d531      	bpl.n	8001384 <main+0x208>
			  float Pid_Output = PID_Calc(ADC_ValueAverage[0], Target_V); //进行Pid运算
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <main+0x260>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <main+0x268>)
 8001328:	ed93 7a00 	vldr	s14, [r3]
 800132c:	eef0 0a47 	vmov.f32	s1, s14
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	f000 fc78 	bl	8001c28 <PID_Calc>
 8001338:	ed87 0a00 	vstr	s0, [r7]
			  float Tfb_Temp = Tfb; //调幅比临时存储变量
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <main+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60bb      	str	r3, [r7, #8]
			  Tfb_Temp += Pid_Output; //调幅比加上pid运算结果，实现闭环控制
 8001342:	ed97 7a02 	vldr	s14, [r7, #8]
 8001346:	edd7 7a00 	vldr	s15, [r7]
 800134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134e:	edc7 7a02 	vstr	s15, [r7, #8]
			  if(Tfb_Temp > 1) {//如果调幅比大于1则，回调为1
 8001352:	edd7 7a02 	vldr	s15, [r7, #8]
 8001356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800135a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	dd02      	ble.n	800136a <main+0x1ee>
				  Tfb_Temp = 1;
 8001364:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001368:	60bb      	str	r3, [r7, #8]
			  }
			  if(Tfb_Temp < 0) { //如果调幅比小于0则调为0
 800136a:	edd7 7a02 	vldr	s15, [r7, #8]
 800136e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	d502      	bpl.n	800137e <main+0x202>
				  Tfb_Temp = 0;
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
			  }
			  Tfb = Tfb_Temp; //进行调幅比调整
 800137e:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <main+0x26c>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	6013      	str	r3, [r2, #0]
		  }
		  if(ADC_ValueAverage[1] >= Max_I) { //如果采集到的电流值大于最大电流,则使电路停止输出
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <main+0x260>)
 8001386:	ed93 7a01 	vldr	s14, [r3, #4]
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <main+0x264>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	db04      	blt.n	80013a4 <main+0x228>
			  Tfb = 0; //调幅比调低
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <main+0x26c>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
			  while(1); //进入死循环，等待重启系统
 80013a2:	e7fe      	b.n	80013a2 <main+0x226>
		  }

		  Get_Data_Cycle_Flag = 0;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <main+0x250>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	801a      	strh	r2, [r3, #0]
	  if(Get_Data_Cycle_Flag == 1) { //标志为1 对一个周期的数据计算处理
 80013aa:	e733      	b.n	8001214 <main+0x98>
 80013ac:	2000009c 	.word	0x2000009c
 80013b0:	20000768 	.word	0x20000768
 80013b4:	20000810 	.word	0x20000810
 80013b8:	20000850 	.word	0x20000850
 80013bc:	20000890 	.word	0x20000890
 80013c0:	20000930 	.word	0x20000930
 80013c4:	200008dc 	.word	0x200008dc
 80013c8:	200008d0 	.word	0x200008d0
 80013cc:	2000010a 	.word	0x2000010a
 80013d0:	40066666 	.word	0x40066666
 80013d4:	2000010c 	.word	0x2000010c
 80013d8:	43480000 	.word	0x43480000
 80013dc:	20000750 	.word	0x20000750
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000004 	.word	0x20000004
 80013e8:	20000000 	.word	0x20000000

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	; 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 fb74 	bl	8004ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <SystemClock_Config+0xcc>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <SystemClock_Config+0xcc>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <SystemClock_Config+0xcc>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b22      	ldr	r3, [pc, #136]	; (80014bc <SystemClock_Config+0xd0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <SystemClock_Config+0xd0>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <SystemClock_Config+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800145c:	2308      	movs	r3, #8
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001460:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001464:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001466:	2302      	movs	r3, #2
 8001468:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800146a:	2304      	movs	r3, #4
 800146c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4618      	mov	r0, r3
 8001474:	f001 ff7e 	bl	8003374 <HAL_RCC_OscConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800147e:	f000 f94b 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2302      	movs	r3, #2
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800148e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2105      	movs	r1, #5
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 f9d7 	bl	8003854 <HAL_RCC_ClockConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014ac:	f000 f934 	bl	8001718 <Error_Handler>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3750      	adds	r7, #80	; 0x50
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <Make_Sin_List>:

/* USER CODE BEGIN 4 */

void Make_Sin_List(void) {//生成sin表的函数
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
	uint16_t i;
	for(i = 0; i < SIN_NUM; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	80fb      	strh	r3, [r7, #6]
 80014ca:	e033      	b.n	8001534 <Make_Sin_List+0x74>
		Sin_Lut[i] = (uint16_t)(sin(3.1415926*i/SIN_NUM)*(8400-1));//8400为pwm的定时器重装值
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe ffcc 	bl	800046c <__aeabi_i2d>
 80014d4:	a320      	add	r3, pc, #128	; (adr r3, 8001558 <Make_Sin_List+0x98>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7ff f831 	bl	8000540 <__aeabi_dmul>
 80014de:	4603      	mov	r3, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	4618      	mov	r0, r3
 80014e4:	4621      	mov	r1, r4
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <Make_Sin_List+0x90>)
 80014ec:	f7ff f952 	bl	8000794 <__aeabi_ddiv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	ec44 3b17 	vmov	d7, r3, r4
 80014f8:	eeb0 0a47 	vmov.f32	s0, s14
 80014fc:	eef0 0a67 	vmov.f32	s1, s15
 8001500:	f003 fafa 	bl	8004af8 <sin>
 8001504:	ec51 0b10 	vmov	r0, r1, d0
 8001508:	a30f      	add	r3, pc, #60	; (adr r3, 8001548 <Make_Sin_List+0x88>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f817 	bl	8000540 <__aeabi_dmul>
 8001512:	4603      	mov	r3, r0
 8001514:	460c      	mov	r4, r1
 8001516:	461a      	mov	r2, r3
 8001518:	4623      	mov	r3, r4
 800151a:	88fc      	ldrh	r4, [r7, #6]
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fae6 	bl	8000af0 <__aeabi_d2uiz>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <Make_Sin_List+0x94>)
 800152a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(i = 0; i < SIN_NUM; i++) {
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	80fb      	strh	r3, [r7, #6]
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	2b31      	cmp	r3, #49	; 0x31
 8001538:	d9c8      	bls.n	80014cc <Make_Sin_List+0xc>
	}
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	bf00      	nop
 8001544:	f3af 8000 	nop.w
 8001548:	00000000 	.word	0x00000000
 800154c:	40c06780 	.word	0x40c06780
 8001550:	40490000 	.word	0x40490000
 8001554:	200000a4 	.word	0x200000a4
 8001558:	4d12d84a 	.word	0x4d12d84a
 800155c:	400921fb 	.word	0x400921fb

08001560 <HAL_TIM_PeriodElapsedCallback>:

		/*定时器中断函数*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance) {  //定时器2中断处理
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d148      	bne.n	8001606 <HAL_TIM_PeriodElapsedCallback+0xa6>
		if(Output_Polarity_Flag == 0) {		//标志为0
 8001574:	4b5d      	ldr	r3, [pc, #372]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d119      	bne.n	80015b0 <HAL_TIM_PeriodElapsedCallback+0x50>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);	//定时器1的通道2	一个桥臂，使其停止工作
 800157c:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Tfb*Sin_Lut[SIN_LUT_index]); //定时器1的通道3，另一个桥臂输出PWM
 8001584:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a5b      	ldr	r2, [pc, #364]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800158a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800158e:	ee07 3a90 	vmov	s15, r3
 8001592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001596:	4b59      	ldr	r3, [pc, #356]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a0:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a8:	ee17 2a90 	vmov	r2, s15
 80015ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80015ae:	e018      	b.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x82>
		} else {	 //标志不为0
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);	//定时器1的通道3	一个桥臂，使其停止工作
 80015b0:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, Tfb*Sin_Lut[SIN_LUT_index]); //定时器1的通道2，另一个桥臂输出PWM
 80015b8:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a4e      	ldr	r2, [pc, #312]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80015be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ca:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015dc:	ee17 2a90 	vmov	r2, s15
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		SIN_LUT_index++;  //表指针+1
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	4a42      	ldr	r2, [pc, #264]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80015ea:	6013      	str	r3, [r2, #0]
		if( SIN_LUT_index == SIN_NUM ) { //sin半周期转换桥臂
 80015ec:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b32      	cmp	r3, #50	; 0x32
 80015f2:	d108      	bne.n	8001606 <HAL_TIM_PeriodElapsedCallback+0xa6>
			SIN_LUT_index = 0;           //正弦表指针归零
 80015f4:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
			Output_Polarity_Flag = ~Output_Polarity_Flag; //转换桥臂标志
 80015fa:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	43db      	mvns	r3, r3
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001604:	801a      	strh	r2, [r3, #0]
		}
	}

	if(htim->Instance == htim7.Instance) {  //定时器7中断处理
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d15f      	bne.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x172>
		if(!Get_Data_Cycle_Flag) { //标志为0应该去获取一个周期的数据
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d15b      	bne.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x172>
			if(ADC_Date_Count < 200) {	// 记录一个周期内ADC采样值
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	2bc7      	cmp	r3, #199	; 0xc7
 8001620:	d84d      	bhi.n	80016be <HAL_TIM_PeriodElapsedCallback+0x15e>
				ADC_Cycle_Date[ADC_Date_Count][0] = (float)ADC_ConvertedValue[0]/4096*3.3; //移动存储以交给main函数处理
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001710 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8001632:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001636:	ee16 0a90 	vmov	r0, s13
 800163a:	f7fe ff29 	bl	8000490 <__aeabi_f2d>
 800163e:	a328      	add	r3, pc, #160	; (adr r3, 80016e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe ff7c 	bl	8000540 <__aeabi_dmul>
 8001648:	4603      	mov	r3, r0
 800164a:	460c      	mov	r4, r1
 800164c:	4619      	mov	r1, r3
 800164e:	4622      	mov	r2, r4
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	461c      	mov	r4, r3
 8001656:	4608      	mov	r0, r1
 8001658:	4611      	mov	r1, r2
 800165a:	f7ff fa69 	bl	8000b30 <__aeabi_d2f>
 800165e:	4601      	mov	r1, r0
 8001660:	4a2c      	ldr	r2, [pc, #176]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001662:	00e3      	lsls	r3, r4, #3
 8001664:	4413      	add	r3, r2
 8001666:	6019      	str	r1, [r3, #0]
				ADC_Cycle_Date[ADC_Date_Count][1] = (float)ADC_ConvertedValue[1]/4096*3.3;
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800166a:	885b      	ldrh	r3, [r3, #2]
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001674:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001710 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8001678:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800167c:	ee16 0a90 	vmov	r0, s13
 8001680:	f7fe ff06 	bl	8000490 <__aeabi_f2d>
 8001684:	a316      	add	r3, pc, #88	; (adr r3, 80016e0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7fe ff59 	bl	8000540 <__aeabi_dmul>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4619      	mov	r1, r3
 8001694:	4622      	mov	r2, r4
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	461c      	mov	r4, r3
 800169c:	4608      	mov	r0, r1
 800169e:	4611      	mov	r1, r2
 80016a0:	f7ff fa46 	bl	8000b30 <__aeabi_d2f>
 80016a4:	4601      	mov	r1, r0
 80016a6:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80016a8:	00e3      	lsls	r3, r4, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	3304      	adds	r3, #4
 80016ae:	6019      	str	r1, [r3, #0]
				ADC_Date_Count++;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80016ba:	801a      	strh	r2, [r3, #0]
				Get_Data_Cycle_Flag = 1; //标志拉高交给main函数处理
			}
		}

	}
}
 80016bc:	e009      	b.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x172>
			}else if(ADC_Date_Count >= 200) { //一个周期记录完成
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	2bc7      	cmp	r3, #199	; 0xc7
 80016c4:	d905      	bls.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x172>
				ADC_Date_Count = 0; //计数值清零
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	801a      	strh	r2, [r3, #0]
				Get_Data_Cycle_Flag = 1; //标志拉高交给main函数处理
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	801a      	strh	r2, [r3, #0]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	f3af 8000 	nop.w
 80016e0:	66666666 	.word	0x66666666
 80016e4:	400a6666 	.word	0x400a6666
 80016e8:	20000850 	.word	0x20000850
 80016ec:	20000108 	.word	0x20000108
 80016f0:	20000810 	.word	0x20000810
 80016f4:	200000a0 	.word	0x200000a0
 80016f8:	200000a4 	.word	0x200000a4
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000890 	.word	0x20000890
 8001704:	2000010a 	.word	0x2000010a
 8001708:	2000074c 	.word	0x2000074c
 800170c:	2000009c 	.word	0x2000009c
 8001710:	45800000 	.word	0x45800000
 8001714:	2000010c 	.word	0x2000010c

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <HAL_MspInit+0x4c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_MspInit+0x4c>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler+0x4>

08001792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <UsageFault_Handler+0x4>

0800179e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 fb8a 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <TIM2_IRQHandler+0x10>)
 80017da:	f002 fabb 	bl	8003d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000850 	.word	0x20000850

080017e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM7_IRQHandler+0x10>)
 80017ee:	f002 fab1 	bl	8003d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000890 	.word	0x20000890

080017fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA2_Stream0_IRQHandler+0x10>)
 8001802:	f001 f99b 	bl	8002b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200007b0 	.word	0x200007b0

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <SystemInit+0x28>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <SystemInit+0x28>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SystemInit+0x28>)
 8001826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800182a:	609a      	str	r2, [r3, #8]
#endif
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b096      	sub	sp, #88	; 0x58
 8001840:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2220      	movs	r2, #32
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f003 f937 	bl	8004ae8 <memset>

  htim1.Instance = TIM1;
 800187a:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <MX_TIM1_Init+0x168>)
 800187c:	4a4a      	ldr	r2, [pc, #296]	; (80019a8 <MX_TIM1_Init+0x16c>)
 800187e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <MX_TIM1_Init+0x168>)
 8001882:	2200      	movs	r2, #0
 8001884:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <MX_TIM1_Init+0x168>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400-1;
 800188c:	4b45      	ldr	r3, [pc, #276]	; (80019a4 <MX_TIM1_Init+0x168>)
 800188e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001892:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001894:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <MX_TIM1_Init+0x168>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800189a:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <MX_TIM1_Init+0x168>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a0:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <MX_TIM1_Init+0x168>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018a6:	483f      	ldr	r0, [pc, #252]	; (80019a4 <MX_TIM1_Init+0x168>)
 80018a8:	f002 f992 	bl	8003bd0 <HAL_TIM_Base_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018b2:	f7ff ff31 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018c0:	4619      	mov	r1, r3
 80018c2:	4838      	ldr	r0, [pc, #224]	; (80019a4 <MX_TIM1_Init+0x168>)
 80018c4:	f002 fc14 	bl	80040f0 <HAL_TIM_ConfigClockSource>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018ce:	f7ff ff23 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018d2:	4834      	ldr	r0, [pc, #208]	; (80019a4 <MX_TIM1_Init+0x168>)
 80018d4:	f002 f9cb 	bl	8003c6e <HAL_TIM_PWM_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018de:	f7ff ff1b 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018ee:	4619      	mov	r1, r3
 80018f0:	482c      	ldr	r0, [pc, #176]	; (80019a4 <MX_TIM1_Init+0x168>)
 80018f2:	f002 ffed 	bl	80048d0 <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018fc:	f7ff ff0c 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001900:	2360      	movs	r3, #96	; 0x60
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001908:	2300      	movs	r3, #0
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800190c:	2300      	movs	r3, #0
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800191c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001920:	2200      	movs	r2, #0
 8001922:	4619      	mov	r1, r3
 8001924:	481f      	ldr	r0, [pc, #124]	; (80019a4 <MX_TIM1_Init+0x168>)
 8001926:	f002 fb1d 	bl	8003f64 <HAL_TIM_PWM_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001930:	f7ff fef2 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001938:	2204      	movs	r2, #4
 800193a:	4619      	mov	r1, r3
 800193c:	4819      	ldr	r0, [pc, #100]	; (80019a4 <MX_TIM1_Init+0x168>)
 800193e:	f002 fb11 	bl	8003f64 <HAL_TIM_PWM_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001948:	f7ff fee6 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800194c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001950:	2208      	movs	r2, #8
 8001952:	4619      	mov	r1, r3
 8001954:	4813      	ldr	r0, [pc, #76]	; (80019a4 <MX_TIM1_Init+0x168>)
 8001956:	f002 fb05 	bl	8003f64 <HAL_TIM_PWM_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001960:	f7ff feda 	bl	8001718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4807      	ldr	r0, [pc, #28]	; (80019a4 <MX_TIM1_Init+0x168>)
 8001988:	f003 f81e 	bl	80049c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001992:	f7ff fec1 	bl	8001718 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001996:	4803      	ldr	r0, [pc, #12]	; (80019a4 <MX_TIM1_Init+0x168>)
 8001998:	f000 f8e2 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 800199c:	bf00      	nop
 800199e:	3758      	adds	r7, #88	; 0x58
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000810 	.word	0x20000810
 80019a8:	40010000 	.word	0x40010000

080019ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	463b      	mov	r3, r7
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019d2:	2253      	movs	r2, #83	; 0x53
 80019d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019de:	22c7      	movs	r2, #199	; 0xc7
 80019e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019f0:	f002 f8ee 	bl	8003bd0 <HAL_TIM_Base_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80019fa:	f7ff fe8d 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a04:	f107 0308 	add.w	r3, r7, #8
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_TIM2_Init+0x94>)
 8001a0c:	f002 fb70 	bl	80040f0 <HAL_TIM_ConfigClockSource>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001a16:	f7ff fe7f 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_TIM2_Init+0x94>)
 8001a28:	f002 ff52 	bl	80048d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001a32:	f7ff fe71 	bl	8001718 <Error_Handler>
  }

}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000850 	.word	0x20000850

08001a44 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_TIM7_Init+0x60>)
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <MX_TIM7_Init+0x64>)
 8001a56:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_TIM7_Init+0x60>)
 8001a5a:	2253      	movs	r2, #83	; 0x53
 8001a5c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_TIM7_Init+0x60>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_TIM7_Init+0x60>)
 8001a66:	2263      	movs	r2, #99	; 0x63
 8001a68:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_TIM7_Init+0x60>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <MX_TIM7_Init+0x60>)
 8001a72:	f002 f8ad 	bl	8003bd0 <HAL_TIM_Base_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8001a7c:	f7ff fe4c 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM7_Init+0x60>)
 8001a8e:	f002 ff1f 	bl	80048d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8001a98:	f7ff fe3e 	bl	8001718 <Error_Handler>
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000890 	.word	0x20000890
 8001aa8:	40001400 	.word	0x40001400

08001aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_TIM_Base_MspInit+0xa8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10e      	bne.n	8001adc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	4b25      	ldr	r3, [pc, #148]	; (8001b58 <HAL_TIM_Base_MspInit+0xac>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a24      	ldr	r2, [pc, #144]	; (8001b58 <HAL_TIM_Base_MspInit+0xac>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_TIM_Base_MspInit+0xac>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001ada:	e036      	b.n	8001b4a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae4:	d116      	bne.n	8001b14 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_TIM_Base_MspInit+0xac>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a1a      	ldr	r2, [pc, #104]	; (8001b58 <HAL_TIM_Base_MspInit+0xac>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_TIM_Base_MspInit+0xac>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	201c      	movs	r0, #28
 8001b08:	f000 fedb 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b0c:	201c      	movs	r0, #28
 8001b0e:	f000 fef4 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 8001b12:	e01a      	b.n	8001b4a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM7)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <HAL_TIM_Base_MspInit+0xb0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d115      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_TIM_Base_MspInit+0xac>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_TIM_Base_MspInit+0xac>)
 8001b28:	f043 0320 	orr.w	r3, r3, #32
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_TIM_Base_MspInit+0xac>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0320 	and.w	r3, r3, #32
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2037      	movs	r0, #55	; 0x37
 8001b40:	f000 febf 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b44:	2037      	movs	r0, #55	; 0x37
 8001b46:	f000 fed8 	bl	80028fa <HAL_NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40001400 	.word	0x40001400

08001b60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_TIM_MspPostInit+0x68>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d11e      	bne.n	8001bc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_TIM_MspPostInit+0x6c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <HAL_TIM_MspPostInit+0x6c>)
 8001b8c:	f043 0310 	orr.w	r3, r3, #16
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_TIM_MspPostInit+0x6c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001b9e:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001ba2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_TIM_MspPostInit+0x70>)
 8001bbc:	f001 fa26 	bl	800300c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3720      	adds	r7, #32
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bda:	e003      	b.n	8001be4 <LoopCopyDataInit>

08001bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001be2:	3104      	adds	r1, #4

08001be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bec:	d3f6      	bcc.n	8001bdc <CopyDataInit>
  ldr  r2, =_sbss
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bf0:	e002      	b.n	8001bf8 <LoopFillZerobss>

08001bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bf4:	f842 3b04 	str.w	r3, [r2], #4

08001bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bfc:	d3f9      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bfe:	f7ff fe07 	bl	8001810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f002 ff4d 	bl	8004aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7ff fab9 	bl	800117c <main>
  bx  lr    
 8001c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c10:	08005f60 	.word	0x08005f60
  ldr  r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c18:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001c1c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001c20:	20000938 	.word	0x20000938

08001c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC_IRQHandler>
	...

08001c28 <PID_Calc>:
float temp,dInput;
float error[20];


float PID_Calc(float Input,float setpoint)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c32:	edc7 0a00 	vstr	s1, [r7]
	static uint16_t left = 0;
	static uint16_t right = 0;
	static uint16_t flag = 0;
	
	error[right] = setpoint - Input;
 8001c36:	4b60      	ldr	r3, [pc, #384]	; (8001db8 <PID_Calc+0x190>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	ed97 7a00 	vldr	s14, [r7]
 8001c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c46:	4a5d      	ldr	r2, [pc, #372]	; (8001dbc <PID_Calc+0x194>)
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	edc3 7a00 	vstr	s15, [r3]
	dInput = Input - lastInput;
 8001c50:	4b5b      	ldr	r3, [pc, #364]	; (8001dc0 <PID_Calc+0x198>)
 8001c52:	edd3 7a00 	vldr	s15, [r3]
 8001c56:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5e:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <PID_Calc+0x19c>)
 8001c60:	edc3 7a00 	vstr	s15, [r3]
	Iterm += ki*error[right];
 8001c64:	4b54      	ldr	r3, [pc, #336]	; (8001db8 <PID_Calc+0x190>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	4a54      	ldr	r2, [pc, #336]	; (8001dbc <PID_Calc+0x194>)
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	ed93 7a00 	vldr	s14, [r3]
 8001c72:	4b55      	ldr	r3, [pc, #340]	; (8001dc8 <PID_Calc+0x1a0>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c7c:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <PID_Calc+0x1a4>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	4b51      	ldr	r3, [pc, #324]	; (8001dcc <PID_Calc+0x1a4>)
 8001c88:	edc3 7a00 	vstr	s15, [r3]
	if(Iterm > ITERM_MAX)  Iterm = ITERM_MAX;
 8001c8c:	4b4f      	ldr	r3, [pc, #316]	; (8001dcc <PID_Calc+0x1a4>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001dd0 <PID_Calc+0x1a8>
 8001c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	dd03      	ble.n	8001ca8 <PID_Calc+0x80>
 8001ca0:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <PID_Calc+0x1a4>)
 8001ca2:	4a4c      	ldr	r2, [pc, #304]	; (8001dd4 <PID_Calc+0x1ac>)
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e00c      	b.n	8001cc2 <PID_Calc+0x9a>
	else if(Iterm < ITERM_MIN)  Iterm = ITERM_MIN;
 8001ca8:	4b48      	ldr	r3, [pc, #288]	; (8001dcc <PID_Calc+0x1a4>)
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001dd8 <PID_Calc+0x1b0>
 8001cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	d502      	bpl.n	8001cc2 <PID_Calc+0x9a>
 8001cbc:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <PID_Calc+0x1a4>)
 8001cbe:	4a47      	ldr	r2, [pc, #284]	; (8001ddc <PID_Calc+0x1b4>)
 8001cc0:	601a      	str	r2, [r3, #0]

	temp = kp*error[right] + Iterm - kd*dInput;
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <PID_Calc+0x190>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	4a3d      	ldr	r2, [pc, #244]	; (8001dbc <PID_Calc+0x194>)
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <PID_Calc+0x1b8>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cda:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <PID_Calc+0x1a4>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <PID_Calc+0x1bc>)
 8001ce6:	edd3 6a00 	vldr	s13, [r3]
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <PID_Calc+0x19c>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <PID_Calc+0x1c0>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
	if(temp > OUTMAX)  temp = OUTMAX;
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <PID_Calc+0x1c0>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001dec <PID_Calc+0x1c4>
 8001d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	dd03      	ble.n	8001d1a <PID_Calc+0xf2>
 8001d12:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <PID_Calc+0x1c0>)
 8001d14:	4a36      	ldr	r2, [pc, #216]	; (8001df0 <PID_Calc+0x1c8>)
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e00c      	b.n	8001d34 <PID_Calc+0x10c>
	else if(temp < OUTMIN)  temp = OUTMIN;
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <PID_Calc+0x1c0>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001df4 <PID_Calc+0x1cc>
 8001d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	d502      	bpl.n	8001d34 <PID_Calc+0x10c>
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <PID_Calc+0x1c0>)
 8001d30:	4a31      	ldr	r2, [pc, #196]	; (8001df8 <PID_Calc+0x1d0>)
 8001d32:	601a      	str	r2, [r3, #0]
	lastInput = Input;
 8001d34:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <PID_Calc+0x198>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
	
	right++;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <PID_Calc+0x190>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <PID_Calc+0x190>)
 8001d44:	801a      	strh	r2, [r3, #0]
	if(right >= 20)
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <PID_Calc+0x190>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	2b13      	cmp	r3, #19
 8001d4c:	d905      	bls.n	8001d5a <PID_Calc+0x132>
	{
		flag = 1;
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <PID_Calc+0x1d4>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	801a      	strh	r2, [r3, #0]
		right = 0;
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <PID_Calc+0x190>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	801a      	strh	r2, [r3, #0]
	}
	if(flag)
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <PID_Calc+0x1d4>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01e      	beq.n	8001da0 <PID_Calc+0x178>
	{
		Iterm -= ki*error[left++];
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <PID_Calc+0x1d8>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	b291      	uxth	r1, r2
 8001d6a:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <PID_Calc+0x1d8>)
 8001d6c:	8011      	strh	r1, [r2, #0]
 8001d6e:	4a13      	ldr	r2, [pc, #76]	; (8001dbc <PID_Calc+0x194>)
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	ed93 7a00 	vldr	s14, [r3]
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <PID_Calc+0x1a0>)
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <PID_Calc+0x1a4>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <PID_Calc+0x1a4>)
 8001d8e:	edc3 7a00 	vstr	s15, [r3]
		if(left >= 20)
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <PID_Calc+0x1d8>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	2b13      	cmp	r3, #19
 8001d98:	d902      	bls.n	8001da0 <PID_Calc+0x178>
			left = 0;
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <PID_Calc+0x1d8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	801a      	strh	r2, [r3, #0]
	}
	
	return temp;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <PID_Calc+0x1c0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	ee07 3a90 	vmov	s15, r3
}
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000760 	.word	0x20000760
 8001dbc:	200008e0 	.word	0x200008e0
 8001dc0:	2000075c 	.word	0x2000075c
 8001dc4:	200008d8 	.word	0x200008d8
 8001dc8:	200008dc 	.word	0x200008dc
 8001dcc:	20000758 	.word	0x20000758
 8001dd0:	43480000 	.word	0x43480000
 8001dd4:	43480000 	.word	0x43480000
 8001dd8:	c3480000 	.word	0xc3480000
 8001ddc:	c3480000 	.word	0xc3480000
 8001de0:	20000930 	.word	0x20000930
 8001de4:	200008d0 	.word	0x200008d0
 8001de8:	200008d4 	.word	0x200008d4
 8001dec:	447a0000 	.word	0x447a0000
 8001df0:	447a0000 	.word	0x447a0000
 8001df4:	c47a0000 	.word	0xc47a0000
 8001df8:	c47a0000 	.word	0xc47a0000
 8001dfc:	20000762 	.word	0x20000762
 8001e00:	20000764 	.word	0x20000764

08001e04 <Set_PID_Parameter>:

void Set_PID_Parameter(float KP,float KI,float KD)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e0e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e12:	ed87 1a01 	vstr	s2, [r7, #4]
    kp = KP;
 8001e16:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <Set_PID_Parameter+0x30>)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6013      	str	r3, [r2, #0]
    ki = KI;
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <Set_PID_Parameter+0x34>)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	6013      	str	r3, [r2, #0]
    kd = KD;
 8001e22:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <Set_PID_Parameter+0x38>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	20000930 	.word	0x20000930
 8001e38:	200008dc 	.word	0x200008dc
 8001e3c:	200008d0 	.word	0x200008d0

08001e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <HAL_Init+0x40>)
 8001e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_Init+0x40>)
 8001e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_Init+0x40>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e68:	2003      	movs	r0, #3
 8001e6a:	f000 fd1f 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 f808 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e74:	f7ff fc58 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x54>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x58>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fd37 	bl	8002916 <HAL_SYSTICK_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00e      	b.n	8001ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d80a      	bhi.n	8001ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f000 fcff 	bl	80028c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_InitTick+0x5c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	2000000c 	.word	0x2000000c
 8001edc:	20000014 	.word	0x20000014
 8001ee0:	20000010 	.word	0x20000010

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000014 	.word	0x20000014
 8001f08:	20000934 	.word	0x20000934

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000934 	.word	0x20000934

08001f24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e033      	b.n	8001fa2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff f816 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d118      	bne.n	8001f94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f6a:	f023 0302 	bic.w	r3, r3, #2
 8001f6e:	f043 0202 	orr.w	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa4a 	bl	8002410 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
 8001f92:	e001      	b.n	8001f98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_Start_DMA+0x1e>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e0cc      	b.n	8002164 <HAL_ADC_Start_DMA+0x1b8>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d018      	beq.n	8002012 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff0:	4b5e      	ldr	r3, [pc, #376]	; (800216c <HAL_ADC_Start_DMA+0x1c0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a5e      	ldr	r2, [pc, #376]	; (8002170 <HAL_ADC_Start_DMA+0x1c4>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0c9a      	lsrs	r2, r3, #18
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002004:	e002      	b.n	800200c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	3b01      	subs	r3, #1
 800200a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f9      	bne.n	8002006 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	f040 80a0 	bne.w	8002162 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800204c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002060:	d106      	bne.n	8002070 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f023 0206 	bic.w	r2, r3, #6
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	645a      	str	r2, [r3, #68]	; 0x44
 800206e:	e002      	b.n	8002076 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_ADC_Start_DMA+0x1c8>)
 8002080:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002086:	4a3c      	ldr	r2, [pc, #240]	; (8002178 <HAL_ADC_Start_DMA+0x1cc>)
 8002088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	4a3b      	ldr	r2, [pc, #236]	; (800217c <HAL_ADC_Start_DMA+0x1d0>)
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <HAL_ADC_Start_DMA+0x1d4>)
 8002098:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	334c      	adds	r3, #76	; 0x4c
 80020ce:	4619      	mov	r1, r3
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f000 fcda 	bl	8002a8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d12a      	bne.n	800213a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_ADC_Start_DMA+0x1d8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d015      	beq.n	800211a <HAL_ADC_Start_DMA+0x16e>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a25      	ldr	r2, [pc, #148]	; (8002188 <HAL_ADC_Start_DMA+0x1dc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d105      	bne.n	8002104 <HAL_ADC_Start_DMA+0x158>
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_ADC_Start_DMA+0x1c8>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a20      	ldr	r2, [pc, #128]	; (800218c <HAL_ADC_Start_DMA+0x1e0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d129      	bne.n	8002162 <HAL_ADC_Start_DMA+0x1b6>
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_ADC_Start_DMA+0x1c8>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2b0f      	cmp	r3, #15
 8002118:	d823      	bhi.n	8002162 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d11c      	bne.n	8002162 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	e013      	b.n	8002162 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_ADC_Start_DMA+0x1d8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d10e      	bne.n	8002162 <HAL_ADC_Start_DMA+0x1b6>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d107      	bne.n	8002162 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002160:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000000c 	.word	0x2000000c
 8002170:	431bde83 	.word	0x431bde83
 8002174:	40012300 	.word	0x40012300
 8002178:	08002609 	.word	0x08002609
 800217c:	080026c3 	.word	0x080026c3
 8002180:	080026df 	.word	0x080026df
 8002184:	40012000 	.word	0x40012000
 8002188:	40012100 	.word	0x40012100
 800218c:	40012200 	.word	0x40012200

08002190 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x1c>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e105      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x228>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b09      	cmp	r3, #9
 80021f6:	d925      	bls.n	8002244 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68d9      	ldr	r1, [r3, #12]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	3b1e      	subs	r3, #30
 800220e:	2207      	movs	r2, #7
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43da      	mvns	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	400a      	ands	r2, r1
 800221c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68d9      	ldr	r1, [r3, #12]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	b29b      	uxth	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	4603      	mov	r3, r0
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4403      	add	r3, r0
 8002236:	3b1e      	subs	r3, #30
 8002238:	409a      	lsls	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	e022      	b.n	800228a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6919      	ldr	r1, [r3, #16]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	2207      	movs	r2, #7
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	400a      	ands	r2, r1
 8002266:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6919      	ldr	r1, [r3, #16]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	4618      	mov	r0, r3
 800227a:	4603      	mov	r3, r0
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4403      	add	r3, r0
 8002280:	409a      	lsls	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b06      	cmp	r3, #6
 8002290:	d824      	bhi.n	80022dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b05      	subs	r3, #5
 80022a4:	221f      	movs	r2, #31
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4618      	mov	r0, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b05      	subs	r3, #5
 80022ce:	fa00 f203 	lsl.w	r2, r0, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	635a      	str	r2, [r3, #52]	; 0x34
 80022da:	e04c      	b.n	8002376 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b0c      	cmp	r3, #12
 80022e2:	d824      	bhi.n	800232e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	3b23      	subs	r3, #35	; 0x23
 80022f6:	221f      	movs	r2, #31
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43da      	mvns	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	400a      	ands	r2, r1
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	4618      	mov	r0, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	3b23      	subs	r3, #35	; 0x23
 8002320:	fa00 f203 	lsl.w	r2, r0, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
 800232c:	e023      	b.n	8002376 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	3b41      	subs	r3, #65	; 0x41
 8002340:	221f      	movs	r2, #31
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	400a      	ands	r2, r1
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	4618      	mov	r0, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	3b41      	subs	r3, #65	; 0x41
 800236a:	fa00 f203 	lsl.w	r2, r0, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_ADC_ConfigChannel+0x234>)
 8002378:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a21      	ldr	r2, [pc, #132]	; (8002404 <HAL_ADC_ConfigChannel+0x238>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d109      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1cc>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b12      	cmp	r3, #18
 800238a:	d105      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_ADC_ConfigChannel+0x238>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d123      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x21e>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d003      	beq.n	80023b2 <HAL_ADC_ConfigChannel+0x1e6>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b11      	cmp	r3, #17
 80023b0:	d11b      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d111      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_ADC_ConfigChannel+0x23c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <HAL_ADC_ConfigChannel+0x240>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	0c9a      	lsrs	r2, r3, #18
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023dc:	e002      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f9      	bne.n	80023de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40012300 	.word	0x40012300
 8002404:	40012000 	.word	0x40012000
 8002408:	2000000c 	.word	0x2000000c
 800240c:	431bde83 	.word	0x431bde83

08002410 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002418:	4b79      	ldr	r3, [pc, #484]	; (8002600 <ADC_Init+0x1f0>)
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	431a      	orrs	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	021a      	lsls	r2, r3, #8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	4a58      	ldr	r2, [pc, #352]	; (8002604 <ADC_Init+0x1f4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d022      	beq.n	80024ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6899      	ldr	r1, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	e00f      	b.n	800250e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800250c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0202 	bic.w	r2, r2, #2
 800251c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7e1b      	ldrb	r3, [r3, #24]
 8002528:	005a      	lsls	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01b      	beq.n	8002574 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800255a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	3b01      	subs	r3, #1
 8002568:	035a      	lsls	r2, r3, #13
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	e007      	b.n	8002584 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002582:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	3b01      	subs	r3, #1
 80025a0:	051a      	lsls	r2, r3, #20
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025c6:	025a      	lsls	r2, r3, #9
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6899      	ldr	r1, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	029a      	lsls	r2, r3, #10
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40012300 	.word	0x40012300
 8002604:	0f000001 	.word	0x0f000001

08002608 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800261e:	2b00      	cmp	r3, #0
 8002620:	d13c      	bne.n	800269c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d12b      	bne.n	8002694 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002640:	2b00      	cmp	r3, #0
 8002642:	d127      	bne.n	8002694 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800265c:	2b00      	cmp	r3, #0
 800265e:	d119      	bne.n	8002694 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0220 	bic.w	r2, r2, #32
 800266e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f043 0201 	orr.w	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f7ff fd7b 	bl	8002190 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800269a:	e00e      	b.n	80026ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f7ff fd85 	bl	80021b8 <HAL_ADC_ErrorCallback>
}
 80026ae:	e004      	b.n	80026ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f7ff fd67 	bl	80021a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2240      	movs	r2, #64	; 0x40
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f043 0204 	orr.w	r2, r3, #4
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff fd5a 	bl	80021b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0b      	blt.n	800279a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <__NVIC_EnableIRQ+0x38>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002878:	d301      	bcc.n	800287e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287a:	2301      	movs	r3, #1
 800287c:	e00f      	b.n	800289e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <SysTick_Config+0x40>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002886:	210f      	movs	r1, #15
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f7ff ff8e 	bl	80027ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <SysTick_Config+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <SysTick_Config+0x40>)
 8002898:	2207      	movs	r2, #7
 800289a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000e010 	.word	0xe000e010

080028ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff29 	bl	800270c <__NVIC_SetPriorityGrouping>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d4:	f7ff ff3e 	bl	8002754 <__NVIC_GetPriorityGrouping>
 80028d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7ff ff8e 	bl	8002800 <NVIC_EncodePriority>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff5d 	bl	80027ac <__NVIC_SetPriority>
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff31 	bl	8002770 <__NVIC_EnableIRQ>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ffa2 	bl	8002868 <SysTick_Config>
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800293c:	f7ff fae6 	bl	8001f0c <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e099      	b.n	8002a80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296c:	e00f      	b.n	800298e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800296e:	f7ff facd 	bl	8001f0c <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b05      	cmp	r3, #5
 800297a:	d908      	bls.n	800298e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2203      	movs	r2, #3
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e078      	b.n	8002a80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e8      	bne.n	800296e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <HAL_DMA_Init+0x158>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d107      	bne.n	80029f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f0:	4313      	orrs	r3, r2
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f023 0307 	bic.w	r3, r3, #7
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d117      	bne.n	8002a52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00e      	beq.n	8002a52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fa6f 	bl	8002f18 <DMA_CheckFifoParam>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2240      	movs	r2, #64	; 0x40
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e016      	b.n	8002a80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fa26 	bl	8002eac <DMA_CalcBaseAndBitshift>
 8002a60:	4603      	mov	r3, r0
 8002a62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	223f      	movs	r2, #63	; 0x3f
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	f010803f 	.word	0xf010803f

08002a8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_DMA_Start_IT+0x26>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e040      	b.n	8002b34 <HAL_DMA_Start_IT+0xa8>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d12f      	bne.n	8002b26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f9b8 	bl	8002e50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	223f      	movs	r2, #63	; 0x3f
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0216 	orr.w	r2, r2, #22
 8002afa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0208 	orr.w	r2, r2, #8
 8002b12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e005      	b.n	8002b32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b48:	4b92      	ldr	r3, [pc, #584]	; (8002d94 <HAL_DMA_IRQHandler+0x258>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a92      	ldr	r2, [pc, #584]	; (8002d98 <HAL_DMA_IRQHandler+0x25c>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0a9b      	lsrs	r3, r3, #10
 8002b54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2208      	movs	r2, #8
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01a      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	2208      	movs	r2, #8
 8002b96:	409a      	lsls	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	2201      	movs	r2, #1
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d012      	beq.n	8002bde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	2201      	movs	r2, #1
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f043 0202 	orr.w	r2, r3, #2
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	2204      	movs	r2, #4
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d012      	beq.n	8002c14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2204      	movs	r2, #4
 8002c02:	409a      	lsls	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	2210      	movs	r2, #16
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d043      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d03c      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	2210      	movs	r2, #16
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d018      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d024      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
 8002c6a:	e01f      	b.n	8002cac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01b      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
 8002c7c:	e016      	b.n	8002cac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0208 	bic.w	r2, r2, #8
 8002c9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 808e 	beq.w	8002dda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8086 	beq.w	8002dda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d136      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0216 	bic.w	r2, r2, #22
 8002cf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <HAL_DMA_IRQHandler+0x1da>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0208 	bic.w	r2, r2, #8
 8002d24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	223f      	movs	r2, #63	; 0x3f
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d07d      	beq.n	8002e46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
        }
        return;
 8002d52:	e078      	b.n	8002e46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01c      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d108      	bne.n	8002d82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d030      	beq.n	8002dda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
 8002d80:	e02b      	b.n	8002dda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d027      	beq.n	8002dda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
 8002d92:	e022      	b.n	8002dda <HAL_DMA_IRQHandler+0x29e>
 8002d94:	2000000c 	.word	0x2000000c
 8002d98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0210 	bic.w	r2, r2, #16
 8002db8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d032      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d022      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2205      	movs	r2, #5
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d307      	bcc.n	8002e22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f2      	bne.n	8002e06 <HAL_DMA_IRQHandler+0x2ca>
 8002e20:	e000      	b.n	8002e24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
 8002e44:	e000      	b.n	8002e48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e46:	bf00      	nop
    }
  }
}
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop

08002e50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d108      	bne.n	8002e90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e8e:	e007      	b.n	8002ea0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	60da      	str	r2, [r3, #12]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	3b10      	subs	r3, #16
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <DMA_CalcBaseAndBitshift+0x64>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ec6:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <DMA_CalcBaseAndBitshift+0x68>)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d909      	bls.n	8002eee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	1d1a      	adds	r2, r3, #4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58
 8002eec:	e007      	b.n	8002efe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ef6:	f023 0303 	bic.w	r3, r3, #3
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	aaaaaaab 	.word	0xaaaaaaab
 8002f14:	08005d68 	.word	0x08005d68

08002f18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d11f      	bne.n	8002f72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d855      	bhi.n	8002fe4 <DMA_CheckFifoParam+0xcc>
 8002f38:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <DMA_CheckFifoParam+0x28>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f51 	.word	0x08002f51
 8002f44:	08002f63 	.word	0x08002f63
 8002f48:	08002f51 	.word	0x08002f51
 8002f4c:	08002fe5 	.word	0x08002fe5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d045      	beq.n	8002fe8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f60:	e042      	b.n	8002fe8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f6a:	d13f      	bne.n	8002fec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f70:	e03c      	b.n	8002fec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7a:	d121      	bne.n	8002fc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d836      	bhi.n	8002ff0 <DMA_CheckFifoParam+0xd8>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <DMA_CheckFifoParam+0x70>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002f9f 	.word	0x08002f9f
 8002f90:	08002f99 	.word	0x08002f99
 8002f94:	08002fb1 	.word	0x08002fb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9c:	e02f      	b.n	8002ffe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d024      	beq.n	8002ff4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fae:	e021      	b.n	8002ff4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fb8:	d11e      	bne.n	8002ff8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fbe:	e01b      	b.n	8002ff8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d902      	bls.n	8002fcc <DMA_CheckFifoParam+0xb4>
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d003      	beq.n	8002fd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fca:	e018      	b.n	8002ffe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd0:	e015      	b.n	8002ffe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe2:	e00b      	b.n	8002ffc <DMA_CheckFifoParam+0xe4>
      break;
 8002fe4:	bf00      	nop
 8002fe6:	e00a      	b.n	8002ffe <DMA_CheckFifoParam+0xe6>
      break;
 8002fe8:	bf00      	nop
 8002fea:	e008      	b.n	8002ffe <DMA_CheckFifoParam+0xe6>
      break;
 8002fec:	bf00      	nop
 8002fee:	e006      	b.n	8002ffe <DMA_CheckFifoParam+0xe6>
      break;
 8002ff0:	bf00      	nop
 8002ff2:	e004      	b.n	8002ffe <DMA_CheckFifoParam+0xe6>
      break;
 8002ff4:	bf00      	nop
 8002ff6:	e002      	b.n	8002ffe <DMA_CheckFifoParam+0xe6>
      break;   
 8002ff8:	bf00      	nop
 8002ffa:	e000      	b.n	8002ffe <DMA_CheckFifoParam+0xe6>
      break;
 8002ffc:	bf00      	nop
    }
  } 
  
  return status; 
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	; 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e16b      	b.n	8003300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003028:	2201      	movs	r2, #1
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	f040 815a 	bne.w	80032fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d00b      	beq.n	8003066 <HAL_GPIO_Init+0x5a>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d007      	beq.n	8003066 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800305a:	2b11      	cmp	r3, #17
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b12      	cmp	r3, #18
 8003064:	d130      	bne.n	80030c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800309c:	2201      	movs	r2, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 0201 	and.w	r2, r3, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0xfc>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b12      	cmp	r3, #18
 8003106:	d123      	bne.n	8003150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	08da      	lsrs	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3208      	adds	r2, #8
 8003110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	08da      	lsrs	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3208      	adds	r2, #8
 800314a:	69b9      	ldr	r1, [r7, #24]
 800314c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80b4 	beq.w	80032fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	4b5f      	ldr	r3, [pc, #380]	; (8003314 <HAL_GPIO_Init+0x308>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	4a5e      	ldr	r2, [pc, #376]	; (8003314 <HAL_GPIO_Init+0x308>)
 800319c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a0:	6453      	str	r3, [r2, #68]	; 0x44
 80031a2:	4b5c      	ldr	r3, [pc, #368]	; (8003314 <HAL_GPIO_Init+0x308>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ae:	4a5a      	ldr	r2, [pc, #360]	; (8003318 <HAL_GPIO_Init+0x30c>)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	3302      	adds	r3, #2
 80031b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a51      	ldr	r2, [pc, #324]	; (800331c <HAL_GPIO_Init+0x310>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d02b      	beq.n	8003232 <HAL_GPIO_Init+0x226>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a50      	ldr	r2, [pc, #320]	; (8003320 <HAL_GPIO_Init+0x314>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d025      	beq.n	800322e <HAL_GPIO_Init+0x222>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4f      	ldr	r2, [pc, #316]	; (8003324 <HAL_GPIO_Init+0x318>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01f      	beq.n	800322a <HAL_GPIO_Init+0x21e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4e      	ldr	r2, [pc, #312]	; (8003328 <HAL_GPIO_Init+0x31c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d019      	beq.n	8003226 <HAL_GPIO_Init+0x21a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4d      	ldr	r2, [pc, #308]	; (800332c <HAL_GPIO_Init+0x320>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_GPIO_Init+0x216>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4c      	ldr	r2, [pc, #304]	; (8003330 <HAL_GPIO_Init+0x324>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00d      	beq.n	800321e <HAL_GPIO_Init+0x212>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <HAL_GPIO_Init+0x328>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <HAL_GPIO_Init+0x20e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4a      	ldr	r2, [pc, #296]	; (8003338 <HAL_GPIO_Init+0x32c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_GPIO_Init+0x20a>
 8003212:	2307      	movs	r3, #7
 8003214:	e00e      	b.n	8003234 <HAL_GPIO_Init+0x228>
 8003216:	2308      	movs	r3, #8
 8003218:	e00c      	b.n	8003234 <HAL_GPIO_Init+0x228>
 800321a:	2306      	movs	r3, #6
 800321c:	e00a      	b.n	8003234 <HAL_GPIO_Init+0x228>
 800321e:	2305      	movs	r3, #5
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x228>
 8003222:	2304      	movs	r3, #4
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x228>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x228>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x228>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x228>
 8003232:	2300      	movs	r3, #0
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003244:	4934      	ldr	r1, [pc, #208]	; (8003318 <HAL_GPIO_Init+0x30c>)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003252:	4b3a      	ldr	r3, [pc, #232]	; (800333c <HAL_GPIO_Init+0x330>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003276:	4a31      	ldr	r2, [pc, #196]	; (800333c <HAL_GPIO_Init+0x330>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800327c:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_GPIO_Init+0x330>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a0:	4a26      	ldr	r2, [pc, #152]	; (800333c <HAL_GPIO_Init+0x330>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <HAL_GPIO_Init+0x330>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ca:	4a1c      	ldr	r2, [pc, #112]	; (800333c <HAL_GPIO_Init+0x330>)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_GPIO_Init+0x330>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032f4:	4a11      	ldr	r2, [pc, #68]	; (800333c <HAL_GPIO_Init+0x330>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	f67f ae90 	bls.w	8003028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003308:	bf00      	nop
 800330a:	3724      	adds	r7, #36	; 0x24
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40023800 	.word	0x40023800
 8003318:	40013800 	.word	0x40013800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00
 800332c:	40021000 	.word	0x40021000
 8003330:	40021400 	.word	0x40021400
 8003334:	40021800 	.word	0x40021800
 8003338:	40021c00 	.word	0x40021c00
 800333c:	40013c00 	.word	0x40013c00

08003340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
 800334c:	4613      	mov	r3, r2
 800334e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800335c:	e003      	b.n	8003366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e25b      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d075      	beq.n	800347e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003392:	4ba3      	ldr	r3, [pc, #652]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d00c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4ba0      	ldr	r3, [pc, #640]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d112      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b9d      	ldr	r3, [pc, #628]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b99      	ldr	r3, [pc, #612]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0x108>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d157      	bne.n	800347c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e236      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x74>
 80033da:	4b91      	ldr	r3, [pc, #580]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a90      	ldr	r2, [pc, #576]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x98>
 80033f2:	4b8b      	ldr	r3, [pc, #556]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a8a      	ldr	r2, [pc, #552]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a87      	ldr	r2, [pc, #540]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 800340c:	4b84      	ldr	r3, [pc, #528]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a83      	ldr	r2, [pc, #524]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b81      	ldr	r3, [pc, #516]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a80      	ldr	r2, [pc, #512]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fd6e 	bl	8001f0c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fd6a 	bl	8001f0c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1fb      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b76      	ldr	r3, [pc, #472]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xc0>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fd5a 	bl	8001f0c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe fd56 	bl	8001f0c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1e7      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0xe8>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348a:	4b65      	ldr	r3, [pc, #404]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b62      	ldr	r3, [pc, #392]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b5f      	ldr	r3, [pc, #380]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b5c      	ldr	r3, [pc, #368]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1bb      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b56      	ldr	r3, [pc, #344]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4952      	ldr	r1, [pc, #328]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b4f      	ldr	r3, [pc, #316]	; (8003624 <HAL_RCC_OscConfig+0x2b0>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe fd0f 	bl	8001f0c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe fd0b 	bl	8001f0c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e19c      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b46      	ldr	r3, [pc, #280]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b43      	ldr	r3, [pc, #268]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4940      	ldr	r1, [pc, #256]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b3f      	ldr	r3, [pc, #252]	; (8003624 <HAL_RCC_OscConfig+0x2b0>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fcee 	bl	8001f0c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe fcea 	bl	8001f0c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e17b      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b36      	ldr	r3, [pc, #216]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d030      	beq.n	80035c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b30      	ldr	r3, [pc, #192]	; (8003628 <HAL_RCC_OscConfig+0x2b4>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe fcce 	bl	8001f0c <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe fcca 	bl	8001f0c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e15b      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b26      	ldr	r3, [pc, #152]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x200>
 8003592:	e015      	b.n	80035c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003594:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCC_OscConfig+0x2b4>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fe fcb7 	bl	8001f0c <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fe fcb3 	bl	8001f0c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e144      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a0 	beq.w	800370e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6413      	str	r3, [r2, #64]	; 0x40
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_OscConfig+0x2b8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d121      	bne.n	800364e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_RCC_OscConfig+0x2b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_RCC_OscConfig+0x2b8>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fe fc79 	bl	8001f0c <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	e011      	b.n	8003642 <HAL_RCC_OscConfig+0x2ce>
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800
 8003624:	42470000 	.word	0x42470000
 8003628:	42470e80 	.word	0x42470e80
 800362c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003630:	f7fe fc6c 	bl	8001f0c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0fd      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b81      	ldr	r3, [pc, #516]	; (8003848 <HAL_RCC_OscConfig+0x4d4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d106      	bne.n	8003664 <HAL_RCC_OscConfig+0x2f0>
 8003656:	4b7d      	ldr	r3, [pc, #500]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a7c      	ldr	r2, [pc, #496]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
 8003662:	e01c      	b.n	800369e <HAL_RCC_OscConfig+0x32a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d10c      	bne.n	8003686 <HAL_RCC_OscConfig+0x312>
 800366c:	4b77      	ldr	r3, [pc, #476]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	4a76      	ldr	r2, [pc, #472]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6713      	str	r3, [r2, #112]	; 0x70
 8003678:	4b74      	ldr	r3, [pc, #464]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	4a73      	ldr	r2, [pc, #460]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6713      	str	r3, [r2, #112]	; 0x70
 8003684:	e00b      	b.n	800369e <HAL_RCC_OscConfig+0x32a>
 8003686:	4b71      	ldr	r3, [pc, #452]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	4a70      	ldr	r2, [pc, #448]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6713      	str	r3, [r2, #112]	; 0x70
 8003692:	4b6e      	ldr	r3, [pc, #440]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a6d      	ldr	r2, [pc, #436]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d015      	beq.n	80036d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fe fc31 	bl	8001f0c <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fe fc2d 	bl	8001f0c <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0bc      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	4b61      	ldr	r3, [pc, #388]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ee      	beq.n	80036ae <HAL_RCC_OscConfig+0x33a>
 80036d0:	e014      	b.n	80036fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fe fc1b 	bl	8001f0c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe fc17 	bl	8001f0c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0a6      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f0:	4b56      	ldr	r3, [pc, #344]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ee      	bne.n	80036da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b52      	ldr	r3, [pc, #328]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	4a51      	ldr	r2, [pc, #324]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8092 	beq.w	800383c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003718:	4b4c      	ldr	r3, [pc, #304]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d05c      	beq.n	80037de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d141      	bne.n	80037b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372c:	4b48      	ldr	r3, [pc, #288]	; (8003850 <HAL_RCC_OscConfig+0x4dc>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe fbeb 	bl	8001f0c <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe fbe7 	bl	8001f0c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e078      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374c:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	019b      	lsls	r3, r3, #6
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	4933      	ldr	r1, [pc, #204]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003782:	4b33      	ldr	r3, [pc, #204]	; (8003850 <HAL_RCC_OscConfig+0x4dc>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe fbc0 	bl	8001f0c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7fe fbbc 	bl	8001f0c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e04d      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b2a      	ldr	r3, [pc, #168]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x41c>
 80037ae:	e045      	b.n	800383c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_RCC_OscConfig+0x4dc>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe fba9 	bl	8001f0c <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe fba5 	bl	8001f0c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e036      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d0:	4b1e      	ldr	r3, [pc, #120]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x44a>
 80037dc:	e02e      	b.n	800383c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e029      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ea:	4b18      	ldr	r3, [pc, #96]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d11c      	bne.n	8003838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d115      	bne.n	8003838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003812:	4013      	ands	r3, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003818:	4293      	cmp	r3, r2
 800381a:	d10d      	bne.n	8003838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d106      	bne.n	8003838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40007000 	.word	0x40007000
 800384c:	40023800 	.word	0x40023800
 8003850:	42470060 	.word	0x42470060

08003854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0cc      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b68      	ldr	r3, [pc, #416]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d90c      	bls.n	8003890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a52      	ldr	r2, [pc, #328]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d044      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d119      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d003      	beq.n	8003912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	2b03      	cmp	r3, #3
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b3f      	ldr	r3, [pc, #252]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e067      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4934      	ldr	r1, [pc, #208]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fe fae2 	bl	8001f0c <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fe fade 	bl	8001f0c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e04f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d20c      	bcs.n	800399c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4601      	mov	r1, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
 80039ee:	fa21 f303 	lsr.w	r3, r1, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fa42 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00
 8003a10:	40023800 	.word	0x40023800
 8003a14:	08005d58 	.word	0x08005d58
 8003a18:	2000000c 	.word	0x2000000c
 8003a1c:	20000010 	.word	0x20000010

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a36:	4b63      	ldr	r3, [pc, #396]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d007      	beq.n	8003a52 <HAL_RCC_GetSysClockFreq+0x32>
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d008      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x38>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f040 80b4 	bne.w	8003bb4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a4c:	4b5e      	ldr	r3, [pc, #376]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a4e:	60bb      	str	r3, [r7, #8]
       break;
 8003a50:	e0b3      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a52:	4b5e      	ldr	r3, [pc, #376]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003a54:	60bb      	str	r3, [r7, #8]
      break;
 8003a56:	e0b0      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a58:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a62:	4b58      	ldr	r3, [pc, #352]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d04a      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6e:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	f04f 0400 	mov.w	r4, #0
 8003a78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	ea03 0501 	and.w	r5, r3, r1
 8003a84:	ea04 0602 	and.w	r6, r4, r2
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4632      	mov	r2, r6
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	f04f 0400 	mov.w	r4, #0
 8003a94:	0154      	lsls	r4, r2, #5
 8003a96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a9a:	014b      	lsls	r3, r1, #5
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	1b49      	subs	r1, r1, r5
 8003aa2:	eb62 0206 	sbc.w	r2, r2, r6
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	f04f 0400 	mov.w	r4, #0
 8003aae:	0194      	lsls	r4, r2, #6
 8003ab0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ab4:	018b      	lsls	r3, r1, #6
 8003ab6:	1a5b      	subs	r3, r3, r1
 8003ab8:	eb64 0402 	sbc.w	r4, r4, r2
 8003abc:	f04f 0100 	mov.w	r1, #0
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	00e2      	lsls	r2, r4, #3
 8003ac6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003aca:	00d9      	lsls	r1, r3, #3
 8003acc:	460b      	mov	r3, r1
 8003ace:	4614      	mov	r4, r2
 8003ad0:	195b      	adds	r3, r3, r5
 8003ad2:	eb44 0406 	adc.w	r4, r4, r6
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	0262      	lsls	r2, r4, #9
 8003ae0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ae4:	0259      	lsls	r1, r3, #9
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4614      	mov	r4, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	4621      	mov	r1, r4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f04f 0400 	mov.w	r4, #0
 8003af4:	461a      	mov	r2, r3
 8003af6:	4623      	mov	r3, r4
 8003af8:	f7fd f86a 	bl	8000bd0 <__aeabi_uldivmod>
 8003afc:	4603      	mov	r3, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e049      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b04:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	f04f 0400 	mov.w	r4, #0
 8003b0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	ea03 0501 	and.w	r5, r3, r1
 8003b1a:	ea04 0602 	and.w	r6, r4, r2
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4632      	mov	r2, r6
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	f04f 0400 	mov.w	r4, #0
 8003b2a:	0154      	lsls	r4, r2, #5
 8003b2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b30:	014b      	lsls	r3, r1, #5
 8003b32:	4619      	mov	r1, r3
 8003b34:	4622      	mov	r2, r4
 8003b36:	1b49      	subs	r1, r1, r5
 8003b38:	eb62 0206 	sbc.w	r2, r2, r6
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	f04f 0400 	mov.w	r4, #0
 8003b44:	0194      	lsls	r4, r2, #6
 8003b46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b4a:	018b      	lsls	r3, r1, #6
 8003b4c:	1a5b      	subs	r3, r3, r1
 8003b4e:	eb64 0402 	sbc.w	r4, r4, r2
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	00e2      	lsls	r2, r4, #3
 8003b5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b60:	00d9      	lsls	r1, r3, #3
 8003b62:	460b      	mov	r3, r1
 8003b64:	4614      	mov	r4, r2
 8003b66:	195b      	adds	r3, r3, r5
 8003b68:	eb44 0406 	adc.w	r4, r4, r6
 8003b6c:	f04f 0100 	mov.w	r1, #0
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	02a2      	lsls	r2, r4, #10
 8003b76:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b7a:	0299      	lsls	r1, r3, #10
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4614      	mov	r4, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	4621      	mov	r1, r4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f04f 0400 	mov.w	r4, #0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4623      	mov	r3, r4
 8003b8e:	f7fd f81f 	bl	8000bd0 <__aeabi_uldivmod>
 8003b92:	4603      	mov	r3, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	60bb      	str	r3, [r7, #8]
      break;
 8003bb2:	e002      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bb6:	60bb      	str	r3, [r7, #8]
      break;
 8003bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bba:	68bb      	ldr	r3, [r7, #8]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	00f42400 	.word	0x00f42400
 8003bcc:	007a1200 	.word	0x007a1200

08003bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e01d      	b.n	8003c1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd ff58 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f000 fb4e 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b06      	cmp	r3, #6
 8003c4e:	d007      	beq.n	8003c60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e01d      	b.n	8003cbc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f815 	bl	8003cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f000 faff 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fdca 	bl	8004884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <HAL_TIM_PWM_Start+0x74>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_TIM_PWM_Start+0x2c>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <HAL_TIM_PWM_Start+0x78>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <HAL_TIM_PWM_Start+0x30>
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_TIM_PWM_Start+0x32>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d007      	beq.n	8003d40 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40010400 	.word	0x40010400

08003d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d122      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0202 	mvn.w	r2, #2
 8003d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fa6b 	bl	8004272 <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa5d 	bl	800425e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fa6e 	bl	8004286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0204 	mvn.w	r2, #4
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa41 	bl	8004272 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa33 	bl	800425e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fa44 	bl	8004286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0208 	mvn.w	r2, #8
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fa17 	bl	8004272 <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa09 	bl	800425e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fa1a 	bl	8004286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0210 	mvn.w	r2, #16
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2208      	movs	r2, #8
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9ed 	bl	8004272 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f9df 	bl	800425e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f9f0 	bl	8004286 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0201 	mvn.w	r2, #1
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fd fb44 	bl	8001560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d10e      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d107      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fdbe 	bl	8004a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d10e      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d107      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f9b5 	bl	800429a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	d10e      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d107      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0220 	mvn.w	r2, #32
 8003f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fd88 	bl	8004a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0b4      	b.n	80040e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b0c      	cmp	r3, #12
 8003f92:	f200 809f 	bhi.w	80040d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fd1 	.word	0x08003fd1
 8003fa0:	080040d5 	.word	0x080040d5
 8003fa4:	080040d5 	.word	0x080040d5
 8003fa8:	080040d5 	.word	0x080040d5
 8003fac:	08004011 	.word	0x08004011
 8003fb0:	080040d5 	.word	0x080040d5
 8003fb4:	080040d5 	.word	0x080040d5
 8003fb8:	080040d5 	.word	0x080040d5
 8003fbc:	08004053 	.word	0x08004053
 8003fc0:	080040d5 	.word	0x080040d5
 8003fc4:	080040d5 	.word	0x080040d5
 8003fc8:	080040d5 	.word	0x080040d5
 8003fcc:	08004093 	.word	0x08004093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fa0a 	bl	80043f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0208 	orr.w	r2, r2, #8
 8003fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0204 	bic.w	r2, r2, #4
 8003ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6999      	ldr	r1, [r3, #24]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	619a      	str	r2, [r3, #24]
      break;
 800400e:	e062      	b.n	80040d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fa5a 	bl	80044d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800402a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6999      	ldr	r1, [r3, #24]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	021a      	lsls	r2, r3, #8
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	619a      	str	r2, [r3, #24]
      break;
 8004050:	e041      	b.n	80040d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	4618      	mov	r0, r3
 800405a:	f000 faaf 	bl	80045bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0208 	orr.w	r2, r2, #8
 800406c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0204 	bic.w	r2, r2, #4
 800407c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69d9      	ldr	r1, [r3, #28]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	61da      	str	r2, [r3, #28]
      break;
 8004090:	e021      	b.n	80040d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fb03 	bl	80046a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69d9      	ldr	r1, [r3, #28]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	021a      	lsls	r2, r3, #8
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	61da      	str	r2, [r3, #28]
      break;
 80040d2:	e000      	b.n	80040d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80040d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_TIM_ConfigClockSource+0x18>
 8004104:	2302      	movs	r3, #2
 8004106:	e0a6      	b.n	8004256 <HAL_TIM_ConfigClockSource+0x166>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004126:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800412e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	d067      	beq.n	8004210 <HAL_TIM_ConfigClockSource+0x120>
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d80b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x6c>
 8004144:	2b10      	cmp	r3, #16
 8004146:	d073      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x140>
 8004148:	2b10      	cmp	r3, #16
 800414a:	d802      	bhi.n	8004152 <HAL_TIM_ConfigClockSource+0x62>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d06f      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004150:	e078      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004152:	2b20      	cmp	r3, #32
 8004154:	d06c      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x140>
 8004156:	2b30      	cmp	r3, #48	; 0x30
 8004158:	d06a      	beq.n	8004230 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800415a:	e073      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800415c:	2b70      	cmp	r3, #112	; 0x70
 800415e:	d00d      	beq.n	800417c <HAL_TIM_ConfigClockSource+0x8c>
 8004160:	2b70      	cmp	r3, #112	; 0x70
 8004162:	d804      	bhi.n	800416e <HAL_TIM_ConfigClockSource+0x7e>
 8004164:	2b50      	cmp	r3, #80	; 0x50
 8004166:	d033      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0xe0>
 8004168:	2b60      	cmp	r3, #96	; 0x60
 800416a:	d041      	beq.n	80041f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800416c:	e06a      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	d066      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x152>
 8004174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004178:	d017      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800417a:	e063      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6899      	ldr	r1, [r3, #8]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f000 fb5a 	bl	8004844 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800419e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	609a      	str	r2, [r3, #8]
      break;
 80041a8:	e04c      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6899      	ldr	r1, [r3, #8]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f000 fb43 	bl	8004844 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041cc:	609a      	str	r2, [r3, #8]
      break;
 80041ce:	e039      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6859      	ldr	r1, [r3, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	461a      	mov	r2, r3
 80041de:	f000 fab7 	bl	8004750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2150      	movs	r1, #80	; 0x50
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fb10 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 80041ee:	e029      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	461a      	mov	r2, r3
 80041fe:	f000 fad6 	bl	80047ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2160      	movs	r1, #96	; 0x60
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fb00 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 800420e:	e019      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	461a      	mov	r2, r3
 800421e:	f000 fa97 	bl	8004750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2140      	movs	r1, #64	; 0x40
 8004228:	4618      	mov	r0, r3
 800422a:	f000 faf0 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 800422e:	e009      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f000 fae7 	bl	800480e <TIM_ITRx_SetConfig>
      break;
 8004240:	e000      	b.n	8004244 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a40      	ldr	r2, [pc, #256]	; (80043c4 <TIM_Base_SetConfig+0x114>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ce:	d00f      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a3d      	ldr	r2, [pc, #244]	; (80043c8 <TIM_Base_SetConfig+0x118>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a3c      	ldr	r2, [pc, #240]	; (80043cc <TIM_Base_SetConfig+0x11c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a3b      	ldr	r2, [pc, #236]	; (80043d0 <TIM_Base_SetConfig+0x120>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3a      	ldr	r2, [pc, #232]	; (80043d4 <TIM_Base_SetConfig+0x124>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d108      	bne.n	8004302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2f      	ldr	r2, [pc, #188]	; (80043c4 <TIM_Base_SetConfig+0x114>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d02b      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d027      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a2c      	ldr	r2, [pc, #176]	; (80043c8 <TIM_Base_SetConfig+0x118>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d023      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a2b      	ldr	r2, [pc, #172]	; (80043cc <TIM_Base_SetConfig+0x11c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d01f      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <TIM_Base_SetConfig+0x120>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01b      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <TIM_Base_SetConfig+0x124>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d017      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a28      	ldr	r2, [pc, #160]	; (80043d8 <TIM_Base_SetConfig+0x128>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a27      	ldr	r2, [pc, #156]	; (80043dc <TIM_Base_SetConfig+0x12c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00f      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a26      	ldr	r2, [pc, #152]	; (80043e0 <TIM_Base_SetConfig+0x130>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00b      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <TIM_Base_SetConfig+0x134>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <TIM_Base_SetConfig+0x138>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a23      	ldr	r2, [pc, #140]	; (80043ec <TIM_Base_SetConfig+0x13c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d108      	bne.n	8004374 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <TIM_Base_SetConfig+0x114>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0xf8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <TIM_Base_SetConfig+0x124>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d103      	bne.n	80043b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	615a      	str	r2, [r3, #20]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40010000 	.word	0x40010000
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40000800 	.word	0x40000800
 80043d0:	40000c00 	.word	0x40000c00
 80043d4:	40010400 	.word	0x40010400
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40014800 	.word	0x40014800
 80043e4:	40001800 	.word	0x40001800
 80043e8:	40001c00 	.word	0x40001c00
 80043ec:	40002000 	.word	0x40002000

080043f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0201 	bic.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 0302 	bic.w	r3, r3, #2
 8004438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <TIM_OC1_SetConfig+0xd8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_OC1_SetConfig+0x64>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <TIM_OC1_SetConfig+0xdc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d10c      	bne.n	800446e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f023 0308 	bic.w	r3, r3, #8
 800445a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 0304 	bic.w	r3, r3, #4
 800446c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <TIM_OC1_SetConfig+0xd8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d003      	beq.n	800447e <TIM_OC1_SetConfig+0x8e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a14      	ldr	r2, [pc, #80]	; (80044cc <TIM_OC1_SetConfig+0xdc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d111      	bne.n	80044a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800448c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	621a      	str	r2, [r3, #32]
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40010400 	.word	0x40010400

080044d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f023 0210 	bic.w	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0320 	bic.w	r3, r3, #32
 800451a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a22      	ldr	r2, [pc, #136]	; (80045b4 <TIM_OC2_SetConfig+0xe4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_OC2_SetConfig+0x68>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a21      	ldr	r2, [pc, #132]	; (80045b8 <TIM_OC2_SetConfig+0xe8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10d      	bne.n	8004554 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004552:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <TIM_OC2_SetConfig+0xe4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_OC2_SetConfig+0x94>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <TIM_OC2_SetConfig+0xe8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d113      	bne.n	800458c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800456a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40010400 	.word	0x40010400

080045bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a21      	ldr	r2, [pc, #132]	; (800469c <TIM_OC3_SetConfig+0xe0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_OC3_SetConfig+0x66>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <TIM_OC3_SetConfig+0xe4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d10d      	bne.n	800463e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800463c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a16      	ldr	r2, [pc, #88]	; (800469c <TIM_OC3_SetConfig+0xe0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_OC3_SetConfig+0x92>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <TIM_OC3_SetConfig+0xe4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d113      	bne.n	8004676 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	621a      	str	r2, [r3, #32]
}
 8004690:	bf00      	nop
 8004692:	371c      	adds	r7, #28
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	40010000 	.word	0x40010000
 80046a0:	40010400 	.word	0x40010400

080046a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	031b      	lsls	r3, r3, #12
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a12      	ldr	r2, [pc, #72]	; (8004748 <TIM_OC4_SetConfig+0xa4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d003      	beq.n	800470c <TIM_OC4_SetConfig+0x68>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a11      	ldr	r2, [pc, #68]	; (800474c <TIM_OC4_SetConfig+0xa8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d109      	bne.n	8004720 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004712:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	019b      	lsls	r3, r3, #6
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40010400 	.word	0x40010400

08004750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f023 0201 	bic.w	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800477a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f023 030a 	bic.w	r3, r3, #10
 800478c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b087      	sub	sp, #28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f023 0210 	bic.w	r2, r3, #16
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	031b      	lsls	r3, r3, #12
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	621a      	str	r2, [r3, #32]
}
 8004802:	bf00      	nop
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	f043 0307 	orr.w	r3, r3, #7
 8004830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	609a      	str	r2, [r3, #8]
}
 8004838:	bf00      	nop
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800485e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	021a      	lsls	r2, r3, #8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	431a      	orrs	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	609a      	str	r2, [r3, #8]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	2201      	movs	r2, #1
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1a      	ldr	r2, [r3, #32]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	401a      	ands	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e05a      	b.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a21      	ldr	r2, [pc, #132]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d01d      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a18      	ldr	r2, [pc, #96]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10c      	bne.n	800498c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40001800 	.word	0x40001800

080049c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e03d      	b.n	8004a60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <__errno>:
 8004a94:	4b01      	ldr	r3, [pc, #4]	; (8004a9c <__errno+0x8>)
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000018 	.word	0x20000018

08004aa0 <__libc_init_array>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	4e0d      	ldr	r6, [pc, #52]	; (8004ad8 <__libc_init_array+0x38>)
 8004aa4:	4c0d      	ldr	r4, [pc, #52]	; (8004adc <__libc_init_array+0x3c>)
 8004aa6:	1ba4      	subs	r4, r4, r6
 8004aa8:	10a4      	asrs	r4, r4, #2
 8004aaa:	2500      	movs	r5, #0
 8004aac:	42a5      	cmp	r5, r4
 8004aae:	d109      	bne.n	8004ac4 <__libc_init_array+0x24>
 8004ab0:	4e0b      	ldr	r6, [pc, #44]	; (8004ae0 <__libc_init_array+0x40>)
 8004ab2:	4c0c      	ldr	r4, [pc, #48]	; (8004ae4 <__libc_init_array+0x44>)
 8004ab4:	f001 f942 	bl	8005d3c <_init>
 8004ab8:	1ba4      	subs	r4, r4, r6
 8004aba:	10a4      	asrs	r4, r4, #2
 8004abc:	2500      	movs	r5, #0
 8004abe:	42a5      	cmp	r5, r4
 8004ac0:	d105      	bne.n	8004ace <__libc_init_array+0x2e>
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ac8:	4798      	blx	r3
 8004aca:	3501      	adds	r5, #1
 8004acc:	e7ee      	b.n	8004aac <__libc_init_array+0xc>
 8004ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ad2:	4798      	blx	r3
 8004ad4:	3501      	adds	r5, #1
 8004ad6:	e7f2      	b.n	8004abe <__libc_init_array+0x1e>
 8004ad8:	08005f58 	.word	0x08005f58
 8004adc:	08005f58 	.word	0x08005f58
 8004ae0:	08005f58 	.word	0x08005f58
 8004ae4:	08005f5c 	.word	0x08005f5c

08004ae8 <memset>:
 8004ae8:	4402      	add	r2, r0
 8004aea:	4603      	mov	r3, r0
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d100      	bne.n	8004af2 <memset+0xa>
 8004af0:	4770      	bx	lr
 8004af2:	f803 1b01 	strb.w	r1, [r3], #1
 8004af6:	e7f9      	b.n	8004aec <memset+0x4>

08004af8 <sin>:
 8004af8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004afa:	ec51 0b10 	vmov	r0, r1, d0
 8004afe:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <sin+0x88>)
 8004b00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b04:	4293      	cmp	r3, r2
 8004b06:	dc07      	bgt.n	8004b18 <sin+0x20>
 8004b08:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004b78 <sin+0x80>
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	f000 ff43 	bl	8005998 <__kernel_sin>
 8004b12:	ec51 0b10 	vmov	r0, r1, d0
 8004b16:	e007      	b.n	8004b28 <sin+0x30>
 8004b18:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <sin+0x8c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	dd09      	ble.n	8004b32 <sin+0x3a>
 8004b1e:	ee10 2a10 	vmov	r2, s0
 8004b22:	460b      	mov	r3, r1
 8004b24:	f7fb fb54 	bl	80001d0 <__aeabi_dsub>
 8004b28:	ec41 0b10 	vmov	d0, r0, r1
 8004b2c:	b005      	add	sp, #20
 8004b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b32:	4668      	mov	r0, sp
 8004b34:	f000 f884 	bl	8004c40 <__ieee754_rem_pio2>
 8004b38:	f000 0003 	and.w	r0, r0, #3
 8004b3c:	2801      	cmp	r0, #1
 8004b3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004b42:	ed9d 0b00 	vldr	d0, [sp]
 8004b46:	d004      	beq.n	8004b52 <sin+0x5a>
 8004b48:	2802      	cmp	r0, #2
 8004b4a:	d005      	beq.n	8004b58 <sin+0x60>
 8004b4c:	b970      	cbnz	r0, 8004b6c <sin+0x74>
 8004b4e:	2001      	movs	r0, #1
 8004b50:	e7dd      	b.n	8004b0e <sin+0x16>
 8004b52:	f000 fb19 	bl	8005188 <__kernel_cos>
 8004b56:	e7dc      	b.n	8004b12 <sin+0x1a>
 8004b58:	2001      	movs	r0, #1
 8004b5a:	f000 ff1d 	bl	8005998 <__kernel_sin>
 8004b5e:	ec53 2b10 	vmov	r2, r3, d0
 8004b62:	ee10 0a10 	vmov	r0, s0
 8004b66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004b6a:	e7dd      	b.n	8004b28 <sin+0x30>
 8004b6c:	f000 fb0c 	bl	8005188 <__kernel_cos>
 8004b70:	e7f5      	b.n	8004b5e <sin+0x66>
 8004b72:	bf00      	nop
 8004b74:	f3af 8000 	nop.w
	...
 8004b80:	3fe921fb 	.word	0x3fe921fb
 8004b84:	7fefffff 	.word	0x7fefffff

08004b88 <sqrt>:
 8004b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b8c:	ed2d 8b02 	vpush	{d8}
 8004b90:	b08b      	sub	sp, #44	; 0x2c
 8004b92:	ec55 4b10 	vmov	r4, r5, d0
 8004b96:	f000 fa45 	bl	8005024 <__ieee754_sqrt>
 8004b9a:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <sqrt+0xac>)
 8004b9c:	eeb0 8a40 	vmov.f32	s16, s0
 8004ba0:	eef0 8a60 	vmov.f32	s17, s1
 8004ba4:	f993 6000 	ldrsb.w	r6, [r3]
 8004ba8:	1c73      	adds	r3, r6, #1
 8004baa:	d02a      	beq.n	8004c02 <sqrt+0x7a>
 8004bac:	4622      	mov	r2, r4
 8004bae:	462b      	mov	r3, r5
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	f7fb ff5e 	bl	8000a74 <__aeabi_dcmpun>
 8004bb8:	4607      	mov	r7, r0
 8004bba:	bb10      	cbnz	r0, 8004c02 <sqrt+0x7a>
 8004bbc:	f04f 0800 	mov.w	r8, #0
 8004bc0:	f04f 0900 	mov.w	r9, #0
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	4620      	mov	r0, r4
 8004bca:	4629      	mov	r1, r5
 8004bcc:	f7fb ff2a 	bl	8000a24 <__aeabi_dcmplt>
 8004bd0:	b1b8      	cbz	r0, 8004c02 <sqrt+0x7a>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <sqrt+0xb0>)
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	9708      	str	r7, [sp, #32]
 8004bdc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004be0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004be4:	b9b6      	cbnz	r6, 8004c14 <sqrt+0x8c>
 8004be6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004bea:	4668      	mov	r0, sp
 8004bec:	f001 f81c 	bl	8005c28 <matherr>
 8004bf0:	b1d0      	cbz	r0, 8004c28 <sqrt+0xa0>
 8004bf2:	9b08      	ldr	r3, [sp, #32]
 8004bf4:	b11b      	cbz	r3, 8004bfe <sqrt+0x76>
 8004bf6:	f7ff ff4d 	bl	8004a94 <__errno>
 8004bfa:	9b08      	ldr	r3, [sp, #32]
 8004bfc:	6003      	str	r3, [r0, #0]
 8004bfe:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004c02:	eeb0 0a48 	vmov.f32	s0, s16
 8004c06:	eef0 0a68 	vmov.f32	s1, s17
 8004c0a:	b00b      	add	sp, #44	; 0x2c
 8004c0c:	ecbd 8b02 	vpop	{d8}
 8004c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c14:	4642      	mov	r2, r8
 8004c16:	464b      	mov	r3, r9
 8004c18:	4640      	mov	r0, r8
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	f7fb fdba 	bl	8000794 <__aeabi_ddiv>
 8004c20:	2e02      	cmp	r6, #2
 8004c22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c26:	d1e0      	bne.n	8004bea <sqrt+0x62>
 8004c28:	f7ff ff34 	bl	8004a94 <__errno>
 8004c2c:	2321      	movs	r3, #33	; 0x21
 8004c2e:	6003      	str	r3, [r0, #0]
 8004c30:	e7df      	b.n	8004bf2 <sqrt+0x6a>
 8004c32:	bf00      	nop
 8004c34:	2000007c 	.word	0x2000007c
 8004c38:	08005d70 	.word	0x08005d70
 8004c3c:	00000000 	.word	0x00000000

08004c40 <__ieee754_rem_pio2>:
 8004c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c44:	ec57 6b10 	vmov	r6, r7, d0
 8004c48:	4bc3      	ldr	r3, [pc, #780]	; (8004f58 <__ieee754_rem_pio2+0x318>)
 8004c4a:	b08d      	sub	sp, #52	; 0x34
 8004c4c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004c50:	4598      	cmp	r8, r3
 8004c52:	4604      	mov	r4, r0
 8004c54:	9704      	str	r7, [sp, #16]
 8004c56:	dc07      	bgt.n	8004c68 <__ieee754_rem_pio2+0x28>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	ed84 0b00 	vstr	d0, [r4]
 8004c60:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004c64:	2500      	movs	r5, #0
 8004c66:	e027      	b.n	8004cb8 <__ieee754_rem_pio2+0x78>
 8004c68:	4bbc      	ldr	r3, [pc, #752]	; (8004f5c <__ieee754_rem_pio2+0x31c>)
 8004c6a:	4598      	cmp	r8, r3
 8004c6c:	dc75      	bgt.n	8004d5a <__ieee754_rem_pio2+0x11a>
 8004c6e:	9b04      	ldr	r3, [sp, #16]
 8004c70:	4dbb      	ldr	r5, [pc, #748]	; (8004f60 <__ieee754_rem_pio2+0x320>)
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	ee10 0a10 	vmov	r0, s0
 8004c78:	a3a9      	add	r3, pc, #676	; (adr r3, 8004f20 <__ieee754_rem_pio2+0x2e0>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	4639      	mov	r1, r7
 8004c80:	dd36      	ble.n	8004cf0 <__ieee754_rem_pio2+0xb0>
 8004c82:	f7fb faa5 	bl	80001d0 <__aeabi_dsub>
 8004c86:	45a8      	cmp	r8, r5
 8004c88:	4606      	mov	r6, r0
 8004c8a:	460f      	mov	r7, r1
 8004c8c:	d018      	beq.n	8004cc0 <__ieee754_rem_pio2+0x80>
 8004c8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004f28 <__ieee754_rem_pio2+0x2e8>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb fa9c 	bl	80001d0 <__aeabi_dsub>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	f7fb fa94 	bl	80001d0 <__aeabi_dsub>
 8004ca8:	a39f      	add	r3, pc, #636	; (adr r3, 8004f28 <__ieee754_rem_pio2+0x2e8>)
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f7fb fa8f 	bl	80001d0 <__aeabi_dsub>
 8004cb2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004cb6:	2501      	movs	r5, #1
 8004cb8:	4628      	mov	r0, r5
 8004cba:	b00d      	add	sp, #52	; 0x34
 8004cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cc0:	a39b      	add	r3, pc, #620	; (adr r3, 8004f30 <__ieee754_rem_pio2+0x2f0>)
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f7fb fa83 	bl	80001d0 <__aeabi_dsub>
 8004cca:	a39b      	add	r3, pc, #620	; (adr r3, 8004f38 <__ieee754_rem_pio2+0x2f8>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	460f      	mov	r7, r1
 8004cd4:	f7fb fa7c 	bl	80001d0 <__aeabi_dsub>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	e9c4 2300 	strd	r2, r3, [r4]
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	4639      	mov	r1, r7
 8004ce4:	f7fb fa74 	bl	80001d0 <__aeabi_dsub>
 8004ce8:	a393      	add	r3, pc, #588	; (adr r3, 8004f38 <__ieee754_rem_pio2+0x2f8>)
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	e7de      	b.n	8004cae <__ieee754_rem_pio2+0x6e>
 8004cf0:	f7fb fa70 	bl	80001d4 <__adddf3>
 8004cf4:	45a8      	cmp	r8, r5
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	460f      	mov	r7, r1
 8004cfa:	d016      	beq.n	8004d2a <__ieee754_rem_pio2+0xea>
 8004cfc:	a38a      	add	r3, pc, #552	; (adr r3, 8004f28 <__ieee754_rem_pio2+0x2e8>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	f7fb fa67 	bl	80001d4 <__adddf3>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	e9c4 2300 	strd	r2, r3, [r4]
 8004d0e:	4630      	mov	r0, r6
 8004d10:	4639      	mov	r1, r7
 8004d12:	f7fb fa5d 	bl	80001d0 <__aeabi_dsub>
 8004d16:	a384      	add	r3, pc, #528	; (adr r3, 8004f28 <__ieee754_rem_pio2+0x2e8>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f7fb fa5a 	bl	80001d4 <__adddf3>
 8004d20:	f04f 35ff 	mov.w	r5, #4294967295
 8004d24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d28:	e7c6      	b.n	8004cb8 <__ieee754_rem_pio2+0x78>
 8004d2a:	a381      	add	r3, pc, #516	; (adr r3, 8004f30 <__ieee754_rem_pio2+0x2f0>)
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f7fb fa50 	bl	80001d4 <__adddf3>
 8004d34:	a380      	add	r3, pc, #512	; (adr r3, 8004f38 <__ieee754_rem_pio2+0x2f8>)
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	460f      	mov	r7, r1
 8004d3e:	f7fb fa49 	bl	80001d4 <__adddf3>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	e9c4 2300 	strd	r2, r3, [r4]
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	f7fb fa3f 	bl	80001d0 <__aeabi_dsub>
 8004d52:	a379      	add	r3, pc, #484	; (adr r3, 8004f38 <__ieee754_rem_pio2+0x2f8>)
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	e7e0      	b.n	8004d1c <__ieee754_rem_pio2+0xdc>
 8004d5a:	4b82      	ldr	r3, [pc, #520]	; (8004f64 <__ieee754_rem_pio2+0x324>)
 8004d5c:	4598      	cmp	r8, r3
 8004d5e:	f300 80d0 	bgt.w	8004f02 <__ieee754_rem_pio2+0x2c2>
 8004d62:	f000 fed3 	bl	8005b0c <fabs>
 8004d66:	ec57 6b10 	vmov	r6, r7, d0
 8004d6a:	ee10 0a10 	vmov	r0, s0
 8004d6e:	a374      	add	r3, pc, #464	; (adr r3, 8004f40 <__ieee754_rem_pio2+0x300>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	4639      	mov	r1, r7
 8004d76:	f7fb fbe3 	bl	8000540 <__aeabi_dmul>
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	4b7a      	ldr	r3, [pc, #488]	; (8004f68 <__ieee754_rem_pio2+0x328>)
 8004d7e:	f7fb fa29 	bl	80001d4 <__adddf3>
 8004d82:	f7fb fe8d 	bl	8000aa0 <__aeabi_d2iz>
 8004d86:	4605      	mov	r5, r0
 8004d88:	f7fb fb70 	bl	800046c <__aeabi_i2d>
 8004d8c:	a364      	add	r3, pc, #400	; (adr r3, 8004f20 <__ieee754_rem_pio2+0x2e0>)
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d96:	f7fb fbd3 	bl	8000540 <__aeabi_dmul>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4630      	mov	r0, r6
 8004da0:	4639      	mov	r1, r7
 8004da2:	f7fb fa15 	bl	80001d0 <__aeabi_dsub>
 8004da6:	a360      	add	r3, pc, #384	; (adr r3, 8004f28 <__ieee754_rem_pio2+0x2e8>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	4682      	mov	sl, r0
 8004dae:	468b      	mov	fp, r1
 8004db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004db4:	f7fb fbc4 	bl	8000540 <__aeabi_dmul>
 8004db8:	2d1f      	cmp	r5, #31
 8004dba:	4606      	mov	r6, r0
 8004dbc:	460f      	mov	r7, r1
 8004dbe:	dc0c      	bgt.n	8004dda <__ieee754_rem_pio2+0x19a>
 8004dc0:	1e6a      	subs	r2, r5, #1
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <__ieee754_rem_pio2+0x32c>)
 8004dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc8:	4543      	cmp	r3, r8
 8004dca:	d006      	beq.n	8004dda <__ieee754_rem_pio2+0x19a>
 8004dcc:	4632      	mov	r2, r6
 8004dce:	463b      	mov	r3, r7
 8004dd0:	4650      	mov	r0, sl
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	f7fb f9fc 	bl	80001d0 <__aeabi_dsub>
 8004dd8:	e00e      	b.n	8004df8 <__ieee754_rem_pio2+0x1b8>
 8004dda:	4632      	mov	r2, r6
 8004ddc:	463b      	mov	r3, r7
 8004dde:	4650      	mov	r0, sl
 8004de0:	4659      	mov	r1, fp
 8004de2:	f7fb f9f5 	bl	80001d0 <__aeabi_dsub>
 8004de6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004dea:	9305      	str	r3, [sp, #20]
 8004dec:	9a05      	ldr	r2, [sp, #20]
 8004dee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	dc02      	bgt.n	8004dfe <__ieee754_rem_pio2+0x1be>
 8004df8:	e9c4 0100 	strd	r0, r1, [r4]
 8004dfc:	e039      	b.n	8004e72 <__ieee754_rem_pio2+0x232>
 8004dfe:	a34c      	add	r3, pc, #304	; (adr r3, 8004f30 <__ieee754_rem_pio2+0x2f0>)
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e08:	f7fb fb9a 	bl	8000540 <__aeabi_dmul>
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	460f      	mov	r7, r1
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4650      	mov	r0, sl
 8004e16:	4659      	mov	r1, fp
 8004e18:	f7fb f9da 	bl	80001d0 <__aeabi_dsub>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4680      	mov	r8, r0
 8004e22:	4689      	mov	r9, r1
 8004e24:	4650      	mov	r0, sl
 8004e26:	4659      	mov	r1, fp
 8004e28:	f7fb f9d2 	bl	80001d0 <__aeabi_dsub>
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	463b      	mov	r3, r7
 8004e30:	f7fb f9ce 	bl	80001d0 <__aeabi_dsub>
 8004e34:	a340      	add	r3, pc, #256	; (adr r3, 8004f38 <__ieee754_rem_pio2+0x2f8>)
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	460f      	mov	r7, r1
 8004e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e42:	f7fb fb7d 	bl	8000540 <__aeabi_dmul>
 8004e46:	4632      	mov	r2, r6
 8004e48:	463b      	mov	r3, r7
 8004e4a:	f7fb f9c1 	bl	80001d0 <__aeabi_dsub>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4606      	mov	r6, r0
 8004e54:	460f      	mov	r7, r1
 8004e56:	4640      	mov	r0, r8
 8004e58:	4649      	mov	r1, r9
 8004e5a:	f7fb f9b9 	bl	80001d0 <__aeabi_dsub>
 8004e5e:	9a05      	ldr	r2, [sp, #20]
 8004e60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b31      	cmp	r3, #49	; 0x31
 8004e68:	dc20      	bgt.n	8004eac <__ieee754_rem_pio2+0x26c>
 8004e6a:	e9c4 0100 	strd	r0, r1, [r4]
 8004e6e:	46c2      	mov	sl, r8
 8004e70:	46cb      	mov	fp, r9
 8004e72:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004e76:	4650      	mov	r0, sl
 8004e78:	4642      	mov	r2, r8
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	f7fb f9a7 	bl	80001d0 <__aeabi_dsub>
 8004e82:	463b      	mov	r3, r7
 8004e84:	4632      	mov	r2, r6
 8004e86:	f7fb f9a3 	bl	80001d0 <__aeabi_dsub>
 8004e8a:	9b04      	ldr	r3, [sp, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e92:	f6bf af11 	bge.w	8004cb8 <__ieee754_rem_pio2+0x78>
 8004e96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004e9a:	6063      	str	r3, [r4, #4]
 8004e9c:	f8c4 8000 	str.w	r8, [r4]
 8004ea0:	60a0      	str	r0, [r4, #8]
 8004ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ea6:	60e3      	str	r3, [r4, #12]
 8004ea8:	426d      	negs	r5, r5
 8004eaa:	e705      	b.n	8004cb8 <__ieee754_rem_pio2+0x78>
 8004eac:	a326      	add	r3, pc, #152	; (adr r3, 8004f48 <__ieee754_rem_pio2+0x308>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eb6:	f7fb fb43 	bl	8000540 <__aeabi_dmul>
 8004eba:	4606      	mov	r6, r0
 8004ebc:	460f      	mov	r7, r1
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	f7fb f983 	bl	80001d0 <__aeabi_dsub>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4682      	mov	sl, r0
 8004ed0:	468b      	mov	fp, r1
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	f7fb f97b 	bl	80001d0 <__aeabi_dsub>
 8004eda:	4632      	mov	r2, r6
 8004edc:	463b      	mov	r3, r7
 8004ede:	f7fb f977 	bl	80001d0 <__aeabi_dsub>
 8004ee2:	a31b      	add	r3, pc, #108	; (adr r3, 8004f50 <__ieee754_rem_pio2+0x310>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	4606      	mov	r6, r0
 8004eea:	460f      	mov	r7, r1
 8004eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef0:	f7fb fb26 	bl	8000540 <__aeabi_dmul>
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	f7fb f96a 	bl	80001d0 <__aeabi_dsub>
 8004efc:	4606      	mov	r6, r0
 8004efe:	460f      	mov	r7, r1
 8004f00:	e764      	b.n	8004dcc <__ieee754_rem_pio2+0x18c>
 8004f02:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <__ieee754_rem_pio2+0x330>)
 8004f04:	4598      	cmp	r8, r3
 8004f06:	dd35      	ble.n	8004f74 <__ieee754_rem_pio2+0x334>
 8004f08:	ee10 2a10 	vmov	r2, s0
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	4630      	mov	r0, r6
 8004f10:	4639      	mov	r1, r7
 8004f12:	f7fb f95d 	bl	80001d0 <__aeabi_dsub>
 8004f16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f1a:	e9c4 0100 	strd	r0, r1, [r4]
 8004f1e:	e6a1      	b.n	8004c64 <__ieee754_rem_pio2+0x24>
 8004f20:	54400000 	.word	0x54400000
 8004f24:	3ff921fb 	.word	0x3ff921fb
 8004f28:	1a626331 	.word	0x1a626331
 8004f2c:	3dd0b461 	.word	0x3dd0b461
 8004f30:	1a600000 	.word	0x1a600000
 8004f34:	3dd0b461 	.word	0x3dd0b461
 8004f38:	2e037073 	.word	0x2e037073
 8004f3c:	3ba3198a 	.word	0x3ba3198a
 8004f40:	6dc9c883 	.word	0x6dc9c883
 8004f44:	3fe45f30 	.word	0x3fe45f30
 8004f48:	2e000000 	.word	0x2e000000
 8004f4c:	3ba3198a 	.word	0x3ba3198a
 8004f50:	252049c1 	.word	0x252049c1
 8004f54:	397b839a 	.word	0x397b839a
 8004f58:	3fe921fb 	.word	0x3fe921fb
 8004f5c:	4002d97b 	.word	0x4002d97b
 8004f60:	3ff921fb 	.word	0x3ff921fb
 8004f64:	413921fb 	.word	0x413921fb
 8004f68:	3fe00000 	.word	0x3fe00000
 8004f6c:	08005d78 	.word	0x08005d78
 8004f70:	7fefffff 	.word	0x7fefffff
 8004f74:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004f78:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004f7c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004f80:	4630      	mov	r0, r6
 8004f82:	460f      	mov	r7, r1
 8004f84:	f7fb fd8c 	bl	8000aa0 <__aeabi_d2iz>
 8004f88:	f7fb fa70 	bl	800046c <__aeabi_i2d>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4630      	mov	r0, r6
 8004f92:	4639      	mov	r1, r7
 8004f94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f98:	f7fb f91a 	bl	80001d0 <__aeabi_dsub>
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4b1f      	ldr	r3, [pc, #124]	; (800501c <__ieee754_rem_pio2+0x3dc>)
 8004fa0:	f7fb face 	bl	8000540 <__aeabi_dmul>
 8004fa4:	460f      	mov	r7, r1
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	f7fb fd7a 	bl	8000aa0 <__aeabi_d2iz>
 8004fac:	f7fb fa5e 	bl	800046c <__aeabi_i2d>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004fbc:	f7fb f908 	bl	80001d0 <__aeabi_dsub>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4b16      	ldr	r3, [pc, #88]	; (800501c <__ieee754_rem_pio2+0x3dc>)
 8004fc4:	f7fb fabc 	bl	8000540 <__aeabi_dmul>
 8004fc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004fcc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004fd0:	f04f 0803 	mov.w	r8, #3
 8004fd4:	2600      	movs	r6, #0
 8004fd6:	2700      	movs	r7, #0
 8004fd8:	4632      	mov	r2, r6
 8004fda:	463b      	mov	r3, r7
 8004fdc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004fe0:	f108 3aff 	add.w	sl, r8, #4294967295
 8004fe4:	f7fb fd14 	bl	8000a10 <__aeabi_dcmpeq>
 8004fe8:	b9b0      	cbnz	r0, 8005018 <__ieee754_rem_pio2+0x3d8>
 8004fea:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <__ieee754_rem_pio2+0x3e0>)
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	2302      	movs	r3, #2
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	462a      	mov	r2, r5
 8004ff4:	4643      	mov	r3, r8
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	a806      	add	r0, sp, #24
 8004ffa:	f000 f98d 	bl	8005318 <__kernel_rem_pio2>
 8004ffe:	9b04      	ldr	r3, [sp, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	4605      	mov	r5, r0
 8005004:	f6bf ae58 	bge.w	8004cb8 <__ieee754_rem_pio2+0x78>
 8005008:	6863      	ldr	r3, [r4, #4]
 800500a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800500e:	6063      	str	r3, [r4, #4]
 8005010:	68e3      	ldr	r3, [r4, #12]
 8005012:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005016:	e746      	b.n	8004ea6 <__ieee754_rem_pio2+0x266>
 8005018:	46d0      	mov	r8, sl
 800501a:	e7dd      	b.n	8004fd8 <__ieee754_rem_pio2+0x398>
 800501c:	41700000 	.word	0x41700000
 8005020:	08005df8 	.word	0x08005df8

08005024 <__ieee754_sqrt>:
 8005024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005028:	4955      	ldr	r1, [pc, #340]	; (8005180 <__ieee754_sqrt+0x15c>)
 800502a:	ec55 4b10 	vmov	r4, r5, d0
 800502e:	43a9      	bics	r1, r5
 8005030:	462b      	mov	r3, r5
 8005032:	462a      	mov	r2, r5
 8005034:	d112      	bne.n	800505c <__ieee754_sqrt+0x38>
 8005036:	ee10 2a10 	vmov	r2, s0
 800503a:	ee10 0a10 	vmov	r0, s0
 800503e:	4629      	mov	r1, r5
 8005040:	f7fb fa7e 	bl	8000540 <__aeabi_dmul>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4620      	mov	r0, r4
 800504a:	4629      	mov	r1, r5
 800504c:	f7fb f8c2 	bl	80001d4 <__adddf3>
 8005050:	4604      	mov	r4, r0
 8005052:	460d      	mov	r5, r1
 8005054:	ec45 4b10 	vmov	d0, r4, r5
 8005058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800505c:	2d00      	cmp	r5, #0
 800505e:	ee10 0a10 	vmov	r0, s0
 8005062:	4621      	mov	r1, r4
 8005064:	dc0f      	bgt.n	8005086 <__ieee754_sqrt+0x62>
 8005066:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800506a:	4330      	orrs	r0, r6
 800506c:	d0f2      	beq.n	8005054 <__ieee754_sqrt+0x30>
 800506e:	b155      	cbz	r5, 8005086 <__ieee754_sqrt+0x62>
 8005070:	ee10 2a10 	vmov	r2, s0
 8005074:	4620      	mov	r0, r4
 8005076:	4629      	mov	r1, r5
 8005078:	f7fb f8aa 	bl	80001d0 <__aeabi_dsub>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	f7fb fb88 	bl	8000794 <__aeabi_ddiv>
 8005084:	e7e4      	b.n	8005050 <__ieee754_sqrt+0x2c>
 8005086:	151b      	asrs	r3, r3, #20
 8005088:	d073      	beq.n	8005172 <__ieee754_sqrt+0x14e>
 800508a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800508e:	07dd      	lsls	r5, r3, #31
 8005090:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005094:	bf48      	it	mi
 8005096:	0fc8      	lsrmi	r0, r1, #31
 8005098:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800509c:	bf44      	itt	mi
 800509e:	0049      	lslmi	r1, r1, #1
 80050a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80050a4:	2500      	movs	r5, #0
 80050a6:	1058      	asrs	r0, r3, #1
 80050a8:	0fcb      	lsrs	r3, r1, #31
 80050aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80050ae:	0049      	lsls	r1, r1, #1
 80050b0:	2316      	movs	r3, #22
 80050b2:	462c      	mov	r4, r5
 80050b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80050b8:	19a7      	adds	r7, r4, r6
 80050ba:	4297      	cmp	r7, r2
 80050bc:	bfde      	ittt	le
 80050be:	19bc      	addle	r4, r7, r6
 80050c0:	1bd2      	suble	r2, r2, r7
 80050c2:	19ad      	addle	r5, r5, r6
 80050c4:	0fcf      	lsrs	r7, r1, #31
 80050c6:	3b01      	subs	r3, #1
 80050c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80050cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80050d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80050d4:	d1f0      	bne.n	80050b8 <__ieee754_sqrt+0x94>
 80050d6:	f04f 0c20 	mov.w	ip, #32
 80050da:	469e      	mov	lr, r3
 80050dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80050e0:	42a2      	cmp	r2, r4
 80050e2:	eb06 070e 	add.w	r7, r6, lr
 80050e6:	dc02      	bgt.n	80050ee <__ieee754_sqrt+0xca>
 80050e8:	d112      	bne.n	8005110 <__ieee754_sqrt+0xec>
 80050ea:	428f      	cmp	r7, r1
 80050ec:	d810      	bhi.n	8005110 <__ieee754_sqrt+0xec>
 80050ee:	2f00      	cmp	r7, #0
 80050f0:	eb07 0e06 	add.w	lr, r7, r6
 80050f4:	da42      	bge.n	800517c <__ieee754_sqrt+0x158>
 80050f6:	f1be 0f00 	cmp.w	lr, #0
 80050fa:	db3f      	blt.n	800517c <__ieee754_sqrt+0x158>
 80050fc:	f104 0801 	add.w	r8, r4, #1
 8005100:	1b12      	subs	r2, r2, r4
 8005102:	428f      	cmp	r7, r1
 8005104:	bf88      	it	hi
 8005106:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800510a:	1bc9      	subs	r1, r1, r7
 800510c:	4433      	add	r3, r6
 800510e:	4644      	mov	r4, r8
 8005110:	0052      	lsls	r2, r2, #1
 8005112:	f1bc 0c01 	subs.w	ip, ip, #1
 8005116:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800511a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800511e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005122:	d1dd      	bne.n	80050e0 <__ieee754_sqrt+0xbc>
 8005124:	430a      	orrs	r2, r1
 8005126:	d006      	beq.n	8005136 <__ieee754_sqrt+0x112>
 8005128:	1c5c      	adds	r4, r3, #1
 800512a:	bf13      	iteet	ne
 800512c:	3301      	addne	r3, #1
 800512e:	3501      	addeq	r5, #1
 8005130:	4663      	moveq	r3, ip
 8005132:	f023 0301 	bicne.w	r3, r3, #1
 8005136:	106a      	asrs	r2, r5, #1
 8005138:	085b      	lsrs	r3, r3, #1
 800513a:	07e9      	lsls	r1, r5, #31
 800513c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005140:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005144:	bf48      	it	mi
 8005146:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800514a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800514e:	461c      	mov	r4, r3
 8005150:	e780      	b.n	8005054 <__ieee754_sqrt+0x30>
 8005152:	0aca      	lsrs	r2, r1, #11
 8005154:	3815      	subs	r0, #21
 8005156:	0549      	lsls	r1, r1, #21
 8005158:	2a00      	cmp	r2, #0
 800515a:	d0fa      	beq.n	8005152 <__ieee754_sqrt+0x12e>
 800515c:	02d6      	lsls	r6, r2, #11
 800515e:	d50a      	bpl.n	8005176 <__ieee754_sqrt+0x152>
 8005160:	f1c3 0420 	rsb	r4, r3, #32
 8005164:	fa21 f404 	lsr.w	r4, r1, r4
 8005168:	1e5d      	subs	r5, r3, #1
 800516a:	4099      	lsls	r1, r3
 800516c:	4322      	orrs	r2, r4
 800516e:	1b43      	subs	r3, r0, r5
 8005170:	e78b      	b.n	800508a <__ieee754_sqrt+0x66>
 8005172:	4618      	mov	r0, r3
 8005174:	e7f0      	b.n	8005158 <__ieee754_sqrt+0x134>
 8005176:	0052      	lsls	r2, r2, #1
 8005178:	3301      	adds	r3, #1
 800517a:	e7ef      	b.n	800515c <__ieee754_sqrt+0x138>
 800517c:	46a0      	mov	r8, r4
 800517e:	e7bf      	b.n	8005100 <__ieee754_sqrt+0xdc>
 8005180:	7ff00000 	.word	0x7ff00000
 8005184:	00000000 	.word	0x00000000

08005188 <__kernel_cos>:
 8005188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	ec59 8b10 	vmov	r8, r9, d0
 8005190:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8005194:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005198:	ed2d 8b02 	vpush	{d8}
 800519c:	eeb0 8a41 	vmov.f32	s16, s2
 80051a0:	eef0 8a61 	vmov.f32	s17, s3
 80051a4:	da07      	bge.n	80051b6 <__kernel_cos+0x2e>
 80051a6:	ee10 0a10 	vmov	r0, s0
 80051aa:	4649      	mov	r1, r9
 80051ac:	f7fb fc78 	bl	8000aa0 <__aeabi_d2iz>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f000 8089 	beq.w	80052c8 <__kernel_cos+0x140>
 80051b6:	4642      	mov	r2, r8
 80051b8:	464b      	mov	r3, r9
 80051ba:	4640      	mov	r0, r8
 80051bc:	4649      	mov	r1, r9
 80051be:	f7fb f9bf 	bl	8000540 <__aeabi_dmul>
 80051c2:	2200      	movs	r2, #0
 80051c4:	4b4e      	ldr	r3, [pc, #312]	; (8005300 <__kernel_cos+0x178>)
 80051c6:	4604      	mov	r4, r0
 80051c8:	460d      	mov	r5, r1
 80051ca:	f7fb f9b9 	bl	8000540 <__aeabi_dmul>
 80051ce:	a340      	add	r3, pc, #256	; (adr r3, 80052d0 <__kernel_cos+0x148>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	4682      	mov	sl, r0
 80051d6:	468b      	mov	fp, r1
 80051d8:	4620      	mov	r0, r4
 80051da:	4629      	mov	r1, r5
 80051dc:	f7fb f9b0 	bl	8000540 <__aeabi_dmul>
 80051e0:	a33d      	add	r3, pc, #244	; (adr r3, 80052d8 <__kernel_cos+0x150>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f7fa fff5 	bl	80001d4 <__adddf3>
 80051ea:	4622      	mov	r2, r4
 80051ec:	462b      	mov	r3, r5
 80051ee:	f7fb f9a7 	bl	8000540 <__aeabi_dmul>
 80051f2:	a33b      	add	r3, pc, #236	; (adr r3, 80052e0 <__kernel_cos+0x158>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fa ffea 	bl	80001d0 <__aeabi_dsub>
 80051fc:	4622      	mov	r2, r4
 80051fe:	462b      	mov	r3, r5
 8005200:	f7fb f99e 	bl	8000540 <__aeabi_dmul>
 8005204:	a338      	add	r3, pc, #224	; (adr r3, 80052e8 <__kernel_cos+0x160>)
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	f7fa ffe3 	bl	80001d4 <__adddf3>
 800520e:	4622      	mov	r2, r4
 8005210:	462b      	mov	r3, r5
 8005212:	f7fb f995 	bl	8000540 <__aeabi_dmul>
 8005216:	a336      	add	r3, pc, #216	; (adr r3, 80052f0 <__kernel_cos+0x168>)
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f7fa ffd8 	bl	80001d0 <__aeabi_dsub>
 8005220:	4622      	mov	r2, r4
 8005222:	462b      	mov	r3, r5
 8005224:	f7fb f98c 	bl	8000540 <__aeabi_dmul>
 8005228:	a333      	add	r3, pc, #204	; (adr r3, 80052f8 <__kernel_cos+0x170>)
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f7fa ffd1 	bl	80001d4 <__adddf3>
 8005232:	4622      	mov	r2, r4
 8005234:	462b      	mov	r3, r5
 8005236:	f7fb f983 	bl	8000540 <__aeabi_dmul>
 800523a:	4622      	mov	r2, r4
 800523c:	462b      	mov	r3, r5
 800523e:	f7fb f97f 	bl	8000540 <__aeabi_dmul>
 8005242:	ec53 2b18 	vmov	r2, r3, d8
 8005246:	4604      	mov	r4, r0
 8005248:	460d      	mov	r5, r1
 800524a:	4640      	mov	r0, r8
 800524c:	4649      	mov	r1, r9
 800524e:	f7fb f977 	bl	8000540 <__aeabi_dmul>
 8005252:	460b      	mov	r3, r1
 8005254:	4602      	mov	r2, r0
 8005256:	4629      	mov	r1, r5
 8005258:	4620      	mov	r0, r4
 800525a:	f7fa ffb9 	bl	80001d0 <__aeabi_dsub>
 800525e:	4b29      	ldr	r3, [pc, #164]	; (8005304 <__kernel_cos+0x17c>)
 8005260:	429e      	cmp	r6, r3
 8005262:	4680      	mov	r8, r0
 8005264:	4689      	mov	r9, r1
 8005266:	dc11      	bgt.n	800528c <__kernel_cos+0x104>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4650      	mov	r0, sl
 800526e:	4659      	mov	r1, fp
 8005270:	f7fa ffae 	bl	80001d0 <__aeabi_dsub>
 8005274:	460b      	mov	r3, r1
 8005276:	4924      	ldr	r1, [pc, #144]	; (8005308 <__kernel_cos+0x180>)
 8005278:	4602      	mov	r2, r0
 800527a:	2000      	movs	r0, #0
 800527c:	f7fa ffa8 	bl	80001d0 <__aeabi_dsub>
 8005280:	ecbd 8b02 	vpop	{d8}
 8005284:	ec41 0b10 	vmov	d0, r0, r1
 8005288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528c:	4b1f      	ldr	r3, [pc, #124]	; (800530c <__kernel_cos+0x184>)
 800528e:	491e      	ldr	r1, [pc, #120]	; (8005308 <__kernel_cos+0x180>)
 8005290:	429e      	cmp	r6, r3
 8005292:	bfcc      	ite	gt
 8005294:	4d1e      	ldrgt	r5, [pc, #120]	; (8005310 <__kernel_cos+0x188>)
 8005296:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800529a:	2400      	movs	r4, #0
 800529c:	4622      	mov	r2, r4
 800529e:	462b      	mov	r3, r5
 80052a0:	2000      	movs	r0, #0
 80052a2:	f7fa ff95 	bl	80001d0 <__aeabi_dsub>
 80052a6:	4622      	mov	r2, r4
 80052a8:	4606      	mov	r6, r0
 80052aa:	460f      	mov	r7, r1
 80052ac:	462b      	mov	r3, r5
 80052ae:	4650      	mov	r0, sl
 80052b0:	4659      	mov	r1, fp
 80052b2:	f7fa ff8d 	bl	80001d0 <__aeabi_dsub>
 80052b6:	4642      	mov	r2, r8
 80052b8:	464b      	mov	r3, r9
 80052ba:	f7fa ff89 	bl	80001d0 <__aeabi_dsub>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4630      	mov	r0, r6
 80052c4:	4639      	mov	r1, r7
 80052c6:	e7d9      	b.n	800527c <__kernel_cos+0xf4>
 80052c8:	2000      	movs	r0, #0
 80052ca:	490f      	ldr	r1, [pc, #60]	; (8005308 <__kernel_cos+0x180>)
 80052cc:	e7d8      	b.n	8005280 <__kernel_cos+0xf8>
 80052ce:	bf00      	nop
 80052d0:	be8838d4 	.word	0xbe8838d4
 80052d4:	bda8fae9 	.word	0xbda8fae9
 80052d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80052dc:	3e21ee9e 	.word	0x3e21ee9e
 80052e0:	809c52ad 	.word	0x809c52ad
 80052e4:	3e927e4f 	.word	0x3e927e4f
 80052e8:	19cb1590 	.word	0x19cb1590
 80052ec:	3efa01a0 	.word	0x3efa01a0
 80052f0:	16c15177 	.word	0x16c15177
 80052f4:	3f56c16c 	.word	0x3f56c16c
 80052f8:	5555554c 	.word	0x5555554c
 80052fc:	3fa55555 	.word	0x3fa55555
 8005300:	3fe00000 	.word	0x3fe00000
 8005304:	3fd33332 	.word	0x3fd33332
 8005308:	3ff00000 	.word	0x3ff00000
 800530c:	3fe90000 	.word	0x3fe90000
 8005310:	3fd20000 	.word	0x3fd20000
 8005314:	00000000 	.word	0x00000000

08005318 <__kernel_rem_pio2>:
 8005318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531c:	ed2d 8b02 	vpush	{d8}
 8005320:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005324:	1ed4      	subs	r4, r2, #3
 8005326:	9308      	str	r3, [sp, #32]
 8005328:	9101      	str	r1, [sp, #4]
 800532a:	4bc5      	ldr	r3, [pc, #788]	; (8005640 <__kernel_rem_pio2+0x328>)
 800532c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800532e:	9009      	str	r0, [sp, #36]	; 0x24
 8005330:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	9b08      	ldr	r3, [sp, #32]
 8005338:	3b01      	subs	r3, #1
 800533a:	9307      	str	r3, [sp, #28]
 800533c:	2318      	movs	r3, #24
 800533e:	fb94 f4f3 	sdiv	r4, r4, r3
 8005342:	f06f 0317 	mvn.w	r3, #23
 8005346:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800534a:	fb04 3303 	mla	r3, r4, r3, r3
 800534e:	eb03 0a02 	add.w	sl, r3, r2
 8005352:	9b04      	ldr	r3, [sp, #16]
 8005354:	9a07      	ldr	r2, [sp, #28]
 8005356:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005630 <__kernel_rem_pio2+0x318>
 800535a:	eb03 0802 	add.w	r8, r3, r2
 800535e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005360:	1aa7      	subs	r7, r4, r2
 8005362:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005366:	ae22      	add	r6, sp, #136	; 0x88
 8005368:	2500      	movs	r5, #0
 800536a:	4545      	cmp	r5, r8
 800536c:	dd13      	ble.n	8005396 <__kernel_rem_pio2+0x7e>
 800536e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005630 <__kernel_rem_pio2+0x318>
 8005372:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005376:	2600      	movs	r6, #0
 8005378:	9b04      	ldr	r3, [sp, #16]
 800537a:	429e      	cmp	r6, r3
 800537c:	dc32      	bgt.n	80053e4 <__kernel_rem_pio2+0xcc>
 800537e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005380:	9302      	str	r3, [sp, #8]
 8005382:	9b08      	ldr	r3, [sp, #32]
 8005384:	199d      	adds	r5, r3, r6
 8005386:	ab22      	add	r3, sp, #136	; 0x88
 8005388:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800538c:	9306      	str	r3, [sp, #24]
 800538e:	ec59 8b18 	vmov	r8, r9, d8
 8005392:	2700      	movs	r7, #0
 8005394:	e01f      	b.n	80053d6 <__kernel_rem_pio2+0xbe>
 8005396:	42ef      	cmn	r7, r5
 8005398:	d407      	bmi.n	80053aa <__kernel_rem_pio2+0x92>
 800539a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800539e:	f7fb f865 	bl	800046c <__aeabi_i2d>
 80053a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80053a6:	3501      	adds	r5, #1
 80053a8:	e7df      	b.n	800536a <__kernel_rem_pio2+0x52>
 80053aa:	ec51 0b18 	vmov	r0, r1, d8
 80053ae:	e7f8      	b.n	80053a2 <__kernel_rem_pio2+0x8a>
 80053b0:	9906      	ldr	r1, [sp, #24]
 80053b2:	9d02      	ldr	r5, [sp, #8]
 80053b4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80053b8:	9106      	str	r1, [sp, #24]
 80053ba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80053be:	9502      	str	r5, [sp, #8]
 80053c0:	f7fb f8be 	bl	8000540 <__aeabi_dmul>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4640      	mov	r0, r8
 80053ca:	4649      	mov	r1, r9
 80053cc:	f7fa ff02 	bl	80001d4 <__adddf3>
 80053d0:	3701      	adds	r7, #1
 80053d2:	4680      	mov	r8, r0
 80053d4:	4689      	mov	r9, r1
 80053d6:	9b07      	ldr	r3, [sp, #28]
 80053d8:	429f      	cmp	r7, r3
 80053da:	dde9      	ble.n	80053b0 <__kernel_rem_pio2+0x98>
 80053dc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80053e0:	3601      	adds	r6, #1
 80053e2:	e7c9      	b.n	8005378 <__kernel_rem_pio2+0x60>
 80053e4:	9b04      	ldr	r3, [sp, #16]
 80053e6:	aa0e      	add	r2, sp, #56	; 0x38
 80053e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80053ec:	930c      	str	r3, [sp, #48]	; 0x30
 80053ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80053f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80053f4:	9c04      	ldr	r4, [sp, #16]
 80053f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053f8:	ab9a      	add	r3, sp, #616	; 0x268
 80053fa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80053fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005402:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005406:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800540a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800540e:	ab9a      	add	r3, sp, #616	; 0x268
 8005410:	445b      	add	r3, fp
 8005412:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005416:	2500      	movs	r5, #0
 8005418:	1b63      	subs	r3, r4, r5
 800541a:	2b00      	cmp	r3, #0
 800541c:	dc78      	bgt.n	8005510 <__kernel_rem_pio2+0x1f8>
 800541e:	4650      	mov	r0, sl
 8005420:	ec49 8b10 	vmov	d0, r8, r9
 8005424:	f000 fc04 	bl	8005c30 <scalbn>
 8005428:	ec57 6b10 	vmov	r6, r7, d0
 800542c:	2200      	movs	r2, #0
 800542e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005432:	ee10 0a10 	vmov	r0, s0
 8005436:	4639      	mov	r1, r7
 8005438:	f7fb f882 	bl	8000540 <__aeabi_dmul>
 800543c:	ec41 0b10 	vmov	d0, r0, r1
 8005440:	f000 fb6e 	bl	8005b20 <floor>
 8005444:	2200      	movs	r2, #0
 8005446:	ec51 0b10 	vmov	r0, r1, d0
 800544a:	4b7e      	ldr	r3, [pc, #504]	; (8005644 <__kernel_rem_pio2+0x32c>)
 800544c:	f7fb f878 	bl	8000540 <__aeabi_dmul>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4630      	mov	r0, r6
 8005456:	4639      	mov	r1, r7
 8005458:	f7fa feba 	bl	80001d0 <__aeabi_dsub>
 800545c:	460f      	mov	r7, r1
 800545e:	4606      	mov	r6, r0
 8005460:	f7fb fb1e 	bl	8000aa0 <__aeabi_d2iz>
 8005464:	9006      	str	r0, [sp, #24]
 8005466:	f7fb f801 	bl	800046c <__aeabi_i2d>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4630      	mov	r0, r6
 8005470:	4639      	mov	r1, r7
 8005472:	f7fa fead 	bl	80001d0 <__aeabi_dsub>
 8005476:	f1ba 0f00 	cmp.w	sl, #0
 800547a:	4606      	mov	r6, r0
 800547c:	460f      	mov	r7, r1
 800547e:	dd6c      	ble.n	800555a <__kernel_rem_pio2+0x242>
 8005480:	1e62      	subs	r2, r4, #1
 8005482:	ab0e      	add	r3, sp, #56	; 0x38
 8005484:	f1ca 0118 	rsb	r1, sl, #24
 8005488:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800548c:	9d06      	ldr	r5, [sp, #24]
 800548e:	fa40 f301 	asr.w	r3, r0, r1
 8005492:	441d      	add	r5, r3
 8005494:	408b      	lsls	r3, r1
 8005496:	1ac0      	subs	r0, r0, r3
 8005498:	ab0e      	add	r3, sp, #56	; 0x38
 800549a:	9506      	str	r5, [sp, #24]
 800549c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80054a0:	f1ca 0317 	rsb	r3, sl, #23
 80054a4:	fa40 f303 	asr.w	r3, r0, r3
 80054a8:	9302      	str	r3, [sp, #8]
 80054aa:	9b02      	ldr	r3, [sp, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	dd62      	ble.n	8005576 <__kernel_rem_pio2+0x25e>
 80054b0:	9b06      	ldr	r3, [sp, #24]
 80054b2:	2200      	movs	r2, #0
 80054b4:	3301      	adds	r3, #1
 80054b6:	9306      	str	r3, [sp, #24]
 80054b8:	4615      	mov	r5, r2
 80054ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80054be:	4294      	cmp	r4, r2
 80054c0:	f300 8095 	bgt.w	80055ee <__kernel_rem_pio2+0x2d6>
 80054c4:	f1ba 0f00 	cmp.w	sl, #0
 80054c8:	dd07      	ble.n	80054da <__kernel_rem_pio2+0x1c2>
 80054ca:	f1ba 0f01 	cmp.w	sl, #1
 80054ce:	f000 80a2 	beq.w	8005616 <__kernel_rem_pio2+0x2fe>
 80054d2:	f1ba 0f02 	cmp.w	sl, #2
 80054d6:	f000 80c1 	beq.w	800565c <__kernel_rem_pio2+0x344>
 80054da:	9b02      	ldr	r3, [sp, #8]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d14a      	bne.n	8005576 <__kernel_rem_pio2+0x25e>
 80054e0:	4632      	mov	r2, r6
 80054e2:	463b      	mov	r3, r7
 80054e4:	2000      	movs	r0, #0
 80054e6:	4958      	ldr	r1, [pc, #352]	; (8005648 <__kernel_rem_pio2+0x330>)
 80054e8:	f7fa fe72 	bl	80001d0 <__aeabi_dsub>
 80054ec:	4606      	mov	r6, r0
 80054ee:	460f      	mov	r7, r1
 80054f0:	2d00      	cmp	r5, #0
 80054f2:	d040      	beq.n	8005576 <__kernel_rem_pio2+0x25e>
 80054f4:	4650      	mov	r0, sl
 80054f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005638 <__kernel_rem_pio2+0x320>
 80054fa:	f000 fb99 	bl	8005c30 <scalbn>
 80054fe:	4630      	mov	r0, r6
 8005500:	4639      	mov	r1, r7
 8005502:	ec53 2b10 	vmov	r2, r3, d0
 8005506:	f7fa fe63 	bl	80001d0 <__aeabi_dsub>
 800550a:	4606      	mov	r6, r0
 800550c:	460f      	mov	r7, r1
 800550e:	e032      	b.n	8005576 <__kernel_rem_pio2+0x25e>
 8005510:	2200      	movs	r2, #0
 8005512:	4b4e      	ldr	r3, [pc, #312]	; (800564c <__kernel_rem_pio2+0x334>)
 8005514:	4640      	mov	r0, r8
 8005516:	4649      	mov	r1, r9
 8005518:	f7fb f812 	bl	8000540 <__aeabi_dmul>
 800551c:	f7fb fac0 	bl	8000aa0 <__aeabi_d2iz>
 8005520:	f7fa ffa4 	bl	800046c <__aeabi_i2d>
 8005524:	2200      	movs	r2, #0
 8005526:	4b4a      	ldr	r3, [pc, #296]	; (8005650 <__kernel_rem_pio2+0x338>)
 8005528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800552c:	f7fb f808 	bl	8000540 <__aeabi_dmul>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4640      	mov	r0, r8
 8005536:	4649      	mov	r1, r9
 8005538:	f7fa fe4a 	bl	80001d0 <__aeabi_dsub>
 800553c:	f7fb fab0 	bl	8000aa0 <__aeabi_d2iz>
 8005540:	ab0e      	add	r3, sp, #56	; 0x38
 8005542:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005546:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800554a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800554e:	f7fa fe41 	bl	80001d4 <__adddf3>
 8005552:	3501      	adds	r5, #1
 8005554:	4680      	mov	r8, r0
 8005556:	4689      	mov	r9, r1
 8005558:	e75e      	b.n	8005418 <__kernel_rem_pio2+0x100>
 800555a:	d105      	bne.n	8005568 <__kernel_rem_pio2+0x250>
 800555c:	1e63      	subs	r3, r4, #1
 800555e:	aa0e      	add	r2, sp, #56	; 0x38
 8005560:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005564:	15c3      	asrs	r3, r0, #23
 8005566:	e79f      	b.n	80054a8 <__kernel_rem_pio2+0x190>
 8005568:	2200      	movs	r2, #0
 800556a:	4b3a      	ldr	r3, [pc, #232]	; (8005654 <__kernel_rem_pio2+0x33c>)
 800556c:	f7fb fa6e 	bl	8000a4c <__aeabi_dcmpge>
 8005570:	2800      	cmp	r0, #0
 8005572:	d139      	bne.n	80055e8 <__kernel_rem_pio2+0x2d0>
 8005574:	9002      	str	r0, [sp, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	2300      	movs	r3, #0
 800557a:	4630      	mov	r0, r6
 800557c:	4639      	mov	r1, r7
 800557e:	f7fb fa47 	bl	8000a10 <__aeabi_dcmpeq>
 8005582:	2800      	cmp	r0, #0
 8005584:	f000 80c7 	beq.w	8005716 <__kernel_rem_pio2+0x3fe>
 8005588:	1e65      	subs	r5, r4, #1
 800558a:	462b      	mov	r3, r5
 800558c:	2200      	movs	r2, #0
 800558e:	9904      	ldr	r1, [sp, #16]
 8005590:	428b      	cmp	r3, r1
 8005592:	da6a      	bge.n	800566a <__kernel_rem_pio2+0x352>
 8005594:	2a00      	cmp	r2, #0
 8005596:	f000 8088 	beq.w	80056aa <__kernel_rem_pio2+0x392>
 800559a:	ab0e      	add	r3, sp, #56	; 0x38
 800559c:	f1aa 0a18 	sub.w	sl, sl, #24
 80055a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80b4 	beq.w	8005712 <__kernel_rem_pio2+0x3fa>
 80055aa:	4650      	mov	r0, sl
 80055ac:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005638 <__kernel_rem_pio2+0x320>
 80055b0:	f000 fb3e 	bl	8005c30 <scalbn>
 80055b4:	00ec      	lsls	r4, r5, #3
 80055b6:	ab72      	add	r3, sp, #456	; 0x1c8
 80055b8:	191e      	adds	r6, r3, r4
 80055ba:	ec59 8b10 	vmov	r8, r9, d0
 80055be:	f106 0a08 	add.w	sl, r6, #8
 80055c2:	462f      	mov	r7, r5
 80055c4:	2f00      	cmp	r7, #0
 80055c6:	f280 80df 	bge.w	8005788 <__kernel_rem_pio2+0x470>
 80055ca:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005630 <__kernel_rem_pio2+0x318>
 80055ce:	f04f 0a00 	mov.w	sl, #0
 80055d2:	eba5 030a 	sub.w	r3, r5, sl
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f2c0 810a 	blt.w	80057f0 <__kernel_rem_pio2+0x4d8>
 80055dc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005658 <__kernel_rem_pio2+0x340>
 80055e0:	ec59 8b18 	vmov	r8, r9, d8
 80055e4:	2700      	movs	r7, #0
 80055e6:	e0f5      	b.n	80057d4 <__kernel_rem_pio2+0x4bc>
 80055e8:	2302      	movs	r3, #2
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	e760      	b.n	80054b0 <__kernel_rem_pio2+0x198>
 80055ee:	ab0e      	add	r3, sp, #56	; 0x38
 80055f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f4:	b94d      	cbnz	r5, 800560a <__kernel_rem_pio2+0x2f2>
 80055f6:	b12b      	cbz	r3, 8005604 <__kernel_rem_pio2+0x2ec>
 80055f8:	a80e      	add	r0, sp, #56	; 0x38
 80055fa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80055fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005602:	2301      	movs	r3, #1
 8005604:	3201      	adds	r2, #1
 8005606:	461d      	mov	r5, r3
 8005608:	e759      	b.n	80054be <__kernel_rem_pio2+0x1a6>
 800560a:	a80e      	add	r0, sp, #56	; 0x38
 800560c:	1acb      	subs	r3, r1, r3
 800560e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005612:	462b      	mov	r3, r5
 8005614:	e7f6      	b.n	8005604 <__kernel_rem_pio2+0x2ec>
 8005616:	1e62      	subs	r2, r4, #1
 8005618:	ab0e      	add	r3, sp, #56	; 0x38
 800561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005622:	a90e      	add	r1, sp, #56	; 0x38
 8005624:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005628:	e757      	b.n	80054da <__kernel_rem_pio2+0x1c2>
 800562a:	bf00      	nop
 800562c:	f3af 8000 	nop.w
	...
 800563c:	3ff00000 	.word	0x3ff00000
 8005640:	08005f40 	.word	0x08005f40
 8005644:	40200000 	.word	0x40200000
 8005648:	3ff00000 	.word	0x3ff00000
 800564c:	3e700000 	.word	0x3e700000
 8005650:	41700000 	.word	0x41700000
 8005654:	3fe00000 	.word	0x3fe00000
 8005658:	08005f00 	.word	0x08005f00
 800565c:	1e62      	subs	r2, r4, #1
 800565e:	ab0e      	add	r3, sp, #56	; 0x38
 8005660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005664:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005668:	e7db      	b.n	8005622 <__kernel_rem_pio2+0x30a>
 800566a:	a90e      	add	r1, sp, #56	; 0x38
 800566c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005670:	3b01      	subs	r3, #1
 8005672:	430a      	orrs	r2, r1
 8005674:	e78b      	b.n	800558e <__kernel_rem_pio2+0x276>
 8005676:	3301      	adds	r3, #1
 8005678:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800567c:	2900      	cmp	r1, #0
 800567e:	d0fa      	beq.n	8005676 <__kernel_rem_pio2+0x35e>
 8005680:	9a08      	ldr	r2, [sp, #32]
 8005682:	4422      	add	r2, r4
 8005684:	00d2      	lsls	r2, r2, #3
 8005686:	a922      	add	r1, sp, #136	; 0x88
 8005688:	18e3      	adds	r3, r4, r3
 800568a:	9206      	str	r2, [sp, #24]
 800568c:	440a      	add	r2, r1
 800568e:	9302      	str	r3, [sp, #8]
 8005690:	f10b 0108 	add.w	r1, fp, #8
 8005694:	f102 0308 	add.w	r3, r2, #8
 8005698:	1c66      	adds	r6, r4, #1
 800569a:	910a      	str	r1, [sp, #40]	; 0x28
 800569c:	2500      	movs	r5, #0
 800569e:	930d      	str	r3, [sp, #52]	; 0x34
 80056a0:	9b02      	ldr	r3, [sp, #8]
 80056a2:	42b3      	cmp	r3, r6
 80056a4:	da04      	bge.n	80056b0 <__kernel_rem_pio2+0x398>
 80056a6:	461c      	mov	r4, r3
 80056a8:	e6a6      	b.n	80053f8 <__kernel_rem_pio2+0xe0>
 80056aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056ac:	2301      	movs	r3, #1
 80056ae:	e7e3      	b.n	8005678 <__kernel_rem_pio2+0x360>
 80056b0:	9b06      	ldr	r3, [sp, #24]
 80056b2:	18ef      	adds	r7, r5, r3
 80056b4:	ab22      	add	r3, sp, #136	; 0x88
 80056b6:	441f      	add	r7, r3
 80056b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80056be:	f7fa fed5 	bl	800046c <__aeabi_i2d>
 80056c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c4:	461c      	mov	r4, r3
 80056c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056c8:	e9c7 0100 	strd	r0, r1, [r7]
 80056cc:	eb03 0b05 	add.w	fp, r3, r5
 80056d0:	2700      	movs	r7, #0
 80056d2:	f04f 0800 	mov.w	r8, #0
 80056d6:	f04f 0900 	mov.w	r9, #0
 80056da:	9b07      	ldr	r3, [sp, #28]
 80056dc:	429f      	cmp	r7, r3
 80056de:	dd08      	ble.n	80056f2 <__kernel_rem_pio2+0x3da>
 80056e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e2:	aa72      	add	r2, sp, #456	; 0x1c8
 80056e4:	18eb      	adds	r3, r5, r3
 80056e6:	4413      	add	r3, r2
 80056e8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80056ec:	3601      	adds	r6, #1
 80056ee:	3508      	adds	r5, #8
 80056f0:	e7d6      	b.n	80056a0 <__kernel_rem_pio2+0x388>
 80056f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80056f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80056fa:	f7fa ff21 	bl	8000540 <__aeabi_dmul>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4640      	mov	r0, r8
 8005704:	4649      	mov	r1, r9
 8005706:	f7fa fd65 	bl	80001d4 <__adddf3>
 800570a:	3701      	adds	r7, #1
 800570c:	4680      	mov	r8, r0
 800570e:	4689      	mov	r9, r1
 8005710:	e7e3      	b.n	80056da <__kernel_rem_pio2+0x3c2>
 8005712:	3d01      	subs	r5, #1
 8005714:	e741      	b.n	800559a <__kernel_rem_pio2+0x282>
 8005716:	f1ca 0000 	rsb	r0, sl, #0
 800571a:	ec47 6b10 	vmov	d0, r6, r7
 800571e:	f000 fa87 	bl	8005c30 <scalbn>
 8005722:	ec57 6b10 	vmov	r6, r7, d0
 8005726:	2200      	movs	r2, #0
 8005728:	4b99      	ldr	r3, [pc, #612]	; (8005990 <__kernel_rem_pio2+0x678>)
 800572a:	ee10 0a10 	vmov	r0, s0
 800572e:	4639      	mov	r1, r7
 8005730:	f7fb f98c 	bl	8000a4c <__aeabi_dcmpge>
 8005734:	b1f8      	cbz	r0, 8005776 <__kernel_rem_pio2+0x45e>
 8005736:	2200      	movs	r2, #0
 8005738:	4b96      	ldr	r3, [pc, #600]	; (8005994 <__kernel_rem_pio2+0x67c>)
 800573a:	4630      	mov	r0, r6
 800573c:	4639      	mov	r1, r7
 800573e:	f7fa feff 	bl	8000540 <__aeabi_dmul>
 8005742:	f7fb f9ad 	bl	8000aa0 <__aeabi_d2iz>
 8005746:	4680      	mov	r8, r0
 8005748:	f7fa fe90 	bl	800046c <__aeabi_i2d>
 800574c:	2200      	movs	r2, #0
 800574e:	4b90      	ldr	r3, [pc, #576]	; (8005990 <__kernel_rem_pio2+0x678>)
 8005750:	f7fa fef6 	bl	8000540 <__aeabi_dmul>
 8005754:	460b      	mov	r3, r1
 8005756:	4602      	mov	r2, r0
 8005758:	4639      	mov	r1, r7
 800575a:	4630      	mov	r0, r6
 800575c:	f7fa fd38 	bl	80001d0 <__aeabi_dsub>
 8005760:	f7fb f99e 	bl	8000aa0 <__aeabi_d2iz>
 8005764:	1c65      	adds	r5, r4, #1
 8005766:	ab0e      	add	r3, sp, #56	; 0x38
 8005768:	f10a 0a18 	add.w	sl, sl, #24
 800576c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005770:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005774:	e719      	b.n	80055aa <__kernel_rem_pio2+0x292>
 8005776:	4630      	mov	r0, r6
 8005778:	4639      	mov	r1, r7
 800577a:	f7fb f991 	bl	8000aa0 <__aeabi_d2iz>
 800577e:	ab0e      	add	r3, sp, #56	; 0x38
 8005780:	4625      	mov	r5, r4
 8005782:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005786:	e710      	b.n	80055aa <__kernel_rem_pio2+0x292>
 8005788:	ab0e      	add	r3, sp, #56	; 0x38
 800578a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800578e:	f7fa fe6d 	bl	800046c <__aeabi_i2d>
 8005792:	4642      	mov	r2, r8
 8005794:	464b      	mov	r3, r9
 8005796:	f7fa fed3 	bl	8000540 <__aeabi_dmul>
 800579a:	2200      	movs	r2, #0
 800579c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80057a0:	4b7c      	ldr	r3, [pc, #496]	; (8005994 <__kernel_rem_pio2+0x67c>)
 80057a2:	4640      	mov	r0, r8
 80057a4:	4649      	mov	r1, r9
 80057a6:	f7fa fecb 	bl	8000540 <__aeabi_dmul>
 80057aa:	3f01      	subs	r7, #1
 80057ac:	4680      	mov	r8, r0
 80057ae:	4689      	mov	r9, r1
 80057b0:	e708      	b.n	80055c4 <__kernel_rem_pio2+0x2ac>
 80057b2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80057be:	f7fa febf 	bl	8000540 <__aeabi_dmul>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4640      	mov	r0, r8
 80057c8:	4649      	mov	r1, r9
 80057ca:	f7fa fd03 	bl	80001d4 <__adddf3>
 80057ce:	3701      	adds	r7, #1
 80057d0:	4680      	mov	r8, r0
 80057d2:	4689      	mov	r9, r1
 80057d4:	9b04      	ldr	r3, [sp, #16]
 80057d6:	429f      	cmp	r7, r3
 80057d8:	dc01      	bgt.n	80057de <__kernel_rem_pio2+0x4c6>
 80057da:	45ba      	cmp	sl, r7
 80057dc:	dae9      	bge.n	80057b2 <__kernel_rem_pio2+0x49a>
 80057de:	ab4a      	add	r3, sp, #296	; 0x128
 80057e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057e4:	e9c3 8900 	strd	r8, r9, [r3]
 80057e8:	f10a 0a01 	add.w	sl, sl, #1
 80057ec:	3e08      	subs	r6, #8
 80057ee:	e6f0      	b.n	80055d2 <__kernel_rem_pio2+0x2ba>
 80057f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d85b      	bhi.n	80058ae <__kernel_rem_pio2+0x596>
 80057f6:	e8df f003 	tbb	[pc, r3]
 80057fa:	264a      	.short	0x264a
 80057fc:	0226      	.short	0x0226
 80057fe:	ab9a      	add	r3, sp, #616	; 0x268
 8005800:	441c      	add	r4, r3
 8005802:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005806:	46a2      	mov	sl, r4
 8005808:	46ab      	mov	fp, r5
 800580a:	f1bb 0f00 	cmp.w	fp, #0
 800580e:	dc6c      	bgt.n	80058ea <__kernel_rem_pio2+0x5d2>
 8005810:	46a2      	mov	sl, r4
 8005812:	46ab      	mov	fp, r5
 8005814:	f1bb 0f01 	cmp.w	fp, #1
 8005818:	f300 8086 	bgt.w	8005928 <__kernel_rem_pio2+0x610>
 800581c:	2000      	movs	r0, #0
 800581e:	2100      	movs	r1, #0
 8005820:	2d01      	cmp	r5, #1
 8005822:	f300 80a0 	bgt.w	8005966 <__kernel_rem_pio2+0x64e>
 8005826:	9b02      	ldr	r3, [sp, #8]
 8005828:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800582c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005830:	2b00      	cmp	r3, #0
 8005832:	f040 809e 	bne.w	8005972 <__kernel_rem_pio2+0x65a>
 8005836:	9b01      	ldr	r3, [sp, #4]
 8005838:	e9c3 7800 	strd	r7, r8, [r3]
 800583c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005840:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005844:	e033      	b.n	80058ae <__kernel_rem_pio2+0x596>
 8005846:	3408      	adds	r4, #8
 8005848:	ab4a      	add	r3, sp, #296	; 0x128
 800584a:	441c      	add	r4, r3
 800584c:	462e      	mov	r6, r5
 800584e:	2000      	movs	r0, #0
 8005850:	2100      	movs	r1, #0
 8005852:	2e00      	cmp	r6, #0
 8005854:	da3a      	bge.n	80058cc <__kernel_rem_pio2+0x5b4>
 8005856:	9b02      	ldr	r3, [sp, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d03d      	beq.n	80058d8 <__kernel_rem_pio2+0x5c0>
 800585c:	4602      	mov	r2, r0
 800585e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005862:	9c01      	ldr	r4, [sp, #4]
 8005864:	e9c4 2300 	strd	r2, r3, [r4]
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005870:	f7fa fcae 	bl	80001d0 <__aeabi_dsub>
 8005874:	ae4c      	add	r6, sp, #304	; 0x130
 8005876:	2401      	movs	r4, #1
 8005878:	42a5      	cmp	r5, r4
 800587a:	da30      	bge.n	80058de <__kernel_rem_pio2+0x5c6>
 800587c:	9b02      	ldr	r3, [sp, #8]
 800587e:	b113      	cbz	r3, 8005886 <__kernel_rem_pio2+0x56e>
 8005880:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005884:	4619      	mov	r1, r3
 8005886:	9b01      	ldr	r3, [sp, #4]
 8005888:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800588c:	e00f      	b.n	80058ae <__kernel_rem_pio2+0x596>
 800588e:	ab9a      	add	r3, sp, #616	; 0x268
 8005890:	441c      	add	r4, r3
 8005892:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005896:	2000      	movs	r0, #0
 8005898:	2100      	movs	r1, #0
 800589a:	2d00      	cmp	r5, #0
 800589c:	da10      	bge.n	80058c0 <__kernel_rem_pio2+0x5a8>
 800589e:	9b02      	ldr	r3, [sp, #8]
 80058a0:	b113      	cbz	r3, 80058a8 <__kernel_rem_pio2+0x590>
 80058a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058a6:	4619      	mov	r1, r3
 80058a8:	9b01      	ldr	r3, [sp, #4]
 80058aa:	e9c3 0100 	strd	r0, r1, [r3]
 80058ae:	9b06      	ldr	r3, [sp, #24]
 80058b0:	f003 0007 	and.w	r0, r3, #7
 80058b4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80058b8:	ecbd 8b02 	vpop	{d8}
 80058bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058c4:	f7fa fc86 	bl	80001d4 <__adddf3>
 80058c8:	3d01      	subs	r5, #1
 80058ca:	e7e6      	b.n	800589a <__kernel_rem_pio2+0x582>
 80058cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80058d0:	f7fa fc80 	bl	80001d4 <__adddf3>
 80058d4:	3e01      	subs	r6, #1
 80058d6:	e7bc      	b.n	8005852 <__kernel_rem_pio2+0x53a>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	e7c1      	b.n	8005862 <__kernel_rem_pio2+0x54a>
 80058de:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80058e2:	f7fa fc77 	bl	80001d4 <__adddf3>
 80058e6:	3401      	adds	r4, #1
 80058e8:	e7c6      	b.n	8005878 <__kernel_rem_pio2+0x560>
 80058ea:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80058ee:	ed3a 7b02 	vldmdb	sl!, {d7}
 80058f2:	4640      	mov	r0, r8
 80058f4:	ec53 2b17 	vmov	r2, r3, d7
 80058f8:	4649      	mov	r1, r9
 80058fa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80058fe:	f7fa fc69 	bl	80001d4 <__adddf3>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4606      	mov	r6, r0
 8005908:	460f      	mov	r7, r1
 800590a:	4640      	mov	r0, r8
 800590c:	4649      	mov	r1, r9
 800590e:	f7fa fc5f 	bl	80001d0 <__aeabi_dsub>
 8005912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005916:	f7fa fc5d 	bl	80001d4 <__adddf3>
 800591a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800591e:	e9ca 0100 	strd	r0, r1, [sl]
 8005922:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005926:	e770      	b.n	800580a <__kernel_rem_pio2+0x4f2>
 8005928:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800592c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005930:	4630      	mov	r0, r6
 8005932:	ec53 2b17 	vmov	r2, r3, d7
 8005936:	4639      	mov	r1, r7
 8005938:	ed8d 7b04 	vstr	d7, [sp, #16]
 800593c:	f7fa fc4a 	bl	80001d4 <__adddf3>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4680      	mov	r8, r0
 8005946:	4689      	mov	r9, r1
 8005948:	4630      	mov	r0, r6
 800594a:	4639      	mov	r1, r7
 800594c:	f7fa fc40 	bl	80001d0 <__aeabi_dsub>
 8005950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005954:	f7fa fc3e 	bl	80001d4 <__adddf3>
 8005958:	f10b 3bff 	add.w	fp, fp, #4294967295
 800595c:	e9ca 0100 	strd	r0, r1, [sl]
 8005960:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005964:	e756      	b.n	8005814 <__kernel_rem_pio2+0x4fc>
 8005966:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800596a:	f7fa fc33 	bl	80001d4 <__adddf3>
 800596e:	3d01      	subs	r5, #1
 8005970:	e756      	b.n	8005820 <__kernel_rem_pio2+0x508>
 8005972:	9b01      	ldr	r3, [sp, #4]
 8005974:	9a01      	ldr	r2, [sp, #4]
 8005976:	601f      	str	r7, [r3, #0]
 8005978:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800597c:	605c      	str	r4, [r3, #4]
 800597e:	609d      	str	r5, [r3, #8]
 8005980:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005984:	60d3      	str	r3, [r2, #12]
 8005986:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800598a:	6110      	str	r0, [r2, #16]
 800598c:	6153      	str	r3, [r2, #20]
 800598e:	e78e      	b.n	80058ae <__kernel_rem_pio2+0x596>
 8005990:	41700000 	.word	0x41700000
 8005994:	3e700000 	.word	0x3e700000

08005998 <__kernel_sin>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	ec55 4b10 	vmov	r4, r5, d0
 80059a0:	b085      	sub	sp, #20
 80059a2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80059a6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80059aa:	ed8d 1b00 	vstr	d1, [sp]
 80059ae:	9002      	str	r0, [sp, #8]
 80059b0:	da06      	bge.n	80059c0 <__kernel_sin+0x28>
 80059b2:	ee10 0a10 	vmov	r0, s0
 80059b6:	4629      	mov	r1, r5
 80059b8:	f7fb f872 	bl	8000aa0 <__aeabi_d2iz>
 80059bc:	2800      	cmp	r0, #0
 80059be:	d051      	beq.n	8005a64 <__kernel_sin+0xcc>
 80059c0:	4622      	mov	r2, r4
 80059c2:	462b      	mov	r3, r5
 80059c4:	4620      	mov	r0, r4
 80059c6:	4629      	mov	r1, r5
 80059c8:	f7fa fdba 	bl	8000540 <__aeabi_dmul>
 80059cc:	4682      	mov	sl, r0
 80059ce:	468b      	mov	fp, r1
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4620      	mov	r0, r4
 80059d6:	4629      	mov	r1, r5
 80059d8:	f7fa fdb2 	bl	8000540 <__aeabi_dmul>
 80059dc:	a341      	add	r3, pc, #260	; (adr r3, 8005ae4 <__kernel_sin+0x14c>)
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	4680      	mov	r8, r0
 80059e4:	4689      	mov	r9, r1
 80059e6:	4650      	mov	r0, sl
 80059e8:	4659      	mov	r1, fp
 80059ea:	f7fa fda9 	bl	8000540 <__aeabi_dmul>
 80059ee:	a33f      	add	r3, pc, #252	; (adr r3, 8005aec <__kernel_sin+0x154>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f7fa fbec 	bl	80001d0 <__aeabi_dsub>
 80059f8:	4652      	mov	r2, sl
 80059fa:	465b      	mov	r3, fp
 80059fc:	f7fa fda0 	bl	8000540 <__aeabi_dmul>
 8005a00:	a33c      	add	r3, pc, #240	; (adr r3, 8005af4 <__kernel_sin+0x15c>)
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	f7fa fbe5 	bl	80001d4 <__adddf3>
 8005a0a:	4652      	mov	r2, sl
 8005a0c:	465b      	mov	r3, fp
 8005a0e:	f7fa fd97 	bl	8000540 <__aeabi_dmul>
 8005a12:	a33a      	add	r3, pc, #232	; (adr r3, 8005afc <__kernel_sin+0x164>)
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f7fa fbda 	bl	80001d0 <__aeabi_dsub>
 8005a1c:	4652      	mov	r2, sl
 8005a1e:	465b      	mov	r3, fp
 8005a20:	f7fa fd8e 	bl	8000540 <__aeabi_dmul>
 8005a24:	a337      	add	r3, pc, #220	; (adr r3, 8005b04 <__kernel_sin+0x16c>)
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f7fa fbd3 	bl	80001d4 <__adddf3>
 8005a2e:	9b02      	ldr	r3, [sp, #8]
 8005a30:	4606      	mov	r6, r0
 8005a32:	460f      	mov	r7, r1
 8005a34:	b9db      	cbnz	r3, 8005a6e <__kernel_sin+0xd6>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	f7fa fd7f 	bl	8000540 <__aeabi_dmul>
 8005a42:	a325      	add	r3, pc, #148	; (adr r3, 8005ad8 <__kernel_sin+0x140>)
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f7fa fbc2 	bl	80001d0 <__aeabi_dsub>
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	464b      	mov	r3, r9
 8005a50:	f7fa fd76 	bl	8000540 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fa fbba 	bl	80001d4 <__adddf3>
 8005a60:	4604      	mov	r4, r0
 8005a62:	460d      	mov	r5, r1
 8005a64:	ec45 4b10 	vmov	d0, r4, r5
 8005a68:	b005      	add	sp, #20
 8005a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6e:	2200      	movs	r2, #0
 8005a70:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <__kernel_sin+0x148>)
 8005a72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a76:	f7fa fd63 	bl	8000540 <__aeabi_dmul>
 8005a7a:	4632      	mov	r2, r6
 8005a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a80:	463b      	mov	r3, r7
 8005a82:	4640      	mov	r0, r8
 8005a84:	4649      	mov	r1, r9
 8005a86:	f7fa fd5b 	bl	8000540 <__aeabi_dmul>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a92:	f7fa fb9d 	bl	80001d0 <__aeabi_dsub>
 8005a96:	4652      	mov	r2, sl
 8005a98:	465b      	mov	r3, fp
 8005a9a:	f7fa fd51 	bl	8000540 <__aeabi_dmul>
 8005a9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aa2:	f7fa fb95 	bl	80001d0 <__aeabi_dsub>
 8005aa6:	a30c      	add	r3, pc, #48	; (adr r3, 8005ad8 <__kernel_sin+0x140>)
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	4606      	mov	r6, r0
 8005aae:	460f      	mov	r7, r1
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	f7fa fd44 	bl	8000540 <__aeabi_dmul>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4630      	mov	r0, r6
 8005abe:	4639      	mov	r1, r7
 8005ac0:	f7fa fb88 	bl	80001d4 <__adddf3>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4620      	mov	r0, r4
 8005aca:	4629      	mov	r1, r5
 8005acc:	f7fa fb80 	bl	80001d0 <__aeabi_dsub>
 8005ad0:	e7c6      	b.n	8005a60 <__kernel_sin+0xc8>
 8005ad2:	bf00      	nop
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	55555549 	.word	0x55555549
 8005adc:	3fc55555 	.word	0x3fc55555
 8005ae0:	3fe00000 	.word	0x3fe00000
 8005ae4:	5acfd57c 	.word	0x5acfd57c
 8005ae8:	3de5d93a 	.word	0x3de5d93a
 8005aec:	8a2b9ceb 	.word	0x8a2b9ceb
 8005af0:	3e5ae5e6 	.word	0x3e5ae5e6
 8005af4:	57b1fe7d 	.word	0x57b1fe7d
 8005af8:	3ec71de3 	.word	0x3ec71de3
 8005afc:	19c161d5 	.word	0x19c161d5
 8005b00:	3f2a01a0 	.word	0x3f2a01a0
 8005b04:	1110f8a6 	.word	0x1110f8a6
 8005b08:	3f811111 	.word	0x3f811111

08005b0c <fabs>:
 8005b0c:	ec51 0b10 	vmov	r0, r1, d0
 8005b10:	ee10 2a10 	vmov	r2, s0
 8005b14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b18:	ec43 2b10 	vmov	d0, r2, r3
 8005b1c:	4770      	bx	lr
	...

08005b20 <floor>:
 8005b20:	ec51 0b10 	vmov	r0, r1, d0
 8005b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005b2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005b30:	2e13      	cmp	r6, #19
 8005b32:	460c      	mov	r4, r1
 8005b34:	ee10 5a10 	vmov	r5, s0
 8005b38:	4680      	mov	r8, r0
 8005b3a:	dc34      	bgt.n	8005ba6 <floor+0x86>
 8005b3c:	2e00      	cmp	r6, #0
 8005b3e:	da16      	bge.n	8005b6e <floor+0x4e>
 8005b40:	a335      	add	r3, pc, #212	; (adr r3, 8005c18 <floor+0xf8>)
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f7fa fb45 	bl	80001d4 <__adddf3>
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f7fa ff87 	bl	8000a60 <__aeabi_dcmpgt>
 8005b52:	b148      	cbz	r0, 8005b68 <floor+0x48>
 8005b54:	2c00      	cmp	r4, #0
 8005b56:	da59      	bge.n	8005c0c <floor+0xec>
 8005b58:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005b5c:	4a30      	ldr	r2, [pc, #192]	; (8005c20 <floor+0x100>)
 8005b5e:	432b      	orrs	r3, r5
 8005b60:	2500      	movs	r5, #0
 8005b62:	42ab      	cmp	r3, r5
 8005b64:	bf18      	it	ne
 8005b66:	4614      	movne	r4, r2
 8005b68:	4621      	mov	r1, r4
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	e025      	b.n	8005bba <floor+0x9a>
 8005b6e:	4f2d      	ldr	r7, [pc, #180]	; (8005c24 <floor+0x104>)
 8005b70:	4137      	asrs	r7, r6
 8005b72:	ea01 0307 	and.w	r3, r1, r7
 8005b76:	4303      	orrs	r3, r0
 8005b78:	d01f      	beq.n	8005bba <floor+0x9a>
 8005b7a:	a327      	add	r3, pc, #156	; (adr r3, 8005c18 <floor+0xf8>)
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f7fa fb28 	bl	80001d4 <__adddf3>
 8005b84:	2200      	movs	r2, #0
 8005b86:	2300      	movs	r3, #0
 8005b88:	f7fa ff6a 	bl	8000a60 <__aeabi_dcmpgt>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d0eb      	beq.n	8005b68 <floor+0x48>
 8005b90:	2c00      	cmp	r4, #0
 8005b92:	bfbe      	ittt	lt
 8005b94:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005b98:	fa43 f606 	asrlt.w	r6, r3, r6
 8005b9c:	19a4      	addlt	r4, r4, r6
 8005b9e:	ea24 0407 	bic.w	r4, r4, r7
 8005ba2:	2500      	movs	r5, #0
 8005ba4:	e7e0      	b.n	8005b68 <floor+0x48>
 8005ba6:	2e33      	cmp	r6, #51	; 0x33
 8005ba8:	dd0b      	ble.n	8005bc2 <floor+0xa2>
 8005baa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005bae:	d104      	bne.n	8005bba <floor+0x9a>
 8005bb0:	ee10 2a10 	vmov	r2, s0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	f7fa fb0d 	bl	80001d4 <__adddf3>
 8005bba:	ec41 0b10 	vmov	d0, r0, r1
 8005bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bca:	fa23 f707 	lsr.w	r7, r3, r7
 8005bce:	4207      	tst	r7, r0
 8005bd0:	d0f3      	beq.n	8005bba <floor+0x9a>
 8005bd2:	a311      	add	r3, pc, #68	; (adr r3, 8005c18 <floor+0xf8>)
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f7fa fafc 	bl	80001d4 <__adddf3>
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2300      	movs	r3, #0
 8005be0:	f7fa ff3e 	bl	8000a60 <__aeabi_dcmpgt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d0bf      	beq.n	8005b68 <floor+0x48>
 8005be8:	2c00      	cmp	r4, #0
 8005bea:	da02      	bge.n	8005bf2 <floor+0xd2>
 8005bec:	2e14      	cmp	r6, #20
 8005bee:	d103      	bne.n	8005bf8 <floor+0xd8>
 8005bf0:	3401      	adds	r4, #1
 8005bf2:	ea25 0507 	bic.w	r5, r5, r7
 8005bf6:	e7b7      	b.n	8005b68 <floor+0x48>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005bfe:	fa03 f606 	lsl.w	r6, r3, r6
 8005c02:	4435      	add	r5, r6
 8005c04:	4545      	cmp	r5, r8
 8005c06:	bf38      	it	cc
 8005c08:	18e4      	addcc	r4, r4, r3
 8005c0a:	e7f2      	b.n	8005bf2 <floor+0xd2>
 8005c0c:	2500      	movs	r5, #0
 8005c0e:	462c      	mov	r4, r5
 8005c10:	e7aa      	b.n	8005b68 <floor+0x48>
 8005c12:	bf00      	nop
 8005c14:	f3af 8000 	nop.w
 8005c18:	8800759c 	.word	0x8800759c
 8005c1c:	7e37e43c 	.word	0x7e37e43c
 8005c20:	bff00000 	.word	0xbff00000
 8005c24:	000fffff 	.word	0x000fffff

08005c28 <matherr>:
 8005c28:	2000      	movs	r0, #0
 8005c2a:	4770      	bx	lr
 8005c2c:	0000      	movs	r0, r0
	...

08005c30 <scalbn>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	ec55 4b10 	vmov	r4, r5, d0
 8005c36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	b9aa      	cbnz	r2, 8005c6c <scalbn+0x3c>
 8005c40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005c44:	4323      	orrs	r3, r4
 8005c46:	d03b      	beq.n	8005cc0 <scalbn+0x90>
 8005c48:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <scalbn+0xe0>)
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	ee10 0a10 	vmov	r0, s0
 8005c52:	f7fa fc75 	bl	8000540 <__aeabi_dmul>
 8005c56:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <scalbn+0xe4>)
 8005c58:	429e      	cmp	r6, r3
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	460d      	mov	r5, r1
 8005c5e:	da12      	bge.n	8005c86 <scalbn+0x56>
 8005c60:	a327      	add	r3, pc, #156	; (adr r3, 8005d00 <scalbn+0xd0>)
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f7fa fc6b 	bl	8000540 <__aeabi_dmul>
 8005c6a:	e009      	b.n	8005c80 <scalbn+0x50>
 8005c6c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005c70:	428a      	cmp	r2, r1
 8005c72:	d10c      	bne.n	8005c8e <scalbn+0x5e>
 8005c74:	ee10 2a10 	vmov	r2, s0
 8005c78:	4620      	mov	r0, r4
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	f7fa faaa 	bl	80001d4 <__adddf3>
 8005c80:	4604      	mov	r4, r0
 8005c82:	460d      	mov	r5, r1
 8005c84:	e01c      	b.n	8005cc0 <scalbn+0x90>
 8005c86:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	3a36      	subs	r2, #54	; 0x36
 8005c8e:	4432      	add	r2, r6
 8005c90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c94:	428a      	cmp	r2, r1
 8005c96:	dd0b      	ble.n	8005cb0 <scalbn+0x80>
 8005c98:	ec45 4b11 	vmov	d1, r4, r5
 8005c9c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005d08 <scalbn+0xd8>
 8005ca0:	f000 f83c 	bl	8005d1c <copysign>
 8005ca4:	a318      	add	r3, pc, #96	; (adr r3, 8005d08 <scalbn+0xd8>)
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	ec51 0b10 	vmov	r0, r1, d0
 8005cae:	e7da      	b.n	8005c66 <scalbn+0x36>
 8005cb0:	2a00      	cmp	r2, #0
 8005cb2:	dd08      	ble.n	8005cc6 <scalbn+0x96>
 8005cb4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005cb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005cc0:	ec45 4b10 	vmov	d0, r4, r5
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
 8005cc6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005cca:	da0d      	bge.n	8005ce8 <scalbn+0xb8>
 8005ccc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005cd0:	429e      	cmp	r6, r3
 8005cd2:	ec45 4b11 	vmov	d1, r4, r5
 8005cd6:	dce1      	bgt.n	8005c9c <scalbn+0x6c>
 8005cd8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005d00 <scalbn+0xd0>
 8005cdc:	f000 f81e 	bl	8005d1c <copysign>
 8005ce0:	a307      	add	r3, pc, #28	; (adr r3, 8005d00 <scalbn+0xd0>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	e7e0      	b.n	8005caa <scalbn+0x7a>
 8005ce8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005cec:	3236      	adds	r2, #54	; 0x36
 8005cee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cf2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <scalbn+0xe8>)
 8005cfe:	e7b2      	b.n	8005c66 <scalbn+0x36>
 8005d00:	c2f8f359 	.word	0xc2f8f359
 8005d04:	01a56e1f 	.word	0x01a56e1f
 8005d08:	8800759c 	.word	0x8800759c
 8005d0c:	7e37e43c 	.word	0x7e37e43c
 8005d10:	43500000 	.word	0x43500000
 8005d14:	ffff3cb0 	.word	0xffff3cb0
 8005d18:	3c900000 	.word	0x3c900000

08005d1c <copysign>:
 8005d1c:	ec51 0b10 	vmov	r0, r1, d0
 8005d20:	ee11 0a90 	vmov	r0, s3
 8005d24:	ee10 2a10 	vmov	r2, s0
 8005d28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005d2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005d30:	ea41 0300 	orr.w	r3, r1, r0
 8005d34:	ec43 2b10 	vmov	d0, r2, r3
 8005d38:	4770      	bx	lr
	...

08005d3c <_init>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	bf00      	nop
 8005d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d42:	bc08      	pop	{r3}
 8005d44:	469e      	mov	lr, r3
 8005d46:	4770      	bx	lr

08005d48 <_fini>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	bf00      	nop
 8005d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4e:	bc08      	pop	{r3}
 8005d50:	469e      	mov	lr, r3
 8005d52:	4770      	bx	lr
