
NUCLEO_SPI_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080028cc  080028cc  000128cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002974  08002974  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002974  08002974  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002974  08002974  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800297c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  080029ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080029ec  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009022  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b0c  00000000  00000000  000290bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c8  00000000  00000000  0002abc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d0  00000000  00000000  0002b490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014e06  00000000  00000000  0002bc60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007e73  00000000  00000000  00040a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006cec3  00000000  00000000  000488d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b579c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002774  00000000  00000000  000b5818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080028b4 	.word	0x080028b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080028b4 	.word	0x080028b4

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b38      	ldr	r3, [pc, #224]	; (8000244 <MX_GPIO_Init+0xf8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a37      	ldr	r2, [pc, #220]	; (8000244 <MX_GPIO_Init+0xf8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b35      	ldr	r3, [pc, #212]	; (8000244 <MX_GPIO_Init+0xf8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b32      	ldr	r3, [pc, #200]	; (8000244 <MX_GPIO_Init+0xf8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a31      	ldr	r2, [pc, #196]	; (8000244 <MX_GPIO_Init+0xf8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <MX_GPIO_Init+0xf8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b2c      	ldr	r3, [pc, #176]	; (8000244 <MX_GPIO_Init+0xf8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a2b      	ldr	r2, [pc, #172]	; (8000244 <MX_GPIO_Init+0xf8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b29      	ldr	r3, [pc, #164]	; (8000244 <MX_GPIO_Init+0xf8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b26      	ldr	r3, [pc, #152]	; (8000244 <MX_GPIO_Init+0xf8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a25      	ldr	r2, [pc, #148]	; (8000244 <MX_GPIO_Init+0xf8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b23      	ldr	r3, [pc, #140]	; (8000244 <MX_GPIO_Init+0xf8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4820      	ldr	r0, [pc, #128]	; (8000248 <MX_GPIO_Init+0xfc>)
 80001c6:	f000 fe5f 	bl	8000e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d0:	481e      	ldr	r0, [pc, #120]	; (800024c <MX_GPIO_Init+0x100>)
 80001d2:	f000 fe59 	bl	8000e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001dc:	4b1c      	ldr	r3, [pc, #112]	; (8000250 <MX_GPIO_Init+0x104>)
 80001de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001e4:	f107 0310 	add.w	r3, r7, #16
 80001e8:	4619      	mov	r1, r3
 80001ea:	481a      	ldr	r0, [pc, #104]	; (8000254 <MX_GPIO_Init+0x108>)
 80001ec:	f000 fcf2 	bl	8000bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80001f0:	2320      	movs	r3, #32
 80001f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2301      	movs	r3, #1
 80001f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fc:	2302      	movs	r3, #2
 80001fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000200:	f107 0310 	add.w	r3, r7, #16
 8000204:	4619      	mov	r1, r3
 8000206:	4810      	ldr	r0, [pc, #64]	; (8000248 <MX_GPIO_Init+0xfc>)
 8000208:	f000 fce4 	bl	8000bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800020c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000212:	2301      	movs	r3, #1
 8000214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800021a:	2302      	movs	r3, #2
 800021c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800021e:	f107 0310 	add.w	r3, r7, #16
 8000222:	4619      	mov	r1, r3
 8000224:	4809      	ldr	r0, [pc, #36]	; (800024c <MX_GPIO_Init+0x100>)
 8000226:	f000 fcd5 	bl	8000bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800022a:	2200      	movs	r2, #0
 800022c:	2100      	movs	r1, #0
 800022e:	2028      	movs	r0, #40	; 0x28
 8000230:	f000 fc99 	bl	8000b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000234:	2028      	movs	r0, #40	; 0x28
 8000236:	f000 fcb2 	bl	8000b9e <HAL_NVIC_EnableIRQ>

}
 800023a:	bf00      	nop
 800023c:	3720      	adds	r7, #32
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00
 8000250:	10110000 	.word	0x10110000
 8000254:	40011000 	.word	0x40011000

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 fb49 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f83f 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f7ff ff71 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800026a:	f000 fa5d 	bl	8000728 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800026e:	f000 f881 	bl	8000374 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000272:	f000 fa2f 	bl	80006d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Spi_Test_String[10] = "abcdefgh";
 8000276:	4a17      	ldr	r2, [pc, #92]	; (80002d4 <main+0x7c>)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	ca07      	ldmia	r2, {r0, r1, r2}
 800027c:	c303      	stmia	r3!, {r0, r1}
 800027e:	701a      	strb	r2, [r3, #0]
 8000280:	2300      	movs	r3, #0
 8000282:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800028a:	4813      	ldr	r0, [pc, #76]	; (80002d8 <main+0x80>)
 800028c:	f000 fdfc 	bl	8000e88 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("fsdffsf\r\n");
 8000290:	4812      	ldr	r0, [pc, #72]	; (80002dc <main+0x84>)
 8000292:	f001 ff05 	bl	80020a0 <puts>
	  for(uint8_t i = 0; i < 10; i++) {
 8000296:	2300      	movs	r3, #0
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e016      	b.n	80002ca <main+0x72>
		  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002a2:	480d      	ldr	r0, [pc, #52]	; (80002d8 <main+0x80>)
 80002a4:	f000 fdf0 	bl	8000e88 <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi2, Spi_Test_String + i, 1, 0xff);
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	1d3a      	adds	r2, r7, #4
 80002ac:	18d1      	adds	r1, r2, r3
 80002ae:	23ff      	movs	r3, #255	; 0xff
 80002b0:	2201      	movs	r2, #1
 80002b2:	480b      	ldr	r0, [pc, #44]	; (80002e0 <main+0x88>)
 80002b4:	f001 fa9f 	bl	80017f6 <HAL_SPI_Transmit>
	  	  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002be:	4806      	ldr	r0, [pc, #24]	; (80002d8 <main+0x80>)
 80002c0:	f000 fde2 	bl	8000e88 <HAL_GPIO_WritePin>
	  for(uint8_t i = 0; i < 10; i++) {
 80002c4:	7bfb      	ldrb	r3, [r7, #15]
 80002c6:	3301      	adds	r3, #1
 80002c8:	73fb      	strb	r3, [r7, #15]
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	2b09      	cmp	r3, #9
 80002ce:	d9e5      	bls.n	800029c <main+0x44>
	  printf("fsdffsf\r\n");
 80002d0:	e7de      	b.n	8000290 <main+0x38>
 80002d2:	bf00      	nop
 80002d4:	080028d8 	.word	0x080028d8
 80002d8:	40010c00 	.word	0x40010c00
 80002dc:	080028cc 	.word	0x080028cc
 80002e0:	20000098 	.word	0x20000098

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b090      	sub	sp, #64	; 0x40
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	2228      	movs	r2, #40	; 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f001 fe70 	bl	8001fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	2310      	movs	r3, #16
 8000310:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000312:	2302      	movs	r3, #2
 8000314:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000316:	2300      	movs	r3, #0
 8000318:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800031a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800031e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fde9 	bl	8000efc <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000330:	f000 f819 	bl	8000366 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000338:	2302      	movs	r3, #2
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2102      	movs	r1, #2
 800034e:	4618      	mov	r0, r3
 8000350:	f001 f854 	bl	80013fc <HAL_RCC_ClockConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800035a:	f000 f804 	bl	8000366 <Error_Handler>
  }
}
 800035e:	bf00      	nop
 8000360:	3740      	adds	r7, #64	; 0x40
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
	...

08000374 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_SPI2_Init+0x64>)
 800037a:	4a18      	ldr	r2, [pc, #96]	; (80003dc <MX_SPI2_Init+0x68>)
 800037c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MX_SPI2_Init+0x64>)
 8000380:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000384:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_SPI2_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_SPI2_Init+0x64>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_SPI2_Init+0x64>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_SPI2_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_SPI2_Init+0x64>)
 80003a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_SPI2_Init+0x64>)
 80003a8:	2228      	movs	r2, #40	; 0x28
 80003aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ac:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <MX_SPI2_Init+0x64>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_SPI2_Init+0x64>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <MX_SPI2_Init+0x64>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_SPI2_Init+0x64>)
 80003c0:	220a      	movs	r2, #10
 80003c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_SPI2_Init+0x64>)
 80003c6:	f001 f9b5 	bl	8001734 <HAL_SPI_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80003d0:	f7ff ffc9 	bl	8000366 <Error_Handler>
  }

}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000098 	.word	0x20000098
 80003dc:	40003800 	.word	0x40003800

080003e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a1c      	ldr	r2, [pc, #112]	; (800046c <HAL_SPI_MspInit+0x8c>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d131      	bne.n	8000464 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <HAL_SPI_MspInit+0x90>)
 8000402:	69db      	ldr	r3, [r3, #28]
 8000404:	4a1a      	ldr	r2, [pc, #104]	; (8000470 <HAL_SPI_MspInit+0x90>)
 8000406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800040a:	61d3      	str	r3, [r2, #28]
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <HAL_SPI_MspInit+0x90>)
 800040e:	69db      	ldr	r3, [r3, #28]
 8000410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <HAL_SPI_MspInit+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a14      	ldr	r2, [pc, #80]	; (8000470 <HAL_SPI_MspInit+0x90>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <HAL_SPI_MspInit+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000430:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000436:	2302      	movs	r3, #2
 8000438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800043a:	2303      	movs	r3, #3
 800043c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	480b      	ldr	r0, [pc, #44]	; (8000474 <HAL_SPI_MspInit+0x94>)
 8000446:	f000 fbc5 	bl	8000bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800044a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800044e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <HAL_SPI_MspInit+0x94>)
 8000460:	f000 fbb8 	bl	8000bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40003800 	.word	0x40003800
 8000470:	40021000 	.word	0x40021000
 8000474:	40010c00 	.word	0x40010c00

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a14      	ldr	r2, [pc, #80]	; (80004d4 <HAL_MspInit+0x5c>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_MspInit+0x5c>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	61d3      	str	r3, [r2, #28]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_MspInit+0x60>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_MspInit+0x60>)
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010000 	.word	0x40010000

080004dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <HardFault_Handler+0x4>

080004ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <MemManage_Handler+0x4>

080004f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <BusFault_Handler+0x4>

080004fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <UsageFault_Handler+0x4>

08000500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000528:	f000 fa2a 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000534:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000538:	f000 fcbe 	bl	8000eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	e00a      	b.n	8000568 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000552:	f3af 8000 	nop.w
 8000556:	4601      	mov	r1, r0
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	60ba      	str	r2, [r7, #8]
 800055e:	b2ca      	uxtb	r2, r1
 8000560:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf0      	blt.n	8000552 <_read+0x12>
	}

return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b086      	sub	sp, #24
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	60b9      	str	r1, [r7, #8]
 8000584:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	e009      	b.n	80005a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	60ba      	str	r2, [r7, #8]
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f975 	bl	8000884 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3301      	adds	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf1      	blt.n	800058c <_write+0x12>
	}
	return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <_close>:

int _close(int file)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	return -1;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d8:	605a      	str	r2, [r3, #4]
	return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <_isatty>:

int _isatty(int file)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
	return 1;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
	return 0;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
	...

08000614 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <_sbrk+0x50>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <_sbrk+0x16>
		heap_end = &end;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <_sbrk+0x50>)
 8000626:	4a10      	ldr	r2, [pc, #64]	; (8000668 <_sbrk+0x54>)
 8000628:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <_sbrk+0x50>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <_sbrk+0x50>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4413      	add	r3, r2
 8000638:	466a      	mov	r2, sp
 800063a:	4293      	cmp	r3, r2
 800063c:	d907      	bls.n	800064e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800063e:	f001 fca1 	bl	8001f84 <__errno>
 8000642:	4602      	mov	r2, r0
 8000644:	230c      	movs	r3, #12
 8000646:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	e006      	b.n	800065c <_sbrk+0x48>
	}

	heap_end += incr;
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <_sbrk+0x50>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	4a03      	ldr	r2, [pc, #12]	; (8000664 <_sbrk+0x50>)
 8000658:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000008c 	.word	0x2000008c
 8000668:	20000178 	.word	0x20000178

0800066c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <SystemInit+0x5c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <SystemInit+0x5c>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <SystemInit+0x5c>)
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	4911      	ldr	r1, [pc, #68]	; (80006c8 <SystemInit+0x5c>)
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <SystemInit+0x60>)
 8000684:	4013      	ands	r3, r2
 8000686:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <SystemInit+0x5c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <SystemInit+0x5c>)
 800068e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000696:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <SystemInit+0x5c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <SystemInit+0x5c>)
 800069e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <SystemInit+0x5c>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <SystemInit+0x5c>)
 80006aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <SystemInit+0x5c>)
 80006b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <SystemInit+0x64>)
 80006ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006be:	609a      	str	r2, [r3, #8]
#endif 
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000
 80006cc:	f8ff0000 	.word	0xf8ff0000
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART1_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART1_UART_Init+0x4c>)
 800070c:	f001 fa2f 	bl	8001b6e <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f7ff fe26 	bl	8000366 <Error_Handler>
  }

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000f0 	.word	0x200000f0
 8000724:	40013800 	.word	0x40013800

08000728 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART2_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART2_UART_Init+0x4c>)
 8000760:	f001 fa05 	bl	8001b6e <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f7ff fdfc 	bl	8000366 <Error_Handler>
  }

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000130 	.word	0x20000130
 8000778:	40004400 	.word	0x40004400

0800077c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0318 	add.w	r3, r7, #24
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a37      	ldr	r2, [pc, #220]	; (8000874 <HAL_UART_MspInit+0xf8>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d132      	bne.n	8000802 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800079c:	4b36      	ldr	r3, [pc, #216]	; (8000878 <HAL_UART_MspInit+0xfc>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a35      	ldr	r2, [pc, #212]	; (8000878 <HAL_UART_MspInit+0xfc>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b33      	ldr	r3, [pc, #204]	; (8000878 <HAL_UART_MspInit+0xfc>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <HAL_UART_MspInit+0xfc>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <HAL_UART_MspInit+0xfc>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <HAL_UART_MspInit+0xfc>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0318 	add.w	r3, r7, #24
 80007de:	4619      	mov	r1, r3
 80007e0:	4826      	ldr	r0, [pc, #152]	; (800087c <HAL_UART_MspInit+0x100>)
 80007e2:	f000 f9f7 	bl	8000bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0318 	add.w	r3, r7, #24
 80007f8:	4619      	mov	r1, r3
 80007fa:	4820      	ldr	r0, [pc, #128]	; (800087c <HAL_UART_MspInit+0x100>)
 80007fc:	f000 f9ea 	bl	8000bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000800:	e034      	b.n	800086c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a1e      	ldr	r2, [pc, #120]	; (8000880 <HAL_UART_MspInit+0x104>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d12f      	bne.n	800086c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <HAL_UART_MspInit+0xfc>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	4a19      	ldr	r2, [pc, #100]	; (8000878 <HAL_UART_MspInit+0xfc>)
 8000812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000816:	61d3      	str	r3, [r2, #28]
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <HAL_UART_MspInit+0xfc>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_UART_MspInit+0xfc>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a13      	ldr	r2, [pc, #76]	; (8000878 <HAL_UART_MspInit+0xfc>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_UART_MspInit+0xfc>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800083c:	2304      	movs	r3, #4
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0318 	add.w	r3, r7, #24
 800084c:	4619      	mov	r1, r3
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <HAL_UART_MspInit+0x100>)
 8000850:	f000 f9c0 	bl	8000bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000854:	2308      	movs	r3, #8
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4619      	mov	r1, r3
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <HAL_UART_MspInit+0x100>)
 8000868:	f000 f9b4 	bl	8000bd4 <HAL_GPIO_Init>
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40013800 	.word	0x40013800
 8000878:	40021000 	.word	0x40021000
 800087c:	40010800 	.word	0x40010800
 8000880:	40004400 	.word	0x40004400

08000884 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800088c:	1d39      	adds	r1, r7, #4
 800088e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000892:	2201      	movs	r2, #1
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <__io_putchar+0x20>)
 8000896:	f001 f9b7 	bl	8001c08 <HAL_UART_Transmit>
  return ch;
 800089a:	687b      	ldr	r3, [r7, #4]
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000f0 	.word	0x200000f0

080008a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008aa:	e003      	b.n	80008b4 <LoopCopyDataInit>

080008ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008b2:	3104      	adds	r1, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008bc:	d3f6      	bcc.n	80008ac <CopyDataInit>
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008c0:	e002      	b.n	80008c8 <LoopFillZerobss>

080008c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008c4:	f842 3b04 	str.w	r3, [r2], #4

080008c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008cc:	d3f9      	bcc.n	80008c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008ce:	f7ff fecd 	bl	800066c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 fb5d 	bl	8001f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff fcbf 	bl	8000258 <main>
  bx lr
 80008da:	4770      	bx	lr
  ldr r3, =_sidata
 80008dc:	0800297c 	.word	0x0800297c
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008e4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80008e8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80008ec:	20000178 	.word	0x20000178

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_Init+0x28>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_Init+0x28>)
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f923 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	2000      	movs	r0, #0
 800090c:	f000 f808 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff fdb2 	bl	8000478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x54>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x58>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f93b 	bl	8000bba <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 f903 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_InitTick+0x5c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x1c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x20>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <HAL_IncTick+0x20>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000170 	.word	0x20000170

080009a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <HAL_GetTick+0x10>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	20000170 	.word	0x20000170

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4906      	ldr	r1, [pc, #24]	; (8000a50 <__NVIC_EnableIRQ+0x34>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	f7ff ff90 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff2d 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff42 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff90 	bl	8000aa8 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5f 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff35 	bl	8000a1c <__NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffa2 	bl	8000b0c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b08b      	sub	sp, #44	; 0x2c
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be6:	e127      	b.n	8000e38 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000be8:	2201      	movs	r2, #1
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f040 8116 	bne.w	8000e32 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b12      	cmp	r3, #18
 8000c0c:	d034      	beq.n	8000c78 <HAL_GPIO_Init+0xa4>
 8000c0e:	2b12      	cmp	r3, #18
 8000c10:	d80d      	bhi.n	8000c2e <HAL_GPIO_Init+0x5a>
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d02b      	beq.n	8000c6e <HAL_GPIO_Init+0x9a>
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d804      	bhi.n	8000c24 <HAL_GPIO_Init+0x50>
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d031      	beq.n	8000c82 <HAL_GPIO_Init+0xae>
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d01c      	beq.n	8000c5c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c22:	e048      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d043      	beq.n	8000cb0 <HAL_GPIO_Init+0xdc>
 8000c28:	2b11      	cmp	r3, #17
 8000c2a:	d01b      	beq.n	8000c64 <HAL_GPIO_Init+0x90>
          break;
 8000c2c:	e043      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c2e:	4a89      	ldr	r2, [pc, #548]	; (8000e54 <HAL_GPIO_Init+0x280>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d026      	beq.n	8000c82 <HAL_GPIO_Init+0xae>
 8000c34:	4a87      	ldr	r2, [pc, #540]	; (8000e54 <HAL_GPIO_Init+0x280>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d806      	bhi.n	8000c48 <HAL_GPIO_Init+0x74>
 8000c3a:	4a87      	ldr	r2, [pc, #540]	; (8000e58 <HAL_GPIO_Init+0x284>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d020      	beq.n	8000c82 <HAL_GPIO_Init+0xae>
 8000c40:	4a86      	ldr	r2, [pc, #536]	; (8000e5c <HAL_GPIO_Init+0x288>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d01d      	beq.n	8000c82 <HAL_GPIO_Init+0xae>
          break;
 8000c46:	e036      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c48:	4a85      	ldr	r2, [pc, #532]	; (8000e60 <HAL_GPIO_Init+0x28c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d019      	beq.n	8000c82 <HAL_GPIO_Init+0xae>
 8000c4e:	4a85      	ldr	r2, [pc, #532]	; (8000e64 <HAL_GPIO_Init+0x290>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d016      	beq.n	8000c82 <HAL_GPIO_Init+0xae>
 8000c54:	4a84      	ldr	r2, [pc, #528]	; (8000e68 <HAL_GPIO_Init+0x294>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d013      	beq.n	8000c82 <HAL_GPIO_Init+0xae>
          break;
 8000c5a:	e02c      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	623b      	str	r3, [r7, #32]
          break;
 8000c62:	e028      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e023      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	3308      	adds	r3, #8
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e01e      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	330c      	adds	r3, #12
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e019      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	623b      	str	r3, [r7, #32]
          break;
 8000c8e:	e012      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d105      	bne.n	8000ca4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	611a      	str	r2, [r3, #16]
          break;
 8000ca2:	e008      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	615a      	str	r2, [r3, #20]
          break;
 8000cae:	e002      	b.n	8000cb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	2bff      	cmp	r3, #255	; 0xff
 8000cba:	d801      	bhi.n	8000cc0 <HAL_GPIO_Init+0xec>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	e001      	b.n	8000cc4 <HAL_GPIO_Init+0xf0>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	2bff      	cmp	r3, #255	; 0xff
 8000cca:	d802      	bhi.n	8000cd2 <HAL_GPIO_Init+0xfe>
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	e002      	b.n	8000cd8 <HAL_GPIO_Init+0x104>
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	3b08      	subs	r3, #8
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	210f      	movs	r1, #15
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	401a      	ands	r2, r3
 8000cea:	6a39      	ldr	r1, [r7, #32]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 8096 	beq.w	8000e32 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d06:	4b59      	ldr	r3, [pc, #356]	; (8000e6c <HAL_GPIO_Init+0x298>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a58      	ldr	r2, [pc, #352]	; (8000e6c <HAL_GPIO_Init+0x298>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b56      	ldr	r3, [pc, #344]	; (8000e6c <HAL_GPIO_Init+0x298>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d1e:	4a54      	ldr	r2, [pc, #336]	; (8000e70 <HAL_GPIO_Init+0x29c>)
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	220f      	movs	r2, #15
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4b      	ldr	r2, [pc, #300]	; (8000e74 <HAL_GPIO_Init+0x2a0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d013      	beq.n	8000d72 <HAL_GPIO_Init+0x19e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4a      	ldr	r2, [pc, #296]	; (8000e78 <HAL_GPIO_Init+0x2a4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d00d      	beq.n	8000d6e <HAL_GPIO_Init+0x19a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a49      	ldr	r2, [pc, #292]	; (8000e7c <HAL_GPIO_Init+0x2a8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d007      	beq.n	8000d6a <HAL_GPIO_Init+0x196>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <HAL_GPIO_Init+0x2ac>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <HAL_GPIO_Init+0x192>
 8000d62:	2303      	movs	r3, #3
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x1a0>
 8000d66:	2304      	movs	r3, #4
 8000d68:	e004      	b.n	8000d74 <HAL_GPIO_Init+0x1a0>
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	e002      	b.n	8000d74 <HAL_GPIO_Init+0x1a0>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e000      	b.n	8000d74 <HAL_GPIO_Init+0x1a0>
 8000d72:	2300      	movs	r3, #0
 8000d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d76:	f002 0203 	and.w	r2, r2, #3
 8000d7a:	0092      	lsls	r2, r2, #2
 8000d7c:	4093      	lsls	r3, r2
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d84:	493a      	ldr	r1, [pc, #232]	; (8000e70 <HAL_GPIO_Init+0x29c>)
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	089b      	lsrs	r3, r3, #2
 8000d8a:	3302      	adds	r3, #2
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d006      	beq.n	8000dac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4938      	ldr	r1, [pc, #224]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	600b      	str	r3, [r1, #0]
 8000daa:	e006      	b.n	8000dba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dac:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4933      	ldr	r1, [pc, #204]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000db6:	4013      	ands	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d006      	beq.n	8000dd4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	492e      	ldr	r1, [pc, #184]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
 8000dd2:	e006      	b.n	8000de2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4929      	ldr	r1, [pc, #164]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	4924      	ldr	r1, [pc, #144]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	608b      	str	r3, [r1, #8]
 8000dfa:	e006      	b.n	8000e0a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	491f      	ldr	r1, [pc, #124]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	491a      	ldr	r1, [pc, #104]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60cb      	str	r3, [r1, #12]
 8000e22:	e006      	b.n	8000e32 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4915      	ldr	r1, [pc, #84]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	3301      	adds	r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f47f aed0 	bne.w	8000be8 <HAL_GPIO_Init+0x14>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	372c      	adds	r7, #44	; 0x2c
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	10210000 	.word	0x10210000
 8000e58:	10110000 	.word	0x10110000
 8000e5c:	10120000 	.word	0x10120000
 8000e60:	10310000 	.word	0x10310000
 8000e64:	10320000 	.word	0x10320000
 8000e68:	10220000 	.word	0x10220000
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000
 8000e74:	40010800 	.word	0x40010800
 8000e78:	40010c00 	.word	0x40010c00
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	40011400 	.word	0x40011400
 8000e84:	40010400 	.word	0x40010400

08000e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
 8000e94:	4613      	mov	r3, r2
 8000e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e98:	787b      	ldrb	r3, [r7, #1]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ea4:	e003      	b.n	8000eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	041a      	lsls	r2, r3, #16
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	611a      	str	r2, [r3, #16]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f806 	bl	8000ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e26c      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8087 	beq.w	800102a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f1c:	4b92      	ldr	r3, [pc, #584]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d00c      	beq.n	8000f42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f28:	4b8f      	ldr	r3, [pc, #572]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 030c 	and.w	r3, r3, #12
 8000f30:	2b08      	cmp	r3, #8
 8000f32:	d112      	bne.n	8000f5a <HAL_RCC_OscConfig+0x5e>
 8000f34:	4b8c      	ldr	r3, [pc, #560]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f40:	d10b      	bne.n	8000f5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f42:	4b89      	ldr	r3, [pc, #548]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d06c      	beq.n	8001028 <HAL_RCC_OscConfig+0x12c>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d168      	bne.n	8001028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e246      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f62:	d106      	bne.n	8000f72 <HAL_RCC_OscConfig+0x76>
 8000f64:	4b80      	ldr	r3, [pc, #512]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a7f      	ldr	r2, [pc, #508]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	e02e      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x98>
 8000f7a:	4b7b      	ldr	r3, [pc, #492]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a7a      	ldr	r2, [pc, #488]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	4b78      	ldr	r3, [pc, #480]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a77      	ldr	r2, [pc, #476]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e01d      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0xbc>
 8000f9e:	4b72      	ldr	r3, [pc, #456]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a71      	ldr	r2, [pc, #452]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b6f      	ldr	r3, [pc, #444]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a6e      	ldr	r2, [pc, #440]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e00b      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000fb8:	4b6b      	ldr	r3, [pc, #428]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a6a      	ldr	r2, [pc, #424]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b68      	ldr	r3, [pc, #416]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a67      	ldr	r2, [pc, #412]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d013      	beq.n	8001000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fce4 	bl	80009a4 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fce0 	bl	80009a4 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b64      	cmp	r3, #100	; 0x64
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e1fa      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f0      	beq.n	8000fe0 <HAL_RCC_OscConfig+0xe4>
 8000ffe:	e014      	b.n	800102a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fcd0 	bl	80009a4 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fccc 	bl	80009a4 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	; 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1e6      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x10c>
 8001026:	e000      	b.n	800102a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d063      	beq.n	80010fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001036:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b00      	cmp	r3, #0
 8001040:	d00b      	beq.n	800105a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001042:	4b49      	ldr	r3, [pc, #292]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 030c 	and.w	r3, r3, #12
 800104a:	2b08      	cmp	r3, #8
 800104c:	d11c      	bne.n	8001088 <HAL_RCC_OscConfig+0x18c>
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d116      	bne.n	8001088 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x176>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d001      	beq.n	8001072 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e1ba      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4939      	ldr	r1, [pc, #228]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001082:	4313      	orrs	r3, r2
 8001084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	e03a      	b.n	80010fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d020      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001090:	4b36      	ldr	r3, [pc, #216]	; (800116c <HAL_RCC_OscConfig+0x270>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fc85 	bl	80009a4 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800109e:	f7ff fc81 	bl	80009a4 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e19b      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010bc:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4927      	ldr	r1, [pc, #156]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
 80010d0:	e015      	b.n	80010fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_RCC_OscConfig+0x270>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fc64 	bl	80009a4 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e0:	f7ff fc60 	bl	80009a4 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e17a      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d03a      	beq.n	8001180 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d019      	beq.n	8001146 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_RCC_OscConfig+0x274>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001118:	f7ff fc44 	bl	80009a4 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001120:	f7ff fc40 	bl	80009a4 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e15a      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f000 fada 	bl	80016f8 <RCC_Delay>
 8001144:	e01c      	b.n	8001180 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_RCC_OscConfig+0x274>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114c:	f7ff fc2a 	bl	80009a4 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001152:	e00f      	b.n	8001174 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fc26 	bl	80009a4 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d908      	bls.n	8001174 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e140      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000
 800116c:	42420000 	.word	0x42420000
 8001170:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001174:	4b9e      	ldr	r3, [pc, #632]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e9      	bne.n	8001154 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80a6 	beq.w	80012da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10d      	bne.n	80011ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b94      	ldr	r3, [pc, #592]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a93      	ldr	r2, [pc, #588]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b91      	ldr	r3, [pc, #580]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011b6:	2301      	movs	r3, #1
 80011b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ba:	4b8e      	ldr	r3, [pc, #568]	; (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d118      	bne.n	80011f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c6:	4b8b      	ldr	r3, [pc, #556]	; (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a8a      	ldr	r2, [pc, #552]	; (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fbe7 	bl	80009a4 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011da:	f7ff fbe3 	bl	80009a4 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b64      	cmp	r3, #100	; 0x64
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e0fd      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	4b81      	ldr	r3, [pc, #516]	; (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d106      	bne.n	800120e <HAL_RCC_OscConfig+0x312>
 8001200:	4b7b      	ldr	r3, [pc, #492]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4a7a      	ldr	r2, [pc, #488]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6213      	str	r3, [r2, #32]
 800120c:	e02d      	b.n	800126a <HAL_RCC_OscConfig+0x36e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0x334>
 8001216:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	4a75      	ldr	r2, [pc, #468]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	6213      	str	r3, [r2, #32]
 8001222:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4a72      	ldr	r2, [pc, #456]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	f023 0304 	bic.w	r3, r3, #4
 800122c:	6213      	str	r3, [r2, #32]
 800122e:	e01c      	b.n	800126a <HAL_RCC_OscConfig+0x36e>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0x356>
 8001238:	4b6d      	ldr	r3, [pc, #436]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4a6c      	ldr	r2, [pc, #432]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6213      	str	r3, [r2, #32]
 8001244:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4a69      	ldr	r2, [pc, #420]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6213      	str	r3, [r2, #32]
 8001250:	e00b      	b.n	800126a <HAL_RCC_OscConfig+0x36e>
 8001252:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4a66      	ldr	r2, [pc, #408]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6213      	str	r3, [r2, #32]
 800125e:	4b64      	ldr	r3, [pc, #400]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4a63      	ldr	r2, [pc, #396]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001264:	f023 0304 	bic.w	r3, r3, #4
 8001268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d015      	beq.n	800129e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001272:	f7ff fb97 	bl	80009a4 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff fb93 	bl	80009a4 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f241 3288 	movw	r2, #5000	; 0x1388
 8001288:	4293      	cmp	r3, r2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e0ab      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0ee      	beq.n	800127a <HAL_RCC_OscConfig+0x37e>
 800129c:	e014      	b.n	80012c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff fb81 	bl	80009a4 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff fb7d 	bl	80009a4 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e095      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ee      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ce:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a47      	ldr	r2, [pc, #284]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 8081 	beq.w	80013e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d061      	beq.n	80013b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d146      	bne.n	8001386 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f8:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <HAL_RCC_OscConfig+0x4fc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fb51 	bl	80009a4 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001306:	f7ff fb4d 	bl	80009a4 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e067      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800132c:	d108      	bne.n	8001340 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	492d      	ldr	r1, [pc, #180]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a19      	ldr	r1, [r3, #32]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	430b      	orrs	r3, r1
 8001352:	4927      	ldr	r1, [pc, #156]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_RCC_OscConfig+0x4fc>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff fb21 	bl	80009a4 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001366:	f7ff fb1d 	bl	80009a4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e037      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x46a>
 8001384:	e02f      	b.n	80013e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <HAL_RCC_OscConfig+0x4fc>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fb0a 	bl	80009a4 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff fb06 	bl	80009a4 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e020      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x498>
 80013b2:	e018      	b.n	80013e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e013      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	429a      	cmp	r2, r3
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40007000 	.word	0x40007000
 80013f8:	42420060 	.word	0x42420060

080013fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0d0      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d910      	bls.n	8001440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b67      	ldr	r3, [pc, #412]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 0207 	bic.w	r2, r3, #7
 8001426:	4965      	ldr	r1, [pc, #404]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0b8      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d020      	beq.n	800148e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001458:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001462:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001470:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800147a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	494d      	ldr	r1, [pc, #308]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d040      	beq.n	800151c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d115      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e07f      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e073      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ca:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e06b      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f023 0203 	bic.w	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4936      	ldr	r1, [pc, #216]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014ec:	f7ff fa5a 	bl	80009a4 <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	e00a      	b.n	800150a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f7ff fa56 	bl	80009a4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e053      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150a:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 020c 	and.w	r2, r3, #12
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	429a      	cmp	r2, r3
 800151a:	d1eb      	bne.n	80014f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d210      	bcs.n	800154c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 0207 	bic.w	r2, r3, #7
 8001532:	4922      	ldr	r1, [pc, #136]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e032      	b.n	80015b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4916      	ldr	r1, [pc, #88]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	4313      	orrs	r3, r2
 8001568:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	490e      	ldr	r1, [pc, #56]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800158a:	f000 f821 	bl	80015d0 <HAL_RCC_GetSysClockFreq>
 800158e:	4601      	mov	r1, r0
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_RCC_ClockConfig+0x1c8>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	fa21 f303 	lsr.w	r3, r1, r3
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <HAL_RCC_ClockConfig+0x1cc>)
 80015a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1d0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff f9b8 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40022000 	.word	0x40022000
 80015c0:	40021000 	.word	0x40021000
 80015c4:	080028f8 	.word	0x080028f8
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d0:	b490      	push	{r4, r7}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015d8:	1d3c      	adds	r4, r7, #4
 80015da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d002      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x40>
 800160a:	2b08      	cmp	r3, #8
 800160c:	d003      	beq.n	8001616 <HAL_RCC_GetSysClockFreq+0x46>
 800160e:	e02d      	b.n	800166c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001612:	623b      	str	r3, [r7, #32]
      break;
 8001614:	e02d      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001622:	4413      	add	r3, r2
 8001624:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001628:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	0c5b      	lsrs	r3, r3, #17
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001642:	4413      	add	r3, r2
 8001644:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001648:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	4a0f      	ldr	r2, [pc, #60]	; (800168c <HAL_RCC_GetSysClockFreq+0xbc>)
 800164e:	fb02 f203 	mul.w	r2, r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
 800165a:	e004      	b.n	8001666 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	623b      	str	r3, [r7, #32]
      break;
 800166a:	e002      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <HAL_RCC_GetSysClockFreq+0xbc>)
 800166e:	623b      	str	r3, [r7, #32]
      break;
 8001670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001672:	6a3b      	ldr	r3, [r7, #32]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bc90      	pop	{r4, r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	080028e4 	.word	0x080028e4
 8001684:	080028f4 	.word	0x080028f4
 8001688:	40021000 	.word	0x40021000
 800168c:	007a1200 	.word	0x007a1200
 8001690:	003d0900 	.word	0x003d0900

08001694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000000 	.word	0x20000000

080016a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016ac:	f7ff fff2 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 80016b0:	4601      	mov	r1, r0
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	4a03      	ldr	r2, [pc, #12]	; (80016cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016be:	5cd3      	ldrb	r3, [r2, r3]
 80016c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40021000 	.word	0x40021000
 80016cc:	08002908 	.word	0x08002908

080016d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016d4:	f7ff ffde 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 80016d8:	4601      	mov	r1, r0
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	0adb      	lsrs	r3, r3, #11
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08002908 	.word	0x08002908

080016f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <RCC_Delay+0x34>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <RCC_Delay+0x38>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0a5b      	lsrs	r3, r3, #9
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001714:	bf00      	nop
  }
  while (Delay --);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1e5a      	subs	r2, r3, #1
 800171a:	60fa      	str	r2, [r7, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f9      	bne.n	8001714 <RCC_Delay+0x1c>
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000000 	.word	0x20000000
 8001730:	10624dd3 	.word	0x10624dd3

08001734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e053      	b.n	80017ee <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d106      	bne.n	8001766 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7fe fe3d 	bl	80003e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2202      	movs	r2, #2
 800176a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800177c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	ea42 0103 	orr.w	r1, r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	0c1a      	lsrs	r2, r3, #16
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f002 0204 	and.w	r2, r2, #4
 80017cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b088      	sub	sp, #32
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4613      	mov	r3, r2
 8001804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_SPI_Transmit+0x22>
 8001814:	2302      	movs	r3, #2
 8001816:	e11e      	b.n	8001a56 <HAL_SPI_Transmit+0x260>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001820:	f7ff f8c0 	bl	80009a4 <HAL_GetTick>
 8001824:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d002      	beq.n	800183c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001836:	2302      	movs	r3, #2
 8001838:	77fb      	strb	r3, [r7, #31]
    goto error;
 800183a:	e103      	b.n	8001a44 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_SPI_Transmit+0x52>
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800184c:	e0fa      	b.n	8001a44 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2203      	movs	r2, #3
 8001852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	88fa      	ldrh	r2, [r7, #6]
 8001866:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001894:	d107      	bne.n	80018a6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b0:	2b40      	cmp	r3, #64	; 0x40
 80018b2:	d007      	beq.n	80018c4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018cc:	d14b      	bne.n	8001966 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_SPI_Transmit+0xe6>
 80018d6:	8afb      	ldrh	r3, [r7, #22]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d13e      	bne.n	800195a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	881a      	ldrh	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	1c9a      	adds	r2, r3, #2
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001900:	e02b      	b.n	800195a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b02      	cmp	r3, #2
 800190e:	d112      	bne.n	8001936 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	881a      	ldrh	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	1c9a      	adds	r2, r3, #2
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800192a:	b29b      	uxth	r3, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	86da      	strh	r2, [r3, #54]	; 0x36
 8001934:	e011      	b.n	800195a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001936:	f7ff f835 	bl	80009a4 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d803      	bhi.n	800194e <HAL_SPI_Transmit+0x158>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d102      	bne.n	8001954 <HAL_SPI_Transmit+0x15e>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001958:	e074      	b.n	8001a44 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ce      	bne.n	8001902 <HAL_SPI_Transmit+0x10c>
 8001964:	e04c      	b.n	8001a00 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <HAL_SPI_Transmit+0x17e>
 800196e:	8afb      	ldrh	r3, [r7, #22]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d140      	bne.n	80019f6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	330c      	adds	r3, #12
 800197e:	7812      	ldrb	r2, [r2, #0]
 8001980:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800199a:	e02c      	b.n	80019f6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d113      	bne.n	80019d2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	330c      	adds	r3, #12
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80019d0:	e011      	b.n	80019f6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019d2:	f7fe ffe7 	bl	80009a4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d803      	bhi.n	80019ea <HAL_SPI_Transmit+0x1f4>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e8:	d102      	bne.n	80019f0 <HAL_SPI_Transmit+0x1fa>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80019f4:	e026      	b.n	8001a44 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1cd      	bne.n	800199c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f894 	bl	8001b32 <SPI_EndRxTxTransaction>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2220      	movs	r2, #32
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10a      	bne.n	8001a34 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	77fb      	strb	r3, [r7, #31]
 8001a40:	e000      	b.n	8001a44 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001a42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a6e:	e04c      	b.n	8001b0a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a76:	d048      	beq.n	8001b0a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001a78:	f7fe ff94 	bl	80009a4 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d902      	bls.n	8001a8e <SPI_WaitFlagStateUntilTimeout+0x30>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d13d      	bne.n	8001b0a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001aa6:	d111      	bne.n	8001acc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab0:	d004      	beq.n	8001abc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aba:	d107      	bne.n	8001acc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ad4:	d10f      	bne.n	8001af6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e00f      	b.n	8001b2a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4013      	ands	r3, r2
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1a3      	bne.n	8001a70 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af02      	add	r7, sp, #8
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2200      	movs	r2, #0
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff ff88 	bl	8001a5e <SPI_WaitFlagStateUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b58:	f043 0220 	orr.w	r2, r3, #32
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e000      	b.n	8001b66 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e03f      	b.n	8001c00 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d106      	bne.n	8001b9a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7fe fdf1 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2224      	movs	r2, #36	; 0x24
 8001b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bb0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f90c 	bl	8001dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001be6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	f040 8083 	bne.w	8001d30 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_UART_Transmit+0x2e>
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e07b      	b.n	8001d32 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_UART_Transmit+0x40>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e074      	b.n	8001d32 <HAL_UART_Transmit+0x12a>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2221      	movs	r2, #33	; 0x21
 8001c5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c5e:	f7fe fea1 	bl	80009a4 <HAL_GetTick>
 8001c62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	88fa      	ldrh	r2, [r7, #6]
 8001c6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c70:	e042      	b.n	8001cf8 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c88:	d122      	bne.n	8001cd0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2200      	movs	r2, #0
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f850 	bl	8001d3a <UART_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e046      	b.n	8001d32 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cb6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d103      	bne.n	8001cc8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	e017      	b.n	8001cf8 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	e013      	b.n	8001cf8 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f82d 	bl	8001d3a <UART_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e023      	b.n	8001d32 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	60ba      	str	r2, [r7, #8]
 8001cf0:	781a      	ldrb	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1b7      	bne.n	8001c72 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2140      	movs	r1, #64	; 0x40
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f814 	bl	8001d3a <UART_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e00a      	b.n	8001d32 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4613      	mov	r3, r2
 8001d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d4a:	e02c      	b.n	8001da6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d52:	d028      	beq.n	8001da6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8001d5a:	f7fe fe23 	bl	80009a4 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d21d      	bcs.n	8001da6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d78:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e00f      	b.n	8001dc6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4013      	ands	r3, r2
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	bf0c      	ite	eq
 8001db6:	2301      	moveq	r3, #1
 8001db8:	2300      	movne	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d0c3      	beq.n	8001d4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e0a:	f023 030c 	bic.w	r3, r3, #12
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <UART_SetConfig+0x1ac>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d14e      	bne.n	8001ed6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e38:	f7ff fc4a 	bl	80016d0 <HAL_RCC_GetPCLK2Freq>
 8001e3c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	009a      	lsls	r2, r3, #2
 8001e48:	441a      	add	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	4a4a      	ldr	r2, [pc, #296]	; (8001f80 <UART_SetConfig+0x1b0>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	0119      	lsls	r1, r3, #4
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	009a      	lsls	r2, r3, #2
 8001e68:	441a      	add	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e74:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <UART_SetConfig+0x1b0>)
 8001e76:	fba3 0302 	umull	r0, r3, r3, r2
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2064      	movs	r0, #100	; 0x64
 8001e7e:	fb00 f303 	mul.w	r3, r0, r3
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	3332      	adds	r3, #50	; 0x32
 8001e88:	4a3d      	ldr	r2, [pc, #244]	; (8001f80 <UART_SetConfig+0x1b0>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e94:	4419      	add	r1, r3
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009a      	lsls	r2, r3, #2
 8001ea0:	441a      	add	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eac:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <UART_SetConfig+0x1b0>)
 8001eae:	fba3 0302 	umull	r0, r3, r3, r2
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2064      	movs	r0, #100	; 0x64
 8001eb6:	fb00 f303 	mul.w	r3, r0, r3
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	3332      	adds	r3, #50	; 0x32
 8001ec0:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <UART_SetConfig+0x1b0>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	f003 020f 	and.w	r2, r3, #15
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	440a      	add	r2, r1
 8001ed2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001ed4:	e04d      	b.n	8001f72 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ed6:	f7ff fbe7 	bl	80016a8 <HAL_RCC_GetPCLK1Freq>
 8001eda:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009a      	lsls	r2, r3, #2
 8001ee6:	441a      	add	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef2:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <UART_SetConfig+0x1b0>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	0119      	lsls	r1, r3, #4
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	009a      	lsls	r2, r3, #2
 8001f06:	441a      	add	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <UART_SetConfig+0x1b0>)
 8001f14:	fba3 0302 	umull	r0, r3, r3, r2
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	2064      	movs	r0, #100	; 0x64
 8001f1c:	fb00 f303 	mul.w	r3, r0, r3
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	3332      	adds	r3, #50	; 0x32
 8001f26:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <UART_SetConfig+0x1b0>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f32:	4419      	add	r1, r3
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009a      	lsls	r2, r3, #2
 8001f3e:	441a      	add	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <UART_SetConfig+0x1b0>)
 8001f4c:	fba3 0302 	umull	r0, r3, r3, r2
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	2064      	movs	r0, #100	; 0x64
 8001f54:	fb00 f303 	mul.w	r3, r0, r3
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	3332      	adds	r3, #50	; 0x32
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <UART_SetConfig+0x1b0>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	440a      	add	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	51eb851f 	.word	0x51eb851f

08001f84 <__errno>:
 8001f84:	4b01      	ldr	r3, [pc, #4]	; (8001f8c <__errno+0x8>)
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	2000000c 	.word	0x2000000c

08001f90 <__libc_init_array>:
 8001f90:	b570      	push	{r4, r5, r6, lr}
 8001f92:	2500      	movs	r5, #0
 8001f94:	4e0c      	ldr	r6, [pc, #48]	; (8001fc8 <__libc_init_array+0x38>)
 8001f96:	4c0d      	ldr	r4, [pc, #52]	; (8001fcc <__libc_init_array+0x3c>)
 8001f98:	1ba4      	subs	r4, r4, r6
 8001f9a:	10a4      	asrs	r4, r4, #2
 8001f9c:	42a5      	cmp	r5, r4
 8001f9e:	d109      	bne.n	8001fb4 <__libc_init_array+0x24>
 8001fa0:	f000 fc88 	bl	80028b4 <_init>
 8001fa4:	2500      	movs	r5, #0
 8001fa6:	4e0a      	ldr	r6, [pc, #40]	; (8001fd0 <__libc_init_array+0x40>)
 8001fa8:	4c0a      	ldr	r4, [pc, #40]	; (8001fd4 <__libc_init_array+0x44>)
 8001faa:	1ba4      	subs	r4, r4, r6
 8001fac:	10a4      	asrs	r4, r4, #2
 8001fae:	42a5      	cmp	r5, r4
 8001fb0:	d105      	bne.n	8001fbe <__libc_init_array+0x2e>
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}
 8001fb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fb8:	4798      	blx	r3
 8001fba:	3501      	adds	r5, #1
 8001fbc:	e7ee      	b.n	8001f9c <__libc_init_array+0xc>
 8001fbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fc2:	4798      	blx	r3
 8001fc4:	3501      	adds	r5, #1
 8001fc6:	e7f2      	b.n	8001fae <__libc_init_array+0x1e>
 8001fc8:	08002974 	.word	0x08002974
 8001fcc:	08002974 	.word	0x08002974
 8001fd0:	08002974 	.word	0x08002974
 8001fd4:	08002978 	.word	0x08002978

08001fd8 <memset>:
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4402      	add	r2, r0
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d100      	bne.n	8001fe2 <memset+0xa>
 8001fe0:	4770      	bx	lr
 8001fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fe6:	e7f9      	b.n	8001fdc <memset+0x4>

08001fe8 <_puts_r>:
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	460e      	mov	r6, r1
 8001fec:	4605      	mov	r5, r0
 8001fee:	b118      	cbz	r0, 8001ff8 <_puts_r+0x10>
 8001ff0:	6983      	ldr	r3, [r0, #24]
 8001ff2:	b90b      	cbnz	r3, 8001ff8 <_puts_r+0x10>
 8001ff4:	f000 fa0c 	bl	8002410 <__sinit>
 8001ff8:	69ab      	ldr	r3, [r5, #24]
 8001ffa:	68ac      	ldr	r4, [r5, #8]
 8001ffc:	b913      	cbnz	r3, 8002004 <_puts_r+0x1c>
 8001ffe:	4628      	mov	r0, r5
 8002000:	f000 fa06 	bl	8002410 <__sinit>
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <_puts_r+0xac>)
 8002006:	429c      	cmp	r4, r3
 8002008:	d117      	bne.n	800203a <_puts_r+0x52>
 800200a:	686c      	ldr	r4, [r5, #4]
 800200c:	89a3      	ldrh	r3, [r4, #12]
 800200e:	071b      	lsls	r3, r3, #28
 8002010:	d51d      	bpl.n	800204e <_puts_r+0x66>
 8002012:	6923      	ldr	r3, [r4, #16]
 8002014:	b1db      	cbz	r3, 800204e <_puts_r+0x66>
 8002016:	3e01      	subs	r6, #1
 8002018:	68a3      	ldr	r3, [r4, #8]
 800201a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800201e:	3b01      	subs	r3, #1
 8002020:	60a3      	str	r3, [r4, #8]
 8002022:	b9e9      	cbnz	r1, 8002060 <_puts_r+0x78>
 8002024:	2b00      	cmp	r3, #0
 8002026:	da2e      	bge.n	8002086 <_puts_r+0x9e>
 8002028:	4622      	mov	r2, r4
 800202a:	210a      	movs	r1, #10
 800202c:	4628      	mov	r0, r5
 800202e:	f000 f83f 	bl	80020b0 <__swbuf_r>
 8002032:	3001      	adds	r0, #1
 8002034:	d011      	beq.n	800205a <_puts_r+0x72>
 8002036:	200a      	movs	r0, #10
 8002038:	e011      	b.n	800205e <_puts_r+0x76>
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <_puts_r+0xb0>)
 800203c:	429c      	cmp	r4, r3
 800203e:	d101      	bne.n	8002044 <_puts_r+0x5c>
 8002040:	68ac      	ldr	r4, [r5, #8]
 8002042:	e7e3      	b.n	800200c <_puts_r+0x24>
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <_puts_r+0xb4>)
 8002046:	429c      	cmp	r4, r3
 8002048:	bf08      	it	eq
 800204a:	68ec      	ldreq	r4, [r5, #12]
 800204c:	e7de      	b.n	800200c <_puts_r+0x24>
 800204e:	4621      	mov	r1, r4
 8002050:	4628      	mov	r0, r5
 8002052:	f000 f87f 	bl	8002154 <__swsetup_r>
 8002056:	2800      	cmp	r0, #0
 8002058:	d0dd      	beq.n	8002016 <_puts_r+0x2e>
 800205a:	f04f 30ff 	mov.w	r0, #4294967295
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	2b00      	cmp	r3, #0
 8002062:	da04      	bge.n	800206e <_puts_r+0x86>
 8002064:	69a2      	ldr	r2, [r4, #24]
 8002066:	429a      	cmp	r2, r3
 8002068:	dc06      	bgt.n	8002078 <_puts_r+0x90>
 800206a:	290a      	cmp	r1, #10
 800206c:	d004      	beq.n	8002078 <_puts_r+0x90>
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	6022      	str	r2, [r4, #0]
 8002074:	7019      	strb	r1, [r3, #0]
 8002076:	e7cf      	b.n	8002018 <_puts_r+0x30>
 8002078:	4622      	mov	r2, r4
 800207a:	4628      	mov	r0, r5
 800207c:	f000 f818 	bl	80020b0 <__swbuf_r>
 8002080:	3001      	adds	r0, #1
 8002082:	d1c9      	bne.n	8002018 <_puts_r+0x30>
 8002084:	e7e9      	b.n	800205a <_puts_r+0x72>
 8002086:	200a      	movs	r0, #10
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	6022      	str	r2, [r4, #0]
 800208e:	7018      	strb	r0, [r3, #0]
 8002090:	e7e5      	b.n	800205e <_puts_r+0x76>
 8002092:	bf00      	nop
 8002094:	08002934 	.word	0x08002934
 8002098:	08002954 	.word	0x08002954
 800209c:	08002914 	.word	0x08002914

080020a0 <puts>:
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <puts+0xc>)
 80020a2:	4601      	mov	r1, r0
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	f7ff bf9f 	b.w	8001fe8 <_puts_r>
 80020aa:	bf00      	nop
 80020ac:	2000000c 	.word	0x2000000c

080020b0 <__swbuf_r>:
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b2:	460e      	mov	r6, r1
 80020b4:	4614      	mov	r4, r2
 80020b6:	4605      	mov	r5, r0
 80020b8:	b118      	cbz	r0, 80020c2 <__swbuf_r+0x12>
 80020ba:	6983      	ldr	r3, [r0, #24]
 80020bc:	b90b      	cbnz	r3, 80020c2 <__swbuf_r+0x12>
 80020be:	f000 f9a7 	bl	8002410 <__sinit>
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <__swbuf_r+0x98>)
 80020c4:	429c      	cmp	r4, r3
 80020c6:	d12a      	bne.n	800211e <__swbuf_r+0x6e>
 80020c8:	686c      	ldr	r4, [r5, #4]
 80020ca:	69a3      	ldr	r3, [r4, #24]
 80020cc:	60a3      	str	r3, [r4, #8]
 80020ce:	89a3      	ldrh	r3, [r4, #12]
 80020d0:	071a      	lsls	r2, r3, #28
 80020d2:	d52e      	bpl.n	8002132 <__swbuf_r+0x82>
 80020d4:	6923      	ldr	r3, [r4, #16]
 80020d6:	b363      	cbz	r3, 8002132 <__swbuf_r+0x82>
 80020d8:	6923      	ldr	r3, [r4, #16]
 80020da:	6820      	ldr	r0, [r4, #0]
 80020dc:	b2f6      	uxtb	r6, r6
 80020de:	1ac0      	subs	r0, r0, r3
 80020e0:	6963      	ldr	r3, [r4, #20]
 80020e2:	4637      	mov	r7, r6
 80020e4:	4283      	cmp	r3, r0
 80020e6:	dc04      	bgt.n	80020f2 <__swbuf_r+0x42>
 80020e8:	4621      	mov	r1, r4
 80020ea:	4628      	mov	r0, r5
 80020ec:	f000 f926 	bl	800233c <_fflush_r>
 80020f0:	bb28      	cbnz	r0, 800213e <__swbuf_r+0x8e>
 80020f2:	68a3      	ldr	r3, [r4, #8]
 80020f4:	3001      	adds	r0, #1
 80020f6:	3b01      	subs	r3, #1
 80020f8:	60a3      	str	r3, [r4, #8]
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	6022      	str	r2, [r4, #0]
 8002100:	701e      	strb	r6, [r3, #0]
 8002102:	6963      	ldr	r3, [r4, #20]
 8002104:	4283      	cmp	r3, r0
 8002106:	d004      	beq.n	8002112 <__swbuf_r+0x62>
 8002108:	89a3      	ldrh	r3, [r4, #12]
 800210a:	07db      	lsls	r3, r3, #31
 800210c:	d519      	bpl.n	8002142 <__swbuf_r+0x92>
 800210e:	2e0a      	cmp	r6, #10
 8002110:	d117      	bne.n	8002142 <__swbuf_r+0x92>
 8002112:	4621      	mov	r1, r4
 8002114:	4628      	mov	r0, r5
 8002116:	f000 f911 	bl	800233c <_fflush_r>
 800211a:	b190      	cbz	r0, 8002142 <__swbuf_r+0x92>
 800211c:	e00f      	b.n	800213e <__swbuf_r+0x8e>
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <__swbuf_r+0x9c>)
 8002120:	429c      	cmp	r4, r3
 8002122:	d101      	bne.n	8002128 <__swbuf_r+0x78>
 8002124:	68ac      	ldr	r4, [r5, #8]
 8002126:	e7d0      	b.n	80020ca <__swbuf_r+0x1a>
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <__swbuf_r+0xa0>)
 800212a:	429c      	cmp	r4, r3
 800212c:	bf08      	it	eq
 800212e:	68ec      	ldreq	r4, [r5, #12]
 8002130:	e7cb      	b.n	80020ca <__swbuf_r+0x1a>
 8002132:	4621      	mov	r1, r4
 8002134:	4628      	mov	r0, r5
 8002136:	f000 f80d 	bl	8002154 <__swsetup_r>
 800213a:	2800      	cmp	r0, #0
 800213c:	d0cc      	beq.n	80020d8 <__swbuf_r+0x28>
 800213e:	f04f 37ff 	mov.w	r7, #4294967295
 8002142:	4638      	mov	r0, r7
 8002144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002146:	bf00      	nop
 8002148:	08002934 	.word	0x08002934
 800214c:	08002954 	.word	0x08002954
 8002150:	08002914 	.word	0x08002914

08002154 <__swsetup_r>:
 8002154:	4b32      	ldr	r3, [pc, #200]	; (8002220 <__swsetup_r+0xcc>)
 8002156:	b570      	push	{r4, r5, r6, lr}
 8002158:	681d      	ldr	r5, [r3, #0]
 800215a:	4606      	mov	r6, r0
 800215c:	460c      	mov	r4, r1
 800215e:	b125      	cbz	r5, 800216a <__swsetup_r+0x16>
 8002160:	69ab      	ldr	r3, [r5, #24]
 8002162:	b913      	cbnz	r3, 800216a <__swsetup_r+0x16>
 8002164:	4628      	mov	r0, r5
 8002166:	f000 f953 	bl	8002410 <__sinit>
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <__swsetup_r+0xd0>)
 800216c:	429c      	cmp	r4, r3
 800216e:	d10f      	bne.n	8002190 <__swsetup_r+0x3c>
 8002170:	686c      	ldr	r4, [r5, #4]
 8002172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002176:	b29a      	uxth	r2, r3
 8002178:	0715      	lsls	r5, r2, #28
 800217a:	d42c      	bmi.n	80021d6 <__swsetup_r+0x82>
 800217c:	06d0      	lsls	r0, r2, #27
 800217e:	d411      	bmi.n	80021a4 <__swsetup_r+0x50>
 8002180:	2209      	movs	r2, #9
 8002182:	6032      	str	r2, [r6, #0]
 8002184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002188:	81a3      	strh	r3, [r4, #12]
 800218a:	f04f 30ff 	mov.w	r0, #4294967295
 800218e:	e03e      	b.n	800220e <__swsetup_r+0xba>
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <__swsetup_r+0xd4>)
 8002192:	429c      	cmp	r4, r3
 8002194:	d101      	bne.n	800219a <__swsetup_r+0x46>
 8002196:	68ac      	ldr	r4, [r5, #8]
 8002198:	e7eb      	b.n	8002172 <__swsetup_r+0x1e>
 800219a:	4b24      	ldr	r3, [pc, #144]	; (800222c <__swsetup_r+0xd8>)
 800219c:	429c      	cmp	r4, r3
 800219e:	bf08      	it	eq
 80021a0:	68ec      	ldreq	r4, [r5, #12]
 80021a2:	e7e6      	b.n	8002172 <__swsetup_r+0x1e>
 80021a4:	0751      	lsls	r1, r2, #29
 80021a6:	d512      	bpl.n	80021ce <__swsetup_r+0x7a>
 80021a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021aa:	b141      	cbz	r1, 80021be <__swsetup_r+0x6a>
 80021ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021b0:	4299      	cmp	r1, r3
 80021b2:	d002      	beq.n	80021ba <__swsetup_r+0x66>
 80021b4:	4630      	mov	r0, r6
 80021b6:	f000 fa19 	bl	80025ec <_free_r>
 80021ba:	2300      	movs	r3, #0
 80021bc:	6363      	str	r3, [r4, #52]	; 0x34
 80021be:	89a3      	ldrh	r3, [r4, #12]
 80021c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80021c4:	81a3      	strh	r3, [r4, #12]
 80021c6:	2300      	movs	r3, #0
 80021c8:	6063      	str	r3, [r4, #4]
 80021ca:	6923      	ldr	r3, [r4, #16]
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	89a3      	ldrh	r3, [r4, #12]
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	81a3      	strh	r3, [r4, #12]
 80021d6:	6923      	ldr	r3, [r4, #16]
 80021d8:	b94b      	cbnz	r3, 80021ee <__swsetup_r+0x9a>
 80021da:	89a3      	ldrh	r3, [r4, #12]
 80021dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e4:	d003      	beq.n	80021ee <__swsetup_r+0x9a>
 80021e6:	4621      	mov	r1, r4
 80021e8:	4630      	mov	r0, r6
 80021ea:	f000 f9bf 	bl	800256c <__smakebuf_r>
 80021ee:	89a2      	ldrh	r2, [r4, #12]
 80021f0:	f012 0301 	ands.w	r3, r2, #1
 80021f4:	d00c      	beq.n	8002210 <__swsetup_r+0xbc>
 80021f6:	2300      	movs	r3, #0
 80021f8:	60a3      	str	r3, [r4, #8]
 80021fa:	6963      	ldr	r3, [r4, #20]
 80021fc:	425b      	negs	r3, r3
 80021fe:	61a3      	str	r3, [r4, #24]
 8002200:	6923      	ldr	r3, [r4, #16]
 8002202:	b953      	cbnz	r3, 800221a <__swsetup_r+0xc6>
 8002204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002208:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800220c:	d1ba      	bne.n	8002184 <__swsetup_r+0x30>
 800220e:	bd70      	pop	{r4, r5, r6, pc}
 8002210:	0792      	lsls	r2, r2, #30
 8002212:	bf58      	it	pl
 8002214:	6963      	ldrpl	r3, [r4, #20]
 8002216:	60a3      	str	r3, [r4, #8]
 8002218:	e7f2      	b.n	8002200 <__swsetup_r+0xac>
 800221a:	2000      	movs	r0, #0
 800221c:	e7f7      	b.n	800220e <__swsetup_r+0xba>
 800221e:	bf00      	nop
 8002220:	2000000c 	.word	0x2000000c
 8002224:	08002934 	.word	0x08002934
 8002228:	08002954 	.word	0x08002954
 800222c:	08002914 	.word	0x08002914

08002230 <__sflush_r>:
 8002230:	898a      	ldrh	r2, [r1, #12]
 8002232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002236:	4605      	mov	r5, r0
 8002238:	0710      	lsls	r0, r2, #28
 800223a:	460c      	mov	r4, r1
 800223c:	d458      	bmi.n	80022f0 <__sflush_r+0xc0>
 800223e:	684b      	ldr	r3, [r1, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	dc05      	bgt.n	8002250 <__sflush_r+0x20>
 8002244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	dc02      	bgt.n	8002250 <__sflush_r+0x20>
 800224a:	2000      	movs	r0, #0
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002252:	2e00      	cmp	r6, #0
 8002254:	d0f9      	beq.n	800224a <__sflush_r+0x1a>
 8002256:	2300      	movs	r3, #0
 8002258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800225c:	682f      	ldr	r7, [r5, #0]
 800225e:	6a21      	ldr	r1, [r4, #32]
 8002260:	602b      	str	r3, [r5, #0]
 8002262:	d032      	beq.n	80022ca <__sflush_r+0x9a>
 8002264:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	075a      	lsls	r2, r3, #29
 800226a:	d505      	bpl.n	8002278 <__sflush_r+0x48>
 800226c:	6863      	ldr	r3, [r4, #4]
 800226e:	1ac0      	subs	r0, r0, r3
 8002270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002272:	b10b      	cbz	r3, 8002278 <__sflush_r+0x48>
 8002274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002276:	1ac0      	subs	r0, r0, r3
 8002278:	2300      	movs	r3, #0
 800227a:	4602      	mov	r2, r0
 800227c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800227e:	6a21      	ldr	r1, [r4, #32]
 8002280:	4628      	mov	r0, r5
 8002282:	47b0      	blx	r6
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	89a3      	ldrh	r3, [r4, #12]
 8002288:	d106      	bne.n	8002298 <__sflush_r+0x68>
 800228a:	6829      	ldr	r1, [r5, #0]
 800228c:	291d      	cmp	r1, #29
 800228e:	d848      	bhi.n	8002322 <__sflush_r+0xf2>
 8002290:	4a29      	ldr	r2, [pc, #164]	; (8002338 <__sflush_r+0x108>)
 8002292:	40ca      	lsrs	r2, r1
 8002294:	07d6      	lsls	r6, r2, #31
 8002296:	d544      	bpl.n	8002322 <__sflush_r+0xf2>
 8002298:	2200      	movs	r2, #0
 800229a:	6062      	str	r2, [r4, #4]
 800229c:	6922      	ldr	r2, [r4, #16]
 800229e:	04d9      	lsls	r1, r3, #19
 80022a0:	6022      	str	r2, [r4, #0]
 80022a2:	d504      	bpl.n	80022ae <__sflush_r+0x7e>
 80022a4:	1c42      	adds	r2, r0, #1
 80022a6:	d101      	bne.n	80022ac <__sflush_r+0x7c>
 80022a8:	682b      	ldr	r3, [r5, #0]
 80022aa:	b903      	cbnz	r3, 80022ae <__sflush_r+0x7e>
 80022ac:	6560      	str	r0, [r4, #84]	; 0x54
 80022ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022b0:	602f      	str	r7, [r5, #0]
 80022b2:	2900      	cmp	r1, #0
 80022b4:	d0c9      	beq.n	800224a <__sflush_r+0x1a>
 80022b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022ba:	4299      	cmp	r1, r3
 80022bc:	d002      	beq.n	80022c4 <__sflush_r+0x94>
 80022be:	4628      	mov	r0, r5
 80022c0:	f000 f994 	bl	80025ec <_free_r>
 80022c4:	2000      	movs	r0, #0
 80022c6:	6360      	str	r0, [r4, #52]	; 0x34
 80022c8:	e7c0      	b.n	800224c <__sflush_r+0x1c>
 80022ca:	2301      	movs	r3, #1
 80022cc:	4628      	mov	r0, r5
 80022ce:	47b0      	blx	r6
 80022d0:	1c41      	adds	r1, r0, #1
 80022d2:	d1c8      	bne.n	8002266 <__sflush_r+0x36>
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0c5      	beq.n	8002266 <__sflush_r+0x36>
 80022da:	2b1d      	cmp	r3, #29
 80022dc:	d001      	beq.n	80022e2 <__sflush_r+0xb2>
 80022de:	2b16      	cmp	r3, #22
 80022e0:	d101      	bne.n	80022e6 <__sflush_r+0xb6>
 80022e2:	602f      	str	r7, [r5, #0]
 80022e4:	e7b1      	b.n	800224a <__sflush_r+0x1a>
 80022e6:	89a3      	ldrh	r3, [r4, #12]
 80022e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ec:	81a3      	strh	r3, [r4, #12]
 80022ee:	e7ad      	b.n	800224c <__sflush_r+0x1c>
 80022f0:	690f      	ldr	r7, [r1, #16]
 80022f2:	2f00      	cmp	r7, #0
 80022f4:	d0a9      	beq.n	800224a <__sflush_r+0x1a>
 80022f6:	0793      	lsls	r3, r2, #30
 80022f8:	bf18      	it	ne
 80022fa:	2300      	movne	r3, #0
 80022fc:	680e      	ldr	r6, [r1, #0]
 80022fe:	bf08      	it	eq
 8002300:	694b      	ldreq	r3, [r1, #20]
 8002302:	eba6 0807 	sub.w	r8, r6, r7
 8002306:	600f      	str	r7, [r1, #0]
 8002308:	608b      	str	r3, [r1, #8]
 800230a:	f1b8 0f00 	cmp.w	r8, #0
 800230e:	dd9c      	ble.n	800224a <__sflush_r+0x1a>
 8002310:	4643      	mov	r3, r8
 8002312:	463a      	mov	r2, r7
 8002314:	6a21      	ldr	r1, [r4, #32]
 8002316:	4628      	mov	r0, r5
 8002318:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800231a:	47b0      	blx	r6
 800231c:	2800      	cmp	r0, #0
 800231e:	dc06      	bgt.n	800232e <__sflush_r+0xfe>
 8002320:	89a3      	ldrh	r3, [r4, #12]
 8002322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002326:	81a3      	strh	r3, [r4, #12]
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	e78e      	b.n	800224c <__sflush_r+0x1c>
 800232e:	4407      	add	r7, r0
 8002330:	eba8 0800 	sub.w	r8, r8, r0
 8002334:	e7e9      	b.n	800230a <__sflush_r+0xda>
 8002336:	bf00      	nop
 8002338:	20400001 	.word	0x20400001

0800233c <_fflush_r>:
 800233c:	b538      	push	{r3, r4, r5, lr}
 800233e:	690b      	ldr	r3, [r1, #16]
 8002340:	4605      	mov	r5, r0
 8002342:	460c      	mov	r4, r1
 8002344:	b1db      	cbz	r3, 800237e <_fflush_r+0x42>
 8002346:	b118      	cbz	r0, 8002350 <_fflush_r+0x14>
 8002348:	6983      	ldr	r3, [r0, #24]
 800234a:	b90b      	cbnz	r3, 8002350 <_fflush_r+0x14>
 800234c:	f000 f860 	bl	8002410 <__sinit>
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <_fflush_r+0x48>)
 8002352:	429c      	cmp	r4, r3
 8002354:	d109      	bne.n	800236a <_fflush_r+0x2e>
 8002356:	686c      	ldr	r4, [r5, #4]
 8002358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800235c:	b17b      	cbz	r3, 800237e <_fflush_r+0x42>
 800235e:	4621      	mov	r1, r4
 8002360:	4628      	mov	r0, r5
 8002362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002366:	f7ff bf63 	b.w	8002230 <__sflush_r>
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <_fflush_r+0x4c>)
 800236c:	429c      	cmp	r4, r3
 800236e:	d101      	bne.n	8002374 <_fflush_r+0x38>
 8002370:	68ac      	ldr	r4, [r5, #8]
 8002372:	e7f1      	b.n	8002358 <_fflush_r+0x1c>
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <_fflush_r+0x50>)
 8002376:	429c      	cmp	r4, r3
 8002378:	bf08      	it	eq
 800237a:	68ec      	ldreq	r4, [r5, #12]
 800237c:	e7ec      	b.n	8002358 <_fflush_r+0x1c>
 800237e:	2000      	movs	r0, #0
 8002380:	bd38      	pop	{r3, r4, r5, pc}
 8002382:	bf00      	nop
 8002384:	08002934 	.word	0x08002934
 8002388:	08002954 	.word	0x08002954
 800238c:	08002914 	.word	0x08002914

08002390 <std>:
 8002390:	2300      	movs	r3, #0
 8002392:	b510      	push	{r4, lr}
 8002394:	4604      	mov	r4, r0
 8002396:	e9c0 3300 	strd	r3, r3, [r0]
 800239a:	6083      	str	r3, [r0, #8]
 800239c:	8181      	strh	r1, [r0, #12]
 800239e:	6643      	str	r3, [r0, #100]	; 0x64
 80023a0:	81c2      	strh	r2, [r0, #14]
 80023a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023a6:	6183      	str	r3, [r0, #24]
 80023a8:	4619      	mov	r1, r3
 80023aa:	2208      	movs	r2, #8
 80023ac:	305c      	adds	r0, #92	; 0x5c
 80023ae:	f7ff fe13 	bl	8001fd8 <memset>
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <std+0x38>)
 80023b4:	6224      	str	r4, [r4, #32]
 80023b6:	6263      	str	r3, [r4, #36]	; 0x24
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <std+0x3c>)
 80023ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <std+0x40>)
 80023be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <std+0x44>)
 80023c2:	6323      	str	r3, [r4, #48]	; 0x30
 80023c4:	bd10      	pop	{r4, pc}
 80023c6:	bf00      	nop
 80023c8:	08002759 	.word	0x08002759
 80023cc:	0800277b 	.word	0x0800277b
 80023d0:	080027b3 	.word	0x080027b3
 80023d4:	080027d7 	.word	0x080027d7

080023d8 <_cleanup_r>:
 80023d8:	4901      	ldr	r1, [pc, #4]	; (80023e0 <_cleanup_r+0x8>)
 80023da:	f000 b885 	b.w	80024e8 <_fwalk_reent>
 80023de:	bf00      	nop
 80023e0:	0800233d 	.word	0x0800233d

080023e4 <__sfmoreglue>:
 80023e4:	b570      	push	{r4, r5, r6, lr}
 80023e6:	2568      	movs	r5, #104	; 0x68
 80023e8:	1e4a      	subs	r2, r1, #1
 80023ea:	4355      	muls	r5, r2
 80023ec:	460e      	mov	r6, r1
 80023ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80023f2:	f000 f947 	bl	8002684 <_malloc_r>
 80023f6:	4604      	mov	r4, r0
 80023f8:	b140      	cbz	r0, 800240c <__sfmoreglue+0x28>
 80023fa:	2100      	movs	r1, #0
 80023fc:	e9c0 1600 	strd	r1, r6, [r0]
 8002400:	300c      	adds	r0, #12
 8002402:	60a0      	str	r0, [r4, #8]
 8002404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002408:	f7ff fde6 	bl	8001fd8 <memset>
 800240c:	4620      	mov	r0, r4
 800240e:	bd70      	pop	{r4, r5, r6, pc}

08002410 <__sinit>:
 8002410:	6983      	ldr	r3, [r0, #24]
 8002412:	b510      	push	{r4, lr}
 8002414:	4604      	mov	r4, r0
 8002416:	bb33      	cbnz	r3, 8002466 <__sinit+0x56>
 8002418:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800241c:	6503      	str	r3, [r0, #80]	; 0x50
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <__sinit+0x58>)
 8002420:	4a12      	ldr	r2, [pc, #72]	; (800246c <__sinit+0x5c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6282      	str	r2, [r0, #40]	; 0x28
 8002426:	4298      	cmp	r0, r3
 8002428:	bf04      	itt	eq
 800242a:	2301      	moveq	r3, #1
 800242c:	6183      	streq	r3, [r0, #24]
 800242e:	f000 f81f 	bl	8002470 <__sfp>
 8002432:	6060      	str	r0, [r4, #4]
 8002434:	4620      	mov	r0, r4
 8002436:	f000 f81b 	bl	8002470 <__sfp>
 800243a:	60a0      	str	r0, [r4, #8]
 800243c:	4620      	mov	r0, r4
 800243e:	f000 f817 	bl	8002470 <__sfp>
 8002442:	2200      	movs	r2, #0
 8002444:	60e0      	str	r0, [r4, #12]
 8002446:	2104      	movs	r1, #4
 8002448:	6860      	ldr	r0, [r4, #4]
 800244a:	f7ff ffa1 	bl	8002390 <std>
 800244e:	2201      	movs	r2, #1
 8002450:	2109      	movs	r1, #9
 8002452:	68a0      	ldr	r0, [r4, #8]
 8002454:	f7ff ff9c 	bl	8002390 <std>
 8002458:	2202      	movs	r2, #2
 800245a:	2112      	movs	r1, #18
 800245c:	68e0      	ldr	r0, [r4, #12]
 800245e:	f7ff ff97 	bl	8002390 <std>
 8002462:	2301      	movs	r3, #1
 8002464:	61a3      	str	r3, [r4, #24]
 8002466:	bd10      	pop	{r4, pc}
 8002468:	08002910 	.word	0x08002910
 800246c:	080023d9 	.word	0x080023d9

08002470 <__sfp>:
 8002470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002472:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <__sfp+0x70>)
 8002474:	4607      	mov	r7, r0
 8002476:	681e      	ldr	r6, [r3, #0]
 8002478:	69b3      	ldr	r3, [r6, #24]
 800247a:	b913      	cbnz	r3, 8002482 <__sfp+0x12>
 800247c:	4630      	mov	r0, r6
 800247e:	f7ff ffc7 	bl	8002410 <__sinit>
 8002482:	3648      	adds	r6, #72	; 0x48
 8002484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002488:	3b01      	subs	r3, #1
 800248a:	d503      	bpl.n	8002494 <__sfp+0x24>
 800248c:	6833      	ldr	r3, [r6, #0]
 800248e:	b133      	cbz	r3, 800249e <__sfp+0x2e>
 8002490:	6836      	ldr	r6, [r6, #0]
 8002492:	e7f7      	b.n	8002484 <__sfp+0x14>
 8002494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002498:	b16d      	cbz	r5, 80024b6 <__sfp+0x46>
 800249a:	3468      	adds	r4, #104	; 0x68
 800249c:	e7f4      	b.n	8002488 <__sfp+0x18>
 800249e:	2104      	movs	r1, #4
 80024a0:	4638      	mov	r0, r7
 80024a2:	f7ff ff9f 	bl	80023e4 <__sfmoreglue>
 80024a6:	6030      	str	r0, [r6, #0]
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d1f1      	bne.n	8002490 <__sfp+0x20>
 80024ac:	230c      	movs	r3, #12
 80024ae:	4604      	mov	r4, r0
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4620      	mov	r0, r4
 80024b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <__sfp+0x74>)
 80024b8:	6665      	str	r5, [r4, #100]	; 0x64
 80024ba:	e9c4 5500 	strd	r5, r5, [r4]
 80024be:	60a5      	str	r5, [r4, #8]
 80024c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80024c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80024c8:	2208      	movs	r2, #8
 80024ca:	4629      	mov	r1, r5
 80024cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80024d0:	f7ff fd82 	bl	8001fd8 <memset>
 80024d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80024d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80024dc:	e7e9      	b.n	80024b2 <__sfp+0x42>
 80024de:	bf00      	nop
 80024e0:	08002910 	.word	0x08002910
 80024e4:	ffff0001 	.word	0xffff0001

080024e8 <_fwalk_reent>:
 80024e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024ec:	4680      	mov	r8, r0
 80024ee:	4689      	mov	r9, r1
 80024f0:	2600      	movs	r6, #0
 80024f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80024f6:	b914      	cbnz	r4, 80024fe <_fwalk_reent+0x16>
 80024f8:	4630      	mov	r0, r6
 80024fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002502:	3f01      	subs	r7, #1
 8002504:	d501      	bpl.n	800250a <_fwalk_reent+0x22>
 8002506:	6824      	ldr	r4, [r4, #0]
 8002508:	e7f5      	b.n	80024f6 <_fwalk_reent+0xe>
 800250a:	89ab      	ldrh	r3, [r5, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d907      	bls.n	8002520 <_fwalk_reent+0x38>
 8002510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002514:	3301      	adds	r3, #1
 8002516:	d003      	beq.n	8002520 <_fwalk_reent+0x38>
 8002518:	4629      	mov	r1, r5
 800251a:	4640      	mov	r0, r8
 800251c:	47c8      	blx	r9
 800251e:	4306      	orrs	r6, r0
 8002520:	3568      	adds	r5, #104	; 0x68
 8002522:	e7ee      	b.n	8002502 <_fwalk_reent+0x1a>

08002524 <__swhatbuf_r>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	460e      	mov	r6, r1
 8002528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800252c:	b096      	sub	sp, #88	; 0x58
 800252e:	2900      	cmp	r1, #0
 8002530:	4614      	mov	r4, r2
 8002532:	461d      	mov	r5, r3
 8002534:	da07      	bge.n	8002546 <__swhatbuf_r+0x22>
 8002536:	2300      	movs	r3, #0
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	89b3      	ldrh	r3, [r6, #12]
 800253c:	061a      	lsls	r2, r3, #24
 800253e:	d410      	bmi.n	8002562 <__swhatbuf_r+0x3e>
 8002540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002544:	e00e      	b.n	8002564 <__swhatbuf_r+0x40>
 8002546:	466a      	mov	r2, sp
 8002548:	f000 f96c 	bl	8002824 <_fstat_r>
 800254c:	2800      	cmp	r0, #0
 800254e:	dbf2      	blt.n	8002536 <__swhatbuf_r+0x12>
 8002550:	9a01      	ldr	r2, [sp, #4]
 8002552:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002556:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800255a:	425a      	negs	r2, r3
 800255c:	415a      	adcs	r2, r3
 800255e:	602a      	str	r2, [r5, #0]
 8002560:	e7ee      	b.n	8002540 <__swhatbuf_r+0x1c>
 8002562:	2340      	movs	r3, #64	; 0x40
 8002564:	2000      	movs	r0, #0
 8002566:	6023      	str	r3, [r4, #0]
 8002568:	b016      	add	sp, #88	; 0x58
 800256a:	bd70      	pop	{r4, r5, r6, pc}

0800256c <__smakebuf_r>:
 800256c:	898b      	ldrh	r3, [r1, #12]
 800256e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002570:	079d      	lsls	r5, r3, #30
 8002572:	4606      	mov	r6, r0
 8002574:	460c      	mov	r4, r1
 8002576:	d507      	bpl.n	8002588 <__smakebuf_r+0x1c>
 8002578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800257c:	6023      	str	r3, [r4, #0]
 800257e:	6123      	str	r3, [r4, #16]
 8002580:	2301      	movs	r3, #1
 8002582:	6163      	str	r3, [r4, #20]
 8002584:	b002      	add	sp, #8
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	ab01      	add	r3, sp, #4
 800258a:	466a      	mov	r2, sp
 800258c:	f7ff ffca 	bl	8002524 <__swhatbuf_r>
 8002590:	9900      	ldr	r1, [sp, #0]
 8002592:	4605      	mov	r5, r0
 8002594:	4630      	mov	r0, r6
 8002596:	f000 f875 	bl	8002684 <_malloc_r>
 800259a:	b948      	cbnz	r0, 80025b0 <__smakebuf_r+0x44>
 800259c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025a0:	059a      	lsls	r2, r3, #22
 80025a2:	d4ef      	bmi.n	8002584 <__smakebuf_r+0x18>
 80025a4:	f023 0303 	bic.w	r3, r3, #3
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	81a3      	strh	r3, [r4, #12]
 80025ae:	e7e3      	b.n	8002578 <__smakebuf_r+0xc>
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <__smakebuf_r+0x7c>)
 80025b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80025b4:	89a3      	ldrh	r3, [r4, #12]
 80025b6:	6020      	str	r0, [r4, #0]
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	81a3      	strh	r3, [r4, #12]
 80025be:	9b00      	ldr	r3, [sp, #0]
 80025c0:	6120      	str	r0, [r4, #16]
 80025c2:	6163      	str	r3, [r4, #20]
 80025c4:	9b01      	ldr	r3, [sp, #4]
 80025c6:	b15b      	cbz	r3, 80025e0 <__smakebuf_r+0x74>
 80025c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025cc:	4630      	mov	r0, r6
 80025ce:	f000 f93b 	bl	8002848 <_isatty_r>
 80025d2:	b128      	cbz	r0, 80025e0 <__smakebuf_r+0x74>
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	81a3      	strh	r3, [r4, #12]
 80025e0:	89a3      	ldrh	r3, [r4, #12]
 80025e2:	431d      	orrs	r5, r3
 80025e4:	81a5      	strh	r5, [r4, #12]
 80025e6:	e7cd      	b.n	8002584 <__smakebuf_r+0x18>
 80025e8:	080023d9 	.word	0x080023d9

080025ec <_free_r>:
 80025ec:	b538      	push	{r3, r4, r5, lr}
 80025ee:	4605      	mov	r5, r0
 80025f0:	2900      	cmp	r1, #0
 80025f2:	d043      	beq.n	800267c <_free_r+0x90>
 80025f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025f8:	1f0c      	subs	r4, r1, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bfb8      	it	lt
 80025fe:	18e4      	addlt	r4, r4, r3
 8002600:	f000 f944 	bl	800288c <__malloc_lock>
 8002604:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <_free_r+0x94>)
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	4610      	mov	r0, r2
 800260a:	b933      	cbnz	r3, 800261a <_free_r+0x2e>
 800260c:	6063      	str	r3, [r4, #4]
 800260e:	6014      	str	r4, [r2, #0]
 8002610:	4628      	mov	r0, r5
 8002612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002616:	f000 b93a 	b.w	800288e <__malloc_unlock>
 800261a:	42a3      	cmp	r3, r4
 800261c:	d90b      	bls.n	8002636 <_free_r+0x4a>
 800261e:	6821      	ldr	r1, [r4, #0]
 8002620:	1862      	adds	r2, r4, r1
 8002622:	4293      	cmp	r3, r2
 8002624:	bf01      	itttt	eq
 8002626:	681a      	ldreq	r2, [r3, #0]
 8002628:	685b      	ldreq	r3, [r3, #4]
 800262a:	1852      	addeq	r2, r2, r1
 800262c:	6022      	streq	r2, [r4, #0]
 800262e:	6063      	str	r3, [r4, #4]
 8002630:	6004      	str	r4, [r0, #0]
 8002632:	e7ed      	b.n	8002610 <_free_r+0x24>
 8002634:	4613      	mov	r3, r2
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	b10a      	cbz	r2, 800263e <_free_r+0x52>
 800263a:	42a2      	cmp	r2, r4
 800263c:	d9fa      	bls.n	8002634 <_free_r+0x48>
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	1858      	adds	r0, r3, r1
 8002642:	42a0      	cmp	r0, r4
 8002644:	d10b      	bne.n	800265e <_free_r+0x72>
 8002646:	6820      	ldr	r0, [r4, #0]
 8002648:	4401      	add	r1, r0
 800264a:	1858      	adds	r0, r3, r1
 800264c:	4282      	cmp	r2, r0
 800264e:	6019      	str	r1, [r3, #0]
 8002650:	d1de      	bne.n	8002610 <_free_r+0x24>
 8002652:	6810      	ldr	r0, [r2, #0]
 8002654:	6852      	ldr	r2, [r2, #4]
 8002656:	4401      	add	r1, r0
 8002658:	6019      	str	r1, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	e7d8      	b.n	8002610 <_free_r+0x24>
 800265e:	d902      	bls.n	8002666 <_free_r+0x7a>
 8002660:	230c      	movs	r3, #12
 8002662:	602b      	str	r3, [r5, #0]
 8002664:	e7d4      	b.n	8002610 <_free_r+0x24>
 8002666:	6820      	ldr	r0, [r4, #0]
 8002668:	1821      	adds	r1, r4, r0
 800266a:	428a      	cmp	r2, r1
 800266c:	bf01      	itttt	eq
 800266e:	6811      	ldreq	r1, [r2, #0]
 8002670:	6852      	ldreq	r2, [r2, #4]
 8002672:	1809      	addeq	r1, r1, r0
 8002674:	6021      	streq	r1, [r4, #0]
 8002676:	6062      	str	r2, [r4, #4]
 8002678:	605c      	str	r4, [r3, #4]
 800267a:	e7c9      	b.n	8002610 <_free_r+0x24>
 800267c:	bd38      	pop	{r3, r4, r5, pc}
 800267e:	bf00      	nop
 8002680:	20000090 	.word	0x20000090

08002684 <_malloc_r>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	1ccd      	adds	r5, r1, #3
 8002688:	f025 0503 	bic.w	r5, r5, #3
 800268c:	3508      	adds	r5, #8
 800268e:	2d0c      	cmp	r5, #12
 8002690:	bf38      	it	cc
 8002692:	250c      	movcc	r5, #12
 8002694:	2d00      	cmp	r5, #0
 8002696:	4606      	mov	r6, r0
 8002698:	db01      	blt.n	800269e <_malloc_r+0x1a>
 800269a:	42a9      	cmp	r1, r5
 800269c:	d903      	bls.n	80026a6 <_malloc_r+0x22>
 800269e:	230c      	movs	r3, #12
 80026a0:	6033      	str	r3, [r6, #0]
 80026a2:	2000      	movs	r0, #0
 80026a4:	bd70      	pop	{r4, r5, r6, pc}
 80026a6:	f000 f8f1 	bl	800288c <__malloc_lock>
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <_malloc_r+0xac>)
 80026ac:	6814      	ldr	r4, [r2, #0]
 80026ae:	4621      	mov	r1, r4
 80026b0:	b991      	cbnz	r1, 80026d8 <_malloc_r+0x54>
 80026b2:	4c20      	ldr	r4, [pc, #128]	; (8002734 <_malloc_r+0xb0>)
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	b91b      	cbnz	r3, 80026c0 <_malloc_r+0x3c>
 80026b8:	4630      	mov	r0, r6
 80026ba:	f000 f83d 	bl	8002738 <_sbrk_r>
 80026be:	6020      	str	r0, [r4, #0]
 80026c0:	4629      	mov	r1, r5
 80026c2:	4630      	mov	r0, r6
 80026c4:	f000 f838 	bl	8002738 <_sbrk_r>
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	d124      	bne.n	8002716 <_malloc_r+0x92>
 80026cc:	230c      	movs	r3, #12
 80026ce:	4630      	mov	r0, r6
 80026d0:	6033      	str	r3, [r6, #0]
 80026d2:	f000 f8dc 	bl	800288e <__malloc_unlock>
 80026d6:	e7e4      	b.n	80026a2 <_malloc_r+0x1e>
 80026d8:	680b      	ldr	r3, [r1, #0]
 80026da:	1b5b      	subs	r3, r3, r5
 80026dc:	d418      	bmi.n	8002710 <_malloc_r+0x8c>
 80026de:	2b0b      	cmp	r3, #11
 80026e0:	d90f      	bls.n	8002702 <_malloc_r+0x7e>
 80026e2:	600b      	str	r3, [r1, #0]
 80026e4:	18cc      	adds	r4, r1, r3
 80026e6:	50cd      	str	r5, [r1, r3]
 80026e8:	4630      	mov	r0, r6
 80026ea:	f000 f8d0 	bl	800288e <__malloc_unlock>
 80026ee:	f104 000b 	add.w	r0, r4, #11
 80026f2:	1d23      	adds	r3, r4, #4
 80026f4:	f020 0007 	bic.w	r0, r0, #7
 80026f8:	1ac3      	subs	r3, r0, r3
 80026fa:	d0d3      	beq.n	80026a4 <_malloc_r+0x20>
 80026fc:	425a      	negs	r2, r3
 80026fe:	50e2      	str	r2, [r4, r3]
 8002700:	e7d0      	b.n	80026a4 <_malloc_r+0x20>
 8002702:	684b      	ldr	r3, [r1, #4]
 8002704:	428c      	cmp	r4, r1
 8002706:	bf16      	itet	ne
 8002708:	6063      	strne	r3, [r4, #4]
 800270a:	6013      	streq	r3, [r2, #0]
 800270c:	460c      	movne	r4, r1
 800270e:	e7eb      	b.n	80026e8 <_malloc_r+0x64>
 8002710:	460c      	mov	r4, r1
 8002712:	6849      	ldr	r1, [r1, #4]
 8002714:	e7cc      	b.n	80026b0 <_malloc_r+0x2c>
 8002716:	1cc4      	adds	r4, r0, #3
 8002718:	f024 0403 	bic.w	r4, r4, #3
 800271c:	42a0      	cmp	r0, r4
 800271e:	d005      	beq.n	800272c <_malloc_r+0xa8>
 8002720:	1a21      	subs	r1, r4, r0
 8002722:	4630      	mov	r0, r6
 8002724:	f000 f808 	bl	8002738 <_sbrk_r>
 8002728:	3001      	adds	r0, #1
 800272a:	d0cf      	beq.n	80026cc <_malloc_r+0x48>
 800272c:	6025      	str	r5, [r4, #0]
 800272e:	e7db      	b.n	80026e8 <_malloc_r+0x64>
 8002730:	20000090 	.word	0x20000090
 8002734:	20000094 	.word	0x20000094

08002738 <_sbrk_r>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	2300      	movs	r3, #0
 800273c:	4c05      	ldr	r4, [pc, #20]	; (8002754 <_sbrk_r+0x1c>)
 800273e:	4605      	mov	r5, r0
 8002740:	4608      	mov	r0, r1
 8002742:	6023      	str	r3, [r4, #0]
 8002744:	f7fd ff66 	bl	8000614 <_sbrk>
 8002748:	1c43      	adds	r3, r0, #1
 800274a:	d102      	bne.n	8002752 <_sbrk_r+0x1a>
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	b103      	cbz	r3, 8002752 <_sbrk_r+0x1a>
 8002750:	602b      	str	r3, [r5, #0]
 8002752:	bd38      	pop	{r3, r4, r5, pc}
 8002754:	20000174 	.word	0x20000174

08002758 <__sread>:
 8002758:	b510      	push	{r4, lr}
 800275a:	460c      	mov	r4, r1
 800275c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002760:	f000 f896 	bl	8002890 <_read_r>
 8002764:	2800      	cmp	r0, #0
 8002766:	bfab      	itete	ge
 8002768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800276a:	89a3      	ldrhlt	r3, [r4, #12]
 800276c:	181b      	addge	r3, r3, r0
 800276e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002772:	bfac      	ite	ge
 8002774:	6563      	strge	r3, [r4, #84]	; 0x54
 8002776:	81a3      	strhlt	r3, [r4, #12]
 8002778:	bd10      	pop	{r4, pc}

0800277a <__swrite>:
 800277a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800277e:	461f      	mov	r7, r3
 8002780:	898b      	ldrh	r3, [r1, #12]
 8002782:	4605      	mov	r5, r0
 8002784:	05db      	lsls	r3, r3, #23
 8002786:	460c      	mov	r4, r1
 8002788:	4616      	mov	r6, r2
 800278a:	d505      	bpl.n	8002798 <__swrite+0x1e>
 800278c:	2302      	movs	r3, #2
 800278e:	2200      	movs	r2, #0
 8002790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002794:	f000 f868 	bl	8002868 <_lseek_r>
 8002798:	89a3      	ldrh	r3, [r4, #12]
 800279a:	4632      	mov	r2, r6
 800279c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027a0:	81a3      	strh	r3, [r4, #12]
 80027a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027a6:	463b      	mov	r3, r7
 80027a8:	4628      	mov	r0, r5
 80027aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027ae:	f000 b817 	b.w	80027e0 <_write_r>

080027b2 <__sseek>:
 80027b2:	b510      	push	{r4, lr}
 80027b4:	460c      	mov	r4, r1
 80027b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ba:	f000 f855 	bl	8002868 <_lseek_r>
 80027be:	1c43      	adds	r3, r0, #1
 80027c0:	89a3      	ldrh	r3, [r4, #12]
 80027c2:	bf15      	itete	ne
 80027c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80027c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80027ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80027ce:	81a3      	strheq	r3, [r4, #12]
 80027d0:	bf18      	it	ne
 80027d2:	81a3      	strhne	r3, [r4, #12]
 80027d4:	bd10      	pop	{r4, pc}

080027d6 <__sclose>:
 80027d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027da:	f000 b813 	b.w	8002804 <_close_r>
	...

080027e0 <_write_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	4605      	mov	r5, r0
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	2200      	movs	r2, #0
 80027ea:	4c05      	ldr	r4, [pc, #20]	; (8002800 <_write_r+0x20>)
 80027ec:	6022      	str	r2, [r4, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f7fd fec3 	bl	800057a <_write>
 80027f4:	1c43      	adds	r3, r0, #1
 80027f6:	d102      	bne.n	80027fe <_write_r+0x1e>
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	b103      	cbz	r3, 80027fe <_write_r+0x1e>
 80027fc:	602b      	str	r3, [r5, #0]
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
 8002800:	20000174 	.word	0x20000174

08002804 <_close_r>:
 8002804:	b538      	push	{r3, r4, r5, lr}
 8002806:	2300      	movs	r3, #0
 8002808:	4c05      	ldr	r4, [pc, #20]	; (8002820 <_close_r+0x1c>)
 800280a:	4605      	mov	r5, r0
 800280c:	4608      	mov	r0, r1
 800280e:	6023      	str	r3, [r4, #0]
 8002810:	f7fd fecf 	bl	80005b2 <_close>
 8002814:	1c43      	adds	r3, r0, #1
 8002816:	d102      	bne.n	800281e <_close_r+0x1a>
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	b103      	cbz	r3, 800281e <_close_r+0x1a>
 800281c:	602b      	str	r3, [r5, #0]
 800281e:	bd38      	pop	{r3, r4, r5, pc}
 8002820:	20000174 	.word	0x20000174

08002824 <_fstat_r>:
 8002824:	b538      	push	{r3, r4, r5, lr}
 8002826:	2300      	movs	r3, #0
 8002828:	4c06      	ldr	r4, [pc, #24]	; (8002844 <_fstat_r+0x20>)
 800282a:	4605      	mov	r5, r0
 800282c:	4608      	mov	r0, r1
 800282e:	4611      	mov	r1, r2
 8002830:	6023      	str	r3, [r4, #0]
 8002832:	f7fd fec9 	bl	80005c8 <_fstat>
 8002836:	1c43      	adds	r3, r0, #1
 8002838:	d102      	bne.n	8002840 <_fstat_r+0x1c>
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	b103      	cbz	r3, 8002840 <_fstat_r+0x1c>
 800283e:	602b      	str	r3, [r5, #0]
 8002840:	bd38      	pop	{r3, r4, r5, pc}
 8002842:	bf00      	nop
 8002844:	20000174 	.word	0x20000174

08002848 <_isatty_r>:
 8002848:	b538      	push	{r3, r4, r5, lr}
 800284a:	2300      	movs	r3, #0
 800284c:	4c05      	ldr	r4, [pc, #20]	; (8002864 <_isatty_r+0x1c>)
 800284e:	4605      	mov	r5, r0
 8002850:	4608      	mov	r0, r1
 8002852:	6023      	str	r3, [r4, #0]
 8002854:	f7fd fec7 	bl	80005e6 <_isatty>
 8002858:	1c43      	adds	r3, r0, #1
 800285a:	d102      	bne.n	8002862 <_isatty_r+0x1a>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	b103      	cbz	r3, 8002862 <_isatty_r+0x1a>
 8002860:	602b      	str	r3, [r5, #0]
 8002862:	bd38      	pop	{r3, r4, r5, pc}
 8002864:	20000174 	.word	0x20000174

08002868 <_lseek_r>:
 8002868:	b538      	push	{r3, r4, r5, lr}
 800286a:	4605      	mov	r5, r0
 800286c:	4608      	mov	r0, r1
 800286e:	4611      	mov	r1, r2
 8002870:	2200      	movs	r2, #0
 8002872:	4c05      	ldr	r4, [pc, #20]	; (8002888 <_lseek_r+0x20>)
 8002874:	6022      	str	r2, [r4, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	f7fd febf 	bl	80005fa <_lseek>
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	d102      	bne.n	8002886 <_lseek_r+0x1e>
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	b103      	cbz	r3, 8002886 <_lseek_r+0x1e>
 8002884:	602b      	str	r3, [r5, #0]
 8002886:	bd38      	pop	{r3, r4, r5, pc}
 8002888:	20000174 	.word	0x20000174

0800288c <__malloc_lock>:
 800288c:	4770      	bx	lr

0800288e <__malloc_unlock>:
 800288e:	4770      	bx	lr

08002890 <_read_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	4605      	mov	r5, r0
 8002894:	4608      	mov	r0, r1
 8002896:	4611      	mov	r1, r2
 8002898:	2200      	movs	r2, #0
 800289a:	4c05      	ldr	r4, [pc, #20]	; (80028b0 <_read_r+0x20>)
 800289c:	6022      	str	r2, [r4, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	f7fd fe4e 	bl	8000540 <_read>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d102      	bne.n	80028ae <_read_r+0x1e>
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	b103      	cbz	r3, 80028ae <_read_r+0x1e>
 80028ac:	602b      	str	r3, [r5, #0]
 80028ae:	bd38      	pop	{r3, r4, r5, pc}
 80028b0:	20000174 	.word	0x20000174

080028b4 <_init>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	bf00      	nop
 80028b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ba:	bc08      	pop	{r3}
 80028bc:	469e      	mov	lr, r3
 80028be:	4770      	bx	lr

080028c0 <_fini>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr
