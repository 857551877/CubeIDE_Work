
choufeng.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007034  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  08007148  08007148  00017148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c50  08007c50  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007c50  08007c50  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c50  08007c50  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c50  08007c50  00017c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c54  08007c54  00017c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  200001e0  08007e38  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08007e38  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e114  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020e5  00000000  00000000  0002e31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00030408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d90  00000000  00000000  000312a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015b4f  00000000  00000000  00032030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b998  00000000  00000000  00047b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074661  00000000  00000000  00053517  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa4  00000000  00000000  000c7bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800712c 	.word	0x0800712c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800712c 	.word	0x0800712c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_GPIO_Init+0x58>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <MX_GPIO_Init+0x58>)
 8000c60:	f043 0320 	orr.w	r3, r3, #32
 8000c64:	6193      	str	r3, [r2, #24]
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_GPIO_Init+0x58>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 0320 	and.w	r3, r3, #32
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_GPIO_Init+0x58>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <MX_GPIO_Init+0x58>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_GPIO_Init+0x58>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_GPIO_Init+0x58>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	4a07      	ldr	r2, [pc, #28]	; (8000cac <MX_GPIO_Init+0x58>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6193      	str	r3, [r2, #24]
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <MX_GPIO_Init+0x58>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	40021000 	.word	0x40021000

08000cb0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <MX_I2C2_Init+0x58>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <MX_I2C2_Init+0x5c>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cc6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000cd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_I2C2_Init+0x54>)
 8000cf0:	f001 f816 	bl	8001d20 <HAL_I2C_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000cfa:	f000 f8c0 	bl	8000e7e <Error_Handler>
  }

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000208 	.word	0x20000208
 8000d08:	40005800 	.word	0x40005800
 8000d0c:	00061a80 	.word	0x00061a80

08000d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <HAL_I2C_MspInit+0x74>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d124      	bne.n	8000d7a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_I2C_MspInit+0x78>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <HAL_I2C_MspInit+0x78>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_I2C_MspInit+0x78>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4e:	2312      	movs	r3, #18
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <HAL_I2C_MspInit+0x7c>)
 8000d5e:	f000 fe85 	bl	8001a6c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_I2C_MspInit+0x78>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_I2C_MspInit+0x78>)
 8000d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_I2C_MspInit+0x78>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3720      	adds	r7, #32
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40005800 	.word	0x40005800
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 fd02 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f82c 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f7ff ff5a 	bl	8000c54 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000da0:	f000 fbba 	bl	8001518 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000da4:	f000 fc5e 	bl	8001664 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000da8:	f7ff ff82 	bl	8000cb0 <MX_I2C2_Init>
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  OLED_Init();
 8000dac:	f000 fa82 	bl	80012b4 <OLED_Init>
  {
	  //HAL_Delay(500);
	  //HAL_UART_Transmit(&huart1, ceshi	, sizeof(ceshi), 50);
	  //HAL_Delay(500);
	  //printf("%4.4f \n",f_ceshi);
	  OLED_ShowFlort(0, 0, 1.3412, 16);
 8000db0:	2310      	movs	r3, #16
 8000db2:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <main+0x54>)
 8000db4:	2100      	movs	r1, #0
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f99e 	bl	80010f8 <OLED_ShowFlort>
	  OLED_ShowFlort(0, 2, 0.212452, 16);
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <main+0x58>)
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 f998 	bl	80010f8 <OLED_ShowFlort>
	 //OLED_ShowFlort(0, 4, 311.135, 16);
	  OLED_ShowString(0, 4, ceshi, 16);
 8000dc8:	2310      	movs	r3, #16
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <main+0x5c>)
 8000dcc:	2104      	movs	r1, #4
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 f962 	bl	8001098 <OLED_ShowString>
	  OLED_ShowFlort(0, 6, 12.4221, 16);
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <main+0x60>)
 8000dd8:	2106      	movs	r1, #6
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f98c 	bl	80010f8 <OLED_ShowFlort>
	  OLED_ShowFlort(0, 0, 1.3412, 16);
 8000de0:	e7e6      	b.n	8000db0 <main+0x20>
 8000de2:	bf00      	nop
 8000de4:	3fabac71 	.word	0x3fabac71
 8000de8:	3e598d04 	.word	0x3e598d04
 8000dec:	20000000 	.word	0x20000000
 8000df0:	4146c0ec 	.word	0x4146c0ec

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	; 0x40
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	2228      	movs	r2, #40	; 0x28
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 fc4c 	bl	80036a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 fba1 	bl	8002584 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e48:	f000 f819 	bl	8000e7e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e50:	2302      	movs	r3, #2
 8000e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2102      	movs	r1, #2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 fe0c 	bl	8002a84 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e72:	f000 f804 	bl	8000e7e <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3740      	adds	r7, #64	; 0x40
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
	...

08000e8c <Write_IIC_Cmddat>:

extern I2C_HandleTypeDef hi2c1;
extern I2C_HandleTypeDef hi2c2;

void Write_IIC_Cmddat(unsigned char IIC_Data,unsigned char cmddat)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af04      	add	r7, sp, #16
 8000e92:	4603      	mov	r3, r0
 8000e94:	460a      	mov	r2, r1
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, oledaddress, cmddat, I2C_MEMADD_SIZE_8BIT, &IIC_Data, 1, 100);
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	2364      	movs	r3, #100	; 0x64
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2178      	movs	r1, #120	; 0x78
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <Write_IIC_Cmddat+0x34>)
 8000eb2:	f001 f85d 	bl	8001f70 <HAL_I2C_Mem_Write>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000208 	.word	0x20000208

08000ec4 <OLED_WR_Byte>:


void OLED_WR_Byte(unsigned char dat,unsigned char cmd)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460a      	mov	r2, r1
 8000ece:	71fb      	strb	r3, [r7, #7]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	71bb      	strb	r3, [r7, #6]
	if(cmd)
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d005      	beq.n	8000ee6 <OLED_WR_Byte+0x22>
			{
		Write_IIC_Cmddat (dat, OLED_DAT_ADDRESS );
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2140      	movs	r1, #64	; 0x40
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ffd4 	bl	8000e8c <Write_IIC_Cmddat>
	else {
		Write_IIC_Cmddat (dat, OLED_CMD_ADDRESS);
		
	}
	
}
 8000ee4:	e004      	b.n	8000ef0 <OLED_WR_Byte+0x2c>
		Write_IIC_Cmddat (dat, OLED_CMD_ADDRESS);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ffce 	bl	8000e8c <Write_IIC_Cmddat>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <OLED_Set_Pos>:




	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	3b50      	subs	r3, #80	; 0x50
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ffd7 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	f043 0310 	orr.w	r3, r3, #16
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ffcd 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f),OLED_CMD); 
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ffc5 	bl	8000ec4 <OLED_WR_Byte>
}   	  
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
	unsigned char i,n;
	for(i=0;i<8;i++)  
 8000f48:	2300      	movs	r3, #0
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	e01f      	b.n	8000f8e <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	3b50      	subs	r3, #80	; 0x50
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ffb4 	bl	8000ec4 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f7ff ffb0 	bl	8000ec4 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 8000f64:	2100      	movs	r1, #0
 8000f66:	2010      	movs	r0, #16
 8000f68:	f7ff ffac 	bl	8000ec4 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	71bb      	strb	r3, [r7, #6]
 8000f70:	e006      	b.n	8000f80 <OLED_Clear+0x3e>
 8000f72:	2101      	movs	r1, #1
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff ffa5 	bl	8000ec4 <OLED_WR_Byte>
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	71bb      	strb	r3, [r7, #6]
 8000f80:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	daf4      	bge.n	8000f72 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	d9dc      	bls.n	8000f4e <OLED_Clear+0xc>
	} //������ʾ
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,������ʾ;1,������ʾ				 
//size:ѡ������ 16/12 
void OLED_ShowChar(unsigned char x,unsigned char y,unsigned char chr,unsigned char Char_Size)
{      	
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4623      	mov	r3, r4
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71bb      	strb	r3, [r7, #6]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	717b      	strb	r3, [r7, #5]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73bb      	strb	r3, [r7, #14]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 8000fc2:	797b      	ldrb	r3, [r7, #5]
 8000fc4:	3b20      	subs	r3, #32
 8000fc6:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	da04      	bge.n	8000fda <OLED_ShowChar+0x3e>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	79bb      	ldrb	r3, [r7, #6]
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 8000fda:	793b      	ldrb	r3, [r7, #4]
 8000fdc:	2b10      	cmp	r3, #16
 8000fde:	d135      	bne.n	800104c <OLED_ShowChar+0xb0>
			{
			OLED_Set_Pos(x,y);	
 8000fe0:	79ba      	ldrb	r2, [r7, #6]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff86 	bl	8000ef8 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e00c      	b.n	800100c <OLED_ShowChar+0x70>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	011a      	lsls	r2, r3, #4
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a25      	ldr	r2, [pc, #148]	; (8001090 <OLED_ShowChar+0xf4>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	2101      	movs	r1, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5f 	bl	8000ec4 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	3301      	adds	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b07      	cmp	r3, #7
 8001010:	d9ef      	bls.n	8000ff2 <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	3301      	adds	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff6b 	bl	8000ef8 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001022:	2300      	movs	r3, #0
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	e00d      	b.n	8001044 <OLED_ShowChar+0xa8>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	011a      	lsls	r2, r3, #4
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	4413      	add	r3, r2
 8001030:	3308      	adds	r3, #8
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <OLED_ShowChar+0xf4>)
 8001034:	5cd3      	ldrb	r3, [r2, r3]
 8001036:	2101      	movs	r1, #1
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff43 	bl	8000ec4 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	3301      	adds	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	2b07      	cmp	r3, #7
 8001048:	d9ee      	bls.n	8001028 <OLED_ShowChar+0x8c>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 800104a:	e01c      	b.n	8001086 <OLED_ShowChar+0xea>
				OLED_Set_Pos(x,y);
 800104c:	79ba      	ldrb	r2, [r7, #6]
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff50 	bl	8000ef8 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e010      	b.n	8001080 <OLED_ShowChar+0xe4>
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 800105e:	7bba      	ldrb	r2, [r7, #14]
 8001060:	7bf9      	ldrb	r1, [r7, #15]
 8001062:	480c      	ldr	r0, [pc, #48]	; (8001094 <OLED_ShowChar+0xf8>)
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4403      	add	r3, r0
 800106e:	440b      	add	r3, r1
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2101      	movs	r1, #1
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff25 	bl	8000ec4 <OLED_WR_Byte>
				for(i=0;i<6;i++)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3301      	adds	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b05      	cmp	r3, #5
 8001084:	d9eb      	bls.n	800105e <OLED_ShowChar+0xc2>
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bd90      	pop	{r4, r7, pc}
 800108e:	bf00      	nop
 8001090:	08007394 	.word	0x08007394
 8001094:	0800716c 	.word	0x0800716c

08001098 <OLED_ShowString>:
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
	}
} 
//��ʾһ���ַ��Ŵ�
void OLED_ShowString(unsigned char x,unsigned char y,unsigned char *chr,unsigned char Char_Size)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	603a      	str	r2, [r7, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	460b      	mov	r3, r1
 80010a8:	71bb      	strb	r3, [r7, #6]
 80010aa:	4613      	mov	r3, r2
 80010ac:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80010b2:	e016      	b.n	80010e2 <OLED_ShowString+0x4a>
	{		OLED_ShowChar(x,y,chr[j],Char_Size);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	797b      	ldrb	r3, [r7, #5]
 80010be:	79b9      	ldrb	r1, [r7, #6]
 80010c0:	79f8      	ldrb	r0, [r7, #7]
 80010c2:	f7ff ff6b 	bl	8000f9c <OLED_ShowChar>
			x+=8;
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	3308      	adds	r3, #8
 80010ca:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b78      	cmp	r3, #120	; 0x78
 80010d0:	d904      	bls.n	80010dc <OLED_ShowString+0x44>
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	3302      	adds	r3, #2
 80010da:	71bb      	strb	r3, [r7, #6]
			j++;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	3301      	adds	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1e2      	bne.n	80010b4 <OLED_ShowString+0x1c>
	}
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <OLED_ShowFlort>:




void OLED_ShowFlort(unsigned char x,unsigned char y,float Da,unsigned char Char_Size)
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	603a      	str	r2, [r7, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	460b      	mov	r3, r1
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 800110e:	2300      	movs	r3, #0
 8001110:	75fb      	strb	r3, [r7, #23]
	char chr[10]={0};
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	811a      	strh	r2, [r3, #8]


		if(Da<10)		//防止十位变化成个位小数点前移，导致小数点后两位产生一个不变的不可控制数字
 800111e:	4961      	ldr	r1, [pc, #388]	; (80012a4 <OLED_ShowFlort+0x1ac>)
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f7ff fd6f 	bl	8000c04 <__aeabi_fcmplt>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d036      	beq.n	800119a <OLED_ShowFlort+0xa2>
	{
		  sprintf(chr, "%0.3f",Da);
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f7ff f97b 	bl	8000428 <__aeabi_f2d>
 8001132:	4603      	mov	r3, r0
 8001134:	460c      	mov	r4, r1
 8001136:	f107 000c 	add.w	r0, r7, #12
 800113a:	461a      	mov	r2, r3
 800113c:	4623      	mov	r3, r4
 800113e:	495a      	ldr	r1, [pc, #360]	; (80012a8 <OLED_ShowFlort+0x1b0>)
 8001140:	f003 f8ea 	bl	8004318 <siprintf>
			OLED_ShowChar(x,y,' ',Char_Size);
 8001144:	797b      	ldrb	r3, [r7, #5]
 8001146:	79b9      	ldrb	r1, [r7, #6]
 8001148:	79f8      	ldrb	r0, [r7, #7]
 800114a:	2220      	movs	r2, #32
 800114c:	f7ff ff26 	bl	8000f9c <OLED_ShowChar>
					while (chr[j]!='\0')
 8001150:	e01a      	b.n	8001188 <OLED_ShowFlort+0x90>
			{
				OLED_ShowChar(x+8,y,chr[j],Char_Size);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	3308      	adds	r3, #8
 8001156:	b2d8      	uxtb	r0, r3
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	f107 0218 	add.w	r2, r7, #24
 800115e:	4413      	add	r3, r2
 8001160:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	79b9      	ldrb	r1, [r7, #6]
 8001168:	f7ff ff18 	bl	8000f9c <OLED_ShowChar>
					x+=8;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	3308      	adds	r3, #8
 8001170:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b78      	cmp	r3, #120	; 0x78
 8001176:	d904      	bls.n	8001182 <OLED_ShowFlort+0x8a>
 8001178:	2300      	movs	r3, #0
 800117a:	71fb      	strb	r3, [r7, #7]
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	3302      	adds	r3, #2
 8001180:	71bb      	strb	r3, [r7, #6]
					j++;
 8001182:	7dfb      	ldrb	r3, [r7, #23]
 8001184:	3301      	adds	r3, #1
 8001186:	75fb      	strb	r3, [r7, #23]
					while (chr[j]!='\0')
 8001188:	7dfb      	ldrb	r3, [r7, #23]
 800118a:	f107 0218 	add.w	r2, r7, #24
 800118e:	4413      	add	r3, r2
 8001190:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1dc      	bne.n	8001152 <OLED_ShowFlort+0x5a>
					j++;
			}

	}

}
 8001198:	e080      	b.n	800129c <OLED_ShowFlort+0x1a4>
		if ((Da>10)&(100>Da))
 800119a:	2301      	movs	r3, #1
 800119c:	461c      	mov	r4, r3
 800119e:	4941      	ldr	r1, [pc, #260]	; (80012a4 <OLED_ShowFlort+0x1ac>)
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f7ff fd4d 	bl	8000c40 <__aeabi_fcmpgt>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <OLED_ShowFlort+0xb8>
 80011ac:	2300      	movs	r3, #0
 80011ae:	461c      	mov	r4, r3
 80011b0:	b2e4      	uxtb	r4, r4
 80011b2:	2301      	movs	r3, #1
 80011b4:	461d      	mov	r5, r3
 80011b6:	493d      	ldr	r1, [pc, #244]	; (80012ac <OLED_ShowFlort+0x1b4>)
 80011b8:	6838      	ldr	r0, [r7, #0]
 80011ba:	f7ff fd23 	bl	8000c04 <__aeabi_fcmplt>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <OLED_ShowFlort+0xd0>
 80011c4:	2300      	movs	r3, #0
 80011c6:	461d      	mov	r5, r3
 80011c8:	b2eb      	uxtb	r3, r5
 80011ca:	4023      	ands	r3, r4
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d02e      	beq.n	8001230 <OLED_ShowFlort+0x138>
		sprintf(chr, "%0.3f",Da);
 80011d2:	6838      	ldr	r0, [r7, #0]
 80011d4:	f7ff f928 	bl	8000428 <__aeabi_f2d>
 80011d8:	4603      	mov	r3, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	f107 000c 	add.w	r0, r7, #12
 80011e0:	461a      	mov	r2, r3
 80011e2:	4623      	mov	r3, r4
 80011e4:	4930      	ldr	r1, [pc, #192]	; (80012a8 <OLED_ShowFlort+0x1b0>)
 80011e6:	f003 f897 	bl	8004318 <siprintf>
			while (chr[j]!='\0')
 80011ea:	e018      	b.n	800121e <OLED_ShowFlort+0x126>
			{		OLED_ShowChar(x,y,chr[j],Char_Size);
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	f107 0218 	add.w	r2, r7, #24
 80011f2:	4413      	add	r3, r2
 80011f4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	79b9      	ldrb	r1, [r7, #6]
 80011fc:	79f8      	ldrb	r0, [r7, #7]
 80011fe:	f7ff fecd 	bl	8000f9c <OLED_ShowChar>
					x+=8;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	3308      	adds	r3, #8
 8001206:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b78      	cmp	r3, #120	; 0x78
 800120c:	d904      	bls.n	8001218 <OLED_ShowFlort+0x120>
 800120e:	2300      	movs	r3, #0
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	3302      	adds	r3, #2
 8001216:	71bb      	strb	r3, [r7, #6]
					j++;
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	3301      	adds	r3, #1
 800121c:	75fb      	strb	r3, [r7, #23]
			while (chr[j]!='\0')
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	f107 0218 	add.w	r2, r7, #24
 8001224:	4413      	add	r3, r2
 8001226:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1de      	bne.n	80011ec <OLED_ShowFlort+0xf4>
}
 800122e:	e035      	b.n	800129c <OLED_ShowFlort+0x1a4>
		if (Da>100)
 8001230:	491e      	ldr	r1, [pc, #120]	; (80012ac <OLED_ShowFlort+0x1b4>)
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f7ff fd04 	bl	8000c40 <__aeabi_fcmpgt>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d100      	bne.n	8001240 <OLED_ShowFlort+0x148>
}
 800123e:	e02d      	b.n	800129c <OLED_ShowFlort+0x1a4>
			sprintf(chr, "%0.2f",Da);
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f7ff f8f1 	bl	8000428 <__aeabi_f2d>
 8001246:	4603      	mov	r3, r0
 8001248:	460c      	mov	r4, r1
 800124a:	f107 000c 	add.w	r0, r7, #12
 800124e:	461a      	mov	r2, r3
 8001250:	4623      	mov	r3, r4
 8001252:	4917      	ldr	r1, [pc, #92]	; (80012b0 <OLED_ShowFlort+0x1b8>)
 8001254:	f003 f860 	bl	8004318 <siprintf>
			while (chr[j]!='\0')
 8001258:	e018      	b.n	800128c <OLED_ShowFlort+0x194>
			{		OLED_ShowChar(x,y,chr[j],Char_Size);
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	f107 0218 	add.w	r2, r7, #24
 8001260:	4413      	add	r3, r2
 8001262:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001266:	797b      	ldrb	r3, [r7, #5]
 8001268:	79b9      	ldrb	r1, [r7, #6]
 800126a:	79f8      	ldrb	r0, [r7, #7]
 800126c:	f7ff fe96 	bl	8000f9c <OLED_ShowChar>
					x+=8;
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	3308      	adds	r3, #8
 8001274:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b78      	cmp	r3, #120	; 0x78
 800127a:	d904      	bls.n	8001286 <OLED_ShowFlort+0x18e>
 800127c:	2300      	movs	r3, #0
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	3302      	adds	r3, #2
 8001284:	71bb      	strb	r3, [r7, #6]
					j++;
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	3301      	adds	r3, #1
 800128a:	75fb      	strb	r3, [r7, #23]
			while (chr[j]!='\0')
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	f107 0218 	add.w	r2, r7, #24
 8001292:	4413      	add	r3, r2
 8001294:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1de      	bne.n	800125a <OLED_ShowFlort+0x162>
}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bdb0      	pop	{r4, r5, r7, pc}
 80012a4:	41200000 	.word	0x41200000
 80012a8:	08007148 	.word	0x08007148
 80012ac:	42c80000 	.word	0x42c80000
 80012b0:	08007150 	.word	0x08007150

080012b4 <OLED_Init>:
	}
} 

//��ʼ��SSD1306					    
void OLED_Init(void)
{ 	
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

	HAL_Delay (100);					//看别人延时这么长时间
 80012b8:	2064      	movs	r0, #100	; 0x64
 80012ba:	f000 fad1 	bl	8001860 <HAL_Delay>
	OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 80012be:	2100      	movs	r1, #0
 80012c0:	20ae      	movs	r0, #174	; 0xae
 80012c2:	f7ff fdff 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 80012c6:	2100      	movs	r1, #0
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff fdfb 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 80012ce:	2100      	movs	r1, #0
 80012d0:	2010      	movs	r0, #16
 80012d2:	f7ff fdf7 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 80012d6:	2100      	movs	r1, #0
 80012d8:	2040      	movs	r0, #64	; 0x40
 80012da:	f7ff fdf3 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 80012de:	2100      	movs	r1, #0
 80012e0:	20b0      	movs	r0, #176	; 0xb0
 80012e2:	f7ff fdef 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); // contract control
 80012e6:	2100      	movs	r1, #0
 80012e8:	2081      	movs	r0, #129	; 0x81
 80012ea:	f7ff fdeb 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 80012ee:	2100      	movs	r1, #0
 80012f0:	20ff      	movs	r0, #255	; 0xff
 80012f2:	f7ff fde7 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 80012f6:	2100      	movs	r1, #0
 80012f8:	20a1      	movs	r0, #161	; 0xa1
 80012fa:	f7ff fde3 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 80012fe:	2100      	movs	r1, #0
 8001300:	20a6      	movs	r0, #166	; 0xa6
 8001302:	f7ff fddf 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8001306:	2100      	movs	r1, #0
 8001308:	20a8      	movs	r0, #168	; 0xa8
 800130a:	f7ff fddb 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 800130e:	2100      	movs	r1, #0
 8001310:	203f      	movs	r0, #63	; 0x3f
 8001312:	f7ff fdd7 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 8001316:	2100      	movs	r1, #0
 8001318:	20c8      	movs	r0, #200	; 0xc8
 800131a:	f7ff fdd3 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 800131e:	2100      	movs	r1, #0
 8001320:	20d3      	movs	r0, #211	; 0xd3
 8001322:	f7ff fdcf 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//
 8001326:	2100      	movs	r1, #0
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fdcb 	bl	8000ec4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 800132e:	2100      	movs	r1, #0
 8001330:	20d5      	movs	r0, #213	; 0xd5
 8001332:	f7ff fdc7 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//
 8001336:	2100      	movs	r1, #0
 8001338:	2080      	movs	r0, #128	; 0x80
 800133a:	f7ff fdc3 	bl	8000ec4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 800133e:	2100      	movs	r1, #0
 8001340:	20d8      	movs	r0, #216	; 0xd8
 8001342:	f7ff fdbf 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x05,OLED_CMD);//
 8001346:	2100      	movs	r1, #0
 8001348:	2005      	movs	r0, #5
 800134a:	f7ff fdbb 	bl	8000ec4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 800134e:	2100      	movs	r1, #0
 8001350:	20d9      	movs	r0, #217	; 0xd9
 8001352:	f7ff fdb7 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//
 8001356:	2100      	movs	r1, #0
 8001358:	20f1      	movs	r0, #241	; 0xf1
 800135a:	f7ff fdb3 	bl	8000ec4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 800135e:	2100      	movs	r1, #0
 8001360:	20da      	movs	r0, #218	; 0xda
 8001362:	f7ff fdaf 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);//
 8001366:	2100      	movs	r1, #0
 8001368:	2012      	movs	r0, #18
 800136a:	f7ff fdab 	bl	8000ec4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 800136e:	2100      	movs	r1, #0
 8001370:	20db      	movs	r0, #219	; 0xdb
 8001372:	f7ff fda7 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//
 8001376:	2100      	movs	r1, #0
 8001378:	2030      	movs	r0, #48	; 0x30
 800137a:	f7ff fda3 	bl	8000ec4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 800137e:	2100      	movs	r1, #0
 8001380:	208d      	movs	r0, #141	; 0x8d
 8001382:	f7ff fd9f 	bl	8000ec4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//
 8001386:	2100      	movs	r1, #0
 8001388:	2014      	movs	r0, #20
 800138a:	f7ff fd9b 	bl	8000ec4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 800138e:	2100      	movs	r1, #0
 8001390:	20af      	movs	r0, #175	; 0xaf
 8001392:	f7ff fd97 	bl	8000ec4 <OLED_WR_Byte>


	OLED_Clear();
 8001396:	f7ff fdd4 	bl	8000f42 <OLED_Clear>
}  
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_MspInit+0x5c>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <HAL_MspInit+0x5c>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6193      	str	r3, [r2, #24]
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_MspInit+0x5c>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_MspInit+0x5c>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_MspInit+0x5c>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_MspInit+0x5c>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_MspInit+0x60>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_MspInit+0x60>)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010000 	.word	0x40010000

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <HardFault_Handler+0x4>

08001416 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <MemManage_Handler+0x4>

0800141c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <BusFault_Handler+0x4>

08001422 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <UsageFault_Handler+0x4>

08001428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001450:	f000 f9ea 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x50>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x16>
		heap_end = &end;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <_sbrk+0x50>)
 800146a:	4a10      	ldr	r2, [pc, #64]	; (80014ac <_sbrk+0x54>)
 800146c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <_sbrk+0x50>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <_sbrk+0x50>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	466a      	mov	r2, sp
 800147e:	4293      	cmp	r3, r2
 8001480:	d907      	bls.n	8001492 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001482:	f002 f8e3 	bl	800364c <__errno>
 8001486:	4602      	mov	r2, r0
 8001488:	230c      	movs	r3, #12
 800148a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	e006      	b.n	80014a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <_sbrk+0x50>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <_sbrk+0x50>)
 800149c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200001fc 	.word	0x200001fc
 80014ac:	200002e8 	.word	0x200002e8

080014b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <SystemInit+0x5c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <SystemInit+0x5c>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <SystemInit+0x5c>)
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4911      	ldr	r1, [pc, #68]	; (800150c <SystemInit+0x5c>)
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <SystemInit+0x60>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <SystemInit+0x5c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <SystemInit+0x5c>)
 80014d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <SystemInit+0x5c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <SystemInit+0x5c>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <SystemInit+0x5c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <SystemInit+0x5c>)
 80014ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014f2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SystemInit+0x5c>)
 80014f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SystemInit+0x64>)
 80014fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001502:	609a      	str	r2, [r3, #8]
#endif 
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40021000 	.word	0x40021000
 8001510:	f8ff0000 	.word	0xf8ff0000
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <MX_TIM2_Init+0xb0>)
 800153c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001540:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <MX_TIM2_Init+0xb0>)
 8001544:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001548:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <MX_TIM2_Init+0xb0>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM2_Init+0xb0>)
 8001552:	f242 720f 	movw	r2, #9999	; 0x270f
 8001556:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_TIM2_Init+0xb0>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_TIM2_Init+0xb0>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001564:	4818      	ldr	r0, [pc, #96]	; (80015c8 <MX_TIM2_Init+0xb0>)
 8001566:	f001 fc29 	bl	8002dbc <HAL_TIM_PWM_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001570:	f7ff fc85 	bl	8000e7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4619      	mov	r1, r3
 8001582:	4811      	ldr	r0, [pc, #68]	; (80015c8 <MX_TIM2_Init+0xb0>)
 8001584:	f001 fef6 	bl	8003374 <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800158e:	f7ff fc76 	bl	8000e7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001592:	2370      	movs	r3, #112	; 0x70
 8001594:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4999;
 8001596:	f241 3387 	movw	r3, #4999	; 0x1387
 800159a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <MX_TIM2_Init+0xb0>)
 80015ac:	f001 fc32 	bl	8002e14 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80015b6:	f7ff fc62 	bl	8000e7e <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80015ba:	4803      	ldr	r0, [pc, #12]	; (80015c8 <MX_TIM2_Init+0xb0>)
 80015bc:	f000 f822 	bl	8001604 <HAL_TIM_MspPostInit>

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000025c 	.word	0x2000025c

080015cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015dc:	d10b      	bne.n	80015f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_TIM_PWM_MspInit+0x34>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_TIM_PWM_MspInit+0x34>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_TIM_PWM_MspInit+0x34>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001622:	d117      	bne.n	8001654 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_TIM_MspPostInit+0x58>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_TIM_MspPostInit+0x58>)
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_TIM_MspPostInit+0x58>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2302      	movs	r3, #2
 8001646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4619      	mov	r1, r3
 800164e:	4804      	ldr	r0, [pc, #16]	; (8001660 <HAL_TIM_MspPostInit+0x5c>)
 8001650:	f000 fa0c 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000
 8001660:	40010800 	.word	0x40010800

08001664 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <MX_USART1_UART_Init+0x50>)
 800166c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800169c:	f001 feae 	bl	80033fc <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016a6:	f7ff fbea 	bl	8000e7e <Error_Handler>
  }

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000029c 	.word	0x2000029c
 80016b4:	40013800 	.word	0x40013800

080016b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <HAL_UART_MspInit+0x8c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d131      	bne.n	800173c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_UART_MspInit+0x90>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_UART_MspInit+0x90>)
 80016de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_UART_MspInit+0x90>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_UART_MspInit+0x90>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <HAL_UART_MspInit+0x90>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_UART_MspInit+0x90>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4619      	mov	r1, r3
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <HAL_UART_MspInit+0x94>)
 800171e:	f000 f9a5 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_UART_MspInit+0x94>)
 8001738:	f000 f998 	bl	8001a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40013800 	.word	0x40013800
 8001748:	40021000 	.word	0x40021000
 800174c:	40010800 	.word	0x40010800

08001750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001750:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001752:	e003      	b.n	800175c <LoopCopyDataInit>

08001754 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001756:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001758:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800175a:	3104      	adds	r1, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800175c:	480a      	ldr	r0, [pc, #40]	; (8001788 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001760:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001762:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001764:	d3f6      	bcc.n	8001754 <CopyDataInit>
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001768:	e002      	b.n	8001770 <LoopFillZerobss>

0800176a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800176c:	f842 3b04 	str.w	r3, [r2], #4

08001770 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001772:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001774:	d3f9      	bcc.n	800176a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001776:	f7ff fe9b 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177a:	f001 ff6d 	bl	8003658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800177e:	f7ff fb07 	bl	8000d90 <main>
  bx lr
 8001782:	4770      	bx	lr
  ldr r3, =_sidata
 8001784:	08007c58 	.word	0x08007c58
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800178c:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001790:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001794:	200002e4 	.word	0x200002e4

08001798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_2_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_Init+0x28>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_Init+0x28>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f929 	bl	8001a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 f808 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff fdf2 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f933 	bl	8001a52 <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f909 	bl	8001a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000004 	.word	0x20000004
 8001820:	2000000c 	.word	0x2000000c
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_IncTick+0x1c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x20>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a03      	ldr	r2, [pc, #12]	; (8001848 <HAL_IncTick+0x20>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	2000000c 	.word	0x2000000c
 8001848:	200002dc 	.word	0x200002dc

0800184c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <HAL_GetTick+0x10>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	200002dc 	.word	0x200002dc

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff fff0 	bl	800184c <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_Delay+0x40>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffe0 	bl	800184c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000000c 	.word	0x2000000c

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d0:	d301      	bcc.n	80019d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00f      	b.n	80019f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <SysTick_Config+0x40>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019de:	210f      	movs	r1, #15
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f7ff ff90 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <SysTick_Config+0x40>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ee:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <SysTick_Config+0x40>)
 80019f0:	2207      	movs	r2, #7
 80019f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	e000e010 	.word	0xe000e010

08001a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff49 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2c:	f7ff ff5e 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7ff ff90 	bl	800195c <NVIC_EncodePriority>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff5f 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffb0 	bl	80019c0 <SysTick_Config>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b08b      	sub	sp, #44	; 0x2c
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	e127      	b.n	8001cd0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a80:	2201      	movs	r2, #1
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8116 	bne.w	8001cca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b12      	cmp	r3, #18
 8001aa4:	d034      	beq.n	8001b10 <HAL_GPIO_Init+0xa4>
 8001aa6:	2b12      	cmp	r3, #18
 8001aa8:	d80d      	bhi.n	8001ac6 <HAL_GPIO_Init+0x5a>
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d02b      	beq.n	8001b06 <HAL_GPIO_Init+0x9a>
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d804      	bhi.n	8001abc <HAL_GPIO_Init+0x50>
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d031      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d01c      	beq.n	8001af4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aba:	e048      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d043      	beq.n	8001b48 <HAL_GPIO_Init+0xdc>
 8001ac0:	2b11      	cmp	r3, #17
 8001ac2:	d01b      	beq.n	8001afc <HAL_GPIO_Init+0x90>
          break;
 8001ac4:	e043      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ac6:	4a89      	ldr	r2, [pc, #548]	; (8001cec <HAL_GPIO_Init+0x280>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d026      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
 8001acc:	4a87      	ldr	r2, [pc, #540]	; (8001cec <HAL_GPIO_Init+0x280>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d806      	bhi.n	8001ae0 <HAL_GPIO_Init+0x74>
 8001ad2:	4a87      	ldr	r2, [pc, #540]	; (8001cf0 <HAL_GPIO_Init+0x284>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d020      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
 8001ad8:	4a86      	ldr	r2, [pc, #536]	; (8001cf4 <HAL_GPIO_Init+0x288>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d01d      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
          break;
 8001ade:	e036      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ae0:	4a85      	ldr	r2, [pc, #532]	; (8001cf8 <HAL_GPIO_Init+0x28c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d019      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
 8001ae6:	4a85      	ldr	r2, [pc, #532]	; (8001cfc <HAL_GPIO_Init+0x290>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d016      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
 8001aec:	4a84      	ldr	r2, [pc, #528]	; (8001d00 <HAL_GPIO_Init+0x294>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0xae>
          break;
 8001af2:	e02c      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	623b      	str	r3, [r7, #32]
          break;
 8001afa:	e028      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	3304      	adds	r3, #4
 8001b02:	623b      	str	r3, [r7, #32]
          break;
 8001b04:	e023      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	3308      	adds	r3, #8
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e01e      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	330c      	adds	r3, #12
 8001b16:	623b      	str	r3, [r7, #32]
          break;
 8001b18:	e019      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d102      	bne.n	8001b28 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b22:	2304      	movs	r3, #4
 8001b24:	623b      	str	r3, [r7, #32]
          break;
 8001b26:	e012      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b30:	2308      	movs	r3, #8
 8001b32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	611a      	str	r2, [r3, #16]
          break;
 8001b3a:	e008      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	615a      	str	r2, [r3, #20]
          break;
 8001b46:	e002      	b.n	8001b4e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2bff      	cmp	r3, #255	; 0xff
 8001b52:	d801      	bhi.n	8001b58 <HAL_GPIO_Init+0xec>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	e001      	b.n	8001b5c <HAL_GPIO_Init+0xf0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2bff      	cmp	r3, #255	; 0xff
 8001b62:	d802      	bhi.n	8001b6a <HAL_GPIO_Init+0xfe>
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x104>
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	3b08      	subs	r3, #8
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	210f      	movs	r1, #15
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	401a      	ands	r2, r3
 8001b82:	6a39      	ldr	r1, [r7, #32]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 8096 	beq.w	8001cca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b9e:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <HAL_GPIO_Init+0x298>)
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_GPIO_Init+0x298>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6193      	str	r3, [r2, #24]
 8001baa:	4b56      	ldr	r3, [pc, #344]	; (8001d04 <HAL_GPIO_Init+0x298>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bb6:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_GPIO_Init+0x29c>)
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <HAL_GPIO_Init+0x2a0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_GPIO_Init+0x19e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_GPIO_Init+0x2a4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00d      	beq.n	8001c06 <HAL_GPIO_Init+0x19a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <HAL_GPIO_Init+0x2a8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <HAL_GPIO_Init+0x196>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d101      	bne.n	8001bfe <HAL_GPIO_Init+0x192>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x1a0>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x1a0>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x1a0>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x1a0>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c1c:	493a      	ldr	r1, [pc, #232]	; (8001d08 <HAL_GPIO_Init+0x29c>)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c36:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4938      	ldr	r1, [pc, #224]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4933      	ldr	r1, [pc, #204]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	492e      	ldr	r1, [pc, #184]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	4929      	ldr	r1, [pc, #164]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	4924      	ldr	r1, [pc, #144]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
 8001c92:	e006      	b.n	8001ca2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	491f      	ldr	r1, [pc, #124]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	491a      	ldr	r1, [pc, #104]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60cb      	str	r3, [r1, #12]
 8001cba:	e006      	b.n	8001cca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cbc:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	4915      	ldr	r1, [pc, #84]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	3301      	adds	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f47f aed0 	bne.w	8001a80 <HAL_GPIO_Init+0x14>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	372c      	adds	r7, #44	; 0x2c
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	10210000 	.word	0x10210000
 8001cf0:	10110000 	.word	0x10110000
 8001cf4:	10120000 	.word	0x10120000
 8001cf8:	10310000 	.word	0x10310000
 8001cfc:	10320000 	.word	0x10320000
 8001d00:	10220000 	.word	0x10220000
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	40010800 	.word	0x40010800
 8001d10:	40010c00 	.word	0x40010c00
 8001d14:	40011000 	.word	0x40011000
 8001d18:	40011400 	.word	0x40011400
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e10f      	b.n	8001f52 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7fe ffe2 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	; 0x24
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d64:	f000 ffe4 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8001d68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a7b      	ldr	r2, [pc, #492]	; (8001f5c <HAL_I2C_Init+0x23c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d807      	bhi.n	8001d84 <HAL_I2C_Init+0x64>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a7a      	ldr	r2, [pc, #488]	; (8001f60 <HAL_I2C_Init+0x240>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	bf94      	ite	ls
 8001d7c:	2301      	movls	r3, #1
 8001d7e:	2300      	movhi	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	e006      	b.n	8001d92 <HAL_I2C_Init+0x72>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4a77      	ldr	r2, [pc, #476]	; (8001f64 <HAL_I2C_Init+0x244>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	bf94      	ite	ls
 8001d8c:	2301      	movls	r3, #1
 8001d8e:	2300      	movhi	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0db      	b.n	8001f52 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4a72      	ldr	r2, [pc, #456]	; (8001f68 <HAL_I2C_Init+0x248>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0c9b      	lsrs	r3, r3, #18
 8001da4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a64      	ldr	r2, [pc, #400]	; (8001f5c <HAL_I2C_Init+0x23c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_I2C_Init+0xb4>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	e009      	b.n	8001de8 <HAL_I2C_Init+0xc8>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	4a63      	ldr	r2, [pc, #396]	; (8001f6c <HAL_I2C_Init+0x24c>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	099b      	lsrs	r3, r3, #6
 8001de6:	3301      	adds	r3, #1
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4956      	ldr	r1, [pc, #344]	; (8001f5c <HAL_I2C_Init+0x23c>)
 8001e04:	428b      	cmp	r3, r1
 8001e06:	d80d      	bhi.n	8001e24 <HAL_I2C_Init+0x104>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1e59      	subs	r1, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	bf38      	it	cc
 8001e20:	2304      	movcc	r3, #4
 8001e22:	e04f      	b.n	8001ec4 <HAL_I2C_Init+0x1a4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d111      	bne.n	8001e50 <HAL_I2C_Init+0x130>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1e58      	subs	r0, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	440b      	add	r3, r1
 8001e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	e012      	b.n	8001e76 <HAL_I2C_Init+0x156>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e58      	subs	r0, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	0099      	lsls	r1, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Init+0x15e>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e022      	b.n	8001ec4 <HAL_I2C_Init+0x1a4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10e      	bne.n	8001ea4 <HAL_I2C_Init+0x184>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1e58      	subs	r0, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6859      	ldr	r1, [r3, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	440b      	add	r3, r1
 8001e94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea2:	e00f      	b.n	8001ec4 <HAL_I2C_Init+0x1a4>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	0099      	lsls	r1, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	6809      	ldr	r1, [r1, #0]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69da      	ldr	r2, [r3, #28]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ef2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6911      	ldr	r1, [r2, #16]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68d2      	ldr	r2, [r2, #12]
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	000186a0 	.word	0x000186a0
 8001f60:	001e847f 	.word	0x001e847f
 8001f64:	003d08ff 	.word	0x003d08ff
 8001f68:	431bde83 	.word	0x431bde83
 8001f6c:	10624dd3 	.word	0x10624dd3

08001f70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	4608      	mov	r0, r1
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4603      	mov	r3, r0
 8001f80:	817b      	strh	r3, [r7, #10]
 8001f82:	460b      	mov	r3, r1
 8001f84:	813b      	strh	r3, [r7, #8]
 8001f86:	4613      	mov	r3, r2
 8001f88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f8a:	f7ff fc5f 	bl	800184c <HAL_GetTick>
 8001f8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	f040 80d9 	bne.w	8002150 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2319      	movs	r3, #25
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	496d      	ldr	r1, [pc, #436]	; (800215c <HAL_I2C_Mem_Write+0x1ec>)
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f965 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e0cc      	b.n	8002152 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_I2C_Mem_Write+0x56>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e0c5      	b.n	8002152 <HAL_I2C_Mem_Write+0x1e2>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d007      	beq.n	8001fec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2221      	movs	r2, #33	; 0x21
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a3a      	ldr	r2, [r7, #32]
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800201c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a4d      	ldr	r2, [pc, #308]	; (8002160 <HAL_I2C_Mem_Write+0x1f0>)
 800202c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800202e:	88f8      	ldrh	r0, [r7, #6]
 8002030:	893a      	ldrh	r2, [r7, #8]
 8002032:	8979      	ldrh	r1, [r7, #10]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4603      	mov	r3, r0
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 f890 	bl	8002164 <I2C_RequestMemoryWrite>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d052      	beq.n	80020f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e081      	b.n	8002152 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f9e6 	bl	8002424 <I2C_WaitOnTXEFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00d      	beq.n	800207a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2b04      	cmp	r3, #4
 8002064:	d107      	bne.n	8002076 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002074:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e06b      	b.n	8002152 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d11b      	bne.n	80020f0 <HAL_I2C_Mem_Write+0x180>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d017      	beq.n	80020f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1aa      	bne.n	800204e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f9d2 	bl	80024a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00d      	beq.n	8002124 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	2b04      	cmp	r3, #4
 800210e:	d107      	bne.n	8002120 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e016      	b.n	8002152 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	e000      	b.n	8002152 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002150:	2302      	movs	r3, #2
  }
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	00100002 	.word	0x00100002
 8002160:	ffff0000 	.word	0xffff0000

08002164 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	4608      	mov	r0, r1
 800216e:	4611      	mov	r1, r2
 8002170:	461a      	mov	r2, r3
 8002172:	4603      	mov	r3, r0
 8002174:	817b      	strh	r3, [r7, #10]
 8002176:	460b      	mov	r3, r1
 8002178:	813b      	strh	r3, [r7, #8]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800218c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	2200      	movs	r2, #0
 8002196:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f86c 	bl	8002278 <I2C_WaitOnFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e05f      	b.n	800226a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021aa:	897b      	ldrh	r3, [r7, #10]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	6a3a      	ldr	r2, [r7, #32]
 80021be:	492d      	ldr	r1, [pc, #180]	; (8002274 <I2C_RequestMemoryWrite+0x110>)
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f8b0 	bl	8002326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e04c      	b.n	800226a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e8:	6a39      	ldr	r1, [r7, #32]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f91a 	bl	8002424 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00d      	beq.n	8002212 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d107      	bne.n	800220e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e02b      	b.n	800226a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002218:	893b      	ldrh	r3, [r7, #8]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	611a      	str	r2, [r3, #16]
 8002222:	e021      	b.n	8002268 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002224:	893b      	ldrh	r3, [r7, #8]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2da      	uxtb	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002234:	6a39      	ldr	r1, [r7, #32]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f8f4 	bl	8002424 <I2C_WaitOnTXEFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00d      	beq.n	800225e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2b04      	cmp	r3, #4
 8002248:	d107      	bne.n	800225a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002258:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e005      	b.n	800226a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800225e:	893b      	ldrh	r3, [r7, #8]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	00010002 	.word	0x00010002

08002278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002288:	e025      	b.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d021      	beq.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7ff fadb 	bl	800184c <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d116      	bne.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f043 0220 	orr.w	r2, r3, #32
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e023      	b.n	800231e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10d      	bne.n	80022fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4013      	ands	r3, r2
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bf0c      	ite	eq
 80022f2:	2301      	moveq	r3, #1
 80022f4:	2300      	movne	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	e00c      	b.n	8002316 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4013      	ands	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf0c      	ite	eq
 800230e:	2301      	moveq	r3, #1
 8002310:	2300      	movne	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	429a      	cmp	r2, r3
 800231a:	d0b6      	beq.n	800228a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002334:	e051      	b.n	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002344:	d123      	bne.n	800238e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002354:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800235e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f043 0204 	orr.w	r2, r3, #4
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e046      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d021      	beq.n	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7ff fa59 	bl	800184c <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d116      	bne.n	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f043 0220 	orr.w	r2, r3, #32
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e020      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	0c1b      	lsrs	r3, r3, #16
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d10c      	bne.n	80023fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4013      	ands	r3, r2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf14      	ite	ne
 80023f6:	2301      	movne	r3, #1
 80023f8:	2300      	moveq	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	e00b      	b.n	8002416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	43da      	mvns	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	4013      	ands	r3, r2
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf14      	ite	ne
 8002410:	2301      	movne	r3, #1
 8002412:	2300      	moveq	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d18d      	bne.n	8002336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002430:	e02d      	b.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f878 	bl	8002528 <I2C_IsAcknowledgeFailed>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e02d      	b.n	800249e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d021      	beq.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244a:	f7ff f9ff 	bl	800184c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d116      	bne.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f043 0220 	orr.w	r2, r3, #32
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e007      	b.n	800249e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002498:	2b80      	cmp	r3, #128	; 0x80
 800249a:	d1ca      	bne.n	8002432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024b2:	e02d      	b.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f837 	bl	8002528 <I2C_IsAcknowledgeFailed>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e02d      	b.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ca:	d021      	beq.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024cc:	f7ff f9be 	bl	800184c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d302      	bcc.n	80024e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e007      	b.n	8002520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b04      	cmp	r3, #4
 800251c:	d1ca      	bne.n	80024b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253e:	d11b      	bne.n	8002578 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002548:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f043 0204 	orr.w	r2, r3, #4
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e26c      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a4:	4b92      	ldr	r3, [pc, #584]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d00c      	beq.n	80025ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025b0:	4b8f      	ldr	r3, [pc, #572]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d112      	bne.n	80025e2 <HAL_RCC_OscConfig+0x5e>
 80025bc:	4b8c      	ldr	r3, [pc, #560]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c8:	d10b      	bne.n	80025e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ca:	4b89      	ldr	r3, [pc, #548]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d06c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x12c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d168      	bne.n	80026b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e246      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x76>
 80025ec:	4b80      	ldr	r3, [pc, #512]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7f      	ldr	r2, [pc, #508]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e02e      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x98>
 8002602:	4b7b      	ldr	r3, [pc, #492]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7a      	ldr	r2, [pc, #488]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b78      	ldr	r3, [pc, #480]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a77      	ldr	r2, [pc, #476]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e01d      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0xbc>
 8002626:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a71      	ldr	r2, [pc, #452]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6e      	ldr	r2, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 8002640:	4b6b      	ldr	r3, [pc, #428]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6a      	ldr	r2, [pc, #424]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b68      	ldr	r3, [pc, #416]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a67      	ldr	r2, [pc, #412]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002656:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff f8f4 	bl	800184c <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7ff f8f0 	bl	800184c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1fa      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b5d      	ldr	r3, [pc, #372]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0xe4>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff f8e0 	bl	800184c <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff f8dc 	bl	800184c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e1e6      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x10c>
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d063      	beq.n	8002786 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026be:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ca:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d11c      	bne.n	8002710 <HAL_RCC_OscConfig+0x18c>
 80026d6:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d116      	bne.n	8002710 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	4b43      	ldr	r3, [pc, #268]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x176>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e1ba      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4939      	ldr	r1, [pc, #228]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	e03a      	b.n	8002786 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002718:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7ff f895 	bl	800184c <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002726:	f7ff f891 	bl	800184c <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e19b      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002738:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4927      	ldr	r1, [pc, #156]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
 8002758:	e015      	b.n	8002786 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <HAL_RCC_OscConfig+0x270>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff f874 	bl	800184c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002768:	f7ff f870 	bl	800184c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e17a      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d03a      	beq.n	8002808 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d019      	beq.n	80027ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <HAL_RCC_OscConfig+0x274>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7ff f854 	bl	800184c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a8:	f7ff f850 	bl	800184c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e15a      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f000 fada 	bl	8002d80 <RCC_Delay>
 80027cc:	e01c      	b.n	8002808 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_RCC_OscConfig+0x274>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7ff f83a 	bl	800184c <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027da:	e00f      	b.n	80027fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027dc:	f7ff f836 	bl	800184c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d908      	bls.n	80027fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e140      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	42420000 	.word	0x42420000
 80027f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b9e      	ldr	r3, [pc, #632]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e9      	bne.n	80027dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80a6 	beq.w	8002962 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b97      	ldr	r3, [pc, #604]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10d      	bne.n	8002842 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	4b94      	ldr	r3, [pc, #592]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a93      	ldr	r2, [pc, #588]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002830:	61d3      	str	r3, [r2, #28]
 8002832:	4b91      	ldr	r3, [pc, #580]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b8e      	ldr	r3, [pc, #568]	; (8002a7c <HAL_RCC_OscConfig+0x4f8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d118      	bne.n	8002880 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284e:	4b8b      	ldr	r3, [pc, #556]	; (8002a7c <HAL_RCC_OscConfig+0x4f8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a8a      	ldr	r2, [pc, #552]	; (8002a7c <HAL_RCC_OscConfig+0x4f8>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285a:	f7fe fff7 	bl	800184c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002862:	f7fe fff3 	bl	800184c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	; 0x64
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0fd      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	4b81      	ldr	r3, [pc, #516]	; (8002a7c <HAL_RCC_OscConfig+0x4f8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x312>
 8002888:	4b7b      	ldr	r3, [pc, #492]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a7a      	ldr	r2, [pc, #488]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e02d      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x334>
 800289e:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a75      	ldr	r2, [pc, #468]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6213      	str	r3, [r2, #32]
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a72      	ldr	r2, [pc, #456]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	6213      	str	r3, [r2, #32]
 80028b6:	e01c      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x356>
 80028c0:	4b6d      	ldr	r3, [pc, #436]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a6c      	ldr	r2, [pc, #432]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	6213      	str	r3, [r2, #32]
 80028cc:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a69      	ldr	r2, [pc, #420]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	e00b      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 80028da:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a66      	ldr	r2, [pc, #408]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a63      	ldr	r2, [pc, #396]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d015      	beq.n	8002926 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7fe ffa7 	bl	800184c <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe ffa3 	bl	800184c <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e0ab      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	4b57      	ldr	r3, [pc, #348]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ee      	beq.n	8002902 <HAL_RCC_OscConfig+0x37e>
 8002924:	e014      	b.n	8002950 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7fe ff91 	bl	800184c <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe ff8d 	bl	800184c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e095      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002944:	4b4c      	ldr	r3, [pc, #304]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ee      	bne.n	800292e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d105      	bne.n	8002962 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002956:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4a47      	ldr	r2, [pc, #284]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 800295c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002960:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8081 	beq.w	8002a6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800296c:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d061      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d146      	bne.n	8002a0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_RCC_OscConfig+0x4fc>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7fe ff61 	bl	800184c <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe ff5d 	bl	800184c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e067      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a0:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d108      	bne.n	80029c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029b6:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	492d      	ldr	r1, [pc, #180]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c8:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a19      	ldr	r1, [r3, #32]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	430b      	orrs	r3, r1
 80029da:	4927      	ldr	r1, [pc, #156]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x4fc>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe ff31 	bl	800184c <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ee:	f7fe ff2d 	bl	800184c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e037      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x46a>
 8002a0c:	e02f      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <HAL_RCC_OscConfig+0x4fc>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe ff1a 	bl	800184c <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe ff16 	bl	800184c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e020      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x498>
 8002a3a:	e018      	b.n	8002a6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_OscConfig+0x4f4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42420060 	.word	0x42420060

08002a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0d0      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d910      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 0207 	bic.w	r2, r3, #7
 8002aae:	4965      	ldr	r1, [pc, #404]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d040      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d115      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e073      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e06b      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4936      	ldr	r1, [pc, #216]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b74:	f7fe fe6a 	bl	800184c <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7fe fe66 	bl	800184c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e053      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d210      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 0207 	bic.w	r2, r3, #7
 8002bba:	4922      	ldr	r1, [pc, #136]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4601      	mov	r1, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	5cd3      	ldrb	r3, [r2, r3]
 8002c26:	fa21 f303 	lsr.w	r3, r1, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1cc>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1d0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fdc8 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	08007984 	.word	0x08007984
 8002c50:	20000004 	.word	0x20000004
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b490      	push	{r4, r7}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c5e:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c60:	1d3c      	adds	r4, r7, #4
 8002c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c68:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c82:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d002      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x46>
 8002c96:	e02d      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c9a:	623b      	str	r3, [r7, #32]
      break;
 8002c9c:	e02d      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	0c9b      	lsrs	r3, r3, #18
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002caa:	4413      	add	r3, r2
 8002cac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0c5b      	lsrs	r3, r3, #17
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cca:	4413      	add	r3, r2
 8002ccc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cd6:	fb02 f203 	mul.w	r2, r2, r3
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	e004      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	623b      	str	r3, [r7, #32]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cf6:	623b      	str	r3, [r7, #32]
      break;
 8002cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3728      	adds	r7, #40	; 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc90      	pop	{r4, r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	08007158 	.word	0x08007158
 8002d0c:	08007168 	.word	0x08007168
 8002d10:	40021000 	.word	0x40021000
 8002d14:	007a1200 	.word	0x007a1200
 8002d18:	003d0900 	.word	0x003d0900

08002d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	20000004 	.word	0x20000004

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d34:	f7ff fff2 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d38:	4601      	mov	r1, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4a03      	ldr	r2, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d46:	5cd3      	ldrb	r3, [r2, r3]
 8002d48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08007994 	.word	0x08007994

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d5c:	f7ff ffde 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d60:	4601      	mov	r1, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	0adb      	lsrs	r3, r3, #11
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6e:	5cd3      	ldrb	r3, [r2, r3]
 8002d70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08007994 	.word	0x08007994

08002d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <RCC_Delay+0x34>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <RCC_Delay+0x38>)
 8002d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d92:	0a5b      	lsrs	r3, r3, #9
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d9c:	bf00      	nop
  }
  while (Delay --);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1e5a      	subs	r2, r3, #1
 8002da2:	60fa      	str	r2, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f9      	bne.n	8002d9c <RCC_Delay+0x1c>
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000004 	.word	0x20000004
 8002db8:	10624dd3 	.word	0x10624dd3

08002dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e01d      	b.n	8002e0a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fbf2 	bl	80015cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f000 f8d0 	bl	8002fa0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0b4      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	f200 809f 	bhi.w	8002f84 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002f85 	.word	0x08002f85
 8002e54:	08002f85 	.word	0x08002f85
 8002e58:	08002f85 	.word	0x08002f85
 8002e5c:	08002ec1 	.word	0x08002ec1
 8002e60:	08002f85 	.word	0x08002f85
 8002e64:	08002f85 	.word	0x08002f85
 8002e68:	08002f85 	.word	0x08002f85
 8002e6c:	08002f03 	.word	0x08002f03
 8002e70:	08002f85 	.word	0x08002f85
 8002e74:	08002f85 	.word	0x08002f85
 8002e78:	08002f85 	.word	0x08002f85
 8002e7c:	08002f43 	.word	0x08002f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f8ec 	bl	8003064 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0208 	orr.w	r2, r2, #8
 8002e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0204 	bic.w	r2, r2, #4
 8002eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6999      	ldr	r1, [r3, #24]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	619a      	str	r2, [r3, #24]
      break;
 8002ebe:	e062      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f932 	bl	8003130 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6999      	ldr	r1, [r3, #24]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	021a      	lsls	r2, r3, #8
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	619a      	str	r2, [r3, #24]
      break;
 8002f00:	e041      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f97b 	bl	8003204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0208 	orr.w	r2, r2, #8
 8002f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0204 	bic.w	r2, r2, #4
 8002f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69d9      	ldr	r1, [r3, #28]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]
      break;
 8002f40:	e021      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f9c5 	bl	80032d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69d9      	ldr	r1, [r3, #28]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	021a      	lsls	r2, r3, #8
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	61da      	str	r2, [r3, #28]
      break;
 8002f82:	e000      	b.n	8002f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002f84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a29      	ldr	r2, [pc, #164]	; (8003058 <TIM_Base_SetConfig+0xb8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00b      	beq.n	8002fd0 <TIM_Base_SetConfig+0x30>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fbe:	d007      	beq.n	8002fd0 <TIM_Base_SetConfig+0x30>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a26      	ldr	r2, [pc, #152]	; (800305c <TIM_Base_SetConfig+0xbc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <TIM_Base_SetConfig+0x30>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a25      	ldr	r2, [pc, #148]	; (8003060 <TIM_Base_SetConfig+0xc0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d108      	bne.n	8002fe2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	; (8003058 <TIM_Base_SetConfig+0xb8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00b      	beq.n	8003002 <TIM_Base_SetConfig+0x62>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff0:	d007      	beq.n	8003002 <TIM_Base_SetConfig+0x62>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a19      	ldr	r2, [pc, #100]	; (800305c <TIM_Base_SetConfig+0xbc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d003      	beq.n	8003002 <TIM_Base_SetConfig+0x62>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a18      	ldr	r2, [pc, #96]	; (8003060 <TIM_Base_SetConfig+0xc0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d108      	bne.n	8003014 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a07      	ldr	r2, [pc, #28]	; (8003058 <TIM_Base_SetConfig+0xb8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d103      	bne.n	8003048 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	615a      	str	r2, [r3, #20]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800

08003064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f023 0201 	bic.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0303 	bic.w	r3, r3, #3
 800309a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f023 0302 	bic.w	r3, r3, #2
 80030ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a1c      	ldr	r2, [pc, #112]	; (800312c <TIM_OC1_SetConfig+0xc8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d10c      	bne.n	80030da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f023 0308 	bic.w	r3, r3, #8
 80030c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a13      	ldr	r2, [pc, #76]	; (800312c <TIM_OC1_SetConfig+0xc8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d111      	bne.n	8003106 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	621a      	str	r2, [r3, #32]
}
 8003120:	bf00      	nop
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40012c00 	.word	0x40012c00

08003130 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	f023 0210 	bic.w	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f023 0320 	bic.w	r3, r3, #32
 800317a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <TIM_OC2_SetConfig+0xd0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d10d      	bne.n	80031ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a14      	ldr	r2, [pc, #80]	; (8003200 <TIM_OC2_SetConfig+0xd0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d113      	bne.n	80031dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	621a      	str	r2, [r3, #32]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	40012c00 	.word	0x40012c00

08003204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0303 	bic.w	r3, r3, #3
 800323a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800324c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <TIM_OC3_SetConfig+0xd0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10d      	bne.n	800327e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <TIM_OC3_SetConfig+0xd0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d113      	bne.n	80032ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800328c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	621a      	str	r2, [r3, #32]
}
 80032c8:	bf00      	nop
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40012c00 	.word	0x40012c00

080032d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	031b      	lsls	r3, r3, #12
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a0f      	ldr	r2, [pc, #60]	; (8003370 <TIM_OC4_SetConfig+0x98>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d109      	bne.n	800334c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800333e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	40012c00 	.word	0x40012c00

08003374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003388:	2302      	movs	r3, #2
 800338a:	e032      	b.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e03f      	b.n	800348e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe f948 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f829 	bl	8003498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034d2:	f023 030c 	bic.w	r3, r3, #12
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	68f9      	ldr	r1, [r7, #12]
 80034dc:	430b      	orrs	r3, r1
 80034de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a52      	ldr	r2, [pc, #328]	; (8003644 <UART_SetConfig+0x1ac>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d14e      	bne.n	800359e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003500:	f7ff fc2a 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8003504:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <UART_SetConfig+0x1b0>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	0119      	lsls	r1, r3, #4
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009a      	lsls	r2, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	fbb2 f2f3 	udiv	r2, r2, r3
 800353c:	4b42      	ldr	r3, [pc, #264]	; (8003648 <UART_SetConfig+0x1b0>)
 800353e:	fba3 0302 	umull	r0, r3, r3, r2
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2064      	movs	r0, #100	; 0x64
 8003546:	fb00 f303 	mul.w	r3, r0, r3
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	3332      	adds	r3, #50	; 0x32
 8003550:	4a3d      	ldr	r2, [pc, #244]	; (8003648 <UART_SetConfig+0x1b0>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355c:	4419      	add	r1, r3
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009a      	lsls	r2, r3, #2
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	fbb2 f2f3 	udiv	r2, r2, r3
 8003574:	4b34      	ldr	r3, [pc, #208]	; (8003648 <UART_SetConfig+0x1b0>)
 8003576:	fba3 0302 	umull	r0, r3, r3, r2
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2064      	movs	r0, #100	; 0x64
 800357e:	fb00 f303 	mul.w	r3, r0, r3
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	3332      	adds	r3, #50	; 0x32
 8003588:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <UART_SetConfig+0x1b0>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	f003 020f 	and.w	r2, r3, #15
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	440a      	add	r2, r1
 800359a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800359c:	e04d      	b.n	800363a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800359e:	f7ff fbc7 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 80035a2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009a      	lsls	r2, r3, #2
 80035ae:	441a      	add	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	4a23      	ldr	r2, [pc, #140]	; (8003648 <UART_SetConfig+0x1b0>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	0119      	lsls	r1, r3, #4
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009a      	lsls	r2, r3, #2
 80035ce:	441a      	add	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <UART_SetConfig+0x1b0>)
 80035dc:	fba3 0302 	umull	r0, r3, r3, r2
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	2064      	movs	r0, #100	; 0x64
 80035e4:	fb00 f303 	mul.w	r3, r0, r3
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	3332      	adds	r3, #50	; 0x32
 80035ee:	4a16      	ldr	r2, [pc, #88]	; (8003648 <UART_SetConfig+0x1b0>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035fa:	4419      	add	r1, r3
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	009a      	lsls	r2, r3, #2
 8003606:	441a      	add	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <UART_SetConfig+0x1b0>)
 8003614:	fba3 0302 	umull	r0, r3, r3, r2
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	2064      	movs	r0, #100	; 0x64
 800361c:	fb00 f303 	mul.w	r3, r0, r3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	3332      	adds	r3, #50	; 0x32
 8003626:	4a08      	ldr	r2, [pc, #32]	; (8003648 <UART_SetConfig+0x1b0>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	440a      	add	r2, r1
 8003638:	609a      	str	r2, [r3, #8]
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40013800 	.word	0x40013800
 8003648:	51eb851f 	.word	0x51eb851f

0800364c <__errno>:
 800364c:	4b01      	ldr	r3, [pc, #4]	; (8003654 <__errno+0x8>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000010 	.word	0x20000010

08003658 <__libc_init_array>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	2500      	movs	r5, #0
 800365c:	4e0c      	ldr	r6, [pc, #48]	; (8003690 <__libc_init_array+0x38>)
 800365e:	4c0d      	ldr	r4, [pc, #52]	; (8003694 <__libc_init_array+0x3c>)
 8003660:	1ba4      	subs	r4, r4, r6
 8003662:	10a4      	asrs	r4, r4, #2
 8003664:	42a5      	cmp	r5, r4
 8003666:	d109      	bne.n	800367c <__libc_init_array+0x24>
 8003668:	f003 fd60 	bl	800712c <_init>
 800366c:	2500      	movs	r5, #0
 800366e:	4e0a      	ldr	r6, [pc, #40]	; (8003698 <__libc_init_array+0x40>)
 8003670:	4c0a      	ldr	r4, [pc, #40]	; (800369c <__libc_init_array+0x44>)
 8003672:	1ba4      	subs	r4, r4, r6
 8003674:	10a4      	asrs	r4, r4, #2
 8003676:	42a5      	cmp	r5, r4
 8003678:	d105      	bne.n	8003686 <__libc_init_array+0x2e>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003680:	4798      	blx	r3
 8003682:	3501      	adds	r5, #1
 8003684:	e7ee      	b.n	8003664 <__libc_init_array+0xc>
 8003686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800368a:	4798      	blx	r3
 800368c:	3501      	adds	r5, #1
 800368e:	e7f2      	b.n	8003676 <__libc_init_array+0x1e>
 8003690:	08007c50 	.word	0x08007c50
 8003694:	08007c50 	.word	0x08007c50
 8003698:	08007c50 	.word	0x08007c50
 800369c:	08007c54 	.word	0x08007c54

080036a0 <memset>:
 80036a0:	4603      	mov	r3, r0
 80036a2:	4402      	add	r2, r0
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d100      	bne.n	80036aa <memset+0xa>
 80036a8:	4770      	bx	lr
 80036aa:	f803 1b01 	strb.w	r1, [r3], #1
 80036ae:	e7f9      	b.n	80036a4 <memset+0x4>

080036b0 <__cvt>:
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b6:	461e      	mov	r6, r3
 80036b8:	bfbb      	ittet	lt
 80036ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80036be:	461e      	movlt	r6, r3
 80036c0:	2300      	movge	r3, #0
 80036c2:	232d      	movlt	r3, #45	; 0x2d
 80036c4:	b088      	sub	sp, #32
 80036c6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80036c8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80036cc:	f027 0720 	bic.w	r7, r7, #32
 80036d0:	2f46      	cmp	r7, #70	; 0x46
 80036d2:	4614      	mov	r4, r2
 80036d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80036d6:	700b      	strb	r3, [r1, #0]
 80036d8:	d004      	beq.n	80036e4 <__cvt+0x34>
 80036da:	2f45      	cmp	r7, #69	; 0x45
 80036dc:	d100      	bne.n	80036e0 <__cvt+0x30>
 80036de:	3501      	adds	r5, #1
 80036e0:	2302      	movs	r3, #2
 80036e2:	e000      	b.n	80036e6 <__cvt+0x36>
 80036e4:	2303      	movs	r3, #3
 80036e6:	aa07      	add	r2, sp, #28
 80036e8:	9204      	str	r2, [sp, #16]
 80036ea:	aa06      	add	r2, sp, #24
 80036ec:	e9cd a202 	strd	sl, r2, [sp, #8]
 80036f0:	e9cd 3500 	strd	r3, r5, [sp]
 80036f4:	4622      	mov	r2, r4
 80036f6:	4633      	mov	r3, r6
 80036f8:	f001 fd7e 	bl	80051f8 <_dtoa_r>
 80036fc:	2f47      	cmp	r7, #71	; 0x47
 80036fe:	4680      	mov	r8, r0
 8003700:	d102      	bne.n	8003708 <__cvt+0x58>
 8003702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003704:	07db      	lsls	r3, r3, #31
 8003706:	d526      	bpl.n	8003756 <__cvt+0xa6>
 8003708:	2f46      	cmp	r7, #70	; 0x46
 800370a:	eb08 0905 	add.w	r9, r8, r5
 800370e:	d111      	bne.n	8003734 <__cvt+0x84>
 8003710:	f898 3000 	ldrb.w	r3, [r8]
 8003714:	2b30      	cmp	r3, #48	; 0x30
 8003716:	d10a      	bne.n	800372e <__cvt+0x7e>
 8003718:	2200      	movs	r2, #0
 800371a:	2300      	movs	r3, #0
 800371c:	4620      	mov	r0, r4
 800371e:	4631      	mov	r1, r6
 8003720:	f7fd f942 	bl	80009a8 <__aeabi_dcmpeq>
 8003724:	b918      	cbnz	r0, 800372e <__cvt+0x7e>
 8003726:	f1c5 0501 	rsb	r5, r5, #1
 800372a:	f8ca 5000 	str.w	r5, [sl]
 800372e:	f8da 3000 	ldr.w	r3, [sl]
 8003732:	4499      	add	r9, r3
 8003734:	2200      	movs	r2, #0
 8003736:	2300      	movs	r3, #0
 8003738:	4620      	mov	r0, r4
 800373a:	4631      	mov	r1, r6
 800373c:	f7fd f934 	bl	80009a8 <__aeabi_dcmpeq>
 8003740:	b938      	cbnz	r0, 8003752 <__cvt+0xa2>
 8003742:	2230      	movs	r2, #48	; 0x30
 8003744:	9b07      	ldr	r3, [sp, #28]
 8003746:	454b      	cmp	r3, r9
 8003748:	d205      	bcs.n	8003756 <__cvt+0xa6>
 800374a:	1c59      	adds	r1, r3, #1
 800374c:	9107      	str	r1, [sp, #28]
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e7f8      	b.n	8003744 <__cvt+0x94>
 8003752:	f8cd 901c 	str.w	r9, [sp, #28]
 8003756:	4640      	mov	r0, r8
 8003758:	9b07      	ldr	r3, [sp, #28]
 800375a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800375c:	eba3 0308 	sub.w	r3, r3, r8
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	b008      	add	sp, #32
 8003764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003768 <__exponent>:
 8003768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800376a:	2900      	cmp	r1, #0
 800376c:	bfb4      	ite	lt
 800376e:	232d      	movlt	r3, #45	; 0x2d
 8003770:	232b      	movge	r3, #43	; 0x2b
 8003772:	4604      	mov	r4, r0
 8003774:	bfb8      	it	lt
 8003776:	4249      	neglt	r1, r1
 8003778:	2909      	cmp	r1, #9
 800377a:	f804 2b02 	strb.w	r2, [r4], #2
 800377e:	7043      	strb	r3, [r0, #1]
 8003780:	dd21      	ble.n	80037c6 <__exponent+0x5e>
 8003782:	f10d 0307 	add.w	r3, sp, #7
 8003786:	461f      	mov	r7, r3
 8003788:	260a      	movs	r6, #10
 800378a:	fb91 f5f6 	sdiv	r5, r1, r6
 800378e:	fb06 1115 	mls	r1, r6, r5, r1
 8003792:	2d09      	cmp	r5, #9
 8003794:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003798:	f803 1c01 	strb.w	r1, [r3, #-1]
 800379c:	f103 32ff 	add.w	r2, r3, #4294967295
 80037a0:	4629      	mov	r1, r5
 80037a2:	dc09      	bgt.n	80037b8 <__exponent+0x50>
 80037a4:	3130      	adds	r1, #48	; 0x30
 80037a6:	3b02      	subs	r3, #2
 80037a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80037ac:	42bb      	cmp	r3, r7
 80037ae:	4622      	mov	r2, r4
 80037b0:	d304      	bcc.n	80037bc <__exponent+0x54>
 80037b2:	1a10      	subs	r0, r2, r0
 80037b4:	b003      	add	sp, #12
 80037b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b8:	4613      	mov	r3, r2
 80037ba:	e7e6      	b.n	800378a <__exponent+0x22>
 80037bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037c0:	f804 2b01 	strb.w	r2, [r4], #1
 80037c4:	e7f2      	b.n	80037ac <__exponent+0x44>
 80037c6:	2330      	movs	r3, #48	; 0x30
 80037c8:	4419      	add	r1, r3
 80037ca:	7083      	strb	r3, [r0, #2]
 80037cc:	1d02      	adds	r2, r0, #4
 80037ce:	70c1      	strb	r1, [r0, #3]
 80037d0:	e7ef      	b.n	80037b2 <__exponent+0x4a>
	...

080037d4 <_printf_float>:
 80037d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037d8:	b091      	sub	sp, #68	; 0x44
 80037da:	460c      	mov	r4, r1
 80037dc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80037de:	4693      	mov	fp, r2
 80037e0:	461e      	mov	r6, r3
 80037e2:	4605      	mov	r5, r0
 80037e4:	f002 fdea 	bl	80063bc <_localeconv_r>
 80037e8:	6803      	ldr	r3, [r0, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	9309      	str	r3, [sp, #36]	; 0x24
 80037ee:	f7fc fcaf 	bl	8000150 <strlen>
 80037f2:	2300      	movs	r3, #0
 80037f4:	930e      	str	r3, [sp, #56]	; 0x38
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	900a      	str	r0, [sp, #40]	; 0x28
 80037fa:	3307      	adds	r3, #7
 80037fc:	f023 0307 	bic.w	r3, r3, #7
 8003800:	f103 0208 	add.w	r2, r3, #8
 8003804:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003808:	f8d4 a000 	ldr.w	sl, [r4]
 800380c:	603a      	str	r2, [r7, #0]
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003816:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800381a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800381e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003820:	f04f 32ff 	mov.w	r2, #4294967295
 8003824:	4ba6      	ldr	r3, [pc, #664]	; (8003ac0 <_printf_float+0x2ec>)
 8003826:	4638      	mov	r0, r7
 8003828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800382a:	f7fd f8ef 	bl	8000a0c <__aeabi_dcmpun>
 800382e:	bb68      	cbnz	r0, 800388c <_printf_float+0xb8>
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	4ba2      	ldr	r3, [pc, #648]	; (8003ac0 <_printf_float+0x2ec>)
 8003836:	4638      	mov	r0, r7
 8003838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800383a:	f7fd f8c9 	bl	80009d0 <__aeabi_dcmple>
 800383e:	bb28      	cbnz	r0, 800388c <_printf_float+0xb8>
 8003840:	2200      	movs	r2, #0
 8003842:	2300      	movs	r3, #0
 8003844:	4638      	mov	r0, r7
 8003846:	4649      	mov	r1, r9
 8003848:	f7fd f8b8 	bl	80009bc <__aeabi_dcmplt>
 800384c:	b110      	cbz	r0, 8003854 <_printf_float+0x80>
 800384e:	232d      	movs	r3, #45	; 0x2d
 8003850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003854:	4f9b      	ldr	r7, [pc, #620]	; (8003ac4 <_printf_float+0x2f0>)
 8003856:	4b9c      	ldr	r3, [pc, #624]	; (8003ac8 <_printf_float+0x2f4>)
 8003858:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800385c:	bf98      	it	ls
 800385e:	461f      	movls	r7, r3
 8003860:	2303      	movs	r3, #3
 8003862:	f04f 0900 	mov.w	r9, #0
 8003866:	6123      	str	r3, [r4, #16]
 8003868:	f02a 0304 	bic.w	r3, sl, #4
 800386c:	6023      	str	r3, [r4, #0]
 800386e:	9600      	str	r6, [sp, #0]
 8003870:	465b      	mov	r3, fp
 8003872:	aa0f      	add	r2, sp, #60	; 0x3c
 8003874:	4621      	mov	r1, r4
 8003876:	4628      	mov	r0, r5
 8003878:	f000 f9e2 	bl	8003c40 <_printf_common>
 800387c:	3001      	adds	r0, #1
 800387e:	f040 8090 	bne.w	80039a2 <_printf_float+0x1ce>
 8003882:	f04f 30ff 	mov.w	r0, #4294967295
 8003886:	b011      	add	sp, #68	; 0x44
 8003888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800388c:	463a      	mov	r2, r7
 800388e:	464b      	mov	r3, r9
 8003890:	4638      	mov	r0, r7
 8003892:	4649      	mov	r1, r9
 8003894:	f7fd f8ba 	bl	8000a0c <__aeabi_dcmpun>
 8003898:	b110      	cbz	r0, 80038a0 <_printf_float+0xcc>
 800389a:	4f8c      	ldr	r7, [pc, #560]	; (8003acc <_printf_float+0x2f8>)
 800389c:	4b8c      	ldr	r3, [pc, #560]	; (8003ad0 <_printf_float+0x2fc>)
 800389e:	e7db      	b.n	8003858 <_printf_float+0x84>
 80038a0:	6863      	ldr	r3, [r4, #4]
 80038a2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	a80d      	add	r0, sp, #52	; 0x34
 80038aa:	a90e      	add	r1, sp, #56	; 0x38
 80038ac:	d140      	bne.n	8003930 <_printf_float+0x15c>
 80038ae:	2306      	movs	r3, #6
 80038b0:	6063      	str	r3, [r4, #4]
 80038b2:	f04f 0c00 	mov.w	ip, #0
 80038b6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80038ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80038be:	6863      	ldr	r3, [r4, #4]
 80038c0:	6022      	str	r2, [r4, #0]
 80038c2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	463a      	mov	r2, r7
 80038ca:	464b      	mov	r3, r9
 80038cc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80038d0:	4628      	mov	r0, r5
 80038d2:	f7ff feed 	bl	80036b0 <__cvt>
 80038d6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80038da:	2b47      	cmp	r3, #71	; 0x47
 80038dc:	4607      	mov	r7, r0
 80038de:	d109      	bne.n	80038f4 <_printf_float+0x120>
 80038e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038e2:	1cd8      	adds	r0, r3, #3
 80038e4:	db02      	blt.n	80038ec <_printf_float+0x118>
 80038e6:	6862      	ldr	r2, [r4, #4]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	dd47      	ble.n	800397c <_printf_float+0x1a8>
 80038ec:	f1a8 0802 	sub.w	r8, r8, #2
 80038f0:	fa5f f888 	uxtb.w	r8, r8
 80038f4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80038f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80038fa:	d824      	bhi.n	8003946 <_printf_float+0x172>
 80038fc:	3901      	subs	r1, #1
 80038fe:	4642      	mov	r2, r8
 8003900:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003904:	910d      	str	r1, [sp, #52]	; 0x34
 8003906:	f7ff ff2f 	bl	8003768 <__exponent>
 800390a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800390c:	4681      	mov	r9, r0
 800390e:	1813      	adds	r3, r2, r0
 8003910:	2a01      	cmp	r2, #1
 8003912:	6123      	str	r3, [r4, #16]
 8003914:	dc02      	bgt.n	800391c <_printf_float+0x148>
 8003916:	6822      	ldr	r2, [r4, #0]
 8003918:	07d1      	lsls	r1, r2, #31
 800391a:	d501      	bpl.n	8003920 <_printf_float+0x14c>
 800391c:	3301      	adds	r3, #1
 800391e:	6123      	str	r3, [r4, #16]
 8003920:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0a2      	beq.n	800386e <_printf_float+0x9a>
 8003928:	232d      	movs	r3, #45	; 0x2d
 800392a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800392e:	e79e      	b.n	800386e <_printf_float+0x9a>
 8003930:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003934:	f000 816e 	beq.w	8003c14 <_printf_float+0x440>
 8003938:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800393c:	d1b9      	bne.n	80038b2 <_printf_float+0xde>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1b7      	bne.n	80038b2 <_printf_float+0xde>
 8003942:	2301      	movs	r3, #1
 8003944:	e7b4      	b.n	80038b0 <_printf_float+0xdc>
 8003946:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800394a:	d119      	bne.n	8003980 <_printf_float+0x1ac>
 800394c:	2900      	cmp	r1, #0
 800394e:	6863      	ldr	r3, [r4, #4]
 8003950:	dd0c      	ble.n	800396c <_printf_float+0x198>
 8003952:	6121      	str	r1, [r4, #16]
 8003954:	b913      	cbnz	r3, 800395c <_printf_float+0x188>
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	07d2      	lsls	r2, r2, #31
 800395a:	d502      	bpl.n	8003962 <_printf_float+0x18e>
 800395c:	3301      	adds	r3, #1
 800395e:	440b      	add	r3, r1
 8003960:	6123      	str	r3, [r4, #16]
 8003962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003964:	f04f 0900 	mov.w	r9, #0
 8003968:	65a3      	str	r3, [r4, #88]	; 0x58
 800396a:	e7d9      	b.n	8003920 <_printf_float+0x14c>
 800396c:	b913      	cbnz	r3, 8003974 <_printf_float+0x1a0>
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	07d0      	lsls	r0, r2, #31
 8003972:	d501      	bpl.n	8003978 <_printf_float+0x1a4>
 8003974:	3302      	adds	r3, #2
 8003976:	e7f3      	b.n	8003960 <_printf_float+0x18c>
 8003978:	2301      	movs	r3, #1
 800397a:	e7f1      	b.n	8003960 <_printf_float+0x18c>
 800397c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003980:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003984:	4293      	cmp	r3, r2
 8003986:	db05      	blt.n	8003994 <_printf_float+0x1c0>
 8003988:	6822      	ldr	r2, [r4, #0]
 800398a:	6123      	str	r3, [r4, #16]
 800398c:	07d1      	lsls	r1, r2, #31
 800398e:	d5e8      	bpl.n	8003962 <_printf_float+0x18e>
 8003990:	3301      	adds	r3, #1
 8003992:	e7e5      	b.n	8003960 <_printf_float+0x18c>
 8003994:	2b00      	cmp	r3, #0
 8003996:	bfcc      	ite	gt
 8003998:	2301      	movgt	r3, #1
 800399a:	f1c3 0302 	rsble	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	e7de      	b.n	8003960 <_printf_float+0x18c>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	055a      	lsls	r2, r3, #21
 80039a6:	d407      	bmi.n	80039b8 <_printf_float+0x1e4>
 80039a8:	6923      	ldr	r3, [r4, #16]
 80039aa:	463a      	mov	r2, r7
 80039ac:	4659      	mov	r1, fp
 80039ae:	4628      	mov	r0, r5
 80039b0:	47b0      	blx	r6
 80039b2:	3001      	adds	r0, #1
 80039b4:	d129      	bne.n	8003a0a <_printf_float+0x236>
 80039b6:	e764      	b.n	8003882 <_printf_float+0xae>
 80039b8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80039bc:	f240 80d7 	bls.w	8003b6e <_printf_float+0x39a>
 80039c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039c4:	2200      	movs	r2, #0
 80039c6:	2300      	movs	r3, #0
 80039c8:	f7fc ffee 	bl	80009a8 <__aeabi_dcmpeq>
 80039cc:	b388      	cbz	r0, 8003a32 <_printf_float+0x25e>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4a40      	ldr	r2, [pc, #256]	; (8003ad4 <_printf_float+0x300>)
 80039d2:	4659      	mov	r1, fp
 80039d4:	4628      	mov	r0, r5
 80039d6:	47b0      	blx	r6
 80039d8:	3001      	adds	r0, #1
 80039da:	f43f af52 	beq.w	8003882 <_printf_float+0xae>
 80039de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80039e2:	429a      	cmp	r2, r3
 80039e4:	db02      	blt.n	80039ec <_printf_float+0x218>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	07d8      	lsls	r0, r3, #31
 80039ea:	d50e      	bpl.n	8003a0a <_printf_float+0x236>
 80039ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039f0:	4659      	mov	r1, fp
 80039f2:	4628      	mov	r0, r5
 80039f4:	47b0      	blx	r6
 80039f6:	3001      	adds	r0, #1
 80039f8:	f43f af43 	beq.w	8003882 <_printf_float+0xae>
 80039fc:	2700      	movs	r7, #0
 80039fe:	f104 081a 	add.w	r8, r4, #26
 8003a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a04:	3b01      	subs	r3, #1
 8003a06:	42bb      	cmp	r3, r7
 8003a08:	dc09      	bgt.n	8003a1e <_printf_float+0x24a>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	079f      	lsls	r7, r3, #30
 8003a0e:	f100 80fd 	bmi.w	8003c0c <_printf_float+0x438>
 8003a12:	68e0      	ldr	r0, [r4, #12]
 8003a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a16:	4298      	cmp	r0, r3
 8003a18:	bfb8      	it	lt
 8003a1a:	4618      	movlt	r0, r3
 8003a1c:	e733      	b.n	8003886 <_printf_float+0xb2>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4642      	mov	r2, r8
 8003a22:	4659      	mov	r1, fp
 8003a24:	4628      	mov	r0, r5
 8003a26:	47b0      	blx	r6
 8003a28:	3001      	adds	r0, #1
 8003a2a:	f43f af2a 	beq.w	8003882 <_printf_float+0xae>
 8003a2e:	3701      	adds	r7, #1
 8003a30:	e7e7      	b.n	8003a02 <_printf_float+0x22e>
 8003a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	dc2b      	bgt.n	8003a90 <_printf_float+0x2bc>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	4a26      	ldr	r2, [pc, #152]	; (8003ad4 <_printf_float+0x300>)
 8003a3c:	4659      	mov	r1, fp
 8003a3e:	4628      	mov	r0, r5
 8003a40:	47b0      	blx	r6
 8003a42:	3001      	adds	r0, #1
 8003a44:	f43f af1d 	beq.w	8003882 <_printf_float+0xae>
 8003a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a4a:	b923      	cbnz	r3, 8003a56 <_printf_float+0x282>
 8003a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a4e:	b913      	cbnz	r3, 8003a56 <_printf_float+0x282>
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	07d9      	lsls	r1, r3, #31
 8003a54:	d5d9      	bpl.n	8003a0a <_printf_float+0x236>
 8003a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a5a:	4659      	mov	r1, fp
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	47b0      	blx	r6
 8003a60:	3001      	adds	r0, #1
 8003a62:	f43f af0e 	beq.w	8003882 <_printf_float+0xae>
 8003a66:	f04f 0800 	mov.w	r8, #0
 8003a6a:	f104 091a 	add.w	r9, r4, #26
 8003a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a70:	425b      	negs	r3, r3
 8003a72:	4543      	cmp	r3, r8
 8003a74:	dc01      	bgt.n	8003a7a <_printf_float+0x2a6>
 8003a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a78:	e797      	b.n	80039aa <_printf_float+0x1d6>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	464a      	mov	r2, r9
 8003a7e:	4659      	mov	r1, fp
 8003a80:	4628      	mov	r0, r5
 8003a82:	47b0      	blx	r6
 8003a84:	3001      	adds	r0, #1
 8003a86:	f43f aefc 	beq.w	8003882 <_printf_float+0xae>
 8003a8a:	f108 0801 	add.w	r8, r8, #1
 8003a8e:	e7ee      	b.n	8003a6e <_printf_float+0x29a>
 8003a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a94:	429a      	cmp	r2, r3
 8003a96:	bfa8      	it	ge
 8003a98:	461a      	movge	r2, r3
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	4690      	mov	r8, r2
 8003a9e:	dd07      	ble.n	8003ab0 <_printf_float+0x2dc>
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	4659      	mov	r1, fp
 8003aa4:	463a      	mov	r2, r7
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	47b0      	blx	r6
 8003aaa:	3001      	adds	r0, #1
 8003aac:	f43f aee9 	beq.w	8003882 <_printf_float+0xae>
 8003ab0:	f104 031a 	add.w	r3, r4, #26
 8003ab4:	f04f 0a00 	mov.w	sl, #0
 8003ab8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003abe:	e015      	b.n	8003aec <_printf_float+0x318>
 8003ac0:	7fefffff 	.word	0x7fefffff
 8003ac4:	080079a0 	.word	0x080079a0
 8003ac8:	0800799c 	.word	0x0800799c
 8003acc:	080079a8 	.word	0x080079a8
 8003ad0:	080079a4 	.word	0x080079a4
 8003ad4:	080079ac 	.word	0x080079ac
 8003ad8:	2301      	movs	r3, #1
 8003ada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003adc:	4659      	mov	r1, fp
 8003ade:	4628      	mov	r0, r5
 8003ae0:	47b0      	blx	r6
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	f43f aecd 	beq.w	8003882 <_printf_float+0xae>
 8003ae8:	f10a 0a01 	add.w	sl, sl, #1
 8003aec:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003af0:	eba9 0308 	sub.w	r3, r9, r8
 8003af4:	4553      	cmp	r3, sl
 8003af6:	dcef      	bgt.n	8003ad8 <_printf_float+0x304>
 8003af8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003afc:	429a      	cmp	r2, r3
 8003afe:	444f      	add	r7, r9
 8003b00:	db14      	blt.n	8003b2c <_printf_float+0x358>
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	07da      	lsls	r2, r3, #31
 8003b06:	d411      	bmi.n	8003b2c <_printf_float+0x358>
 8003b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b0c:	eba3 0209 	sub.w	r2, r3, r9
 8003b10:	eba3 0901 	sub.w	r9, r3, r1
 8003b14:	4591      	cmp	r9, r2
 8003b16:	bfa8      	it	ge
 8003b18:	4691      	movge	r9, r2
 8003b1a:	f1b9 0f00 	cmp.w	r9, #0
 8003b1e:	dc0d      	bgt.n	8003b3c <_printf_float+0x368>
 8003b20:	2700      	movs	r7, #0
 8003b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b26:	f104 081a 	add.w	r8, r4, #26
 8003b2a:	e018      	b.n	8003b5e <_printf_float+0x38a>
 8003b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b30:	4659      	mov	r1, fp
 8003b32:	4628      	mov	r0, r5
 8003b34:	47b0      	blx	r6
 8003b36:	3001      	adds	r0, #1
 8003b38:	d1e6      	bne.n	8003b08 <_printf_float+0x334>
 8003b3a:	e6a2      	b.n	8003882 <_printf_float+0xae>
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	463a      	mov	r2, r7
 8003b40:	4659      	mov	r1, fp
 8003b42:	4628      	mov	r0, r5
 8003b44:	47b0      	blx	r6
 8003b46:	3001      	adds	r0, #1
 8003b48:	d1ea      	bne.n	8003b20 <_printf_float+0x34c>
 8003b4a:	e69a      	b.n	8003882 <_printf_float+0xae>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4642      	mov	r2, r8
 8003b50:	4659      	mov	r1, fp
 8003b52:	4628      	mov	r0, r5
 8003b54:	47b0      	blx	r6
 8003b56:	3001      	adds	r0, #1
 8003b58:	f43f ae93 	beq.w	8003882 <_printf_float+0xae>
 8003b5c:	3701      	adds	r7, #1
 8003b5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	eba3 0309 	sub.w	r3, r3, r9
 8003b68:	42bb      	cmp	r3, r7
 8003b6a:	dcef      	bgt.n	8003b4c <_printf_float+0x378>
 8003b6c:	e74d      	b.n	8003a0a <_printf_float+0x236>
 8003b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b70:	2a01      	cmp	r2, #1
 8003b72:	dc01      	bgt.n	8003b78 <_printf_float+0x3a4>
 8003b74:	07db      	lsls	r3, r3, #31
 8003b76:	d538      	bpl.n	8003bea <_printf_float+0x416>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	463a      	mov	r2, r7
 8003b7c:	4659      	mov	r1, fp
 8003b7e:	4628      	mov	r0, r5
 8003b80:	47b0      	blx	r6
 8003b82:	3001      	adds	r0, #1
 8003b84:	f43f ae7d 	beq.w	8003882 <_printf_float+0xae>
 8003b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	4628      	mov	r0, r5
 8003b90:	47b0      	blx	r6
 8003b92:	3001      	adds	r0, #1
 8003b94:	f107 0701 	add.w	r7, r7, #1
 8003b98:	f43f ae73 	beq.w	8003882 <_printf_float+0xae>
 8003b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f103 38ff 	add.w	r8, r3, #4294967295
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f7fc fefd 	bl	80009a8 <__aeabi_dcmpeq>
 8003bae:	b9c0      	cbnz	r0, 8003be2 <_printf_float+0x40e>
 8003bb0:	4643      	mov	r3, r8
 8003bb2:	463a      	mov	r2, r7
 8003bb4:	4659      	mov	r1, fp
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	47b0      	blx	r6
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d10d      	bne.n	8003bda <_printf_float+0x406>
 8003bbe:	e660      	b.n	8003882 <_printf_float+0xae>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	4642      	mov	r2, r8
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	47b0      	blx	r6
 8003bca:	3001      	adds	r0, #1
 8003bcc:	f43f ae59 	beq.w	8003882 <_printf_float+0xae>
 8003bd0:	3701      	adds	r7, #1
 8003bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	42bb      	cmp	r3, r7
 8003bd8:	dcf2      	bgt.n	8003bc0 <_printf_float+0x3ec>
 8003bda:	464b      	mov	r3, r9
 8003bdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003be0:	e6e4      	b.n	80039ac <_printf_float+0x1d8>
 8003be2:	2700      	movs	r7, #0
 8003be4:	f104 081a 	add.w	r8, r4, #26
 8003be8:	e7f3      	b.n	8003bd2 <_printf_float+0x3fe>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e7e1      	b.n	8003bb2 <_printf_float+0x3de>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	4659      	mov	r1, fp
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	47b0      	blx	r6
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	f43f ae42 	beq.w	8003882 <_printf_float+0xae>
 8003bfe:	3701      	adds	r7, #1
 8003c00:	68e3      	ldr	r3, [r4, #12]
 8003c02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	42bb      	cmp	r3, r7
 8003c08:	dcf1      	bgt.n	8003bee <_printf_float+0x41a>
 8003c0a:	e702      	b.n	8003a12 <_printf_float+0x23e>
 8003c0c:	2700      	movs	r7, #0
 8003c0e:	f104 0819 	add.w	r8, r4, #25
 8003c12:	e7f5      	b.n	8003c00 <_printf_float+0x42c>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f43f ae94 	beq.w	8003942 <_printf_float+0x16e>
 8003c1a:	f04f 0c00 	mov.w	ip, #0
 8003c1e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003c22:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003c26:	6022      	str	r2, [r4, #0]
 8003c28:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003c2c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	463a      	mov	r2, r7
 8003c34:	464b      	mov	r3, r9
 8003c36:	4628      	mov	r0, r5
 8003c38:	f7ff fd3a 	bl	80036b0 <__cvt>
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	e64f      	b.n	80038e0 <_printf_float+0x10c>

08003c40 <_printf_common>:
 8003c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c44:	4691      	mov	r9, r2
 8003c46:	461f      	mov	r7, r3
 8003c48:	688a      	ldr	r2, [r1, #8]
 8003c4a:	690b      	ldr	r3, [r1, #16]
 8003c4c:	4606      	mov	r6, r0
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	bfb8      	it	lt
 8003c52:	4613      	movlt	r3, r2
 8003c54:	f8c9 3000 	str.w	r3, [r9]
 8003c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c62:	b112      	cbz	r2, 8003c6a <_printf_common+0x2a>
 8003c64:	3301      	adds	r3, #1
 8003c66:	f8c9 3000 	str.w	r3, [r9]
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	0699      	lsls	r1, r3, #26
 8003c6e:	bf42      	ittt	mi
 8003c70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c74:	3302      	addmi	r3, #2
 8003c76:	f8c9 3000 	strmi.w	r3, [r9]
 8003c7a:	6825      	ldr	r5, [r4, #0]
 8003c7c:	f015 0506 	ands.w	r5, r5, #6
 8003c80:	d107      	bne.n	8003c92 <_printf_common+0x52>
 8003c82:	f104 0a19 	add.w	sl, r4, #25
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	f8d9 2000 	ldr.w	r2, [r9]
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	42ab      	cmp	r3, r5
 8003c90:	dc29      	bgt.n	8003ce6 <_printf_common+0xa6>
 8003c92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	3300      	adds	r3, #0
 8003c9a:	bf18      	it	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	0692      	lsls	r2, r2, #26
 8003ca0:	d42e      	bmi.n	8003d00 <_printf_common+0xc0>
 8003ca2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ca6:	4639      	mov	r1, r7
 8003ca8:	4630      	mov	r0, r6
 8003caa:	47c0      	blx	r8
 8003cac:	3001      	adds	r0, #1
 8003cae:	d021      	beq.n	8003cf4 <_printf_common+0xb4>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	68e5      	ldr	r5, [r4, #12]
 8003cb4:	f003 0306 	and.w	r3, r3, #6
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	bf18      	it	ne
 8003cbc:	2500      	movne	r5, #0
 8003cbe:	f8d9 2000 	ldr.w	r2, [r9]
 8003cc2:	f04f 0900 	mov.w	r9, #0
 8003cc6:	bf08      	it	eq
 8003cc8:	1aad      	subeq	r5, r5, r2
 8003cca:	68a3      	ldr	r3, [r4, #8]
 8003ccc:	6922      	ldr	r2, [r4, #16]
 8003cce:	bf08      	it	eq
 8003cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	bfc4      	itt	gt
 8003cd8:	1a9b      	subgt	r3, r3, r2
 8003cda:	18ed      	addgt	r5, r5, r3
 8003cdc:	341a      	adds	r4, #26
 8003cde:	454d      	cmp	r5, r9
 8003ce0:	d11a      	bne.n	8003d18 <_printf_common+0xd8>
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	e008      	b.n	8003cf8 <_printf_common+0xb8>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	4652      	mov	r2, sl
 8003cea:	4639      	mov	r1, r7
 8003cec:	4630      	mov	r0, r6
 8003cee:	47c0      	blx	r8
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d103      	bne.n	8003cfc <_printf_common+0xbc>
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfc:	3501      	adds	r5, #1
 8003cfe:	e7c2      	b.n	8003c86 <_printf_common+0x46>
 8003d00:	2030      	movs	r0, #48	; 0x30
 8003d02:	18e1      	adds	r1, r4, r3
 8003d04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d0e:	4422      	add	r2, r4
 8003d10:	3302      	adds	r3, #2
 8003d12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d16:	e7c4      	b.n	8003ca2 <_printf_common+0x62>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	4622      	mov	r2, r4
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	4630      	mov	r0, r6
 8003d20:	47c0      	blx	r8
 8003d22:	3001      	adds	r0, #1
 8003d24:	d0e6      	beq.n	8003cf4 <_printf_common+0xb4>
 8003d26:	f109 0901 	add.w	r9, r9, #1
 8003d2a:	e7d8      	b.n	8003cde <_printf_common+0x9e>

08003d2c <_printf_i>:
 8003d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d34:	460c      	mov	r4, r1
 8003d36:	7e09      	ldrb	r1, [r1, #24]
 8003d38:	b085      	sub	sp, #20
 8003d3a:	296e      	cmp	r1, #110	; 0x6e
 8003d3c:	4617      	mov	r7, r2
 8003d3e:	4606      	mov	r6, r0
 8003d40:	4698      	mov	r8, r3
 8003d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d44:	f000 80b3 	beq.w	8003eae <_printf_i+0x182>
 8003d48:	d822      	bhi.n	8003d90 <_printf_i+0x64>
 8003d4a:	2963      	cmp	r1, #99	; 0x63
 8003d4c:	d036      	beq.n	8003dbc <_printf_i+0x90>
 8003d4e:	d80a      	bhi.n	8003d66 <_printf_i+0x3a>
 8003d50:	2900      	cmp	r1, #0
 8003d52:	f000 80b9 	beq.w	8003ec8 <_printf_i+0x19c>
 8003d56:	2958      	cmp	r1, #88	; 0x58
 8003d58:	f000 8083 	beq.w	8003e62 <_printf_i+0x136>
 8003d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d64:	e032      	b.n	8003dcc <_printf_i+0xa0>
 8003d66:	2964      	cmp	r1, #100	; 0x64
 8003d68:	d001      	beq.n	8003d6e <_printf_i+0x42>
 8003d6a:	2969      	cmp	r1, #105	; 0x69
 8003d6c:	d1f6      	bne.n	8003d5c <_printf_i+0x30>
 8003d6e:	6820      	ldr	r0, [r4, #0]
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	0605      	lsls	r5, r0, #24
 8003d74:	f103 0104 	add.w	r1, r3, #4
 8003d78:	d52a      	bpl.n	8003dd0 <_printf_i+0xa4>
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6011      	str	r1, [r2, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da03      	bge.n	8003d8a <_printf_i+0x5e>
 8003d82:	222d      	movs	r2, #45	; 0x2d
 8003d84:	425b      	negs	r3, r3
 8003d86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d8a:	486f      	ldr	r0, [pc, #444]	; (8003f48 <_printf_i+0x21c>)
 8003d8c:	220a      	movs	r2, #10
 8003d8e:	e039      	b.n	8003e04 <_printf_i+0xd8>
 8003d90:	2973      	cmp	r1, #115	; 0x73
 8003d92:	f000 809d 	beq.w	8003ed0 <_printf_i+0x1a4>
 8003d96:	d808      	bhi.n	8003daa <_printf_i+0x7e>
 8003d98:	296f      	cmp	r1, #111	; 0x6f
 8003d9a:	d020      	beq.n	8003dde <_printf_i+0xb2>
 8003d9c:	2970      	cmp	r1, #112	; 0x70
 8003d9e:	d1dd      	bne.n	8003d5c <_printf_i+0x30>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	f043 0320 	orr.w	r3, r3, #32
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	e003      	b.n	8003db2 <_printf_i+0x86>
 8003daa:	2975      	cmp	r1, #117	; 0x75
 8003dac:	d017      	beq.n	8003dde <_printf_i+0xb2>
 8003dae:	2978      	cmp	r1, #120	; 0x78
 8003db0:	d1d4      	bne.n	8003d5c <_printf_i+0x30>
 8003db2:	2378      	movs	r3, #120	; 0x78
 8003db4:	4865      	ldr	r0, [pc, #404]	; (8003f4c <_printf_i+0x220>)
 8003db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dba:	e055      	b.n	8003e68 <_printf_i+0x13c>
 8003dbc:	6813      	ldr	r3, [r2, #0]
 8003dbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc2:	1d19      	adds	r1, r3, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6011      	str	r1, [r2, #0]
 8003dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e08c      	b.n	8003eea <_printf_i+0x1be>
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dd6:	6011      	str	r1, [r2, #0]
 8003dd8:	bf18      	it	ne
 8003dda:	b21b      	sxthne	r3, r3
 8003ddc:	e7cf      	b.n	8003d7e <_printf_i+0x52>
 8003dde:	6813      	ldr	r3, [r2, #0]
 8003de0:	6825      	ldr	r5, [r4, #0]
 8003de2:	1d18      	adds	r0, r3, #4
 8003de4:	6010      	str	r0, [r2, #0]
 8003de6:	0628      	lsls	r0, r5, #24
 8003de8:	d501      	bpl.n	8003dee <_printf_i+0xc2>
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	e002      	b.n	8003df4 <_printf_i+0xc8>
 8003dee:	0668      	lsls	r0, r5, #25
 8003df0:	d5fb      	bpl.n	8003dea <_printf_i+0xbe>
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	296f      	cmp	r1, #111	; 0x6f
 8003df6:	bf14      	ite	ne
 8003df8:	220a      	movne	r2, #10
 8003dfa:	2208      	moveq	r2, #8
 8003dfc:	4852      	ldr	r0, [pc, #328]	; (8003f48 <_printf_i+0x21c>)
 8003dfe:	2100      	movs	r1, #0
 8003e00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e04:	6865      	ldr	r5, [r4, #4]
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	60a5      	str	r5, [r4, #8]
 8003e0a:	f2c0 8095 	blt.w	8003f38 <_printf_i+0x20c>
 8003e0e:	6821      	ldr	r1, [r4, #0]
 8003e10:	f021 0104 	bic.w	r1, r1, #4
 8003e14:	6021      	str	r1, [r4, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d13d      	bne.n	8003e96 <_printf_i+0x16a>
 8003e1a:	2d00      	cmp	r5, #0
 8003e1c:	f040 808e 	bne.w	8003f3c <_printf_i+0x210>
 8003e20:	4665      	mov	r5, ip
 8003e22:	2a08      	cmp	r2, #8
 8003e24:	d10b      	bne.n	8003e3e <_printf_i+0x112>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	07db      	lsls	r3, r3, #31
 8003e2a:	d508      	bpl.n	8003e3e <_printf_i+0x112>
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	6862      	ldr	r2, [r4, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	bfde      	ittt	le
 8003e34:	2330      	movle	r3, #48	; 0x30
 8003e36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e3e:	ebac 0305 	sub.w	r3, ip, r5
 8003e42:	6123      	str	r3, [r4, #16]
 8003e44:	f8cd 8000 	str.w	r8, [sp]
 8003e48:	463b      	mov	r3, r7
 8003e4a:	aa03      	add	r2, sp, #12
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4630      	mov	r0, r6
 8003e50:	f7ff fef6 	bl	8003c40 <_printf_common>
 8003e54:	3001      	adds	r0, #1
 8003e56:	d14d      	bne.n	8003ef4 <_printf_i+0x1c8>
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5c:	b005      	add	sp, #20
 8003e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e62:	4839      	ldr	r0, [pc, #228]	; (8003f48 <_printf_i+0x21c>)
 8003e64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	6821      	ldr	r1, [r4, #0]
 8003e6c:	1d1d      	adds	r5, r3, #4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6015      	str	r5, [r2, #0]
 8003e72:	060a      	lsls	r2, r1, #24
 8003e74:	d50b      	bpl.n	8003e8e <_printf_i+0x162>
 8003e76:	07ca      	lsls	r2, r1, #31
 8003e78:	bf44      	itt	mi
 8003e7a:	f041 0120 	orrmi.w	r1, r1, #32
 8003e7e:	6021      	strmi	r1, [r4, #0]
 8003e80:	b91b      	cbnz	r3, 8003e8a <_printf_i+0x15e>
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	f022 0220 	bic.w	r2, r2, #32
 8003e88:	6022      	str	r2, [r4, #0]
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	e7b7      	b.n	8003dfe <_printf_i+0xd2>
 8003e8e:	064d      	lsls	r5, r1, #25
 8003e90:	bf48      	it	mi
 8003e92:	b29b      	uxthmi	r3, r3
 8003e94:	e7ef      	b.n	8003e76 <_printf_i+0x14a>
 8003e96:	4665      	mov	r5, ip
 8003e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e9c:	fb02 3311 	mls	r3, r2, r1, r3
 8003ea0:	5cc3      	ldrb	r3, [r0, r3]
 8003ea2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	d1f5      	bne.n	8003e98 <_printf_i+0x16c>
 8003eac:	e7b9      	b.n	8003e22 <_printf_i+0xf6>
 8003eae:	6813      	ldr	r3, [r2, #0]
 8003eb0:	6825      	ldr	r5, [r4, #0]
 8003eb2:	1d18      	adds	r0, r3, #4
 8003eb4:	6961      	ldr	r1, [r4, #20]
 8003eb6:	6010      	str	r0, [r2, #0]
 8003eb8:	0628      	lsls	r0, r5, #24
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	d501      	bpl.n	8003ec2 <_printf_i+0x196>
 8003ebe:	6019      	str	r1, [r3, #0]
 8003ec0:	e002      	b.n	8003ec8 <_printf_i+0x19c>
 8003ec2:	066a      	lsls	r2, r5, #25
 8003ec4:	d5fb      	bpl.n	8003ebe <_printf_i+0x192>
 8003ec6:	8019      	strh	r1, [r3, #0]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	4665      	mov	r5, ip
 8003ecc:	6123      	str	r3, [r4, #16]
 8003ece:	e7b9      	b.n	8003e44 <_printf_i+0x118>
 8003ed0:	6813      	ldr	r3, [r2, #0]
 8003ed2:	1d19      	adds	r1, r3, #4
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	681d      	ldr	r5, [r3, #0]
 8003ed8:	6862      	ldr	r2, [r4, #4]
 8003eda:	2100      	movs	r1, #0
 8003edc:	4628      	mov	r0, r5
 8003ede:	f002 fa95 	bl	800640c <memchr>
 8003ee2:	b108      	cbz	r0, 8003ee8 <_printf_i+0x1bc>
 8003ee4:	1b40      	subs	r0, r0, r5
 8003ee6:	6060      	str	r0, [r4, #4]
 8003ee8:	6863      	ldr	r3, [r4, #4]
 8003eea:	6123      	str	r3, [r4, #16]
 8003eec:	2300      	movs	r3, #0
 8003eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef2:	e7a7      	b.n	8003e44 <_printf_i+0x118>
 8003ef4:	6923      	ldr	r3, [r4, #16]
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	4639      	mov	r1, r7
 8003efa:	4630      	mov	r0, r6
 8003efc:	47c0      	blx	r8
 8003efe:	3001      	adds	r0, #1
 8003f00:	d0aa      	beq.n	8003e58 <_printf_i+0x12c>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	079b      	lsls	r3, r3, #30
 8003f06:	d413      	bmi.n	8003f30 <_printf_i+0x204>
 8003f08:	68e0      	ldr	r0, [r4, #12]
 8003f0a:	9b03      	ldr	r3, [sp, #12]
 8003f0c:	4298      	cmp	r0, r3
 8003f0e:	bfb8      	it	lt
 8003f10:	4618      	movlt	r0, r3
 8003f12:	e7a3      	b.n	8003e5c <_printf_i+0x130>
 8003f14:	2301      	movs	r3, #1
 8003f16:	464a      	mov	r2, r9
 8003f18:	4639      	mov	r1, r7
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	47c0      	blx	r8
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d09a      	beq.n	8003e58 <_printf_i+0x12c>
 8003f22:	3501      	adds	r5, #1
 8003f24:	68e3      	ldr	r3, [r4, #12]
 8003f26:	9a03      	ldr	r2, [sp, #12]
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	42ab      	cmp	r3, r5
 8003f2c:	dcf2      	bgt.n	8003f14 <_printf_i+0x1e8>
 8003f2e:	e7eb      	b.n	8003f08 <_printf_i+0x1dc>
 8003f30:	2500      	movs	r5, #0
 8003f32:	f104 0919 	add.w	r9, r4, #25
 8003f36:	e7f5      	b.n	8003f24 <_printf_i+0x1f8>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ac      	bne.n	8003e96 <_printf_i+0x16a>
 8003f3c:	7803      	ldrb	r3, [r0, #0]
 8003f3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f46:	e76c      	b.n	8003e22 <_printf_i+0xf6>
 8003f48:	080079ae 	.word	0x080079ae
 8003f4c:	080079bf 	.word	0x080079bf

08003f50 <_scanf_float>:
 8003f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f54:	469a      	mov	sl, r3
 8003f56:	688b      	ldr	r3, [r1, #8]
 8003f58:	4616      	mov	r6, r2
 8003f5a:	1e5a      	subs	r2, r3, #1
 8003f5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003f60:	bf88      	it	hi
 8003f62:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003f66:	b087      	sub	sp, #28
 8003f68:	bf85      	ittet	hi
 8003f6a:	189b      	addhi	r3, r3, r2
 8003f6c:	9301      	strhi	r3, [sp, #4]
 8003f6e:	2300      	movls	r3, #0
 8003f70:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003f74:	4688      	mov	r8, r1
 8003f76:	f04f 0b00 	mov.w	fp, #0
 8003f7a:	bf8c      	ite	hi
 8003f7c:	608b      	strhi	r3, [r1, #8]
 8003f7e:	9301      	strls	r3, [sp, #4]
 8003f80:	680b      	ldr	r3, [r1, #0]
 8003f82:	4607      	mov	r7, r0
 8003f84:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003f88:	f848 3b1c 	str.w	r3, [r8], #28
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	4645      	mov	r5, r8
 8003f90:	465a      	mov	r2, fp
 8003f92:	46d9      	mov	r9, fp
 8003f94:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003f98:	f8cd b008 	str.w	fp, [sp, #8]
 8003f9c:	68a1      	ldr	r1, [r4, #8]
 8003f9e:	b181      	cbz	r1, 8003fc2 <_scanf_float+0x72>
 8003fa0:	6833      	ldr	r3, [r6, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b49      	cmp	r3, #73	; 0x49
 8003fa6:	d071      	beq.n	800408c <_scanf_float+0x13c>
 8003fa8:	d84d      	bhi.n	8004046 <_scanf_float+0xf6>
 8003faa:	2b39      	cmp	r3, #57	; 0x39
 8003fac:	d840      	bhi.n	8004030 <_scanf_float+0xe0>
 8003fae:	2b31      	cmp	r3, #49	; 0x31
 8003fb0:	f080 8088 	bcs.w	80040c4 <_scanf_float+0x174>
 8003fb4:	2b2d      	cmp	r3, #45	; 0x2d
 8003fb6:	f000 8090 	beq.w	80040da <_scanf_float+0x18a>
 8003fba:	d815      	bhi.n	8003fe8 <_scanf_float+0x98>
 8003fbc:	2b2b      	cmp	r3, #43	; 0x2b
 8003fbe:	f000 808c 	beq.w	80040da <_scanf_float+0x18a>
 8003fc2:	f1b9 0f00 	cmp.w	r9, #0
 8003fc6:	d003      	beq.n	8003fd0 <_scanf_float+0x80>
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fce:	6023      	str	r3, [r4, #0]
 8003fd0:	3a01      	subs	r2, #1
 8003fd2:	2a01      	cmp	r2, #1
 8003fd4:	f200 80ea 	bhi.w	80041ac <_scanf_float+0x25c>
 8003fd8:	4545      	cmp	r5, r8
 8003fda:	f200 80dc 	bhi.w	8004196 <_scanf_float+0x246>
 8003fde:	2601      	movs	r6, #1
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	b007      	add	sp, #28
 8003fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8003fea:	f000 809f 	beq.w	800412c <_scanf_float+0x1dc>
 8003fee:	2b30      	cmp	r3, #48	; 0x30
 8003ff0:	d1e7      	bne.n	8003fc2 <_scanf_float+0x72>
 8003ff2:	6820      	ldr	r0, [r4, #0]
 8003ff4:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003ff8:	d064      	beq.n	80040c4 <_scanf_float+0x174>
 8003ffa:	9b01      	ldr	r3, [sp, #4]
 8003ffc:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004000:	6020      	str	r0, [r4, #0]
 8004002:	f109 0901 	add.w	r9, r9, #1
 8004006:	b11b      	cbz	r3, 8004010 <_scanf_float+0xc0>
 8004008:	3b01      	subs	r3, #1
 800400a:	3101      	adds	r1, #1
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	60a1      	str	r1, [r4, #8]
 8004010:	68a3      	ldr	r3, [r4, #8]
 8004012:	3b01      	subs	r3, #1
 8004014:	60a3      	str	r3, [r4, #8]
 8004016:	6923      	ldr	r3, [r4, #16]
 8004018:	3301      	adds	r3, #1
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	6873      	ldr	r3, [r6, #4]
 800401e:	3b01      	subs	r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	6073      	str	r3, [r6, #4]
 8004024:	f340 80ac 	ble.w	8004180 <_scanf_float+0x230>
 8004028:	6833      	ldr	r3, [r6, #0]
 800402a:	3301      	adds	r3, #1
 800402c:	6033      	str	r3, [r6, #0]
 800402e:	e7b5      	b.n	8003f9c <_scanf_float+0x4c>
 8004030:	2b45      	cmp	r3, #69	; 0x45
 8004032:	f000 8085 	beq.w	8004140 <_scanf_float+0x1f0>
 8004036:	2b46      	cmp	r3, #70	; 0x46
 8004038:	d06a      	beq.n	8004110 <_scanf_float+0x1c0>
 800403a:	2b41      	cmp	r3, #65	; 0x41
 800403c:	d1c1      	bne.n	8003fc2 <_scanf_float+0x72>
 800403e:	2a01      	cmp	r2, #1
 8004040:	d1bf      	bne.n	8003fc2 <_scanf_float+0x72>
 8004042:	2202      	movs	r2, #2
 8004044:	e046      	b.n	80040d4 <_scanf_float+0x184>
 8004046:	2b65      	cmp	r3, #101	; 0x65
 8004048:	d07a      	beq.n	8004140 <_scanf_float+0x1f0>
 800404a:	d818      	bhi.n	800407e <_scanf_float+0x12e>
 800404c:	2b54      	cmp	r3, #84	; 0x54
 800404e:	d066      	beq.n	800411e <_scanf_float+0x1ce>
 8004050:	d811      	bhi.n	8004076 <_scanf_float+0x126>
 8004052:	2b4e      	cmp	r3, #78	; 0x4e
 8004054:	d1b5      	bne.n	8003fc2 <_scanf_float+0x72>
 8004056:	2a00      	cmp	r2, #0
 8004058:	d146      	bne.n	80040e8 <_scanf_float+0x198>
 800405a:	f1b9 0f00 	cmp.w	r9, #0
 800405e:	d145      	bne.n	80040ec <_scanf_float+0x19c>
 8004060:	6821      	ldr	r1, [r4, #0]
 8004062:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004066:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800406a:	d13f      	bne.n	80040ec <_scanf_float+0x19c>
 800406c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004070:	6021      	str	r1, [r4, #0]
 8004072:	2201      	movs	r2, #1
 8004074:	e02e      	b.n	80040d4 <_scanf_float+0x184>
 8004076:	2b59      	cmp	r3, #89	; 0x59
 8004078:	d01e      	beq.n	80040b8 <_scanf_float+0x168>
 800407a:	2b61      	cmp	r3, #97	; 0x61
 800407c:	e7de      	b.n	800403c <_scanf_float+0xec>
 800407e:	2b6e      	cmp	r3, #110	; 0x6e
 8004080:	d0e9      	beq.n	8004056 <_scanf_float+0x106>
 8004082:	d815      	bhi.n	80040b0 <_scanf_float+0x160>
 8004084:	2b66      	cmp	r3, #102	; 0x66
 8004086:	d043      	beq.n	8004110 <_scanf_float+0x1c0>
 8004088:	2b69      	cmp	r3, #105	; 0x69
 800408a:	d19a      	bne.n	8003fc2 <_scanf_float+0x72>
 800408c:	f1bb 0f00 	cmp.w	fp, #0
 8004090:	d138      	bne.n	8004104 <_scanf_float+0x1b4>
 8004092:	f1b9 0f00 	cmp.w	r9, #0
 8004096:	d197      	bne.n	8003fc8 <_scanf_float+0x78>
 8004098:	6821      	ldr	r1, [r4, #0]
 800409a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800409e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80040a2:	d195      	bne.n	8003fd0 <_scanf_float+0x80>
 80040a4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80040a8:	6021      	str	r1, [r4, #0]
 80040aa:	f04f 0b01 	mov.w	fp, #1
 80040ae:	e011      	b.n	80040d4 <_scanf_float+0x184>
 80040b0:	2b74      	cmp	r3, #116	; 0x74
 80040b2:	d034      	beq.n	800411e <_scanf_float+0x1ce>
 80040b4:	2b79      	cmp	r3, #121	; 0x79
 80040b6:	d184      	bne.n	8003fc2 <_scanf_float+0x72>
 80040b8:	f1bb 0f07 	cmp.w	fp, #7
 80040bc:	d181      	bne.n	8003fc2 <_scanf_float+0x72>
 80040be:	f04f 0b08 	mov.w	fp, #8
 80040c2:	e007      	b.n	80040d4 <_scanf_float+0x184>
 80040c4:	eb12 0f0b 	cmn.w	r2, fp
 80040c8:	f47f af7b 	bne.w	8003fc2 <_scanf_float+0x72>
 80040cc:	6821      	ldr	r1, [r4, #0]
 80040ce:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80040d2:	6021      	str	r1, [r4, #0]
 80040d4:	702b      	strb	r3, [r5, #0]
 80040d6:	3501      	adds	r5, #1
 80040d8:	e79a      	b.n	8004010 <_scanf_float+0xc0>
 80040da:	6821      	ldr	r1, [r4, #0]
 80040dc:	0608      	lsls	r0, r1, #24
 80040de:	f57f af70 	bpl.w	8003fc2 <_scanf_float+0x72>
 80040e2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80040e6:	e7f4      	b.n	80040d2 <_scanf_float+0x182>
 80040e8:	2a02      	cmp	r2, #2
 80040ea:	d047      	beq.n	800417c <_scanf_float+0x22c>
 80040ec:	f1bb 0f01 	cmp.w	fp, #1
 80040f0:	d003      	beq.n	80040fa <_scanf_float+0x1aa>
 80040f2:	f1bb 0f04 	cmp.w	fp, #4
 80040f6:	f47f af64 	bne.w	8003fc2 <_scanf_float+0x72>
 80040fa:	f10b 0b01 	add.w	fp, fp, #1
 80040fe:	fa5f fb8b 	uxtb.w	fp, fp
 8004102:	e7e7      	b.n	80040d4 <_scanf_float+0x184>
 8004104:	f1bb 0f03 	cmp.w	fp, #3
 8004108:	d0f7      	beq.n	80040fa <_scanf_float+0x1aa>
 800410a:	f1bb 0f05 	cmp.w	fp, #5
 800410e:	e7f2      	b.n	80040f6 <_scanf_float+0x1a6>
 8004110:	f1bb 0f02 	cmp.w	fp, #2
 8004114:	f47f af55 	bne.w	8003fc2 <_scanf_float+0x72>
 8004118:	f04f 0b03 	mov.w	fp, #3
 800411c:	e7da      	b.n	80040d4 <_scanf_float+0x184>
 800411e:	f1bb 0f06 	cmp.w	fp, #6
 8004122:	f47f af4e 	bne.w	8003fc2 <_scanf_float+0x72>
 8004126:	f04f 0b07 	mov.w	fp, #7
 800412a:	e7d3      	b.n	80040d4 <_scanf_float+0x184>
 800412c:	6821      	ldr	r1, [r4, #0]
 800412e:	0588      	lsls	r0, r1, #22
 8004130:	f57f af47 	bpl.w	8003fc2 <_scanf_float+0x72>
 8004134:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004138:	6021      	str	r1, [r4, #0]
 800413a:	f8cd 9008 	str.w	r9, [sp, #8]
 800413e:	e7c9      	b.n	80040d4 <_scanf_float+0x184>
 8004140:	6821      	ldr	r1, [r4, #0]
 8004142:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004146:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800414a:	d006      	beq.n	800415a <_scanf_float+0x20a>
 800414c:	0548      	lsls	r0, r1, #21
 800414e:	f57f af38 	bpl.w	8003fc2 <_scanf_float+0x72>
 8004152:	f1b9 0f00 	cmp.w	r9, #0
 8004156:	f43f af3b 	beq.w	8003fd0 <_scanf_float+0x80>
 800415a:	0588      	lsls	r0, r1, #22
 800415c:	bf58      	it	pl
 800415e:	9802      	ldrpl	r0, [sp, #8]
 8004160:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004164:	bf58      	it	pl
 8004166:	eba9 0000 	subpl.w	r0, r9, r0
 800416a:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800416e:	bf58      	it	pl
 8004170:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004174:	6021      	str	r1, [r4, #0]
 8004176:	f04f 0900 	mov.w	r9, #0
 800417a:	e7ab      	b.n	80040d4 <_scanf_float+0x184>
 800417c:	2203      	movs	r2, #3
 800417e:	e7a9      	b.n	80040d4 <_scanf_float+0x184>
 8004180:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004184:	4631      	mov	r1, r6
 8004186:	4638      	mov	r0, r7
 8004188:	9205      	str	r2, [sp, #20]
 800418a:	4798      	blx	r3
 800418c:	9a05      	ldr	r2, [sp, #20]
 800418e:	2800      	cmp	r0, #0
 8004190:	f43f af04 	beq.w	8003f9c <_scanf_float+0x4c>
 8004194:	e715      	b.n	8003fc2 <_scanf_float+0x72>
 8004196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800419a:	4632      	mov	r2, r6
 800419c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80041a0:	4638      	mov	r0, r7
 80041a2:	4798      	blx	r3
 80041a4:	6923      	ldr	r3, [r4, #16]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	6123      	str	r3, [r4, #16]
 80041aa:	e715      	b.n	8003fd8 <_scanf_float+0x88>
 80041ac:	f10b 33ff 	add.w	r3, fp, #4294967295
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d80a      	bhi.n	80041ca <_scanf_float+0x27a>
 80041b4:	f1bb 0f02 	cmp.w	fp, #2
 80041b8:	d967      	bls.n	800428a <_scanf_float+0x33a>
 80041ba:	f1ab 0b03 	sub.w	fp, fp, #3
 80041be:	fa5f fb8b 	uxtb.w	fp, fp
 80041c2:	eba5 0b0b 	sub.w	fp, r5, fp
 80041c6:	455d      	cmp	r5, fp
 80041c8:	d14a      	bne.n	8004260 <_scanf_float+0x310>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	05da      	lsls	r2, r3, #23
 80041ce:	d51f      	bpl.n	8004210 <_scanf_float+0x2c0>
 80041d0:	055b      	lsls	r3, r3, #21
 80041d2:	d467      	bmi.n	80042a4 <_scanf_float+0x354>
 80041d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	2965      	cmp	r1, #101	; 0x65
 80041dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80041e0:	f105 3bff 	add.w	fp, r5, #4294967295
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	d00d      	beq.n	8004204 <_scanf_float+0x2b4>
 80041e8:	2945      	cmp	r1, #69	; 0x45
 80041ea:	d00b      	beq.n	8004204 <_scanf_float+0x2b4>
 80041ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041f0:	4632      	mov	r2, r6
 80041f2:	4638      	mov	r0, r7
 80041f4:	4798      	blx	r3
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	f1a5 0b02 	sub.w	fp, r5, #2
 8004202:	6123      	str	r3, [r4, #16]
 8004204:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004208:	4632      	mov	r2, r6
 800420a:	4638      	mov	r0, r7
 800420c:	4798      	blx	r3
 800420e:	465d      	mov	r5, fp
 8004210:	6826      	ldr	r6, [r4, #0]
 8004212:	f016 0610 	ands.w	r6, r6, #16
 8004216:	d176      	bne.n	8004306 <_scanf_float+0x3b6>
 8004218:	702e      	strb	r6, [r5, #0]
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004224:	d141      	bne.n	80042aa <_scanf_float+0x35a>
 8004226:	9b02      	ldr	r3, [sp, #8]
 8004228:	eba9 0303 	sub.w	r3, r9, r3
 800422c:	425a      	negs	r2, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d148      	bne.n	80042c4 <_scanf_float+0x374>
 8004232:	4641      	mov	r1, r8
 8004234:	2200      	movs	r2, #0
 8004236:	4638      	mov	r0, r7
 8004238:	f000 feb2 	bl	8004fa0 <_strtod_r>
 800423c:	6825      	ldr	r5, [r4, #0]
 800423e:	4680      	mov	r8, r0
 8004240:	f015 0f02 	tst.w	r5, #2
 8004244:	4689      	mov	r9, r1
 8004246:	f8da 3000 	ldr.w	r3, [sl]
 800424a:	d046      	beq.n	80042da <_scanf_float+0x38a>
 800424c:	1d1a      	adds	r2, r3, #4
 800424e:	f8ca 2000 	str.w	r2, [sl]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	e9c3 8900 	strd	r8, r9, [r3]
 8004258:	68e3      	ldr	r3, [r4, #12]
 800425a:	3301      	adds	r3, #1
 800425c:	60e3      	str	r3, [r4, #12]
 800425e:	e6bf      	b.n	8003fe0 <_scanf_float+0x90>
 8004260:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004264:	4632      	mov	r2, r6
 8004266:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800426a:	4638      	mov	r0, r7
 800426c:	4798      	blx	r3
 800426e:	6923      	ldr	r3, [r4, #16]
 8004270:	3b01      	subs	r3, #1
 8004272:	6123      	str	r3, [r4, #16]
 8004274:	e7a7      	b.n	80041c6 <_scanf_float+0x276>
 8004276:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800427a:	4632      	mov	r2, r6
 800427c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004280:	4638      	mov	r0, r7
 8004282:	4798      	blx	r3
 8004284:	6923      	ldr	r3, [r4, #16]
 8004286:	3b01      	subs	r3, #1
 8004288:	6123      	str	r3, [r4, #16]
 800428a:	4545      	cmp	r5, r8
 800428c:	d8f3      	bhi.n	8004276 <_scanf_float+0x326>
 800428e:	e6a6      	b.n	8003fde <_scanf_float+0x8e>
 8004290:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004294:	4632      	mov	r2, r6
 8004296:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800429a:	4638      	mov	r0, r7
 800429c:	4798      	blx	r3
 800429e:	6923      	ldr	r3, [r4, #16]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	6123      	str	r3, [r4, #16]
 80042a4:	4545      	cmp	r5, r8
 80042a6:	d8f3      	bhi.n	8004290 <_scanf_float+0x340>
 80042a8:	e699      	b.n	8003fde <_scanf_float+0x8e>
 80042aa:	9b03      	ldr	r3, [sp, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0c0      	beq.n	8004232 <_scanf_float+0x2e2>
 80042b0:	9904      	ldr	r1, [sp, #16]
 80042b2:	230a      	movs	r3, #10
 80042b4:	4632      	mov	r2, r6
 80042b6:	3101      	adds	r1, #1
 80042b8:	4638      	mov	r0, r7
 80042ba:	f000 fefd 	bl	80050b8 <_strtol_r>
 80042be:	9b03      	ldr	r3, [sp, #12]
 80042c0:	9d04      	ldr	r5, [sp, #16]
 80042c2:	1ac2      	subs	r2, r0, r3
 80042c4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80042c8:	429d      	cmp	r5, r3
 80042ca:	bf28      	it	cs
 80042cc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80042d0:	490e      	ldr	r1, [pc, #56]	; (800430c <_scanf_float+0x3bc>)
 80042d2:	4628      	mov	r0, r5
 80042d4:	f000 f820 	bl	8004318 <siprintf>
 80042d8:	e7ab      	b.n	8004232 <_scanf_float+0x2e2>
 80042da:	1d1f      	adds	r7, r3, #4
 80042dc:	f015 0504 	ands.w	r5, r5, #4
 80042e0:	f8ca 7000 	str.w	r7, [sl]
 80042e4:	d1b5      	bne.n	8004252 <_scanf_float+0x302>
 80042e6:	681f      	ldr	r7, [r3, #0]
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	f7fc fb8e 	bl	8000a0c <__aeabi_dcmpun>
 80042f0:	b120      	cbz	r0, 80042fc <_scanf_float+0x3ac>
 80042f2:	4628      	mov	r0, r5
 80042f4:	f000 f80c 	bl	8004310 <nanf>
 80042f8:	6038      	str	r0, [r7, #0]
 80042fa:	e7ad      	b.n	8004258 <_scanf_float+0x308>
 80042fc:	4640      	mov	r0, r8
 80042fe:	4649      	mov	r1, r9
 8004300:	f7fc fbe2 	bl	8000ac8 <__aeabi_d2f>
 8004304:	e7f8      	b.n	80042f8 <_scanf_float+0x3a8>
 8004306:	2600      	movs	r6, #0
 8004308:	e66a      	b.n	8003fe0 <_scanf_float+0x90>
 800430a:	bf00      	nop
 800430c:	080079d0 	.word	0x080079d0

08004310 <nanf>:
 8004310:	4800      	ldr	r0, [pc, #0]	; (8004314 <nanf+0x4>)
 8004312:	4770      	bx	lr
 8004314:	7fc00000 	.word	0x7fc00000

08004318 <siprintf>:
 8004318:	b40e      	push	{r1, r2, r3}
 800431a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800431e:	b500      	push	{lr}
 8004320:	b09c      	sub	sp, #112	; 0x70
 8004322:	ab1d      	add	r3, sp, #116	; 0x74
 8004324:	9002      	str	r0, [sp, #8]
 8004326:	9006      	str	r0, [sp, #24]
 8004328:	9107      	str	r1, [sp, #28]
 800432a:	9104      	str	r1, [sp, #16]
 800432c:	4808      	ldr	r0, [pc, #32]	; (8004350 <siprintf+0x38>)
 800432e:	4909      	ldr	r1, [pc, #36]	; (8004354 <siprintf+0x3c>)
 8004330:	f853 2b04 	ldr.w	r2, [r3], #4
 8004334:	9105      	str	r1, [sp, #20]
 8004336:	6800      	ldr	r0, [r0, #0]
 8004338:	a902      	add	r1, sp, #8
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	f002 fd86 	bl	8006e4c <_svfiprintf_r>
 8004340:	2200      	movs	r2, #0
 8004342:	9b02      	ldr	r3, [sp, #8]
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	b01c      	add	sp, #112	; 0x70
 8004348:	f85d eb04 	ldr.w	lr, [sp], #4
 800434c:	b003      	add	sp, #12
 800434e:	4770      	bx	lr
 8004350:	20000010 	.word	0x20000010
 8004354:	ffff0208 	.word	0xffff0208

08004358 <sulp>:
 8004358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800435c:	460f      	mov	r7, r1
 800435e:	4690      	mov	r8, r2
 8004360:	f002 fb38 	bl	80069d4 <__ulp>
 8004364:	4604      	mov	r4, r0
 8004366:	460d      	mov	r5, r1
 8004368:	f1b8 0f00 	cmp.w	r8, #0
 800436c:	d011      	beq.n	8004392 <sulp+0x3a>
 800436e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004372:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004376:	2b00      	cmp	r3, #0
 8004378:	dd0b      	ble.n	8004392 <sulp+0x3a>
 800437a:	2400      	movs	r4, #0
 800437c:	051b      	lsls	r3, r3, #20
 800437e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004382:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004386:	4622      	mov	r2, r4
 8004388:	462b      	mov	r3, r5
 800438a:	f7fc f8a5 	bl	80004d8 <__aeabi_dmul>
 800438e:	4604      	mov	r4, r0
 8004390:	460d      	mov	r5, r1
 8004392:	4620      	mov	r0, r4
 8004394:	4629      	mov	r1, r5
 8004396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800439a:	0000      	movs	r0, r0
 800439c:	0000      	movs	r0, r0
	...

080043a0 <_strtod_l>:
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a4:	461f      	mov	r7, r3
 80043a6:	2300      	movs	r3, #0
 80043a8:	b0a1      	sub	sp, #132	; 0x84
 80043aa:	4683      	mov	fp, r0
 80043ac:	4638      	mov	r0, r7
 80043ae:	460e      	mov	r6, r1
 80043b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80043b2:	931c      	str	r3, [sp, #112]	; 0x70
 80043b4:	f001 ffff 	bl	80063b6 <__localeconv_l>
 80043b8:	4680      	mov	r8, r0
 80043ba:	6800      	ldr	r0, [r0, #0]
 80043bc:	f7fb fec8 	bl	8000150 <strlen>
 80043c0:	f04f 0900 	mov.w	r9, #0
 80043c4:	4604      	mov	r4, r0
 80043c6:	f04f 0a00 	mov.w	sl, #0
 80043ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80043cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043ce:	781a      	ldrb	r2, [r3, #0]
 80043d0:	2a0d      	cmp	r2, #13
 80043d2:	d832      	bhi.n	800443a <_strtod_l+0x9a>
 80043d4:	2a09      	cmp	r2, #9
 80043d6:	d236      	bcs.n	8004446 <_strtod_l+0xa6>
 80043d8:	2a00      	cmp	r2, #0
 80043da:	d03e      	beq.n	800445a <_strtod_l+0xba>
 80043dc:	2300      	movs	r3, #0
 80043de:	930d      	str	r3, [sp, #52]	; 0x34
 80043e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80043e2:	782b      	ldrb	r3, [r5, #0]
 80043e4:	2b30      	cmp	r3, #48	; 0x30
 80043e6:	f040 80ac 	bne.w	8004542 <_strtod_l+0x1a2>
 80043ea:	786b      	ldrb	r3, [r5, #1]
 80043ec:	2b58      	cmp	r3, #88	; 0x58
 80043ee:	d001      	beq.n	80043f4 <_strtod_l+0x54>
 80043f0:	2b78      	cmp	r3, #120	; 0x78
 80043f2:	d167      	bne.n	80044c4 <_strtod_l+0x124>
 80043f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043f6:	9702      	str	r7, [sp, #8]
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	ab1c      	add	r3, sp, #112	; 0x70
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	4a89      	ldr	r2, [pc, #548]	; (8004624 <_strtod_l+0x284>)
 8004400:	ab1d      	add	r3, sp, #116	; 0x74
 8004402:	a91b      	add	r1, sp, #108	; 0x6c
 8004404:	4658      	mov	r0, fp
 8004406:	f001 fcfb 	bl	8005e00 <__gethex>
 800440a:	f010 0407 	ands.w	r4, r0, #7
 800440e:	4606      	mov	r6, r0
 8004410:	d005      	beq.n	800441e <_strtod_l+0x7e>
 8004412:	2c06      	cmp	r4, #6
 8004414:	d12b      	bne.n	800446e <_strtod_l+0xce>
 8004416:	2300      	movs	r3, #0
 8004418:	3501      	adds	r5, #1
 800441a:	951b      	str	r5, [sp, #108]	; 0x6c
 800441c:	930d      	str	r3, [sp, #52]	; 0x34
 800441e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 85a6 	bne.w	8004f72 <_strtod_l+0xbd2>
 8004426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004428:	b1e3      	cbz	r3, 8004464 <_strtod_l+0xc4>
 800442a:	464a      	mov	r2, r9
 800442c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	b021      	add	sp, #132	; 0x84
 8004436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443a:	2a2b      	cmp	r2, #43	; 0x2b
 800443c:	d015      	beq.n	800446a <_strtod_l+0xca>
 800443e:	2a2d      	cmp	r2, #45	; 0x2d
 8004440:	d004      	beq.n	800444c <_strtod_l+0xac>
 8004442:	2a20      	cmp	r2, #32
 8004444:	d1ca      	bne.n	80043dc <_strtod_l+0x3c>
 8004446:	3301      	adds	r3, #1
 8004448:	931b      	str	r3, [sp, #108]	; 0x6c
 800444a:	e7bf      	b.n	80043cc <_strtod_l+0x2c>
 800444c:	2201      	movs	r2, #1
 800444e:	920d      	str	r2, [sp, #52]	; 0x34
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	921b      	str	r2, [sp, #108]	; 0x6c
 8004454:	785b      	ldrb	r3, [r3, #1]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1c2      	bne.n	80043e0 <_strtod_l+0x40>
 800445a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800445c:	961b      	str	r6, [sp, #108]	; 0x6c
 800445e:	2b00      	cmp	r3, #0
 8004460:	f040 8585 	bne.w	8004f6e <_strtod_l+0xbce>
 8004464:	464a      	mov	r2, r9
 8004466:	4653      	mov	r3, sl
 8004468:	e7e2      	b.n	8004430 <_strtod_l+0x90>
 800446a:	2200      	movs	r2, #0
 800446c:	e7ef      	b.n	800444e <_strtod_l+0xae>
 800446e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004470:	b13a      	cbz	r2, 8004482 <_strtod_l+0xe2>
 8004472:	2135      	movs	r1, #53	; 0x35
 8004474:	a81e      	add	r0, sp, #120	; 0x78
 8004476:	f002 fba0 	bl	8006bba <__copybits>
 800447a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800447c:	4658      	mov	r0, fp
 800447e:	f002 f812 	bl	80064a6 <_Bfree>
 8004482:	3c01      	subs	r4, #1
 8004484:	2c04      	cmp	r4, #4
 8004486:	d806      	bhi.n	8004496 <_strtod_l+0xf6>
 8004488:	e8df f004 	tbb	[pc, r4]
 800448c:	1714030a 	.word	0x1714030a
 8004490:	0a          	.byte	0x0a
 8004491:	00          	.byte	0x00
 8004492:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004496:	0731      	lsls	r1, r6, #28
 8004498:	d5c1      	bpl.n	800441e <_strtod_l+0x7e>
 800449a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800449e:	e7be      	b.n	800441e <_strtod_l+0x7e>
 80044a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80044a2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80044a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80044aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044ae:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80044b2:	e7f0      	b.n	8004496 <_strtod_l+0xf6>
 80044b4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004628 <_strtod_l+0x288>
 80044b8:	e7ed      	b.n	8004496 <_strtod_l+0xf6>
 80044ba:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80044be:	f04f 39ff 	mov.w	r9, #4294967295
 80044c2:	e7e8      	b.n	8004496 <_strtod_l+0xf6>
 80044c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80044ca:	785b      	ldrb	r3, [r3, #1]
 80044cc:	2b30      	cmp	r3, #48	; 0x30
 80044ce:	d0f9      	beq.n	80044c4 <_strtod_l+0x124>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0a4      	beq.n	800441e <_strtod_l+0x7e>
 80044d4:	2301      	movs	r3, #1
 80044d6:	2500      	movs	r5, #0
 80044d8:	220a      	movs	r2, #10
 80044da:	9307      	str	r3, [sp, #28]
 80044dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044de:	9506      	str	r5, [sp, #24]
 80044e0:	9308      	str	r3, [sp, #32]
 80044e2:	9504      	str	r5, [sp, #16]
 80044e4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80044e6:	7807      	ldrb	r7, [r0, #0]
 80044e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80044ec:	b2d9      	uxtb	r1, r3
 80044ee:	2909      	cmp	r1, #9
 80044f0:	d929      	bls.n	8004546 <_strtod_l+0x1a6>
 80044f2:	4622      	mov	r2, r4
 80044f4:	f8d8 1000 	ldr.w	r1, [r8]
 80044f8:	f002 fdb0 	bl	800705c <strncmp>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d031      	beq.n	8004564 <_strtod_l+0x1c4>
 8004500:	2000      	movs	r0, #0
 8004502:	463b      	mov	r3, r7
 8004504:	4602      	mov	r2, r0
 8004506:	9c04      	ldr	r4, [sp, #16]
 8004508:	9005      	str	r0, [sp, #20]
 800450a:	2b65      	cmp	r3, #101	; 0x65
 800450c:	d001      	beq.n	8004512 <_strtod_l+0x172>
 800450e:	2b45      	cmp	r3, #69	; 0x45
 8004510:	d114      	bne.n	800453c <_strtod_l+0x19c>
 8004512:	b924      	cbnz	r4, 800451e <_strtod_l+0x17e>
 8004514:	b910      	cbnz	r0, 800451c <_strtod_l+0x17c>
 8004516:	9b07      	ldr	r3, [sp, #28]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d09e      	beq.n	800445a <_strtod_l+0xba>
 800451c:	2400      	movs	r4, #0
 800451e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004520:	1c73      	adds	r3, r6, #1
 8004522:	931b      	str	r3, [sp, #108]	; 0x6c
 8004524:	7873      	ldrb	r3, [r6, #1]
 8004526:	2b2b      	cmp	r3, #43	; 0x2b
 8004528:	d078      	beq.n	800461c <_strtod_l+0x27c>
 800452a:	2b2d      	cmp	r3, #45	; 0x2d
 800452c:	d070      	beq.n	8004610 <_strtod_l+0x270>
 800452e:	f04f 0c00 	mov.w	ip, #0
 8004532:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004536:	2f09      	cmp	r7, #9
 8004538:	d97c      	bls.n	8004634 <_strtod_l+0x294>
 800453a:	961b      	str	r6, [sp, #108]	; 0x6c
 800453c:	f04f 0e00 	mov.w	lr, #0
 8004540:	e09a      	b.n	8004678 <_strtod_l+0x2d8>
 8004542:	2300      	movs	r3, #0
 8004544:	e7c7      	b.n	80044d6 <_strtod_l+0x136>
 8004546:	9904      	ldr	r1, [sp, #16]
 8004548:	3001      	adds	r0, #1
 800454a:	2908      	cmp	r1, #8
 800454c:	bfd7      	itett	le
 800454e:	9906      	ldrle	r1, [sp, #24]
 8004550:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004554:	fb02 3301 	mlale	r3, r2, r1, r3
 8004558:	9306      	strle	r3, [sp, #24]
 800455a:	9b04      	ldr	r3, [sp, #16]
 800455c:	901b      	str	r0, [sp, #108]	; 0x6c
 800455e:	3301      	adds	r3, #1
 8004560:	9304      	str	r3, [sp, #16]
 8004562:	e7bf      	b.n	80044e4 <_strtod_l+0x144>
 8004564:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004566:	191a      	adds	r2, r3, r4
 8004568:	921b      	str	r2, [sp, #108]	; 0x6c
 800456a:	9a04      	ldr	r2, [sp, #16]
 800456c:	5d1b      	ldrb	r3, [r3, r4]
 800456e:	2a00      	cmp	r2, #0
 8004570:	d037      	beq.n	80045e2 <_strtod_l+0x242>
 8004572:	4602      	mov	r2, r0
 8004574:	9c04      	ldr	r4, [sp, #16]
 8004576:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800457a:	2909      	cmp	r1, #9
 800457c:	d913      	bls.n	80045a6 <_strtod_l+0x206>
 800457e:	2101      	movs	r1, #1
 8004580:	9105      	str	r1, [sp, #20]
 8004582:	e7c2      	b.n	800450a <_strtod_l+0x16a>
 8004584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004586:	3001      	adds	r0, #1
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	921b      	str	r2, [sp, #108]	; 0x6c
 800458c:	785b      	ldrb	r3, [r3, #1]
 800458e:	2b30      	cmp	r3, #48	; 0x30
 8004590:	d0f8      	beq.n	8004584 <_strtod_l+0x1e4>
 8004592:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004596:	2a08      	cmp	r2, #8
 8004598:	f200 84f0 	bhi.w	8004f7c <_strtod_l+0xbdc>
 800459c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800459e:	9208      	str	r2, [sp, #32]
 80045a0:	4602      	mov	r2, r0
 80045a2:	2000      	movs	r0, #0
 80045a4:	4604      	mov	r4, r0
 80045a6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80045aa:	f100 0101 	add.w	r1, r0, #1
 80045ae:	d012      	beq.n	80045d6 <_strtod_l+0x236>
 80045b0:	440a      	add	r2, r1
 80045b2:	270a      	movs	r7, #10
 80045b4:	4621      	mov	r1, r4
 80045b6:	eb00 0c04 	add.w	ip, r0, r4
 80045ba:	458c      	cmp	ip, r1
 80045bc:	d113      	bne.n	80045e6 <_strtod_l+0x246>
 80045be:	1821      	adds	r1, r4, r0
 80045c0:	2908      	cmp	r1, #8
 80045c2:	f104 0401 	add.w	r4, r4, #1
 80045c6:	4404      	add	r4, r0
 80045c8:	dc19      	bgt.n	80045fe <_strtod_l+0x25e>
 80045ca:	210a      	movs	r1, #10
 80045cc:	9b06      	ldr	r3, [sp, #24]
 80045ce:	fb01 e303 	mla	r3, r1, r3, lr
 80045d2:	9306      	str	r3, [sp, #24]
 80045d4:	2100      	movs	r1, #0
 80045d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045d8:	1c58      	adds	r0, r3, #1
 80045da:	901b      	str	r0, [sp, #108]	; 0x6c
 80045dc:	785b      	ldrb	r3, [r3, #1]
 80045de:	4608      	mov	r0, r1
 80045e0:	e7c9      	b.n	8004576 <_strtod_l+0x1d6>
 80045e2:	9804      	ldr	r0, [sp, #16]
 80045e4:	e7d3      	b.n	800458e <_strtod_l+0x1ee>
 80045e6:	2908      	cmp	r1, #8
 80045e8:	f101 0101 	add.w	r1, r1, #1
 80045ec:	dc03      	bgt.n	80045f6 <_strtod_l+0x256>
 80045ee:	9b06      	ldr	r3, [sp, #24]
 80045f0:	437b      	muls	r3, r7
 80045f2:	9306      	str	r3, [sp, #24]
 80045f4:	e7e1      	b.n	80045ba <_strtod_l+0x21a>
 80045f6:	2910      	cmp	r1, #16
 80045f8:	bfd8      	it	le
 80045fa:	437d      	mulle	r5, r7
 80045fc:	e7dd      	b.n	80045ba <_strtod_l+0x21a>
 80045fe:	2c10      	cmp	r4, #16
 8004600:	bfdc      	itt	le
 8004602:	210a      	movle	r1, #10
 8004604:	fb01 e505 	mlale	r5, r1, r5, lr
 8004608:	e7e4      	b.n	80045d4 <_strtod_l+0x234>
 800460a:	2301      	movs	r3, #1
 800460c:	9305      	str	r3, [sp, #20]
 800460e:	e781      	b.n	8004514 <_strtod_l+0x174>
 8004610:	f04f 0c01 	mov.w	ip, #1
 8004614:	1cb3      	adds	r3, r6, #2
 8004616:	931b      	str	r3, [sp, #108]	; 0x6c
 8004618:	78b3      	ldrb	r3, [r6, #2]
 800461a:	e78a      	b.n	8004532 <_strtod_l+0x192>
 800461c:	f04f 0c00 	mov.w	ip, #0
 8004620:	e7f8      	b.n	8004614 <_strtod_l+0x274>
 8004622:	bf00      	nop
 8004624:	080079d8 	.word	0x080079d8
 8004628:	7ff00000 	.word	0x7ff00000
 800462c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800462e:	1c5f      	adds	r7, r3, #1
 8004630:	971b      	str	r7, [sp, #108]	; 0x6c
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	2b30      	cmp	r3, #48	; 0x30
 8004636:	d0f9      	beq.n	800462c <_strtod_l+0x28c>
 8004638:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800463c:	2f08      	cmp	r7, #8
 800463e:	f63f af7d 	bhi.w	800453c <_strtod_l+0x19c>
 8004642:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004646:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004648:	9309      	str	r3, [sp, #36]	; 0x24
 800464a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800464c:	1c5f      	adds	r7, r3, #1
 800464e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004650:	785b      	ldrb	r3, [r3, #1]
 8004652:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004656:	f1b8 0f09 	cmp.w	r8, #9
 800465a:	d937      	bls.n	80046cc <_strtod_l+0x32c>
 800465c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800465e:	1a7f      	subs	r7, r7, r1
 8004660:	2f08      	cmp	r7, #8
 8004662:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004666:	dc37      	bgt.n	80046d8 <_strtod_l+0x338>
 8004668:	45be      	cmp	lr, r7
 800466a:	bfa8      	it	ge
 800466c:	46be      	movge	lr, r7
 800466e:	f1bc 0f00 	cmp.w	ip, #0
 8004672:	d001      	beq.n	8004678 <_strtod_l+0x2d8>
 8004674:	f1ce 0e00 	rsb	lr, lr, #0
 8004678:	2c00      	cmp	r4, #0
 800467a:	d151      	bne.n	8004720 <_strtod_l+0x380>
 800467c:	2800      	cmp	r0, #0
 800467e:	f47f aece 	bne.w	800441e <_strtod_l+0x7e>
 8004682:	9a07      	ldr	r2, [sp, #28]
 8004684:	2a00      	cmp	r2, #0
 8004686:	f47f aeca 	bne.w	800441e <_strtod_l+0x7e>
 800468a:	9a05      	ldr	r2, [sp, #20]
 800468c:	2a00      	cmp	r2, #0
 800468e:	f47f aee4 	bne.w	800445a <_strtod_l+0xba>
 8004692:	2b4e      	cmp	r3, #78	; 0x4e
 8004694:	d027      	beq.n	80046e6 <_strtod_l+0x346>
 8004696:	dc21      	bgt.n	80046dc <_strtod_l+0x33c>
 8004698:	2b49      	cmp	r3, #73	; 0x49
 800469a:	f47f aede 	bne.w	800445a <_strtod_l+0xba>
 800469e:	49a4      	ldr	r1, [pc, #656]	; (8004930 <_strtod_l+0x590>)
 80046a0:	a81b      	add	r0, sp, #108	; 0x6c
 80046a2:	f001 fde1 	bl	8006268 <__match>
 80046a6:	2800      	cmp	r0, #0
 80046a8:	f43f aed7 	beq.w	800445a <_strtod_l+0xba>
 80046ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046ae:	49a1      	ldr	r1, [pc, #644]	; (8004934 <_strtod_l+0x594>)
 80046b0:	3b01      	subs	r3, #1
 80046b2:	a81b      	add	r0, sp, #108	; 0x6c
 80046b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80046b6:	f001 fdd7 	bl	8006268 <__match>
 80046ba:	b910      	cbnz	r0, 80046c2 <_strtod_l+0x322>
 80046bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046be:	3301      	adds	r3, #1
 80046c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80046c2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004948 <_strtod_l+0x5a8>
 80046c6:	f04f 0900 	mov.w	r9, #0
 80046ca:	e6a8      	b.n	800441e <_strtod_l+0x7e>
 80046cc:	210a      	movs	r1, #10
 80046ce:	fb01 3e0e 	mla	lr, r1, lr, r3
 80046d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80046d6:	e7b8      	b.n	800464a <_strtod_l+0x2aa>
 80046d8:	46be      	mov	lr, r7
 80046da:	e7c8      	b.n	800466e <_strtod_l+0x2ce>
 80046dc:	2b69      	cmp	r3, #105	; 0x69
 80046de:	d0de      	beq.n	800469e <_strtod_l+0x2fe>
 80046e0:	2b6e      	cmp	r3, #110	; 0x6e
 80046e2:	f47f aeba 	bne.w	800445a <_strtod_l+0xba>
 80046e6:	4994      	ldr	r1, [pc, #592]	; (8004938 <_strtod_l+0x598>)
 80046e8:	a81b      	add	r0, sp, #108	; 0x6c
 80046ea:	f001 fdbd 	bl	8006268 <__match>
 80046ee:	2800      	cmp	r0, #0
 80046f0:	f43f aeb3 	beq.w	800445a <_strtod_l+0xba>
 80046f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b28      	cmp	r3, #40	; 0x28
 80046fa:	d10e      	bne.n	800471a <_strtod_l+0x37a>
 80046fc:	aa1e      	add	r2, sp, #120	; 0x78
 80046fe:	498f      	ldr	r1, [pc, #572]	; (800493c <_strtod_l+0x59c>)
 8004700:	a81b      	add	r0, sp, #108	; 0x6c
 8004702:	f001 fdc5 	bl	8006290 <__hexnan>
 8004706:	2805      	cmp	r0, #5
 8004708:	d107      	bne.n	800471a <_strtod_l+0x37a>
 800470a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800470c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004710:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8004714:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004718:	e681      	b.n	800441e <_strtod_l+0x7e>
 800471a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004950 <_strtod_l+0x5b0>
 800471e:	e7d2      	b.n	80046c6 <_strtod_l+0x326>
 8004720:	ebae 0302 	sub.w	r3, lr, r2
 8004724:	9307      	str	r3, [sp, #28]
 8004726:	9b04      	ldr	r3, [sp, #16]
 8004728:	9806      	ldr	r0, [sp, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	bf08      	it	eq
 800472e:	4623      	moveq	r3, r4
 8004730:	2c10      	cmp	r4, #16
 8004732:	9304      	str	r3, [sp, #16]
 8004734:	46a0      	mov	r8, r4
 8004736:	bfa8      	it	ge
 8004738:	f04f 0810 	movge.w	r8, #16
 800473c:	f7fb fe52 	bl	80003e4 <__aeabi_ui2d>
 8004740:	2c09      	cmp	r4, #9
 8004742:	4681      	mov	r9, r0
 8004744:	468a      	mov	sl, r1
 8004746:	dc13      	bgt.n	8004770 <_strtod_l+0x3d0>
 8004748:	9b07      	ldr	r3, [sp, #28]
 800474a:	2b00      	cmp	r3, #0
 800474c:	f43f ae67 	beq.w	800441e <_strtod_l+0x7e>
 8004750:	9b07      	ldr	r3, [sp, #28]
 8004752:	dd7e      	ble.n	8004852 <_strtod_l+0x4b2>
 8004754:	2b16      	cmp	r3, #22
 8004756:	dc65      	bgt.n	8004824 <_strtod_l+0x484>
 8004758:	4a79      	ldr	r2, [pc, #484]	; (8004940 <_strtod_l+0x5a0>)
 800475a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800475e:	464a      	mov	r2, r9
 8004760:	e9de 0100 	ldrd	r0, r1, [lr]
 8004764:	4653      	mov	r3, sl
 8004766:	f7fb feb7 	bl	80004d8 <__aeabi_dmul>
 800476a:	4681      	mov	r9, r0
 800476c:	468a      	mov	sl, r1
 800476e:	e656      	b.n	800441e <_strtod_l+0x7e>
 8004770:	4b73      	ldr	r3, [pc, #460]	; (8004940 <_strtod_l+0x5a0>)
 8004772:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004776:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800477a:	f7fb fead 	bl	80004d8 <__aeabi_dmul>
 800477e:	4606      	mov	r6, r0
 8004780:	4628      	mov	r0, r5
 8004782:	460f      	mov	r7, r1
 8004784:	f7fb fe2e 	bl	80003e4 <__aeabi_ui2d>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4630      	mov	r0, r6
 800478e:	4639      	mov	r1, r7
 8004790:	f7fb fcec 	bl	800016c <__adddf3>
 8004794:	2c0f      	cmp	r4, #15
 8004796:	4681      	mov	r9, r0
 8004798:	468a      	mov	sl, r1
 800479a:	ddd5      	ble.n	8004748 <_strtod_l+0x3a8>
 800479c:	9b07      	ldr	r3, [sp, #28]
 800479e:	eba4 0808 	sub.w	r8, r4, r8
 80047a2:	4498      	add	r8, r3
 80047a4:	f1b8 0f00 	cmp.w	r8, #0
 80047a8:	f340 809a 	ble.w	80048e0 <_strtod_l+0x540>
 80047ac:	f018 030f 	ands.w	r3, r8, #15
 80047b0:	d00a      	beq.n	80047c8 <_strtod_l+0x428>
 80047b2:	4963      	ldr	r1, [pc, #396]	; (8004940 <_strtod_l+0x5a0>)
 80047b4:	464a      	mov	r2, r9
 80047b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80047ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047be:	4653      	mov	r3, sl
 80047c0:	f7fb fe8a 	bl	80004d8 <__aeabi_dmul>
 80047c4:	4681      	mov	r9, r0
 80047c6:	468a      	mov	sl, r1
 80047c8:	f038 080f 	bics.w	r8, r8, #15
 80047cc:	d077      	beq.n	80048be <_strtod_l+0x51e>
 80047ce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80047d2:	dd4b      	ble.n	800486c <_strtod_l+0x4cc>
 80047d4:	f04f 0800 	mov.w	r8, #0
 80047d8:	f8cd 8010 	str.w	r8, [sp, #16]
 80047dc:	f8cd 8020 	str.w	r8, [sp, #32]
 80047e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80047e4:	2322      	movs	r3, #34	; 0x22
 80047e6:	f04f 0900 	mov.w	r9, #0
 80047ea:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004948 <_strtod_l+0x5a8>
 80047ee:	f8cb 3000 	str.w	r3, [fp]
 80047f2:	9b08      	ldr	r3, [sp, #32]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f43f ae12 	beq.w	800441e <_strtod_l+0x7e>
 80047fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80047fc:	4658      	mov	r0, fp
 80047fe:	f001 fe52 	bl	80064a6 <_Bfree>
 8004802:	9906      	ldr	r1, [sp, #24]
 8004804:	4658      	mov	r0, fp
 8004806:	f001 fe4e 	bl	80064a6 <_Bfree>
 800480a:	9904      	ldr	r1, [sp, #16]
 800480c:	4658      	mov	r0, fp
 800480e:	f001 fe4a 	bl	80064a6 <_Bfree>
 8004812:	9908      	ldr	r1, [sp, #32]
 8004814:	4658      	mov	r0, fp
 8004816:	f001 fe46 	bl	80064a6 <_Bfree>
 800481a:	4641      	mov	r1, r8
 800481c:	4658      	mov	r0, fp
 800481e:	f001 fe42 	bl	80064a6 <_Bfree>
 8004822:	e5fc      	b.n	800441e <_strtod_l+0x7e>
 8004824:	9a07      	ldr	r2, [sp, #28]
 8004826:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800482a:	4293      	cmp	r3, r2
 800482c:	dbb6      	blt.n	800479c <_strtod_l+0x3fc>
 800482e:	4d44      	ldr	r5, [pc, #272]	; (8004940 <_strtod_l+0x5a0>)
 8004830:	f1c4 040f 	rsb	r4, r4, #15
 8004834:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004838:	464a      	mov	r2, r9
 800483a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800483e:	4653      	mov	r3, sl
 8004840:	f7fb fe4a 	bl	80004d8 <__aeabi_dmul>
 8004844:	9b07      	ldr	r3, [sp, #28]
 8004846:	1b1c      	subs	r4, r3, r4
 8004848:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800484c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004850:	e789      	b.n	8004766 <_strtod_l+0x3c6>
 8004852:	f113 0f16 	cmn.w	r3, #22
 8004856:	dba1      	blt.n	800479c <_strtod_l+0x3fc>
 8004858:	4a39      	ldr	r2, [pc, #228]	; (8004940 <_strtod_l+0x5a0>)
 800485a:	4648      	mov	r0, r9
 800485c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004860:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004864:	4651      	mov	r1, sl
 8004866:	f7fb ff61 	bl	800072c <__aeabi_ddiv>
 800486a:	e77e      	b.n	800476a <_strtod_l+0x3ca>
 800486c:	2300      	movs	r3, #0
 800486e:	4648      	mov	r0, r9
 8004870:	4651      	mov	r1, sl
 8004872:	461d      	mov	r5, r3
 8004874:	4e33      	ldr	r6, [pc, #204]	; (8004944 <_strtod_l+0x5a4>)
 8004876:	ea4f 1828 	mov.w	r8, r8, asr #4
 800487a:	f1b8 0f01 	cmp.w	r8, #1
 800487e:	dc21      	bgt.n	80048c4 <_strtod_l+0x524>
 8004880:	b10b      	cbz	r3, 8004886 <_strtod_l+0x4e6>
 8004882:	4681      	mov	r9, r0
 8004884:	468a      	mov	sl, r1
 8004886:	4b2f      	ldr	r3, [pc, #188]	; (8004944 <_strtod_l+0x5a4>)
 8004888:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800488c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004890:	464a      	mov	r2, r9
 8004892:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004896:	4653      	mov	r3, sl
 8004898:	f7fb fe1e 	bl	80004d8 <__aeabi_dmul>
 800489c:	4b2a      	ldr	r3, [pc, #168]	; (8004948 <_strtod_l+0x5a8>)
 800489e:	460a      	mov	r2, r1
 80048a0:	400b      	ands	r3, r1
 80048a2:	492a      	ldr	r1, [pc, #168]	; (800494c <_strtod_l+0x5ac>)
 80048a4:	4681      	mov	r9, r0
 80048a6:	428b      	cmp	r3, r1
 80048a8:	d894      	bhi.n	80047d4 <_strtod_l+0x434>
 80048aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80048ae:	428b      	cmp	r3, r1
 80048b0:	bf86      	itte	hi
 80048b2:	f04f 39ff 	movhi.w	r9, #4294967295
 80048b6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004954 <_strtod_l+0x5b4>
 80048ba:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80048be:	2300      	movs	r3, #0
 80048c0:	9305      	str	r3, [sp, #20]
 80048c2:	e07b      	b.n	80049bc <_strtod_l+0x61c>
 80048c4:	f018 0f01 	tst.w	r8, #1
 80048c8:	d006      	beq.n	80048d8 <_strtod_l+0x538>
 80048ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f7fb fe01 	bl	80004d8 <__aeabi_dmul>
 80048d6:	2301      	movs	r3, #1
 80048d8:	3501      	adds	r5, #1
 80048da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80048de:	e7cc      	b.n	800487a <_strtod_l+0x4da>
 80048e0:	d0ed      	beq.n	80048be <_strtod_l+0x51e>
 80048e2:	f1c8 0800 	rsb	r8, r8, #0
 80048e6:	f018 020f 	ands.w	r2, r8, #15
 80048ea:	d00a      	beq.n	8004902 <_strtod_l+0x562>
 80048ec:	4b14      	ldr	r3, [pc, #80]	; (8004940 <_strtod_l+0x5a0>)
 80048ee:	4648      	mov	r0, r9
 80048f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048f4:	4651      	mov	r1, sl
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fb ff17 	bl	800072c <__aeabi_ddiv>
 80048fe:	4681      	mov	r9, r0
 8004900:	468a      	mov	sl, r1
 8004902:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004906:	d0da      	beq.n	80048be <_strtod_l+0x51e>
 8004908:	f1b8 0f1f 	cmp.w	r8, #31
 800490c:	dd24      	ble.n	8004958 <_strtod_l+0x5b8>
 800490e:	f04f 0800 	mov.w	r8, #0
 8004912:	f8cd 8010 	str.w	r8, [sp, #16]
 8004916:	f8cd 8020 	str.w	r8, [sp, #32]
 800491a:	f8cd 8018 	str.w	r8, [sp, #24]
 800491e:	2322      	movs	r3, #34	; 0x22
 8004920:	f04f 0900 	mov.w	r9, #0
 8004924:	f04f 0a00 	mov.w	sl, #0
 8004928:	f8cb 3000 	str.w	r3, [fp]
 800492c:	e761      	b.n	80047f2 <_strtod_l+0x452>
 800492e:	bf00      	nop
 8004930:	080079a1 	.word	0x080079a1
 8004934:	08007a2b 	.word	0x08007a2b
 8004938:	080079a9 	.word	0x080079a9
 800493c:	080079ec 	.word	0x080079ec
 8004940:	08007a68 	.word	0x08007a68
 8004944:	08007a40 	.word	0x08007a40
 8004948:	7ff00000 	.word	0x7ff00000
 800494c:	7ca00000 	.word	0x7ca00000
 8004950:	fff80000 	.word	0xfff80000
 8004954:	7fefffff 	.word	0x7fefffff
 8004958:	f018 0310 	ands.w	r3, r8, #16
 800495c:	bf18      	it	ne
 800495e:	236a      	movne	r3, #106	; 0x6a
 8004960:	4648      	mov	r0, r9
 8004962:	9305      	str	r3, [sp, #20]
 8004964:	4651      	mov	r1, sl
 8004966:	2300      	movs	r3, #0
 8004968:	4da1      	ldr	r5, [pc, #644]	; (8004bf0 <_strtod_l+0x850>)
 800496a:	f1b8 0f00 	cmp.w	r8, #0
 800496e:	f300 8113 	bgt.w	8004b98 <_strtod_l+0x7f8>
 8004972:	b10b      	cbz	r3, 8004978 <_strtod_l+0x5d8>
 8004974:	4681      	mov	r9, r0
 8004976:	468a      	mov	sl, r1
 8004978:	9b05      	ldr	r3, [sp, #20]
 800497a:	b1bb      	cbz	r3, 80049ac <_strtod_l+0x60c>
 800497c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004980:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004984:	2b00      	cmp	r3, #0
 8004986:	4651      	mov	r1, sl
 8004988:	dd10      	ble.n	80049ac <_strtod_l+0x60c>
 800498a:	2b1f      	cmp	r3, #31
 800498c:	f340 8110 	ble.w	8004bb0 <_strtod_l+0x810>
 8004990:	2b34      	cmp	r3, #52	; 0x34
 8004992:	bfd8      	it	le
 8004994:	f04f 32ff 	movle.w	r2, #4294967295
 8004998:	f04f 0900 	mov.w	r9, #0
 800499c:	bfcf      	iteee	gt
 800499e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80049a2:	3b20      	suble	r3, #32
 80049a4:	fa02 f303 	lslle.w	r3, r2, r3
 80049a8:	ea03 0a01 	andle.w	sl, r3, r1
 80049ac:	2200      	movs	r2, #0
 80049ae:	2300      	movs	r3, #0
 80049b0:	4648      	mov	r0, r9
 80049b2:	4651      	mov	r1, sl
 80049b4:	f7fb fff8 	bl	80009a8 <__aeabi_dcmpeq>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d1a8      	bne.n	800490e <_strtod_l+0x56e>
 80049bc:	9b06      	ldr	r3, [sp, #24]
 80049be:	9a04      	ldr	r2, [sp, #16]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	9908      	ldr	r1, [sp, #32]
 80049c4:	4623      	mov	r3, r4
 80049c6:	4658      	mov	r0, fp
 80049c8:	f001 fdbf 	bl	800654a <__s2b>
 80049cc:	9008      	str	r0, [sp, #32]
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f43f af00 	beq.w	80047d4 <_strtod_l+0x434>
 80049d4:	9a07      	ldr	r2, [sp, #28]
 80049d6:	9b07      	ldr	r3, [sp, #28]
 80049d8:	2a00      	cmp	r2, #0
 80049da:	f1c3 0300 	rsb	r3, r3, #0
 80049de:	bfa8      	it	ge
 80049e0:	2300      	movge	r3, #0
 80049e2:	f04f 0800 	mov.w	r8, #0
 80049e6:	930e      	str	r3, [sp, #56]	; 0x38
 80049e8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80049ec:	9316      	str	r3, [sp, #88]	; 0x58
 80049ee:	f8cd 8010 	str.w	r8, [sp, #16]
 80049f2:	9b08      	ldr	r3, [sp, #32]
 80049f4:	4658      	mov	r0, fp
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	f001 fd21 	bl	800643e <_Balloc>
 80049fc:	9006      	str	r0, [sp, #24]
 80049fe:	2800      	cmp	r0, #0
 8004a00:	f43f aef0 	beq.w	80047e4 <_strtod_l+0x444>
 8004a04:	9b08      	ldr	r3, [sp, #32]
 8004a06:	300c      	adds	r0, #12
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	f103 010c 	add.w	r1, r3, #12
 8004a0e:	3202      	adds	r2, #2
 8004a10:	0092      	lsls	r2, r2, #2
 8004a12:	f001 fd09 	bl	8006428 <memcpy>
 8004a16:	ab1e      	add	r3, sp, #120	; 0x78
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	ab1d      	add	r3, sp, #116	; 0x74
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	464a      	mov	r2, r9
 8004a20:	4653      	mov	r3, sl
 8004a22:	4658      	mov	r0, fp
 8004a24:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004a28:	f002 f84a 	bl	8006ac0 <__d2b>
 8004a2c:	901c      	str	r0, [sp, #112]	; 0x70
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	f43f aed8 	beq.w	80047e4 <_strtod_l+0x444>
 8004a34:	2101      	movs	r1, #1
 8004a36:	4658      	mov	r0, fp
 8004a38:	f001 fe13 	bl	8006662 <__i2b>
 8004a3c:	9004      	str	r0, [sp, #16]
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2800      	cmp	r0, #0
 8004a42:	f43f aecf 	beq.w	80047e4 <_strtod_l+0x444>
 8004a46:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004a48:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	bfab      	itete	ge
 8004a4e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004a50:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004a52:	18ee      	addge	r6, r5, r3
 8004a54:	1b5c      	sublt	r4, r3, r5
 8004a56:	9b05      	ldr	r3, [sp, #20]
 8004a58:	bfa8      	it	ge
 8004a5a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004a5c:	eba5 0503 	sub.w	r5, r5, r3
 8004a60:	4415      	add	r5, r2
 8004a62:	4b64      	ldr	r3, [pc, #400]	; (8004bf4 <_strtod_l+0x854>)
 8004a64:	f105 35ff 	add.w	r5, r5, #4294967295
 8004a68:	bfb8      	it	lt
 8004a6a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004a6c:	429d      	cmp	r5, r3
 8004a6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004a72:	f280 80af 	bge.w	8004bd4 <_strtod_l+0x834>
 8004a76:	1b5b      	subs	r3, r3, r5
 8004a78:	2b1f      	cmp	r3, #31
 8004a7a:	eba2 0203 	sub.w	r2, r2, r3
 8004a7e:	f04f 0701 	mov.w	r7, #1
 8004a82:	f300 809c 	bgt.w	8004bbe <_strtod_l+0x81e>
 8004a86:	2500      	movs	r5, #0
 8004a88:	fa07 f303 	lsl.w	r3, r7, r3
 8004a8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a8e:	18b7      	adds	r7, r6, r2
 8004a90:	9b05      	ldr	r3, [sp, #20]
 8004a92:	42be      	cmp	r6, r7
 8004a94:	4414      	add	r4, r2
 8004a96:	441c      	add	r4, r3
 8004a98:	4633      	mov	r3, r6
 8004a9a:	bfa8      	it	ge
 8004a9c:	463b      	movge	r3, r7
 8004a9e:	42a3      	cmp	r3, r4
 8004aa0:	bfa8      	it	ge
 8004aa2:	4623      	movge	r3, r4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bfc2      	ittt	gt
 8004aa8:	1aff      	subgt	r7, r7, r3
 8004aaa:	1ae4      	subgt	r4, r4, r3
 8004aac:	1af6      	subgt	r6, r6, r3
 8004aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ab0:	b1bb      	cbz	r3, 8004ae2 <_strtod_l+0x742>
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	9904      	ldr	r1, [sp, #16]
 8004ab6:	4658      	mov	r0, fp
 8004ab8:	f001 fe72 	bl	80067a0 <__pow5mult>
 8004abc:	9004      	str	r0, [sp, #16]
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	f43f ae90 	beq.w	80047e4 <_strtod_l+0x444>
 8004ac4:	4601      	mov	r1, r0
 8004ac6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004ac8:	4658      	mov	r0, fp
 8004aca:	f001 fdd3 	bl	8006674 <__multiply>
 8004ace:	9009      	str	r0, [sp, #36]	; 0x24
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	f43f ae87 	beq.w	80047e4 <_strtod_l+0x444>
 8004ad6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ad8:	4658      	mov	r0, fp
 8004ada:	f001 fce4 	bl	80064a6 <_Bfree>
 8004ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae0:	931c      	str	r3, [sp, #112]	; 0x70
 8004ae2:	2f00      	cmp	r7, #0
 8004ae4:	dc7a      	bgt.n	8004bdc <_strtod_l+0x83c>
 8004ae6:	9b07      	ldr	r3, [sp, #28]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	dd08      	ble.n	8004afe <_strtod_l+0x75e>
 8004aec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004aee:	9906      	ldr	r1, [sp, #24]
 8004af0:	4658      	mov	r0, fp
 8004af2:	f001 fe55 	bl	80067a0 <__pow5mult>
 8004af6:	9006      	str	r0, [sp, #24]
 8004af8:	2800      	cmp	r0, #0
 8004afa:	f43f ae73 	beq.w	80047e4 <_strtod_l+0x444>
 8004afe:	2c00      	cmp	r4, #0
 8004b00:	dd08      	ble.n	8004b14 <_strtod_l+0x774>
 8004b02:	4622      	mov	r2, r4
 8004b04:	9906      	ldr	r1, [sp, #24]
 8004b06:	4658      	mov	r0, fp
 8004b08:	f001 fe98 	bl	800683c <__lshift>
 8004b0c:	9006      	str	r0, [sp, #24]
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	f43f ae68 	beq.w	80047e4 <_strtod_l+0x444>
 8004b14:	2e00      	cmp	r6, #0
 8004b16:	dd08      	ble.n	8004b2a <_strtod_l+0x78a>
 8004b18:	4632      	mov	r2, r6
 8004b1a:	9904      	ldr	r1, [sp, #16]
 8004b1c:	4658      	mov	r0, fp
 8004b1e:	f001 fe8d 	bl	800683c <__lshift>
 8004b22:	9004      	str	r0, [sp, #16]
 8004b24:	2800      	cmp	r0, #0
 8004b26:	f43f ae5d 	beq.w	80047e4 <_strtod_l+0x444>
 8004b2a:	9a06      	ldr	r2, [sp, #24]
 8004b2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b2e:	4658      	mov	r0, fp
 8004b30:	f001 fef2 	bl	8006918 <__mdiff>
 8004b34:	4680      	mov	r8, r0
 8004b36:	2800      	cmp	r0, #0
 8004b38:	f43f ae54 	beq.w	80047e4 <_strtod_l+0x444>
 8004b3c:	2400      	movs	r4, #0
 8004b3e:	68c3      	ldr	r3, [r0, #12]
 8004b40:	9904      	ldr	r1, [sp, #16]
 8004b42:	60c4      	str	r4, [r0, #12]
 8004b44:	930c      	str	r3, [sp, #48]	; 0x30
 8004b46:	f001 fecd 	bl	80068e4 <__mcmp>
 8004b4a:	42a0      	cmp	r0, r4
 8004b4c:	da54      	bge.n	8004bf8 <_strtod_l+0x858>
 8004b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b50:	b9f3      	cbnz	r3, 8004b90 <_strtod_l+0x7f0>
 8004b52:	f1b9 0f00 	cmp.w	r9, #0
 8004b56:	d11b      	bne.n	8004b90 <_strtod_l+0x7f0>
 8004b58:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004b5c:	b9c3      	cbnz	r3, 8004b90 <_strtod_l+0x7f0>
 8004b5e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004b62:	0d1b      	lsrs	r3, r3, #20
 8004b64:	051b      	lsls	r3, r3, #20
 8004b66:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004b6a:	d911      	bls.n	8004b90 <_strtod_l+0x7f0>
 8004b6c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004b70:	b91b      	cbnz	r3, 8004b7a <_strtod_l+0x7da>
 8004b72:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	dd0a      	ble.n	8004b90 <_strtod_l+0x7f0>
 8004b7a:	4641      	mov	r1, r8
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4658      	mov	r0, fp
 8004b80:	f001 fe5c 	bl	800683c <__lshift>
 8004b84:	9904      	ldr	r1, [sp, #16]
 8004b86:	4680      	mov	r8, r0
 8004b88:	f001 feac 	bl	80068e4 <__mcmp>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	dc68      	bgt.n	8004c62 <_strtod_l+0x8c2>
 8004b90:	9b05      	ldr	r3, [sp, #20]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d172      	bne.n	8004c7c <_strtod_l+0x8dc>
 8004b96:	e630      	b.n	80047fa <_strtod_l+0x45a>
 8004b98:	f018 0f01 	tst.w	r8, #1
 8004b9c:	d004      	beq.n	8004ba8 <_strtod_l+0x808>
 8004b9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ba2:	f7fb fc99 	bl	80004d8 <__aeabi_dmul>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004bac:	3508      	adds	r5, #8
 8004bae:	e6dc      	b.n	800496a <_strtod_l+0x5ca>
 8004bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	ea03 0909 	and.w	r9, r3, r9
 8004bbc:	e6f6      	b.n	80049ac <_strtod_l+0x60c>
 8004bbe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004bc2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004bc6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004bca:	35e2      	adds	r5, #226	; 0xe2
 8004bcc:	fa07 f505 	lsl.w	r5, r7, r5
 8004bd0:	970f      	str	r7, [sp, #60]	; 0x3c
 8004bd2:	e75c      	b.n	8004a8e <_strtod_l+0x6ee>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	2500      	movs	r5, #0
 8004bd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004bda:	e758      	b.n	8004a8e <_strtod_l+0x6ee>
 8004bdc:	463a      	mov	r2, r7
 8004bde:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004be0:	4658      	mov	r0, fp
 8004be2:	f001 fe2b 	bl	800683c <__lshift>
 8004be6:	901c      	str	r0, [sp, #112]	; 0x70
 8004be8:	2800      	cmp	r0, #0
 8004bea:	f47f af7c 	bne.w	8004ae6 <_strtod_l+0x746>
 8004bee:	e5f9      	b.n	80047e4 <_strtod_l+0x444>
 8004bf0:	08007a00 	.word	0x08007a00
 8004bf4:	fffffc02 	.word	0xfffffc02
 8004bf8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004bfc:	f040 8089 	bne.w	8004d12 <_strtod_l+0x972>
 8004c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c02:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004c06:	b342      	cbz	r2, 8004c5a <_strtod_l+0x8ba>
 8004c08:	4aaf      	ldr	r2, [pc, #700]	; (8004ec8 <_strtod_l+0xb28>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d156      	bne.n	8004cbc <_strtod_l+0x91c>
 8004c0e:	9b05      	ldr	r3, [sp, #20]
 8004c10:	4648      	mov	r0, r9
 8004c12:	b1eb      	cbz	r3, 8004c50 <_strtod_l+0x8b0>
 8004c14:	4653      	mov	r3, sl
 8004c16:	4aad      	ldr	r2, [pc, #692]	; (8004ecc <_strtod_l+0xb2c>)
 8004c18:	f04f 31ff 	mov.w	r1, #4294967295
 8004c1c:	401a      	ands	r2, r3
 8004c1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004c22:	d818      	bhi.n	8004c56 <_strtod_l+0x8b6>
 8004c24:	0d12      	lsrs	r2, r2, #20
 8004c26:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	4298      	cmp	r0, r3
 8004c30:	d144      	bne.n	8004cbc <_strtod_l+0x91c>
 8004c32:	4ba7      	ldr	r3, [pc, #668]	; (8004ed0 <_strtod_l+0xb30>)
 8004c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d102      	bne.n	8004c40 <_strtod_l+0x8a0>
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f43f add2 	beq.w	80047e4 <_strtod_l+0x444>
 8004c40:	4ba2      	ldr	r3, [pc, #648]	; (8004ecc <_strtod_l+0xb2c>)
 8004c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c44:	f04f 0900 	mov.w	r9, #0
 8004c48:	401a      	ands	r2, r3
 8004c4a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8004c4e:	e79f      	b.n	8004b90 <_strtod_l+0x7f0>
 8004c50:	f04f 33ff 	mov.w	r3, #4294967295
 8004c54:	e7eb      	b.n	8004c2e <_strtod_l+0x88e>
 8004c56:	460b      	mov	r3, r1
 8004c58:	e7e9      	b.n	8004c2e <_strtod_l+0x88e>
 8004c5a:	bb7b      	cbnz	r3, 8004cbc <_strtod_l+0x91c>
 8004c5c:	f1b9 0f00 	cmp.w	r9, #0
 8004c60:	d12c      	bne.n	8004cbc <_strtod_l+0x91c>
 8004c62:	9905      	ldr	r1, [sp, #20]
 8004c64:	4653      	mov	r3, sl
 8004c66:	4a99      	ldr	r2, [pc, #612]	; (8004ecc <_strtod_l+0xb2c>)
 8004c68:	b1f1      	cbz	r1, 8004ca8 <_strtod_l+0x908>
 8004c6a:	ea02 010a 	and.w	r1, r2, sl
 8004c6e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004c72:	dc19      	bgt.n	8004ca8 <_strtod_l+0x908>
 8004c74:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004c78:	f77f ae51 	ble.w	800491e <_strtod_l+0x57e>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4a95      	ldr	r2, [pc, #596]	; (8004ed4 <_strtod_l+0xb34>)
 8004c80:	4648      	mov	r0, r9
 8004c82:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004c86:	4651      	mov	r1, sl
 8004c88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004c8c:	f7fb fc24 	bl	80004d8 <__aeabi_dmul>
 8004c90:	4681      	mov	r9, r0
 8004c92:	468a      	mov	sl, r1
 8004c94:	2900      	cmp	r1, #0
 8004c96:	f47f adb0 	bne.w	80047fa <_strtod_l+0x45a>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	f47f adad 	bne.w	80047fa <_strtod_l+0x45a>
 8004ca0:	2322      	movs	r3, #34	; 0x22
 8004ca2:	f8cb 3000 	str.w	r3, [fp]
 8004ca6:	e5a8      	b.n	80047fa <_strtod_l+0x45a>
 8004ca8:	4013      	ands	r3, r2
 8004caa:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004cae:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8004cb2:	f04f 39ff 	mov.w	r9, #4294967295
 8004cb6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8004cba:	e769      	b.n	8004b90 <_strtod_l+0x7f0>
 8004cbc:	b19d      	cbz	r5, 8004ce6 <_strtod_l+0x946>
 8004cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc0:	421d      	tst	r5, r3
 8004cc2:	f43f af65 	beq.w	8004b90 <_strtod_l+0x7f0>
 8004cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cc8:	9a05      	ldr	r2, [sp, #20]
 8004cca:	4648      	mov	r0, r9
 8004ccc:	4651      	mov	r1, sl
 8004cce:	b173      	cbz	r3, 8004cee <_strtod_l+0x94e>
 8004cd0:	f7ff fb42 	bl	8004358 <sulp>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cdc:	f7fb fa46 	bl	800016c <__adddf3>
 8004ce0:	4681      	mov	r9, r0
 8004ce2:	468a      	mov	sl, r1
 8004ce4:	e754      	b.n	8004b90 <_strtod_l+0x7f0>
 8004ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ce8:	ea13 0f09 	tst.w	r3, r9
 8004cec:	e7e9      	b.n	8004cc2 <_strtod_l+0x922>
 8004cee:	f7ff fb33 	bl	8004358 <sulp>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cfa:	f7fb fa35 	bl	8000168 <__aeabi_dsub>
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2300      	movs	r3, #0
 8004d02:	4681      	mov	r9, r0
 8004d04:	468a      	mov	sl, r1
 8004d06:	f7fb fe4f 	bl	80009a8 <__aeabi_dcmpeq>
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	f47f ae07 	bne.w	800491e <_strtod_l+0x57e>
 8004d10:	e73e      	b.n	8004b90 <_strtod_l+0x7f0>
 8004d12:	9904      	ldr	r1, [sp, #16]
 8004d14:	4640      	mov	r0, r8
 8004d16:	f001 ff22 	bl	8006b5e <__ratio>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d20:	4606      	mov	r6, r0
 8004d22:	460f      	mov	r7, r1
 8004d24:	f7fb fe54 	bl	80009d0 <__aeabi_dcmple>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d075      	beq.n	8004e18 <_strtod_l+0xa78>
 8004d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d047      	beq.n	8004dc2 <_strtod_l+0xa22>
 8004d32:	2600      	movs	r6, #0
 8004d34:	4f68      	ldr	r7, [pc, #416]	; (8004ed8 <_strtod_l+0xb38>)
 8004d36:	4d68      	ldr	r5, [pc, #416]	; (8004ed8 <_strtod_l+0xb38>)
 8004d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d3e:	0d1b      	lsrs	r3, r3, #20
 8004d40:	051b      	lsls	r3, r3, #20
 8004d42:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d46:	4b65      	ldr	r3, [pc, #404]	; (8004edc <_strtod_l+0xb3c>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	f040 80cf 	bne.w	8004eec <_strtod_l+0xb4c>
 8004d4e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d52:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d58:	4648      	mov	r0, r9
 8004d5a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8004d5e:	4651      	mov	r1, sl
 8004d60:	f001 fe38 	bl	80069d4 <__ulp>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4630      	mov	r0, r6
 8004d6a:	4639      	mov	r1, r7
 8004d6c:	f7fb fbb4 	bl	80004d8 <__aeabi_dmul>
 8004d70:	464a      	mov	r2, r9
 8004d72:	4653      	mov	r3, sl
 8004d74:	f7fb f9fa 	bl	800016c <__adddf3>
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4954      	ldr	r1, [pc, #336]	; (8004ecc <_strtod_l+0xb2c>)
 8004d7c:	4a58      	ldr	r2, [pc, #352]	; (8004ee0 <_strtod_l+0xb40>)
 8004d7e:	4019      	ands	r1, r3
 8004d80:	4291      	cmp	r1, r2
 8004d82:	4681      	mov	r9, r0
 8004d84:	d95e      	bls.n	8004e44 <_strtod_l+0xaa4>
 8004d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d88:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d103      	bne.n	8004d98 <_strtod_l+0x9f8>
 8004d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d92:	3301      	adds	r3, #1
 8004d94:	f43f ad26 	beq.w	80047e4 <_strtod_l+0x444>
 8004d98:	f04f 39ff 	mov.w	r9, #4294967295
 8004d9c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004ed0 <_strtod_l+0xb30>
 8004da0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004da2:	4658      	mov	r0, fp
 8004da4:	f001 fb7f 	bl	80064a6 <_Bfree>
 8004da8:	9906      	ldr	r1, [sp, #24]
 8004daa:	4658      	mov	r0, fp
 8004dac:	f001 fb7b 	bl	80064a6 <_Bfree>
 8004db0:	9904      	ldr	r1, [sp, #16]
 8004db2:	4658      	mov	r0, fp
 8004db4:	f001 fb77 	bl	80064a6 <_Bfree>
 8004db8:	4641      	mov	r1, r8
 8004dba:	4658      	mov	r0, fp
 8004dbc:	f001 fb73 	bl	80064a6 <_Bfree>
 8004dc0:	e617      	b.n	80049f2 <_strtod_l+0x652>
 8004dc2:	f1b9 0f00 	cmp.w	r9, #0
 8004dc6:	d119      	bne.n	8004dfc <_strtod_l+0xa5c>
 8004dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dce:	b9e3      	cbnz	r3, 8004e0a <_strtod_l+0xa6a>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4b41      	ldr	r3, [pc, #260]	; (8004ed8 <_strtod_l+0xb38>)
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	f7fb fdf0 	bl	80009bc <__aeabi_dcmplt>
 8004ddc:	b9c8      	cbnz	r0, 8004e12 <_strtod_l+0xa72>
 8004dde:	2200      	movs	r2, #0
 8004de0:	4b40      	ldr	r3, [pc, #256]	; (8004ee4 <_strtod_l+0xb44>)
 8004de2:	4630      	mov	r0, r6
 8004de4:	4639      	mov	r1, r7
 8004de6:	f7fb fb77 	bl	80004d8 <__aeabi_dmul>
 8004dea:	4604      	mov	r4, r0
 8004dec:	460d      	mov	r5, r1
 8004dee:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004df2:	9418      	str	r4, [sp, #96]	; 0x60
 8004df4:	9319      	str	r3, [sp, #100]	; 0x64
 8004df6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004dfa:	e79d      	b.n	8004d38 <_strtod_l+0x998>
 8004dfc:	f1b9 0f01 	cmp.w	r9, #1
 8004e00:	d103      	bne.n	8004e0a <_strtod_l+0xa6a>
 8004e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f43f ad8a 	beq.w	800491e <_strtod_l+0x57e>
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	4f36      	ldr	r7, [pc, #216]	; (8004ee8 <_strtod_l+0xb48>)
 8004e0e:	2400      	movs	r4, #0
 8004e10:	e791      	b.n	8004d36 <_strtod_l+0x996>
 8004e12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004e14:	4d33      	ldr	r5, [pc, #204]	; (8004ee4 <_strtod_l+0xb44>)
 8004e16:	e7ea      	b.n	8004dee <_strtod_l+0xa4e>
 8004e18:	4b32      	ldr	r3, [pc, #200]	; (8004ee4 <_strtod_l+0xb44>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	4639      	mov	r1, r7
 8004e20:	f7fb fb5a 	bl	80004d8 <__aeabi_dmul>
 8004e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e26:	4604      	mov	r4, r0
 8004e28:	460d      	mov	r5, r1
 8004e2a:	b933      	cbnz	r3, 8004e3a <_strtod_l+0xa9a>
 8004e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e30:	9010      	str	r0, [sp, #64]	; 0x40
 8004e32:	9311      	str	r3, [sp, #68]	; 0x44
 8004e34:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004e38:	e77e      	b.n	8004d38 <_strtod_l+0x998>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004e42:	e7f7      	b.n	8004e34 <_strtod_l+0xa94>
 8004e44:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8004e48:	9b05      	ldr	r3, [sp, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1a8      	bne.n	8004da0 <_strtod_l+0xa00>
 8004e4e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e52:	0d1b      	lsrs	r3, r3, #20
 8004e54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e56:	051b      	lsls	r3, r3, #20
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	4656      	mov	r6, sl
 8004e5c:	d1a0      	bne.n	8004da0 <_strtod_l+0xa00>
 8004e5e:	4629      	mov	r1, r5
 8004e60:	4620      	mov	r0, r4
 8004e62:	f7fb fde9 	bl	8000a38 <__aeabi_d2iz>
 8004e66:	f7fb facd 	bl	8000404 <__aeabi_i2d>
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7fb f979 	bl	8000168 <__aeabi_dsub>
 8004e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e78:	4604      	mov	r4, r0
 8004e7a:	460d      	mov	r5, r1
 8004e7c:	b933      	cbnz	r3, 8004e8c <_strtod_l+0xaec>
 8004e7e:	f1b9 0f00 	cmp.w	r9, #0
 8004e82:	d103      	bne.n	8004e8c <_strtod_l+0xaec>
 8004e84:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004e88:	2e00      	cmp	r6, #0
 8004e8a:	d06a      	beq.n	8004f62 <_strtod_l+0xbc2>
 8004e8c:	a30a      	add	r3, pc, #40	; (adr r3, 8004eb8 <_strtod_l+0xb18>)
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	4620      	mov	r0, r4
 8004e94:	4629      	mov	r1, r5
 8004e96:	f7fb fd91 	bl	80009bc <__aeabi_dcmplt>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	f47f acad 	bne.w	80047fa <_strtod_l+0x45a>
 8004ea0:	a307      	add	r3, pc, #28	; (adr r3, 8004ec0 <_strtod_l+0xb20>)
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	f7fb fda5 	bl	80009f8 <__aeabi_dcmpgt>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f43f af76 	beq.w	8004da0 <_strtod_l+0xa00>
 8004eb4:	e4a1      	b.n	80047fa <_strtod_l+0x45a>
 8004eb6:	bf00      	nop
 8004eb8:	94a03595 	.word	0x94a03595
 8004ebc:	3fdfffff 	.word	0x3fdfffff
 8004ec0:	35afe535 	.word	0x35afe535
 8004ec4:	3fe00000 	.word	0x3fe00000
 8004ec8:	000fffff 	.word	0x000fffff
 8004ecc:	7ff00000 	.word	0x7ff00000
 8004ed0:	7fefffff 	.word	0x7fefffff
 8004ed4:	39500000 	.word	0x39500000
 8004ed8:	3ff00000 	.word	0x3ff00000
 8004edc:	7fe00000 	.word	0x7fe00000
 8004ee0:	7c9fffff 	.word	0x7c9fffff
 8004ee4:	3fe00000 	.word	0x3fe00000
 8004ee8:	bff00000 	.word	0xbff00000
 8004eec:	9b05      	ldr	r3, [sp, #20]
 8004eee:	b313      	cbz	r3, 8004f36 <_strtod_l+0xb96>
 8004ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ef2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ef6:	d81e      	bhi.n	8004f36 <_strtod_l+0xb96>
 8004ef8:	a325      	add	r3, pc, #148	; (adr r3, 8004f90 <_strtod_l+0xbf0>)
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	4620      	mov	r0, r4
 8004f00:	4629      	mov	r1, r5
 8004f02:	f7fb fd65 	bl	80009d0 <__aeabi_dcmple>
 8004f06:	b190      	cbz	r0, 8004f2e <_strtod_l+0xb8e>
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f7fb fdbc 	bl	8000a88 <__aeabi_d2uiz>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	bf08      	it	eq
 8004f14:	2001      	moveq	r0, #1
 8004f16:	f7fb fa65 	bl	80003e4 <__aeabi_ui2d>
 8004f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	460d      	mov	r5, r1
 8004f20:	b9d3      	cbnz	r3, 8004f58 <_strtod_l+0xbb8>
 8004f22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f26:	9012      	str	r0, [sp, #72]	; 0x48
 8004f28:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f2a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004f2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f30:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004f34:	1a9f      	subs	r7, r3, r2
 8004f36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f3a:	f001 fd4b 	bl	80069d4 <__ulp>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4630      	mov	r0, r6
 8004f44:	4639      	mov	r1, r7
 8004f46:	f7fb fac7 	bl	80004d8 <__aeabi_dmul>
 8004f4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f4e:	f7fb f90d 	bl	800016c <__adddf3>
 8004f52:	4681      	mov	r9, r0
 8004f54:	468a      	mov	sl, r1
 8004f56:	e777      	b.n	8004e48 <_strtod_l+0xaa8>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004f60:	e7e3      	b.n	8004f2a <_strtod_l+0xb8a>
 8004f62:	a30d      	add	r3, pc, #52	; (adr r3, 8004f98 <_strtod_l+0xbf8>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f7fb fd28 	bl	80009bc <__aeabi_dcmplt>
 8004f6c:	e79f      	b.n	8004eae <_strtod_l+0xb0e>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	930d      	str	r3, [sp, #52]	; 0x34
 8004f72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	f7ff ba55 	b.w	8004426 <_strtod_l+0x86>
 8004f7c:	2b65      	cmp	r3, #101	; 0x65
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f43f ab42 	beq.w	800460a <_strtod_l+0x26a>
 8004f86:	2101      	movs	r1, #1
 8004f88:	4614      	mov	r4, r2
 8004f8a:	9105      	str	r1, [sp, #20]
 8004f8c:	f7ff babf 	b.w	800450e <_strtod_l+0x16e>
 8004f90:	ffc00000 	.word	0xffc00000
 8004f94:	41dfffff 	.word	0x41dfffff
 8004f98:	94a03595 	.word	0x94a03595
 8004f9c:	3fcfffff 	.word	0x3fcfffff

08004fa0 <_strtod_r>:
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <_strtod_r+0x18>)
 8004fa2:	b410      	push	{r4}
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4c05      	ldr	r4, [pc, #20]	; (8004fbc <_strtod_r+0x1c>)
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bf08      	it	eq
 8004fae:	4623      	moveq	r3, r4
 8004fb0:	bc10      	pop	{r4}
 8004fb2:	f7ff b9f5 	b.w	80043a0 <_strtod_l>
 8004fb6:	bf00      	nop
 8004fb8:	20000010 	.word	0x20000010
 8004fbc:	20000074 	.word	0x20000074

08004fc0 <_strtol_l.isra.0>:
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4689      	mov	r9, r1
 8004fc8:	4692      	mov	sl, r2
 8004fca:	461e      	mov	r6, r3
 8004fcc:	460f      	mov	r7, r1
 8004fce:	463d      	mov	r5, r7
 8004fd0:	9808      	ldr	r0, [sp, #32]
 8004fd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004fd6:	f001 f9eb 	bl	80063b0 <__locale_ctype_ptr_l>
 8004fda:	4420      	add	r0, r4
 8004fdc:	7843      	ldrb	r3, [r0, #1]
 8004fde:	f013 0308 	ands.w	r3, r3, #8
 8004fe2:	d132      	bne.n	800504a <_strtol_l.isra.0+0x8a>
 8004fe4:	2c2d      	cmp	r4, #45	; 0x2d
 8004fe6:	d132      	bne.n	800504e <_strtol_l.isra.0+0x8e>
 8004fe8:	2201      	movs	r2, #1
 8004fea:	787c      	ldrb	r4, [r7, #1]
 8004fec:	1cbd      	adds	r5, r7, #2
 8004fee:	2e00      	cmp	r6, #0
 8004ff0:	d05d      	beq.n	80050ae <_strtol_l.isra.0+0xee>
 8004ff2:	2e10      	cmp	r6, #16
 8004ff4:	d109      	bne.n	800500a <_strtol_l.isra.0+0x4a>
 8004ff6:	2c30      	cmp	r4, #48	; 0x30
 8004ff8:	d107      	bne.n	800500a <_strtol_l.isra.0+0x4a>
 8004ffa:	782b      	ldrb	r3, [r5, #0]
 8004ffc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005000:	2b58      	cmp	r3, #88	; 0x58
 8005002:	d14f      	bne.n	80050a4 <_strtol_l.isra.0+0xe4>
 8005004:	2610      	movs	r6, #16
 8005006:	786c      	ldrb	r4, [r5, #1]
 8005008:	3502      	adds	r5, #2
 800500a:	2a00      	cmp	r2, #0
 800500c:	bf14      	ite	ne
 800500e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005012:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005016:	2700      	movs	r7, #0
 8005018:	fbb1 fcf6 	udiv	ip, r1, r6
 800501c:	4638      	mov	r0, r7
 800501e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005022:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005026:	2b09      	cmp	r3, #9
 8005028:	d817      	bhi.n	800505a <_strtol_l.isra.0+0x9a>
 800502a:	461c      	mov	r4, r3
 800502c:	42a6      	cmp	r6, r4
 800502e:	dd23      	ble.n	8005078 <_strtol_l.isra.0+0xb8>
 8005030:	1c7b      	adds	r3, r7, #1
 8005032:	d007      	beq.n	8005044 <_strtol_l.isra.0+0x84>
 8005034:	4584      	cmp	ip, r0
 8005036:	d31c      	bcc.n	8005072 <_strtol_l.isra.0+0xb2>
 8005038:	d101      	bne.n	800503e <_strtol_l.isra.0+0x7e>
 800503a:	45a6      	cmp	lr, r4
 800503c:	db19      	blt.n	8005072 <_strtol_l.isra.0+0xb2>
 800503e:	2701      	movs	r7, #1
 8005040:	fb00 4006 	mla	r0, r0, r6, r4
 8005044:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005048:	e7eb      	b.n	8005022 <_strtol_l.isra.0+0x62>
 800504a:	462f      	mov	r7, r5
 800504c:	e7bf      	b.n	8004fce <_strtol_l.isra.0+0xe>
 800504e:	2c2b      	cmp	r4, #43	; 0x2b
 8005050:	bf04      	itt	eq
 8005052:	1cbd      	addeq	r5, r7, #2
 8005054:	787c      	ldrbeq	r4, [r7, #1]
 8005056:	461a      	mov	r2, r3
 8005058:	e7c9      	b.n	8004fee <_strtol_l.isra.0+0x2e>
 800505a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800505e:	2b19      	cmp	r3, #25
 8005060:	d801      	bhi.n	8005066 <_strtol_l.isra.0+0xa6>
 8005062:	3c37      	subs	r4, #55	; 0x37
 8005064:	e7e2      	b.n	800502c <_strtol_l.isra.0+0x6c>
 8005066:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800506a:	2b19      	cmp	r3, #25
 800506c:	d804      	bhi.n	8005078 <_strtol_l.isra.0+0xb8>
 800506e:	3c57      	subs	r4, #87	; 0x57
 8005070:	e7dc      	b.n	800502c <_strtol_l.isra.0+0x6c>
 8005072:	f04f 37ff 	mov.w	r7, #4294967295
 8005076:	e7e5      	b.n	8005044 <_strtol_l.isra.0+0x84>
 8005078:	1c7b      	adds	r3, r7, #1
 800507a:	d108      	bne.n	800508e <_strtol_l.isra.0+0xce>
 800507c:	2322      	movs	r3, #34	; 0x22
 800507e:	4608      	mov	r0, r1
 8005080:	f8c8 3000 	str.w	r3, [r8]
 8005084:	f1ba 0f00 	cmp.w	sl, #0
 8005088:	d107      	bne.n	800509a <_strtol_l.isra.0+0xda>
 800508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508e:	b102      	cbz	r2, 8005092 <_strtol_l.isra.0+0xd2>
 8005090:	4240      	negs	r0, r0
 8005092:	f1ba 0f00 	cmp.w	sl, #0
 8005096:	d0f8      	beq.n	800508a <_strtol_l.isra.0+0xca>
 8005098:	b10f      	cbz	r7, 800509e <_strtol_l.isra.0+0xde>
 800509a:	f105 39ff 	add.w	r9, r5, #4294967295
 800509e:	f8ca 9000 	str.w	r9, [sl]
 80050a2:	e7f2      	b.n	800508a <_strtol_l.isra.0+0xca>
 80050a4:	2430      	movs	r4, #48	; 0x30
 80050a6:	2e00      	cmp	r6, #0
 80050a8:	d1af      	bne.n	800500a <_strtol_l.isra.0+0x4a>
 80050aa:	2608      	movs	r6, #8
 80050ac:	e7ad      	b.n	800500a <_strtol_l.isra.0+0x4a>
 80050ae:	2c30      	cmp	r4, #48	; 0x30
 80050b0:	d0a3      	beq.n	8004ffa <_strtol_l.isra.0+0x3a>
 80050b2:	260a      	movs	r6, #10
 80050b4:	e7a9      	b.n	800500a <_strtol_l.isra.0+0x4a>
	...

080050b8 <_strtol_r>:
 80050b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ba:	4c06      	ldr	r4, [pc, #24]	; (80050d4 <_strtol_r+0x1c>)
 80050bc:	4d06      	ldr	r5, [pc, #24]	; (80050d8 <_strtol_r+0x20>)
 80050be:	6824      	ldr	r4, [r4, #0]
 80050c0:	6a24      	ldr	r4, [r4, #32]
 80050c2:	2c00      	cmp	r4, #0
 80050c4:	bf08      	it	eq
 80050c6:	462c      	moveq	r4, r5
 80050c8:	9400      	str	r4, [sp, #0]
 80050ca:	f7ff ff79 	bl	8004fc0 <_strtol_l.isra.0>
 80050ce:	b003      	add	sp, #12
 80050d0:	bd30      	pop	{r4, r5, pc}
 80050d2:	bf00      	nop
 80050d4:	20000010 	.word	0x20000010
 80050d8:	20000074 	.word	0x20000074

080050dc <quorem>:
 80050dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e0:	6903      	ldr	r3, [r0, #16]
 80050e2:	690c      	ldr	r4, [r1, #16]
 80050e4:	4680      	mov	r8, r0
 80050e6:	42a3      	cmp	r3, r4
 80050e8:	f2c0 8084 	blt.w	80051f4 <quorem+0x118>
 80050ec:	3c01      	subs	r4, #1
 80050ee:	f101 0714 	add.w	r7, r1, #20
 80050f2:	f100 0614 	add.w	r6, r0, #20
 80050f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80050fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80050fe:	3501      	adds	r5, #1
 8005100:	fbb0 f5f5 	udiv	r5, r0, r5
 8005104:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005108:	eb06 030c 	add.w	r3, r6, ip
 800510c:	eb07 090c 	add.w	r9, r7, ip
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	b39d      	cbz	r5, 800517c <quorem+0xa0>
 8005114:	f04f 0a00 	mov.w	sl, #0
 8005118:	4638      	mov	r0, r7
 800511a:	46b6      	mov	lr, r6
 800511c:	46d3      	mov	fp, sl
 800511e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005122:	b293      	uxth	r3, r2
 8005124:	fb05 a303 	mla	r3, r5, r3, sl
 8005128:	0c12      	lsrs	r2, r2, #16
 800512a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800512e:	fb05 a202 	mla	r2, r5, r2, sl
 8005132:	b29b      	uxth	r3, r3
 8005134:	ebab 0303 	sub.w	r3, fp, r3
 8005138:	f8de b000 	ldr.w	fp, [lr]
 800513c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005140:	fa1f fb8b 	uxth.w	fp, fp
 8005144:	445b      	add	r3, fp
 8005146:	fa1f fb82 	uxth.w	fp, r2
 800514a:	f8de 2000 	ldr.w	r2, [lr]
 800514e:	4581      	cmp	r9, r0
 8005150:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005154:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005158:	b29b      	uxth	r3, r3
 800515a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800515e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005162:	f84e 3b04 	str.w	r3, [lr], #4
 8005166:	d2da      	bcs.n	800511e <quorem+0x42>
 8005168:	f856 300c 	ldr.w	r3, [r6, ip]
 800516c:	b933      	cbnz	r3, 800517c <quorem+0xa0>
 800516e:	9b01      	ldr	r3, [sp, #4]
 8005170:	3b04      	subs	r3, #4
 8005172:	429e      	cmp	r6, r3
 8005174:	461a      	mov	r2, r3
 8005176:	d331      	bcc.n	80051dc <quorem+0x100>
 8005178:	f8c8 4010 	str.w	r4, [r8, #16]
 800517c:	4640      	mov	r0, r8
 800517e:	f001 fbb1 	bl	80068e4 <__mcmp>
 8005182:	2800      	cmp	r0, #0
 8005184:	db26      	blt.n	80051d4 <quorem+0xf8>
 8005186:	4630      	mov	r0, r6
 8005188:	f04f 0c00 	mov.w	ip, #0
 800518c:	3501      	adds	r5, #1
 800518e:	f857 1b04 	ldr.w	r1, [r7], #4
 8005192:	f8d0 e000 	ldr.w	lr, [r0]
 8005196:	b28b      	uxth	r3, r1
 8005198:	ebac 0303 	sub.w	r3, ip, r3
 800519c:	fa1f f28e 	uxth.w	r2, lr
 80051a0:	4413      	add	r3, r2
 80051a2:	0c0a      	lsrs	r2, r1, #16
 80051a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051b2:	45b9      	cmp	r9, r7
 80051b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051b8:	f840 3b04 	str.w	r3, [r0], #4
 80051bc:	d2e7      	bcs.n	800518e <quorem+0xb2>
 80051be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80051c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80051c6:	b92a      	cbnz	r2, 80051d4 <quorem+0xf8>
 80051c8:	3b04      	subs	r3, #4
 80051ca:	429e      	cmp	r6, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	d30b      	bcc.n	80051e8 <quorem+0x10c>
 80051d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80051d4:	4628      	mov	r0, r5
 80051d6:	b003      	add	sp, #12
 80051d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	3b04      	subs	r3, #4
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d1c9      	bne.n	8005178 <quorem+0x9c>
 80051e4:	3c01      	subs	r4, #1
 80051e6:	e7c4      	b.n	8005172 <quorem+0x96>
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	3b04      	subs	r3, #4
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	d1ef      	bne.n	80051d0 <quorem+0xf4>
 80051f0:	3c01      	subs	r4, #1
 80051f2:	e7ea      	b.n	80051ca <quorem+0xee>
 80051f4:	2000      	movs	r0, #0
 80051f6:	e7ee      	b.n	80051d6 <quorem+0xfa>

080051f8 <_dtoa_r>:
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	4616      	mov	r6, r2
 80051fe:	461f      	mov	r7, r3
 8005200:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005202:	b095      	sub	sp, #84	; 0x54
 8005204:	4604      	mov	r4, r0
 8005206:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800520a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800520e:	b93d      	cbnz	r5, 8005220 <_dtoa_r+0x28>
 8005210:	2010      	movs	r0, #16
 8005212:	f001 f8e1 	bl	80063d8 <malloc>
 8005216:	6260      	str	r0, [r4, #36]	; 0x24
 8005218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800521c:	6005      	str	r5, [r0, #0]
 800521e:	60c5      	str	r5, [r0, #12]
 8005220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	b151      	cbz	r1, 800523c <_dtoa_r+0x44>
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	2301      	movs	r3, #1
 800522a:	4093      	lsls	r3, r2
 800522c:	604a      	str	r2, [r1, #4]
 800522e:	608b      	str	r3, [r1, #8]
 8005230:	4620      	mov	r0, r4
 8005232:	f001 f938 	bl	80064a6 <_Bfree>
 8005236:	2200      	movs	r2, #0
 8005238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	1e3b      	subs	r3, r7, #0
 800523e:	bfaf      	iteee	ge
 8005240:	2300      	movge	r3, #0
 8005242:	2201      	movlt	r2, #1
 8005244:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005248:	9303      	strlt	r3, [sp, #12]
 800524a:	bfac      	ite	ge
 800524c:	f8c8 3000 	strge.w	r3, [r8]
 8005250:	f8c8 2000 	strlt.w	r2, [r8]
 8005254:	4bae      	ldr	r3, [pc, #696]	; (8005510 <_dtoa_r+0x318>)
 8005256:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800525a:	ea33 0308 	bics.w	r3, r3, r8
 800525e:	d11b      	bne.n	8005298 <_dtoa_r+0xa0>
 8005260:	f242 730f 	movw	r3, #9999	; 0x270f
 8005264:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	9b02      	ldr	r3, [sp, #8]
 800526a:	b923      	cbnz	r3, 8005276 <_dtoa_r+0x7e>
 800526c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005270:	2800      	cmp	r0, #0
 8005272:	f000 8545 	beq.w	8005d00 <_dtoa_r+0xb08>
 8005276:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005278:	b953      	cbnz	r3, 8005290 <_dtoa_r+0x98>
 800527a:	4ba6      	ldr	r3, [pc, #664]	; (8005514 <_dtoa_r+0x31c>)
 800527c:	e021      	b.n	80052c2 <_dtoa_r+0xca>
 800527e:	4ba6      	ldr	r3, [pc, #664]	; (8005518 <_dtoa_r+0x320>)
 8005280:	9306      	str	r3, [sp, #24]
 8005282:	3308      	adds	r3, #8
 8005284:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	9806      	ldr	r0, [sp, #24]
 800528a:	b015      	add	sp, #84	; 0x54
 800528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005290:	4ba0      	ldr	r3, [pc, #640]	; (8005514 <_dtoa_r+0x31c>)
 8005292:	9306      	str	r3, [sp, #24]
 8005294:	3303      	adds	r3, #3
 8005296:	e7f5      	b.n	8005284 <_dtoa_r+0x8c>
 8005298:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800529c:	2200      	movs	r2, #0
 800529e:	2300      	movs	r3, #0
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80052a8:	4682      	mov	sl, r0
 80052aa:	b160      	cbz	r0, 80052c6 <_dtoa_r+0xce>
 80052ac:	2301      	movs	r3, #1
 80052ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8520 	beq.w	8005cfa <_dtoa_r+0xb02>
 80052ba:	4b98      	ldr	r3, [pc, #608]	; (800551c <_dtoa_r+0x324>)
 80052bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	9306      	str	r3, [sp, #24]
 80052c4:	e7e0      	b.n	8005288 <_dtoa_r+0x90>
 80052c6:	ab12      	add	r3, sp, #72	; 0x48
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	ab13      	add	r3, sp, #76	; 0x4c
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	4632      	mov	r2, r6
 80052d0:	463b      	mov	r3, r7
 80052d2:	4620      	mov	r0, r4
 80052d4:	f001 fbf4 	bl	8006ac0 <__d2b>
 80052d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80052dc:	4683      	mov	fp, r0
 80052de:	2d00      	cmp	r5, #0
 80052e0:	d07d      	beq.n	80053de <_dtoa_r+0x1e6>
 80052e2:	46b0      	mov	r8, r6
 80052e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052e8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80052ec:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80052f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052f4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80052f8:	2200      	movs	r2, #0
 80052fa:	4b89      	ldr	r3, [pc, #548]	; (8005520 <_dtoa_r+0x328>)
 80052fc:	4640      	mov	r0, r8
 80052fe:	4649      	mov	r1, r9
 8005300:	f7fa ff32 	bl	8000168 <__aeabi_dsub>
 8005304:	a37c      	add	r3, pc, #496	; (adr r3, 80054f8 <_dtoa_r+0x300>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f7fb f8e5 	bl	80004d8 <__aeabi_dmul>
 800530e:	a37c      	add	r3, pc, #496	; (adr r3, 8005500 <_dtoa_r+0x308>)
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f7fa ff2a 	bl	800016c <__adddf3>
 8005318:	4606      	mov	r6, r0
 800531a:	4628      	mov	r0, r5
 800531c:	460f      	mov	r7, r1
 800531e:	f7fb f871 	bl	8000404 <__aeabi_i2d>
 8005322:	a379      	add	r3, pc, #484	; (adr r3, 8005508 <_dtoa_r+0x310>)
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f7fb f8d6 	bl	80004d8 <__aeabi_dmul>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4630      	mov	r0, r6
 8005332:	4639      	mov	r1, r7
 8005334:	f7fa ff1a 	bl	800016c <__adddf3>
 8005338:	4606      	mov	r6, r0
 800533a:	460f      	mov	r7, r1
 800533c:	f7fb fb7c 	bl	8000a38 <__aeabi_d2iz>
 8005340:	2200      	movs	r2, #0
 8005342:	4682      	mov	sl, r0
 8005344:	2300      	movs	r3, #0
 8005346:	4630      	mov	r0, r6
 8005348:	4639      	mov	r1, r7
 800534a:	f7fb fb37 	bl	80009bc <__aeabi_dcmplt>
 800534e:	b148      	cbz	r0, 8005364 <_dtoa_r+0x16c>
 8005350:	4650      	mov	r0, sl
 8005352:	f7fb f857 	bl	8000404 <__aeabi_i2d>
 8005356:	4632      	mov	r2, r6
 8005358:	463b      	mov	r3, r7
 800535a:	f7fb fb25 	bl	80009a8 <__aeabi_dcmpeq>
 800535e:	b908      	cbnz	r0, 8005364 <_dtoa_r+0x16c>
 8005360:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005364:	f1ba 0f16 	cmp.w	sl, #22
 8005368:	d85a      	bhi.n	8005420 <_dtoa_r+0x228>
 800536a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800536e:	496d      	ldr	r1, [pc, #436]	; (8005524 <_dtoa_r+0x32c>)
 8005370:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005378:	f7fb fb3e 	bl	80009f8 <__aeabi_dcmpgt>
 800537c:	2800      	cmp	r0, #0
 800537e:	d051      	beq.n	8005424 <_dtoa_r+0x22c>
 8005380:	2300      	movs	r3, #0
 8005382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005386:	930d      	str	r3, [sp, #52]	; 0x34
 8005388:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800538a:	1b5d      	subs	r5, r3, r5
 800538c:	1e6b      	subs	r3, r5, #1
 800538e:	9307      	str	r3, [sp, #28]
 8005390:	bf43      	ittte	mi
 8005392:	2300      	movmi	r3, #0
 8005394:	f1c5 0901 	rsbmi	r9, r5, #1
 8005398:	9307      	strmi	r3, [sp, #28]
 800539a:	f04f 0900 	movpl.w	r9, #0
 800539e:	f1ba 0f00 	cmp.w	sl, #0
 80053a2:	db41      	blt.n	8005428 <_dtoa_r+0x230>
 80053a4:	9b07      	ldr	r3, [sp, #28]
 80053a6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80053aa:	4453      	add	r3, sl
 80053ac:	9307      	str	r3, [sp, #28]
 80053ae:	2300      	movs	r3, #0
 80053b0:	9308      	str	r3, [sp, #32]
 80053b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053b4:	2b09      	cmp	r3, #9
 80053b6:	f200 808f 	bhi.w	80054d8 <_dtoa_r+0x2e0>
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	bfc4      	itt	gt
 80053be:	3b04      	subgt	r3, #4
 80053c0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80053c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053c4:	bfc8      	it	gt
 80053c6:	2500      	movgt	r5, #0
 80053c8:	f1a3 0302 	sub.w	r3, r3, #2
 80053cc:	bfd8      	it	le
 80053ce:	2501      	movle	r5, #1
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	f200 808d 	bhi.w	80054f0 <_dtoa_r+0x2f8>
 80053d6:	e8df f003 	tbb	[pc, r3]
 80053da:	7d7b      	.short	0x7d7b
 80053dc:	6f2f      	.short	0x6f2f
 80053de:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80053e2:	441d      	add	r5, r3
 80053e4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80053e8:	2820      	cmp	r0, #32
 80053ea:	dd13      	ble.n	8005414 <_dtoa_r+0x21c>
 80053ec:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80053f0:	9b02      	ldr	r3, [sp, #8]
 80053f2:	fa08 f800 	lsl.w	r8, r8, r0
 80053f6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80053fa:	fa23 f000 	lsr.w	r0, r3, r0
 80053fe:	ea48 0000 	orr.w	r0, r8, r0
 8005402:	f7fa ffef 	bl	80003e4 <__aeabi_ui2d>
 8005406:	2301      	movs	r3, #1
 8005408:	4680      	mov	r8, r0
 800540a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800540e:	3d01      	subs	r5, #1
 8005410:	9310      	str	r3, [sp, #64]	; 0x40
 8005412:	e771      	b.n	80052f8 <_dtoa_r+0x100>
 8005414:	9b02      	ldr	r3, [sp, #8]
 8005416:	f1c0 0020 	rsb	r0, r0, #32
 800541a:	fa03 f000 	lsl.w	r0, r3, r0
 800541e:	e7f0      	b.n	8005402 <_dtoa_r+0x20a>
 8005420:	2301      	movs	r3, #1
 8005422:	e7b0      	b.n	8005386 <_dtoa_r+0x18e>
 8005424:	900d      	str	r0, [sp, #52]	; 0x34
 8005426:	e7af      	b.n	8005388 <_dtoa_r+0x190>
 8005428:	f1ca 0300 	rsb	r3, sl, #0
 800542c:	9308      	str	r3, [sp, #32]
 800542e:	2300      	movs	r3, #0
 8005430:	eba9 090a 	sub.w	r9, r9, sl
 8005434:	930c      	str	r3, [sp, #48]	; 0x30
 8005436:	e7bc      	b.n	80053b2 <_dtoa_r+0x1ba>
 8005438:	2301      	movs	r3, #1
 800543a:	9309      	str	r3, [sp, #36]	; 0x24
 800543c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800543e:	2b00      	cmp	r3, #0
 8005440:	dd74      	ble.n	800552c <_dtoa_r+0x334>
 8005442:	4698      	mov	r8, r3
 8005444:	9304      	str	r3, [sp, #16]
 8005446:	2200      	movs	r2, #0
 8005448:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800544a:	6072      	str	r2, [r6, #4]
 800544c:	2204      	movs	r2, #4
 800544e:	f102 0014 	add.w	r0, r2, #20
 8005452:	4298      	cmp	r0, r3
 8005454:	6871      	ldr	r1, [r6, #4]
 8005456:	d96e      	bls.n	8005536 <_dtoa_r+0x33e>
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fff0 	bl	800643e <_Balloc>
 800545e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005460:	6030      	str	r0, [r6, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f1b8 0f0e 	cmp.w	r8, #14
 8005468:	9306      	str	r3, [sp, #24]
 800546a:	f200 80ed 	bhi.w	8005648 <_dtoa_r+0x450>
 800546e:	2d00      	cmp	r5, #0
 8005470:	f000 80ea 	beq.w	8005648 <_dtoa_r+0x450>
 8005474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005478:	f1ba 0f00 	cmp.w	sl, #0
 800547c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005480:	dd77      	ble.n	8005572 <_dtoa_r+0x37a>
 8005482:	4a28      	ldr	r2, [pc, #160]	; (8005524 <_dtoa_r+0x32c>)
 8005484:	f00a 030f 	and.w	r3, sl, #15
 8005488:	ea4f 162a 	mov.w	r6, sl, asr #4
 800548c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005490:	06f0      	lsls	r0, r6, #27
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800549a:	d568      	bpl.n	800556e <_dtoa_r+0x376>
 800549c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <_dtoa_r+0x330>)
 80054a2:	2503      	movs	r5, #3
 80054a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054a8:	f7fb f940 	bl	800072c <__aeabi_ddiv>
 80054ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b0:	f006 060f 	and.w	r6, r6, #15
 80054b4:	4f1c      	ldr	r7, [pc, #112]	; (8005528 <_dtoa_r+0x330>)
 80054b6:	e04f      	b.n	8005558 <_dtoa_r+0x360>
 80054b8:	2301      	movs	r3, #1
 80054ba:	9309      	str	r3, [sp, #36]	; 0x24
 80054bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054be:	4453      	add	r3, sl
 80054c0:	f103 0801 	add.w	r8, r3, #1
 80054c4:	9304      	str	r3, [sp, #16]
 80054c6:	4643      	mov	r3, r8
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	bfb8      	it	lt
 80054cc:	2301      	movlt	r3, #1
 80054ce:	e7ba      	b.n	8005446 <_dtoa_r+0x24e>
 80054d0:	2300      	movs	r3, #0
 80054d2:	e7b2      	b.n	800543a <_dtoa_r+0x242>
 80054d4:	2300      	movs	r3, #0
 80054d6:	e7f0      	b.n	80054ba <_dtoa_r+0x2c2>
 80054d8:	2501      	movs	r5, #1
 80054da:	2300      	movs	r3, #0
 80054dc:	9509      	str	r5, [sp, #36]	; 0x24
 80054de:	931e      	str	r3, [sp, #120]	; 0x78
 80054e0:	f04f 33ff 	mov.w	r3, #4294967295
 80054e4:	2200      	movs	r2, #0
 80054e6:	9304      	str	r3, [sp, #16]
 80054e8:	4698      	mov	r8, r3
 80054ea:	2312      	movs	r3, #18
 80054ec:	921f      	str	r2, [sp, #124]	; 0x7c
 80054ee:	e7aa      	b.n	8005446 <_dtoa_r+0x24e>
 80054f0:	2301      	movs	r3, #1
 80054f2:	9309      	str	r3, [sp, #36]	; 0x24
 80054f4:	e7f4      	b.n	80054e0 <_dtoa_r+0x2e8>
 80054f6:	bf00      	nop
 80054f8:	636f4361 	.word	0x636f4361
 80054fc:	3fd287a7 	.word	0x3fd287a7
 8005500:	8b60c8b3 	.word	0x8b60c8b3
 8005504:	3fc68a28 	.word	0x3fc68a28
 8005508:	509f79fb 	.word	0x509f79fb
 800550c:	3fd34413 	.word	0x3fd34413
 8005510:	7ff00000 	.word	0x7ff00000
 8005514:	08007a31 	.word	0x08007a31
 8005518:	08007a28 	.word	0x08007a28
 800551c:	080079ad 	.word	0x080079ad
 8005520:	3ff80000 	.word	0x3ff80000
 8005524:	08007a68 	.word	0x08007a68
 8005528:	08007a40 	.word	0x08007a40
 800552c:	2301      	movs	r3, #1
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	4698      	mov	r8, r3
 8005532:	461a      	mov	r2, r3
 8005534:	e7da      	b.n	80054ec <_dtoa_r+0x2f4>
 8005536:	3101      	adds	r1, #1
 8005538:	6071      	str	r1, [r6, #4]
 800553a:	0052      	lsls	r2, r2, #1
 800553c:	e787      	b.n	800544e <_dtoa_r+0x256>
 800553e:	07f1      	lsls	r1, r6, #31
 8005540:	d508      	bpl.n	8005554 <_dtoa_r+0x35c>
 8005542:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554a:	f7fa ffc5 	bl	80004d8 <__aeabi_dmul>
 800554e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005552:	3501      	adds	r5, #1
 8005554:	1076      	asrs	r6, r6, #1
 8005556:	3708      	adds	r7, #8
 8005558:	2e00      	cmp	r6, #0
 800555a:	d1f0      	bne.n	800553e <_dtoa_r+0x346>
 800555c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005564:	f7fb f8e2 	bl	800072c <__aeabi_ddiv>
 8005568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800556c:	e01b      	b.n	80055a6 <_dtoa_r+0x3ae>
 800556e:	2502      	movs	r5, #2
 8005570:	e7a0      	b.n	80054b4 <_dtoa_r+0x2bc>
 8005572:	f000 80a4 	beq.w	80056be <_dtoa_r+0x4c6>
 8005576:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800557a:	f1ca 0600 	rsb	r6, sl, #0
 800557e:	4ba0      	ldr	r3, [pc, #640]	; (8005800 <_dtoa_r+0x608>)
 8005580:	f006 020f 	and.w	r2, r6, #15
 8005584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f7fa ffa4 	bl	80004d8 <__aeabi_dmul>
 8005590:	2502      	movs	r5, #2
 8005592:	2300      	movs	r3, #0
 8005594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005598:	4f9a      	ldr	r7, [pc, #616]	; (8005804 <_dtoa_r+0x60c>)
 800559a:	1136      	asrs	r6, r6, #4
 800559c:	2e00      	cmp	r6, #0
 800559e:	f040 8083 	bne.w	80056a8 <_dtoa_r+0x4b0>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e0      	bne.n	8005568 <_dtoa_r+0x370>
 80055a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 808a 	beq.w	80056c2 <_dtoa_r+0x4ca>
 80055ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80055b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055ba:	2200      	movs	r2, #0
 80055bc:	4b92      	ldr	r3, [pc, #584]	; (8005808 <_dtoa_r+0x610>)
 80055be:	f7fb f9fd 	bl	80009bc <__aeabi_dcmplt>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d07d      	beq.n	80056c2 <_dtoa_r+0x4ca>
 80055c6:	f1b8 0f00 	cmp.w	r8, #0
 80055ca:	d07a      	beq.n	80056c2 <_dtoa_r+0x4ca>
 80055cc:	9b04      	ldr	r3, [sp, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd36      	ble.n	8005640 <_dtoa_r+0x448>
 80055d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055d6:	2200      	movs	r2, #0
 80055d8:	4b8c      	ldr	r3, [pc, #560]	; (800580c <_dtoa_r+0x614>)
 80055da:	f7fa ff7d 	bl	80004d8 <__aeabi_dmul>
 80055de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e2:	9e04      	ldr	r6, [sp, #16]
 80055e4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80055e8:	3501      	adds	r5, #1
 80055ea:	4628      	mov	r0, r5
 80055ec:	f7fa ff0a 	bl	8000404 <__aeabi_i2d>
 80055f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055f4:	f7fa ff70 	bl	80004d8 <__aeabi_dmul>
 80055f8:	2200      	movs	r2, #0
 80055fa:	4b85      	ldr	r3, [pc, #532]	; (8005810 <_dtoa_r+0x618>)
 80055fc:	f7fa fdb6 	bl	800016c <__adddf3>
 8005600:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005604:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005608:	950b      	str	r5, [sp, #44]	; 0x2c
 800560a:	2e00      	cmp	r6, #0
 800560c:	d15c      	bne.n	80056c8 <_dtoa_r+0x4d0>
 800560e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005612:	2200      	movs	r2, #0
 8005614:	4b7f      	ldr	r3, [pc, #508]	; (8005814 <_dtoa_r+0x61c>)
 8005616:	f7fa fda7 	bl	8000168 <__aeabi_dsub>
 800561a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800561c:	462b      	mov	r3, r5
 800561e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005622:	f7fb f9e9 	bl	80009f8 <__aeabi_dcmpgt>
 8005626:	2800      	cmp	r0, #0
 8005628:	f040 8281 	bne.w	8005b2e <_dtoa_r+0x936>
 800562c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005632:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005636:	f7fb f9c1 	bl	80009bc <__aeabi_dcmplt>
 800563a:	2800      	cmp	r0, #0
 800563c:	f040 8275 	bne.w	8005b2a <_dtoa_r+0x932>
 8005640:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005648:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800564a:	2b00      	cmp	r3, #0
 800564c:	f2c0 814b 	blt.w	80058e6 <_dtoa_r+0x6ee>
 8005650:	f1ba 0f0e 	cmp.w	sl, #14
 8005654:	f300 8147 	bgt.w	80058e6 <_dtoa_r+0x6ee>
 8005658:	4b69      	ldr	r3, [pc, #420]	; (8005800 <_dtoa_r+0x608>)
 800565a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005666:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005668:	2b00      	cmp	r3, #0
 800566a:	f280 80d7 	bge.w	800581c <_dtoa_r+0x624>
 800566e:	f1b8 0f00 	cmp.w	r8, #0
 8005672:	f300 80d3 	bgt.w	800581c <_dtoa_r+0x624>
 8005676:	f040 8257 	bne.w	8005b28 <_dtoa_r+0x930>
 800567a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800567e:	2200      	movs	r2, #0
 8005680:	4b64      	ldr	r3, [pc, #400]	; (8005814 <_dtoa_r+0x61c>)
 8005682:	f7fa ff29 	bl	80004d8 <__aeabi_dmul>
 8005686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800568a:	f7fb f9ab 	bl	80009e4 <__aeabi_dcmpge>
 800568e:	4646      	mov	r6, r8
 8005690:	4647      	mov	r7, r8
 8005692:	2800      	cmp	r0, #0
 8005694:	f040 822d 	bne.w	8005af2 <_dtoa_r+0x8fa>
 8005698:	9b06      	ldr	r3, [sp, #24]
 800569a:	9a06      	ldr	r2, [sp, #24]
 800569c:	1c5d      	adds	r5, r3, #1
 800569e:	2331      	movs	r3, #49	; 0x31
 80056a0:	f10a 0a01 	add.w	sl, sl, #1
 80056a4:	7013      	strb	r3, [r2, #0]
 80056a6:	e228      	b.n	8005afa <_dtoa_r+0x902>
 80056a8:	07f2      	lsls	r2, r6, #31
 80056aa:	d505      	bpl.n	80056b8 <_dtoa_r+0x4c0>
 80056ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b0:	f7fa ff12 	bl	80004d8 <__aeabi_dmul>
 80056b4:	2301      	movs	r3, #1
 80056b6:	3501      	adds	r5, #1
 80056b8:	1076      	asrs	r6, r6, #1
 80056ba:	3708      	adds	r7, #8
 80056bc:	e76e      	b.n	800559c <_dtoa_r+0x3a4>
 80056be:	2502      	movs	r5, #2
 80056c0:	e771      	b.n	80055a6 <_dtoa_r+0x3ae>
 80056c2:	4657      	mov	r7, sl
 80056c4:	4646      	mov	r6, r8
 80056c6:	e790      	b.n	80055ea <_dtoa_r+0x3f2>
 80056c8:	4b4d      	ldr	r3, [pc, #308]	; (8005800 <_dtoa_r+0x608>)
 80056ca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80056ce:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80056d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d048      	beq.n	800576a <_dtoa_r+0x572>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	2000      	movs	r0, #0
 80056de:	494e      	ldr	r1, [pc, #312]	; (8005818 <_dtoa_r+0x620>)
 80056e0:	f7fb f824 	bl	800072c <__aeabi_ddiv>
 80056e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056e8:	f7fa fd3e 	bl	8000168 <__aeabi_dsub>
 80056ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056f0:	9d06      	ldr	r5, [sp, #24]
 80056f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056f6:	f7fb f99f 	bl	8000a38 <__aeabi_d2iz>
 80056fa:	9011      	str	r0, [sp, #68]	; 0x44
 80056fc:	f7fa fe82 	bl	8000404 <__aeabi_i2d>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005708:	f7fa fd2e 	bl	8000168 <__aeabi_dsub>
 800570c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800570e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005712:	3330      	adds	r3, #48	; 0x30
 8005714:	f805 3b01 	strb.w	r3, [r5], #1
 8005718:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800571c:	f7fb f94e 	bl	80009bc <__aeabi_dcmplt>
 8005720:	2800      	cmp	r0, #0
 8005722:	d163      	bne.n	80057ec <_dtoa_r+0x5f4>
 8005724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005728:	2000      	movs	r0, #0
 800572a:	4937      	ldr	r1, [pc, #220]	; (8005808 <_dtoa_r+0x610>)
 800572c:	f7fa fd1c 	bl	8000168 <__aeabi_dsub>
 8005730:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005734:	f7fb f942 	bl	80009bc <__aeabi_dcmplt>
 8005738:	2800      	cmp	r0, #0
 800573a:	f040 80b5 	bne.w	80058a8 <_dtoa_r+0x6b0>
 800573e:	9b06      	ldr	r3, [sp, #24]
 8005740:	1aeb      	subs	r3, r5, r3
 8005742:	429e      	cmp	r6, r3
 8005744:	f77f af7c 	ble.w	8005640 <_dtoa_r+0x448>
 8005748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800574c:	2200      	movs	r2, #0
 800574e:	4b2f      	ldr	r3, [pc, #188]	; (800580c <_dtoa_r+0x614>)
 8005750:	f7fa fec2 	bl	80004d8 <__aeabi_dmul>
 8005754:	2200      	movs	r2, #0
 8005756:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800575a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800575e:	4b2b      	ldr	r3, [pc, #172]	; (800580c <_dtoa_r+0x614>)
 8005760:	f7fa feba 	bl	80004d8 <__aeabi_dmul>
 8005764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005768:	e7c3      	b.n	80056f2 <_dtoa_r+0x4fa>
 800576a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800576e:	f7fa feb3 	bl	80004d8 <__aeabi_dmul>
 8005772:	9b06      	ldr	r3, [sp, #24]
 8005774:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005778:	199d      	adds	r5, r3, r6
 800577a:	461e      	mov	r6, r3
 800577c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005780:	f7fb f95a 	bl	8000a38 <__aeabi_d2iz>
 8005784:	9011      	str	r0, [sp, #68]	; 0x44
 8005786:	f7fa fe3d 	bl	8000404 <__aeabi_i2d>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005792:	f7fa fce9 	bl	8000168 <__aeabi_dsub>
 8005796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800579c:	3330      	adds	r3, #48	; 0x30
 800579e:	f806 3b01 	strb.w	r3, [r6], #1
 80057a2:	42ae      	cmp	r6, r5
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	d124      	bne.n	80057f4 <_dtoa_r+0x5fc>
 80057aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057ae:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <_dtoa_r+0x620>)
 80057b0:	f7fa fcdc 	bl	800016c <__adddf3>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057bc:	f7fb f91c 	bl	80009f8 <__aeabi_dcmpgt>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d171      	bne.n	80058a8 <_dtoa_r+0x6b0>
 80057c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057c8:	2000      	movs	r0, #0
 80057ca:	4913      	ldr	r1, [pc, #76]	; (8005818 <_dtoa_r+0x620>)
 80057cc:	f7fa fccc 	bl	8000168 <__aeabi_dsub>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d8:	f7fb f8f0 	bl	80009bc <__aeabi_dcmplt>
 80057dc:	2800      	cmp	r0, #0
 80057de:	f43f af2f 	beq.w	8005640 <_dtoa_r+0x448>
 80057e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057e6:	1e6a      	subs	r2, r5, #1
 80057e8:	2b30      	cmp	r3, #48	; 0x30
 80057ea:	d001      	beq.n	80057f0 <_dtoa_r+0x5f8>
 80057ec:	46ba      	mov	sl, r7
 80057ee:	e04a      	b.n	8005886 <_dtoa_r+0x68e>
 80057f0:	4615      	mov	r5, r2
 80057f2:	e7f6      	b.n	80057e2 <_dtoa_r+0x5ea>
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <_dtoa_r+0x614>)
 80057f6:	f7fa fe6f 	bl	80004d8 <__aeabi_dmul>
 80057fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057fe:	e7bd      	b.n	800577c <_dtoa_r+0x584>
 8005800:	08007a68 	.word	0x08007a68
 8005804:	08007a40 	.word	0x08007a40
 8005808:	3ff00000 	.word	0x3ff00000
 800580c:	40240000 	.word	0x40240000
 8005810:	401c0000 	.word	0x401c0000
 8005814:	40140000 	.word	0x40140000
 8005818:	3fe00000 	.word	0x3fe00000
 800581c:	9d06      	ldr	r5, [sp, #24]
 800581e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005826:	4630      	mov	r0, r6
 8005828:	4639      	mov	r1, r7
 800582a:	f7fa ff7f 	bl	800072c <__aeabi_ddiv>
 800582e:	f7fb f903 	bl	8000a38 <__aeabi_d2iz>
 8005832:	4681      	mov	r9, r0
 8005834:	f7fa fde6 	bl	8000404 <__aeabi_i2d>
 8005838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800583c:	f7fa fe4c 	bl	80004d8 <__aeabi_dmul>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4630      	mov	r0, r6
 8005846:	4639      	mov	r1, r7
 8005848:	f7fa fc8e 	bl	8000168 <__aeabi_dsub>
 800584c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005850:	f805 6b01 	strb.w	r6, [r5], #1
 8005854:	9e06      	ldr	r6, [sp, #24]
 8005856:	4602      	mov	r2, r0
 8005858:	1bae      	subs	r6, r5, r6
 800585a:	45b0      	cmp	r8, r6
 800585c:	460b      	mov	r3, r1
 800585e:	d135      	bne.n	80058cc <_dtoa_r+0x6d4>
 8005860:	f7fa fc84 	bl	800016c <__adddf3>
 8005864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005868:	4606      	mov	r6, r0
 800586a:	460f      	mov	r7, r1
 800586c:	f7fb f8c4 	bl	80009f8 <__aeabi_dcmpgt>
 8005870:	b9c8      	cbnz	r0, 80058a6 <_dtoa_r+0x6ae>
 8005872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005876:	4630      	mov	r0, r6
 8005878:	4639      	mov	r1, r7
 800587a:	f7fb f895 	bl	80009a8 <__aeabi_dcmpeq>
 800587e:	b110      	cbz	r0, 8005886 <_dtoa_r+0x68e>
 8005880:	f019 0f01 	tst.w	r9, #1
 8005884:	d10f      	bne.n	80058a6 <_dtoa_r+0x6ae>
 8005886:	4659      	mov	r1, fp
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fe0c 	bl	80064a6 <_Bfree>
 800588e:	2300      	movs	r3, #0
 8005890:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005892:	702b      	strb	r3, [r5, #0]
 8005894:	f10a 0301 	add.w	r3, sl, #1
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800589c:	2b00      	cmp	r3, #0
 800589e:	f43f acf3 	beq.w	8005288 <_dtoa_r+0x90>
 80058a2:	601d      	str	r5, [r3, #0]
 80058a4:	e4f0      	b.n	8005288 <_dtoa_r+0x90>
 80058a6:	4657      	mov	r7, sl
 80058a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058ac:	1e6b      	subs	r3, r5, #1
 80058ae:	2a39      	cmp	r2, #57	; 0x39
 80058b0:	d106      	bne.n	80058c0 <_dtoa_r+0x6c8>
 80058b2:	9a06      	ldr	r2, [sp, #24]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d107      	bne.n	80058c8 <_dtoa_r+0x6d0>
 80058b8:	2330      	movs	r3, #48	; 0x30
 80058ba:	7013      	strb	r3, [r2, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	3701      	adds	r7, #1
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	3201      	adds	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e791      	b.n	80057ec <_dtoa_r+0x5f4>
 80058c8:	461d      	mov	r5, r3
 80058ca:	e7ed      	b.n	80058a8 <_dtoa_r+0x6b0>
 80058cc:	2200      	movs	r2, #0
 80058ce:	4b99      	ldr	r3, [pc, #612]	; (8005b34 <_dtoa_r+0x93c>)
 80058d0:	f7fa fe02 	bl	80004d8 <__aeabi_dmul>
 80058d4:	2200      	movs	r2, #0
 80058d6:	2300      	movs	r3, #0
 80058d8:	4606      	mov	r6, r0
 80058da:	460f      	mov	r7, r1
 80058dc:	f7fb f864 	bl	80009a8 <__aeabi_dcmpeq>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d09e      	beq.n	8005822 <_dtoa_r+0x62a>
 80058e4:	e7cf      	b.n	8005886 <_dtoa_r+0x68e>
 80058e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e8:	2a00      	cmp	r2, #0
 80058ea:	f000 8088 	beq.w	80059fe <_dtoa_r+0x806>
 80058ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058f0:	2a01      	cmp	r2, #1
 80058f2:	dc6d      	bgt.n	80059d0 <_dtoa_r+0x7d8>
 80058f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	d066      	beq.n	80059c8 <_dtoa_r+0x7d0>
 80058fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058fe:	464d      	mov	r5, r9
 8005900:	9e08      	ldr	r6, [sp, #32]
 8005902:	9a07      	ldr	r2, [sp, #28]
 8005904:	2101      	movs	r1, #1
 8005906:	441a      	add	r2, r3
 8005908:	4620      	mov	r0, r4
 800590a:	4499      	add	r9, r3
 800590c:	9207      	str	r2, [sp, #28]
 800590e:	f000 fea8 	bl	8006662 <__i2b>
 8005912:	4607      	mov	r7, r0
 8005914:	2d00      	cmp	r5, #0
 8005916:	dd0b      	ble.n	8005930 <_dtoa_r+0x738>
 8005918:	9b07      	ldr	r3, [sp, #28]
 800591a:	2b00      	cmp	r3, #0
 800591c:	dd08      	ble.n	8005930 <_dtoa_r+0x738>
 800591e:	42ab      	cmp	r3, r5
 8005920:	bfa8      	it	ge
 8005922:	462b      	movge	r3, r5
 8005924:	9a07      	ldr	r2, [sp, #28]
 8005926:	eba9 0903 	sub.w	r9, r9, r3
 800592a:	1aed      	subs	r5, r5, r3
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	9b08      	ldr	r3, [sp, #32]
 8005932:	b1eb      	cbz	r3, 8005970 <_dtoa_r+0x778>
 8005934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d065      	beq.n	8005a06 <_dtoa_r+0x80e>
 800593a:	b18e      	cbz	r6, 8005960 <_dtoa_r+0x768>
 800593c:	4639      	mov	r1, r7
 800593e:	4632      	mov	r2, r6
 8005940:	4620      	mov	r0, r4
 8005942:	f000 ff2d 	bl	80067a0 <__pow5mult>
 8005946:	465a      	mov	r2, fp
 8005948:	4601      	mov	r1, r0
 800594a:	4607      	mov	r7, r0
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fe91 	bl	8006674 <__multiply>
 8005952:	4659      	mov	r1, fp
 8005954:	900a      	str	r0, [sp, #40]	; 0x28
 8005956:	4620      	mov	r0, r4
 8005958:	f000 fda5 	bl	80064a6 <_Bfree>
 800595c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800595e:	469b      	mov	fp, r3
 8005960:	9b08      	ldr	r3, [sp, #32]
 8005962:	1b9a      	subs	r2, r3, r6
 8005964:	d004      	beq.n	8005970 <_dtoa_r+0x778>
 8005966:	4659      	mov	r1, fp
 8005968:	4620      	mov	r0, r4
 800596a:	f000 ff19 	bl	80067a0 <__pow5mult>
 800596e:	4683      	mov	fp, r0
 8005970:	2101      	movs	r1, #1
 8005972:	4620      	mov	r0, r4
 8005974:	f000 fe75 	bl	8006662 <__i2b>
 8005978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800597a:	4606      	mov	r6, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 81c6 	beq.w	8005d0e <_dtoa_r+0xb16>
 8005982:	461a      	mov	r2, r3
 8005984:	4601      	mov	r1, r0
 8005986:	4620      	mov	r0, r4
 8005988:	f000 ff0a 	bl	80067a0 <__pow5mult>
 800598c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800598e:	4606      	mov	r6, r0
 8005990:	2b01      	cmp	r3, #1
 8005992:	dc3e      	bgt.n	8005a12 <_dtoa_r+0x81a>
 8005994:	9b02      	ldr	r3, [sp, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d137      	bne.n	8005a0a <_dtoa_r+0x812>
 800599a:	9b03      	ldr	r3, [sp, #12]
 800599c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d134      	bne.n	8005a0e <_dtoa_r+0x816>
 80059a4:	9b03      	ldr	r3, [sp, #12]
 80059a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059aa:	0d1b      	lsrs	r3, r3, #20
 80059ac:	051b      	lsls	r3, r3, #20
 80059ae:	b12b      	cbz	r3, 80059bc <_dtoa_r+0x7c4>
 80059b0:	9b07      	ldr	r3, [sp, #28]
 80059b2:	f109 0901 	add.w	r9, r9, #1
 80059b6:	3301      	adds	r3, #1
 80059b8:	9307      	str	r3, [sp, #28]
 80059ba:	2301      	movs	r3, #1
 80059bc:	9308      	str	r3, [sp, #32]
 80059be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d128      	bne.n	8005a16 <_dtoa_r+0x81e>
 80059c4:	2001      	movs	r0, #1
 80059c6:	e02e      	b.n	8005a26 <_dtoa_r+0x82e>
 80059c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059ce:	e796      	b.n	80058fe <_dtoa_r+0x706>
 80059d0:	9b08      	ldr	r3, [sp, #32]
 80059d2:	f108 36ff 	add.w	r6, r8, #4294967295
 80059d6:	42b3      	cmp	r3, r6
 80059d8:	bfb7      	itett	lt
 80059da:	9b08      	ldrlt	r3, [sp, #32]
 80059dc:	1b9e      	subge	r6, r3, r6
 80059de:	1af2      	sublt	r2, r6, r3
 80059e0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80059e2:	bfbf      	itttt	lt
 80059e4:	9608      	strlt	r6, [sp, #32]
 80059e6:	189b      	addlt	r3, r3, r2
 80059e8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80059ea:	2600      	movlt	r6, #0
 80059ec:	f1b8 0f00 	cmp.w	r8, #0
 80059f0:	bfb9      	ittee	lt
 80059f2:	eba9 0508 	sublt.w	r5, r9, r8
 80059f6:	2300      	movlt	r3, #0
 80059f8:	464d      	movge	r5, r9
 80059fa:	4643      	movge	r3, r8
 80059fc:	e781      	b.n	8005902 <_dtoa_r+0x70a>
 80059fe:	9e08      	ldr	r6, [sp, #32]
 8005a00:	464d      	mov	r5, r9
 8005a02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a04:	e786      	b.n	8005914 <_dtoa_r+0x71c>
 8005a06:	9a08      	ldr	r2, [sp, #32]
 8005a08:	e7ad      	b.n	8005966 <_dtoa_r+0x76e>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e7d6      	b.n	80059bc <_dtoa_r+0x7c4>
 8005a0e:	9b02      	ldr	r3, [sp, #8]
 8005a10:	e7d4      	b.n	80059bc <_dtoa_r+0x7c4>
 8005a12:	2300      	movs	r3, #0
 8005a14:	9308      	str	r3, [sp, #32]
 8005a16:	6933      	ldr	r3, [r6, #16]
 8005a18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a1c:	6918      	ldr	r0, [r3, #16]
 8005a1e:	f000 fdd2 	bl	80065c6 <__hi0bits>
 8005a22:	f1c0 0020 	rsb	r0, r0, #32
 8005a26:	9b07      	ldr	r3, [sp, #28]
 8005a28:	4418      	add	r0, r3
 8005a2a:	f010 001f 	ands.w	r0, r0, #31
 8005a2e:	d047      	beq.n	8005ac0 <_dtoa_r+0x8c8>
 8005a30:	f1c0 0320 	rsb	r3, r0, #32
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	dd3b      	ble.n	8005ab0 <_dtoa_r+0x8b8>
 8005a38:	9b07      	ldr	r3, [sp, #28]
 8005a3a:	f1c0 001c 	rsb	r0, r0, #28
 8005a3e:	4481      	add	r9, r0
 8005a40:	4405      	add	r5, r0
 8005a42:	4403      	add	r3, r0
 8005a44:	9307      	str	r3, [sp, #28]
 8005a46:	f1b9 0f00 	cmp.w	r9, #0
 8005a4a:	dd05      	ble.n	8005a58 <_dtoa_r+0x860>
 8005a4c:	4659      	mov	r1, fp
 8005a4e:	464a      	mov	r2, r9
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 fef3 	bl	800683c <__lshift>
 8005a56:	4683      	mov	fp, r0
 8005a58:	9b07      	ldr	r3, [sp, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	dd05      	ble.n	8005a6a <_dtoa_r+0x872>
 8005a5e:	4631      	mov	r1, r6
 8005a60:	461a      	mov	r2, r3
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 feea 	bl	800683c <__lshift>
 8005a68:	4606      	mov	r6, r0
 8005a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a6c:	b353      	cbz	r3, 8005ac4 <_dtoa_r+0x8cc>
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4658      	mov	r0, fp
 8005a72:	f000 ff37 	bl	80068e4 <__mcmp>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	da24      	bge.n	8005ac4 <_dtoa_r+0x8cc>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4659      	mov	r1, fp
 8005a7e:	220a      	movs	r2, #10
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 fd27 	bl	80064d4 <__multadd>
 8005a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a8c:	4683      	mov	fp, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8144 	beq.w	8005d1c <_dtoa_r+0xb24>
 8005a94:	2300      	movs	r3, #0
 8005a96:	4639      	mov	r1, r7
 8005a98:	220a      	movs	r2, #10
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 fd1a 	bl	80064d4 <__multadd>
 8005aa0:	9b04      	ldr	r3, [sp, #16]
 8005aa2:	4607      	mov	r7, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dc4d      	bgt.n	8005b44 <_dtoa_r+0x94c>
 8005aa8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	dd4a      	ble.n	8005b44 <_dtoa_r+0x94c>
 8005aae:	e011      	b.n	8005ad4 <_dtoa_r+0x8dc>
 8005ab0:	d0c9      	beq.n	8005a46 <_dtoa_r+0x84e>
 8005ab2:	9a07      	ldr	r2, [sp, #28]
 8005ab4:	331c      	adds	r3, #28
 8005ab6:	441a      	add	r2, r3
 8005ab8:	4499      	add	r9, r3
 8005aba:	441d      	add	r5, r3
 8005abc:	4613      	mov	r3, r2
 8005abe:	e7c1      	b.n	8005a44 <_dtoa_r+0x84c>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	e7f6      	b.n	8005ab2 <_dtoa_r+0x8ba>
 8005ac4:	f1b8 0f00 	cmp.w	r8, #0
 8005ac8:	dc36      	bgt.n	8005b38 <_dtoa_r+0x940>
 8005aca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	dd33      	ble.n	8005b38 <_dtoa_r+0x940>
 8005ad0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ad4:	9b04      	ldr	r3, [sp, #16]
 8005ad6:	b963      	cbnz	r3, 8005af2 <_dtoa_r+0x8fa>
 8005ad8:	4631      	mov	r1, r6
 8005ada:	2205      	movs	r2, #5
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 fcf9 	bl	80064d4 <__multadd>
 8005ae2:	4601      	mov	r1, r0
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	4658      	mov	r0, fp
 8005ae8:	f000 fefc 	bl	80068e4 <__mcmp>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f73f add3 	bgt.w	8005698 <_dtoa_r+0x4a0>
 8005af2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005af4:	9d06      	ldr	r5, [sp, #24]
 8005af6:	ea6f 0a03 	mvn.w	sl, r3
 8005afa:	f04f 0900 	mov.w	r9, #0
 8005afe:	4631      	mov	r1, r6
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 fcd0 	bl	80064a6 <_Bfree>
 8005b06:	2f00      	cmp	r7, #0
 8005b08:	f43f aebd 	beq.w	8005886 <_dtoa_r+0x68e>
 8005b0c:	f1b9 0f00 	cmp.w	r9, #0
 8005b10:	d005      	beq.n	8005b1e <_dtoa_r+0x926>
 8005b12:	45b9      	cmp	r9, r7
 8005b14:	d003      	beq.n	8005b1e <_dtoa_r+0x926>
 8005b16:	4649      	mov	r1, r9
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fcc4 	bl	80064a6 <_Bfree>
 8005b1e:	4639      	mov	r1, r7
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fcc0 	bl	80064a6 <_Bfree>
 8005b26:	e6ae      	b.n	8005886 <_dtoa_r+0x68e>
 8005b28:	2600      	movs	r6, #0
 8005b2a:	4637      	mov	r7, r6
 8005b2c:	e7e1      	b.n	8005af2 <_dtoa_r+0x8fa>
 8005b2e:	46ba      	mov	sl, r7
 8005b30:	4637      	mov	r7, r6
 8005b32:	e5b1      	b.n	8005698 <_dtoa_r+0x4a0>
 8005b34:	40240000 	.word	0x40240000
 8005b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80f3 	beq.w	8005d2a <_dtoa_r+0xb32>
 8005b44:	2d00      	cmp	r5, #0
 8005b46:	dd05      	ble.n	8005b54 <_dtoa_r+0x95c>
 8005b48:	4639      	mov	r1, r7
 8005b4a:	462a      	mov	r2, r5
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f000 fe75 	bl	800683c <__lshift>
 8005b52:	4607      	mov	r7, r0
 8005b54:	9b08      	ldr	r3, [sp, #32]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d04c      	beq.n	8005bf4 <_dtoa_r+0x9fc>
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 fc6e 	bl	800643e <_Balloc>
 8005b62:	4605      	mov	r5, r0
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	f107 010c 	add.w	r1, r7, #12
 8005b6a:	3202      	adds	r2, #2
 8005b6c:	0092      	lsls	r2, r2, #2
 8005b6e:	300c      	adds	r0, #12
 8005b70:	f000 fc5a 	bl	8006428 <memcpy>
 8005b74:	2201      	movs	r2, #1
 8005b76:	4629      	mov	r1, r5
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 fe5f 	bl	800683c <__lshift>
 8005b7e:	46b9      	mov	r9, r7
 8005b80:	4607      	mov	r7, r0
 8005b82:	9b06      	ldr	r3, [sp, #24]
 8005b84:	9307      	str	r3, [sp, #28]
 8005b86:	9b02      	ldr	r3, [sp, #8]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	9308      	str	r3, [sp, #32]
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4658      	mov	r0, fp
 8005b92:	f7ff faa3 	bl	80050dc <quorem>
 8005b96:	4649      	mov	r1, r9
 8005b98:	4605      	mov	r5, r0
 8005b9a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b9e:	4658      	mov	r0, fp
 8005ba0:	f000 fea0 	bl	80068e4 <__mcmp>
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	9002      	str	r0, [sp, #8]
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4620      	mov	r0, r4
 8005bac:	f000 feb4 	bl	8006918 <__mdiff>
 8005bb0:	68c3      	ldr	r3, [r0, #12]
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	bb03      	cbnz	r3, 8005bf8 <_dtoa_r+0xa00>
 8005bb6:	4601      	mov	r1, r0
 8005bb8:	9009      	str	r0, [sp, #36]	; 0x24
 8005bba:	4658      	mov	r0, fp
 8005bbc:	f000 fe92 	bl	80068e4 <__mcmp>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bca:	f000 fc6c 	bl	80064a6 <_Bfree>
 8005bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd0:	b9a3      	cbnz	r3, 8005bfc <_dtoa_r+0xa04>
 8005bd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005bd4:	b992      	cbnz	r2, 8005bfc <_dtoa_r+0xa04>
 8005bd6:	9a08      	ldr	r2, [sp, #32]
 8005bd8:	b982      	cbnz	r2, 8005bfc <_dtoa_r+0xa04>
 8005bda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bde:	d029      	beq.n	8005c34 <_dtoa_r+0xa3c>
 8005be0:	9b02      	ldr	r3, [sp, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dd01      	ble.n	8005bea <_dtoa_r+0x9f2>
 8005be6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005bea:	9b07      	ldr	r3, [sp, #28]
 8005bec:	1c5d      	adds	r5, r3, #1
 8005bee:	f883 8000 	strb.w	r8, [r3]
 8005bf2:	e784      	b.n	8005afe <_dtoa_r+0x906>
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	e7c2      	b.n	8005b7e <_dtoa_r+0x986>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e7e3      	b.n	8005bc4 <_dtoa_r+0x9cc>
 8005bfc:	9a02      	ldr	r2, [sp, #8]
 8005bfe:	2a00      	cmp	r2, #0
 8005c00:	db04      	blt.n	8005c0c <_dtoa_r+0xa14>
 8005c02:	d123      	bne.n	8005c4c <_dtoa_r+0xa54>
 8005c04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c06:	bb0a      	cbnz	r2, 8005c4c <_dtoa_r+0xa54>
 8005c08:	9a08      	ldr	r2, [sp, #32]
 8005c0a:	b9fa      	cbnz	r2, 8005c4c <_dtoa_r+0xa54>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	ddec      	ble.n	8005bea <_dtoa_r+0x9f2>
 8005c10:	4659      	mov	r1, fp
 8005c12:	2201      	movs	r2, #1
 8005c14:	4620      	mov	r0, r4
 8005c16:	f000 fe11 	bl	800683c <__lshift>
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4683      	mov	fp, r0
 8005c1e:	f000 fe61 	bl	80068e4 <__mcmp>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	dc03      	bgt.n	8005c2e <_dtoa_r+0xa36>
 8005c26:	d1e0      	bne.n	8005bea <_dtoa_r+0x9f2>
 8005c28:	f018 0f01 	tst.w	r8, #1
 8005c2c:	d0dd      	beq.n	8005bea <_dtoa_r+0x9f2>
 8005c2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c32:	d1d8      	bne.n	8005be6 <_dtoa_r+0x9ee>
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	9a07      	ldr	r2, [sp, #28]
 8005c38:	1c5d      	adds	r5, r3, #1
 8005c3a:	2339      	movs	r3, #57	; 0x39
 8005c3c:	7013      	strb	r3, [r2, #0]
 8005c3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c42:	1e6a      	subs	r2, r5, #1
 8005c44:	2b39      	cmp	r3, #57	; 0x39
 8005c46:	d04d      	beq.n	8005ce4 <_dtoa_r+0xaec>
 8005c48:	3301      	adds	r3, #1
 8005c4a:	e052      	b.n	8005cf2 <_dtoa_r+0xafa>
 8005c4c:	9a07      	ldr	r2, [sp, #28]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f102 0501 	add.w	r5, r2, #1
 8005c54:	dd06      	ble.n	8005c64 <_dtoa_r+0xa6c>
 8005c56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c5a:	d0eb      	beq.n	8005c34 <_dtoa_r+0xa3c>
 8005c5c:	f108 0801 	add.w	r8, r8, #1
 8005c60:	9b07      	ldr	r3, [sp, #28]
 8005c62:	e7c4      	b.n	8005bee <_dtoa_r+0x9f6>
 8005c64:	9b06      	ldr	r3, [sp, #24]
 8005c66:	9a04      	ldr	r2, [sp, #16]
 8005c68:	1aeb      	subs	r3, r5, r3
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c70:	d021      	beq.n	8005cb6 <_dtoa_r+0xabe>
 8005c72:	4659      	mov	r1, fp
 8005c74:	2300      	movs	r3, #0
 8005c76:	220a      	movs	r2, #10
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 fc2b 	bl	80064d4 <__multadd>
 8005c7e:	45b9      	cmp	r9, r7
 8005c80:	4683      	mov	fp, r0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	f04f 020a 	mov.w	r2, #10
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	d105      	bne.n	8005c9c <_dtoa_r+0xaa4>
 8005c90:	f000 fc20 	bl	80064d4 <__multadd>
 8005c94:	4681      	mov	r9, r0
 8005c96:	4607      	mov	r7, r0
 8005c98:	9507      	str	r5, [sp, #28]
 8005c9a:	e778      	b.n	8005b8e <_dtoa_r+0x996>
 8005c9c:	f000 fc1a 	bl	80064d4 <__multadd>
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	4681      	mov	r9, r0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	220a      	movs	r2, #10
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 fc13 	bl	80064d4 <__multadd>
 8005cae:	4607      	mov	r7, r0
 8005cb0:	e7f2      	b.n	8005c98 <_dtoa_r+0xaa0>
 8005cb2:	f04f 0900 	mov.w	r9, #0
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fdbe 	bl	800683c <__lshift>
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4683      	mov	fp, r0
 8005cc4:	f000 fe0e 	bl	80068e4 <__mcmp>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	dcb8      	bgt.n	8005c3e <_dtoa_r+0xa46>
 8005ccc:	d102      	bne.n	8005cd4 <_dtoa_r+0xadc>
 8005cce:	f018 0f01 	tst.w	r8, #1
 8005cd2:	d1b4      	bne.n	8005c3e <_dtoa_r+0xa46>
 8005cd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cd8:	1e6a      	subs	r2, r5, #1
 8005cda:	2b30      	cmp	r3, #48	; 0x30
 8005cdc:	f47f af0f 	bne.w	8005afe <_dtoa_r+0x906>
 8005ce0:	4615      	mov	r5, r2
 8005ce2:	e7f7      	b.n	8005cd4 <_dtoa_r+0xadc>
 8005ce4:	9b06      	ldr	r3, [sp, #24]
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d105      	bne.n	8005cf6 <_dtoa_r+0xafe>
 8005cea:	2331      	movs	r3, #49	; 0x31
 8005cec:	9a06      	ldr	r2, [sp, #24]
 8005cee:	f10a 0a01 	add.w	sl, sl, #1
 8005cf2:	7013      	strb	r3, [r2, #0]
 8005cf4:	e703      	b.n	8005afe <_dtoa_r+0x906>
 8005cf6:	4615      	mov	r5, r2
 8005cf8:	e7a1      	b.n	8005c3e <_dtoa_r+0xa46>
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <_dtoa_r+0xb60>)
 8005cfc:	f7ff bae1 	b.w	80052c2 <_dtoa_r+0xca>
 8005d00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f47f aabb 	bne.w	800527e <_dtoa_r+0x86>
 8005d08:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <_dtoa_r+0xb64>)
 8005d0a:	f7ff bada 	b.w	80052c2 <_dtoa_r+0xca>
 8005d0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f77f ae3f 	ble.w	8005994 <_dtoa_r+0x79c>
 8005d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d18:	9308      	str	r3, [sp, #32]
 8005d1a:	e653      	b.n	80059c4 <_dtoa_r+0x7cc>
 8005d1c:	9b04      	ldr	r3, [sp, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dc03      	bgt.n	8005d2a <_dtoa_r+0xb32>
 8005d22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	f73f aed5 	bgt.w	8005ad4 <_dtoa_r+0x8dc>
 8005d2a:	9d06      	ldr	r5, [sp, #24]
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4658      	mov	r0, fp
 8005d30:	f7ff f9d4 	bl	80050dc <quorem>
 8005d34:	9b06      	ldr	r3, [sp, #24]
 8005d36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d3a:	f805 8b01 	strb.w	r8, [r5], #1
 8005d3e:	9a04      	ldr	r2, [sp, #16]
 8005d40:	1aeb      	subs	r3, r5, r3
 8005d42:	429a      	cmp	r2, r3
 8005d44:	ddb5      	ble.n	8005cb2 <_dtoa_r+0xaba>
 8005d46:	4659      	mov	r1, fp
 8005d48:	2300      	movs	r3, #0
 8005d4a:	220a      	movs	r2, #10
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 fbc1 	bl	80064d4 <__multadd>
 8005d52:	4683      	mov	fp, r0
 8005d54:	e7ea      	b.n	8005d2c <_dtoa_r+0xb34>
 8005d56:	bf00      	nop
 8005d58:	080079ac 	.word	0x080079ac
 8005d5c:	08007a28 	.word	0x08007a28

08005d60 <rshift>:
 8005d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d62:	6906      	ldr	r6, [r0, #16]
 8005d64:	114b      	asrs	r3, r1, #5
 8005d66:	429e      	cmp	r6, r3
 8005d68:	f100 0414 	add.w	r4, r0, #20
 8005d6c:	dd31      	ble.n	8005dd2 <rshift+0x72>
 8005d6e:	f011 011f 	ands.w	r1, r1, #31
 8005d72:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005d76:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005d7a:	d108      	bne.n	8005d8e <rshift+0x2e>
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	42b2      	cmp	r2, r6
 8005d80:	460b      	mov	r3, r1
 8005d82:	d211      	bcs.n	8005da8 <rshift+0x48>
 8005d84:	f852 3b04 	ldr.w	r3, [r2], #4
 8005d88:	f841 3b04 	str.w	r3, [r1], #4
 8005d8c:	e7f7      	b.n	8005d7e <rshift+0x1e>
 8005d8e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005d92:	4623      	mov	r3, r4
 8005d94:	f1c1 0c20 	rsb	ip, r1, #32
 8005d98:	40cd      	lsrs	r5, r1
 8005d9a:	3204      	adds	r2, #4
 8005d9c:	42b2      	cmp	r2, r6
 8005d9e:	4617      	mov	r7, r2
 8005da0:	d30d      	bcc.n	8005dbe <rshift+0x5e>
 8005da2:	601d      	str	r5, [r3, #0]
 8005da4:	b105      	cbz	r5, 8005da8 <rshift+0x48>
 8005da6:	3304      	adds	r3, #4
 8005da8:	42a3      	cmp	r3, r4
 8005daa:	eba3 0204 	sub.w	r2, r3, r4
 8005dae:	bf08      	it	eq
 8005db0:	2300      	moveq	r3, #0
 8005db2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005db6:	6102      	str	r2, [r0, #16]
 8005db8:	bf08      	it	eq
 8005dba:	6143      	streq	r3, [r0, #20]
 8005dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dbe:	683f      	ldr	r7, [r7, #0]
 8005dc0:	fa07 f70c 	lsl.w	r7, r7, ip
 8005dc4:	433d      	orrs	r5, r7
 8005dc6:	f843 5b04 	str.w	r5, [r3], #4
 8005dca:	f852 5b04 	ldr.w	r5, [r2], #4
 8005dce:	40cd      	lsrs	r5, r1
 8005dd0:	e7e4      	b.n	8005d9c <rshift+0x3c>
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	e7e8      	b.n	8005da8 <rshift+0x48>

08005dd6 <__hexdig_fun>:
 8005dd6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d802      	bhi.n	8005de4 <__hexdig_fun+0xe>
 8005dde:	3820      	subs	r0, #32
 8005de0:	b2c0      	uxtb	r0, r0
 8005de2:	4770      	bx	lr
 8005de4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d801      	bhi.n	8005df0 <__hexdig_fun+0x1a>
 8005dec:	3847      	subs	r0, #71	; 0x47
 8005dee:	e7f7      	b.n	8005de0 <__hexdig_fun+0xa>
 8005df0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005df4:	2b05      	cmp	r3, #5
 8005df6:	d801      	bhi.n	8005dfc <__hexdig_fun+0x26>
 8005df8:	3827      	subs	r0, #39	; 0x27
 8005dfa:	e7f1      	b.n	8005de0 <__hexdig_fun+0xa>
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	4770      	bx	lr

08005e00 <__gethex>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	b08b      	sub	sp, #44	; 0x2c
 8005e06:	9002      	str	r0, [sp, #8]
 8005e08:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005e0a:	468a      	mov	sl, r1
 8005e0c:	4690      	mov	r8, r2
 8005e0e:	9306      	str	r3, [sp, #24]
 8005e10:	f000 fad1 	bl	80063b6 <__localeconv_l>
 8005e14:	6803      	ldr	r3, [r0, #0]
 8005e16:	f04f 0b00 	mov.w	fp, #0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	9303      	str	r3, [sp, #12]
 8005e1e:	f7fa f997 	bl	8000150 <strlen>
 8005e22:	9b03      	ldr	r3, [sp, #12]
 8005e24:	9001      	str	r0, [sp, #4]
 8005e26:	4403      	add	r3, r0
 8005e28:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005e2c:	9307      	str	r3, [sp, #28]
 8005e2e:	f8da 3000 	ldr.w	r3, [sl]
 8005e32:	3302      	adds	r3, #2
 8005e34:	461f      	mov	r7, r3
 8005e36:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e3a:	2830      	cmp	r0, #48	; 0x30
 8005e3c:	d06c      	beq.n	8005f18 <__gethex+0x118>
 8005e3e:	f7ff ffca 	bl	8005dd6 <__hexdig_fun>
 8005e42:	4604      	mov	r4, r0
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d16a      	bne.n	8005f1e <__gethex+0x11e>
 8005e48:	9a01      	ldr	r2, [sp, #4]
 8005e4a:	9903      	ldr	r1, [sp, #12]
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	f001 f905 	bl	800705c <strncmp>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d166      	bne.n	8005f24 <__gethex+0x124>
 8005e56:	9b01      	ldr	r3, [sp, #4]
 8005e58:	5cf8      	ldrb	r0, [r7, r3]
 8005e5a:	18fe      	adds	r6, r7, r3
 8005e5c:	f7ff ffbb 	bl	8005dd6 <__hexdig_fun>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d062      	beq.n	8005f2a <__gethex+0x12a>
 8005e64:	4633      	mov	r3, r6
 8005e66:	7818      	ldrb	r0, [r3, #0]
 8005e68:	461f      	mov	r7, r3
 8005e6a:	2830      	cmp	r0, #48	; 0x30
 8005e6c:	f103 0301 	add.w	r3, r3, #1
 8005e70:	d0f9      	beq.n	8005e66 <__gethex+0x66>
 8005e72:	f7ff ffb0 	bl	8005dd6 <__hexdig_fun>
 8005e76:	fab0 f580 	clz	r5, r0
 8005e7a:	4634      	mov	r4, r6
 8005e7c:	f04f 0b01 	mov.w	fp, #1
 8005e80:	096d      	lsrs	r5, r5, #5
 8005e82:	463a      	mov	r2, r7
 8005e84:	4616      	mov	r6, r2
 8005e86:	7830      	ldrb	r0, [r6, #0]
 8005e88:	3201      	adds	r2, #1
 8005e8a:	f7ff ffa4 	bl	8005dd6 <__hexdig_fun>
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	d1f8      	bne.n	8005e84 <__gethex+0x84>
 8005e92:	9a01      	ldr	r2, [sp, #4]
 8005e94:	9903      	ldr	r1, [sp, #12]
 8005e96:	4630      	mov	r0, r6
 8005e98:	f001 f8e0 	bl	800705c <strncmp>
 8005e9c:	b950      	cbnz	r0, 8005eb4 <__gethex+0xb4>
 8005e9e:	b954      	cbnz	r4, 8005eb6 <__gethex+0xb6>
 8005ea0:	9b01      	ldr	r3, [sp, #4]
 8005ea2:	18f4      	adds	r4, r6, r3
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4616      	mov	r6, r2
 8005ea8:	7830      	ldrb	r0, [r6, #0]
 8005eaa:	3201      	adds	r2, #1
 8005eac:	f7ff ff93 	bl	8005dd6 <__hexdig_fun>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d1f8      	bne.n	8005ea6 <__gethex+0xa6>
 8005eb4:	b10c      	cbz	r4, 8005eba <__gethex+0xba>
 8005eb6:	1ba4      	subs	r4, r4, r6
 8005eb8:	00a4      	lsls	r4, r4, #2
 8005eba:	7833      	ldrb	r3, [r6, #0]
 8005ebc:	2b50      	cmp	r3, #80	; 0x50
 8005ebe:	d001      	beq.n	8005ec4 <__gethex+0xc4>
 8005ec0:	2b70      	cmp	r3, #112	; 0x70
 8005ec2:	d140      	bne.n	8005f46 <__gethex+0x146>
 8005ec4:	7873      	ldrb	r3, [r6, #1]
 8005ec6:	2b2b      	cmp	r3, #43	; 0x2b
 8005ec8:	d031      	beq.n	8005f2e <__gethex+0x12e>
 8005eca:	2b2d      	cmp	r3, #45	; 0x2d
 8005ecc:	d033      	beq.n	8005f36 <__gethex+0x136>
 8005ece:	f04f 0900 	mov.w	r9, #0
 8005ed2:	1c71      	adds	r1, r6, #1
 8005ed4:	7808      	ldrb	r0, [r1, #0]
 8005ed6:	f7ff ff7e 	bl	8005dd6 <__hexdig_fun>
 8005eda:	1e43      	subs	r3, r0, #1
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b18      	cmp	r3, #24
 8005ee0:	d831      	bhi.n	8005f46 <__gethex+0x146>
 8005ee2:	f1a0 0210 	sub.w	r2, r0, #16
 8005ee6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005eea:	f7ff ff74 	bl	8005dd6 <__hexdig_fun>
 8005eee:	1e43      	subs	r3, r0, #1
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b18      	cmp	r3, #24
 8005ef4:	d922      	bls.n	8005f3c <__gethex+0x13c>
 8005ef6:	f1b9 0f00 	cmp.w	r9, #0
 8005efa:	d000      	beq.n	8005efe <__gethex+0xfe>
 8005efc:	4252      	negs	r2, r2
 8005efe:	4414      	add	r4, r2
 8005f00:	f8ca 1000 	str.w	r1, [sl]
 8005f04:	b30d      	cbz	r5, 8005f4a <__gethex+0x14a>
 8005f06:	f1bb 0f00 	cmp.w	fp, #0
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2706      	moveq	r7, #6
 8005f0e:	2700      	movne	r7, #0
 8005f10:	4638      	mov	r0, r7
 8005f12:	b00b      	add	sp, #44	; 0x2c
 8005f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f18:	f10b 0b01 	add.w	fp, fp, #1
 8005f1c:	e78a      	b.n	8005e34 <__gethex+0x34>
 8005f1e:	2500      	movs	r5, #0
 8005f20:	462c      	mov	r4, r5
 8005f22:	e7ae      	b.n	8005e82 <__gethex+0x82>
 8005f24:	463e      	mov	r6, r7
 8005f26:	2501      	movs	r5, #1
 8005f28:	e7c7      	b.n	8005eba <__gethex+0xba>
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	e7fb      	b.n	8005f26 <__gethex+0x126>
 8005f2e:	f04f 0900 	mov.w	r9, #0
 8005f32:	1cb1      	adds	r1, r6, #2
 8005f34:	e7ce      	b.n	8005ed4 <__gethex+0xd4>
 8005f36:	f04f 0901 	mov.w	r9, #1
 8005f3a:	e7fa      	b.n	8005f32 <__gethex+0x132>
 8005f3c:	230a      	movs	r3, #10
 8005f3e:	fb03 0202 	mla	r2, r3, r2, r0
 8005f42:	3a10      	subs	r2, #16
 8005f44:	e7cf      	b.n	8005ee6 <__gethex+0xe6>
 8005f46:	4631      	mov	r1, r6
 8005f48:	e7da      	b.n	8005f00 <__gethex+0x100>
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	1bf3      	subs	r3, r6, r7
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	2b07      	cmp	r3, #7
 8005f52:	dc49      	bgt.n	8005fe8 <__gethex+0x1e8>
 8005f54:	9802      	ldr	r0, [sp, #8]
 8005f56:	f000 fa72 	bl	800643e <_Balloc>
 8005f5a:	f04f 0b00 	mov.w	fp, #0
 8005f5e:	4605      	mov	r5, r0
 8005f60:	46da      	mov	sl, fp
 8005f62:	9b01      	ldr	r3, [sp, #4]
 8005f64:	f100 0914 	add.w	r9, r0, #20
 8005f68:	f1c3 0301 	rsb	r3, r3, #1
 8005f6c:	f8cd 9010 	str.w	r9, [sp, #16]
 8005f70:	9308      	str	r3, [sp, #32]
 8005f72:	42b7      	cmp	r7, r6
 8005f74:	d33b      	bcc.n	8005fee <__gethex+0x1ee>
 8005f76:	9804      	ldr	r0, [sp, #16]
 8005f78:	f840 ab04 	str.w	sl, [r0], #4
 8005f7c:	eba0 0009 	sub.w	r0, r0, r9
 8005f80:	1080      	asrs	r0, r0, #2
 8005f82:	6128      	str	r0, [r5, #16]
 8005f84:	0147      	lsls	r7, r0, #5
 8005f86:	4650      	mov	r0, sl
 8005f88:	f000 fb1d 	bl	80065c6 <__hi0bits>
 8005f8c:	f8d8 6000 	ldr.w	r6, [r8]
 8005f90:	1a3f      	subs	r7, r7, r0
 8005f92:	42b7      	cmp	r7, r6
 8005f94:	dd64      	ble.n	8006060 <__gethex+0x260>
 8005f96:	1bbf      	subs	r7, r7, r6
 8005f98:	4639      	mov	r1, r7
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f000 fe27 	bl	8006bee <__any_on>
 8005fa0:	4682      	mov	sl, r0
 8005fa2:	b178      	cbz	r0, 8005fc4 <__gethex+0x1c4>
 8005fa4:	f04f 0a01 	mov.w	sl, #1
 8005fa8:	1e7b      	subs	r3, r7, #1
 8005faa:	1159      	asrs	r1, r3, #5
 8005fac:	f003 021f 	and.w	r2, r3, #31
 8005fb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005fb4:	fa0a f202 	lsl.w	r2, sl, r2
 8005fb8:	420a      	tst	r2, r1
 8005fba:	d003      	beq.n	8005fc4 <__gethex+0x1c4>
 8005fbc:	4553      	cmp	r3, sl
 8005fbe:	dc46      	bgt.n	800604e <__gethex+0x24e>
 8005fc0:	f04f 0a02 	mov.w	sl, #2
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f7ff feca 	bl	8005d60 <rshift>
 8005fcc:	443c      	add	r4, r7
 8005fce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005fd2:	42a3      	cmp	r3, r4
 8005fd4:	da52      	bge.n	800607c <__gethex+0x27c>
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	9802      	ldr	r0, [sp, #8]
 8005fda:	f000 fa64 	bl	80064a6 <_Bfree>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005fe2:	27a3      	movs	r7, #163	; 0xa3
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e793      	b.n	8005f10 <__gethex+0x110>
 8005fe8:	3101      	adds	r1, #1
 8005fea:	105b      	asrs	r3, r3, #1
 8005fec:	e7b0      	b.n	8005f50 <__gethex+0x150>
 8005fee:	1e73      	subs	r3, r6, #1
 8005ff0:	9305      	str	r3, [sp, #20]
 8005ff2:	9a07      	ldr	r2, [sp, #28]
 8005ff4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d018      	beq.n	800602e <__gethex+0x22e>
 8005ffc:	f1bb 0f20 	cmp.w	fp, #32
 8006000:	d107      	bne.n	8006012 <__gethex+0x212>
 8006002:	9b04      	ldr	r3, [sp, #16]
 8006004:	f8c3 a000 	str.w	sl, [r3]
 8006008:	f04f 0a00 	mov.w	sl, #0
 800600c:	46d3      	mov	fp, sl
 800600e:	3304      	adds	r3, #4
 8006010:	9304      	str	r3, [sp, #16]
 8006012:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006016:	f7ff fede 	bl	8005dd6 <__hexdig_fun>
 800601a:	f000 000f 	and.w	r0, r0, #15
 800601e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006022:	ea4a 0a00 	orr.w	sl, sl, r0
 8006026:	f10b 0b04 	add.w	fp, fp, #4
 800602a:	9b05      	ldr	r3, [sp, #20]
 800602c:	e00d      	b.n	800604a <__gethex+0x24a>
 800602e:	9b05      	ldr	r3, [sp, #20]
 8006030:	9a08      	ldr	r2, [sp, #32]
 8006032:	4413      	add	r3, r2
 8006034:	42bb      	cmp	r3, r7
 8006036:	d3e1      	bcc.n	8005ffc <__gethex+0x1fc>
 8006038:	4618      	mov	r0, r3
 800603a:	9a01      	ldr	r2, [sp, #4]
 800603c:	9903      	ldr	r1, [sp, #12]
 800603e:	9309      	str	r3, [sp, #36]	; 0x24
 8006040:	f001 f80c 	bl	800705c <strncmp>
 8006044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006046:	2800      	cmp	r0, #0
 8006048:	d1d8      	bne.n	8005ffc <__gethex+0x1fc>
 800604a:	461e      	mov	r6, r3
 800604c:	e791      	b.n	8005f72 <__gethex+0x172>
 800604e:	1eb9      	subs	r1, r7, #2
 8006050:	4628      	mov	r0, r5
 8006052:	f000 fdcc 	bl	8006bee <__any_on>
 8006056:	2800      	cmp	r0, #0
 8006058:	d0b2      	beq.n	8005fc0 <__gethex+0x1c0>
 800605a:	f04f 0a03 	mov.w	sl, #3
 800605e:	e7b1      	b.n	8005fc4 <__gethex+0x1c4>
 8006060:	da09      	bge.n	8006076 <__gethex+0x276>
 8006062:	1bf7      	subs	r7, r6, r7
 8006064:	4629      	mov	r1, r5
 8006066:	463a      	mov	r2, r7
 8006068:	9802      	ldr	r0, [sp, #8]
 800606a:	f000 fbe7 	bl	800683c <__lshift>
 800606e:	4605      	mov	r5, r0
 8006070:	1be4      	subs	r4, r4, r7
 8006072:	f100 0914 	add.w	r9, r0, #20
 8006076:	f04f 0a00 	mov.w	sl, #0
 800607a:	e7a8      	b.n	8005fce <__gethex+0x1ce>
 800607c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006080:	42a0      	cmp	r0, r4
 8006082:	dd6b      	ble.n	800615c <__gethex+0x35c>
 8006084:	1b04      	subs	r4, r0, r4
 8006086:	42a6      	cmp	r6, r4
 8006088:	dc2e      	bgt.n	80060e8 <__gethex+0x2e8>
 800608a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d022      	beq.n	80060d8 <__gethex+0x2d8>
 8006092:	2b03      	cmp	r3, #3
 8006094:	d024      	beq.n	80060e0 <__gethex+0x2e0>
 8006096:	2b01      	cmp	r3, #1
 8006098:	d115      	bne.n	80060c6 <__gethex+0x2c6>
 800609a:	42a6      	cmp	r6, r4
 800609c:	d113      	bne.n	80060c6 <__gethex+0x2c6>
 800609e:	2e01      	cmp	r6, #1
 80060a0:	dc0b      	bgt.n	80060ba <__gethex+0x2ba>
 80060a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80060a6:	9a06      	ldr	r2, [sp, #24]
 80060a8:	2762      	movs	r7, #98	; 0x62
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	2301      	movs	r3, #1
 80060ae:	612b      	str	r3, [r5, #16]
 80060b0:	f8c9 3000 	str.w	r3, [r9]
 80060b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060b6:	601d      	str	r5, [r3, #0]
 80060b8:	e72a      	b.n	8005f10 <__gethex+0x110>
 80060ba:	1e71      	subs	r1, r6, #1
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 fd96 	bl	8006bee <__any_on>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d1ed      	bne.n	80060a2 <__gethex+0x2a2>
 80060c6:	4629      	mov	r1, r5
 80060c8:	9802      	ldr	r0, [sp, #8]
 80060ca:	f000 f9ec 	bl	80064a6 <_Bfree>
 80060ce:	2300      	movs	r3, #0
 80060d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80060d2:	2750      	movs	r7, #80	; 0x50
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e71b      	b.n	8005f10 <__gethex+0x110>
 80060d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0e1      	beq.n	80060a2 <__gethex+0x2a2>
 80060de:	e7f2      	b.n	80060c6 <__gethex+0x2c6>
 80060e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1dd      	bne.n	80060a2 <__gethex+0x2a2>
 80060e6:	e7ee      	b.n	80060c6 <__gethex+0x2c6>
 80060e8:	1e67      	subs	r7, r4, #1
 80060ea:	f1ba 0f00 	cmp.w	sl, #0
 80060ee:	d132      	bne.n	8006156 <__gethex+0x356>
 80060f0:	b127      	cbz	r7, 80060fc <__gethex+0x2fc>
 80060f2:	4639      	mov	r1, r7
 80060f4:	4628      	mov	r0, r5
 80060f6:	f000 fd7a 	bl	8006bee <__any_on>
 80060fa:	4682      	mov	sl, r0
 80060fc:	2301      	movs	r3, #1
 80060fe:	117a      	asrs	r2, r7, #5
 8006100:	f007 071f 	and.w	r7, r7, #31
 8006104:	fa03 f707 	lsl.w	r7, r3, r7
 8006108:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800610c:	4621      	mov	r1, r4
 800610e:	421f      	tst	r7, r3
 8006110:	f04f 0702 	mov.w	r7, #2
 8006114:	4628      	mov	r0, r5
 8006116:	bf18      	it	ne
 8006118:	f04a 0a02 	orrne.w	sl, sl, #2
 800611c:	1b36      	subs	r6, r6, r4
 800611e:	f7ff fe1f 	bl	8005d60 <rshift>
 8006122:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006126:	f1ba 0f00 	cmp.w	sl, #0
 800612a:	d048      	beq.n	80061be <__gethex+0x3be>
 800612c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d015      	beq.n	8006160 <__gethex+0x360>
 8006134:	2b03      	cmp	r3, #3
 8006136:	d017      	beq.n	8006168 <__gethex+0x368>
 8006138:	2b01      	cmp	r3, #1
 800613a:	d109      	bne.n	8006150 <__gethex+0x350>
 800613c:	f01a 0f02 	tst.w	sl, #2
 8006140:	d006      	beq.n	8006150 <__gethex+0x350>
 8006142:	f8d9 3000 	ldr.w	r3, [r9]
 8006146:	ea4a 0a03 	orr.w	sl, sl, r3
 800614a:	f01a 0f01 	tst.w	sl, #1
 800614e:	d10e      	bne.n	800616e <__gethex+0x36e>
 8006150:	f047 0710 	orr.w	r7, r7, #16
 8006154:	e033      	b.n	80061be <__gethex+0x3be>
 8006156:	f04f 0a01 	mov.w	sl, #1
 800615a:	e7cf      	b.n	80060fc <__gethex+0x2fc>
 800615c:	2701      	movs	r7, #1
 800615e:	e7e2      	b.n	8006126 <__gethex+0x326>
 8006160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006162:	f1c3 0301 	rsb	r3, r3, #1
 8006166:	9315      	str	r3, [sp, #84]	; 0x54
 8006168:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0f0      	beq.n	8006150 <__gethex+0x350>
 800616e:	f04f 0c00 	mov.w	ip, #0
 8006172:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006176:	f105 0314 	add.w	r3, r5, #20
 800617a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800617e:	eb03 010a 	add.w	r1, r3, sl
 8006182:	4618      	mov	r0, r3
 8006184:	f853 2b04 	ldr.w	r2, [r3], #4
 8006188:	f1b2 3fff 	cmp.w	r2, #4294967295
 800618c:	d01c      	beq.n	80061c8 <__gethex+0x3c8>
 800618e:	3201      	adds	r2, #1
 8006190:	6002      	str	r2, [r0, #0]
 8006192:	2f02      	cmp	r7, #2
 8006194:	f105 0314 	add.w	r3, r5, #20
 8006198:	d138      	bne.n	800620c <__gethex+0x40c>
 800619a:	f8d8 2000 	ldr.w	r2, [r8]
 800619e:	3a01      	subs	r2, #1
 80061a0:	42b2      	cmp	r2, r6
 80061a2:	d10a      	bne.n	80061ba <__gethex+0x3ba>
 80061a4:	2201      	movs	r2, #1
 80061a6:	1171      	asrs	r1, r6, #5
 80061a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061ac:	f006 061f 	and.w	r6, r6, #31
 80061b0:	fa02 f606 	lsl.w	r6, r2, r6
 80061b4:	421e      	tst	r6, r3
 80061b6:	bf18      	it	ne
 80061b8:	4617      	movne	r7, r2
 80061ba:	f047 0720 	orr.w	r7, r7, #32
 80061be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061c0:	601d      	str	r5, [r3, #0]
 80061c2:	9b06      	ldr	r3, [sp, #24]
 80061c4:	601c      	str	r4, [r3, #0]
 80061c6:	e6a3      	b.n	8005f10 <__gethex+0x110>
 80061c8:	4299      	cmp	r1, r3
 80061ca:	f843 cc04 	str.w	ip, [r3, #-4]
 80061ce:	d8d8      	bhi.n	8006182 <__gethex+0x382>
 80061d0:	68ab      	ldr	r3, [r5, #8]
 80061d2:	4599      	cmp	r9, r3
 80061d4:	db12      	blt.n	80061fc <__gethex+0x3fc>
 80061d6:	6869      	ldr	r1, [r5, #4]
 80061d8:	9802      	ldr	r0, [sp, #8]
 80061da:	3101      	adds	r1, #1
 80061dc:	f000 f92f 	bl	800643e <_Balloc>
 80061e0:	4683      	mov	fp, r0
 80061e2:	692a      	ldr	r2, [r5, #16]
 80061e4:	f105 010c 	add.w	r1, r5, #12
 80061e8:	3202      	adds	r2, #2
 80061ea:	0092      	lsls	r2, r2, #2
 80061ec:	300c      	adds	r0, #12
 80061ee:	f000 f91b 	bl	8006428 <memcpy>
 80061f2:	4629      	mov	r1, r5
 80061f4:	9802      	ldr	r0, [sp, #8]
 80061f6:	f000 f956 	bl	80064a6 <_Bfree>
 80061fa:	465d      	mov	r5, fp
 80061fc:	692b      	ldr	r3, [r5, #16]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	612a      	str	r2, [r5, #16]
 8006202:	2201      	movs	r2, #1
 8006204:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006208:	615a      	str	r2, [r3, #20]
 800620a:	e7c2      	b.n	8006192 <__gethex+0x392>
 800620c:	692a      	ldr	r2, [r5, #16]
 800620e:	454a      	cmp	r2, r9
 8006210:	dd0b      	ble.n	800622a <__gethex+0x42a>
 8006212:	2101      	movs	r1, #1
 8006214:	4628      	mov	r0, r5
 8006216:	f7ff fda3 	bl	8005d60 <rshift>
 800621a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800621e:	3401      	adds	r4, #1
 8006220:	42a3      	cmp	r3, r4
 8006222:	f6ff aed8 	blt.w	8005fd6 <__gethex+0x1d6>
 8006226:	2701      	movs	r7, #1
 8006228:	e7c7      	b.n	80061ba <__gethex+0x3ba>
 800622a:	f016 061f 	ands.w	r6, r6, #31
 800622e:	d0fa      	beq.n	8006226 <__gethex+0x426>
 8006230:	449a      	add	sl, r3
 8006232:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006236:	f000 f9c6 	bl	80065c6 <__hi0bits>
 800623a:	f1c6 0620 	rsb	r6, r6, #32
 800623e:	42b0      	cmp	r0, r6
 8006240:	dbe7      	blt.n	8006212 <__gethex+0x412>
 8006242:	e7f0      	b.n	8006226 <__gethex+0x426>

08006244 <L_shift>:
 8006244:	f1c2 0208 	rsb	r2, r2, #8
 8006248:	0092      	lsls	r2, r2, #2
 800624a:	b570      	push	{r4, r5, r6, lr}
 800624c:	f1c2 0620 	rsb	r6, r2, #32
 8006250:	6843      	ldr	r3, [r0, #4]
 8006252:	6804      	ldr	r4, [r0, #0]
 8006254:	fa03 f506 	lsl.w	r5, r3, r6
 8006258:	432c      	orrs	r4, r5
 800625a:	40d3      	lsrs	r3, r2
 800625c:	6004      	str	r4, [r0, #0]
 800625e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006262:	4288      	cmp	r0, r1
 8006264:	d3f4      	bcc.n	8006250 <L_shift+0xc>
 8006266:	bd70      	pop	{r4, r5, r6, pc}

08006268 <__match>:
 8006268:	b530      	push	{r4, r5, lr}
 800626a:	6803      	ldr	r3, [r0, #0]
 800626c:	3301      	adds	r3, #1
 800626e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006272:	b914      	cbnz	r4, 800627a <__match+0x12>
 8006274:	6003      	str	r3, [r0, #0]
 8006276:	2001      	movs	r0, #1
 8006278:	bd30      	pop	{r4, r5, pc}
 800627a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800627e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006282:	2d19      	cmp	r5, #25
 8006284:	bf98      	it	ls
 8006286:	3220      	addls	r2, #32
 8006288:	42a2      	cmp	r2, r4
 800628a:	d0f0      	beq.n	800626e <__match+0x6>
 800628c:	2000      	movs	r0, #0
 800628e:	e7f3      	b.n	8006278 <__match+0x10>

08006290 <__hexnan>:
 8006290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006294:	2500      	movs	r5, #0
 8006296:	680b      	ldr	r3, [r1, #0]
 8006298:	4682      	mov	sl, r0
 800629a:	115f      	asrs	r7, r3, #5
 800629c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80062a0:	f013 031f 	ands.w	r3, r3, #31
 80062a4:	bf18      	it	ne
 80062a6:	3704      	addne	r7, #4
 80062a8:	1f3e      	subs	r6, r7, #4
 80062aa:	4690      	mov	r8, r2
 80062ac:	46b1      	mov	r9, r6
 80062ae:	4634      	mov	r4, r6
 80062b0:	46ab      	mov	fp, r5
 80062b2:	b087      	sub	sp, #28
 80062b4:	6801      	ldr	r1, [r0, #0]
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	f847 5c04 	str.w	r5, [r7, #-4]
 80062bc:	9502      	str	r5, [sp, #8]
 80062be:	784a      	ldrb	r2, [r1, #1]
 80062c0:	1c4b      	adds	r3, r1, #1
 80062c2:	9303      	str	r3, [sp, #12]
 80062c4:	b342      	cbz	r2, 8006318 <__hexnan+0x88>
 80062c6:	4610      	mov	r0, r2
 80062c8:	9105      	str	r1, [sp, #20]
 80062ca:	9204      	str	r2, [sp, #16]
 80062cc:	f7ff fd83 	bl	8005dd6 <__hexdig_fun>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d143      	bne.n	800635c <__hexnan+0xcc>
 80062d4:	9a04      	ldr	r2, [sp, #16]
 80062d6:	9905      	ldr	r1, [sp, #20]
 80062d8:	2a20      	cmp	r2, #32
 80062da:	d818      	bhi.n	800630e <__hexnan+0x7e>
 80062dc:	9b02      	ldr	r3, [sp, #8]
 80062de:	459b      	cmp	fp, r3
 80062e0:	dd13      	ble.n	800630a <__hexnan+0x7a>
 80062e2:	454c      	cmp	r4, r9
 80062e4:	d206      	bcs.n	80062f4 <__hexnan+0x64>
 80062e6:	2d07      	cmp	r5, #7
 80062e8:	dc04      	bgt.n	80062f4 <__hexnan+0x64>
 80062ea:	462a      	mov	r2, r5
 80062ec:	4649      	mov	r1, r9
 80062ee:	4620      	mov	r0, r4
 80062f0:	f7ff ffa8 	bl	8006244 <L_shift>
 80062f4:	4544      	cmp	r4, r8
 80062f6:	d944      	bls.n	8006382 <__hexnan+0xf2>
 80062f8:	2300      	movs	r3, #0
 80062fa:	f1a4 0904 	sub.w	r9, r4, #4
 80062fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8006302:	461d      	mov	r5, r3
 8006304:	464c      	mov	r4, r9
 8006306:	f8cd b008 	str.w	fp, [sp, #8]
 800630a:	9903      	ldr	r1, [sp, #12]
 800630c:	e7d7      	b.n	80062be <__hexnan+0x2e>
 800630e:	2a29      	cmp	r2, #41	; 0x29
 8006310:	d14a      	bne.n	80063a8 <__hexnan+0x118>
 8006312:	3102      	adds	r1, #2
 8006314:	f8ca 1000 	str.w	r1, [sl]
 8006318:	f1bb 0f00 	cmp.w	fp, #0
 800631c:	d044      	beq.n	80063a8 <__hexnan+0x118>
 800631e:	454c      	cmp	r4, r9
 8006320:	d206      	bcs.n	8006330 <__hexnan+0xa0>
 8006322:	2d07      	cmp	r5, #7
 8006324:	dc04      	bgt.n	8006330 <__hexnan+0xa0>
 8006326:	462a      	mov	r2, r5
 8006328:	4649      	mov	r1, r9
 800632a:	4620      	mov	r0, r4
 800632c:	f7ff ff8a 	bl	8006244 <L_shift>
 8006330:	4544      	cmp	r4, r8
 8006332:	d928      	bls.n	8006386 <__hexnan+0xf6>
 8006334:	4643      	mov	r3, r8
 8006336:	f854 2b04 	ldr.w	r2, [r4], #4
 800633a:	42a6      	cmp	r6, r4
 800633c:	f843 2b04 	str.w	r2, [r3], #4
 8006340:	d2f9      	bcs.n	8006336 <__hexnan+0xa6>
 8006342:	2200      	movs	r2, #0
 8006344:	f843 2b04 	str.w	r2, [r3], #4
 8006348:	429e      	cmp	r6, r3
 800634a:	d2fb      	bcs.n	8006344 <__hexnan+0xb4>
 800634c:	6833      	ldr	r3, [r6, #0]
 800634e:	b91b      	cbnz	r3, 8006358 <__hexnan+0xc8>
 8006350:	4546      	cmp	r6, r8
 8006352:	d127      	bne.n	80063a4 <__hexnan+0x114>
 8006354:	2301      	movs	r3, #1
 8006356:	6033      	str	r3, [r6, #0]
 8006358:	2005      	movs	r0, #5
 800635a:	e026      	b.n	80063aa <__hexnan+0x11a>
 800635c:	3501      	adds	r5, #1
 800635e:	2d08      	cmp	r5, #8
 8006360:	f10b 0b01 	add.w	fp, fp, #1
 8006364:	dd06      	ble.n	8006374 <__hexnan+0xe4>
 8006366:	4544      	cmp	r4, r8
 8006368:	d9cf      	bls.n	800630a <__hexnan+0x7a>
 800636a:	2300      	movs	r3, #0
 800636c:	2501      	movs	r5, #1
 800636e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006372:	3c04      	subs	r4, #4
 8006374:	6822      	ldr	r2, [r4, #0]
 8006376:	f000 000f 	and.w	r0, r0, #15
 800637a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800637e:	6020      	str	r0, [r4, #0]
 8006380:	e7c3      	b.n	800630a <__hexnan+0x7a>
 8006382:	2508      	movs	r5, #8
 8006384:	e7c1      	b.n	800630a <__hexnan+0x7a>
 8006386:	9b01      	ldr	r3, [sp, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0df      	beq.n	800634c <__hexnan+0xbc>
 800638c:	f04f 32ff 	mov.w	r2, #4294967295
 8006390:	f1c3 0320 	rsb	r3, r3, #32
 8006394:	fa22 f303 	lsr.w	r3, r2, r3
 8006398:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800639c:	401a      	ands	r2, r3
 800639e:	f847 2c04 	str.w	r2, [r7, #-4]
 80063a2:	e7d3      	b.n	800634c <__hexnan+0xbc>
 80063a4:	3e04      	subs	r6, #4
 80063a6:	e7d1      	b.n	800634c <__hexnan+0xbc>
 80063a8:	2004      	movs	r0, #4
 80063aa:	b007      	add	sp, #28
 80063ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063b0 <__locale_ctype_ptr_l>:
 80063b0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80063b4:	4770      	bx	lr

080063b6 <__localeconv_l>:
 80063b6:	30f0      	adds	r0, #240	; 0xf0
 80063b8:	4770      	bx	lr
	...

080063bc <_localeconv_r>:
 80063bc:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <_localeconv_r+0x14>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6a18      	ldr	r0, [r3, #32]
 80063c2:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <_localeconv_r+0x18>)
 80063c4:	2800      	cmp	r0, #0
 80063c6:	bf08      	it	eq
 80063c8:	4618      	moveq	r0, r3
 80063ca:	30f0      	adds	r0, #240	; 0xf0
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20000010 	.word	0x20000010
 80063d4:	20000074 	.word	0x20000074

080063d8 <malloc>:
 80063d8:	4b02      	ldr	r3, [pc, #8]	; (80063e4 <malloc+0xc>)
 80063da:	4601      	mov	r1, r0
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	f000 bc81 	b.w	8006ce4 <_malloc_r>
 80063e2:	bf00      	nop
 80063e4:	20000010 	.word	0x20000010

080063e8 <__ascii_mbtowc>:
 80063e8:	b082      	sub	sp, #8
 80063ea:	b901      	cbnz	r1, 80063ee <__ascii_mbtowc+0x6>
 80063ec:	a901      	add	r1, sp, #4
 80063ee:	b142      	cbz	r2, 8006402 <__ascii_mbtowc+0x1a>
 80063f0:	b14b      	cbz	r3, 8006406 <__ascii_mbtowc+0x1e>
 80063f2:	7813      	ldrb	r3, [r2, #0]
 80063f4:	600b      	str	r3, [r1, #0]
 80063f6:	7812      	ldrb	r2, [r2, #0]
 80063f8:	1c10      	adds	r0, r2, #0
 80063fa:	bf18      	it	ne
 80063fc:	2001      	movne	r0, #1
 80063fe:	b002      	add	sp, #8
 8006400:	4770      	bx	lr
 8006402:	4610      	mov	r0, r2
 8006404:	e7fb      	b.n	80063fe <__ascii_mbtowc+0x16>
 8006406:	f06f 0001 	mvn.w	r0, #1
 800640a:	e7f8      	b.n	80063fe <__ascii_mbtowc+0x16>

0800640c <memchr>:
 800640c:	b510      	push	{r4, lr}
 800640e:	b2c9      	uxtb	r1, r1
 8006410:	4402      	add	r2, r0
 8006412:	4290      	cmp	r0, r2
 8006414:	4603      	mov	r3, r0
 8006416:	d101      	bne.n	800641c <memchr+0x10>
 8006418:	2300      	movs	r3, #0
 800641a:	e003      	b.n	8006424 <memchr+0x18>
 800641c:	781c      	ldrb	r4, [r3, #0]
 800641e:	3001      	adds	r0, #1
 8006420:	428c      	cmp	r4, r1
 8006422:	d1f6      	bne.n	8006412 <memchr+0x6>
 8006424:	4618      	mov	r0, r3
 8006426:	bd10      	pop	{r4, pc}

08006428 <memcpy>:
 8006428:	b510      	push	{r4, lr}
 800642a:	1e43      	subs	r3, r0, #1
 800642c:	440a      	add	r2, r1
 800642e:	4291      	cmp	r1, r2
 8006430:	d100      	bne.n	8006434 <memcpy+0xc>
 8006432:	bd10      	pop	{r4, pc}
 8006434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800643c:	e7f7      	b.n	800642e <memcpy+0x6>

0800643e <_Balloc>:
 800643e:	b570      	push	{r4, r5, r6, lr}
 8006440:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006442:	4604      	mov	r4, r0
 8006444:	460e      	mov	r6, r1
 8006446:	b93d      	cbnz	r5, 8006458 <_Balloc+0x1a>
 8006448:	2010      	movs	r0, #16
 800644a:	f7ff ffc5 	bl	80063d8 <malloc>
 800644e:	6260      	str	r0, [r4, #36]	; 0x24
 8006450:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006454:	6005      	str	r5, [r0, #0]
 8006456:	60c5      	str	r5, [r0, #12]
 8006458:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800645a:	68eb      	ldr	r3, [r5, #12]
 800645c:	b183      	cbz	r3, 8006480 <_Balloc+0x42>
 800645e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006466:	b9b8      	cbnz	r0, 8006498 <_Balloc+0x5a>
 8006468:	2101      	movs	r1, #1
 800646a:	fa01 f506 	lsl.w	r5, r1, r6
 800646e:	1d6a      	adds	r2, r5, #5
 8006470:	0092      	lsls	r2, r2, #2
 8006472:	4620      	mov	r0, r4
 8006474:	f000 fbdc 	bl	8006c30 <_calloc_r>
 8006478:	b160      	cbz	r0, 8006494 <_Balloc+0x56>
 800647a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800647e:	e00e      	b.n	800649e <_Balloc+0x60>
 8006480:	2221      	movs	r2, #33	; 0x21
 8006482:	2104      	movs	r1, #4
 8006484:	4620      	mov	r0, r4
 8006486:	f000 fbd3 	bl	8006c30 <_calloc_r>
 800648a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800648c:	60e8      	str	r0, [r5, #12]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e4      	bne.n	800645e <_Balloc+0x20>
 8006494:	2000      	movs	r0, #0
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	6802      	ldr	r2, [r0, #0]
 800649a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800649e:	2300      	movs	r3, #0
 80064a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064a4:	e7f7      	b.n	8006496 <_Balloc+0x58>

080064a6 <_Bfree>:
 80064a6:	b570      	push	{r4, r5, r6, lr}
 80064a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80064aa:	4606      	mov	r6, r0
 80064ac:	460d      	mov	r5, r1
 80064ae:	b93c      	cbnz	r4, 80064c0 <_Bfree+0x1a>
 80064b0:	2010      	movs	r0, #16
 80064b2:	f7ff ff91 	bl	80063d8 <malloc>
 80064b6:	6270      	str	r0, [r6, #36]	; 0x24
 80064b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064bc:	6004      	str	r4, [r0, #0]
 80064be:	60c4      	str	r4, [r0, #12]
 80064c0:	b13d      	cbz	r5, 80064d2 <_Bfree+0x2c>
 80064c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80064c4:	686a      	ldr	r2, [r5, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064cc:	6029      	str	r1, [r5, #0]
 80064ce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80064d2:	bd70      	pop	{r4, r5, r6, pc}

080064d4 <__multadd>:
 80064d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d8:	461f      	mov	r7, r3
 80064da:	4606      	mov	r6, r0
 80064dc:	460c      	mov	r4, r1
 80064de:	2300      	movs	r3, #0
 80064e0:	690d      	ldr	r5, [r1, #16]
 80064e2:	f101 0c14 	add.w	ip, r1, #20
 80064e6:	f8dc 0000 	ldr.w	r0, [ip]
 80064ea:	3301      	adds	r3, #1
 80064ec:	b281      	uxth	r1, r0
 80064ee:	fb02 7101 	mla	r1, r2, r1, r7
 80064f2:	0c00      	lsrs	r0, r0, #16
 80064f4:	0c0f      	lsrs	r7, r1, #16
 80064f6:	fb02 7000 	mla	r0, r2, r0, r7
 80064fa:	b289      	uxth	r1, r1
 80064fc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006500:	429d      	cmp	r5, r3
 8006502:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006506:	f84c 1b04 	str.w	r1, [ip], #4
 800650a:	dcec      	bgt.n	80064e6 <__multadd+0x12>
 800650c:	b1d7      	cbz	r7, 8006544 <__multadd+0x70>
 800650e:	68a3      	ldr	r3, [r4, #8]
 8006510:	42ab      	cmp	r3, r5
 8006512:	dc12      	bgt.n	800653a <__multadd+0x66>
 8006514:	6861      	ldr	r1, [r4, #4]
 8006516:	4630      	mov	r0, r6
 8006518:	3101      	adds	r1, #1
 800651a:	f7ff ff90 	bl	800643e <_Balloc>
 800651e:	4680      	mov	r8, r0
 8006520:	6922      	ldr	r2, [r4, #16]
 8006522:	f104 010c 	add.w	r1, r4, #12
 8006526:	3202      	adds	r2, #2
 8006528:	0092      	lsls	r2, r2, #2
 800652a:	300c      	adds	r0, #12
 800652c:	f7ff ff7c 	bl	8006428 <memcpy>
 8006530:	4621      	mov	r1, r4
 8006532:	4630      	mov	r0, r6
 8006534:	f7ff ffb7 	bl	80064a6 <_Bfree>
 8006538:	4644      	mov	r4, r8
 800653a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800653e:	3501      	adds	r5, #1
 8006540:	615f      	str	r7, [r3, #20]
 8006542:	6125      	str	r5, [r4, #16]
 8006544:	4620      	mov	r0, r4
 8006546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800654a <__s2b>:
 800654a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800654e:	4615      	mov	r5, r2
 8006550:	2209      	movs	r2, #9
 8006552:	461f      	mov	r7, r3
 8006554:	3308      	adds	r3, #8
 8006556:	460c      	mov	r4, r1
 8006558:	fb93 f3f2 	sdiv	r3, r3, r2
 800655c:	4606      	mov	r6, r0
 800655e:	2201      	movs	r2, #1
 8006560:	2100      	movs	r1, #0
 8006562:	429a      	cmp	r2, r3
 8006564:	db20      	blt.n	80065a8 <__s2b+0x5e>
 8006566:	4630      	mov	r0, r6
 8006568:	f7ff ff69 	bl	800643e <_Balloc>
 800656c:	9b08      	ldr	r3, [sp, #32]
 800656e:	2d09      	cmp	r5, #9
 8006570:	6143      	str	r3, [r0, #20]
 8006572:	f04f 0301 	mov.w	r3, #1
 8006576:	6103      	str	r3, [r0, #16]
 8006578:	dd19      	ble.n	80065ae <__s2b+0x64>
 800657a:	f104 0809 	add.w	r8, r4, #9
 800657e:	46c1      	mov	r9, r8
 8006580:	442c      	add	r4, r5
 8006582:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006586:	4601      	mov	r1, r0
 8006588:	3b30      	subs	r3, #48	; 0x30
 800658a:	220a      	movs	r2, #10
 800658c:	4630      	mov	r0, r6
 800658e:	f7ff ffa1 	bl	80064d4 <__multadd>
 8006592:	45a1      	cmp	r9, r4
 8006594:	d1f5      	bne.n	8006582 <__s2b+0x38>
 8006596:	eb08 0405 	add.w	r4, r8, r5
 800659a:	3c08      	subs	r4, #8
 800659c:	1b2d      	subs	r5, r5, r4
 800659e:	1963      	adds	r3, r4, r5
 80065a0:	42bb      	cmp	r3, r7
 80065a2:	db07      	blt.n	80065b4 <__s2b+0x6a>
 80065a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065a8:	0052      	lsls	r2, r2, #1
 80065aa:	3101      	adds	r1, #1
 80065ac:	e7d9      	b.n	8006562 <__s2b+0x18>
 80065ae:	340a      	adds	r4, #10
 80065b0:	2509      	movs	r5, #9
 80065b2:	e7f3      	b.n	800659c <__s2b+0x52>
 80065b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065b8:	4601      	mov	r1, r0
 80065ba:	3b30      	subs	r3, #48	; 0x30
 80065bc:	220a      	movs	r2, #10
 80065be:	4630      	mov	r0, r6
 80065c0:	f7ff ff88 	bl	80064d4 <__multadd>
 80065c4:	e7eb      	b.n	800659e <__s2b+0x54>

080065c6 <__hi0bits>:
 80065c6:	0c02      	lsrs	r2, r0, #16
 80065c8:	0412      	lsls	r2, r2, #16
 80065ca:	4603      	mov	r3, r0
 80065cc:	b9b2      	cbnz	r2, 80065fc <__hi0bits+0x36>
 80065ce:	0403      	lsls	r3, r0, #16
 80065d0:	2010      	movs	r0, #16
 80065d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80065d6:	bf04      	itt	eq
 80065d8:	021b      	lsleq	r3, r3, #8
 80065da:	3008      	addeq	r0, #8
 80065dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80065e0:	bf04      	itt	eq
 80065e2:	011b      	lsleq	r3, r3, #4
 80065e4:	3004      	addeq	r0, #4
 80065e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80065ea:	bf04      	itt	eq
 80065ec:	009b      	lsleq	r3, r3, #2
 80065ee:	3002      	addeq	r0, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	db06      	blt.n	8006602 <__hi0bits+0x3c>
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	d503      	bpl.n	8006600 <__hi0bits+0x3a>
 80065f8:	3001      	adds	r0, #1
 80065fa:	4770      	bx	lr
 80065fc:	2000      	movs	r0, #0
 80065fe:	e7e8      	b.n	80065d2 <__hi0bits+0xc>
 8006600:	2020      	movs	r0, #32
 8006602:	4770      	bx	lr

08006604 <__lo0bits>:
 8006604:	6803      	ldr	r3, [r0, #0]
 8006606:	4601      	mov	r1, r0
 8006608:	f013 0207 	ands.w	r2, r3, #7
 800660c:	d00b      	beq.n	8006626 <__lo0bits+0x22>
 800660e:	07da      	lsls	r2, r3, #31
 8006610:	d423      	bmi.n	800665a <__lo0bits+0x56>
 8006612:	0798      	lsls	r0, r3, #30
 8006614:	bf49      	itett	mi
 8006616:	085b      	lsrmi	r3, r3, #1
 8006618:	089b      	lsrpl	r3, r3, #2
 800661a:	2001      	movmi	r0, #1
 800661c:	600b      	strmi	r3, [r1, #0]
 800661e:	bf5c      	itt	pl
 8006620:	600b      	strpl	r3, [r1, #0]
 8006622:	2002      	movpl	r0, #2
 8006624:	4770      	bx	lr
 8006626:	b298      	uxth	r0, r3
 8006628:	b9a8      	cbnz	r0, 8006656 <__lo0bits+0x52>
 800662a:	2010      	movs	r0, #16
 800662c:	0c1b      	lsrs	r3, r3, #16
 800662e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006632:	bf04      	itt	eq
 8006634:	0a1b      	lsreq	r3, r3, #8
 8006636:	3008      	addeq	r0, #8
 8006638:	071a      	lsls	r2, r3, #28
 800663a:	bf04      	itt	eq
 800663c:	091b      	lsreq	r3, r3, #4
 800663e:	3004      	addeq	r0, #4
 8006640:	079a      	lsls	r2, r3, #30
 8006642:	bf04      	itt	eq
 8006644:	089b      	lsreq	r3, r3, #2
 8006646:	3002      	addeq	r0, #2
 8006648:	07da      	lsls	r2, r3, #31
 800664a:	d402      	bmi.n	8006652 <__lo0bits+0x4e>
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	d006      	beq.n	800665e <__lo0bits+0x5a>
 8006650:	3001      	adds	r0, #1
 8006652:	600b      	str	r3, [r1, #0]
 8006654:	4770      	bx	lr
 8006656:	4610      	mov	r0, r2
 8006658:	e7e9      	b.n	800662e <__lo0bits+0x2a>
 800665a:	2000      	movs	r0, #0
 800665c:	4770      	bx	lr
 800665e:	2020      	movs	r0, #32
 8006660:	4770      	bx	lr

08006662 <__i2b>:
 8006662:	b510      	push	{r4, lr}
 8006664:	460c      	mov	r4, r1
 8006666:	2101      	movs	r1, #1
 8006668:	f7ff fee9 	bl	800643e <_Balloc>
 800666c:	2201      	movs	r2, #1
 800666e:	6144      	str	r4, [r0, #20]
 8006670:	6102      	str	r2, [r0, #16]
 8006672:	bd10      	pop	{r4, pc}

08006674 <__multiply>:
 8006674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	4614      	mov	r4, r2
 800667a:	690a      	ldr	r2, [r1, #16]
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	4688      	mov	r8, r1
 8006680:	429a      	cmp	r2, r3
 8006682:	bfbe      	ittt	lt
 8006684:	460b      	movlt	r3, r1
 8006686:	46a0      	movlt	r8, r4
 8006688:	461c      	movlt	r4, r3
 800668a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800668e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006692:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006696:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800669a:	eb07 0609 	add.w	r6, r7, r9
 800669e:	42b3      	cmp	r3, r6
 80066a0:	bfb8      	it	lt
 80066a2:	3101      	addlt	r1, #1
 80066a4:	f7ff fecb 	bl	800643e <_Balloc>
 80066a8:	f100 0514 	add.w	r5, r0, #20
 80066ac:	462b      	mov	r3, r5
 80066ae:	2200      	movs	r2, #0
 80066b0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80066b4:	4573      	cmp	r3, lr
 80066b6:	d316      	bcc.n	80066e6 <__multiply+0x72>
 80066b8:	f104 0214 	add.w	r2, r4, #20
 80066bc:	f108 0114 	add.w	r1, r8, #20
 80066c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80066c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	9b00      	ldr	r3, [sp, #0]
 80066cc:	9201      	str	r2, [sp, #4]
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d80c      	bhi.n	80066ec <__multiply+0x78>
 80066d2:	2e00      	cmp	r6, #0
 80066d4:	dd03      	ble.n	80066de <__multiply+0x6a>
 80066d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d05d      	beq.n	800679a <__multiply+0x126>
 80066de:	6106      	str	r6, [r0, #16]
 80066e0:	b003      	add	sp, #12
 80066e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e6:	f843 2b04 	str.w	r2, [r3], #4
 80066ea:	e7e3      	b.n	80066b4 <__multiply+0x40>
 80066ec:	f8b2 b000 	ldrh.w	fp, [r2]
 80066f0:	f1bb 0f00 	cmp.w	fp, #0
 80066f4:	d023      	beq.n	800673e <__multiply+0xca>
 80066f6:	4689      	mov	r9, r1
 80066f8:	46ac      	mov	ip, r5
 80066fa:	f04f 0800 	mov.w	r8, #0
 80066fe:	f859 4b04 	ldr.w	r4, [r9], #4
 8006702:	f8dc a000 	ldr.w	sl, [ip]
 8006706:	b2a3      	uxth	r3, r4
 8006708:	fa1f fa8a 	uxth.w	sl, sl
 800670c:	fb0b a303 	mla	r3, fp, r3, sl
 8006710:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006714:	f8dc 4000 	ldr.w	r4, [ip]
 8006718:	4443      	add	r3, r8
 800671a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800671e:	fb0b 840a 	mla	r4, fp, sl, r8
 8006722:	46e2      	mov	sl, ip
 8006724:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006728:	b29b      	uxth	r3, r3
 800672a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800672e:	454f      	cmp	r7, r9
 8006730:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006734:	f84a 3b04 	str.w	r3, [sl], #4
 8006738:	d82b      	bhi.n	8006792 <__multiply+0x11e>
 800673a:	f8cc 8004 	str.w	r8, [ip, #4]
 800673e:	9b01      	ldr	r3, [sp, #4]
 8006740:	3204      	adds	r2, #4
 8006742:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006746:	f1ba 0f00 	cmp.w	sl, #0
 800674a:	d020      	beq.n	800678e <__multiply+0x11a>
 800674c:	4689      	mov	r9, r1
 800674e:	46a8      	mov	r8, r5
 8006750:	f04f 0b00 	mov.w	fp, #0
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	f8b9 c000 	ldrh.w	ip, [r9]
 800675a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800675e:	b29b      	uxth	r3, r3
 8006760:	fb0a 440c 	mla	r4, sl, ip, r4
 8006764:	46c4      	mov	ip, r8
 8006766:	445c      	add	r4, fp
 8006768:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800676c:	f84c 3b04 	str.w	r3, [ip], #4
 8006770:	f859 3b04 	ldr.w	r3, [r9], #4
 8006774:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	fb0a b303 	mla	r3, sl, r3, fp
 800677e:	454f      	cmp	r7, r9
 8006780:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006784:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006788:	d805      	bhi.n	8006796 <__multiply+0x122>
 800678a:	f8c8 3004 	str.w	r3, [r8, #4]
 800678e:	3504      	adds	r5, #4
 8006790:	e79b      	b.n	80066ca <__multiply+0x56>
 8006792:	46d4      	mov	ip, sl
 8006794:	e7b3      	b.n	80066fe <__multiply+0x8a>
 8006796:	46e0      	mov	r8, ip
 8006798:	e7dd      	b.n	8006756 <__multiply+0xe2>
 800679a:	3e01      	subs	r6, #1
 800679c:	e799      	b.n	80066d2 <__multiply+0x5e>
	...

080067a0 <__pow5mult>:
 80067a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a4:	4615      	mov	r5, r2
 80067a6:	f012 0203 	ands.w	r2, r2, #3
 80067aa:	4606      	mov	r6, r0
 80067ac:	460f      	mov	r7, r1
 80067ae:	d007      	beq.n	80067c0 <__pow5mult+0x20>
 80067b0:	4c21      	ldr	r4, [pc, #132]	; (8006838 <__pow5mult+0x98>)
 80067b2:	3a01      	subs	r2, #1
 80067b4:	2300      	movs	r3, #0
 80067b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067ba:	f7ff fe8b 	bl	80064d4 <__multadd>
 80067be:	4607      	mov	r7, r0
 80067c0:	10ad      	asrs	r5, r5, #2
 80067c2:	d035      	beq.n	8006830 <__pow5mult+0x90>
 80067c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067c6:	b93c      	cbnz	r4, 80067d8 <__pow5mult+0x38>
 80067c8:	2010      	movs	r0, #16
 80067ca:	f7ff fe05 	bl	80063d8 <malloc>
 80067ce:	6270      	str	r0, [r6, #36]	; 0x24
 80067d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067d4:	6004      	str	r4, [r0, #0]
 80067d6:	60c4      	str	r4, [r0, #12]
 80067d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067e0:	b94c      	cbnz	r4, 80067f6 <__pow5mult+0x56>
 80067e2:	f240 2171 	movw	r1, #625	; 0x271
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ff3b 	bl	8006662 <__i2b>
 80067ec:	2300      	movs	r3, #0
 80067ee:	4604      	mov	r4, r0
 80067f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80067f4:	6003      	str	r3, [r0, #0]
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	07eb      	lsls	r3, r5, #31
 80067fc:	d50a      	bpl.n	8006814 <__pow5mult+0x74>
 80067fe:	4639      	mov	r1, r7
 8006800:	4622      	mov	r2, r4
 8006802:	4630      	mov	r0, r6
 8006804:	f7ff ff36 	bl	8006674 <__multiply>
 8006808:	4681      	mov	r9, r0
 800680a:	4639      	mov	r1, r7
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff fe4a 	bl	80064a6 <_Bfree>
 8006812:	464f      	mov	r7, r9
 8006814:	106d      	asrs	r5, r5, #1
 8006816:	d00b      	beq.n	8006830 <__pow5mult+0x90>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	b938      	cbnz	r0, 800682c <__pow5mult+0x8c>
 800681c:	4622      	mov	r2, r4
 800681e:	4621      	mov	r1, r4
 8006820:	4630      	mov	r0, r6
 8006822:	f7ff ff27 	bl	8006674 <__multiply>
 8006826:	6020      	str	r0, [r4, #0]
 8006828:	f8c0 8000 	str.w	r8, [r0]
 800682c:	4604      	mov	r4, r0
 800682e:	e7e4      	b.n	80067fa <__pow5mult+0x5a>
 8006830:	4638      	mov	r0, r7
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	bf00      	nop
 8006838:	08007b30 	.word	0x08007b30

0800683c <__lshift>:
 800683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	460c      	mov	r4, r1
 8006842:	4607      	mov	r7, r0
 8006844:	4616      	mov	r6, r2
 8006846:	6923      	ldr	r3, [r4, #16]
 8006848:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800684c:	eb0a 0903 	add.w	r9, sl, r3
 8006850:	6849      	ldr	r1, [r1, #4]
 8006852:	68a3      	ldr	r3, [r4, #8]
 8006854:	f109 0501 	add.w	r5, r9, #1
 8006858:	42ab      	cmp	r3, r5
 800685a:	db32      	blt.n	80068c2 <__lshift+0x86>
 800685c:	4638      	mov	r0, r7
 800685e:	f7ff fdee 	bl	800643e <_Balloc>
 8006862:	2300      	movs	r3, #0
 8006864:	4680      	mov	r8, r0
 8006866:	461a      	mov	r2, r3
 8006868:	f100 0114 	add.w	r1, r0, #20
 800686c:	4553      	cmp	r3, sl
 800686e:	db2b      	blt.n	80068c8 <__lshift+0x8c>
 8006870:	6920      	ldr	r0, [r4, #16]
 8006872:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006876:	f104 0314 	add.w	r3, r4, #20
 800687a:	f016 021f 	ands.w	r2, r6, #31
 800687e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006882:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006886:	d025      	beq.n	80068d4 <__lshift+0x98>
 8006888:	2000      	movs	r0, #0
 800688a:	f1c2 0e20 	rsb	lr, r2, #32
 800688e:	468a      	mov	sl, r1
 8006890:	681e      	ldr	r6, [r3, #0]
 8006892:	4096      	lsls	r6, r2
 8006894:	4330      	orrs	r0, r6
 8006896:	f84a 0b04 	str.w	r0, [sl], #4
 800689a:	f853 0b04 	ldr.w	r0, [r3], #4
 800689e:	459c      	cmp	ip, r3
 80068a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80068a4:	d814      	bhi.n	80068d0 <__lshift+0x94>
 80068a6:	6048      	str	r0, [r1, #4]
 80068a8:	b108      	cbz	r0, 80068ae <__lshift+0x72>
 80068aa:	f109 0502 	add.w	r5, r9, #2
 80068ae:	3d01      	subs	r5, #1
 80068b0:	4638      	mov	r0, r7
 80068b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80068b6:	4621      	mov	r1, r4
 80068b8:	f7ff fdf5 	bl	80064a6 <_Bfree>
 80068bc:	4640      	mov	r0, r8
 80068be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c2:	3101      	adds	r1, #1
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	e7c7      	b.n	8006858 <__lshift+0x1c>
 80068c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80068cc:	3301      	adds	r3, #1
 80068ce:	e7cd      	b.n	800686c <__lshift+0x30>
 80068d0:	4651      	mov	r1, sl
 80068d2:	e7dc      	b.n	800688e <__lshift+0x52>
 80068d4:	3904      	subs	r1, #4
 80068d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068da:	459c      	cmp	ip, r3
 80068dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80068e0:	d8f9      	bhi.n	80068d6 <__lshift+0x9a>
 80068e2:	e7e4      	b.n	80068ae <__lshift+0x72>

080068e4 <__mcmp>:
 80068e4:	6903      	ldr	r3, [r0, #16]
 80068e6:	690a      	ldr	r2, [r1, #16]
 80068e8:	b530      	push	{r4, r5, lr}
 80068ea:	1a9b      	subs	r3, r3, r2
 80068ec:	d10c      	bne.n	8006908 <__mcmp+0x24>
 80068ee:	0092      	lsls	r2, r2, #2
 80068f0:	3014      	adds	r0, #20
 80068f2:	3114      	adds	r1, #20
 80068f4:	1884      	adds	r4, r0, r2
 80068f6:	4411      	add	r1, r2
 80068f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006900:	4295      	cmp	r5, r2
 8006902:	d003      	beq.n	800690c <__mcmp+0x28>
 8006904:	d305      	bcc.n	8006912 <__mcmp+0x2e>
 8006906:	2301      	movs	r3, #1
 8006908:	4618      	mov	r0, r3
 800690a:	bd30      	pop	{r4, r5, pc}
 800690c:	42a0      	cmp	r0, r4
 800690e:	d3f3      	bcc.n	80068f8 <__mcmp+0x14>
 8006910:	e7fa      	b.n	8006908 <__mcmp+0x24>
 8006912:	f04f 33ff 	mov.w	r3, #4294967295
 8006916:	e7f7      	b.n	8006908 <__mcmp+0x24>

08006918 <__mdiff>:
 8006918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	460d      	mov	r5, r1
 800691e:	4607      	mov	r7, r0
 8006920:	4611      	mov	r1, r2
 8006922:	4628      	mov	r0, r5
 8006924:	4614      	mov	r4, r2
 8006926:	f7ff ffdd 	bl	80068e4 <__mcmp>
 800692a:	1e06      	subs	r6, r0, #0
 800692c:	d108      	bne.n	8006940 <__mdiff+0x28>
 800692e:	4631      	mov	r1, r6
 8006930:	4638      	mov	r0, r7
 8006932:	f7ff fd84 	bl	800643e <_Balloc>
 8006936:	2301      	movs	r3, #1
 8006938:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800693c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006940:	bfa4      	itt	ge
 8006942:	4623      	movge	r3, r4
 8006944:	462c      	movge	r4, r5
 8006946:	4638      	mov	r0, r7
 8006948:	6861      	ldr	r1, [r4, #4]
 800694a:	bfa6      	itte	ge
 800694c:	461d      	movge	r5, r3
 800694e:	2600      	movge	r6, #0
 8006950:	2601      	movlt	r6, #1
 8006952:	f7ff fd74 	bl	800643e <_Balloc>
 8006956:	f04f 0e00 	mov.w	lr, #0
 800695a:	60c6      	str	r6, [r0, #12]
 800695c:	692b      	ldr	r3, [r5, #16]
 800695e:	6926      	ldr	r6, [r4, #16]
 8006960:	f104 0214 	add.w	r2, r4, #20
 8006964:	f105 0914 	add.w	r9, r5, #20
 8006968:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800696c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006970:	f100 0114 	add.w	r1, r0, #20
 8006974:	f852 ab04 	ldr.w	sl, [r2], #4
 8006978:	f859 5b04 	ldr.w	r5, [r9], #4
 800697c:	fa1f f38a 	uxth.w	r3, sl
 8006980:	4473      	add	r3, lr
 8006982:	b2ac      	uxth	r4, r5
 8006984:	1b1b      	subs	r3, r3, r4
 8006986:	0c2c      	lsrs	r4, r5, #16
 8006988:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800698c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006990:	b29b      	uxth	r3, r3
 8006992:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006996:	45c8      	cmp	r8, r9
 8006998:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800699c:	4694      	mov	ip, r2
 800699e:	f841 4b04 	str.w	r4, [r1], #4
 80069a2:	d8e7      	bhi.n	8006974 <__mdiff+0x5c>
 80069a4:	45bc      	cmp	ip, r7
 80069a6:	d304      	bcc.n	80069b2 <__mdiff+0x9a>
 80069a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80069ac:	b183      	cbz	r3, 80069d0 <__mdiff+0xb8>
 80069ae:	6106      	str	r6, [r0, #16]
 80069b0:	e7c4      	b.n	800693c <__mdiff+0x24>
 80069b2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80069b6:	b2a2      	uxth	r2, r4
 80069b8:	4472      	add	r2, lr
 80069ba:	1413      	asrs	r3, r2, #16
 80069bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80069c0:	b292      	uxth	r2, r2
 80069c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80069c6:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80069ca:	f841 2b04 	str.w	r2, [r1], #4
 80069ce:	e7e9      	b.n	80069a4 <__mdiff+0x8c>
 80069d0:	3e01      	subs	r6, #1
 80069d2:	e7e9      	b.n	80069a8 <__mdiff+0x90>

080069d4 <__ulp>:
 80069d4:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <__ulp+0x44>)
 80069d6:	400b      	ands	r3, r1
 80069d8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	dd02      	ble.n	80069e6 <__ulp+0x12>
 80069e0:	2000      	movs	r0, #0
 80069e2:	4619      	mov	r1, r3
 80069e4:	4770      	bx	lr
 80069e6:	425b      	negs	r3, r3
 80069e8:	151b      	asrs	r3, r3, #20
 80069ea:	2b13      	cmp	r3, #19
 80069ec:	f04f 0000 	mov.w	r0, #0
 80069f0:	f04f 0100 	mov.w	r1, #0
 80069f4:	dc04      	bgt.n	8006a00 <__ulp+0x2c>
 80069f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80069fa:	fa42 f103 	asr.w	r1, r2, r3
 80069fe:	4770      	bx	lr
 8006a00:	2201      	movs	r2, #1
 8006a02:	3b14      	subs	r3, #20
 8006a04:	2b1e      	cmp	r3, #30
 8006a06:	bfce      	itee	gt
 8006a08:	4613      	movgt	r3, r2
 8006a0a:	f1c3 031f 	rsble	r3, r3, #31
 8006a0e:	fa02 f303 	lslle.w	r3, r2, r3
 8006a12:	4618      	mov	r0, r3
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	7ff00000 	.word	0x7ff00000

08006a1c <__b2d>:
 8006a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a20:	6907      	ldr	r7, [r0, #16]
 8006a22:	f100 0914 	add.w	r9, r0, #20
 8006a26:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006a2a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006a2e:	f1a7 0804 	sub.w	r8, r7, #4
 8006a32:	4630      	mov	r0, r6
 8006a34:	f7ff fdc7 	bl	80065c6 <__hi0bits>
 8006a38:	f1c0 0320 	rsb	r3, r0, #32
 8006a3c:	280a      	cmp	r0, #10
 8006a3e:	600b      	str	r3, [r1, #0]
 8006a40:	491e      	ldr	r1, [pc, #120]	; (8006abc <__b2d+0xa0>)
 8006a42:	dc17      	bgt.n	8006a74 <__b2d+0x58>
 8006a44:	45c1      	cmp	r9, r8
 8006a46:	bf28      	it	cs
 8006a48:	2200      	movcs	r2, #0
 8006a4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006a4e:	fa26 f30c 	lsr.w	r3, r6, ip
 8006a52:	bf38      	it	cc
 8006a54:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006a58:	ea43 0501 	orr.w	r5, r3, r1
 8006a5c:	f100 0315 	add.w	r3, r0, #21
 8006a60:	fa06 f303 	lsl.w	r3, r6, r3
 8006a64:	fa22 f20c 	lsr.w	r2, r2, ip
 8006a68:	ea43 0402 	orr.w	r4, r3, r2
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	4629      	mov	r1, r5
 8006a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a74:	45c1      	cmp	r9, r8
 8006a76:	bf3a      	itte	cc
 8006a78:	f1a7 0808 	subcc.w	r8, r7, #8
 8006a7c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006a80:	2200      	movcs	r2, #0
 8006a82:	f1b0 030b 	subs.w	r3, r0, #11
 8006a86:	d015      	beq.n	8006ab4 <__b2d+0x98>
 8006a88:	409e      	lsls	r6, r3
 8006a8a:	f1c3 0720 	rsb	r7, r3, #32
 8006a8e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8006a92:	fa22 f107 	lsr.w	r1, r2, r7
 8006a96:	45c8      	cmp	r8, r9
 8006a98:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8006a9c:	ea46 0501 	orr.w	r5, r6, r1
 8006aa0:	bf94      	ite	ls
 8006aa2:	2100      	movls	r1, #0
 8006aa4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006aa8:	fa02 f003 	lsl.w	r0, r2, r3
 8006aac:	40f9      	lsrs	r1, r7
 8006aae:	ea40 0401 	orr.w	r4, r0, r1
 8006ab2:	e7db      	b.n	8006a6c <__b2d+0x50>
 8006ab4:	ea46 0501 	orr.w	r5, r6, r1
 8006ab8:	4614      	mov	r4, r2
 8006aba:	e7d7      	b.n	8006a6c <__b2d+0x50>
 8006abc:	3ff00000 	.word	0x3ff00000

08006ac0 <__d2b>:
 8006ac0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006ac4:	461c      	mov	r4, r3
 8006ac6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006aca:	2101      	movs	r1, #1
 8006acc:	4690      	mov	r8, r2
 8006ace:	f7ff fcb6 	bl	800643e <_Balloc>
 8006ad2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006ad6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006ada:	4607      	mov	r7, r0
 8006adc:	bb34      	cbnz	r4, 8006b2c <__d2b+0x6c>
 8006ade:	9201      	str	r2, [sp, #4]
 8006ae0:	f1b8 0200 	subs.w	r2, r8, #0
 8006ae4:	d027      	beq.n	8006b36 <__d2b+0x76>
 8006ae6:	a802      	add	r0, sp, #8
 8006ae8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006aec:	f7ff fd8a 	bl	8006604 <__lo0bits>
 8006af0:	9900      	ldr	r1, [sp, #0]
 8006af2:	b1f0      	cbz	r0, 8006b32 <__d2b+0x72>
 8006af4:	9a01      	ldr	r2, [sp, #4]
 8006af6:	f1c0 0320 	rsb	r3, r0, #32
 8006afa:	fa02 f303 	lsl.w	r3, r2, r3
 8006afe:	430b      	orrs	r3, r1
 8006b00:	40c2      	lsrs	r2, r0
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	9201      	str	r2, [sp, #4]
 8006b06:	9b01      	ldr	r3, [sp, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bf14      	ite	ne
 8006b0c:	2102      	movne	r1, #2
 8006b0e:	2101      	moveq	r1, #1
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	6139      	str	r1, [r7, #16]
 8006b14:	b1c4      	cbz	r4, 8006b48 <__d2b+0x88>
 8006b16:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006b1a:	4404      	add	r4, r0
 8006b1c:	6034      	str	r4, [r6, #0]
 8006b1e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b22:	6028      	str	r0, [r5, #0]
 8006b24:	4638      	mov	r0, r7
 8006b26:	b002      	add	sp, #8
 8006b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006b30:	e7d5      	b.n	8006ade <__d2b+0x1e>
 8006b32:	6179      	str	r1, [r7, #20]
 8006b34:	e7e7      	b.n	8006b06 <__d2b+0x46>
 8006b36:	a801      	add	r0, sp, #4
 8006b38:	f7ff fd64 	bl	8006604 <__lo0bits>
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	9b01      	ldr	r3, [sp, #4]
 8006b40:	6139      	str	r1, [r7, #16]
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	3020      	adds	r0, #32
 8006b46:	e7e5      	b.n	8006b14 <__d2b+0x54>
 8006b48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b4c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b50:	6030      	str	r0, [r6, #0]
 8006b52:	6918      	ldr	r0, [r3, #16]
 8006b54:	f7ff fd37 	bl	80065c6 <__hi0bits>
 8006b58:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b5c:	e7e1      	b.n	8006b22 <__d2b+0x62>

08006b5e <__ratio>:
 8006b5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b62:	4688      	mov	r8, r1
 8006b64:	4669      	mov	r1, sp
 8006b66:	4681      	mov	r9, r0
 8006b68:	f7ff ff58 	bl	8006a1c <__b2d>
 8006b6c:	468b      	mov	fp, r1
 8006b6e:	4606      	mov	r6, r0
 8006b70:	460f      	mov	r7, r1
 8006b72:	4640      	mov	r0, r8
 8006b74:	a901      	add	r1, sp, #4
 8006b76:	f7ff ff51 	bl	8006a1c <__b2d>
 8006b7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006b82:	460d      	mov	r5, r1
 8006b84:	eba3 0c02 	sub.w	ip, r3, r2
 8006b88:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bfd5      	itete	le
 8006b96:	460a      	movle	r2, r1
 8006b98:	463a      	movgt	r2, r7
 8006b9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006b9e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006ba2:	bfd8      	it	le
 8006ba4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8006ba8:	462b      	mov	r3, r5
 8006baa:	4602      	mov	r2, r0
 8006bac:	4659      	mov	r1, fp
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f7f9 fdbc 	bl	800072c <__aeabi_ddiv>
 8006bb4:	b003      	add	sp, #12
 8006bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bba <__copybits>:
 8006bba:	3901      	subs	r1, #1
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	1149      	asrs	r1, r1, #5
 8006bc0:	6914      	ldr	r4, [r2, #16]
 8006bc2:	3101      	adds	r1, #1
 8006bc4:	f102 0314 	add.w	r3, r2, #20
 8006bc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006bcc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	d303      	bcc.n	8006bde <__copybits+0x24>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	428a      	cmp	r2, r1
 8006bda:	d305      	bcc.n	8006be8 <__copybits+0x2e>
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006be2:	f840 2b04 	str.w	r2, [r0], #4
 8006be6:	e7f3      	b.n	8006bd0 <__copybits+0x16>
 8006be8:	f842 3b04 	str.w	r3, [r2], #4
 8006bec:	e7f4      	b.n	8006bd8 <__copybits+0x1e>

08006bee <__any_on>:
 8006bee:	f100 0214 	add.w	r2, r0, #20
 8006bf2:	6900      	ldr	r0, [r0, #16]
 8006bf4:	114b      	asrs	r3, r1, #5
 8006bf6:	4298      	cmp	r0, r3
 8006bf8:	b510      	push	{r4, lr}
 8006bfa:	db11      	blt.n	8006c20 <__any_on+0x32>
 8006bfc:	dd0a      	ble.n	8006c14 <__any_on+0x26>
 8006bfe:	f011 011f 	ands.w	r1, r1, #31
 8006c02:	d007      	beq.n	8006c14 <__any_on+0x26>
 8006c04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006c08:	fa24 f001 	lsr.w	r0, r4, r1
 8006c0c:	fa00 f101 	lsl.w	r1, r0, r1
 8006c10:	428c      	cmp	r4, r1
 8006c12:	d10b      	bne.n	8006c2c <__any_on+0x3e>
 8006c14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d803      	bhi.n	8006c24 <__any_on+0x36>
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	bd10      	pop	{r4, pc}
 8006c20:	4603      	mov	r3, r0
 8006c22:	e7f7      	b.n	8006c14 <__any_on+0x26>
 8006c24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c28:	2900      	cmp	r1, #0
 8006c2a:	d0f5      	beq.n	8006c18 <__any_on+0x2a>
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	e7f6      	b.n	8006c1e <__any_on+0x30>

08006c30 <_calloc_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	fb02 f401 	mul.w	r4, r2, r1
 8006c36:	4621      	mov	r1, r4
 8006c38:	f000 f854 	bl	8006ce4 <_malloc_r>
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	b118      	cbz	r0, 8006c48 <_calloc_r+0x18>
 8006c40:	4622      	mov	r2, r4
 8006c42:	2100      	movs	r1, #0
 8006c44:	f7fc fd2c 	bl	80036a0 <memset>
 8006c48:	4628      	mov	r0, r5
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}

08006c4c <_free_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4605      	mov	r5, r0
 8006c50:	2900      	cmp	r1, #0
 8006c52:	d043      	beq.n	8006cdc <_free_r+0x90>
 8006c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c58:	1f0c      	subs	r4, r1, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	bfb8      	it	lt
 8006c5e:	18e4      	addlt	r4, r4, r3
 8006c60:	f000 fa34 	bl	80070cc <__malloc_lock>
 8006c64:	4a1e      	ldr	r2, [pc, #120]	; (8006ce0 <_free_r+0x94>)
 8006c66:	6813      	ldr	r3, [r2, #0]
 8006c68:	4610      	mov	r0, r2
 8006c6a:	b933      	cbnz	r3, 8006c7a <_free_r+0x2e>
 8006c6c:	6063      	str	r3, [r4, #4]
 8006c6e:	6014      	str	r4, [r2, #0]
 8006c70:	4628      	mov	r0, r5
 8006c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c76:	f000 ba2a 	b.w	80070ce <__malloc_unlock>
 8006c7a:	42a3      	cmp	r3, r4
 8006c7c:	d90b      	bls.n	8006c96 <_free_r+0x4a>
 8006c7e:	6821      	ldr	r1, [r4, #0]
 8006c80:	1862      	adds	r2, r4, r1
 8006c82:	4293      	cmp	r3, r2
 8006c84:	bf01      	itttt	eq
 8006c86:	681a      	ldreq	r2, [r3, #0]
 8006c88:	685b      	ldreq	r3, [r3, #4]
 8006c8a:	1852      	addeq	r2, r2, r1
 8006c8c:	6022      	streq	r2, [r4, #0]
 8006c8e:	6063      	str	r3, [r4, #4]
 8006c90:	6004      	str	r4, [r0, #0]
 8006c92:	e7ed      	b.n	8006c70 <_free_r+0x24>
 8006c94:	4613      	mov	r3, r2
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	b10a      	cbz	r2, 8006c9e <_free_r+0x52>
 8006c9a:	42a2      	cmp	r2, r4
 8006c9c:	d9fa      	bls.n	8006c94 <_free_r+0x48>
 8006c9e:	6819      	ldr	r1, [r3, #0]
 8006ca0:	1858      	adds	r0, r3, r1
 8006ca2:	42a0      	cmp	r0, r4
 8006ca4:	d10b      	bne.n	8006cbe <_free_r+0x72>
 8006ca6:	6820      	ldr	r0, [r4, #0]
 8006ca8:	4401      	add	r1, r0
 8006caa:	1858      	adds	r0, r3, r1
 8006cac:	4282      	cmp	r2, r0
 8006cae:	6019      	str	r1, [r3, #0]
 8006cb0:	d1de      	bne.n	8006c70 <_free_r+0x24>
 8006cb2:	6810      	ldr	r0, [r2, #0]
 8006cb4:	6852      	ldr	r2, [r2, #4]
 8006cb6:	4401      	add	r1, r0
 8006cb8:	6019      	str	r1, [r3, #0]
 8006cba:	605a      	str	r2, [r3, #4]
 8006cbc:	e7d8      	b.n	8006c70 <_free_r+0x24>
 8006cbe:	d902      	bls.n	8006cc6 <_free_r+0x7a>
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	602b      	str	r3, [r5, #0]
 8006cc4:	e7d4      	b.n	8006c70 <_free_r+0x24>
 8006cc6:	6820      	ldr	r0, [r4, #0]
 8006cc8:	1821      	adds	r1, r4, r0
 8006cca:	428a      	cmp	r2, r1
 8006ccc:	bf01      	itttt	eq
 8006cce:	6811      	ldreq	r1, [r2, #0]
 8006cd0:	6852      	ldreq	r2, [r2, #4]
 8006cd2:	1809      	addeq	r1, r1, r0
 8006cd4:	6021      	streq	r1, [r4, #0]
 8006cd6:	6062      	str	r2, [r4, #4]
 8006cd8:	605c      	str	r4, [r3, #4]
 8006cda:	e7c9      	b.n	8006c70 <_free_r+0x24>
 8006cdc:	bd38      	pop	{r3, r4, r5, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000200 	.word	0x20000200

08006ce4 <_malloc_r>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	1ccd      	adds	r5, r1, #3
 8006ce8:	f025 0503 	bic.w	r5, r5, #3
 8006cec:	3508      	adds	r5, #8
 8006cee:	2d0c      	cmp	r5, #12
 8006cf0:	bf38      	it	cc
 8006cf2:	250c      	movcc	r5, #12
 8006cf4:	2d00      	cmp	r5, #0
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	db01      	blt.n	8006cfe <_malloc_r+0x1a>
 8006cfa:	42a9      	cmp	r1, r5
 8006cfc:	d903      	bls.n	8006d06 <_malloc_r+0x22>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	6033      	str	r3, [r6, #0]
 8006d02:	2000      	movs	r0, #0
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
 8006d06:	f000 f9e1 	bl	80070cc <__malloc_lock>
 8006d0a:	4a21      	ldr	r2, [pc, #132]	; (8006d90 <_malloc_r+0xac>)
 8006d0c:	6814      	ldr	r4, [r2, #0]
 8006d0e:	4621      	mov	r1, r4
 8006d10:	b991      	cbnz	r1, 8006d38 <_malloc_r+0x54>
 8006d12:	4c20      	ldr	r4, [pc, #128]	; (8006d94 <_malloc_r+0xb0>)
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	b91b      	cbnz	r3, 8006d20 <_malloc_r+0x3c>
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f000 f98f 	bl	800703c <_sbrk_r>
 8006d1e:	6020      	str	r0, [r4, #0]
 8006d20:	4629      	mov	r1, r5
 8006d22:	4630      	mov	r0, r6
 8006d24:	f000 f98a 	bl	800703c <_sbrk_r>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d124      	bne.n	8006d76 <_malloc_r+0x92>
 8006d2c:	230c      	movs	r3, #12
 8006d2e:	4630      	mov	r0, r6
 8006d30:	6033      	str	r3, [r6, #0]
 8006d32:	f000 f9cc 	bl	80070ce <__malloc_unlock>
 8006d36:	e7e4      	b.n	8006d02 <_malloc_r+0x1e>
 8006d38:	680b      	ldr	r3, [r1, #0]
 8006d3a:	1b5b      	subs	r3, r3, r5
 8006d3c:	d418      	bmi.n	8006d70 <_malloc_r+0x8c>
 8006d3e:	2b0b      	cmp	r3, #11
 8006d40:	d90f      	bls.n	8006d62 <_malloc_r+0x7e>
 8006d42:	600b      	str	r3, [r1, #0]
 8006d44:	18cc      	adds	r4, r1, r3
 8006d46:	50cd      	str	r5, [r1, r3]
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f000 f9c0 	bl	80070ce <__malloc_unlock>
 8006d4e:	f104 000b 	add.w	r0, r4, #11
 8006d52:	1d23      	adds	r3, r4, #4
 8006d54:	f020 0007 	bic.w	r0, r0, #7
 8006d58:	1ac3      	subs	r3, r0, r3
 8006d5a:	d0d3      	beq.n	8006d04 <_malloc_r+0x20>
 8006d5c:	425a      	negs	r2, r3
 8006d5e:	50e2      	str	r2, [r4, r3]
 8006d60:	e7d0      	b.n	8006d04 <_malloc_r+0x20>
 8006d62:	684b      	ldr	r3, [r1, #4]
 8006d64:	428c      	cmp	r4, r1
 8006d66:	bf16      	itet	ne
 8006d68:	6063      	strne	r3, [r4, #4]
 8006d6a:	6013      	streq	r3, [r2, #0]
 8006d6c:	460c      	movne	r4, r1
 8006d6e:	e7eb      	b.n	8006d48 <_malloc_r+0x64>
 8006d70:	460c      	mov	r4, r1
 8006d72:	6849      	ldr	r1, [r1, #4]
 8006d74:	e7cc      	b.n	8006d10 <_malloc_r+0x2c>
 8006d76:	1cc4      	adds	r4, r0, #3
 8006d78:	f024 0403 	bic.w	r4, r4, #3
 8006d7c:	42a0      	cmp	r0, r4
 8006d7e:	d005      	beq.n	8006d8c <_malloc_r+0xa8>
 8006d80:	1a21      	subs	r1, r4, r0
 8006d82:	4630      	mov	r0, r6
 8006d84:	f000 f95a 	bl	800703c <_sbrk_r>
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d0cf      	beq.n	8006d2c <_malloc_r+0x48>
 8006d8c:	6025      	str	r5, [r4, #0]
 8006d8e:	e7db      	b.n	8006d48 <_malloc_r+0x64>
 8006d90:	20000200 	.word	0x20000200
 8006d94:	20000204 	.word	0x20000204

08006d98 <__ssputs_r>:
 8006d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d9c:	688e      	ldr	r6, [r1, #8]
 8006d9e:	4682      	mov	sl, r0
 8006da0:	429e      	cmp	r6, r3
 8006da2:	460c      	mov	r4, r1
 8006da4:	4690      	mov	r8, r2
 8006da6:	4699      	mov	r9, r3
 8006da8:	d837      	bhi.n	8006e1a <__ssputs_r+0x82>
 8006daa:	898a      	ldrh	r2, [r1, #12]
 8006dac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006db0:	d031      	beq.n	8006e16 <__ssputs_r+0x7e>
 8006db2:	2302      	movs	r3, #2
 8006db4:	6825      	ldr	r5, [r4, #0]
 8006db6:	6909      	ldr	r1, [r1, #16]
 8006db8:	1a6f      	subs	r7, r5, r1
 8006dba:	6965      	ldr	r5, [r4, #20]
 8006dbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8006dc4:	f109 0301 	add.w	r3, r9, #1
 8006dc8:	443b      	add	r3, r7
 8006dca:	429d      	cmp	r5, r3
 8006dcc:	bf38      	it	cc
 8006dce:	461d      	movcc	r5, r3
 8006dd0:	0553      	lsls	r3, r2, #21
 8006dd2:	d530      	bpl.n	8006e36 <__ssputs_r+0x9e>
 8006dd4:	4629      	mov	r1, r5
 8006dd6:	f7ff ff85 	bl	8006ce4 <_malloc_r>
 8006dda:	4606      	mov	r6, r0
 8006ddc:	b950      	cbnz	r0, 8006df4 <__ssputs_r+0x5c>
 8006dde:	230c      	movs	r3, #12
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	f8ca 3000 	str.w	r3, [sl]
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df4:	463a      	mov	r2, r7
 8006df6:	6921      	ldr	r1, [r4, #16]
 8006df8:	f7ff fb16 	bl	8006428 <memcpy>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e06:	81a3      	strh	r3, [r4, #12]
 8006e08:	6126      	str	r6, [r4, #16]
 8006e0a:	443e      	add	r6, r7
 8006e0c:	6026      	str	r6, [r4, #0]
 8006e0e:	464e      	mov	r6, r9
 8006e10:	6165      	str	r5, [r4, #20]
 8006e12:	1bed      	subs	r5, r5, r7
 8006e14:	60a5      	str	r5, [r4, #8]
 8006e16:	454e      	cmp	r6, r9
 8006e18:	d900      	bls.n	8006e1c <__ssputs_r+0x84>
 8006e1a:	464e      	mov	r6, r9
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	4641      	mov	r1, r8
 8006e20:	6820      	ldr	r0, [r4, #0]
 8006e22:	f000 f93a 	bl	800709a <memmove>
 8006e26:	68a3      	ldr	r3, [r4, #8]
 8006e28:	2000      	movs	r0, #0
 8006e2a:	1b9b      	subs	r3, r3, r6
 8006e2c:	60a3      	str	r3, [r4, #8]
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	441e      	add	r6, r3
 8006e32:	6026      	str	r6, [r4, #0]
 8006e34:	e7dc      	b.n	8006df0 <__ssputs_r+0x58>
 8006e36:	462a      	mov	r2, r5
 8006e38:	f000 f94a 	bl	80070d0 <_realloc_r>
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d1e2      	bne.n	8006e08 <__ssputs_r+0x70>
 8006e42:	6921      	ldr	r1, [r4, #16]
 8006e44:	4650      	mov	r0, sl
 8006e46:	f7ff ff01 	bl	8006c4c <_free_r>
 8006e4a:	e7c8      	b.n	8006dde <__ssputs_r+0x46>

08006e4c <_svfiprintf_r>:
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	461d      	mov	r5, r3
 8006e52:	898b      	ldrh	r3, [r1, #12]
 8006e54:	b09d      	sub	sp, #116	; 0x74
 8006e56:	061f      	lsls	r7, r3, #24
 8006e58:	4680      	mov	r8, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	4616      	mov	r6, r2
 8006e5e:	d50f      	bpl.n	8006e80 <_svfiprintf_r+0x34>
 8006e60:	690b      	ldr	r3, [r1, #16]
 8006e62:	b96b      	cbnz	r3, 8006e80 <_svfiprintf_r+0x34>
 8006e64:	2140      	movs	r1, #64	; 0x40
 8006e66:	f7ff ff3d 	bl	8006ce4 <_malloc_r>
 8006e6a:	6020      	str	r0, [r4, #0]
 8006e6c:	6120      	str	r0, [r4, #16]
 8006e6e:	b928      	cbnz	r0, 8006e7c <_svfiprintf_r+0x30>
 8006e70:	230c      	movs	r3, #12
 8006e72:	f8c8 3000 	str.w	r3, [r8]
 8006e76:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7a:	e0c8      	b.n	800700e <_svfiprintf_r+0x1c2>
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	6163      	str	r3, [r4, #20]
 8006e80:	2300      	movs	r3, #0
 8006e82:	9309      	str	r3, [sp, #36]	; 0x24
 8006e84:	2320      	movs	r3, #32
 8006e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e8a:	2330      	movs	r3, #48	; 0x30
 8006e8c:	f04f 0b01 	mov.w	fp, #1
 8006e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e94:	9503      	str	r5, [sp, #12]
 8006e96:	4637      	mov	r7, r6
 8006e98:	463d      	mov	r5, r7
 8006e9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e9e:	b10b      	cbz	r3, 8006ea4 <_svfiprintf_r+0x58>
 8006ea0:	2b25      	cmp	r3, #37	; 0x25
 8006ea2:	d13e      	bne.n	8006f22 <_svfiprintf_r+0xd6>
 8006ea4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ea8:	d00b      	beq.n	8006ec2 <_svfiprintf_r+0x76>
 8006eaa:	4653      	mov	r3, sl
 8006eac:	4632      	mov	r2, r6
 8006eae:	4621      	mov	r1, r4
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	f7ff ff71 	bl	8006d98 <__ssputs_r>
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	f000 80a4 	beq.w	8007004 <_svfiprintf_r+0x1b8>
 8006ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ebe:	4453      	add	r3, sl
 8006ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec2:	783b      	ldrb	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 809d 	beq.w	8007004 <_svfiprintf_r+0x1b8>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed4:	9304      	str	r3, [sp, #16]
 8006ed6:	9307      	str	r3, [sp, #28]
 8006ed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006edc:	931a      	str	r3, [sp, #104]	; 0x68
 8006ede:	462f      	mov	r7, r5
 8006ee0:	2205      	movs	r2, #5
 8006ee2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006ee6:	4850      	ldr	r0, [pc, #320]	; (8007028 <_svfiprintf_r+0x1dc>)
 8006ee8:	f7ff fa90 	bl	800640c <memchr>
 8006eec:	9b04      	ldr	r3, [sp, #16]
 8006eee:	b9d0      	cbnz	r0, 8006f26 <_svfiprintf_r+0xda>
 8006ef0:	06d9      	lsls	r1, r3, #27
 8006ef2:	bf44      	itt	mi
 8006ef4:	2220      	movmi	r2, #32
 8006ef6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006efa:	071a      	lsls	r2, r3, #28
 8006efc:	bf44      	itt	mi
 8006efe:	222b      	movmi	r2, #43	; 0x2b
 8006f00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f04:	782a      	ldrb	r2, [r5, #0]
 8006f06:	2a2a      	cmp	r2, #42	; 0x2a
 8006f08:	d015      	beq.n	8006f36 <_svfiprintf_r+0xea>
 8006f0a:	462f      	mov	r7, r5
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	250a      	movs	r5, #10
 8006f10:	9a07      	ldr	r2, [sp, #28]
 8006f12:	4639      	mov	r1, r7
 8006f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f18:	3b30      	subs	r3, #48	; 0x30
 8006f1a:	2b09      	cmp	r3, #9
 8006f1c:	d94d      	bls.n	8006fba <_svfiprintf_r+0x16e>
 8006f1e:	b1b8      	cbz	r0, 8006f50 <_svfiprintf_r+0x104>
 8006f20:	e00f      	b.n	8006f42 <_svfiprintf_r+0xf6>
 8006f22:	462f      	mov	r7, r5
 8006f24:	e7b8      	b.n	8006e98 <_svfiprintf_r+0x4c>
 8006f26:	4a40      	ldr	r2, [pc, #256]	; (8007028 <_svfiprintf_r+0x1dc>)
 8006f28:	463d      	mov	r5, r7
 8006f2a:	1a80      	subs	r0, r0, r2
 8006f2c:	fa0b f000 	lsl.w	r0, fp, r0
 8006f30:	4318      	orrs	r0, r3
 8006f32:	9004      	str	r0, [sp, #16]
 8006f34:	e7d3      	b.n	8006ede <_svfiprintf_r+0x92>
 8006f36:	9a03      	ldr	r2, [sp, #12]
 8006f38:	1d11      	adds	r1, r2, #4
 8006f3a:	6812      	ldr	r2, [r2, #0]
 8006f3c:	9103      	str	r1, [sp, #12]
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	db01      	blt.n	8006f46 <_svfiprintf_r+0xfa>
 8006f42:	9207      	str	r2, [sp, #28]
 8006f44:	e004      	b.n	8006f50 <_svfiprintf_r+0x104>
 8006f46:	4252      	negs	r2, r2
 8006f48:	f043 0302 	orr.w	r3, r3, #2
 8006f4c:	9207      	str	r2, [sp, #28]
 8006f4e:	9304      	str	r3, [sp, #16]
 8006f50:	783b      	ldrb	r3, [r7, #0]
 8006f52:	2b2e      	cmp	r3, #46	; 0x2e
 8006f54:	d10c      	bne.n	8006f70 <_svfiprintf_r+0x124>
 8006f56:	787b      	ldrb	r3, [r7, #1]
 8006f58:	2b2a      	cmp	r3, #42	; 0x2a
 8006f5a:	d133      	bne.n	8006fc4 <_svfiprintf_r+0x178>
 8006f5c:	9b03      	ldr	r3, [sp, #12]
 8006f5e:	3702      	adds	r7, #2
 8006f60:	1d1a      	adds	r2, r3, #4
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	9203      	str	r2, [sp, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	bfb8      	it	lt
 8006f6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f6e:	9305      	str	r3, [sp, #20]
 8006f70:	4d2e      	ldr	r5, [pc, #184]	; (800702c <_svfiprintf_r+0x1e0>)
 8006f72:	2203      	movs	r2, #3
 8006f74:	7839      	ldrb	r1, [r7, #0]
 8006f76:	4628      	mov	r0, r5
 8006f78:	f7ff fa48 	bl	800640c <memchr>
 8006f7c:	b138      	cbz	r0, 8006f8e <_svfiprintf_r+0x142>
 8006f7e:	2340      	movs	r3, #64	; 0x40
 8006f80:	1b40      	subs	r0, r0, r5
 8006f82:	fa03 f000 	lsl.w	r0, r3, r0
 8006f86:	9b04      	ldr	r3, [sp, #16]
 8006f88:	3701      	adds	r7, #1
 8006f8a:	4303      	orrs	r3, r0
 8006f8c:	9304      	str	r3, [sp, #16]
 8006f8e:	7839      	ldrb	r1, [r7, #0]
 8006f90:	2206      	movs	r2, #6
 8006f92:	4827      	ldr	r0, [pc, #156]	; (8007030 <_svfiprintf_r+0x1e4>)
 8006f94:	1c7e      	adds	r6, r7, #1
 8006f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f9a:	f7ff fa37 	bl	800640c <memchr>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d038      	beq.n	8007014 <_svfiprintf_r+0x1c8>
 8006fa2:	4b24      	ldr	r3, [pc, #144]	; (8007034 <_svfiprintf_r+0x1e8>)
 8006fa4:	bb13      	cbnz	r3, 8006fec <_svfiprintf_r+0x1a0>
 8006fa6:	9b03      	ldr	r3, [sp, #12]
 8006fa8:	3307      	adds	r3, #7
 8006faa:	f023 0307 	bic.w	r3, r3, #7
 8006fae:	3308      	adds	r3, #8
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb4:	444b      	add	r3, r9
 8006fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb8:	e76d      	b.n	8006e96 <_svfiprintf_r+0x4a>
 8006fba:	fb05 3202 	mla	r2, r5, r2, r3
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	e7a6      	b.n	8006f12 <_svfiprintf_r+0xc6>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	250a      	movs	r5, #10
 8006fc8:	4619      	mov	r1, r3
 8006fca:	3701      	adds	r7, #1
 8006fcc:	9305      	str	r3, [sp, #20]
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fd4:	3a30      	subs	r2, #48	; 0x30
 8006fd6:	2a09      	cmp	r2, #9
 8006fd8:	d903      	bls.n	8006fe2 <_svfiprintf_r+0x196>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0c8      	beq.n	8006f70 <_svfiprintf_r+0x124>
 8006fde:	9105      	str	r1, [sp, #20]
 8006fe0:	e7c6      	b.n	8006f70 <_svfiprintf_r+0x124>
 8006fe2:	fb05 2101 	mla	r1, r5, r1, r2
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4607      	mov	r7, r0
 8006fea:	e7f0      	b.n	8006fce <_svfiprintf_r+0x182>
 8006fec:	ab03      	add	r3, sp, #12
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	4b11      	ldr	r3, [pc, #68]	; (8007038 <_svfiprintf_r+0x1ec>)
 8006ff4:	a904      	add	r1, sp, #16
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	f7fc fbec 	bl	80037d4 <_printf_float>
 8006ffc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007000:	4681      	mov	r9, r0
 8007002:	d1d6      	bne.n	8006fb2 <_svfiprintf_r+0x166>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	065b      	lsls	r3, r3, #25
 8007008:	f53f af35 	bmi.w	8006e76 <_svfiprintf_r+0x2a>
 800700c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800700e:	b01d      	add	sp, #116	; 0x74
 8007010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007014:	ab03      	add	r3, sp, #12
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4622      	mov	r2, r4
 800701a:	4b07      	ldr	r3, [pc, #28]	; (8007038 <_svfiprintf_r+0x1ec>)
 800701c:	a904      	add	r1, sp, #16
 800701e:	4640      	mov	r0, r8
 8007020:	f7fc fe84 	bl	8003d2c <_printf_i>
 8007024:	e7ea      	b.n	8006ffc <_svfiprintf_r+0x1b0>
 8007026:	bf00      	nop
 8007028:	08007b3c 	.word	0x08007b3c
 800702c:	08007b42 	.word	0x08007b42
 8007030:	08007b46 	.word	0x08007b46
 8007034:	080037d5 	.word	0x080037d5
 8007038:	08006d99 	.word	0x08006d99

0800703c <_sbrk_r>:
 800703c:	b538      	push	{r3, r4, r5, lr}
 800703e:	2300      	movs	r3, #0
 8007040:	4c05      	ldr	r4, [pc, #20]	; (8007058 <_sbrk_r+0x1c>)
 8007042:	4605      	mov	r5, r0
 8007044:	4608      	mov	r0, r1
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	f7fa fa06 	bl	8001458 <_sbrk>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_sbrk_r+0x1a>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	b103      	cbz	r3, 8007056 <_sbrk_r+0x1a>
 8007054:	602b      	str	r3, [r5, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	200002e0 	.word	0x200002e0

0800705c <strncmp>:
 800705c:	b510      	push	{r4, lr}
 800705e:	b16a      	cbz	r2, 800707c <strncmp+0x20>
 8007060:	3901      	subs	r1, #1
 8007062:	1884      	adds	r4, r0, r2
 8007064:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007068:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800706c:	4293      	cmp	r3, r2
 800706e:	d103      	bne.n	8007078 <strncmp+0x1c>
 8007070:	42a0      	cmp	r0, r4
 8007072:	d001      	beq.n	8007078 <strncmp+0x1c>
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f5      	bne.n	8007064 <strncmp+0x8>
 8007078:	1a98      	subs	r0, r3, r2
 800707a:	bd10      	pop	{r4, pc}
 800707c:	4610      	mov	r0, r2
 800707e:	e7fc      	b.n	800707a <strncmp+0x1e>

08007080 <__ascii_wctomb>:
 8007080:	b149      	cbz	r1, 8007096 <__ascii_wctomb+0x16>
 8007082:	2aff      	cmp	r2, #255	; 0xff
 8007084:	bf8b      	itete	hi
 8007086:	238a      	movhi	r3, #138	; 0x8a
 8007088:	700a      	strbls	r2, [r1, #0]
 800708a:	6003      	strhi	r3, [r0, #0]
 800708c:	2001      	movls	r0, #1
 800708e:	bf88      	it	hi
 8007090:	f04f 30ff 	movhi.w	r0, #4294967295
 8007094:	4770      	bx	lr
 8007096:	4608      	mov	r0, r1
 8007098:	4770      	bx	lr

0800709a <memmove>:
 800709a:	4288      	cmp	r0, r1
 800709c:	b510      	push	{r4, lr}
 800709e:	eb01 0302 	add.w	r3, r1, r2
 80070a2:	d807      	bhi.n	80070b4 <memmove+0x1a>
 80070a4:	1e42      	subs	r2, r0, #1
 80070a6:	4299      	cmp	r1, r3
 80070a8:	d00a      	beq.n	80070c0 <memmove+0x26>
 80070aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80070b2:	e7f8      	b.n	80070a6 <memmove+0xc>
 80070b4:	4283      	cmp	r3, r0
 80070b6:	d9f5      	bls.n	80070a4 <memmove+0xa>
 80070b8:	1881      	adds	r1, r0, r2
 80070ba:	1ad2      	subs	r2, r2, r3
 80070bc:	42d3      	cmn	r3, r2
 80070be:	d100      	bne.n	80070c2 <memmove+0x28>
 80070c0:	bd10      	pop	{r4, pc}
 80070c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80070ca:	e7f7      	b.n	80070bc <memmove+0x22>

080070cc <__malloc_lock>:
 80070cc:	4770      	bx	lr

080070ce <__malloc_unlock>:
 80070ce:	4770      	bx	lr

080070d0 <_realloc_r>:
 80070d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d2:	4607      	mov	r7, r0
 80070d4:	4614      	mov	r4, r2
 80070d6:	460e      	mov	r6, r1
 80070d8:	b921      	cbnz	r1, 80070e4 <_realloc_r+0x14>
 80070da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070de:	4611      	mov	r1, r2
 80070e0:	f7ff be00 	b.w	8006ce4 <_malloc_r>
 80070e4:	b922      	cbnz	r2, 80070f0 <_realloc_r+0x20>
 80070e6:	f7ff fdb1 	bl	8006c4c <_free_r>
 80070ea:	4625      	mov	r5, r4
 80070ec:	4628      	mov	r0, r5
 80070ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f0:	f000 f814 	bl	800711c <_malloc_usable_size_r>
 80070f4:	42a0      	cmp	r0, r4
 80070f6:	d20f      	bcs.n	8007118 <_realloc_r+0x48>
 80070f8:	4621      	mov	r1, r4
 80070fa:	4638      	mov	r0, r7
 80070fc:	f7ff fdf2 	bl	8006ce4 <_malloc_r>
 8007100:	4605      	mov	r5, r0
 8007102:	2800      	cmp	r0, #0
 8007104:	d0f2      	beq.n	80070ec <_realloc_r+0x1c>
 8007106:	4631      	mov	r1, r6
 8007108:	4622      	mov	r2, r4
 800710a:	f7ff f98d 	bl	8006428 <memcpy>
 800710e:	4631      	mov	r1, r6
 8007110:	4638      	mov	r0, r7
 8007112:	f7ff fd9b 	bl	8006c4c <_free_r>
 8007116:	e7e9      	b.n	80070ec <_realloc_r+0x1c>
 8007118:	4635      	mov	r5, r6
 800711a:	e7e7      	b.n	80070ec <_realloc_r+0x1c>

0800711c <_malloc_usable_size_r>:
 800711c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007120:	1f18      	subs	r0, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	bfbc      	itt	lt
 8007126:	580b      	ldrlt	r3, [r1, r0]
 8007128:	18c0      	addlt	r0, r0, r3
 800712a:	4770      	bx	lr

0800712c <_init>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr

08007138 <_fini>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	bf00      	nop
 800713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713e:	bc08      	pop	{r3}
 8007140:	469e      	mov	lr, r3
 8007142:	4770      	bx	lr
