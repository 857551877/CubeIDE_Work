
NUCLEO_FreeRTOS_LedAndOled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006380  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b38  08006490  08006490  00016490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc8  08006fc8  000205e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006fc8  08006fc8  000205e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fc8  08006fc8  000205e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e0  20000000  08006fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c4  200005e0  080075b0  000205e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016a4  080075b0  000216a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017624  00000000  00000000  00020609  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000341a  00000000  00000000  00037c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003b048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  0003c498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001750c  00000000  00000000  0003d770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000109c8  00000000  00000000  00054c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d14a  00000000  00000000  00065644  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e278e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d44  00000000  00000000  000e280c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200005e0 	.word	0x200005e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006478 	.word	0x08006478

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200005e4 	.word	0x200005e4
 800014c:	08006478 	.word	0x08006478

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <vApplicationGetIdleTaskMemory+0x28>)
 8000a98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	200005fc 	.word	0x200005fc
 8000ab4:	20000650 	.word	0x20000650

08000ab8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b092      	sub	sp, #72	; 0x48
 8000abc:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_FREERTOS_Init+0x74>)
 8000ac0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000aca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fc87 	bl	80033e4 <osMessageCreate>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_FREERTOS_Init+0x78>)
 8000ada:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_FREERTOS_Init+0x7c>)
 8000ade:	f107 041c 	add.w	r4, r7, #28
 8000ae2:	461d      	mov	r5, r3
 8000ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fc14 	bl	8003324 <osThreadCreate>
 8000afc:	4602      	mov	r2, r0
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_FREERTOS_Init+0x80>)
 8000b00:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 256);
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_FREERTOS_Init+0x84>)
 8000b04:	463c      	mov	r4, r7
 8000b06:	461d      	mov	r5, r3
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000b14:	463b      	mov	r3, r7
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 fc03 	bl	8003324 <osThreadCreate>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_FREERTOS_Init+0x88>)
 8000b22:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b24:	bf00      	nop
 8000b26:	3748      	adds	r7, #72	; 0x48
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b2c:	08006490 	.word	0x08006490
 8000b30:	200015c4 	.word	0x200015c4
 8000b34:	080064ac 	.word	0x080064ac
 8000b38:	200015bc 	.word	0x200015bc
 8000b3c:	080064d4 	.word	0x080064d4
 8000b40:	200015c0 	.word	0x200015c0

08000b44 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	 // 		 OLED_ShowFlort(0, 2, (float)i, 16);
	  //	 }
	  //OLED_ShowNum(0, 2, 6, 2, 16);
	  //OLED_ShowFlort(0, 2, (float)5, 16);
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2120      	movs	r1, #32
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <StartDefaultTask+0x30>)
 8000b52:	f000 fff1 	bl	8001b38 <HAL_GPIO_WritePin>
 	 osDelay(500);
 8000b56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5a:	f002 fc2f 	bl	80033bc <osDelay>
 	 HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2120      	movs	r1, #32
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <StartDefaultTask+0x30>)
 8000b64:	f000 ffe8 	bl	8001b38 <HAL_GPIO_WritePin>
 	    osDelay(500);
 8000b68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b6c:	f002 fc26 	bl	80033bc <osDelay>
 	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b70:	e7ec      	b.n	8000b4c <StartDefaultTask+0x8>
 8000b72:	bf00      	nop
 8000b74:	40010800 	.word	0x40010800

08000b78 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	//OLED_DrawBMP(0, 0, 128, 8, BMP3);
	//OLED_Init();
	OLED_DrawBMP(0, 0, 128, 8, BMP3);
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <StartTask02+0x3c>)
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2308      	movs	r3, #8
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 fc88 	bl	80014a0 <OLED_DrawBMP>
  /* Infinite loop */
  for(;;)
  {

	 // OLED_DrawBMP(0, 0, 128, 8, BMP3);
	  for(uint8_t i = 0; i < 200; i++) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e00a      	b.n	8000bac <StartTask02+0x34>
		  OLED_ShowNum(0, 2, i, 3, 16);
 8000b96:	7bfa      	ldrb	r2, [r7, #15]
 8000b98:	2310      	movs	r3, #16
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f000 fc19 	bl	80013d8 <OLED_ShowNum>
	  for(uint8_t i = 0; i < 200; i++) {
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	2bc7      	cmp	r3, #199	; 0xc7
 8000bb0:	d9f1      	bls.n	8000b96 <StartTask02+0x1e>
 8000bb2:	e7ed      	b.n	8000b90 <StartTask02+0x18>
 8000bb4:	20000000 	.word	0x20000000

08000bb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a2c      	ldr	r2, [pc, #176]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000bea:	f043 0320 	orr.w	r3, r3, #32
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0320 	and.w	r3, r3, #32
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_GPIO_Init+0xcc>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0308 	and.w	r3, r3, #8
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2120      	movs	r1, #32
 8000c30:	4815      	ldr	r0, [pc, #84]	; (8000c88 <MX_GPIO_Init+0xd0>)
 8000c32:	f000 ff81 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_GPIO_Init+0xd4>)
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4811      	ldr	r0, [pc, #68]	; (8000c90 <MX_GPIO_Init+0xd8>)
 8000c4c:	f000 fe1a 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c50:	2320      	movs	r3, #32
 8000c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	4808      	ldr	r0, [pc, #32]	; (8000c88 <MX_GPIO_Init+0xd0>)
 8000c68:	f000 fe0c 	bl	8001884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2105      	movs	r1, #5
 8000c70:	2028      	movs	r0, #40	; 0x28
 8000c72:	f000 fddc 	bl	800182e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c76:	2028      	movs	r0, #40	; 0x28
 8000c78:	f000 fdf5 	bl	8001866 <HAL_NVIC_EnableIRQ>

}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010800 	.word	0x40010800
 8000c8c:	10110000 	.word	0x10110000
 8000c90:	40011000 	.word	0x40011000

08000c94 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_I2C2_Init+0x50>)
 8000c9a:	4a13      	ldr	r2, [pc, #76]	; (8000ce8 <MX_I2C2_Init+0x54>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_I2C2_Init+0x50>)
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_I2C2_Init+0x58>)
 8000ca2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_I2C2_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_I2C2_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_I2C2_Init+0x50>)
 8000cb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_I2C2_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_I2C2_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_I2C2_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_I2C2_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_I2C2_Init+0x50>)
 8000cd2:	f000 ff6b 	bl	8001bac <HAL_I2C_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cdc:	f000 f8ae 	bl	8000e3c <Error_Handler>
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200015c8 	.word	0x200015c8
 8000ce8:	40005800 	.word	0x40005800
 8000cec:	000186a0 	.word	0x000186a0

08000cf0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <HAL_I2C_MspInit+0x74>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d124      	bne.n	8000d5a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_I2C_MspInit+0x78>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <HAL_I2C_MspInit+0x78>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_I2C_MspInit+0x78>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2e:	2312      	movs	r3, #18
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <HAL_I2C_MspInit+0x7c>)
 8000d3e:	f000 fda1 	bl	8001884 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_I2C_MspInit+0x78>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_I2C_MspInit+0x78>)
 8000d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_I2C_MspInit+0x78>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40005800 	.word	0x40005800
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010c00 	.word	0x40010c00

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f000 fc52 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f80d 	bl	8000d96 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f7ff ff1c 	bl	8000bb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d80:	f000 f97a 	bl	8001078 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000d84:	f7ff ff86 	bl	8000c94 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000d88:	f000 fbd2 	bl	8001530 <OLED_Init>
  //OLED_ShowFlort(0, 2, (float)5, 16);
  //OLED_ShowFlort(0, 2, (float)3, 16);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000d8c:	f7ff fe94 	bl	8000ab8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000d90:	f002 fac1 	bl	8003316 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <main+0x24>

08000d96 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b090      	sub	sp, #64	; 0x40
 8000d9a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9c:	f107 0318 	add.w	r3, r7, #24
 8000da0:	2228      	movs	r2, #40	; 0x28
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fe52 	bl	8004a4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dcc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fb1a 	bl	8002410 <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000de2:	f000 f82b 	bl	8000e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	2302      	movs	r3, #2
 8000dec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fd85 	bl	8002910 <HAL_RCC_ClockConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e0c:	f000 f816 	bl	8000e3c <Error_Handler>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3740      	adds	r7, #64	; 0x40
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e2a:	f000 fc0d 	bl	8001648 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40012c00 	.word	0x40012c00

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x68>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	210f      	movs	r1, #15
 8000e82:	f06f 0001 	mvn.w	r0, #1
 8000e86:	f000 fcd2 	bl	800182e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_MspInit+0x6c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_MspInit+0x6c>)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010000 	.word	0x40010000

08000eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2019      	movs	r0, #25
 8000ece:	f000 fcae 	bl	800182e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000ed2:	2019      	movs	r0, #25
 8000ed4:	f000 fcc7 	bl	8001866 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <HAL_InitTick+0x9c>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	; (8000f54 <HAL_InitTick+0x9c>)
 8000ede:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <HAL_InitTick+0x9c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef0:	f107 0210 	add.w	r2, r7, #16
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fe86 	bl	8002c0c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f00:	f001 fe70 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 8000f04:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <HAL_InitTick+0xa0>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0c9b      	lsrs	r3, r3, #18
 8000f10:	3b01      	subs	r3, #1
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <HAL_InitTick+0xa8>)
 8000f18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f36:	f001 feb7 	bl	8002ca8 <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d104      	bne.n	8000f4a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <HAL_InitTick+0xa4>)
 8000f42:	f001 fee5 	bl	8002d10 <HAL_TIM_Base_Start_IT>
 8000f46:	4603      	mov	r3, r0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3730      	adds	r7, #48	; 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	2000161c 	.word	0x2000161c
 8000f60:	40012c00 	.word	0x40012c00

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <HardFault_Handler+0x4>

08000f76 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <BusFault_Handler+0x4>

08000f82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <UsageFault_Handler+0x4>

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM1_UP_IRQHandler+0x10>)
 8000f9a:	f001 fedc 	bl	8002d56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000161c 	.word	0x2000161c

08000fa8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fb0:	f000 fdda 	bl	8001b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <_sbrk+0x50>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x16>
		heap_end = &end;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <_sbrk+0x50>)
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <_sbrk+0x54>)
 8000fcc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <_sbrk+0x50>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <_sbrk+0x50>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	466a      	mov	r2, sp
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d907      	bls.n	8000ff2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fe2:	f003 fcff 	bl	80049e4 <__errno>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	230c      	movs	r3, #12
 8000fea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	e006      	b.n	8001000 <_sbrk+0x48>
	}

	heap_end += incr;
 8000ff2:	4b05      	ldr	r3, [pc, #20]	; (8001008 <_sbrk+0x50>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a03      	ldr	r2, [pc, #12]	; (8001008 <_sbrk+0x50>)
 8000ffc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000850 	.word	0x20000850
 800100c:	200016a8 	.word	0x200016a8

08001010 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <SystemInit+0x5c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <SystemInit+0x5c>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <SystemInit+0x5c>)
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	4911      	ldr	r1, [pc, #68]	; (800106c <SystemInit+0x5c>)
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <SystemInit+0x60>)
 8001028:	4013      	ands	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <SystemInit+0x5c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <SystemInit+0x5c>)
 8001032:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <SystemInit+0x5c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <SystemInit+0x5c>)
 8001042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001046:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <SystemInit+0x5c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <SystemInit+0x5c>)
 800104e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001052:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SystemInit+0x5c>)
 8001056:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800105a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SystemInit+0x64>)
 800105e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001062:	609a      	str	r2, [r3, #8]
#endif 
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000
 8001070:	f8ff0000 	.word	0xf8ff0000
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_USART2_UART_Init+0x50>)
 8001080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_USART2_UART_Init+0x4c>)
 80010b0:	f001 fff2 	bl	8003098 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ba:	f7ff febf 	bl	8000e3c <Error_Handler>
  }

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000165c 	.word	0x2000165c
 80010c8:	40004400 	.word	0x40004400

080010cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <HAL_UART_MspInit+0x70>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d123      	bne.n	8001134 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_UART_MspInit+0x74>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	4a13      	ldr	r2, [pc, #76]	; (8001140 <HAL_UART_MspInit+0x74>)
 80010f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f6:	61d3      	str	r3, [r2, #28]
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_UART_MspInit+0x74>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_UART_MspInit+0x74>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <HAL_UART_MspInit+0x74>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_UART_MspInit+0x74>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800111c:	230c      	movs	r3, #12
 800111e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2302      	movs	r3, #2
 8001126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <HAL_UART_MspInit+0x78>)
 8001130:	f000 fba8 	bl	8001884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40004400 	.word	0x40004400
 8001140:	40021000 	.word	0x40021000
 8001144:	40010800 	.word	0x40010800

08001148 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001148:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800114a:	e003      	b.n	8001154 <LoopCopyDataInit>

0800114c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800114e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001150:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001152:	3104      	adds	r1, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001154:	480a      	ldr	r0, [pc, #40]	; (8001180 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001158:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800115a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800115c:	d3f6      	bcc.n	800114c <CopyDataInit>
  ldr r2, =_sbss
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001160:	e002      	b.n	8001168 <LoopFillZerobss>

08001162 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001164:	f842 3b04 	str.w	r3, [r2], #4

08001168 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800116a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800116c:	d3f9      	bcc.n	8001162 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800116e:	f7ff ff4f 	bl	8001010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001172:	f003 fc3d 	bl	80049f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001176:	f7ff fdfb 	bl	8000d70 <main>
  bx lr
 800117a:	4770      	bx	lr
  ldr r3, =_sidata
 800117c:	08006fd0 	.word	0x08006fd0
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001184:	200005e0 	.word	0x200005e0
  ldr r2, =_sbss
 8001188:	200005e0 	.word	0x200005e0
  ldr r3, = _ebss
 800118c:	200016a4 	.word	0x200016a4

08001190 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_2_IRQHandler>
	...

08001194 <Write_IIC_Cmddat>:

extern I2C_HandleTypeDef hi2c1;
extern I2C_HandleTypeDef hi2c2;

void Write_IIC_Cmddat(unsigned char IIC_Data,unsigned char cmddat)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af04      	add	r7, sp, #16
 800119a:	4603      	mov	r3, r0
 800119c:	460a      	mov	r2, r1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	4613      	mov	r3, r2
 80011a2:	71bb      	strb	r3, [r7, #6]
	//HAL_StatusTypeDef i = HAL_ERROR;
	HAL_I2C_Mem_Write(&hi2c2, oledaddress, cmddat, I2C_MEMADD_SIZE_8BIT, &IIC_Data, 1, 100);
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	2364      	movs	r3, #100	; 0x64
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	2301      	movs	r3, #1
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	2178      	movs	r1, #120	; 0x78
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <Write_IIC_Cmddat+0x34>)
 80011ba:	f000 fe1f 	bl	8001dfc <HAL_I2C_Mem_Write>
	//i = HAL_ERROR;
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200015c8 	.word	0x200015c8

080011cc <OLED_WR_Byte>:


void OLED_WR_Byte(unsigned char dat,unsigned char cmd)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
	if(cmd)
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <OLED_WR_Byte+0x22>
			{
		Write_IIC_Cmddat (dat, OLED_DAT_ADDRESS );
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2140      	movs	r1, #64	; 0x40
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ffd4 	bl	8001194 <Write_IIC_Cmddat>
	else {
		Write_IIC_Cmddat (dat, OLED_CMD_ADDRESS);
		
	}
	
}
 80011ec:	e004      	b.n	80011f8 <OLED_WR_Byte+0x2c>
		Write_IIC_Cmddat (dat, OLED_CMD_ADDRESS);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ffce 	bl	8001194 <Write_IIC_Cmddat>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <OLED_Set_Pos>:




	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	460a      	mov	r2, r1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	4613      	mov	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	3b50      	subs	r3, #80	; 0x50
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ffd7 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ffcd 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f),OLED_CMD); 
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ffc5 	bl	80011cc <OLED_WR_Byte>
}   	  
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
	unsigned char i,n;
	for(i=0;i<8;i++)  
 8001250:	2300      	movs	r3, #0
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	e01f      	b.n	8001296 <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	3b50      	subs	r3, #80	; 0x50
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ffb4 	bl	80011cc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 8001264:	2100      	movs	r1, #0
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff ffb0 	bl	80011cc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 800126c:	2100      	movs	r1, #0
 800126e:	2010      	movs	r0, #16
 8001270:	f7ff ffac 	bl	80011cc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8001274:	2300      	movs	r3, #0
 8001276:	71bb      	strb	r3, [r7, #6]
 8001278:	e006      	b.n	8001288 <OLED_Clear+0x3e>
 800127a:	2101      	movs	r1, #1
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff ffa5 	bl	80011cc <OLED_WR_Byte>
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	3301      	adds	r3, #1
 8001286:	71bb      	strb	r3, [r7, #6]
 8001288:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800128c:	2b00      	cmp	r3, #0
 800128e:	daf4      	bge.n	800127a <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	3301      	adds	r3, #1
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b07      	cmp	r3, #7
 800129a:	d9dc      	bls.n	8001256 <OLED_Clear+0xc>
	} //������ʾ
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,������ʾ;1,������ʾ				 
//size:ѡ������ 16/12 
void OLED_ShowChar(unsigned char x,unsigned char y,unsigned char chr,unsigned char Char_Size)
{      	
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	4603      	mov	r3, r0
 80012b8:	71bb      	strb	r3, [r7, #6]
 80012ba:	460b      	mov	r3, r1
 80012bc:	717b      	strb	r3, [r7, #5]
 80012be:	4613      	mov	r3, r2
 80012c0:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 80012c2:	2300      	movs	r3, #0
 80012c4:	73bb      	strb	r3, [r7, #14]
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 80012ca:	797b      	ldrb	r3, [r7, #5]
 80012cc:	3b20      	subs	r3, #32
 80012ce:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da04      	bge.n	80012e2 <OLED_ShowChar+0x3e>
 80012d8:	2300      	movs	r3, #0
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	3302      	adds	r3, #2
 80012e0:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 80012e2:	793b      	ldrb	r3, [r7, #4]
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d135      	bne.n	8001354 <OLED_ShowChar+0xb0>
			{
			OLED_Set_Pos(x,y);	
 80012e8:	79ba      	ldrb	r2, [r7, #6]
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff86 	bl	8001200 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e00c      	b.n	8001314 <OLED_ShowChar+0x70>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	011a      	lsls	r2, r3, #4
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	4413      	add	r3, r2
 8001302:	4a25      	ldr	r2, [pc, #148]	; (8001398 <OLED_ShowChar+0xf4>)
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	2101      	movs	r1, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5f 	bl	80011cc <OLED_WR_Byte>
			for(i=0;i<8;i++)
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	3301      	adds	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2b07      	cmp	r3, #7
 8001318:	d9ef      	bls.n	80012fa <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 800131a:	79bb      	ldrb	r3, [r7, #6]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff6b 	bl	8001200 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e00d      	b.n	800134c <OLED_ShowChar+0xa8>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	011a      	lsls	r2, r3, #4
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	4413      	add	r3, r2
 8001338:	3308      	adds	r3, #8
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <OLED_ShowChar+0xf4>)
 800133c:	5cd3      	ldrb	r3, [r2, r3]
 800133e:	2101      	movs	r1, #1
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff43 	bl	80011cc <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	3301      	adds	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b07      	cmp	r3, #7
 8001350:	d9ee      	bls.n	8001330 <OLED_ShowChar+0x8c>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 8001352:	e01c      	b.n	800138e <OLED_ShowChar+0xea>
				OLED_Set_Pos(x,y);
 8001354:	79ba      	ldrb	r2, [r7, #6]
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff50 	bl	8001200 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e010      	b.n	8001388 <OLED_ShowChar+0xe4>
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 8001366:	7bba      	ldrb	r2, [r7, #14]
 8001368:	7bf9      	ldrb	r1, [r7, #15]
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <OLED_ShowChar+0xf8>)
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4403      	add	r3, r0
 8001376:	440b      	add	r3, r1
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2101      	movs	r1, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff25 	bl	80011cc <OLED_WR_Byte>
				for(i=0;i<6;i++)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	3301      	adds	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b05      	cmp	r3, #5
 800138c:	d9eb      	bls.n	8001366 <OLED_ShowChar+0xc2>
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	bf00      	nop
 8001398:	0800674c 	.word	0x0800674c
 800139c:	08006524 	.word	0x08006524

080013a0 <oled_pow>:
//m^n����
unsigned long oled_pow(unsigned char m,unsigned char n)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	460a      	mov	r2, r1
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	4613      	mov	r3, r2
 80013ae:	71bb      	strb	r3, [r7, #6]
	unsigned long result=1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 80013b4:	e004      	b.n	80013c0 <oled_pow+0x20>
 80013b6:	79fa      	ldrb	r2, [r7, #7]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	1e5a      	subs	r2, r3, #1
 80013c4:	71ba      	strb	r2, [r7, #6]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f5      	bne.n	80013b6 <oled_pow+0x16>
	return result;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}				  
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
	...

080013d8 <OLED_ShowNum>:
//len :���ֵ�λ��
//size:�����С
//mode:ģʽ	0,���ģʽ;1,����ģʽ
//num:��ֵ(0~4294967295);	 		  
void OLED_ShowNum(unsigned char x,unsigned char y,unsigned long num,unsigned char len,unsigned char size2)
{         	
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	603a      	str	r2, [r7, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	460b      	mov	r3, r1
 80013e8:	71bb      	strb	r3, [r7, #6]
 80013ea:	4613      	mov	r3, r2
 80013ec:	717b      	strb	r3, [r7, #5]
	unsigned char t,temp;
	unsigned char enshow=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
 80013f6:	e049      	b.n	800148c <OLED_ShowNum+0xb4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 80013f8:	797a      	ldrb	r2, [r7, #5]
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	3b01      	subs	r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	4619      	mov	r1, r3
 8001406:	200a      	movs	r0, #10
 8001408:	f7ff ffca 	bl	80013a0 <oled_pow>
 800140c:	4602      	mov	r2, r0
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	fbb3 f1f2 	udiv	r1, r3, r2
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <OLED_ShowNum+0xc4>)
 8001416:	fba3 2301 	umull	r2, r3, r3, r1
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	1aca      	subs	r2, r1, r3
 8001426:	4613      	mov	r3, r2
 8001428:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d119      	bne.n	8001464 <OLED_ShowNum+0x8c>
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3b01      	subs	r3, #1
 8001436:	429a      	cmp	r2, r3
 8001438:	da14      	bge.n	8001464 <OLED_ShowNum+0x8c>
		{
			if(temp==0)
 800143a:	7b7b      	ldrb	r3, [r7, #13]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10f      	bne.n	8001460 <OLED_ShowNum+0x88>
			{
				OLED_ShowChar(x+(size2/2)*t,y,' ',size2);
 8001440:	7e3b      	ldrb	r3, [r7, #24]
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	b2da      	uxtb	r2, r3
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4413      	add	r3, r2
 8001452:	b2d8      	uxtb	r0, r3
 8001454:	7e3b      	ldrb	r3, [r7, #24]
 8001456:	79b9      	ldrb	r1, [r7, #6]
 8001458:	2220      	movs	r2, #32
 800145a:	f7ff ff23 	bl	80012a4 <OLED_ShowChar>
				continue;
 800145e:	e012      	b.n	8001486 <OLED_ShowNum+0xae>
			}else enshow=1; 
 8001460:	2301      	movs	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
 8001464:	7e3b      	ldrb	r3, [r7, #24]
 8001466:	085b      	lsrs	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	fb02 f303 	mul.w	r3, r2, r3
 8001470:	b2da      	uxtb	r2, r3
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	4413      	add	r3, r2
 8001476:	b2d8      	uxtb	r0, r3
 8001478:	7b7b      	ldrb	r3, [r7, #13]
 800147a:	3330      	adds	r3, #48	; 0x30
 800147c:	b2da      	uxtb	r2, r3
 800147e:	7e3b      	ldrb	r3, [r7, #24]
 8001480:	79b9      	ldrb	r1, [r7, #6]
 8001482:	f7ff ff0f 	bl	80012a4 <OLED_ShowChar>
	for(t=0;t<len;t++)
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	3301      	adds	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	797b      	ldrb	r3, [r7, #5]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3b1      	bcc.n	80013f8 <OLED_ShowNum+0x20>
	}
} 
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	cccccccd 	.word	0xcccccccd

080014a0 <OLED_DrawBMP>:
				adder+=1;
      }					
}
/***********������������ʾ��ʾBMPͼƬ128��64��ʼ������(x,y),x�ķ�Χ0��127��yΪҳ�ķ�Χ0��7*****************/
void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[])
{ 	
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4604      	mov	r4, r0
 80014a8:	4608      	mov	r0, r1
 80014aa:	4611      	mov	r1, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	4623      	mov	r3, r4
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	4603      	mov	r3, r0
 80014b4:	71bb      	strb	r3, [r7, #6]
 80014b6:	460b      	mov	r3, r1
 80014b8:	717b      	strb	r3, [r7, #5]
 80014ba:	4613      	mov	r3, r2
 80014bc:	713b      	strb	r3, [r7, #4]
 unsigned int j=0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 unsigned char x,y;
  
  if(y1%8==0) y=y1/8;      
 80014c2:	793b      	ldrb	r3, [r7, #4]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d103      	bne.n	80014d6 <OLED_DrawBMP+0x36>
 80014ce:	793b      	ldrb	r3, [r7, #4]
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	72bb      	strb	r3, [r7, #10]
 80014d4:	e004      	b.n	80014e0 <OLED_DrawBMP+0x40>
  else y=y1/8+1;
 80014d6:	793b      	ldrb	r3, [r7, #4]
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3301      	adds	r3, #1
 80014de:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	72bb      	strb	r3, [r7, #10]
 80014e4:	e01c      	b.n	8001520 <OLED_DrawBMP+0x80>
	{
		OLED_Set_Pos(x0,y);
 80014e6:	7aba      	ldrb	r2, [r7, #10]
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fe87 	bl	8001200 <OLED_Set_Pos>
    for(x=x0;x<x1;x++)
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	72fb      	strb	r3, [r7, #11]
 80014f6:	e00c      	b.n	8001512 <OLED_DrawBMP+0x72>
	    {      
	    	OLED_WR_Byte(BMP[j++],OLED_DATA);	    	
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60fa      	str	r2, [r7, #12]
 80014fe:	6a3a      	ldr	r2, [r7, #32]
 8001500:	4413      	add	r3, r2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fe60 	bl	80011cc <OLED_WR_Byte>
    for(x=x0;x<x1;x++)
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	3301      	adds	r3, #1
 8001510:	72fb      	strb	r3, [r7, #11]
 8001512:	7afa      	ldrb	r2, [r7, #11]
 8001514:	797b      	ldrb	r3, [r7, #5]
 8001516:	429a      	cmp	r2, r3
 8001518:	d3ee      	bcc.n	80014f8 <OLED_DrawBMP+0x58>
	for(y=y0;y<y1;y++)
 800151a:	7abb      	ldrb	r3, [r7, #10]
 800151c:	3301      	adds	r3, #1
 800151e:	72bb      	strb	r3, [r7, #10]
 8001520:	7aba      	ldrb	r2, [r7, #10]
 8001522:	793b      	ldrb	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3de      	bcc.n	80014e6 <OLED_DrawBMP+0x46>
	    }
	}
} 
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	bd90      	pop	{r4, r7, pc}

08001530 <OLED_Init>:

//��ʼ��SSD1306					    
void OLED_Init(void)
{ 	
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

	HAL_Delay (100);					//看别人延时这么长时间
 8001534:	2064      	movs	r0, #100	; 0x64
 8001536:	f000 f8a3 	bl	8001680 <HAL_Delay>
	OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 800153a:	2100      	movs	r1, #0
 800153c:	20ae      	movs	r0, #174	; 0xae
 800153e:	f7ff fe45 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8001542:	2100      	movs	r1, #0
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fe41 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 800154a:	2100      	movs	r1, #0
 800154c:	2010      	movs	r0, #16
 800154e:	f7ff fe3d 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 8001552:	2100      	movs	r1, #0
 8001554:	2040      	movs	r0, #64	; 0x40
 8001556:	f7ff fe39 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 800155a:	2100      	movs	r1, #0
 800155c:	20b0      	movs	r0, #176	; 0xb0
 800155e:	f7ff fe35 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); // contract control
 8001562:	2100      	movs	r1, #0
 8001564:	2081      	movs	r0, #129	; 0x81
 8001566:	f7ff fe31 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 800156a:	2100      	movs	r1, #0
 800156c:	20ff      	movs	r0, #255	; 0xff
 800156e:	f7ff fe2d 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 8001572:	2100      	movs	r1, #0
 8001574:	20a1      	movs	r0, #161	; 0xa1
 8001576:	f7ff fe29 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 800157a:	2100      	movs	r1, #0
 800157c:	20a6      	movs	r0, #166	; 0xa6
 800157e:	f7ff fe25 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8001582:	2100      	movs	r1, #0
 8001584:	20a8      	movs	r0, #168	; 0xa8
 8001586:	f7ff fe21 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 800158a:	2100      	movs	r1, #0
 800158c:	203f      	movs	r0, #63	; 0x3f
 800158e:	f7ff fe1d 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 8001592:	2100      	movs	r1, #0
 8001594:	20c8      	movs	r0, #200	; 0xc8
 8001596:	f7ff fe19 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 800159a:	2100      	movs	r1, #0
 800159c:	20d3      	movs	r0, #211	; 0xd3
 800159e:	f7ff fe15 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//
 80015a2:	2100      	movs	r1, #0
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff fe11 	bl	80011cc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 80015aa:	2100      	movs	r1, #0
 80015ac:	20d5      	movs	r0, #213	; 0xd5
 80015ae:	f7ff fe0d 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//
 80015b2:	2100      	movs	r1, #0
 80015b4:	2080      	movs	r0, #128	; 0x80
 80015b6:	f7ff fe09 	bl	80011cc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 80015ba:	2100      	movs	r1, #0
 80015bc:	20d8      	movs	r0, #216	; 0xd8
 80015be:	f7ff fe05 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x05,OLED_CMD);//
 80015c2:	2100      	movs	r1, #0
 80015c4:	2005      	movs	r0, #5
 80015c6:	f7ff fe01 	bl	80011cc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 80015ca:	2100      	movs	r1, #0
 80015cc:	20d9      	movs	r0, #217	; 0xd9
 80015ce:	f7ff fdfd 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//
 80015d2:	2100      	movs	r1, #0
 80015d4:	20f1      	movs	r0, #241	; 0xf1
 80015d6:	f7ff fdf9 	bl	80011cc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 80015da:	2100      	movs	r1, #0
 80015dc:	20da      	movs	r0, #218	; 0xda
 80015de:	f7ff fdf5 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);//
 80015e2:	2100      	movs	r1, #0
 80015e4:	2012      	movs	r0, #18
 80015e6:	f7ff fdf1 	bl	80011cc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 80015ea:	2100      	movs	r1, #0
 80015ec:	20db      	movs	r0, #219	; 0xdb
 80015ee:	f7ff fded 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//
 80015f2:	2100      	movs	r1, #0
 80015f4:	2030      	movs	r0, #48	; 0x30
 80015f6:	f7ff fde9 	bl	80011cc <OLED_WR_Byte>
	
	OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 80015fa:	2100      	movs	r1, #0
 80015fc:	208d      	movs	r0, #141	; 0x8d
 80015fe:	f7ff fde5 	bl	80011cc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//
 8001602:	2100      	movs	r1, #0
 8001604:	2014      	movs	r0, #20
 8001606:	f7ff fde1 	bl	80011cc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 800160a:	2100      	movs	r1, #0
 800160c:	20af      	movs	r0, #175	; 0xaf
 800160e:	f7ff fddd 	bl	80011cc <OLED_WR_Byte>


	OLED_Clear();
 8001612:	f7ff fe1a 	bl	800124a <OLED_Clear>
}  
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_Init+0x28>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_Init+0x28>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f8f3 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff fc40 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fc06 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40022000 	.word	0x40022000

08001648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_IncTick+0x1c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_IncTick+0x20>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <HAL_IncTick+0x20>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000408 	.word	0x20000408
 8001668:	2000169c 	.word	0x2000169c

0800166c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b02      	ldr	r3, [pc, #8]	; (800167c <HAL_GetTick+0x10>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	2000169c 	.word	0x2000169c

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff fff0 	bl	800166c <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_Delay+0x40>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffe0 	bl	800166c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000408 	.word	0x20000408

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4906      	ldr	r1, [pc, #24]	; (800175c <__NVIC_EnableIRQ+0x34>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff4f 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff64 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ffb2 	bl	80017b4 <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff81 	bl	8001760 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff57 	bl	8001728 <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b08b      	sub	sp, #44	; 0x2c
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e127      	b.n	8001ae8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001898:	2201      	movs	r2, #1
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f040 8116 	bne.w	8001ae2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d034      	beq.n	8001928 <HAL_GPIO_Init+0xa4>
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d80d      	bhi.n	80018de <HAL_GPIO_Init+0x5a>
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d02b      	beq.n	800191e <HAL_GPIO_Init+0x9a>
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d804      	bhi.n	80018d4 <HAL_GPIO_Init+0x50>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d031      	beq.n	8001932 <HAL_GPIO_Init+0xae>
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d01c      	beq.n	800190c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d2:	e048      	b.n	8001966 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d043      	beq.n	8001960 <HAL_GPIO_Init+0xdc>
 80018d8:	2b11      	cmp	r3, #17
 80018da:	d01b      	beq.n	8001914 <HAL_GPIO_Init+0x90>
          break;
 80018dc:	e043      	b.n	8001966 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018de:	4a89      	ldr	r2, [pc, #548]	; (8001b04 <HAL_GPIO_Init+0x280>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d026      	beq.n	8001932 <HAL_GPIO_Init+0xae>
 80018e4:	4a87      	ldr	r2, [pc, #540]	; (8001b04 <HAL_GPIO_Init+0x280>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d806      	bhi.n	80018f8 <HAL_GPIO_Init+0x74>
 80018ea:	4a87      	ldr	r2, [pc, #540]	; (8001b08 <HAL_GPIO_Init+0x284>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d020      	beq.n	8001932 <HAL_GPIO_Init+0xae>
 80018f0:	4a86      	ldr	r2, [pc, #536]	; (8001b0c <HAL_GPIO_Init+0x288>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01d      	beq.n	8001932 <HAL_GPIO_Init+0xae>
          break;
 80018f6:	e036      	b.n	8001966 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018f8:	4a85      	ldr	r2, [pc, #532]	; (8001b10 <HAL_GPIO_Init+0x28c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0xae>
 80018fe:	4a85      	ldr	r2, [pc, #532]	; (8001b14 <HAL_GPIO_Init+0x290>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d016      	beq.n	8001932 <HAL_GPIO_Init+0xae>
 8001904:	4a84      	ldr	r2, [pc, #528]	; (8001b18 <HAL_GPIO_Init+0x294>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0xae>
          break;
 800190a:	e02c      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e028      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	3304      	adds	r3, #4
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e023      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	3308      	adds	r3, #8
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e01e      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	330c      	adds	r3, #12
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e019      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193a:	2304      	movs	r3, #4
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e012      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001948:	2308      	movs	r3, #8
 800194a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	611a      	str	r2, [r3, #16]
          break;
 8001952:	e008      	b.n	8001966 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	615a      	str	r2, [r3, #20]
          break;
 800195e:	e002      	b.n	8001966 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2bff      	cmp	r3, #255	; 0xff
 800196a:	d801      	bhi.n	8001970 <HAL_GPIO_Init+0xec>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	e001      	b.n	8001974 <HAL_GPIO_Init+0xf0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2bff      	cmp	r3, #255	; 0xff
 800197a:	d802      	bhi.n	8001982 <HAL_GPIO_Init+0xfe>
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x104>
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	3b08      	subs	r3, #8
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	210f      	movs	r1, #15
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	401a      	ands	r2, r3
 800199a:	6a39      	ldr	r1, [r7, #32]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	431a      	orrs	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8096 	beq.w	8001ae2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b6:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <HAL_GPIO_Init+0x298>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_GPIO_Init+0x298>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6193      	str	r3, [r2, #24]
 80019c2:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <HAL_GPIO_Init+0x298>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ce:	4a54      	ldr	r2, [pc, #336]	; (8001b20 <HAL_GPIO_Init+0x29c>)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_GPIO_Init+0x2a0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0x19e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <HAL_GPIO_Init+0x2a4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00d      	beq.n	8001a1e <HAL_GPIO_Init+0x19a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_GPIO_Init+0x2a8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x196>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a48      	ldr	r2, [pc, #288]	; (8001b30 <HAL_GPIO_Init+0x2ac>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_Init+0x192>
 8001a12:	2303      	movs	r3, #3
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x1a0>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x1a0>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x1a0>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x1a0>
 8001a22:	2300      	movs	r3, #0
 8001a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a26:	f002 0203 	and.w	r2, r2, #3
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a34:	493a      	ldr	r1, [pc, #232]	; (8001b20 <HAL_GPIO_Init+0x29c>)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4938      	ldr	r1, [pc, #224]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
 8001a5a:	e006      	b.n	8001a6a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4933      	ldr	r1, [pc, #204]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	492e      	ldr	r1, [pc, #184]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4929      	ldr	r1, [pc, #164]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	4924      	ldr	r1, [pc, #144]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
 8001aaa:	e006      	b.n	8001aba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	491f      	ldr	r1, [pc, #124]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	491a      	ldr	r1, [pc, #104]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]
 8001ad2:	e006      	b.n	8001ae2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4915      	ldr	r1, [pc, #84]	; (8001b34 <HAL_GPIO_Init+0x2b0>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f47f aed0 	bne.w	8001898 <HAL_GPIO_Init+0x14>
  }
}
 8001af8:	bf00      	nop
 8001afa:	372c      	adds	r7, #44	; 0x2c
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	10210000 	.word	0x10210000
 8001b08:	10110000 	.word	0x10110000
 8001b0c:	10120000 	.word	0x10120000
 8001b10:	10310000 	.word	0x10310000
 8001b14:	10320000 	.word	0x10320000
 8001b18:	10220000 	.word	0x10220000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40010800 	.word	0x40010800
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	40011000 	.word	0x40011000
 8001b30:	40011400 	.word	0x40011400
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b54:	e003      	b.n	8001b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b56:	887b      	ldrh	r3, [r7, #2]
 8001b58:	041a      	lsls	r2, r3, #16
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	611a      	str	r2, [r3, #16]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f806 	bl	8001b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e10f      	b.n	8001dde <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff f88c 	bl	8000cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2224      	movs	r2, #36	; 0x24
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bf0:	f000 ffe4 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8001bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4a7b      	ldr	r2, [pc, #492]	; (8001de8 <HAL_I2C_Init+0x23c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d807      	bhi.n	8001c10 <HAL_I2C_Init+0x64>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4a7a      	ldr	r2, [pc, #488]	; (8001dec <HAL_I2C_Init+0x240>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	bf94      	ite	ls
 8001c08:	2301      	movls	r3, #1
 8001c0a:	2300      	movhi	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	e006      	b.n	8001c1e <HAL_I2C_Init+0x72>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4a77      	ldr	r2, [pc, #476]	; (8001df0 <HAL_I2C_Init+0x244>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	bf94      	ite	ls
 8001c18:	2301      	movls	r3, #1
 8001c1a:	2300      	movhi	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0db      	b.n	8001dde <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a72      	ldr	r2, [pc, #456]	; (8001df4 <HAL_I2C_Init+0x248>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0c9b      	lsrs	r3, r3, #18
 8001c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4a64      	ldr	r2, [pc, #400]	; (8001de8 <HAL_I2C_Init+0x23c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d802      	bhi.n	8001c60 <HAL_I2C_Init+0xb4>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	e009      	b.n	8001c74 <HAL_I2C_Init+0xc8>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	4a63      	ldr	r2, [pc, #396]	; (8001df8 <HAL_I2C_Init+0x24c>)
 8001c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c70:	099b      	lsrs	r3, r3, #6
 8001c72:	3301      	adds	r3, #1
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4956      	ldr	r1, [pc, #344]	; (8001de8 <HAL_I2C_Init+0x23c>)
 8001c90:	428b      	cmp	r3, r1
 8001c92:	d80d      	bhi.n	8001cb0 <HAL_I2C_Init+0x104>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1e59      	subs	r1, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	bf38      	it	cc
 8001cac:	2304      	movcc	r3, #4
 8001cae:	e04f      	b.n	8001d50 <HAL_I2C_Init+0x1a4>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d111      	bne.n	8001cdc <HAL_I2C_Init+0x130>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1e58      	subs	r0, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	440b      	add	r3, r1
 8001cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	e012      	b.n	8001d02 <HAL_I2C_Init+0x156>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Init+0x15e>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e022      	b.n	8001d50 <HAL_I2C_Init+0x1a4>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10e      	bne.n	8001d30 <HAL_I2C_Init+0x184>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1e58      	subs	r0, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6859      	ldr	r1, [r3, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	440b      	add	r3, r1
 8001d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2e:	e00f      	b.n	8001d50 <HAL_I2C_Init+0x1a4>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	6809      	ldr	r1, [r1, #0]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69da      	ldr	r2, [r3, #28]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6911      	ldr	r1, [r2, #16]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68d2      	ldr	r2, [r2, #12]
 8001d8a:	4311      	orrs	r1, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	000186a0 	.word	0x000186a0
 8001dec:	001e847f 	.word	0x001e847f
 8001df0:	003d08ff 	.word	0x003d08ff
 8001df4:	431bde83 	.word	0x431bde83
 8001df8:	10624dd3 	.word	0x10624dd3

08001dfc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	4608      	mov	r0, r1
 8001e06:	4611      	mov	r1, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	817b      	strh	r3, [r7, #10]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	813b      	strh	r3, [r7, #8]
 8001e12:	4613      	mov	r3, r2
 8001e14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e16:	f7ff fc29 	bl	800166c <HAL_GetTick>
 8001e1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	f040 80d9 	bne.w	8001fdc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2319      	movs	r3, #25
 8001e30:	2201      	movs	r2, #1
 8001e32:	496d      	ldr	r1, [pc, #436]	; (8001fe8 <HAL_I2C_Mem_Write+0x1ec>)
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f965 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e40:	2302      	movs	r3, #2
 8001e42:	e0cc      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Mem_Write+0x56>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0c5      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d007      	beq.n	8001e78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2221      	movs	r2, #33	; 0x21
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a4d      	ldr	r2, [pc, #308]	; (8001fec <HAL_I2C_Mem_Write+0x1f0>)
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eba:	88f8      	ldrh	r0, [r7, #6]
 8001ebc:	893a      	ldrh	r2, [r7, #8]
 8001ebe:	8979      	ldrh	r1, [r7, #10]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	4603      	mov	r3, r0
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f890 	bl	8001ff0 <I2C_RequestMemoryWrite>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d052      	beq.n	8001f7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e081      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f9e6 	bl	80022b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00d      	beq.n	8001f06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d107      	bne.n	8001f02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e06b      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d11b      	bne.n	8001f7c <HAL_I2C_Mem_Write+0x180>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d017      	beq.n	8001f7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1aa      	bne.n	8001eda <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f9d2 	bl	8002332 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00d      	beq.n	8001fb0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d107      	bne.n	8001fac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001faa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e016      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	00100002 	.word	0x00100002
 8001fec:	ffff0000 	.word	0xffff0000

08001ff0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	817b      	strh	r3, [r7, #10]
 8002002:	460b      	mov	r3, r1
 8002004:	813b      	strh	r3, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	2200      	movs	r2, #0
 8002022:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f86c 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e05f      	b.n	80020f6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002044:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	6a3a      	ldr	r2, [r7, #32]
 800204a:	492d      	ldr	r1, [pc, #180]	; (8002100 <I2C_RequestMemoryWrite+0x110>)
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f8b0 	bl	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e04c      	b.n	80020f6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	6a39      	ldr	r1, [r7, #32]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f91a 	bl	80022b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00d      	beq.n	800209e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	2b04      	cmp	r3, #4
 8002088:	d107      	bne.n	800209a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002098:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e02b      	b.n	80020f6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020a4:	893b      	ldrh	r3, [r7, #8]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	611a      	str	r2, [r3, #16]
 80020ae:	e021      	b.n	80020f4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020b0:	893b      	ldrh	r3, [r7, #8]
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	6a39      	ldr	r1, [r7, #32]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f8f4 	bl	80022b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00d      	beq.n	80020ea <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d107      	bne.n	80020e6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e005      	b.n	80020f6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020ea:	893b      	ldrh	r3, [r7, #8]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	00010002 	.word	0x00010002

08002104 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002114:	e025      	b.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d021      	beq.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7ff faa5 	bl	800166c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <I2C_WaitOnFlagUntilTimeout+0x30>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d116      	bne.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f043 0220 	orr.w	r2, r3, #32
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e023      	b.n	80021aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d10d      	bne.n	8002188 <I2C_WaitOnFlagUntilTimeout+0x84>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	43da      	mvns	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4013      	ands	r3, r2
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf0c      	ite	eq
 800217e:	2301      	moveq	r3, #1
 8002180:	2300      	movne	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	e00c      	b.n	80021a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4013      	ands	r3, r2
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d0b6      	beq.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021c0:	e051      	b.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d0:	d123      	bne.n	800221a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f043 0204 	orr.w	r2, r3, #4
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e046      	b.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d021      	beq.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7ff fa23 	bl	800166c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d116      	bne.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f043 0220 	orr.w	r2, r3, #32
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e020      	b.n	80022a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10c      	bne.n	800228a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4013      	ands	r3, r2
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf14      	ite	ne
 8002282:	2301      	movne	r3, #1
 8002284:	2300      	moveq	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	e00b      	b.n	80022a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	43da      	mvns	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	4013      	ands	r3, r2
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf14      	ite	ne
 800229c:	2301      	movne	r3, #1
 800229e:	2300      	moveq	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d18d      	bne.n	80021c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022bc:	e02d      	b.n	800231a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f878 	bl	80023b4 <I2C_IsAcknowledgeFailed>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e02d      	b.n	800232a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d021      	beq.n	800231a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d6:	f7ff f9c9 	bl	800166c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d302      	bcc.n	80022ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d116      	bne.n	800231a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f043 0220 	orr.w	r2, r3, #32
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e007      	b.n	800232a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d1ca      	bne.n	80022be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800233e:	e02d      	b.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f837 	bl	80023b4 <I2C_IsAcknowledgeFailed>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e02d      	b.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d021      	beq.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002358:	f7ff f988 	bl	800166c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d302      	bcc.n	800236e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d116      	bne.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e007      	b.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d1ca      	bne.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ca:	d11b      	bne.n	8002404 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e26c      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8087 	beq.w	800253e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b04      	cmp	r3, #4
 800243a:	d00c      	beq.n	8002456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d112      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
 8002448:	4b8c      	ldr	r3, [pc, #560]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d10b      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002456:	4b89      	ldr	r3, [pc, #548]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d06c      	beq.n	800253c <HAL_RCC_OscConfig+0x12c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d168      	bne.n	800253c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e246      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x76>
 8002478:	4b80      	ldr	r3, [pc, #512]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a7f      	ldr	r2, [pc, #508]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e02e      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b7b      	ldr	r3, [pc, #492]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7a      	ldr	r2, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b78      	ldr	r3, [pc, #480]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a77      	ldr	r2, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0xbc>
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a71      	ldr	r2, [pc, #452]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024cc:	4b6b      	ldr	r3, [pc, #428]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6a      	ldr	r2, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a67      	ldr	r2, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff f8be 	bl	800166c <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f4:	f7ff f8ba 	bl	800166c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1fa      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b5d      	ldr	r3, [pc, #372]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe4>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7ff f8aa 	bl	800166c <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff f8a6 	bl	800166c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1e6      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x10c>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254a:	4b4c      	ldr	r3, [pc, #304]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002556:	4b49      	ldr	r3, [pc, #292]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
 8002562:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1ba      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4939      	ldr	r1, [pc, #228]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff f85f 	bl	800166c <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff f85b 	bl	800166c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e19b      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4927      	ldr	r1, [pc, #156]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff f83e 	bl	800166c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff f83a 	bl	800166c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e17a      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03a      	beq.n	8002694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d019      	beq.n	800265a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7ff f81e 	bl	800166c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff f81a 	bl	800166c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e15a      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002652:	2001      	movs	r0, #1
 8002654:	f000 fb0a 	bl	8002c6c <RCC_Delay>
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7ff f804 	bl	800166c <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002666:	e00f      	b.n	8002688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002668:	f7ff f800 	bl	800166c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d908      	bls.n	8002688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e140      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	42420000 	.word	0x42420000
 8002684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b9e      	ldr	r3, [pc, #632]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e9      	bne.n	8002668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a6 	beq.w	80027ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b97      	ldr	r3, [pc, #604]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b94      	ldr	r3, [pc, #592]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a93      	ldr	r2, [pc, #588]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b91      	ldr	r3, [pc, #580]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b8e      	ldr	r3, [pc, #568]	; (8002908 <HAL_RCC_OscConfig+0x4f8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b8b      	ldr	r3, [pc, #556]	; (8002908 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a8a      	ldr	r2, [pc, #552]	; (8002908 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7fe ffc1 	bl	800166c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7fe ffbd 	bl	800166c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e0fd      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b81      	ldr	r3, [pc, #516]	; (8002908 <HAL_RCC_OscConfig+0x4f8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x312>
 8002714:	4b7b      	ldr	r3, [pc, #492]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a7a      	ldr	r2, [pc, #488]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	e02d      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x334>
 800272a:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a75      	ldr	r2, [pc, #468]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b73      	ldr	r3, [pc, #460]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a72      	ldr	r2, [pc, #456]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	e01c      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d10c      	bne.n	8002766 <HAL_RCC_OscConfig+0x356>
 800274c:	4b6d      	ldr	r3, [pc, #436]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a6c      	ldr	r2, [pc, #432]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a69      	ldr	r2, [pc, #420]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	e00b      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002766:	4b67      	ldr	r3, [pc, #412]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a66      	ldr	r2, [pc, #408]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	4b64      	ldr	r3, [pc, #400]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a63      	ldr	r2, [pc, #396]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d015      	beq.n	80027b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7fe ff71 	bl	800166c <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe ff6d 	bl	800166c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0ab      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4b57      	ldr	r3, [pc, #348]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ee      	beq.n	800278e <HAL_RCC_OscConfig+0x37e>
 80027b0:	e014      	b.n	80027dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7fe ff5b 	bl	800166c <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe ff57 	bl	800166c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e095      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ee      	bne.n	80027ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4b48      	ldr	r3, [pc, #288]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a47      	ldr	r2, [pc, #284]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8081 	beq.w	80028fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f8:	4b42      	ldr	r3, [pc, #264]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d061      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d146      	bne.n	800289a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_RCC_OscConfig+0x4fc>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7fe ff2b 	bl	800166c <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7fe ff27 	bl	800166c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e067      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	4b35      	ldr	r3, [pc, #212]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d108      	bne.n	8002854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002842:	4b30      	ldr	r3, [pc, #192]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	492d      	ldr	r1, [pc, #180]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a19      	ldr	r1, [r3, #32]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	430b      	orrs	r3, r1
 8002866:	4927      	ldr	r1, [pc, #156]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_RCC_OscConfig+0x4fc>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe fefb 	bl	800166c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe fef7 	bl	800166c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e037      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x46a>
 8002898:	e02f      	b.n	80028fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <HAL_RCC_OscConfig+0x4fc>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fee4 	bl	800166c <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fee0 	bl	800166c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e020      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x498>
 80028c6:	e018      	b.n	80028fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e013      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	42420060 	.word	0x42420060

08002910 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0d0      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d910      	bls.n	8002954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b67      	ldr	r3, [pc, #412]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 0207 	bic.w	r2, r3, #7
 800293a:	4965      	ldr	r1, [pc, #404]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0b8      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002976:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800298e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	494d      	ldr	r1, [pc, #308]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d040      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d115      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ce:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e073      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	4b3d      	ldr	r3, [pc, #244]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06b      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ee:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f023 0203 	bic.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4936      	ldr	r1, [pc, #216]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a00:	f7fe fe34 	bl	800166c <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7fe fe30 	bl	800166c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e053      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 020c 	and.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d1eb      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a30:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d210      	bcs.n	8002a60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0207 	bic.w	r2, r3, #7
 8002a46:	4922      	ldr	r1, [pc, #136]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e032      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a9e:	f000 f821 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	5cd3      	ldrb	r3, [r2, r3]
 8002ab2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1cc>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe f9fa 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	0800650c 	.word	0x0800650c
 8002adc:	20000400 	.word	0x20000400
 8002ae0:	20000404 	.word	0x20000404

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	b490      	push	{r4, r7}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002aec:	1d3c      	adds	r4, r7, #4
 8002aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	2300      	movs	r3, #0
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	2300      	movs	r3, #0
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b0e:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d002      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x40>
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x46>
 8002b22:	e02d      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b26:	623b      	str	r3, [r7, #32]
      break;
 8002b28:	e02d      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	0c9b      	lsrs	r3, r3, #18
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b36:	4413      	add	r3, r2
 8002b38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	0c5b      	lsrs	r3, r3, #17
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b56:	4413      	add	r3, r2
 8002b58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b62:	fb02 f203 	mul.w	r2, r2, r3
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	e004      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b74:	fb02 f303 	mul.w	r3, r2, r3
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	623b      	str	r3, [r7, #32]
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b82:	623b      	str	r3, [r7, #32]
      break;
 8002b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b86:	6a3b      	ldr	r3, [r7, #32]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3728      	adds	r7, #40	; 0x28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc90      	pop	{r4, r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	080064f0 	.word	0x080064f0
 8002b98:	08006500 	.word	0x08006500
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	007a1200 	.word	0x007a1200
 8002ba4:	003d0900 	.word	0x003d0900

08002ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bac:	4b02      	ldr	r3, [pc, #8]	; (8002bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	20000400 	.word	0x20000400

08002bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bc0:	f7ff fff2 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bc4:	4601      	mov	r1, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4a03      	ldr	r2, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	0800651c 	.word	0x0800651c

08002be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002be8:	f7ff ffde 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bec:	4601      	mov	r1, r0
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0adb      	lsrs	r3, r3, #11
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4a03      	ldr	r2, [pc, #12]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bfa:	5cd3      	ldrb	r3, [r2, r3]
 8002bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	0800651c 	.word	0x0800651c

08002c0c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	220f      	movs	r2, #15
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_RCC_GetClockConfig+0x58>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0203 	and.w	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_RCC_GetClockConfig+0x58>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_GetClockConfig+0x58>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_RCC_GetClockConfig+0x58>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	08db      	lsrs	r3, r3, #3
 8002c46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_GetClockConfig+0x5c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0207 	and.w	r2, r3, #7
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40022000 	.word	0x40022000

08002c6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c74:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <RCC_Delay+0x34>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <RCC_Delay+0x38>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	0a5b      	lsrs	r3, r3, #9
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c88:	bf00      	nop
  }
  while (Delay --);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1e5a      	subs	r2, r3, #1
 8002c8e:	60fa      	str	r2, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f9      	bne.n	8002c88 <RCC_Delay+0x1c>
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000400 	.word	0x20000400
 8002ca4:	10624dd3 	.word	0x10624dd3

08002ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e01d      	b.n	8002cf6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f815 	bl	8002cfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f000 f962 	bl	8002fb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d007      	beq.n	8002d4a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d122      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d11b      	bne.n	8002db2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f06f 0202 	mvn.w	r2, #2
 8002d82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f8ed 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002d9e:	e005      	b.n	8002dac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f8e0 	bl	8002f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f8ef 	bl	8002f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d122      	bne.n	8002e06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d11b      	bne.n	8002e06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f06f 0204 	mvn.w	r2, #4
 8002dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f8c3 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002df2:	e005      	b.n	8002e00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8b6 	bl	8002f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8c5 	bl	8002f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d122      	bne.n	8002e5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d11b      	bne.n	8002e5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0208 	mvn.w	r2, #8
 8002e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2204      	movs	r2, #4
 8002e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f899 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002e46:	e005      	b.n	8002e54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f88c 	bl	8002f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f89b 	bl	8002f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d122      	bne.n	8002eae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d11b      	bne.n	8002eae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f06f 0210 	mvn.w	r2, #16
 8002e7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2208      	movs	r2, #8
 8002e84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f86f 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8002e9a:	e005      	b.n	8002ea8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f862 	bl	8002f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f871 	bl	8002f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10e      	bne.n	8002eda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d107      	bne.n	8002eda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f06f 0201 	mvn.w	r2, #1
 8002ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fd ff9f 	bl	8000e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d10e      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b80      	cmp	r3, #128	; 0x80
 8002ef4:	d107      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f8c0 	bl	8003086 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d10e      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d107      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f835 	bl	8002f9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d10e      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d107      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0220 	mvn.w	r2, #32
 8002f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f88b 	bl	8003074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
	...

08002fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a29      	ldr	r2, [pc, #164]	; (8003068 <TIM_Base_SetConfig+0xb8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00b      	beq.n	8002fe0 <TIM_Base_SetConfig+0x30>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fce:	d007      	beq.n	8002fe0 <TIM_Base_SetConfig+0x30>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a26      	ldr	r2, [pc, #152]	; (800306c <TIM_Base_SetConfig+0xbc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_Base_SetConfig+0x30>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a25      	ldr	r2, [pc, #148]	; (8003070 <TIM_Base_SetConfig+0xc0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d108      	bne.n	8002ff2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <TIM_Base_SetConfig+0xb8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00b      	beq.n	8003012 <TIM_Base_SetConfig+0x62>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003000:	d007      	beq.n	8003012 <TIM_Base_SetConfig+0x62>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a19      	ldr	r2, [pc, #100]	; (800306c <TIM_Base_SetConfig+0xbc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d003      	beq.n	8003012 <TIM_Base_SetConfig+0x62>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a18      	ldr	r2, [pc, #96]	; (8003070 <TIM_Base_SetConfig+0xc0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d108      	bne.n	8003024 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a07      	ldr	r2, [pc, #28]	; (8003068 <TIM_Base_SetConfig+0xb8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d103      	bne.n	8003058 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	615a      	str	r2, [r3, #20]
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800

08003074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e03f      	b.n	800312a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe f804 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	; 0x24
 80030c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f829 	bl	8003134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800316e:	f023 030c 	bic.w	r3, r3, #12
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	430b      	orrs	r3, r1
 800317a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <UART_SetConfig+0x1ac>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d14e      	bne.n	800323a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800319c:	f7ff fd22 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 80031a0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	009a      	lsls	r2, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <UART_SetConfig+0x1b0>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	0119      	lsls	r1, r3, #4
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	009a      	lsls	r2, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d8:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <UART_SetConfig+0x1b0>)
 80031da:	fba3 0302 	umull	r0, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2064      	movs	r0, #100	; 0x64
 80031e2:	fb00 f303 	mul.w	r3, r0, r3
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	3332      	adds	r3, #50	; 0x32
 80031ec:	4a3d      	ldr	r2, [pc, #244]	; (80032e4 <UART_SetConfig+0x1b0>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f8:	4419      	add	r1, r3
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009a      	lsls	r2, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003210:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <UART_SetConfig+0x1b0>)
 8003212:	fba3 0302 	umull	r0, r3, r3, r2
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	2064      	movs	r0, #100	; 0x64
 800321a:	fb00 f303 	mul.w	r3, r0, r3
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	3332      	adds	r3, #50	; 0x32
 8003224:	4a2f      	ldr	r2, [pc, #188]	; (80032e4 <UART_SetConfig+0x1b0>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	f003 020f 	and.w	r2, r3, #15
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	440a      	add	r2, r1
 8003236:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003238:	e04d      	b.n	80032d6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800323a:	f7ff fcbf 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 800323e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009a      	lsls	r2, r3, #2
 800324a:	441a      	add	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	fbb2 f3f3 	udiv	r3, r2, r3
 8003256:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <UART_SetConfig+0x1b0>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	0119      	lsls	r1, r3, #4
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	009a      	lsls	r2, r3, #2
 800326a:	441a      	add	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	fbb2 f2f3 	udiv	r2, r2, r3
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <UART_SetConfig+0x1b0>)
 8003278:	fba3 0302 	umull	r0, r3, r3, r2
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	2064      	movs	r0, #100	; 0x64
 8003280:	fb00 f303 	mul.w	r3, r0, r3
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	3332      	adds	r3, #50	; 0x32
 800328a:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <UART_SetConfig+0x1b0>)
 800328c:	fba2 2303 	umull	r2, r3, r2, r3
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003296:	4419      	add	r1, r3
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	009a      	lsls	r2, r3, #2
 80032a2:	441a      	add	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ae:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <UART_SetConfig+0x1b0>)
 80032b0:	fba3 0302 	umull	r0, r3, r3, r2
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	2064      	movs	r0, #100	; 0x64
 80032b8:	fb00 f303 	mul.w	r3, r0, r3
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	3332      	adds	r3, #50	; 0x32
 80032c2:	4a08      	ldr	r2, [pc, #32]	; (80032e4 <UART_SetConfig+0x1b0>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	440a      	add	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40013800 	.word	0x40013800
 80032e4:	51eb851f 	.word	0x51eb851f

080032e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032fa:	2b84      	cmp	r3, #132	; 0x84
 80032fc:	d005      	beq.n	800330a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	3303      	adds	r3, #3
 8003308:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800330a:	68fb      	ldr	r3, [r7, #12]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800331a:	f000 fc2b 	bl	8003b74 <vTaskStartScheduler>
  
  return osOK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	bd80      	pop	{r7, pc}

08003324 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003326:	b089      	sub	sp, #36	; 0x24
 8003328:	af04      	add	r7, sp, #16
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d020      	beq.n	8003378 <osThreadCreate+0x54>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01c      	beq.n	8003378 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685c      	ldr	r4, [r3, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681d      	ldr	r5, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691e      	ldr	r6, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ffc9 	bl	80032e8 <makeFreeRtosPriority>
 8003356:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003360:	9202      	str	r2, [sp, #8]
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	9100      	str	r1, [sp, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	4632      	mov	r2, r6
 800336a:	4629      	mov	r1, r5
 800336c:	4620      	mov	r0, r4
 800336e:	f000 fa47 	bl	8003800 <xTaskCreateStatic>
 8003372:	4603      	mov	r3, r0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e01c      	b.n	80033b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685c      	ldr	r4, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003384:	b29e      	uxth	r6, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ffab 	bl	80032e8 <makeFreeRtosPriority>
 8003392:	4602      	mov	r2, r0
 8003394:	f107 030c 	add.w	r3, r7, #12
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	9200      	str	r2, [sp, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4632      	mov	r2, r6
 80033a0:	4629      	mov	r1, r5
 80033a2:	4620      	mov	r0, r4
 80033a4:	f000 fa85 	bl	80038b2 <xTaskCreate>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d001      	beq.n	80033b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e000      	b.n	80033b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033b2:	68fb      	ldr	r3, [r7, #12]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <osDelay+0x16>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	e000      	b.n	80033d4 <osDelay+0x18>
 80033d2:	2301      	movs	r3, #1
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fb99 	bl	8003b0c <vTaskDelay>
  
  return osOK;
 80033da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <osMessageCreate+0x38>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00e      	beq.n	800341c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68dc      	ldr	r4, [r3, #12]
 800340e:	2300      	movs	r3, #0
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	4623      	mov	r3, r4
 8003414:	f000 f926 	bl	8003664 <xQueueGenericCreateStatic>
 8003418:	4603      	mov	r3, r0
 800341a:	e008      	b.n	800342e <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	4619      	mov	r1, r3
 8003428:	f000 f98e 	bl	8003748 <xQueueGenericCreate>
 800342c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}

08003436 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f103 0208 	add.w	r2, r3, #8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f04f 32ff 	mov.w	r2, #4294967295
 800344e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 0208 	add.w	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f103 0208 	add.w	r2, r3, #8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	601a      	str	r2, [r3, #0]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d103      	bne.n	80034f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e00c      	b.n	800350c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3308      	adds	r3, #8
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e002      	b.n	8003500 <vListInsert+0x2e>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	429a      	cmp	r2, r3
 800350a:	d2f6      	bcs.n	80034fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	601a      	str	r2, [r3, #0]
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6892      	ldr	r2, [r2, #8]
 8003558:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6852      	ldr	r2, [r2, #4]
 8003562:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	d103      	bne.n	8003576 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d109      	bne.n	80035bc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	e7fe      	b.n	80035ba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80035bc:	f000 ff84 	bl	80044c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	68f9      	ldr	r1, [r7, #12]
 80035ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	441a      	add	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	3b01      	subs	r3, #1
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	441a      	add	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	22ff      	movs	r2, #255	; 0xff
 8003600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	22ff      	movs	r2, #255	; 0xff
 8003608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d114      	bne.n	800363c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01a      	beq.n	8003650 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3310      	adds	r3, #16
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fcc6 	bl	8003fb0 <xTaskRemoveFromEventList>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d012      	beq.n	8003650 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <xQueueGenericReset+0xcc>)
 800362c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	e009      	b.n	8003650 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3310      	adds	r3, #16
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fef8 	bl	8003436 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3324      	adds	r3, #36	; 0x24
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fef3 	bl	8003436 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003650:	f000 ff68 	bl	8004524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003654:	2301      	movs	r3, #1
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <xQueueGenericCreateStatic+0x28>
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
 800368a:	e7fe      	b.n	800368a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <xQueueGenericCreateStatic+0x42>
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
 80036a4:	e7fe      	b.n	80036a4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <xQueueGenericCreateStatic+0x4e>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <xQueueGenericCreateStatic+0x52>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <xQueueGenericCreateStatic+0x54>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <xQueueGenericCreateStatic+0x6c>
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	623b      	str	r3, [r7, #32]
 80036ce:	e7fe      	b.n	80036ce <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <xQueueGenericCreateStatic+0x78>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <xQueueGenericCreateStatic+0x7c>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <xQueueGenericCreateStatic+0x7e>
 80036e0:	2300      	movs	r3, #0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <xQueueGenericCreateStatic+0x96>
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e7fe      	b.n	80036f8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036fa:	2348      	movs	r3, #72	; 0x48
 80036fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b48      	cmp	r3, #72	; 0x48
 8003702:	d009      	beq.n	8003718 <xQueueGenericCreateStatic+0xb4>
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e7fe      	b.n	8003716 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00d      	beq.n	800373e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800372a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4613      	mov	r3, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f842 	bl	80037c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003740:	4618      	mov	r0, r3
 8003742:	3730      	adds	r7, #48	; 0x30
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <xQueueGenericCreate+0x28>
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	e7fe      	b.n	800376e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	e004      	b.n	8003786 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3348      	adds	r3, #72	; 0x48
 800378a:	4618      	mov	r0, r3
 800378c:	f000 ff56 	bl	800463c <pvPortMalloc>
 8003790:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00f      	beq.n	80037b8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	3348      	adds	r3, #72	; 0x48
 800379c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037a6:	79fa      	ldrb	r2, [r7, #7]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f805 	bl	80037c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80037b8:	69bb      	ldr	r3, [r7, #24]
	}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	e002      	b.n	80037e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037f0:	2101      	movs	r1, #1
 80037f2:	69b8      	ldr	r0, [r7, #24]
 80037f4:	f7ff fece 	bl	8003594 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08e      	sub	sp, #56	; 0x38
 8003804:	af04      	add	r7, sp, #16
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800380e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <xTaskCreateStatic+0x28>
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	e7fe      	b.n	8003826 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <xTaskCreateStatic+0x42>
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	e7fe      	b.n	8003840 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003842:	2354      	movs	r3, #84	; 0x54
 8003844:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b54      	cmp	r3, #84	; 0x54
 800384a:	d009      	beq.n	8003860 <xTaskCreateStatic+0x60>
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	e7fe      	b.n	800385e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01e      	beq.n	80038a4 <xTaskCreateStatic+0xa4>
 8003866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01b      	beq.n	80038a4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003874:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	2202      	movs	r2, #2
 800387a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800387e:	2300      	movs	r3, #0
 8003880:	9303      	str	r3, [sp, #12]
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	9302      	str	r3, [sp, #8]
 8003886:	f107 0314 	add.w	r3, r7, #20
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f850 	bl	800393c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800389c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800389e:	f000 f8cb 	bl	8003a38 <prvAddNewTaskToReadyList>
 80038a2:	e001      	b.n	80038a8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038a8:	697b      	ldr	r3, [r7, #20]
	}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b08c      	sub	sp, #48	; 0x30
 80038b6:	af04      	add	r7, sp, #16
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 feb8 	bl	800463c <pvPortMalloc>
 80038cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00e      	beq.n	80038f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80038d4:	2054      	movs	r0, #84	; 0x54
 80038d6:	f000 feb1 	bl	800463c <pvPortMalloc>
 80038da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
 80038e8:	e005      	b.n	80038f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80038ea:	6978      	ldr	r0, [r7, #20]
 80038ec:	f000 ff68 	bl	80047c0 <vPortFree>
 80038f0:	e001      	b.n	80038f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d017      	beq.n	800392c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	2300      	movs	r3, #0
 8003908:	9303      	str	r3, [sp, #12]
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	9302      	str	r3, [sp, #8]
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f80e 	bl	800393c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003920:	69f8      	ldr	r0, [r7, #28]
 8003922:	f000 f889 	bl	8003a38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	e002      	b.n	8003932 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800392c:	f04f 33ff 	mov.w	r3, #4294967295
 8003930:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003932:	69bb      	ldr	r3, [r7, #24]
	}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003954:	3b01      	subs	r3, #1
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f023 0307 	bic.w	r3, r3, #7
 8003962:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <prvInitialiseNewTask+0x46>
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e7fe      	b.n	8003980 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	e012      	b.n	80039ae <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	7819      	ldrb	r1, [r3, #0]
 8003990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	4413      	add	r3, r2
 8003996:	3334      	adds	r3, #52	; 0x34
 8003998:	460a      	mov	r2, r1
 800399a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d006      	beq.n	80039b6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	3301      	adds	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2b0f      	cmp	r3, #15
 80039b2:	d9e9      	bls.n	8003988 <prvInitialiseNewTask+0x4c>
 80039b4:	e000      	b.n	80039b8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80039b6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	2b07      	cmp	r3, #7
 80039c4:	d901      	bls.n	80039ca <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039c6:	2307      	movs	r3, #7
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	2200      	movs	r2, #0
 80039da:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	3304      	adds	r3, #4
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fd47 	bl	8003474 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	3318      	adds	r3, #24
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fd42 	bl	8003474 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	f1c3 0208 	rsb	r2, r3, #8
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	2200      	movs	r2, #0
 8003a0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	69b8      	ldr	r0, [r7, #24]
 8003a1a:	f000 fc67 	bl	80042ec <pxPortInitialiseStack>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a30:	bf00      	nop
 8003a32:	3720      	adds	r7, #32
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a40:	f000 fd42 	bl	80044c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <prvAddNewTaskToReadyList+0xb8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <prvAddNewTaskToReadyList+0xb8>)
 8003a4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a4e:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <prvAddNewTaskToReadyList+0xbc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a56:	4a27      	ldr	r2, [pc, #156]	; (8003af4 <prvAddNewTaskToReadyList+0xbc>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a5c:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <prvAddNewTaskToReadyList+0xb8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d110      	bne.n	8003a86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a64:	f000 fb1e 	bl	80040a4 <prvInitialiseTaskLists>
 8003a68:	e00d      	b.n	8003a86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <prvAddNewTaskToReadyList+0xc0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a72:	4b20      	ldr	r3, [pc, #128]	; (8003af4 <prvAddNewTaskToReadyList+0xbc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d802      	bhi.n	8003a86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a80:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <prvAddNewTaskToReadyList+0xbc>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <prvAddNewTaskToReadyList+0xc4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	; (8003afc <prvAddNewTaskToReadyList+0xc4>)
 8003a8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2201      	movs	r2, #1
 8003a96:	409a      	lsls	r2, r3
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <prvAddNewTaskToReadyList+0xc8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <prvAddNewTaskToReadyList+0xc8>)
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4a15      	ldr	r2, [pc, #84]	; (8003b04 <prvAddNewTaskToReadyList+0xcc>)
 8003ab0:	441a      	add	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f7ff fce7 	bl	800348c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003abe:	f000 fd31 	bl	8004524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <prvAddNewTaskToReadyList+0xc0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00e      	beq.n	8003ae8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <prvAddNewTaskToReadyList+0xbc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d207      	bcs.n	8003ae8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <prvAddNewTaskToReadyList+0xd0>)
 8003ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000968 	.word	0x20000968
 8003af4:	20000854 	.word	0x20000854
 8003af8:	20000974 	.word	0x20000974
 8003afc:	20000984 	.word	0x20000984
 8003b00:	20000970 	.word	0x20000970
 8003b04:	20000858 	.word	0x20000858
 8003b08:	e000ed04 	.word	0xe000ed04

08003b0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <vTaskDelay+0x60>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <vTaskDelay+0x2e>
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	e7fe      	b.n	8003b38 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003b3a:	f000 f879 	bl	8003c30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b3e:	2100      	movs	r1, #0
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fb6d 	bl	8004220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b46:	f000 f881 	bl	8003c4c <xTaskResumeAll>
 8003b4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d107      	bne.n	8003b62 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <vTaskDelay+0x64>)
 8003b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000990 	.word	0x20000990
 8003b70:	e000ed04 	.word	0xe000ed04

08003b74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	; 0x28
 8003b78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b82:	463a      	mov	r2, r7
 8003b84:	1d39      	adds	r1, r7, #4
 8003b86:	f107 0308 	add.w	r3, r7, #8
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fc ff7c 	bl	8000a88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	9202      	str	r2, [sp, #8]
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	460a      	mov	r2, r1
 8003ba2:	491d      	ldr	r1, [pc, #116]	; (8003c18 <vTaskStartScheduler+0xa4>)
 8003ba4:	481d      	ldr	r0, [pc, #116]	; (8003c1c <vTaskStartScheduler+0xa8>)
 8003ba6:	f7ff fe2b 	bl	8003800 <xTaskCreateStatic>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <vTaskStartScheduler+0xac>)
 8003bae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <vTaskStartScheduler+0xac>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e001      	b.n	8003bc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d115      	bne.n	8003bf4 <vTaskStartScheduler+0x80>
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <vTaskStartScheduler+0xb0>)
 8003bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003be0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <vTaskStartScheduler+0xb4>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003be8:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <vTaskStartScheduler+0xb8>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bee:	f000 fbfb 	bl	80043e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bf2:	e00d      	b.n	8003c10 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d109      	bne.n	8003c10 <vTaskStartScheduler+0x9c>
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e7fe      	b.n	8003c0e <vTaskStartScheduler+0x9a>
}
 8003c10:	bf00      	nop
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	08006504 	.word	0x08006504
 8003c1c:	08004075 	.word	0x08004075
 8003c20:	2000098c 	.word	0x2000098c
 8003c24:	20000988 	.word	0x20000988
 8003c28:	20000974 	.word	0x20000974
 8003c2c:	2000096c 	.word	0x2000096c

08003c30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <vTaskSuspendAll+0x18>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	4a03      	ldr	r2, [pc, #12]	; (8003c48 <vTaskSuspendAll+0x18>)
 8003c3c:	6013      	str	r3, [r2, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20000990 	.word	0x20000990

08003c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c5a:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <xTaskResumeAll+0x114>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <xTaskResumeAll+0x2a>
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	e7fe      	b.n	8003c74 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c76:	f000 fc27 	bl	80044c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c7a:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <xTaskResumeAll+0x114>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	4a37      	ldr	r2, [pc, #220]	; (8003d60 <xTaskResumeAll+0x114>)
 8003c82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c84:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <xTaskResumeAll+0x114>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d161      	bne.n	8003d50 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c8c:	4b35      	ldr	r3, [pc, #212]	; (8003d64 <xTaskResumeAll+0x118>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d05d      	beq.n	8003d50 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c94:	e02e      	b.n	8003cf4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c96:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <xTaskResumeAll+0x11c>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3318      	adds	r3, #24
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff fc4d 	bl	8003542 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3304      	adds	r3, #4
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fc48 	bl	8003542 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	4b2c      	ldr	r3, [pc, #176]	; (8003d6c <xTaskResumeAll+0x120>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <xTaskResumeAll+0x120>)
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <xTaskResumeAll+0x124>)
 8003cd2:	441a      	add	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f7ff fbd6 	bl	800348c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <xTaskResumeAll+0x128>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <xTaskResumeAll+0x12c>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <xTaskResumeAll+0x11c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1cc      	bne.n	8003c96 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d02:	f000 fa69 	bl	80041d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <xTaskResumeAll+0x130>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d010      	beq.n	8003d34 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d12:	f000 f837 	bl	8003d84 <xTaskIncrementTick>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003d1c:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <xTaskResumeAll+0x12c>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f1      	bne.n	8003d12 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <xTaskResumeAll+0x130>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d34:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <xTaskResumeAll+0x12c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <xTaskResumeAll+0x134>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d50:	f000 fbe8 	bl	8004524 <vPortExitCritical>

	return xAlreadyYielded;
 8003d54:	68bb      	ldr	r3, [r7, #8]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000990 	.word	0x20000990
 8003d64:	20000968 	.word	0x20000968
 8003d68:	20000928 	.word	0x20000928
 8003d6c:	20000970 	.word	0x20000970
 8003d70:	20000858 	.word	0x20000858
 8003d74:	20000854 	.word	0x20000854
 8003d78:	2000097c 	.word	0x2000097c
 8003d7c:	20000978 	.word	0x20000978
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d8e:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <xTaskIncrementTick+0x14c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 808c 	bne.w	8003eb0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d98:	4b4e      	ldr	r3, [pc, #312]	; (8003ed4 <xTaskIncrementTick+0x150>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003da0:	4a4c      	ldr	r2, [pc, #304]	; (8003ed4 <xTaskIncrementTick+0x150>)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d11f      	bne.n	8003dec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dac:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <xTaskIncrementTick+0x154>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <xTaskIncrementTick+0x46>
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	e7fe      	b.n	8003dc8 <xTaskIncrementTick+0x44>
 8003dca:	4b43      	ldr	r3, [pc, #268]	; (8003ed8 <xTaskIncrementTick+0x154>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	4b42      	ldr	r3, [pc, #264]	; (8003edc <xTaskIncrementTick+0x158>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a40      	ldr	r2, [pc, #256]	; (8003ed8 <xTaskIncrementTick+0x154>)
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4a40      	ldr	r2, [pc, #256]	; (8003edc <xTaskIncrementTick+0x158>)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <xTaskIncrementTick+0x15c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3301      	adds	r3, #1
 8003de4:	4a3e      	ldr	r2, [pc, #248]	; (8003ee0 <xTaskIncrementTick+0x15c>)
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	f000 f9f6 	bl	80041d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dec:	4b3d      	ldr	r3, [pc, #244]	; (8003ee4 <xTaskIncrementTick+0x160>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d34d      	bcc.n	8003e92 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003df6:	4b38      	ldr	r3, [pc, #224]	; (8003ed8 <xTaskIncrementTick+0x154>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <xTaskIncrementTick+0x80>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <xTaskIncrementTick+0x82>
 8003e04:	2300      	movs	r3, #0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <xTaskIncrementTick+0x160>)
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e10:	601a      	str	r2, [r3, #0]
					break;
 8003e12:	e03e      	b.n	8003e92 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e14:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <xTaskIncrementTick+0x154>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d203      	bcs.n	8003e34 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e2c:	4a2d      	ldr	r2, [pc, #180]	; (8003ee4 <xTaskIncrementTick+0x160>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6013      	str	r3, [r2, #0]
						break;
 8003e32:	e02e      	b.n	8003e92 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fb82 	bl	8003542 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3318      	adds	r3, #24
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fb79 	bl	8003542 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	2201      	movs	r2, #1
 8003e56:	409a      	lsls	r2, r3
 8003e58:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <xTaskIncrementTick+0x164>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <xTaskIncrementTick+0x164>)
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <xTaskIncrementTick+0x168>)
 8003e70:	441a      	add	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f7ff fb07 	bl	800348c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <xTaskIncrementTick+0x16c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d3b4      	bcc.n	8003df6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e90:	e7b1      	b.n	8003df6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e92:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <xTaskIncrementTick+0x16c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4914      	ldr	r1, [pc, #80]	; (8003eec <xTaskIncrementTick+0x168>)
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d907      	bls.n	8003eba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	e004      	b.n	8003eba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <xTaskIncrementTick+0x170>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	4a0f      	ldr	r2, [pc, #60]	; (8003ef4 <xTaskIncrementTick+0x170>)
 8003eb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <xTaskIncrementTick+0x174>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ec6:	697b      	ldr	r3, [r7, #20]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000990 	.word	0x20000990
 8003ed4:	2000096c 	.word	0x2000096c
 8003ed8:	20000920 	.word	0x20000920
 8003edc:	20000924 	.word	0x20000924
 8003ee0:	20000980 	.word	0x20000980
 8003ee4:	20000988 	.word	0x20000988
 8003ee8:	20000970 	.word	0x20000970
 8003eec:	20000858 	.word	0x20000858
 8003ef0:	20000854 	.word	0x20000854
 8003ef4:	20000978 	.word	0x20000978
 8003ef8:	2000097c 	.word	0x2000097c

08003efc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f02:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <vTaskSwitchContext+0xa0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f0a:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <vTaskSwitchContext+0xa4>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f10:	e03e      	b.n	8003f90 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003f12:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <vTaskSwitchContext+0xa4>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <vTaskSwitchContext+0xa8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f26:	7afb      	ldrb	r3, [r7, #11]
 8003f28:	f1c3 031f 	rsb	r3, r3, #31
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	491e      	ldr	r1, [pc, #120]	; (8003fa8 <vTaskSwitchContext+0xac>)
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	607b      	str	r3, [r7, #4]
 8003f54:	e7fe      	b.n	8003f54 <vTaskSwitchContext+0x58>
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4a11      	ldr	r2, [pc, #68]	; (8003fa8 <vTaskSwitchContext+0xac>)
 8003f62:	4413      	add	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	3308      	adds	r3, #8
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d104      	bne.n	8003f86 <vTaskSwitchContext+0x8a>
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4a07      	ldr	r2, [pc, #28]	; (8003fac <vTaskSwitchContext+0xb0>)
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000990 	.word	0x20000990
 8003fa0:	2000097c 	.word	0x2000097c
 8003fa4:	20000970 	.word	0x20000970
 8003fa8:	20000858 	.word	0x20000858
 8003fac:	20000854 	.word	0x20000854

08003fb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <xTaskRemoveFromEventList+0x2a>
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e7fe      	b.n	8003fd8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3318      	adds	r3, #24
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff faaf 	bl	8003542 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe4:	4b1d      	ldr	r3, [pc, #116]	; (800405c <xTaskRemoveFromEventList+0xac>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11c      	bne.n	8004026 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff faa6 	bl	8003542 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	4b18      	ldr	r3, [pc, #96]	; (8004060 <xTaskRemoveFromEventList+0xb0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	4a16      	ldr	r2, [pc, #88]	; (8004060 <xTaskRemoveFromEventList+0xb0>)
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4a13      	ldr	r2, [pc, #76]	; (8004064 <xTaskRemoveFromEventList+0xb4>)
 8004016:	441a      	add	r2, r3
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	3304      	adds	r3, #4
 800401c:	4619      	mov	r1, r3
 800401e:	4610      	mov	r0, r2
 8004020:	f7ff fa34 	bl	800348c <vListInsertEnd>
 8004024:	e005      	b.n	8004032 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	3318      	adds	r3, #24
 800402a:	4619      	mov	r1, r3
 800402c:	480e      	ldr	r0, [pc, #56]	; (8004068 <xTaskRemoveFromEventList+0xb8>)
 800402e:	f7ff fa2d 	bl	800348c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004036:	4b0d      	ldr	r3, [pc, #52]	; (800406c <xTaskRemoveFromEventList+0xbc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	429a      	cmp	r2, r3
 800403e:	d905      	bls.n	800404c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004040:	2301      	movs	r3, #1
 8004042:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004044:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <xTaskRemoveFromEventList+0xc0>)
 8004046:	2201      	movs	r2, #1
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e001      	b.n	8004050 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004050:	697b      	ldr	r3, [r7, #20]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000990 	.word	0x20000990
 8004060:	20000970 	.word	0x20000970
 8004064:	20000858 	.word	0x20000858
 8004068:	20000928 	.word	0x20000928
 800406c:	20000854 	.word	0x20000854
 8004070:	2000097c 	.word	0x2000097c

08004074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800407c:	f000 f852 	bl	8004124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <prvIdleTask+0x28>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d9f9      	bls.n	800407c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <prvIdleTask+0x2c>)
 800408a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004098:	e7f0      	b.n	800407c <prvIdleTask+0x8>
 800409a:	bf00      	nop
 800409c:	20000858 	.word	0x20000858
 80040a0:	e000ed04 	.word	0xe000ed04

080040a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	e00c      	b.n	80040ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <prvInitialiseTaskLists+0x60>)
 80040bc:	4413      	add	r3, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff f9b9 	bl	8003436 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3301      	adds	r3, #1
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b07      	cmp	r3, #7
 80040ce:	d9ef      	bls.n	80040b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040d0:	480d      	ldr	r0, [pc, #52]	; (8004108 <prvInitialiseTaskLists+0x64>)
 80040d2:	f7ff f9b0 	bl	8003436 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040d6:	480d      	ldr	r0, [pc, #52]	; (800410c <prvInitialiseTaskLists+0x68>)
 80040d8:	f7ff f9ad 	bl	8003436 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040dc:	480c      	ldr	r0, [pc, #48]	; (8004110 <prvInitialiseTaskLists+0x6c>)
 80040de:	f7ff f9aa 	bl	8003436 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040e2:	480c      	ldr	r0, [pc, #48]	; (8004114 <prvInitialiseTaskLists+0x70>)
 80040e4:	f7ff f9a7 	bl	8003436 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040e8:	480b      	ldr	r0, [pc, #44]	; (8004118 <prvInitialiseTaskLists+0x74>)
 80040ea:	f7ff f9a4 	bl	8003436 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040ee:	4b0b      	ldr	r3, [pc, #44]	; (800411c <prvInitialiseTaskLists+0x78>)
 80040f0:	4a05      	ldr	r2, [pc, #20]	; (8004108 <prvInitialiseTaskLists+0x64>)
 80040f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <prvInitialiseTaskLists+0x7c>)
 80040f6:	4a05      	ldr	r2, [pc, #20]	; (800410c <prvInitialiseTaskLists+0x68>)
 80040f8:	601a      	str	r2, [r3, #0]
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000858 	.word	0x20000858
 8004108:	200008f8 	.word	0x200008f8
 800410c:	2000090c 	.word	0x2000090c
 8004110:	20000928 	.word	0x20000928
 8004114:	2000093c 	.word	0x2000093c
 8004118:	20000954 	.word	0x20000954
 800411c:	20000920 	.word	0x20000920
 8004120:	20000924 	.word	0x20000924

08004124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800412a:	e019      	b.n	8004160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800412c:	f000 f9cc 	bl	80044c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <prvCheckTasksWaitingTermination+0x4c>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3304      	adds	r3, #4
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fa00 	bl	8003542 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <prvCheckTasksWaitingTermination+0x50>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3b01      	subs	r3, #1
 8004148:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <prvCheckTasksWaitingTermination+0x50>)
 800414a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <prvCheckTasksWaitingTermination+0x54>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3b01      	subs	r3, #1
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <prvCheckTasksWaitingTermination+0x54>)
 8004154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004156:	f000 f9e5 	bl	8004524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f80e 	bl	800417c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <prvCheckTasksWaitingTermination+0x54>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1e1      	bne.n	800412c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	2000093c 	.word	0x2000093c
 8004174:	20000968 	.word	0x20000968
 8004178:	20000950 	.word	0x20000950

0800417c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800418a:	2b00      	cmp	r3, #0
 800418c:	d108      	bne.n	80041a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fb14 	bl	80047c0 <vPortFree>
				vPortFree( pxTCB );
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fb11 	bl	80047c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800419e:	e017      	b.n	80041d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d103      	bne.n	80041b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fb08 	bl	80047c0 <vPortFree>
	}
 80041b0:	e00e      	b.n	80041d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d009      	beq.n	80041d0 <prvDeleteTCB+0x54>
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e7fe      	b.n	80041ce <prvDeleteTCB+0x52>
	}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <prvResetNextTaskUnblockTime+0x40>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <prvResetNextTaskUnblockTime+0x14>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <prvResetNextTaskUnblockTime+0x16>
 80041ec:	2300      	movs	r3, #0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <prvResetNextTaskUnblockTime+0x44>)
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295
 80041f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041fa:	e008      	b.n	800420e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <prvResetNextTaskUnblockTime+0x40>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4a04      	ldr	r2, [pc, #16]	; (800421c <prvResetNextTaskUnblockTime+0x44>)
 800420c:	6013      	str	r3, [r2, #0]
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr
 8004218:	20000920 	.word	0x20000920
 800421c:	20000988 	.word	0x20000988

08004220 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800422a:	4b29      	ldr	r3, [pc, #164]	; (80042d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004230:	4b28      	ldr	r3, [pc, #160]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff f983 	bl	8003542 <uxListRemove>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	2201      	movs	r2, #1
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4013      	ands	r3, r2
 8004256:	4a20      	ldr	r2, [pc, #128]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004258:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d10a      	bne.n	8004278 <prvAddCurrentTaskToDelayedList+0x58>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004268:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3304      	adds	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	481a      	ldr	r0, [pc, #104]	; (80042dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004272:	f7ff f90b 	bl	800348c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004276:	e026      	b.n	80042c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	429a      	cmp	r2, r3
 800428e:	d209      	bcs.n	80042a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7ff f918 	bl	80034d2 <vListInsert>
}
 80042a2:	e010      	b.n	80042c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7ff f90e 	bl	80034d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042b6:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d202      	bcs.n	80042c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042c0:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	6013      	str	r3, [r2, #0]
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	2000096c 	.word	0x2000096c
 80042d4:	20000854 	.word	0x20000854
 80042d8:	20000970 	.word	0x20000970
 80042dc:	20000954 	.word	0x20000954
 80042e0:	20000924 	.word	0x20000924
 80042e4:	20000920 	.word	0x20000920
 80042e8:	20000988 	.word	0x20000988

080042ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3b04      	subs	r3, #4
 80042fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3b04      	subs	r3, #4
 800430a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b04      	subs	r3, #4
 800431a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800431c:	4a08      	ldr	r2, [pc, #32]	; (8004340 <pxPortInitialiseStack+0x54>)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b14      	subs	r3, #20
 8004326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b20      	subs	r3, #32
 8004332:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004334:	68fb      	ldr	r3, [r7, #12]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	08004345 	.word	0x08004345

08004344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <prvTaskExitError+0x4c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d009      	beq.n	800436c <prvTaskExitError+0x28>
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e7fe      	b.n	800436a <prvTaskExitError+0x26>
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800437e:	bf00      	nop
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0fc      	beq.n	8004380 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr
 8004390:	2000040c 	.word	0x2000040c
	...

080043a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <pxCurrentTCBConst2>)
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	6808      	ldr	r0, [r1, #0]
 80043a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043aa:	f380 8809 	msr	PSP, r0
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8811 	msr	BASEPRI, r0
 80043ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80043be:	4770      	bx	lr

080043c0 <pxCurrentTCBConst2>:
 80043c0:	20000854 	.word	0x20000854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop

080043c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80043c8:	4806      	ldr	r0, [pc, #24]	; (80043e4 <prvPortStartFirstTask+0x1c>)
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	6800      	ldr	r0, [r0, #0]
 80043ce:	f380 8808 	msr	MSP, r0
 80043d2:	b662      	cpsie	i
 80043d4:	b661      	cpsie	f
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	df00      	svc	0
 80043e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043e2:	bf00      	nop
 80043e4:	e000ed08 	.word	0xe000ed08

080043e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043ee:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <xPortStartScheduler+0xcc>)
 80043f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	22ff      	movs	r2, #255	; 0xff
 80043fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004410:	b2da      	uxtb	r2, r3
 8004412:	4b29      	ldr	r3, [pc, #164]	; (80044b8 <xPortStartScheduler+0xd0>)
 8004414:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004416:	4b29      	ldr	r3, [pc, #164]	; (80044bc <xPortStartScheduler+0xd4>)
 8004418:	2207      	movs	r2, #7
 800441a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800441c:	e009      	b.n	8004432 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800441e:	4b27      	ldr	r3, [pc, #156]	; (80044bc <xPortStartScheduler+0xd4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3b01      	subs	r3, #1
 8004424:	4a25      	ldr	r2, [pc, #148]	; (80044bc <xPortStartScheduler+0xd4>)
 8004426:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d0ef      	beq.n	800441e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800443e:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <xPortStartScheduler+0xd4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1c3 0307 	rsb	r3, r3, #7
 8004446:	2b04      	cmp	r3, #4
 8004448:	d009      	beq.n	800445e <xPortStartScheduler+0x76>
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	e7fe      	b.n	800445c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800445e:	4b17      	ldr	r3, [pc, #92]	; (80044bc <xPortStartScheduler+0xd4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <xPortStartScheduler+0xd4>)
 8004466:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004468:	4b14      	ldr	r3, [pc, #80]	; (80044bc <xPortStartScheduler+0xd4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004470:	4a12      	ldr	r2, [pc, #72]	; (80044bc <xPortStartScheduler+0xd4>)
 8004472:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <xPortStartScheduler+0xd8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0f      	ldr	r2, [pc, #60]	; (80044c0 <xPortStartScheduler+0xd8>)
 8004482:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004486:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004488:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <xPortStartScheduler+0xd8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <xPortStartScheduler+0xd8>)
 800448e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004492:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004494:	f000 f8b0 	bl	80045f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <xPortStartScheduler+0xdc>)
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800449e:	f7ff ff93 	bl	80043c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044a2:	f7ff fd2b 	bl	8003efc <vTaskSwitchContext>
	prvTaskExitError();
 80044a6:	f7ff ff4d 	bl	8004344 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	e000e400 	.word	0xe000e400
 80044b8:	20000994 	.word	0x20000994
 80044bc:	20000998 	.word	0x20000998
 80044c0:	e000ed20 	.word	0xe000ed20
 80044c4:	2000040c 	.word	0x2000040c

080044c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <vPortEnterCritical+0x54>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3301      	adds	r3, #1
 80044e6:	4a0d      	ldr	r2, [pc, #52]	; (800451c <vPortEnterCritical+0x54>)
 80044e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <vPortEnterCritical+0x54>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10e      	bne.n	8004510 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <vPortEnterCritical+0x58>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <vPortEnterCritical+0x48>
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	e7fe      	b.n	800450e <vPortEnterCritical+0x46>
	}
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	2000040c 	.word	0x2000040c
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <vPortExitCritical+0x48>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <vPortExitCritical+0x22>
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	e7fe      	b.n	8004544 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <vPortExitCritical+0x48>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	4a07      	ldr	r2, [pc, #28]	; (800456c <vPortExitCritical+0x48>)
 800454e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004550:	4b06      	ldr	r3, [pc, #24]	; (800456c <vPortExitCritical+0x48>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d104      	bne.n	8004562 <vPortExitCritical+0x3e>
 8004558:	2300      	movs	r3, #0
 800455a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	2000040c 	.word	0x2000040c

08004570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004570:	f3ef 8009 	mrs	r0, PSP
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <pxCurrentTCBConst>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004580:	6010      	str	r0, [r2, #0]
 8004582:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004586:	f04f 0050 	mov.w	r0, #80	; 0x50
 800458a:	f380 8811 	msr	BASEPRI, r0
 800458e:	f7ff fcb5 	bl	8003efc <vTaskSwitchContext>
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8811 	msr	BASEPRI, r0
 800459a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	6808      	ldr	r0, [r1, #0]
 80045a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045a6:	f380 8809 	msr	PSP, r0
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	4770      	bx	lr

080045b0 <pxCurrentTCBConst>:
 80045b0:	20000854 	.word	0x20000854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045d0:	f7ff fbd8 	bl	8003d84 <xTaskIncrementTick>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045da:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <SysTick_Handler+0x3c>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045fc:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <vPortSetupTimerInterrupt+0x30>)
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <vPortSetupTimerInterrupt+0x34>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004608:	4b09      	ldr	r3, [pc, #36]	; (8004630 <vPortSetupTimerInterrupt+0x38>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a09      	ldr	r2, [pc, #36]	; (8004634 <vPortSetupTimerInterrupt+0x3c>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	4a08      	ldr	r2, [pc, #32]	; (8004638 <vPortSetupTimerInterrupt+0x40>)
 8004616:	3b01      	subs	r3, #1
 8004618:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800461a:	4b03      	ldr	r3, [pc, #12]	; (8004628 <vPortSetupTimerInterrupt+0x30>)
 800461c:	2207      	movs	r2, #7
 800461e:	601a      	str	r2, [r3, #0]
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	e000e010 	.word	0xe000e010
 800462c:	e000e018 	.word	0xe000e018
 8004630:	20000400 	.word	0x20000400
 8004634:	10624dd3 	.word	0x10624dd3
 8004638:	e000e014 	.word	0xe000e014

0800463c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004648:	f7ff faf2 	bl	8003c30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800464c:	4b57      	ldr	r3, [pc, #348]	; (80047ac <pvPortMalloc+0x170>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004654:	f000 f90c 	bl	8004870 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004658:	4b55      	ldr	r3, [pc, #340]	; (80047b0 <pvPortMalloc+0x174>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	f040 808c 	bne.w	800477e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01c      	beq.n	80046a6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800466c:	2208      	movs	r2, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	2b00      	cmp	r3, #0
 800467c:	d013      	beq.n	80046a6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f023 0307 	bic.w	r3, r3, #7
 8004684:	3308      	adds	r3, #8
 8004686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <pvPortMalloc+0x6a>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e7fe      	b.n	80046a4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d068      	beq.n	800477e <pvPortMalloc+0x142>
 80046ac:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <pvPortMalloc+0x178>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d863      	bhi.n	800477e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046b6:	4b40      	ldr	r3, [pc, #256]	; (80047b8 <pvPortMalloc+0x17c>)
 80046b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046ba:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <pvPortMalloc+0x17c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046c0:	e004      	b.n	80046cc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d903      	bls.n	80046de <pvPortMalloc+0xa2>
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f1      	bne.n	80046c2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046de:	4b33      	ldr	r3, [pc, #204]	; (80047ac <pvPortMalloc+0x170>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d04a      	beq.n	800477e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2208      	movs	r2, #8
 80046ee:	4413      	add	r3, r2
 80046f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	1ad2      	subs	r2, r2, r3
 8004702:	2308      	movs	r3, #8
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	429a      	cmp	r2, r3
 8004708:	d91e      	bls.n	8004748 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800470a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	2b00      	cmp	r3, #0
 800471a:	d009      	beq.n	8004730 <pvPortMalloc+0xf4>
 800471c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	e7fe      	b.n	800472e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004742:	69b8      	ldr	r0, [r7, #24]
 8004744:	f000 f8f6 	bl	8004934 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004748:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <pvPortMalloc+0x178>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <pvPortMalloc+0x178>)
 8004754:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004756:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <pvPortMalloc+0x178>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b18      	ldr	r3, [pc, #96]	; (80047bc <pvPortMalloc+0x180>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d203      	bcs.n	800476a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004762:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <pvPortMalloc+0x178>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a15      	ldr	r2, [pc, #84]	; (80047bc <pvPortMalloc+0x180>)
 8004768:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <pvPortMalloc+0x174>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	431a      	orrs	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800477e:	f7ff fa65 	bl	8003c4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <pvPortMalloc+0x164>
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	e7fe      	b.n	800479e <pvPortMalloc+0x162>
	return pvReturn;
 80047a0:	69fb      	ldr	r3, [r7, #28]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3728      	adds	r7, #40	; 0x28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200015a4 	.word	0x200015a4
 80047b0:	200015b0 	.word	0x200015b0
 80047b4:	200015a8 	.word	0x200015a8
 80047b8:	2000159c 	.word	0x2000159c
 80047bc:	200015ac 	.word	0x200015ac

080047c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d046      	beq.n	8004860 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047d2:	2308      	movs	r3, #8
 80047d4:	425b      	negs	r3, r3
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4413      	add	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	4b20      	ldr	r3, [pc, #128]	; (8004868 <vPortFree+0xa8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <vPortFree+0x42>
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e7fe      	b.n	8004800 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <vPortFree+0x5e>
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	e7fe      	b.n	800481c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	4b11      	ldr	r3, [pc, #68]	; (8004868 <vPortFree+0xa8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d019      	beq.n	8004860 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d115      	bne.n	8004860 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <vPortFree+0xa8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	43db      	mvns	r3, r3
 800483e:	401a      	ands	r2, r3
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004844:	f7ff f9f4 	bl	8003c30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	4b07      	ldr	r3, [pc, #28]	; (800486c <vPortFree+0xac>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4413      	add	r3, r2
 8004852:	4a06      	ldr	r2, [pc, #24]	; (800486c <vPortFree+0xac>)
 8004854:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004856:	6938      	ldr	r0, [r7, #16]
 8004858:	f000 f86c 	bl	8004934 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800485c:	f7ff f9f6 	bl	8003c4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004860:	bf00      	nop
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	200015b0 	.word	0x200015b0
 800486c:	200015a8 	.word	0x200015a8

08004870 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004876:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800487a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800487c:	4b27      	ldr	r3, [pc, #156]	; (800491c <prvHeapInit+0xac>)
 800487e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00c      	beq.n	80048a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3307      	adds	r3, #7
 800488e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0307 	bic.w	r3, r3, #7
 8004896:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	4a1f      	ldr	r2, [pc, #124]	; (800491c <prvHeapInit+0xac>)
 80048a0:	4413      	add	r3, r2
 80048a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048a8:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <prvHeapInit+0xb0>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048ae:	4b1c      	ldr	r3, [pc, #112]	; (8004920 <prvHeapInit+0xb0>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	4413      	add	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048bc:	2208      	movs	r2, #8
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0307 	bic.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a15      	ldr	r2, [pc, #84]	; (8004924 <prvHeapInit+0xb4>)
 80048d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <prvHeapInit+0xb4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048da:	4b12      	ldr	r3, [pc, #72]	; (8004924 <prvHeapInit+0xb4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <prvHeapInit+0xb4>)
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4a0a      	ldr	r2, [pc, #40]	; (8004928 <prvHeapInit+0xb8>)
 80048fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4a09      	ldr	r2, [pc, #36]	; (800492c <prvHeapInit+0xbc>)
 8004906:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <prvHeapInit+0xc0>)
 800490a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800490e:	601a      	str	r2, [r3, #0]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	2000099c 	.word	0x2000099c
 8004920:	2000159c 	.word	0x2000159c
 8004924:	200015a4 	.word	0x200015a4
 8004928:	200015ac 	.word	0x200015ac
 800492c:	200015a8 	.word	0x200015a8
 8004930:	200015b0 	.word	0x200015b0

08004934 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800493c:	4b27      	ldr	r3, [pc, #156]	; (80049dc <prvInsertBlockIntoFreeList+0xa8>)
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e002      	b.n	8004948 <prvInsertBlockIntoFreeList+0x14>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	429a      	cmp	r2, r3
 8004950:	d8f7      	bhi.n	8004942 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	4413      	add	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	429a      	cmp	r2, r3
 8004962:	d108      	bne.n	8004976 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	441a      	add	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	441a      	add	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d118      	bne.n	80049bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <prvInsertBlockIntoFreeList+0xac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d00d      	beq.n	80049b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	441a      	add	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	e008      	b.n	80049c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <prvInsertBlockIntoFreeList+0xac>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e003      	b.n	80049c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d002      	beq.n	80049d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	2000159c 	.word	0x2000159c
 80049e0:	200015a4 	.word	0x200015a4

080049e4 <__errno>:
 80049e4:	4b01      	ldr	r3, [pc, #4]	; (80049ec <__errno+0x8>)
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20000410 	.word	0x20000410

080049f0 <__libc_init_array>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	2500      	movs	r5, #0
 80049f4:	4e0c      	ldr	r6, [pc, #48]	; (8004a28 <__libc_init_array+0x38>)
 80049f6:	4c0d      	ldr	r4, [pc, #52]	; (8004a2c <__libc_init_array+0x3c>)
 80049f8:	1ba4      	subs	r4, r4, r6
 80049fa:	10a4      	asrs	r4, r4, #2
 80049fc:	42a5      	cmp	r5, r4
 80049fe:	d109      	bne.n	8004a14 <__libc_init_array+0x24>
 8004a00:	f001 fd3a 	bl	8006478 <_init>
 8004a04:	2500      	movs	r5, #0
 8004a06:	4e0a      	ldr	r6, [pc, #40]	; (8004a30 <__libc_init_array+0x40>)
 8004a08:	4c0a      	ldr	r4, [pc, #40]	; (8004a34 <__libc_init_array+0x44>)
 8004a0a:	1ba4      	subs	r4, r4, r6
 8004a0c:	10a4      	asrs	r4, r4, #2
 8004a0e:	42a5      	cmp	r5, r4
 8004a10:	d105      	bne.n	8004a1e <__libc_init_array+0x2e>
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a18:	4798      	blx	r3
 8004a1a:	3501      	adds	r5, #1
 8004a1c:	e7ee      	b.n	80049fc <__libc_init_array+0xc>
 8004a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a22:	4798      	blx	r3
 8004a24:	3501      	adds	r5, #1
 8004a26:	e7f2      	b.n	8004a0e <__libc_init_array+0x1e>
 8004a28:	08006fc8 	.word	0x08006fc8
 8004a2c:	08006fc8 	.word	0x08006fc8
 8004a30:	08006fc8 	.word	0x08006fc8
 8004a34:	08006fcc 	.word	0x08006fcc

08004a38 <memcpy>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	1e43      	subs	r3, r0, #1
 8004a3c:	440a      	add	r2, r1
 8004a3e:	4291      	cmp	r1, r2
 8004a40:	d100      	bne.n	8004a44 <memcpy+0xc>
 8004a42:	bd10      	pop	{r4, pc}
 8004a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a4c:	e7f7      	b.n	8004a3e <memcpy+0x6>

08004a4e <memset>:
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4402      	add	r2, r0
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d100      	bne.n	8004a58 <memset+0xa>
 8004a56:	4770      	bx	lr
 8004a58:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5c:	e7f9      	b.n	8004a52 <memset+0x4>

08004a5e <__cvt>:
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	461e      	mov	r6, r3
 8004a66:	bfbb      	ittet	lt
 8004a68:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a6c:	461e      	movlt	r6, r3
 8004a6e:	2300      	movge	r3, #0
 8004a70:	232d      	movlt	r3, #45	; 0x2d
 8004a72:	b088      	sub	sp, #32
 8004a74:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004a76:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004a7a:	f027 0720 	bic.w	r7, r7, #32
 8004a7e:	2f46      	cmp	r7, #70	; 0x46
 8004a80:	4614      	mov	r4, r2
 8004a82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a84:	700b      	strb	r3, [r1, #0]
 8004a86:	d004      	beq.n	8004a92 <__cvt+0x34>
 8004a88:	2f45      	cmp	r7, #69	; 0x45
 8004a8a:	d100      	bne.n	8004a8e <__cvt+0x30>
 8004a8c:	3501      	adds	r5, #1
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e000      	b.n	8004a94 <__cvt+0x36>
 8004a92:	2303      	movs	r3, #3
 8004a94:	aa07      	add	r2, sp, #28
 8004a96:	9204      	str	r2, [sp, #16]
 8004a98:	aa06      	add	r2, sp, #24
 8004a9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a9e:	e9cd 3500 	strd	r3, r5, [sp]
 8004aa2:	4622      	mov	r2, r4
 8004aa4:	4633      	mov	r3, r6
 8004aa6:	f000 fba7 	bl	80051f8 <_dtoa_r>
 8004aaa:	2f47      	cmp	r7, #71	; 0x47
 8004aac:	4680      	mov	r8, r0
 8004aae:	d102      	bne.n	8004ab6 <__cvt+0x58>
 8004ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ab2:	07db      	lsls	r3, r3, #31
 8004ab4:	d526      	bpl.n	8004b04 <__cvt+0xa6>
 8004ab6:	2f46      	cmp	r7, #70	; 0x46
 8004ab8:	eb08 0905 	add.w	r9, r8, r5
 8004abc:	d111      	bne.n	8004ae2 <__cvt+0x84>
 8004abe:	f898 3000 	ldrb.w	r3, [r8]
 8004ac2:	2b30      	cmp	r3, #48	; 0x30
 8004ac4:	d10a      	bne.n	8004adc <__cvt+0x7e>
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2300      	movs	r3, #0
 8004aca:	4620      	mov	r0, r4
 8004acc:	4631      	mov	r1, r6
 8004ace:	f7fb ff6b 	bl	80009a8 <__aeabi_dcmpeq>
 8004ad2:	b918      	cbnz	r0, 8004adc <__cvt+0x7e>
 8004ad4:	f1c5 0501 	rsb	r5, r5, #1
 8004ad8:	f8ca 5000 	str.w	r5, [sl]
 8004adc:	f8da 3000 	ldr.w	r3, [sl]
 8004ae0:	4499      	add	r9, r3
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	4631      	mov	r1, r6
 8004aea:	f7fb ff5d 	bl	80009a8 <__aeabi_dcmpeq>
 8004aee:	b938      	cbnz	r0, 8004b00 <__cvt+0xa2>
 8004af0:	2230      	movs	r2, #48	; 0x30
 8004af2:	9b07      	ldr	r3, [sp, #28]
 8004af4:	454b      	cmp	r3, r9
 8004af6:	d205      	bcs.n	8004b04 <__cvt+0xa6>
 8004af8:	1c59      	adds	r1, r3, #1
 8004afa:	9107      	str	r1, [sp, #28]
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e7f8      	b.n	8004af2 <__cvt+0x94>
 8004b00:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b04:	4640      	mov	r0, r8
 8004b06:	9b07      	ldr	r3, [sp, #28]
 8004b08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b0a:	eba3 0308 	sub.w	r3, r3, r8
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	b008      	add	sp, #32
 8004b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004b16 <__exponent>:
 8004b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	bfb4      	ite	lt
 8004b1c:	232d      	movlt	r3, #45	; 0x2d
 8004b1e:	232b      	movge	r3, #43	; 0x2b
 8004b20:	4604      	mov	r4, r0
 8004b22:	bfb8      	it	lt
 8004b24:	4249      	neglt	r1, r1
 8004b26:	2909      	cmp	r1, #9
 8004b28:	f804 2b02 	strb.w	r2, [r4], #2
 8004b2c:	7043      	strb	r3, [r0, #1]
 8004b2e:	dd21      	ble.n	8004b74 <__exponent+0x5e>
 8004b30:	f10d 0307 	add.w	r3, sp, #7
 8004b34:	461f      	mov	r7, r3
 8004b36:	260a      	movs	r6, #10
 8004b38:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b3c:	fb06 1115 	mls	r1, r6, r5, r1
 8004b40:	2d09      	cmp	r5, #9
 8004b42:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004b46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b4a:	f103 32ff 	add.w	r2, r3, #4294967295
 8004b4e:	4629      	mov	r1, r5
 8004b50:	dc09      	bgt.n	8004b66 <__exponent+0x50>
 8004b52:	3130      	adds	r1, #48	; 0x30
 8004b54:	3b02      	subs	r3, #2
 8004b56:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004b5a:	42bb      	cmp	r3, r7
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	d304      	bcc.n	8004b6a <__exponent+0x54>
 8004b60:	1a10      	subs	r0, r2, r0
 8004b62:	b003      	add	sp, #12
 8004b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b66:	4613      	mov	r3, r2
 8004b68:	e7e6      	b.n	8004b38 <__exponent+0x22>
 8004b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b6e:	f804 2b01 	strb.w	r2, [r4], #1
 8004b72:	e7f2      	b.n	8004b5a <__exponent+0x44>
 8004b74:	2330      	movs	r3, #48	; 0x30
 8004b76:	4419      	add	r1, r3
 8004b78:	7083      	strb	r3, [r0, #2]
 8004b7a:	1d02      	adds	r2, r0, #4
 8004b7c:	70c1      	strb	r1, [r0, #3]
 8004b7e:	e7ef      	b.n	8004b60 <__exponent+0x4a>

08004b80 <_printf_float>:
 8004b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b84:	b091      	sub	sp, #68	; 0x44
 8004b86:	460c      	mov	r4, r1
 8004b88:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004b8a:	4693      	mov	fp, r2
 8004b8c:	461e      	mov	r6, r3
 8004b8e:	4605      	mov	r5, r0
 8004b90:	f001 f8e6 	bl	8005d60 <_localeconv_r>
 8004b94:	6803      	ldr	r3, [r0, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9a:	f7fb fad9 	bl	8000150 <strlen>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	930e      	str	r3, [sp, #56]	; 0x38
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	900a      	str	r0, [sp, #40]	; 0x28
 8004ba6:	3307      	adds	r3, #7
 8004ba8:	f023 0307 	bic.w	r3, r3, #7
 8004bac:	f103 0208 	add.w	r2, r3, #8
 8004bb0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004bb4:	f8d4 a000 	ldr.w	sl, [r4]
 8004bb8:	603a      	str	r2, [r7, #0]
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bc2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004bc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd0:	4ba6      	ldr	r3, [pc, #664]	; (8004e6c <_printf_float+0x2ec>)
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bd6:	f7fb ff19 	bl	8000a0c <__aeabi_dcmpun>
 8004bda:	bb68      	cbnz	r0, 8004c38 <_printf_float+0xb8>
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004be0:	4ba2      	ldr	r3, [pc, #648]	; (8004e6c <_printf_float+0x2ec>)
 8004be2:	4638      	mov	r0, r7
 8004be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004be6:	f7fb fef3 	bl	80009d0 <__aeabi_dcmple>
 8004bea:	bb28      	cbnz	r0, 8004c38 <_printf_float+0xb8>
 8004bec:	2200      	movs	r2, #0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	f7fb fee2 	bl	80009bc <__aeabi_dcmplt>
 8004bf8:	b110      	cbz	r0, 8004c00 <_printf_float+0x80>
 8004bfa:	232d      	movs	r3, #45	; 0x2d
 8004bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c00:	4f9b      	ldr	r7, [pc, #620]	; (8004e70 <_printf_float+0x2f0>)
 8004c02:	4b9c      	ldr	r3, [pc, #624]	; (8004e74 <_printf_float+0x2f4>)
 8004c04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c08:	bf98      	it	ls
 8004c0a:	461f      	movls	r7, r3
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	f04f 0900 	mov.w	r9, #0
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	f02a 0304 	bic.w	r3, sl, #4
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	9600      	str	r6, [sp, #0]
 8004c1c:	465b      	mov	r3, fp
 8004c1e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c20:	4621      	mov	r1, r4
 8004c22:	4628      	mov	r0, r5
 8004c24:	f000 f9e2 	bl	8004fec <_printf_common>
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f040 8090 	bne.w	8004d4e <_printf_float+0x1ce>
 8004c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c32:	b011      	add	sp, #68	; 0x44
 8004c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c38:	463a      	mov	r2, r7
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	4649      	mov	r1, r9
 8004c40:	f7fb fee4 	bl	8000a0c <__aeabi_dcmpun>
 8004c44:	b110      	cbz	r0, 8004c4c <_printf_float+0xcc>
 8004c46:	4f8c      	ldr	r7, [pc, #560]	; (8004e78 <_printf_float+0x2f8>)
 8004c48:	4b8c      	ldr	r3, [pc, #560]	; (8004e7c <_printf_float+0x2fc>)
 8004c4a:	e7db      	b.n	8004c04 <_printf_float+0x84>
 8004c4c:	6863      	ldr	r3, [r4, #4]
 8004c4e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004c52:	1c59      	adds	r1, r3, #1
 8004c54:	a80d      	add	r0, sp, #52	; 0x34
 8004c56:	a90e      	add	r1, sp, #56	; 0x38
 8004c58:	d140      	bne.n	8004cdc <_printf_float+0x15c>
 8004c5a:	2306      	movs	r3, #6
 8004c5c:	6063      	str	r3, [r4, #4]
 8004c5e:	f04f 0c00 	mov.w	ip, #0
 8004c62:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004c66:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004c6a:	6863      	ldr	r3, [r4, #4]
 8004c6c:	6022      	str	r2, [r4, #0]
 8004c6e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	463a      	mov	r2, r7
 8004c76:	464b      	mov	r3, r9
 8004c78:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f7ff feee 	bl	8004a5e <__cvt>
 8004c82:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004c86:	2b47      	cmp	r3, #71	; 0x47
 8004c88:	4607      	mov	r7, r0
 8004c8a:	d109      	bne.n	8004ca0 <_printf_float+0x120>
 8004c8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c8e:	1cd8      	adds	r0, r3, #3
 8004c90:	db02      	blt.n	8004c98 <_printf_float+0x118>
 8004c92:	6862      	ldr	r2, [r4, #4]
 8004c94:	4293      	cmp	r3, r2
 8004c96:	dd47      	ble.n	8004d28 <_printf_float+0x1a8>
 8004c98:	f1a8 0802 	sub.w	r8, r8, #2
 8004c9c:	fa5f f888 	uxtb.w	r8, r8
 8004ca0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004ca4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ca6:	d824      	bhi.n	8004cf2 <_printf_float+0x172>
 8004ca8:	3901      	subs	r1, #1
 8004caa:	4642      	mov	r2, r8
 8004cac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cb0:	910d      	str	r1, [sp, #52]	; 0x34
 8004cb2:	f7ff ff30 	bl	8004b16 <__exponent>
 8004cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cb8:	4681      	mov	r9, r0
 8004cba:	1813      	adds	r3, r2, r0
 8004cbc:	2a01      	cmp	r2, #1
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	dc02      	bgt.n	8004cc8 <_printf_float+0x148>
 8004cc2:	6822      	ldr	r2, [r4, #0]
 8004cc4:	07d1      	lsls	r1, r2, #31
 8004cc6:	d501      	bpl.n	8004ccc <_printf_float+0x14c>
 8004cc8:	3301      	adds	r3, #1
 8004cca:	6123      	str	r3, [r4, #16]
 8004ccc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0a2      	beq.n	8004c1a <_printf_float+0x9a>
 8004cd4:	232d      	movs	r3, #45	; 0x2d
 8004cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cda:	e79e      	b.n	8004c1a <_printf_float+0x9a>
 8004cdc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004ce0:	f000 816e 	beq.w	8004fc0 <_printf_float+0x440>
 8004ce4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ce8:	d1b9      	bne.n	8004c5e <_printf_float+0xde>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1b7      	bne.n	8004c5e <_printf_float+0xde>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e7b4      	b.n	8004c5c <_printf_float+0xdc>
 8004cf2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004cf6:	d119      	bne.n	8004d2c <_printf_float+0x1ac>
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	6863      	ldr	r3, [r4, #4]
 8004cfc:	dd0c      	ble.n	8004d18 <_printf_float+0x198>
 8004cfe:	6121      	str	r1, [r4, #16]
 8004d00:	b913      	cbnz	r3, 8004d08 <_printf_float+0x188>
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	07d2      	lsls	r2, r2, #31
 8004d06:	d502      	bpl.n	8004d0e <_printf_float+0x18e>
 8004d08:	3301      	adds	r3, #1
 8004d0a:	440b      	add	r3, r1
 8004d0c:	6123      	str	r3, [r4, #16]
 8004d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d10:	f04f 0900 	mov.w	r9, #0
 8004d14:	65a3      	str	r3, [r4, #88]	; 0x58
 8004d16:	e7d9      	b.n	8004ccc <_printf_float+0x14c>
 8004d18:	b913      	cbnz	r3, 8004d20 <_printf_float+0x1a0>
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	07d0      	lsls	r0, r2, #31
 8004d1e:	d501      	bpl.n	8004d24 <_printf_float+0x1a4>
 8004d20:	3302      	adds	r3, #2
 8004d22:	e7f3      	b.n	8004d0c <_printf_float+0x18c>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e7f1      	b.n	8004d0c <_printf_float+0x18c>
 8004d28:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004d2c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d30:	4293      	cmp	r3, r2
 8004d32:	db05      	blt.n	8004d40 <_printf_float+0x1c0>
 8004d34:	6822      	ldr	r2, [r4, #0]
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	07d1      	lsls	r1, r2, #31
 8004d3a:	d5e8      	bpl.n	8004d0e <_printf_float+0x18e>
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	e7e5      	b.n	8004d0c <_printf_float+0x18c>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bfcc      	ite	gt
 8004d44:	2301      	movgt	r3, #1
 8004d46:	f1c3 0302 	rsble	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	e7de      	b.n	8004d0c <_printf_float+0x18c>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	055a      	lsls	r2, r3, #21
 8004d52:	d407      	bmi.n	8004d64 <_printf_float+0x1e4>
 8004d54:	6923      	ldr	r3, [r4, #16]
 8004d56:	463a      	mov	r2, r7
 8004d58:	4659      	mov	r1, fp
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	47b0      	blx	r6
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d129      	bne.n	8004db6 <_printf_float+0x236>
 8004d62:	e764      	b.n	8004c2e <_printf_float+0xae>
 8004d64:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004d68:	f240 80d7 	bls.w	8004f1a <_printf_float+0x39a>
 8004d6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d70:	2200      	movs	r2, #0
 8004d72:	2300      	movs	r3, #0
 8004d74:	f7fb fe18 	bl	80009a8 <__aeabi_dcmpeq>
 8004d78:	b388      	cbz	r0, 8004dde <_printf_float+0x25e>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4a40      	ldr	r2, [pc, #256]	; (8004e80 <_printf_float+0x300>)
 8004d7e:	4659      	mov	r1, fp
 8004d80:	4628      	mov	r0, r5
 8004d82:	47b0      	blx	r6
 8004d84:	3001      	adds	r0, #1
 8004d86:	f43f af52 	beq.w	8004c2e <_printf_float+0xae>
 8004d8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	db02      	blt.n	8004d98 <_printf_float+0x218>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	07d8      	lsls	r0, r3, #31
 8004d96:	d50e      	bpl.n	8004db6 <_printf_float+0x236>
 8004d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	4628      	mov	r0, r5
 8004da0:	47b0      	blx	r6
 8004da2:	3001      	adds	r0, #1
 8004da4:	f43f af43 	beq.w	8004c2e <_printf_float+0xae>
 8004da8:	2700      	movs	r7, #0
 8004daa:	f104 081a 	add.w	r8, r4, #26
 8004dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004db0:	3b01      	subs	r3, #1
 8004db2:	42bb      	cmp	r3, r7
 8004db4:	dc09      	bgt.n	8004dca <_printf_float+0x24a>
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	079f      	lsls	r7, r3, #30
 8004dba:	f100 80fd 	bmi.w	8004fb8 <_printf_float+0x438>
 8004dbe:	68e0      	ldr	r0, [r4, #12]
 8004dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dc2:	4298      	cmp	r0, r3
 8004dc4:	bfb8      	it	lt
 8004dc6:	4618      	movlt	r0, r3
 8004dc8:	e733      	b.n	8004c32 <_printf_float+0xb2>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4642      	mov	r2, r8
 8004dce:	4659      	mov	r1, fp
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b0      	blx	r6
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	f43f af2a 	beq.w	8004c2e <_printf_float+0xae>
 8004dda:	3701      	adds	r7, #1
 8004ddc:	e7e7      	b.n	8004dae <_printf_float+0x22e>
 8004dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	dc2b      	bgt.n	8004e3c <_printf_float+0x2bc>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4a26      	ldr	r2, [pc, #152]	; (8004e80 <_printf_float+0x300>)
 8004de8:	4659      	mov	r1, fp
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b0      	blx	r6
 8004dee:	3001      	adds	r0, #1
 8004df0:	f43f af1d 	beq.w	8004c2e <_printf_float+0xae>
 8004df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004df6:	b923      	cbnz	r3, 8004e02 <_printf_float+0x282>
 8004df8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dfa:	b913      	cbnz	r3, 8004e02 <_printf_float+0x282>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	07d9      	lsls	r1, r3, #31
 8004e00:	d5d9      	bpl.n	8004db6 <_printf_float+0x236>
 8004e02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e06:	4659      	mov	r1, fp
 8004e08:	4628      	mov	r0, r5
 8004e0a:	47b0      	blx	r6
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	f43f af0e 	beq.w	8004c2e <_printf_float+0xae>
 8004e12:	f04f 0800 	mov.w	r8, #0
 8004e16:	f104 091a 	add.w	r9, r4, #26
 8004e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e1c:	425b      	negs	r3, r3
 8004e1e:	4543      	cmp	r3, r8
 8004e20:	dc01      	bgt.n	8004e26 <_printf_float+0x2a6>
 8004e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e24:	e797      	b.n	8004d56 <_printf_float+0x1d6>
 8004e26:	2301      	movs	r3, #1
 8004e28:	464a      	mov	r2, r9
 8004e2a:	4659      	mov	r1, fp
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b0      	blx	r6
 8004e30:	3001      	adds	r0, #1
 8004e32:	f43f aefc 	beq.w	8004c2e <_printf_float+0xae>
 8004e36:	f108 0801 	add.w	r8, r8, #1
 8004e3a:	e7ee      	b.n	8004e1a <_printf_float+0x29a>
 8004e3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e40:	429a      	cmp	r2, r3
 8004e42:	bfa8      	it	ge
 8004e44:	461a      	movge	r2, r3
 8004e46:	2a00      	cmp	r2, #0
 8004e48:	4690      	mov	r8, r2
 8004e4a:	dd07      	ble.n	8004e5c <_printf_float+0x2dc>
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	4659      	mov	r1, fp
 8004e50:	463a      	mov	r2, r7
 8004e52:	4628      	mov	r0, r5
 8004e54:	47b0      	blx	r6
 8004e56:	3001      	adds	r0, #1
 8004e58:	f43f aee9 	beq.w	8004c2e <_printf_float+0xae>
 8004e5c:	f104 031a 	add.w	r3, r4, #26
 8004e60:	f04f 0a00 	mov.w	sl, #0
 8004e64:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004e68:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e6a:	e015      	b.n	8004e98 <_printf_float+0x318>
 8004e6c:	7fefffff 	.word	0x7fefffff
 8004e70:	08006d40 	.word	0x08006d40
 8004e74:	08006d3c 	.word	0x08006d3c
 8004e78:	08006d48 	.word	0x08006d48
 8004e7c:	08006d44 	.word	0x08006d44
 8004e80:	08006d4c 	.word	0x08006d4c
 8004e84:	2301      	movs	r3, #1
 8004e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e88:	4659      	mov	r1, fp
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b0      	blx	r6
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f43f aecd 	beq.w	8004c2e <_printf_float+0xae>
 8004e94:	f10a 0a01 	add.w	sl, sl, #1
 8004e98:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004e9c:	eba9 0308 	sub.w	r3, r9, r8
 8004ea0:	4553      	cmp	r3, sl
 8004ea2:	dcef      	bgt.n	8004e84 <_printf_float+0x304>
 8004ea4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	444f      	add	r7, r9
 8004eac:	db14      	blt.n	8004ed8 <_printf_float+0x358>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	07da      	lsls	r2, r3, #31
 8004eb2:	d411      	bmi.n	8004ed8 <_printf_float+0x358>
 8004eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eb6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004eb8:	eba3 0209 	sub.w	r2, r3, r9
 8004ebc:	eba3 0901 	sub.w	r9, r3, r1
 8004ec0:	4591      	cmp	r9, r2
 8004ec2:	bfa8      	it	ge
 8004ec4:	4691      	movge	r9, r2
 8004ec6:	f1b9 0f00 	cmp.w	r9, #0
 8004eca:	dc0d      	bgt.n	8004ee8 <_printf_float+0x368>
 8004ecc:	2700      	movs	r7, #0
 8004ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ed2:	f104 081a 	add.w	r8, r4, #26
 8004ed6:	e018      	b.n	8004f0a <_printf_float+0x38a>
 8004ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004edc:	4659      	mov	r1, fp
 8004ede:	4628      	mov	r0, r5
 8004ee0:	47b0      	blx	r6
 8004ee2:	3001      	adds	r0, #1
 8004ee4:	d1e6      	bne.n	8004eb4 <_printf_float+0x334>
 8004ee6:	e6a2      	b.n	8004c2e <_printf_float+0xae>
 8004ee8:	464b      	mov	r3, r9
 8004eea:	463a      	mov	r2, r7
 8004eec:	4659      	mov	r1, fp
 8004eee:	4628      	mov	r0, r5
 8004ef0:	47b0      	blx	r6
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d1ea      	bne.n	8004ecc <_printf_float+0x34c>
 8004ef6:	e69a      	b.n	8004c2e <_printf_float+0xae>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4642      	mov	r2, r8
 8004efc:	4659      	mov	r1, fp
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b0      	blx	r6
 8004f02:	3001      	adds	r0, #1
 8004f04:	f43f ae93 	beq.w	8004c2e <_printf_float+0xae>
 8004f08:	3701      	adds	r7, #1
 8004f0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	eba3 0309 	sub.w	r3, r3, r9
 8004f14:	42bb      	cmp	r3, r7
 8004f16:	dcef      	bgt.n	8004ef8 <_printf_float+0x378>
 8004f18:	e74d      	b.n	8004db6 <_printf_float+0x236>
 8004f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f1c:	2a01      	cmp	r2, #1
 8004f1e:	dc01      	bgt.n	8004f24 <_printf_float+0x3a4>
 8004f20:	07db      	lsls	r3, r3, #31
 8004f22:	d538      	bpl.n	8004f96 <_printf_float+0x416>
 8004f24:	2301      	movs	r3, #1
 8004f26:	463a      	mov	r2, r7
 8004f28:	4659      	mov	r1, fp
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	47b0      	blx	r6
 8004f2e:	3001      	adds	r0, #1
 8004f30:	f43f ae7d 	beq.w	8004c2e <_printf_float+0xae>
 8004f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f38:	4659      	mov	r1, fp
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	47b0      	blx	r6
 8004f3e:	3001      	adds	r0, #1
 8004f40:	f107 0701 	add.w	r7, r7, #1
 8004f44:	f43f ae73 	beq.w	8004c2e <_printf_float+0xae>
 8004f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f103 38ff 	add.w	r8, r3, #4294967295
 8004f54:	2300      	movs	r3, #0
 8004f56:	f7fb fd27 	bl	80009a8 <__aeabi_dcmpeq>
 8004f5a:	b9c0      	cbnz	r0, 8004f8e <_printf_float+0x40e>
 8004f5c:	4643      	mov	r3, r8
 8004f5e:	463a      	mov	r2, r7
 8004f60:	4659      	mov	r1, fp
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b0      	blx	r6
 8004f66:	3001      	adds	r0, #1
 8004f68:	d10d      	bne.n	8004f86 <_printf_float+0x406>
 8004f6a:	e660      	b.n	8004c2e <_printf_float+0xae>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4642      	mov	r2, r8
 8004f70:	4659      	mov	r1, fp
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b0      	blx	r6
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f ae59 	beq.w	8004c2e <_printf_float+0xae>
 8004f7c:	3701      	adds	r7, #1
 8004f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f80:	3b01      	subs	r3, #1
 8004f82:	42bb      	cmp	r3, r7
 8004f84:	dcf2      	bgt.n	8004f6c <_printf_float+0x3ec>
 8004f86:	464b      	mov	r3, r9
 8004f88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f8c:	e6e4      	b.n	8004d58 <_printf_float+0x1d8>
 8004f8e:	2700      	movs	r7, #0
 8004f90:	f104 081a 	add.w	r8, r4, #26
 8004f94:	e7f3      	b.n	8004f7e <_printf_float+0x3fe>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e7e1      	b.n	8004f5e <_printf_float+0x3de>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	4659      	mov	r1, fp
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	47b0      	blx	r6
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	f43f ae42 	beq.w	8004c2e <_printf_float+0xae>
 8004faa:	3701      	adds	r7, #1
 8004fac:	68e3      	ldr	r3, [r4, #12]
 8004fae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fb0:	1a9b      	subs	r3, r3, r2
 8004fb2:	42bb      	cmp	r3, r7
 8004fb4:	dcf1      	bgt.n	8004f9a <_printf_float+0x41a>
 8004fb6:	e702      	b.n	8004dbe <_printf_float+0x23e>
 8004fb8:	2700      	movs	r7, #0
 8004fba:	f104 0819 	add.w	r8, r4, #25
 8004fbe:	e7f5      	b.n	8004fac <_printf_float+0x42c>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f43f ae94 	beq.w	8004cee <_printf_float+0x16e>
 8004fc6:	f04f 0c00 	mov.w	ip, #0
 8004fca:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004fce:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004fd2:	6022      	str	r2, [r4, #0]
 8004fd4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004fd8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	463a      	mov	r2, r7
 8004fe0:	464b      	mov	r3, r9
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f7ff fd3b 	bl	8004a5e <__cvt>
 8004fe8:	4607      	mov	r7, r0
 8004fea:	e64f      	b.n	8004c8c <_printf_float+0x10c>

08004fec <_printf_common>:
 8004fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	4691      	mov	r9, r2
 8004ff2:	461f      	mov	r7, r3
 8004ff4:	688a      	ldr	r2, [r1, #8]
 8004ff6:	690b      	ldr	r3, [r1, #16]
 8004ff8:	4606      	mov	r6, r0
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	bfb8      	it	lt
 8004ffe:	4613      	movlt	r3, r2
 8005000:	f8c9 3000 	str.w	r3, [r9]
 8005004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005008:	460c      	mov	r4, r1
 800500a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800500e:	b112      	cbz	r2, 8005016 <_printf_common+0x2a>
 8005010:	3301      	adds	r3, #1
 8005012:	f8c9 3000 	str.w	r3, [r9]
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	0699      	lsls	r1, r3, #26
 800501a:	bf42      	ittt	mi
 800501c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005020:	3302      	addmi	r3, #2
 8005022:	f8c9 3000 	strmi.w	r3, [r9]
 8005026:	6825      	ldr	r5, [r4, #0]
 8005028:	f015 0506 	ands.w	r5, r5, #6
 800502c:	d107      	bne.n	800503e <_printf_common+0x52>
 800502e:	f104 0a19 	add.w	sl, r4, #25
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	f8d9 2000 	ldr.w	r2, [r9]
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	42ab      	cmp	r3, r5
 800503c:	dc29      	bgt.n	8005092 <_printf_common+0xa6>
 800503e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	3300      	adds	r3, #0
 8005046:	bf18      	it	ne
 8005048:	2301      	movne	r3, #1
 800504a:	0692      	lsls	r2, r2, #26
 800504c:	d42e      	bmi.n	80050ac <_printf_common+0xc0>
 800504e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005052:	4639      	mov	r1, r7
 8005054:	4630      	mov	r0, r6
 8005056:	47c0      	blx	r8
 8005058:	3001      	adds	r0, #1
 800505a:	d021      	beq.n	80050a0 <_printf_common+0xb4>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	68e5      	ldr	r5, [r4, #12]
 8005060:	f003 0306 	and.w	r3, r3, #6
 8005064:	2b04      	cmp	r3, #4
 8005066:	bf18      	it	ne
 8005068:	2500      	movne	r5, #0
 800506a:	f8d9 2000 	ldr.w	r2, [r9]
 800506e:	f04f 0900 	mov.w	r9, #0
 8005072:	bf08      	it	eq
 8005074:	1aad      	subeq	r5, r5, r2
 8005076:	68a3      	ldr	r3, [r4, #8]
 8005078:	6922      	ldr	r2, [r4, #16]
 800507a:	bf08      	it	eq
 800507c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005080:	4293      	cmp	r3, r2
 8005082:	bfc4      	itt	gt
 8005084:	1a9b      	subgt	r3, r3, r2
 8005086:	18ed      	addgt	r5, r5, r3
 8005088:	341a      	adds	r4, #26
 800508a:	454d      	cmp	r5, r9
 800508c:	d11a      	bne.n	80050c4 <_printf_common+0xd8>
 800508e:	2000      	movs	r0, #0
 8005090:	e008      	b.n	80050a4 <_printf_common+0xb8>
 8005092:	2301      	movs	r3, #1
 8005094:	4652      	mov	r2, sl
 8005096:	4639      	mov	r1, r7
 8005098:	4630      	mov	r0, r6
 800509a:	47c0      	blx	r8
 800509c:	3001      	adds	r0, #1
 800509e:	d103      	bne.n	80050a8 <_printf_common+0xbc>
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	3501      	adds	r5, #1
 80050aa:	e7c2      	b.n	8005032 <_printf_common+0x46>
 80050ac:	2030      	movs	r0, #48	; 0x30
 80050ae:	18e1      	adds	r1, r4, r3
 80050b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050ba:	4422      	add	r2, r4
 80050bc:	3302      	adds	r3, #2
 80050be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050c2:	e7c4      	b.n	800504e <_printf_common+0x62>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4622      	mov	r2, r4
 80050c8:	4639      	mov	r1, r7
 80050ca:	4630      	mov	r0, r6
 80050cc:	47c0      	blx	r8
 80050ce:	3001      	adds	r0, #1
 80050d0:	d0e6      	beq.n	80050a0 <_printf_common+0xb4>
 80050d2:	f109 0901 	add.w	r9, r9, #1
 80050d6:	e7d8      	b.n	800508a <_printf_common+0x9e>

080050d8 <quorem>:
 80050d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	6903      	ldr	r3, [r0, #16]
 80050de:	690c      	ldr	r4, [r1, #16]
 80050e0:	4680      	mov	r8, r0
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	f2c0 8084 	blt.w	80051f0 <quorem+0x118>
 80050e8:	3c01      	subs	r4, #1
 80050ea:	f101 0714 	add.w	r7, r1, #20
 80050ee:	f100 0614 	add.w	r6, r0, #20
 80050f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80050f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80050fa:	3501      	adds	r5, #1
 80050fc:	fbb0 f5f5 	udiv	r5, r0, r5
 8005100:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005104:	eb06 030c 	add.w	r3, r6, ip
 8005108:	eb07 090c 	add.w	r9, r7, ip
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	b39d      	cbz	r5, 8005178 <quorem+0xa0>
 8005110:	f04f 0a00 	mov.w	sl, #0
 8005114:	4638      	mov	r0, r7
 8005116:	46b6      	mov	lr, r6
 8005118:	46d3      	mov	fp, sl
 800511a:	f850 2b04 	ldr.w	r2, [r0], #4
 800511e:	b293      	uxth	r3, r2
 8005120:	fb05 a303 	mla	r3, r5, r3, sl
 8005124:	0c12      	lsrs	r2, r2, #16
 8005126:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800512a:	fb05 a202 	mla	r2, r5, r2, sl
 800512e:	b29b      	uxth	r3, r3
 8005130:	ebab 0303 	sub.w	r3, fp, r3
 8005134:	f8de b000 	ldr.w	fp, [lr]
 8005138:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800513c:	fa1f fb8b 	uxth.w	fp, fp
 8005140:	445b      	add	r3, fp
 8005142:	fa1f fb82 	uxth.w	fp, r2
 8005146:	f8de 2000 	ldr.w	r2, [lr]
 800514a:	4581      	cmp	r9, r0
 800514c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005154:	b29b      	uxth	r3, r3
 8005156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800515a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800515e:	f84e 3b04 	str.w	r3, [lr], #4
 8005162:	d2da      	bcs.n	800511a <quorem+0x42>
 8005164:	f856 300c 	ldr.w	r3, [r6, ip]
 8005168:	b933      	cbnz	r3, 8005178 <quorem+0xa0>
 800516a:	9b01      	ldr	r3, [sp, #4]
 800516c:	3b04      	subs	r3, #4
 800516e:	429e      	cmp	r6, r3
 8005170:	461a      	mov	r2, r3
 8005172:	d331      	bcc.n	80051d8 <quorem+0x100>
 8005174:	f8c8 4010 	str.w	r4, [r8, #16]
 8005178:	4640      	mov	r0, r8
 800517a:	f001 f81b 	bl	80061b4 <__mcmp>
 800517e:	2800      	cmp	r0, #0
 8005180:	db26      	blt.n	80051d0 <quorem+0xf8>
 8005182:	4630      	mov	r0, r6
 8005184:	f04f 0c00 	mov.w	ip, #0
 8005188:	3501      	adds	r5, #1
 800518a:	f857 1b04 	ldr.w	r1, [r7], #4
 800518e:	f8d0 e000 	ldr.w	lr, [r0]
 8005192:	b28b      	uxth	r3, r1
 8005194:	ebac 0303 	sub.w	r3, ip, r3
 8005198:	fa1f f28e 	uxth.w	r2, lr
 800519c:	4413      	add	r3, r2
 800519e:	0c0a      	lsrs	r2, r1, #16
 80051a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051ae:	45b9      	cmp	r9, r7
 80051b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051b4:	f840 3b04 	str.w	r3, [r0], #4
 80051b8:	d2e7      	bcs.n	800518a <quorem+0xb2>
 80051ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80051be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80051c2:	b92a      	cbnz	r2, 80051d0 <quorem+0xf8>
 80051c4:	3b04      	subs	r3, #4
 80051c6:	429e      	cmp	r6, r3
 80051c8:	461a      	mov	r2, r3
 80051ca:	d30b      	bcc.n	80051e4 <quorem+0x10c>
 80051cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80051d0:	4628      	mov	r0, r5
 80051d2:	b003      	add	sp, #12
 80051d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	3b04      	subs	r3, #4
 80051dc:	2a00      	cmp	r2, #0
 80051de:	d1c9      	bne.n	8005174 <quorem+0x9c>
 80051e0:	3c01      	subs	r4, #1
 80051e2:	e7c4      	b.n	800516e <quorem+0x96>
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	3b04      	subs	r3, #4
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	d1ef      	bne.n	80051cc <quorem+0xf4>
 80051ec:	3c01      	subs	r4, #1
 80051ee:	e7ea      	b.n	80051c6 <quorem+0xee>
 80051f0:	2000      	movs	r0, #0
 80051f2:	e7ee      	b.n	80051d2 <quorem+0xfa>
 80051f4:	0000      	movs	r0, r0
	...

080051f8 <_dtoa_r>:
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	4616      	mov	r6, r2
 80051fe:	461f      	mov	r7, r3
 8005200:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005202:	b095      	sub	sp, #84	; 0x54
 8005204:	4604      	mov	r4, r0
 8005206:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800520a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800520e:	b93d      	cbnz	r5, 8005220 <_dtoa_r+0x28>
 8005210:	2010      	movs	r0, #16
 8005212:	f000 fdb3 	bl	8005d7c <malloc>
 8005216:	6260      	str	r0, [r4, #36]	; 0x24
 8005218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800521c:	6005      	str	r5, [r0, #0]
 800521e:	60c5      	str	r5, [r0, #12]
 8005220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	b151      	cbz	r1, 800523c <_dtoa_r+0x44>
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	2301      	movs	r3, #1
 800522a:	4093      	lsls	r3, r2
 800522c:	604a      	str	r2, [r1, #4]
 800522e:	608b      	str	r3, [r1, #8]
 8005230:	4620      	mov	r0, r4
 8005232:	f000 fddf 	bl	8005df4 <_Bfree>
 8005236:	2200      	movs	r2, #0
 8005238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	1e3b      	subs	r3, r7, #0
 800523e:	bfaf      	iteee	ge
 8005240:	2300      	movge	r3, #0
 8005242:	2201      	movlt	r2, #1
 8005244:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005248:	9303      	strlt	r3, [sp, #12]
 800524a:	bfac      	ite	ge
 800524c:	f8c8 3000 	strge.w	r3, [r8]
 8005250:	f8c8 2000 	strlt.w	r2, [r8]
 8005254:	4bae      	ldr	r3, [pc, #696]	; (8005510 <_dtoa_r+0x318>)
 8005256:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800525a:	ea33 0308 	bics.w	r3, r3, r8
 800525e:	d11b      	bne.n	8005298 <_dtoa_r+0xa0>
 8005260:	f242 730f 	movw	r3, #9999	; 0x270f
 8005264:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	9b02      	ldr	r3, [sp, #8]
 800526a:	b923      	cbnz	r3, 8005276 <_dtoa_r+0x7e>
 800526c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005270:	2800      	cmp	r0, #0
 8005272:	f000 8545 	beq.w	8005d00 <_dtoa_r+0xb08>
 8005276:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005278:	b953      	cbnz	r3, 8005290 <_dtoa_r+0x98>
 800527a:	4ba6      	ldr	r3, [pc, #664]	; (8005514 <_dtoa_r+0x31c>)
 800527c:	e021      	b.n	80052c2 <_dtoa_r+0xca>
 800527e:	4ba6      	ldr	r3, [pc, #664]	; (8005518 <_dtoa_r+0x320>)
 8005280:	9306      	str	r3, [sp, #24]
 8005282:	3308      	adds	r3, #8
 8005284:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	9806      	ldr	r0, [sp, #24]
 800528a:	b015      	add	sp, #84	; 0x54
 800528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005290:	4ba0      	ldr	r3, [pc, #640]	; (8005514 <_dtoa_r+0x31c>)
 8005292:	9306      	str	r3, [sp, #24]
 8005294:	3303      	adds	r3, #3
 8005296:	e7f5      	b.n	8005284 <_dtoa_r+0x8c>
 8005298:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800529c:	2200      	movs	r2, #0
 800529e:	2300      	movs	r3, #0
 80052a0:	4630      	mov	r0, r6
 80052a2:	4639      	mov	r1, r7
 80052a4:	f7fb fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80052a8:	4682      	mov	sl, r0
 80052aa:	b160      	cbz	r0, 80052c6 <_dtoa_r+0xce>
 80052ac:	2301      	movs	r3, #1
 80052ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8520 	beq.w	8005cfa <_dtoa_r+0xb02>
 80052ba:	4b98      	ldr	r3, [pc, #608]	; (800551c <_dtoa_r+0x324>)
 80052bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	9306      	str	r3, [sp, #24]
 80052c4:	e7e0      	b.n	8005288 <_dtoa_r+0x90>
 80052c6:	ab12      	add	r3, sp, #72	; 0x48
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	ab13      	add	r3, sp, #76	; 0x4c
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	4632      	mov	r2, r6
 80052d0:	463b      	mov	r3, r7
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 ffe6 	bl	80062a4 <__d2b>
 80052d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80052dc:	4683      	mov	fp, r0
 80052de:	2d00      	cmp	r5, #0
 80052e0:	d07d      	beq.n	80053de <_dtoa_r+0x1e6>
 80052e2:	46b0      	mov	r8, r6
 80052e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80052e8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80052ec:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80052f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80052f4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80052f8:	2200      	movs	r2, #0
 80052fa:	4b89      	ldr	r3, [pc, #548]	; (8005520 <_dtoa_r+0x328>)
 80052fc:	4640      	mov	r0, r8
 80052fe:	4649      	mov	r1, r9
 8005300:	f7fa ff32 	bl	8000168 <__aeabi_dsub>
 8005304:	a37c      	add	r3, pc, #496	; (adr r3, 80054f8 <_dtoa_r+0x300>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f7fb f8e5 	bl	80004d8 <__aeabi_dmul>
 800530e:	a37c      	add	r3, pc, #496	; (adr r3, 8005500 <_dtoa_r+0x308>)
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f7fa ff2a 	bl	800016c <__adddf3>
 8005318:	4606      	mov	r6, r0
 800531a:	4628      	mov	r0, r5
 800531c:	460f      	mov	r7, r1
 800531e:	f7fb f871 	bl	8000404 <__aeabi_i2d>
 8005322:	a379      	add	r3, pc, #484	; (adr r3, 8005508 <_dtoa_r+0x310>)
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f7fb f8d6 	bl	80004d8 <__aeabi_dmul>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4630      	mov	r0, r6
 8005332:	4639      	mov	r1, r7
 8005334:	f7fa ff1a 	bl	800016c <__adddf3>
 8005338:	4606      	mov	r6, r0
 800533a:	460f      	mov	r7, r1
 800533c:	f7fb fb7c 	bl	8000a38 <__aeabi_d2iz>
 8005340:	2200      	movs	r2, #0
 8005342:	4682      	mov	sl, r0
 8005344:	2300      	movs	r3, #0
 8005346:	4630      	mov	r0, r6
 8005348:	4639      	mov	r1, r7
 800534a:	f7fb fb37 	bl	80009bc <__aeabi_dcmplt>
 800534e:	b148      	cbz	r0, 8005364 <_dtoa_r+0x16c>
 8005350:	4650      	mov	r0, sl
 8005352:	f7fb f857 	bl	8000404 <__aeabi_i2d>
 8005356:	4632      	mov	r2, r6
 8005358:	463b      	mov	r3, r7
 800535a:	f7fb fb25 	bl	80009a8 <__aeabi_dcmpeq>
 800535e:	b908      	cbnz	r0, 8005364 <_dtoa_r+0x16c>
 8005360:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005364:	f1ba 0f16 	cmp.w	sl, #22
 8005368:	d85a      	bhi.n	8005420 <_dtoa_r+0x228>
 800536a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800536e:	496d      	ldr	r1, [pc, #436]	; (8005524 <_dtoa_r+0x32c>)
 8005370:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005378:	f7fb fb3e 	bl	80009f8 <__aeabi_dcmpgt>
 800537c:	2800      	cmp	r0, #0
 800537e:	d051      	beq.n	8005424 <_dtoa_r+0x22c>
 8005380:	2300      	movs	r3, #0
 8005382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005386:	930d      	str	r3, [sp, #52]	; 0x34
 8005388:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800538a:	1b5d      	subs	r5, r3, r5
 800538c:	1e6b      	subs	r3, r5, #1
 800538e:	9307      	str	r3, [sp, #28]
 8005390:	bf43      	ittte	mi
 8005392:	2300      	movmi	r3, #0
 8005394:	f1c5 0901 	rsbmi	r9, r5, #1
 8005398:	9307      	strmi	r3, [sp, #28]
 800539a:	f04f 0900 	movpl.w	r9, #0
 800539e:	f1ba 0f00 	cmp.w	sl, #0
 80053a2:	db41      	blt.n	8005428 <_dtoa_r+0x230>
 80053a4:	9b07      	ldr	r3, [sp, #28]
 80053a6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80053aa:	4453      	add	r3, sl
 80053ac:	9307      	str	r3, [sp, #28]
 80053ae:	2300      	movs	r3, #0
 80053b0:	9308      	str	r3, [sp, #32]
 80053b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053b4:	2b09      	cmp	r3, #9
 80053b6:	f200 808f 	bhi.w	80054d8 <_dtoa_r+0x2e0>
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	bfc4      	itt	gt
 80053be:	3b04      	subgt	r3, #4
 80053c0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80053c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053c4:	bfc8      	it	gt
 80053c6:	2500      	movgt	r5, #0
 80053c8:	f1a3 0302 	sub.w	r3, r3, #2
 80053cc:	bfd8      	it	le
 80053ce:	2501      	movle	r5, #1
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	f200 808d 	bhi.w	80054f0 <_dtoa_r+0x2f8>
 80053d6:	e8df f003 	tbb	[pc, r3]
 80053da:	7d7b      	.short	0x7d7b
 80053dc:	6f2f      	.short	0x6f2f
 80053de:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80053e2:	441d      	add	r5, r3
 80053e4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80053e8:	2820      	cmp	r0, #32
 80053ea:	dd13      	ble.n	8005414 <_dtoa_r+0x21c>
 80053ec:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80053f0:	9b02      	ldr	r3, [sp, #8]
 80053f2:	fa08 f800 	lsl.w	r8, r8, r0
 80053f6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80053fa:	fa23 f000 	lsr.w	r0, r3, r0
 80053fe:	ea48 0000 	orr.w	r0, r8, r0
 8005402:	f7fa ffef 	bl	80003e4 <__aeabi_ui2d>
 8005406:	2301      	movs	r3, #1
 8005408:	4680      	mov	r8, r0
 800540a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800540e:	3d01      	subs	r5, #1
 8005410:	9310      	str	r3, [sp, #64]	; 0x40
 8005412:	e771      	b.n	80052f8 <_dtoa_r+0x100>
 8005414:	9b02      	ldr	r3, [sp, #8]
 8005416:	f1c0 0020 	rsb	r0, r0, #32
 800541a:	fa03 f000 	lsl.w	r0, r3, r0
 800541e:	e7f0      	b.n	8005402 <_dtoa_r+0x20a>
 8005420:	2301      	movs	r3, #1
 8005422:	e7b0      	b.n	8005386 <_dtoa_r+0x18e>
 8005424:	900d      	str	r0, [sp, #52]	; 0x34
 8005426:	e7af      	b.n	8005388 <_dtoa_r+0x190>
 8005428:	f1ca 0300 	rsb	r3, sl, #0
 800542c:	9308      	str	r3, [sp, #32]
 800542e:	2300      	movs	r3, #0
 8005430:	eba9 090a 	sub.w	r9, r9, sl
 8005434:	930c      	str	r3, [sp, #48]	; 0x30
 8005436:	e7bc      	b.n	80053b2 <_dtoa_r+0x1ba>
 8005438:	2301      	movs	r3, #1
 800543a:	9309      	str	r3, [sp, #36]	; 0x24
 800543c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800543e:	2b00      	cmp	r3, #0
 8005440:	dd74      	ble.n	800552c <_dtoa_r+0x334>
 8005442:	4698      	mov	r8, r3
 8005444:	9304      	str	r3, [sp, #16]
 8005446:	2200      	movs	r2, #0
 8005448:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800544a:	6072      	str	r2, [r6, #4]
 800544c:	2204      	movs	r2, #4
 800544e:	f102 0014 	add.w	r0, r2, #20
 8005452:	4298      	cmp	r0, r3
 8005454:	6871      	ldr	r1, [r6, #4]
 8005456:	d96e      	bls.n	8005536 <_dtoa_r+0x33e>
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fc97 	bl	8005d8c <_Balloc>
 800545e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005460:	6030      	str	r0, [r6, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f1b8 0f0e 	cmp.w	r8, #14
 8005468:	9306      	str	r3, [sp, #24]
 800546a:	f200 80ed 	bhi.w	8005648 <_dtoa_r+0x450>
 800546e:	2d00      	cmp	r5, #0
 8005470:	f000 80ea 	beq.w	8005648 <_dtoa_r+0x450>
 8005474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005478:	f1ba 0f00 	cmp.w	sl, #0
 800547c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005480:	dd77      	ble.n	8005572 <_dtoa_r+0x37a>
 8005482:	4a28      	ldr	r2, [pc, #160]	; (8005524 <_dtoa_r+0x32c>)
 8005484:	f00a 030f 	and.w	r3, sl, #15
 8005488:	ea4f 162a 	mov.w	r6, sl, asr #4
 800548c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005490:	06f0      	lsls	r0, r6, #27
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800549a:	d568      	bpl.n	800556e <_dtoa_r+0x376>
 800549c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <_dtoa_r+0x330>)
 80054a2:	2503      	movs	r5, #3
 80054a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054a8:	f7fb f940 	bl	800072c <__aeabi_ddiv>
 80054ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054b0:	f006 060f 	and.w	r6, r6, #15
 80054b4:	4f1c      	ldr	r7, [pc, #112]	; (8005528 <_dtoa_r+0x330>)
 80054b6:	e04f      	b.n	8005558 <_dtoa_r+0x360>
 80054b8:	2301      	movs	r3, #1
 80054ba:	9309      	str	r3, [sp, #36]	; 0x24
 80054bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054be:	4453      	add	r3, sl
 80054c0:	f103 0801 	add.w	r8, r3, #1
 80054c4:	9304      	str	r3, [sp, #16]
 80054c6:	4643      	mov	r3, r8
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	bfb8      	it	lt
 80054cc:	2301      	movlt	r3, #1
 80054ce:	e7ba      	b.n	8005446 <_dtoa_r+0x24e>
 80054d0:	2300      	movs	r3, #0
 80054d2:	e7b2      	b.n	800543a <_dtoa_r+0x242>
 80054d4:	2300      	movs	r3, #0
 80054d6:	e7f0      	b.n	80054ba <_dtoa_r+0x2c2>
 80054d8:	2501      	movs	r5, #1
 80054da:	2300      	movs	r3, #0
 80054dc:	9509      	str	r5, [sp, #36]	; 0x24
 80054de:	931e      	str	r3, [sp, #120]	; 0x78
 80054e0:	f04f 33ff 	mov.w	r3, #4294967295
 80054e4:	2200      	movs	r2, #0
 80054e6:	9304      	str	r3, [sp, #16]
 80054e8:	4698      	mov	r8, r3
 80054ea:	2312      	movs	r3, #18
 80054ec:	921f      	str	r2, [sp, #124]	; 0x7c
 80054ee:	e7aa      	b.n	8005446 <_dtoa_r+0x24e>
 80054f0:	2301      	movs	r3, #1
 80054f2:	9309      	str	r3, [sp, #36]	; 0x24
 80054f4:	e7f4      	b.n	80054e0 <_dtoa_r+0x2e8>
 80054f6:	bf00      	nop
 80054f8:	636f4361 	.word	0x636f4361
 80054fc:	3fd287a7 	.word	0x3fd287a7
 8005500:	8b60c8b3 	.word	0x8b60c8b3
 8005504:	3fc68a28 	.word	0x3fc68a28
 8005508:	509f79fb 	.word	0x509f79fb
 800550c:	3fd34413 	.word	0x3fd34413
 8005510:	7ff00000 	.word	0x7ff00000
 8005514:	08006d57 	.word	0x08006d57
 8005518:	08006d4e 	.word	0x08006d4e
 800551c:	08006d4d 	.word	0x08006d4d
 8005520:	3ff80000 	.word	0x3ff80000
 8005524:	08006de8 	.word	0x08006de8
 8005528:	08006dc0 	.word	0x08006dc0
 800552c:	2301      	movs	r3, #1
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	4698      	mov	r8, r3
 8005532:	461a      	mov	r2, r3
 8005534:	e7da      	b.n	80054ec <_dtoa_r+0x2f4>
 8005536:	3101      	adds	r1, #1
 8005538:	6071      	str	r1, [r6, #4]
 800553a:	0052      	lsls	r2, r2, #1
 800553c:	e787      	b.n	800544e <_dtoa_r+0x256>
 800553e:	07f1      	lsls	r1, r6, #31
 8005540:	d508      	bpl.n	8005554 <_dtoa_r+0x35c>
 8005542:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554a:	f7fa ffc5 	bl	80004d8 <__aeabi_dmul>
 800554e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005552:	3501      	adds	r5, #1
 8005554:	1076      	asrs	r6, r6, #1
 8005556:	3708      	adds	r7, #8
 8005558:	2e00      	cmp	r6, #0
 800555a:	d1f0      	bne.n	800553e <_dtoa_r+0x346>
 800555c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005564:	f7fb f8e2 	bl	800072c <__aeabi_ddiv>
 8005568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800556c:	e01b      	b.n	80055a6 <_dtoa_r+0x3ae>
 800556e:	2502      	movs	r5, #2
 8005570:	e7a0      	b.n	80054b4 <_dtoa_r+0x2bc>
 8005572:	f000 80a4 	beq.w	80056be <_dtoa_r+0x4c6>
 8005576:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800557a:	f1ca 0600 	rsb	r6, sl, #0
 800557e:	4ba0      	ldr	r3, [pc, #640]	; (8005800 <_dtoa_r+0x608>)
 8005580:	f006 020f 	and.w	r2, r6, #15
 8005584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f7fa ffa4 	bl	80004d8 <__aeabi_dmul>
 8005590:	2502      	movs	r5, #2
 8005592:	2300      	movs	r3, #0
 8005594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005598:	4f9a      	ldr	r7, [pc, #616]	; (8005804 <_dtoa_r+0x60c>)
 800559a:	1136      	asrs	r6, r6, #4
 800559c:	2e00      	cmp	r6, #0
 800559e:	f040 8083 	bne.w	80056a8 <_dtoa_r+0x4b0>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e0      	bne.n	8005568 <_dtoa_r+0x370>
 80055a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 808a 	beq.w	80056c2 <_dtoa_r+0x4ca>
 80055ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80055b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055ba:	2200      	movs	r2, #0
 80055bc:	4b92      	ldr	r3, [pc, #584]	; (8005808 <_dtoa_r+0x610>)
 80055be:	f7fb f9fd 	bl	80009bc <__aeabi_dcmplt>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d07d      	beq.n	80056c2 <_dtoa_r+0x4ca>
 80055c6:	f1b8 0f00 	cmp.w	r8, #0
 80055ca:	d07a      	beq.n	80056c2 <_dtoa_r+0x4ca>
 80055cc:	9b04      	ldr	r3, [sp, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd36      	ble.n	8005640 <_dtoa_r+0x448>
 80055d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055d6:	2200      	movs	r2, #0
 80055d8:	4b8c      	ldr	r3, [pc, #560]	; (800580c <_dtoa_r+0x614>)
 80055da:	f7fa ff7d 	bl	80004d8 <__aeabi_dmul>
 80055de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055e2:	9e04      	ldr	r6, [sp, #16]
 80055e4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80055e8:	3501      	adds	r5, #1
 80055ea:	4628      	mov	r0, r5
 80055ec:	f7fa ff0a 	bl	8000404 <__aeabi_i2d>
 80055f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055f4:	f7fa ff70 	bl	80004d8 <__aeabi_dmul>
 80055f8:	2200      	movs	r2, #0
 80055fa:	4b85      	ldr	r3, [pc, #532]	; (8005810 <_dtoa_r+0x618>)
 80055fc:	f7fa fdb6 	bl	800016c <__adddf3>
 8005600:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005604:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005608:	950b      	str	r5, [sp, #44]	; 0x2c
 800560a:	2e00      	cmp	r6, #0
 800560c:	d15c      	bne.n	80056c8 <_dtoa_r+0x4d0>
 800560e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005612:	2200      	movs	r2, #0
 8005614:	4b7f      	ldr	r3, [pc, #508]	; (8005814 <_dtoa_r+0x61c>)
 8005616:	f7fa fda7 	bl	8000168 <__aeabi_dsub>
 800561a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800561c:	462b      	mov	r3, r5
 800561e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005622:	f7fb f9e9 	bl	80009f8 <__aeabi_dcmpgt>
 8005626:	2800      	cmp	r0, #0
 8005628:	f040 8281 	bne.w	8005b2e <_dtoa_r+0x936>
 800562c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005632:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005636:	f7fb f9c1 	bl	80009bc <__aeabi_dcmplt>
 800563a:	2800      	cmp	r0, #0
 800563c:	f040 8275 	bne.w	8005b2a <_dtoa_r+0x932>
 8005640:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005648:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800564a:	2b00      	cmp	r3, #0
 800564c:	f2c0 814b 	blt.w	80058e6 <_dtoa_r+0x6ee>
 8005650:	f1ba 0f0e 	cmp.w	sl, #14
 8005654:	f300 8147 	bgt.w	80058e6 <_dtoa_r+0x6ee>
 8005658:	4b69      	ldr	r3, [pc, #420]	; (8005800 <_dtoa_r+0x608>)
 800565a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005666:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005668:	2b00      	cmp	r3, #0
 800566a:	f280 80d7 	bge.w	800581c <_dtoa_r+0x624>
 800566e:	f1b8 0f00 	cmp.w	r8, #0
 8005672:	f300 80d3 	bgt.w	800581c <_dtoa_r+0x624>
 8005676:	f040 8257 	bne.w	8005b28 <_dtoa_r+0x930>
 800567a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800567e:	2200      	movs	r2, #0
 8005680:	4b64      	ldr	r3, [pc, #400]	; (8005814 <_dtoa_r+0x61c>)
 8005682:	f7fa ff29 	bl	80004d8 <__aeabi_dmul>
 8005686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800568a:	f7fb f9ab 	bl	80009e4 <__aeabi_dcmpge>
 800568e:	4646      	mov	r6, r8
 8005690:	4647      	mov	r7, r8
 8005692:	2800      	cmp	r0, #0
 8005694:	f040 822d 	bne.w	8005af2 <_dtoa_r+0x8fa>
 8005698:	9b06      	ldr	r3, [sp, #24]
 800569a:	9a06      	ldr	r2, [sp, #24]
 800569c:	1c5d      	adds	r5, r3, #1
 800569e:	2331      	movs	r3, #49	; 0x31
 80056a0:	f10a 0a01 	add.w	sl, sl, #1
 80056a4:	7013      	strb	r3, [r2, #0]
 80056a6:	e228      	b.n	8005afa <_dtoa_r+0x902>
 80056a8:	07f2      	lsls	r2, r6, #31
 80056aa:	d505      	bpl.n	80056b8 <_dtoa_r+0x4c0>
 80056ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b0:	f7fa ff12 	bl	80004d8 <__aeabi_dmul>
 80056b4:	2301      	movs	r3, #1
 80056b6:	3501      	adds	r5, #1
 80056b8:	1076      	asrs	r6, r6, #1
 80056ba:	3708      	adds	r7, #8
 80056bc:	e76e      	b.n	800559c <_dtoa_r+0x3a4>
 80056be:	2502      	movs	r5, #2
 80056c0:	e771      	b.n	80055a6 <_dtoa_r+0x3ae>
 80056c2:	4657      	mov	r7, sl
 80056c4:	4646      	mov	r6, r8
 80056c6:	e790      	b.n	80055ea <_dtoa_r+0x3f2>
 80056c8:	4b4d      	ldr	r3, [pc, #308]	; (8005800 <_dtoa_r+0x608>)
 80056ca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80056ce:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80056d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d048      	beq.n	800576a <_dtoa_r+0x572>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	2000      	movs	r0, #0
 80056de:	494e      	ldr	r1, [pc, #312]	; (8005818 <_dtoa_r+0x620>)
 80056e0:	f7fb f824 	bl	800072c <__aeabi_ddiv>
 80056e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056e8:	f7fa fd3e 	bl	8000168 <__aeabi_dsub>
 80056ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056f0:	9d06      	ldr	r5, [sp, #24]
 80056f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056f6:	f7fb f99f 	bl	8000a38 <__aeabi_d2iz>
 80056fa:	9011      	str	r0, [sp, #68]	; 0x44
 80056fc:	f7fa fe82 	bl	8000404 <__aeabi_i2d>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005708:	f7fa fd2e 	bl	8000168 <__aeabi_dsub>
 800570c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800570e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005712:	3330      	adds	r3, #48	; 0x30
 8005714:	f805 3b01 	strb.w	r3, [r5], #1
 8005718:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800571c:	f7fb f94e 	bl	80009bc <__aeabi_dcmplt>
 8005720:	2800      	cmp	r0, #0
 8005722:	d163      	bne.n	80057ec <_dtoa_r+0x5f4>
 8005724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005728:	2000      	movs	r0, #0
 800572a:	4937      	ldr	r1, [pc, #220]	; (8005808 <_dtoa_r+0x610>)
 800572c:	f7fa fd1c 	bl	8000168 <__aeabi_dsub>
 8005730:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005734:	f7fb f942 	bl	80009bc <__aeabi_dcmplt>
 8005738:	2800      	cmp	r0, #0
 800573a:	f040 80b5 	bne.w	80058a8 <_dtoa_r+0x6b0>
 800573e:	9b06      	ldr	r3, [sp, #24]
 8005740:	1aeb      	subs	r3, r5, r3
 8005742:	429e      	cmp	r6, r3
 8005744:	f77f af7c 	ble.w	8005640 <_dtoa_r+0x448>
 8005748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800574c:	2200      	movs	r2, #0
 800574e:	4b2f      	ldr	r3, [pc, #188]	; (800580c <_dtoa_r+0x614>)
 8005750:	f7fa fec2 	bl	80004d8 <__aeabi_dmul>
 8005754:	2200      	movs	r2, #0
 8005756:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800575a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800575e:	4b2b      	ldr	r3, [pc, #172]	; (800580c <_dtoa_r+0x614>)
 8005760:	f7fa feba 	bl	80004d8 <__aeabi_dmul>
 8005764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005768:	e7c3      	b.n	80056f2 <_dtoa_r+0x4fa>
 800576a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800576e:	f7fa feb3 	bl	80004d8 <__aeabi_dmul>
 8005772:	9b06      	ldr	r3, [sp, #24]
 8005774:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005778:	199d      	adds	r5, r3, r6
 800577a:	461e      	mov	r6, r3
 800577c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005780:	f7fb f95a 	bl	8000a38 <__aeabi_d2iz>
 8005784:	9011      	str	r0, [sp, #68]	; 0x44
 8005786:	f7fa fe3d 	bl	8000404 <__aeabi_i2d>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005792:	f7fa fce9 	bl	8000168 <__aeabi_dsub>
 8005796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800579c:	3330      	adds	r3, #48	; 0x30
 800579e:	f806 3b01 	strb.w	r3, [r6], #1
 80057a2:	42ae      	cmp	r6, r5
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	d124      	bne.n	80057f4 <_dtoa_r+0x5fc>
 80057aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057ae:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <_dtoa_r+0x620>)
 80057b0:	f7fa fcdc 	bl	800016c <__adddf3>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057bc:	f7fb f91c 	bl	80009f8 <__aeabi_dcmpgt>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d171      	bne.n	80058a8 <_dtoa_r+0x6b0>
 80057c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057c8:	2000      	movs	r0, #0
 80057ca:	4913      	ldr	r1, [pc, #76]	; (8005818 <_dtoa_r+0x620>)
 80057cc:	f7fa fccc 	bl	8000168 <__aeabi_dsub>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d8:	f7fb f8f0 	bl	80009bc <__aeabi_dcmplt>
 80057dc:	2800      	cmp	r0, #0
 80057de:	f43f af2f 	beq.w	8005640 <_dtoa_r+0x448>
 80057e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057e6:	1e6a      	subs	r2, r5, #1
 80057e8:	2b30      	cmp	r3, #48	; 0x30
 80057ea:	d001      	beq.n	80057f0 <_dtoa_r+0x5f8>
 80057ec:	46ba      	mov	sl, r7
 80057ee:	e04a      	b.n	8005886 <_dtoa_r+0x68e>
 80057f0:	4615      	mov	r5, r2
 80057f2:	e7f6      	b.n	80057e2 <_dtoa_r+0x5ea>
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <_dtoa_r+0x614>)
 80057f6:	f7fa fe6f 	bl	80004d8 <__aeabi_dmul>
 80057fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057fe:	e7bd      	b.n	800577c <_dtoa_r+0x584>
 8005800:	08006de8 	.word	0x08006de8
 8005804:	08006dc0 	.word	0x08006dc0
 8005808:	3ff00000 	.word	0x3ff00000
 800580c:	40240000 	.word	0x40240000
 8005810:	401c0000 	.word	0x401c0000
 8005814:	40140000 	.word	0x40140000
 8005818:	3fe00000 	.word	0x3fe00000
 800581c:	9d06      	ldr	r5, [sp, #24]
 800581e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005826:	4630      	mov	r0, r6
 8005828:	4639      	mov	r1, r7
 800582a:	f7fa ff7f 	bl	800072c <__aeabi_ddiv>
 800582e:	f7fb f903 	bl	8000a38 <__aeabi_d2iz>
 8005832:	4681      	mov	r9, r0
 8005834:	f7fa fde6 	bl	8000404 <__aeabi_i2d>
 8005838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800583c:	f7fa fe4c 	bl	80004d8 <__aeabi_dmul>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4630      	mov	r0, r6
 8005846:	4639      	mov	r1, r7
 8005848:	f7fa fc8e 	bl	8000168 <__aeabi_dsub>
 800584c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005850:	f805 6b01 	strb.w	r6, [r5], #1
 8005854:	9e06      	ldr	r6, [sp, #24]
 8005856:	4602      	mov	r2, r0
 8005858:	1bae      	subs	r6, r5, r6
 800585a:	45b0      	cmp	r8, r6
 800585c:	460b      	mov	r3, r1
 800585e:	d135      	bne.n	80058cc <_dtoa_r+0x6d4>
 8005860:	f7fa fc84 	bl	800016c <__adddf3>
 8005864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005868:	4606      	mov	r6, r0
 800586a:	460f      	mov	r7, r1
 800586c:	f7fb f8c4 	bl	80009f8 <__aeabi_dcmpgt>
 8005870:	b9c8      	cbnz	r0, 80058a6 <_dtoa_r+0x6ae>
 8005872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005876:	4630      	mov	r0, r6
 8005878:	4639      	mov	r1, r7
 800587a:	f7fb f895 	bl	80009a8 <__aeabi_dcmpeq>
 800587e:	b110      	cbz	r0, 8005886 <_dtoa_r+0x68e>
 8005880:	f019 0f01 	tst.w	r9, #1
 8005884:	d10f      	bne.n	80058a6 <_dtoa_r+0x6ae>
 8005886:	4659      	mov	r1, fp
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fab3 	bl	8005df4 <_Bfree>
 800588e:	2300      	movs	r3, #0
 8005890:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005892:	702b      	strb	r3, [r5, #0]
 8005894:	f10a 0301 	add.w	r3, sl, #1
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800589c:	2b00      	cmp	r3, #0
 800589e:	f43f acf3 	beq.w	8005288 <_dtoa_r+0x90>
 80058a2:	601d      	str	r5, [r3, #0]
 80058a4:	e4f0      	b.n	8005288 <_dtoa_r+0x90>
 80058a6:	4657      	mov	r7, sl
 80058a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058ac:	1e6b      	subs	r3, r5, #1
 80058ae:	2a39      	cmp	r2, #57	; 0x39
 80058b0:	d106      	bne.n	80058c0 <_dtoa_r+0x6c8>
 80058b2:	9a06      	ldr	r2, [sp, #24]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d107      	bne.n	80058c8 <_dtoa_r+0x6d0>
 80058b8:	2330      	movs	r3, #48	; 0x30
 80058ba:	7013      	strb	r3, [r2, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	3701      	adds	r7, #1
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	3201      	adds	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e791      	b.n	80057ec <_dtoa_r+0x5f4>
 80058c8:	461d      	mov	r5, r3
 80058ca:	e7ed      	b.n	80058a8 <_dtoa_r+0x6b0>
 80058cc:	2200      	movs	r2, #0
 80058ce:	4b99      	ldr	r3, [pc, #612]	; (8005b34 <_dtoa_r+0x93c>)
 80058d0:	f7fa fe02 	bl	80004d8 <__aeabi_dmul>
 80058d4:	2200      	movs	r2, #0
 80058d6:	2300      	movs	r3, #0
 80058d8:	4606      	mov	r6, r0
 80058da:	460f      	mov	r7, r1
 80058dc:	f7fb f864 	bl	80009a8 <__aeabi_dcmpeq>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d09e      	beq.n	8005822 <_dtoa_r+0x62a>
 80058e4:	e7cf      	b.n	8005886 <_dtoa_r+0x68e>
 80058e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e8:	2a00      	cmp	r2, #0
 80058ea:	f000 8088 	beq.w	80059fe <_dtoa_r+0x806>
 80058ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80058f0:	2a01      	cmp	r2, #1
 80058f2:	dc6d      	bgt.n	80059d0 <_dtoa_r+0x7d8>
 80058f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	d066      	beq.n	80059c8 <_dtoa_r+0x7d0>
 80058fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80058fe:	464d      	mov	r5, r9
 8005900:	9e08      	ldr	r6, [sp, #32]
 8005902:	9a07      	ldr	r2, [sp, #28]
 8005904:	2101      	movs	r1, #1
 8005906:	441a      	add	r2, r3
 8005908:	4620      	mov	r0, r4
 800590a:	4499      	add	r9, r3
 800590c:	9207      	str	r2, [sp, #28]
 800590e:	f000 fb11 	bl	8005f34 <__i2b>
 8005912:	4607      	mov	r7, r0
 8005914:	2d00      	cmp	r5, #0
 8005916:	dd0b      	ble.n	8005930 <_dtoa_r+0x738>
 8005918:	9b07      	ldr	r3, [sp, #28]
 800591a:	2b00      	cmp	r3, #0
 800591c:	dd08      	ble.n	8005930 <_dtoa_r+0x738>
 800591e:	42ab      	cmp	r3, r5
 8005920:	bfa8      	it	ge
 8005922:	462b      	movge	r3, r5
 8005924:	9a07      	ldr	r2, [sp, #28]
 8005926:	eba9 0903 	sub.w	r9, r9, r3
 800592a:	1aed      	subs	r5, r5, r3
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	9b08      	ldr	r3, [sp, #32]
 8005932:	b1eb      	cbz	r3, 8005970 <_dtoa_r+0x778>
 8005934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d065      	beq.n	8005a06 <_dtoa_r+0x80e>
 800593a:	b18e      	cbz	r6, 8005960 <_dtoa_r+0x768>
 800593c:	4639      	mov	r1, r7
 800593e:	4632      	mov	r2, r6
 8005940:	4620      	mov	r0, r4
 8005942:	f000 fb95 	bl	8006070 <__pow5mult>
 8005946:	465a      	mov	r2, fp
 8005948:	4601      	mov	r1, r0
 800594a:	4607      	mov	r7, r0
 800594c:	4620      	mov	r0, r4
 800594e:	f000 fafa 	bl	8005f46 <__multiply>
 8005952:	4659      	mov	r1, fp
 8005954:	900a      	str	r0, [sp, #40]	; 0x28
 8005956:	4620      	mov	r0, r4
 8005958:	f000 fa4c 	bl	8005df4 <_Bfree>
 800595c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800595e:	469b      	mov	fp, r3
 8005960:	9b08      	ldr	r3, [sp, #32]
 8005962:	1b9a      	subs	r2, r3, r6
 8005964:	d004      	beq.n	8005970 <_dtoa_r+0x778>
 8005966:	4659      	mov	r1, fp
 8005968:	4620      	mov	r0, r4
 800596a:	f000 fb81 	bl	8006070 <__pow5mult>
 800596e:	4683      	mov	fp, r0
 8005970:	2101      	movs	r1, #1
 8005972:	4620      	mov	r0, r4
 8005974:	f000 fade 	bl	8005f34 <__i2b>
 8005978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800597a:	4606      	mov	r6, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 81c6 	beq.w	8005d0e <_dtoa_r+0xb16>
 8005982:	461a      	mov	r2, r3
 8005984:	4601      	mov	r1, r0
 8005986:	4620      	mov	r0, r4
 8005988:	f000 fb72 	bl	8006070 <__pow5mult>
 800598c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800598e:	4606      	mov	r6, r0
 8005990:	2b01      	cmp	r3, #1
 8005992:	dc3e      	bgt.n	8005a12 <_dtoa_r+0x81a>
 8005994:	9b02      	ldr	r3, [sp, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d137      	bne.n	8005a0a <_dtoa_r+0x812>
 800599a:	9b03      	ldr	r3, [sp, #12]
 800599c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d134      	bne.n	8005a0e <_dtoa_r+0x816>
 80059a4:	9b03      	ldr	r3, [sp, #12]
 80059a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059aa:	0d1b      	lsrs	r3, r3, #20
 80059ac:	051b      	lsls	r3, r3, #20
 80059ae:	b12b      	cbz	r3, 80059bc <_dtoa_r+0x7c4>
 80059b0:	9b07      	ldr	r3, [sp, #28]
 80059b2:	f109 0901 	add.w	r9, r9, #1
 80059b6:	3301      	adds	r3, #1
 80059b8:	9307      	str	r3, [sp, #28]
 80059ba:	2301      	movs	r3, #1
 80059bc:	9308      	str	r3, [sp, #32]
 80059be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d128      	bne.n	8005a16 <_dtoa_r+0x81e>
 80059c4:	2001      	movs	r0, #1
 80059c6:	e02e      	b.n	8005a26 <_dtoa_r+0x82e>
 80059c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80059ce:	e796      	b.n	80058fe <_dtoa_r+0x706>
 80059d0:	9b08      	ldr	r3, [sp, #32]
 80059d2:	f108 36ff 	add.w	r6, r8, #4294967295
 80059d6:	42b3      	cmp	r3, r6
 80059d8:	bfb7      	itett	lt
 80059da:	9b08      	ldrlt	r3, [sp, #32]
 80059dc:	1b9e      	subge	r6, r3, r6
 80059de:	1af2      	sublt	r2, r6, r3
 80059e0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80059e2:	bfbf      	itttt	lt
 80059e4:	9608      	strlt	r6, [sp, #32]
 80059e6:	189b      	addlt	r3, r3, r2
 80059e8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80059ea:	2600      	movlt	r6, #0
 80059ec:	f1b8 0f00 	cmp.w	r8, #0
 80059f0:	bfb9      	ittee	lt
 80059f2:	eba9 0508 	sublt.w	r5, r9, r8
 80059f6:	2300      	movlt	r3, #0
 80059f8:	464d      	movge	r5, r9
 80059fa:	4643      	movge	r3, r8
 80059fc:	e781      	b.n	8005902 <_dtoa_r+0x70a>
 80059fe:	9e08      	ldr	r6, [sp, #32]
 8005a00:	464d      	mov	r5, r9
 8005a02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a04:	e786      	b.n	8005914 <_dtoa_r+0x71c>
 8005a06:	9a08      	ldr	r2, [sp, #32]
 8005a08:	e7ad      	b.n	8005966 <_dtoa_r+0x76e>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e7d6      	b.n	80059bc <_dtoa_r+0x7c4>
 8005a0e:	9b02      	ldr	r3, [sp, #8]
 8005a10:	e7d4      	b.n	80059bc <_dtoa_r+0x7c4>
 8005a12:	2300      	movs	r3, #0
 8005a14:	9308      	str	r3, [sp, #32]
 8005a16:	6933      	ldr	r3, [r6, #16]
 8005a18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a1c:	6918      	ldr	r0, [r3, #16]
 8005a1e:	f000 fa3b 	bl	8005e98 <__hi0bits>
 8005a22:	f1c0 0020 	rsb	r0, r0, #32
 8005a26:	9b07      	ldr	r3, [sp, #28]
 8005a28:	4418      	add	r0, r3
 8005a2a:	f010 001f 	ands.w	r0, r0, #31
 8005a2e:	d047      	beq.n	8005ac0 <_dtoa_r+0x8c8>
 8005a30:	f1c0 0320 	rsb	r3, r0, #32
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	dd3b      	ble.n	8005ab0 <_dtoa_r+0x8b8>
 8005a38:	9b07      	ldr	r3, [sp, #28]
 8005a3a:	f1c0 001c 	rsb	r0, r0, #28
 8005a3e:	4481      	add	r9, r0
 8005a40:	4405      	add	r5, r0
 8005a42:	4403      	add	r3, r0
 8005a44:	9307      	str	r3, [sp, #28]
 8005a46:	f1b9 0f00 	cmp.w	r9, #0
 8005a4a:	dd05      	ble.n	8005a58 <_dtoa_r+0x860>
 8005a4c:	4659      	mov	r1, fp
 8005a4e:	464a      	mov	r2, r9
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 fb5b 	bl	800610c <__lshift>
 8005a56:	4683      	mov	fp, r0
 8005a58:	9b07      	ldr	r3, [sp, #28]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	dd05      	ble.n	8005a6a <_dtoa_r+0x872>
 8005a5e:	4631      	mov	r1, r6
 8005a60:	461a      	mov	r2, r3
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 fb52 	bl	800610c <__lshift>
 8005a68:	4606      	mov	r6, r0
 8005a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a6c:	b353      	cbz	r3, 8005ac4 <_dtoa_r+0x8cc>
 8005a6e:	4631      	mov	r1, r6
 8005a70:	4658      	mov	r0, fp
 8005a72:	f000 fb9f 	bl	80061b4 <__mcmp>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	da24      	bge.n	8005ac4 <_dtoa_r+0x8cc>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4659      	mov	r1, fp
 8005a7e:	220a      	movs	r2, #10
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 f9ce 	bl	8005e22 <__multadd>
 8005a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a8c:	4683      	mov	fp, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8144 	beq.w	8005d1c <_dtoa_r+0xb24>
 8005a94:	2300      	movs	r3, #0
 8005a96:	4639      	mov	r1, r7
 8005a98:	220a      	movs	r2, #10
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 f9c1 	bl	8005e22 <__multadd>
 8005aa0:	9b04      	ldr	r3, [sp, #16]
 8005aa2:	4607      	mov	r7, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	dc4d      	bgt.n	8005b44 <_dtoa_r+0x94c>
 8005aa8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	dd4a      	ble.n	8005b44 <_dtoa_r+0x94c>
 8005aae:	e011      	b.n	8005ad4 <_dtoa_r+0x8dc>
 8005ab0:	d0c9      	beq.n	8005a46 <_dtoa_r+0x84e>
 8005ab2:	9a07      	ldr	r2, [sp, #28]
 8005ab4:	331c      	adds	r3, #28
 8005ab6:	441a      	add	r2, r3
 8005ab8:	4499      	add	r9, r3
 8005aba:	441d      	add	r5, r3
 8005abc:	4613      	mov	r3, r2
 8005abe:	e7c1      	b.n	8005a44 <_dtoa_r+0x84c>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	e7f6      	b.n	8005ab2 <_dtoa_r+0x8ba>
 8005ac4:	f1b8 0f00 	cmp.w	r8, #0
 8005ac8:	dc36      	bgt.n	8005b38 <_dtoa_r+0x940>
 8005aca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	dd33      	ble.n	8005b38 <_dtoa_r+0x940>
 8005ad0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ad4:	9b04      	ldr	r3, [sp, #16]
 8005ad6:	b963      	cbnz	r3, 8005af2 <_dtoa_r+0x8fa>
 8005ad8:	4631      	mov	r1, r6
 8005ada:	2205      	movs	r2, #5
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 f9a0 	bl	8005e22 <__multadd>
 8005ae2:	4601      	mov	r1, r0
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	4658      	mov	r0, fp
 8005ae8:	f000 fb64 	bl	80061b4 <__mcmp>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	f73f add3 	bgt.w	8005698 <_dtoa_r+0x4a0>
 8005af2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005af4:	9d06      	ldr	r5, [sp, #24]
 8005af6:	ea6f 0a03 	mvn.w	sl, r3
 8005afa:	f04f 0900 	mov.w	r9, #0
 8005afe:	4631      	mov	r1, r6
 8005b00:	4620      	mov	r0, r4
 8005b02:	f000 f977 	bl	8005df4 <_Bfree>
 8005b06:	2f00      	cmp	r7, #0
 8005b08:	f43f aebd 	beq.w	8005886 <_dtoa_r+0x68e>
 8005b0c:	f1b9 0f00 	cmp.w	r9, #0
 8005b10:	d005      	beq.n	8005b1e <_dtoa_r+0x926>
 8005b12:	45b9      	cmp	r9, r7
 8005b14:	d003      	beq.n	8005b1e <_dtoa_r+0x926>
 8005b16:	4649      	mov	r1, r9
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 f96b 	bl	8005df4 <_Bfree>
 8005b1e:	4639      	mov	r1, r7
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 f967 	bl	8005df4 <_Bfree>
 8005b26:	e6ae      	b.n	8005886 <_dtoa_r+0x68e>
 8005b28:	2600      	movs	r6, #0
 8005b2a:	4637      	mov	r7, r6
 8005b2c:	e7e1      	b.n	8005af2 <_dtoa_r+0x8fa>
 8005b2e:	46ba      	mov	sl, r7
 8005b30:	4637      	mov	r7, r6
 8005b32:	e5b1      	b.n	8005698 <_dtoa_r+0x4a0>
 8005b34:	40240000 	.word	0x40240000
 8005b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 80f3 	beq.w	8005d2a <_dtoa_r+0xb32>
 8005b44:	2d00      	cmp	r5, #0
 8005b46:	dd05      	ble.n	8005b54 <_dtoa_r+0x95c>
 8005b48:	4639      	mov	r1, r7
 8005b4a:	462a      	mov	r2, r5
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f000 fadd 	bl	800610c <__lshift>
 8005b52:	4607      	mov	r7, r0
 8005b54:	9b08      	ldr	r3, [sp, #32]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d04c      	beq.n	8005bf4 <_dtoa_r+0x9fc>
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 f915 	bl	8005d8c <_Balloc>
 8005b62:	4605      	mov	r5, r0
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	f107 010c 	add.w	r1, r7, #12
 8005b6a:	3202      	adds	r2, #2
 8005b6c:	0092      	lsls	r2, r2, #2
 8005b6e:	300c      	adds	r0, #12
 8005b70:	f7fe ff62 	bl	8004a38 <memcpy>
 8005b74:	2201      	movs	r2, #1
 8005b76:	4629      	mov	r1, r5
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 fac7 	bl	800610c <__lshift>
 8005b7e:	46b9      	mov	r9, r7
 8005b80:	4607      	mov	r7, r0
 8005b82:	9b06      	ldr	r3, [sp, #24]
 8005b84:	9307      	str	r3, [sp, #28]
 8005b86:	9b02      	ldr	r3, [sp, #8]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	9308      	str	r3, [sp, #32]
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4658      	mov	r0, fp
 8005b92:	f7ff faa1 	bl	80050d8 <quorem>
 8005b96:	4649      	mov	r1, r9
 8005b98:	4605      	mov	r5, r0
 8005b9a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b9e:	4658      	mov	r0, fp
 8005ba0:	f000 fb08 	bl	80061b4 <__mcmp>
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	9002      	str	r0, [sp, #8]
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4620      	mov	r0, r4
 8005bac:	f000 fb1c 	bl	80061e8 <__mdiff>
 8005bb0:	68c3      	ldr	r3, [r0, #12]
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	bb03      	cbnz	r3, 8005bf8 <_dtoa_r+0xa00>
 8005bb6:	4601      	mov	r1, r0
 8005bb8:	9009      	str	r0, [sp, #36]	; 0x24
 8005bba:	4658      	mov	r0, fp
 8005bbc:	f000 fafa 	bl	80061b4 <__mcmp>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bca:	f000 f913 	bl	8005df4 <_Bfree>
 8005bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd0:	b9a3      	cbnz	r3, 8005bfc <_dtoa_r+0xa04>
 8005bd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005bd4:	b992      	cbnz	r2, 8005bfc <_dtoa_r+0xa04>
 8005bd6:	9a08      	ldr	r2, [sp, #32]
 8005bd8:	b982      	cbnz	r2, 8005bfc <_dtoa_r+0xa04>
 8005bda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bde:	d029      	beq.n	8005c34 <_dtoa_r+0xa3c>
 8005be0:	9b02      	ldr	r3, [sp, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dd01      	ble.n	8005bea <_dtoa_r+0x9f2>
 8005be6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005bea:	9b07      	ldr	r3, [sp, #28]
 8005bec:	1c5d      	adds	r5, r3, #1
 8005bee:	f883 8000 	strb.w	r8, [r3]
 8005bf2:	e784      	b.n	8005afe <_dtoa_r+0x906>
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	e7c2      	b.n	8005b7e <_dtoa_r+0x986>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e7e3      	b.n	8005bc4 <_dtoa_r+0x9cc>
 8005bfc:	9a02      	ldr	r2, [sp, #8]
 8005bfe:	2a00      	cmp	r2, #0
 8005c00:	db04      	blt.n	8005c0c <_dtoa_r+0xa14>
 8005c02:	d123      	bne.n	8005c4c <_dtoa_r+0xa54>
 8005c04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c06:	bb0a      	cbnz	r2, 8005c4c <_dtoa_r+0xa54>
 8005c08:	9a08      	ldr	r2, [sp, #32]
 8005c0a:	b9fa      	cbnz	r2, 8005c4c <_dtoa_r+0xa54>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	ddec      	ble.n	8005bea <_dtoa_r+0x9f2>
 8005c10:	4659      	mov	r1, fp
 8005c12:	2201      	movs	r2, #1
 8005c14:	4620      	mov	r0, r4
 8005c16:	f000 fa79 	bl	800610c <__lshift>
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4683      	mov	fp, r0
 8005c1e:	f000 fac9 	bl	80061b4 <__mcmp>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	dc03      	bgt.n	8005c2e <_dtoa_r+0xa36>
 8005c26:	d1e0      	bne.n	8005bea <_dtoa_r+0x9f2>
 8005c28:	f018 0f01 	tst.w	r8, #1
 8005c2c:	d0dd      	beq.n	8005bea <_dtoa_r+0x9f2>
 8005c2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c32:	d1d8      	bne.n	8005be6 <_dtoa_r+0x9ee>
 8005c34:	9b07      	ldr	r3, [sp, #28]
 8005c36:	9a07      	ldr	r2, [sp, #28]
 8005c38:	1c5d      	adds	r5, r3, #1
 8005c3a:	2339      	movs	r3, #57	; 0x39
 8005c3c:	7013      	strb	r3, [r2, #0]
 8005c3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c42:	1e6a      	subs	r2, r5, #1
 8005c44:	2b39      	cmp	r3, #57	; 0x39
 8005c46:	d04d      	beq.n	8005ce4 <_dtoa_r+0xaec>
 8005c48:	3301      	adds	r3, #1
 8005c4a:	e052      	b.n	8005cf2 <_dtoa_r+0xafa>
 8005c4c:	9a07      	ldr	r2, [sp, #28]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f102 0501 	add.w	r5, r2, #1
 8005c54:	dd06      	ble.n	8005c64 <_dtoa_r+0xa6c>
 8005c56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c5a:	d0eb      	beq.n	8005c34 <_dtoa_r+0xa3c>
 8005c5c:	f108 0801 	add.w	r8, r8, #1
 8005c60:	9b07      	ldr	r3, [sp, #28]
 8005c62:	e7c4      	b.n	8005bee <_dtoa_r+0x9f6>
 8005c64:	9b06      	ldr	r3, [sp, #24]
 8005c66:	9a04      	ldr	r2, [sp, #16]
 8005c68:	1aeb      	subs	r3, r5, r3
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c70:	d021      	beq.n	8005cb6 <_dtoa_r+0xabe>
 8005c72:	4659      	mov	r1, fp
 8005c74:	2300      	movs	r3, #0
 8005c76:	220a      	movs	r2, #10
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 f8d2 	bl	8005e22 <__multadd>
 8005c7e:	45b9      	cmp	r9, r7
 8005c80:	4683      	mov	fp, r0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	f04f 020a 	mov.w	r2, #10
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	d105      	bne.n	8005c9c <_dtoa_r+0xaa4>
 8005c90:	f000 f8c7 	bl	8005e22 <__multadd>
 8005c94:	4681      	mov	r9, r0
 8005c96:	4607      	mov	r7, r0
 8005c98:	9507      	str	r5, [sp, #28]
 8005c9a:	e778      	b.n	8005b8e <_dtoa_r+0x996>
 8005c9c:	f000 f8c1 	bl	8005e22 <__multadd>
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	4681      	mov	r9, r0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	220a      	movs	r2, #10
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 f8ba 	bl	8005e22 <__multadd>
 8005cae:	4607      	mov	r7, r0
 8005cb0:	e7f2      	b.n	8005c98 <_dtoa_r+0xaa0>
 8005cb2:	f04f 0900 	mov.w	r9, #0
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 fa26 	bl	800610c <__lshift>
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4683      	mov	fp, r0
 8005cc4:	f000 fa76 	bl	80061b4 <__mcmp>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	dcb8      	bgt.n	8005c3e <_dtoa_r+0xa46>
 8005ccc:	d102      	bne.n	8005cd4 <_dtoa_r+0xadc>
 8005cce:	f018 0f01 	tst.w	r8, #1
 8005cd2:	d1b4      	bne.n	8005c3e <_dtoa_r+0xa46>
 8005cd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cd8:	1e6a      	subs	r2, r5, #1
 8005cda:	2b30      	cmp	r3, #48	; 0x30
 8005cdc:	f47f af0f 	bne.w	8005afe <_dtoa_r+0x906>
 8005ce0:	4615      	mov	r5, r2
 8005ce2:	e7f7      	b.n	8005cd4 <_dtoa_r+0xadc>
 8005ce4:	9b06      	ldr	r3, [sp, #24]
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d105      	bne.n	8005cf6 <_dtoa_r+0xafe>
 8005cea:	2331      	movs	r3, #49	; 0x31
 8005cec:	9a06      	ldr	r2, [sp, #24]
 8005cee:	f10a 0a01 	add.w	sl, sl, #1
 8005cf2:	7013      	strb	r3, [r2, #0]
 8005cf4:	e703      	b.n	8005afe <_dtoa_r+0x906>
 8005cf6:	4615      	mov	r5, r2
 8005cf8:	e7a1      	b.n	8005c3e <_dtoa_r+0xa46>
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <_dtoa_r+0xb60>)
 8005cfc:	f7ff bae1 	b.w	80052c2 <_dtoa_r+0xca>
 8005d00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f47f aabb 	bne.w	800527e <_dtoa_r+0x86>
 8005d08:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <_dtoa_r+0xb64>)
 8005d0a:	f7ff bada 	b.w	80052c2 <_dtoa_r+0xca>
 8005d0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	f77f ae3f 	ble.w	8005994 <_dtoa_r+0x79c>
 8005d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d18:	9308      	str	r3, [sp, #32]
 8005d1a:	e653      	b.n	80059c4 <_dtoa_r+0x7cc>
 8005d1c:	9b04      	ldr	r3, [sp, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dc03      	bgt.n	8005d2a <_dtoa_r+0xb32>
 8005d22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	f73f aed5 	bgt.w	8005ad4 <_dtoa_r+0x8dc>
 8005d2a:	9d06      	ldr	r5, [sp, #24]
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4658      	mov	r0, fp
 8005d30:	f7ff f9d2 	bl	80050d8 <quorem>
 8005d34:	9b06      	ldr	r3, [sp, #24]
 8005d36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d3a:	f805 8b01 	strb.w	r8, [r5], #1
 8005d3e:	9a04      	ldr	r2, [sp, #16]
 8005d40:	1aeb      	subs	r3, r5, r3
 8005d42:	429a      	cmp	r2, r3
 8005d44:	ddb5      	ble.n	8005cb2 <_dtoa_r+0xaba>
 8005d46:	4659      	mov	r1, fp
 8005d48:	2300      	movs	r3, #0
 8005d4a:	220a      	movs	r2, #10
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 f868 	bl	8005e22 <__multadd>
 8005d52:	4683      	mov	fp, r0
 8005d54:	e7ea      	b.n	8005d2c <_dtoa_r+0xb34>
 8005d56:	bf00      	nop
 8005d58:	08006d4c 	.word	0x08006d4c
 8005d5c:	08006d4e 	.word	0x08006d4e

08005d60 <_localeconv_r>:
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <_localeconv_r+0x14>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a18      	ldr	r0, [r3, #32]
 8005d66:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <_localeconv_r+0x18>)
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	bf08      	it	eq
 8005d6c:	4618      	moveq	r0, r3
 8005d6e:	30f0      	adds	r0, #240	; 0xf0
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000410 	.word	0x20000410
 8005d78:	20000474 	.word	0x20000474

08005d7c <malloc>:
 8005d7c:	4b02      	ldr	r3, [pc, #8]	; (8005d88 <malloc+0xc>)
 8005d7e:	4601      	mov	r1, r0
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	f000 baed 	b.w	8006360 <_malloc_r>
 8005d86:	bf00      	nop
 8005d88:	20000410 	.word	0x20000410

08005d8c <_Balloc>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d90:	4604      	mov	r4, r0
 8005d92:	460e      	mov	r6, r1
 8005d94:	b93d      	cbnz	r5, 8005da6 <_Balloc+0x1a>
 8005d96:	2010      	movs	r0, #16
 8005d98:	f7ff fff0 	bl	8005d7c <malloc>
 8005d9c:	6260      	str	r0, [r4, #36]	; 0x24
 8005d9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005da2:	6005      	str	r5, [r0, #0]
 8005da4:	60c5      	str	r5, [r0, #12]
 8005da6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005da8:	68eb      	ldr	r3, [r5, #12]
 8005daa:	b183      	cbz	r3, 8005dce <_Balloc+0x42>
 8005dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005db4:	b9b8      	cbnz	r0, 8005de6 <_Balloc+0x5a>
 8005db6:	2101      	movs	r1, #1
 8005db8:	fa01 f506 	lsl.w	r5, r1, r6
 8005dbc:	1d6a      	adds	r2, r5, #5
 8005dbe:	0092      	lsls	r2, r2, #2
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 fabe 	bl	8006342 <_calloc_r>
 8005dc6:	b160      	cbz	r0, 8005de2 <_Balloc+0x56>
 8005dc8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005dcc:	e00e      	b.n	8005dec <_Balloc+0x60>
 8005dce:	2221      	movs	r2, #33	; 0x21
 8005dd0:	2104      	movs	r1, #4
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 fab5 	bl	8006342 <_calloc_r>
 8005dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dda:	60e8      	str	r0, [r5, #12]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e4      	bne.n	8005dac <_Balloc+0x20>
 8005de2:	2000      	movs	r0, #0
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
 8005de6:	6802      	ldr	r2, [r0, #0]
 8005de8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005dec:	2300      	movs	r3, #0
 8005dee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005df2:	e7f7      	b.n	8005de4 <_Balloc+0x58>

08005df4 <_Bfree>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005df8:	4606      	mov	r6, r0
 8005dfa:	460d      	mov	r5, r1
 8005dfc:	b93c      	cbnz	r4, 8005e0e <_Bfree+0x1a>
 8005dfe:	2010      	movs	r0, #16
 8005e00:	f7ff ffbc 	bl	8005d7c <malloc>
 8005e04:	6270      	str	r0, [r6, #36]	; 0x24
 8005e06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e0a:	6004      	str	r4, [r0, #0]
 8005e0c:	60c4      	str	r4, [r0, #12]
 8005e0e:	b13d      	cbz	r5, 8005e20 <_Bfree+0x2c>
 8005e10:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e12:	686a      	ldr	r2, [r5, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e1a:	6029      	str	r1, [r5, #0]
 8005e1c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e20:	bd70      	pop	{r4, r5, r6, pc}

08005e22 <__multadd>:
 8005e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e26:	461f      	mov	r7, r3
 8005e28:	4606      	mov	r6, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	690d      	ldr	r5, [r1, #16]
 8005e30:	f101 0c14 	add.w	ip, r1, #20
 8005e34:	f8dc 0000 	ldr.w	r0, [ip]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	b281      	uxth	r1, r0
 8005e3c:	fb02 7101 	mla	r1, r2, r1, r7
 8005e40:	0c00      	lsrs	r0, r0, #16
 8005e42:	0c0f      	lsrs	r7, r1, #16
 8005e44:	fb02 7000 	mla	r0, r2, r0, r7
 8005e48:	b289      	uxth	r1, r1
 8005e4a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e4e:	429d      	cmp	r5, r3
 8005e50:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e54:	f84c 1b04 	str.w	r1, [ip], #4
 8005e58:	dcec      	bgt.n	8005e34 <__multadd+0x12>
 8005e5a:	b1d7      	cbz	r7, 8005e92 <__multadd+0x70>
 8005e5c:	68a3      	ldr	r3, [r4, #8]
 8005e5e:	42ab      	cmp	r3, r5
 8005e60:	dc12      	bgt.n	8005e88 <__multadd+0x66>
 8005e62:	6861      	ldr	r1, [r4, #4]
 8005e64:	4630      	mov	r0, r6
 8005e66:	3101      	adds	r1, #1
 8005e68:	f7ff ff90 	bl	8005d8c <_Balloc>
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	6922      	ldr	r2, [r4, #16]
 8005e70:	f104 010c 	add.w	r1, r4, #12
 8005e74:	3202      	adds	r2, #2
 8005e76:	0092      	lsls	r2, r2, #2
 8005e78:	300c      	adds	r0, #12
 8005e7a:	f7fe fddd 	bl	8004a38 <memcpy>
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4630      	mov	r0, r6
 8005e82:	f7ff ffb7 	bl	8005df4 <_Bfree>
 8005e86:	4644      	mov	r4, r8
 8005e88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e8c:	3501      	adds	r5, #1
 8005e8e:	615f      	str	r7, [r3, #20]
 8005e90:	6125      	str	r5, [r4, #16]
 8005e92:	4620      	mov	r0, r4
 8005e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e98 <__hi0bits>:
 8005e98:	0c02      	lsrs	r2, r0, #16
 8005e9a:	0412      	lsls	r2, r2, #16
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	b9b2      	cbnz	r2, 8005ece <__hi0bits+0x36>
 8005ea0:	0403      	lsls	r3, r0, #16
 8005ea2:	2010      	movs	r0, #16
 8005ea4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ea8:	bf04      	itt	eq
 8005eaa:	021b      	lsleq	r3, r3, #8
 8005eac:	3008      	addeq	r0, #8
 8005eae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005eb2:	bf04      	itt	eq
 8005eb4:	011b      	lsleq	r3, r3, #4
 8005eb6:	3004      	addeq	r0, #4
 8005eb8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ebc:	bf04      	itt	eq
 8005ebe:	009b      	lsleq	r3, r3, #2
 8005ec0:	3002      	addeq	r0, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	db06      	blt.n	8005ed4 <__hi0bits+0x3c>
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	d503      	bpl.n	8005ed2 <__hi0bits+0x3a>
 8005eca:	3001      	adds	r0, #1
 8005ecc:	4770      	bx	lr
 8005ece:	2000      	movs	r0, #0
 8005ed0:	e7e8      	b.n	8005ea4 <__hi0bits+0xc>
 8005ed2:	2020      	movs	r0, #32
 8005ed4:	4770      	bx	lr

08005ed6 <__lo0bits>:
 8005ed6:	6803      	ldr	r3, [r0, #0]
 8005ed8:	4601      	mov	r1, r0
 8005eda:	f013 0207 	ands.w	r2, r3, #7
 8005ede:	d00b      	beq.n	8005ef8 <__lo0bits+0x22>
 8005ee0:	07da      	lsls	r2, r3, #31
 8005ee2:	d423      	bmi.n	8005f2c <__lo0bits+0x56>
 8005ee4:	0798      	lsls	r0, r3, #30
 8005ee6:	bf49      	itett	mi
 8005ee8:	085b      	lsrmi	r3, r3, #1
 8005eea:	089b      	lsrpl	r3, r3, #2
 8005eec:	2001      	movmi	r0, #1
 8005eee:	600b      	strmi	r3, [r1, #0]
 8005ef0:	bf5c      	itt	pl
 8005ef2:	600b      	strpl	r3, [r1, #0]
 8005ef4:	2002      	movpl	r0, #2
 8005ef6:	4770      	bx	lr
 8005ef8:	b298      	uxth	r0, r3
 8005efa:	b9a8      	cbnz	r0, 8005f28 <__lo0bits+0x52>
 8005efc:	2010      	movs	r0, #16
 8005efe:	0c1b      	lsrs	r3, r3, #16
 8005f00:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f04:	bf04      	itt	eq
 8005f06:	0a1b      	lsreq	r3, r3, #8
 8005f08:	3008      	addeq	r0, #8
 8005f0a:	071a      	lsls	r2, r3, #28
 8005f0c:	bf04      	itt	eq
 8005f0e:	091b      	lsreq	r3, r3, #4
 8005f10:	3004      	addeq	r0, #4
 8005f12:	079a      	lsls	r2, r3, #30
 8005f14:	bf04      	itt	eq
 8005f16:	089b      	lsreq	r3, r3, #2
 8005f18:	3002      	addeq	r0, #2
 8005f1a:	07da      	lsls	r2, r3, #31
 8005f1c:	d402      	bmi.n	8005f24 <__lo0bits+0x4e>
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	d006      	beq.n	8005f30 <__lo0bits+0x5a>
 8005f22:	3001      	adds	r0, #1
 8005f24:	600b      	str	r3, [r1, #0]
 8005f26:	4770      	bx	lr
 8005f28:	4610      	mov	r0, r2
 8005f2a:	e7e9      	b.n	8005f00 <__lo0bits+0x2a>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	4770      	bx	lr
 8005f30:	2020      	movs	r0, #32
 8005f32:	4770      	bx	lr

08005f34 <__i2b>:
 8005f34:	b510      	push	{r4, lr}
 8005f36:	460c      	mov	r4, r1
 8005f38:	2101      	movs	r1, #1
 8005f3a:	f7ff ff27 	bl	8005d8c <_Balloc>
 8005f3e:	2201      	movs	r2, #1
 8005f40:	6144      	str	r4, [r0, #20]
 8005f42:	6102      	str	r2, [r0, #16]
 8005f44:	bd10      	pop	{r4, pc}

08005f46 <__multiply>:
 8005f46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4a:	4614      	mov	r4, r2
 8005f4c:	690a      	ldr	r2, [r1, #16]
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	4688      	mov	r8, r1
 8005f52:	429a      	cmp	r2, r3
 8005f54:	bfbe      	ittt	lt
 8005f56:	460b      	movlt	r3, r1
 8005f58:	46a0      	movlt	r8, r4
 8005f5a:	461c      	movlt	r4, r3
 8005f5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f6c:	eb07 0609 	add.w	r6, r7, r9
 8005f70:	42b3      	cmp	r3, r6
 8005f72:	bfb8      	it	lt
 8005f74:	3101      	addlt	r1, #1
 8005f76:	f7ff ff09 	bl	8005d8c <_Balloc>
 8005f7a:	f100 0514 	add.w	r5, r0, #20
 8005f7e:	462b      	mov	r3, r5
 8005f80:	2200      	movs	r2, #0
 8005f82:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005f86:	4573      	cmp	r3, lr
 8005f88:	d316      	bcc.n	8005fb8 <__multiply+0x72>
 8005f8a:	f104 0214 	add.w	r2, r4, #20
 8005f8e:	f108 0114 	add.w	r1, r8, #20
 8005f92:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005f96:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	9b00      	ldr	r3, [sp, #0]
 8005f9e:	9201      	str	r2, [sp, #4]
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d80c      	bhi.n	8005fbe <__multiply+0x78>
 8005fa4:	2e00      	cmp	r6, #0
 8005fa6:	dd03      	ble.n	8005fb0 <__multiply+0x6a>
 8005fa8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d05d      	beq.n	800606c <__multiply+0x126>
 8005fb0:	6106      	str	r6, [r0, #16]
 8005fb2:	b003      	add	sp, #12
 8005fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	f843 2b04 	str.w	r2, [r3], #4
 8005fbc:	e7e3      	b.n	8005f86 <__multiply+0x40>
 8005fbe:	f8b2 b000 	ldrh.w	fp, [r2]
 8005fc2:	f1bb 0f00 	cmp.w	fp, #0
 8005fc6:	d023      	beq.n	8006010 <__multiply+0xca>
 8005fc8:	4689      	mov	r9, r1
 8005fca:	46ac      	mov	ip, r5
 8005fcc:	f04f 0800 	mov.w	r8, #0
 8005fd0:	f859 4b04 	ldr.w	r4, [r9], #4
 8005fd4:	f8dc a000 	ldr.w	sl, [ip]
 8005fd8:	b2a3      	uxth	r3, r4
 8005fda:	fa1f fa8a 	uxth.w	sl, sl
 8005fde:	fb0b a303 	mla	r3, fp, r3, sl
 8005fe2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005fe6:	f8dc 4000 	ldr.w	r4, [ip]
 8005fea:	4443      	add	r3, r8
 8005fec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005ff0:	fb0b 840a 	mla	r4, fp, sl, r8
 8005ff4:	46e2      	mov	sl, ip
 8005ff6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006000:	454f      	cmp	r7, r9
 8006002:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006006:	f84a 3b04 	str.w	r3, [sl], #4
 800600a:	d82b      	bhi.n	8006064 <__multiply+0x11e>
 800600c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006010:	9b01      	ldr	r3, [sp, #4]
 8006012:	3204      	adds	r2, #4
 8006014:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006018:	f1ba 0f00 	cmp.w	sl, #0
 800601c:	d020      	beq.n	8006060 <__multiply+0x11a>
 800601e:	4689      	mov	r9, r1
 8006020:	46a8      	mov	r8, r5
 8006022:	f04f 0b00 	mov.w	fp, #0
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	f8b9 c000 	ldrh.w	ip, [r9]
 800602c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006030:	b29b      	uxth	r3, r3
 8006032:	fb0a 440c 	mla	r4, sl, ip, r4
 8006036:	46c4      	mov	ip, r8
 8006038:	445c      	add	r4, fp
 800603a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800603e:	f84c 3b04 	str.w	r3, [ip], #4
 8006042:	f859 3b04 	ldr.w	r3, [r9], #4
 8006046:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	fb0a b303 	mla	r3, sl, r3, fp
 8006050:	454f      	cmp	r7, r9
 8006052:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006056:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800605a:	d805      	bhi.n	8006068 <__multiply+0x122>
 800605c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006060:	3504      	adds	r5, #4
 8006062:	e79b      	b.n	8005f9c <__multiply+0x56>
 8006064:	46d4      	mov	ip, sl
 8006066:	e7b3      	b.n	8005fd0 <__multiply+0x8a>
 8006068:	46e0      	mov	r8, ip
 800606a:	e7dd      	b.n	8006028 <__multiply+0xe2>
 800606c:	3e01      	subs	r6, #1
 800606e:	e799      	b.n	8005fa4 <__multiply+0x5e>

08006070 <__pow5mult>:
 8006070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006074:	4615      	mov	r5, r2
 8006076:	f012 0203 	ands.w	r2, r2, #3
 800607a:	4606      	mov	r6, r0
 800607c:	460f      	mov	r7, r1
 800607e:	d007      	beq.n	8006090 <__pow5mult+0x20>
 8006080:	4c21      	ldr	r4, [pc, #132]	; (8006108 <__pow5mult+0x98>)
 8006082:	3a01      	subs	r2, #1
 8006084:	2300      	movs	r3, #0
 8006086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800608a:	f7ff feca 	bl	8005e22 <__multadd>
 800608e:	4607      	mov	r7, r0
 8006090:	10ad      	asrs	r5, r5, #2
 8006092:	d035      	beq.n	8006100 <__pow5mult+0x90>
 8006094:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006096:	b93c      	cbnz	r4, 80060a8 <__pow5mult+0x38>
 8006098:	2010      	movs	r0, #16
 800609a:	f7ff fe6f 	bl	8005d7c <malloc>
 800609e:	6270      	str	r0, [r6, #36]	; 0x24
 80060a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060a4:	6004      	str	r4, [r0, #0]
 80060a6:	60c4      	str	r4, [r0, #12]
 80060a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060b0:	b94c      	cbnz	r4, 80060c6 <__pow5mult+0x56>
 80060b2:	f240 2171 	movw	r1, #625	; 0x271
 80060b6:	4630      	mov	r0, r6
 80060b8:	f7ff ff3c 	bl	8005f34 <__i2b>
 80060bc:	2300      	movs	r3, #0
 80060be:	4604      	mov	r4, r0
 80060c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80060c4:	6003      	str	r3, [r0, #0]
 80060c6:	f04f 0800 	mov.w	r8, #0
 80060ca:	07eb      	lsls	r3, r5, #31
 80060cc:	d50a      	bpl.n	80060e4 <__pow5mult+0x74>
 80060ce:	4639      	mov	r1, r7
 80060d0:	4622      	mov	r2, r4
 80060d2:	4630      	mov	r0, r6
 80060d4:	f7ff ff37 	bl	8005f46 <__multiply>
 80060d8:	4681      	mov	r9, r0
 80060da:	4639      	mov	r1, r7
 80060dc:	4630      	mov	r0, r6
 80060de:	f7ff fe89 	bl	8005df4 <_Bfree>
 80060e2:	464f      	mov	r7, r9
 80060e4:	106d      	asrs	r5, r5, #1
 80060e6:	d00b      	beq.n	8006100 <__pow5mult+0x90>
 80060e8:	6820      	ldr	r0, [r4, #0]
 80060ea:	b938      	cbnz	r0, 80060fc <__pow5mult+0x8c>
 80060ec:	4622      	mov	r2, r4
 80060ee:	4621      	mov	r1, r4
 80060f0:	4630      	mov	r0, r6
 80060f2:	f7ff ff28 	bl	8005f46 <__multiply>
 80060f6:	6020      	str	r0, [r4, #0]
 80060f8:	f8c0 8000 	str.w	r8, [r0]
 80060fc:	4604      	mov	r4, r0
 80060fe:	e7e4      	b.n	80060ca <__pow5mult+0x5a>
 8006100:	4638      	mov	r0, r7
 8006102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006106:	bf00      	nop
 8006108:	08006eb0 	.word	0x08006eb0

0800610c <__lshift>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	460c      	mov	r4, r1
 8006112:	4607      	mov	r7, r0
 8006114:	4616      	mov	r6, r2
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800611c:	eb0a 0903 	add.w	r9, sl, r3
 8006120:	6849      	ldr	r1, [r1, #4]
 8006122:	68a3      	ldr	r3, [r4, #8]
 8006124:	f109 0501 	add.w	r5, r9, #1
 8006128:	42ab      	cmp	r3, r5
 800612a:	db32      	blt.n	8006192 <__lshift+0x86>
 800612c:	4638      	mov	r0, r7
 800612e:	f7ff fe2d 	bl	8005d8c <_Balloc>
 8006132:	2300      	movs	r3, #0
 8006134:	4680      	mov	r8, r0
 8006136:	461a      	mov	r2, r3
 8006138:	f100 0114 	add.w	r1, r0, #20
 800613c:	4553      	cmp	r3, sl
 800613e:	db2b      	blt.n	8006198 <__lshift+0x8c>
 8006140:	6920      	ldr	r0, [r4, #16]
 8006142:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006146:	f104 0314 	add.w	r3, r4, #20
 800614a:	f016 021f 	ands.w	r2, r6, #31
 800614e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006152:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006156:	d025      	beq.n	80061a4 <__lshift+0x98>
 8006158:	2000      	movs	r0, #0
 800615a:	f1c2 0e20 	rsb	lr, r2, #32
 800615e:	468a      	mov	sl, r1
 8006160:	681e      	ldr	r6, [r3, #0]
 8006162:	4096      	lsls	r6, r2
 8006164:	4330      	orrs	r0, r6
 8006166:	f84a 0b04 	str.w	r0, [sl], #4
 800616a:	f853 0b04 	ldr.w	r0, [r3], #4
 800616e:	459c      	cmp	ip, r3
 8006170:	fa20 f00e 	lsr.w	r0, r0, lr
 8006174:	d814      	bhi.n	80061a0 <__lshift+0x94>
 8006176:	6048      	str	r0, [r1, #4]
 8006178:	b108      	cbz	r0, 800617e <__lshift+0x72>
 800617a:	f109 0502 	add.w	r5, r9, #2
 800617e:	3d01      	subs	r5, #1
 8006180:	4638      	mov	r0, r7
 8006182:	f8c8 5010 	str.w	r5, [r8, #16]
 8006186:	4621      	mov	r1, r4
 8006188:	f7ff fe34 	bl	8005df4 <_Bfree>
 800618c:	4640      	mov	r0, r8
 800618e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006192:	3101      	adds	r1, #1
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	e7c7      	b.n	8006128 <__lshift+0x1c>
 8006198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800619c:	3301      	adds	r3, #1
 800619e:	e7cd      	b.n	800613c <__lshift+0x30>
 80061a0:	4651      	mov	r1, sl
 80061a2:	e7dc      	b.n	800615e <__lshift+0x52>
 80061a4:	3904      	subs	r1, #4
 80061a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061aa:	459c      	cmp	ip, r3
 80061ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80061b0:	d8f9      	bhi.n	80061a6 <__lshift+0x9a>
 80061b2:	e7e4      	b.n	800617e <__lshift+0x72>

080061b4 <__mcmp>:
 80061b4:	6903      	ldr	r3, [r0, #16]
 80061b6:	690a      	ldr	r2, [r1, #16]
 80061b8:	b530      	push	{r4, r5, lr}
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	d10c      	bne.n	80061d8 <__mcmp+0x24>
 80061be:	0092      	lsls	r2, r2, #2
 80061c0:	3014      	adds	r0, #20
 80061c2:	3114      	adds	r1, #20
 80061c4:	1884      	adds	r4, r0, r2
 80061c6:	4411      	add	r1, r2
 80061c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061d0:	4295      	cmp	r5, r2
 80061d2:	d003      	beq.n	80061dc <__mcmp+0x28>
 80061d4:	d305      	bcc.n	80061e2 <__mcmp+0x2e>
 80061d6:	2301      	movs	r3, #1
 80061d8:	4618      	mov	r0, r3
 80061da:	bd30      	pop	{r4, r5, pc}
 80061dc:	42a0      	cmp	r0, r4
 80061de:	d3f3      	bcc.n	80061c8 <__mcmp+0x14>
 80061e0:	e7fa      	b.n	80061d8 <__mcmp+0x24>
 80061e2:	f04f 33ff 	mov.w	r3, #4294967295
 80061e6:	e7f7      	b.n	80061d8 <__mcmp+0x24>

080061e8 <__mdiff>:
 80061e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ec:	460d      	mov	r5, r1
 80061ee:	4607      	mov	r7, r0
 80061f0:	4611      	mov	r1, r2
 80061f2:	4628      	mov	r0, r5
 80061f4:	4614      	mov	r4, r2
 80061f6:	f7ff ffdd 	bl	80061b4 <__mcmp>
 80061fa:	1e06      	subs	r6, r0, #0
 80061fc:	d108      	bne.n	8006210 <__mdiff+0x28>
 80061fe:	4631      	mov	r1, r6
 8006200:	4638      	mov	r0, r7
 8006202:	f7ff fdc3 	bl	8005d8c <_Balloc>
 8006206:	2301      	movs	r3, #1
 8006208:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800620c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006210:	bfa4      	itt	ge
 8006212:	4623      	movge	r3, r4
 8006214:	462c      	movge	r4, r5
 8006216:	4638      	mov	r0, r7
 8006218:	6861      	ldr	r1, [r4, #4]
 800621a:	bfa6      	itte	ge
 800621c:	461d      	movge	r5, r3
 800621e:	2600      	movge	r6, #0
 8006220:	2601      	movlt	r6, #1
 8006222:	f7ff fdb3 	bl	8005d8c <_Balloc>
 8006226:	f04f 0e00 	mov.w	lr, #0
 800622a:	60c6      	str	r6, [r0, #12]
 800622c:	692b      	ldr	r3, [r5, #16]
 800622e:	6926      	ldr	r6, [r4, #16]
 8006230:	f104 0214 	add.w	r2, r4, #20
 8006234:	f105 0914 	add.w	r9, r5, #20
 8006238:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800623c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006240:	f100 0114 	add.w	r1, r0, #20
 8006244:	f852 ab04 	ldr.w	sl, [r2], #4
 8006248:	f859 5b04 	ldr.w	r5, [r9], #4
 800624c:	fa1f f38a 	uxth.w	r3, sl
 8006250:	4473      	add	r3, lr
 8006252:	b2ac      	uxth	r4, r5
 8006254:	1b1b      	subs	r3, r3, r4
 8006256:	0c2c      	lsrs	r4, r5, #16
 8006258:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800625c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006260:	b29b      	uxth	r3, r3
 8006262:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006266:	45c8      	cmp	r8, r9
 8006268:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800626c:	4694      	mov	ip, r2
 800626e:	f841 4b04 	str.w	r4, [r1], #4
 8006272:	d8e7      	bhi.n	8006244 <__mdiff+0x5c>
 8006274:	45bc      	cmp	ip, r7
 8006276:	d304      	bcc.n	8006282 <__mdiff+0x9a>
 8006278:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800627c:	b183      	cbz	r3, 80062a0 <__mdiff+0xb8>
 800627e:	6106      	str	r6, [r0, #16]
 8006280:	e7c4      	b.n	800620c <__mdiff+0x24>
 8006282:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006286:	b2a2      	uxth	r2, r4
 8006288:	4472      	add	r2, lr
 800628a:	1413      	asrs	r3, r2, #16
 800628c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006290:	b292      	uxth	r2, r2
 8006292:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006296:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800629a:	f841 2b04 	str.w	r2, [r1], #4
 800629e:	e7e9      	b.n	8006274 <__mdiff+0x8c>
 80062a0:	3e01      	subs	r6, #1
 80062a2:	e7e9      	b.n	8006278 <__mdiff+0x90>

080062a4 <__d2b>:
 80062a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80062a8:	461c      	mov	r4, r3
 80062aa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80062ae:	2101      	movs	r1, #1
 80062b0:	4690      	mov	r8, r2
 80062b2:	f7ff fd6b 	bl	8005d8c <_Balloc>
 80062b6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80062ba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80062be:	4607      	mov	r7, r0
 80062c0:	bb34      	cbnz	r4, 8006310 <__d2b+0x6c>
 80062c2:	9201      	str	r2, [sp, #4]
 80062c4:	f1b8 0200 	subs.w	r2, r8, #0
 80062c8:	d027      	beq.n	800631a <__d2b+0x76>
 80062ca:	a802      	add	r0, sp, #8
 80062cc:	f840 2d08 	str.w	r2, [r0, #-8]!
 80062d0:	f7ff fe01 	bl	8005ed6 <__lo0bits>
 80062d4:	9900      	ldr	r1, [sp, #0]
 80062d6:	b1f0      	cbz	r0, 8006316 <__d2b+0x72>
 80062d8:	9a01      	ldr	r2, [sp, #4]
 80062da:	f1c0 0320 	rsb	r3, r0, #32
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	430b      	orrs	r3, r1
 80062e4:	40c2      	lsrs	r2, r0
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	9201      	str	r2, [sp, #4]
 80062ea:	9b01      	ldr	r3, [sp, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	bf14      	ite	ne
 80062f0:	2102      	movne	r1, #2
 80062f2:	2101      	moveq	r1, #1
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	6139      	str	r1, [r7, #16]
 80062f8:	b1c4      	cbz	r4, 800632c <__d2b+0x88>
 80062fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80062fe:	4404      	add	r4, r0
 8006300:	6034      	str	r4, [r6, #0]
 8006302:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006306:	6028      	str	r0, [r5, #0]
 8006308:	4638      	mov	r0, r7
 800630a:	b002      	add	sp, #8
 800630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006310:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006314:	e7d5      	b.n	80062c2 <__d2b+0x1e>
 8006316:	6179      	str	r1, [r7, #20]
 8006318:	e7e7      	b.n	80062ea <__d2b+0x46>
 800631a:	a801      	add	r0, sp, #4
 800631c:	f7ff fddb 	bl	8005ed6 <__lo0bits>
 8006320:	2101      	movs	r1, #1
 8006322:	9b01      	ldr	r3, [sp, #4]
 8006324:	6139      	str	r1, [r7, #16]
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	3020      	adds	r0, #32
 800632a:	e7e5      	b.n	80062f8 <__d2b+0x54>
 800632c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006330:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006334:	6030      	str	r0, [r6, #0]
 8006336:	6918      	ldr	r0, [r3, #16]
 8006338:	f7ff fdae 	bl	8005e98 <__hi0bits>
 800633c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006340:	e7e1      	b.n	8006306 <__d2b+0x62>

08006342 <_calloc_r>:
 8006342:	b538      	push	{r3, r4, r5, lr}
 8006344:	fb02 f401 	mul.w	r4, r2, r1
 8006348:	4621      	mov	r1, r4
 800634a:	f000 f809 	bl	8006360 <_malloc_r>
 800634e:	4605      	mov	r5, r0
 8006350:	b118      	cbz	r0, 800635a <_calloc_r+0x18>
 8006352:	4622      	mov	r2, r4
 8006354:	2100      	movs	r1, #0
 8006356:	f7fe fb7a 	bl	8004a4e <memset>
 800635a:	4628      	mov	r0, r5
 800635c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006360 <_malloc_r>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	1ccd      	adds	r5, r1, #3
 8006364:	f025 0503 	bic.w	r5, r5, #3
 8006368:	3508      	adds	r5, #8
 800636a:	2d0c      	cmp	r5, #12
 800636c:	bf38      	it	cc
 800636e:	250c      	movcc	r5, #12
 8006370:	2d00      	cmp	r5, #0
 8006372:	4606      	mov	r6, r0
 8006374:	db01      	blt.n	800637a <_malloc_r+0x1a>
 8006376:	42a9      	cmp	r1, r5
 8006378:	d903      	bls.n	8006382 <_malloc_r+0x22>
 800637a:	230c      	movs	r3, #12
 800637c:	6033      	str	r3, [r6, #0]
 800637e:	2000      	movs	r0, #0
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	f000 f869 	bl	8006458 <__malloc_lock>
 8006386:	4a21      	ldr	r2, [pc, #132]	; (800640c <_malloc_r+0xac>)
 8006388:	6814      	ldr	r4, [r2, #0]
 800638a:	4621      	mov	r1, r4
 800638c:	b991      	cbnz	r1, 80063b4 <_malloc_r+0x54>
 800638e:	4c20      	ldr	r4, [pc, #128]	; (8006410 <_malloc_r+0xb0>)
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	b91b      	cbnz	r3, 800639c <_malloc_r+0x3c>
 8006394:	4630      	mov	r0, r6
 8006396:	f000 f83d 	bl	8006414 <_sbrk_r>
 800639a:	6020      	str	r0, [r4, #0]
 800639c:	4629      	mov	r1, r5
 800639e:	4630      	mov	r0, r6
 80063a0:	f000 f838 	bl	8006414 <_sbrk_r>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d124      	bne.n	80063f2 <_malloc_r+0x92>
 80063a8:	230c      	movs	r3, #12
 80063aa:	4630      	mov	r0, r6
 80063ac:	6033      	str	r3, [r6, #0]
 80063ae:	f000 f854 	bl	800645a <__malloc_unlock>
 80063b2:	e7e4      	b.n	800637e <_malloc_r+0x1e>
 80063b4:	680b      	ldr	r3, [r1, #0]
 80063b6:	1b5b      	subs	r3, r3, r5
 80063b8:	d418      	bmi.n	80063ec <_malloc_r+0x8c>
 80063ba:	2b0b      	cmp	r3, #11
 80063bc:	d90f      	bls.n	80063de <_malloc_r+0x7e>
 80063be:	600b      	str	r3, [r1, #0]
 80063c0:	18cc      	adds	r4, r1, r3
 80063c2:	50cd      	str	r5, [r1, r3]
 80063c4:	4630      	mov	r0, r6
 80063c6:	f000 f848 	bl	800645a <__malloc_unlock>
 80063ca:	f104 000b 	add.w	r0, r4, #11
 80063ce:	1d23      	adds	r3, r4, #4
 80063d0:	f020 0007 	bic.w	r0, r0, #7
 80063d4:	1ac3      	subs	r3, r0, r3
 80063d6:	d0d3      	beq.n	8006380 <_malloc_r+0x20>
 80063d8:	425a      	negs	r2, r3
 80063da:	50e2      	str	r2, [r4, r3]
 80063dc:	e7d0      	b.n	8006380 <_malloc_r+0x20>
 80063de:	684b      	ldr	r3, [r1, #4]
 80063e0:	428c      	cmp	r4, r1
 80063e2:	bf16      	itet	ne
 80063e4:	6063      	strne	r3, [r4, #4]
 80063e6:	6013      	streq	r3, [r2, #0]
 80063e8:	460c      	movne	r4, r1
 80063ea:	e7eb      	b.n	80063c4 <_malloc_r+0x64>
 80063ec:	460c      	mov	r4, r1
 80063ee:	6849      	ldr	r1, [r1, #4]
 80063f0:	e7cc      	b.n	800638c <_malloc_r+0x2c>
 80063f2:	1cc4      	adds	r4, r0, #3
 80063f4:	f024 0403 	bic.w	r4, r4, #3
 80063f8:	42a0      	cmp	r0, r4
 80063fa:	d005      	beq.n	8006408 <_malloc_r+0xa8>
 80063fc:	1a21      	subs	r1, r4, r0
 80063fe:	4630      	mov	r0, r6
 8006400:	f000 f808 	bl	8006414 <_sbrk_r>
 8006404:	3001      	adds	r0, #1
 8006406:	d0cf      	beq.n	80063a8 <_malloc_r+0x48>
 8006408:	6025      	str	r5, [r4, #0]
 800640a:	e7db      	b.n	80063c4 <_malloc_r+0x64>
 800640c:	200015b4 	.word	0x200015b4
 8006410:	200015b8 	.word	0x200015b8

08006414 <_sbrk_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	2300      	movs	r3, #0
 8006418:	4c05      	ldr	r4, [pc, #20]	; (8006430 <_sbrk_r+0x1c>)
 800641a:	4605      	mov	r5, r0
 800641c:	4608      	mov	r0, r1
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	f7fa fdca 	bl	8000fb8 <_sbrk>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_sbrk_r+0x1a>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	b103      	cbz	r3, 800642e <_sbrk_r+0x1a>
 800642c:	602b      	str	r3, [r5, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	200016a0 	.word	0x200016a0

08006434 <__ascii_mbtowc>:
 8006434:	b082      	sub	sp, #8
 8006436:	b901      	cbnz	r1, 800643a <__ascii_mbtowc+0x6>
 8006438:	a901      	add	r1, sp, #4
 800643a:	b142      	cbz	r2, 800644e <__ascii_mbtowc+0x1a>
 800643c:	b14b      	cbz	r3, 8006452 <__ascii_mbtowc+0x1e>
 800643e:	7813      	ldrb	r3, [r2, #0]
 8006440:	600b      	str	r3, [r1, #0]
 8006442:	7812      	ldrb	r2, [r2, #0]
 8006444:	1c10      	adds	r0, r2, #0
 8006446:	bf18      	it	ne
 8006448:	2001      	movne	r0, #1
 800644a:	b002      	add	sp, #8
 800644c:	4770      	bx	lr
 800644e:	4610      	mov	r0, r2
 8006450:	e7fb      	b.n	800644a <__ascii_mbtowc+0x16>
 8006452:	f06f 0001 	mvn.w	r0, #1
 8006456:	e7f8      	b.n	800644a <__ascii_mbtowc+0x16>

08006458 <__malloc_lock>:
 8006458:	4770      	bx	lr

0800645a <__malloc_unlock>:
 800645a:	4770      	bx	lr

0800645c <__ascii_wctomb>:
 800645c:	b149      	cbz	r1, 8006472 <__ascii_wctomb+0x16>
 800645e:	2aff      	cmp	r2, #255	; 0xff
 8006460:	bf8b      	itete	hi
 8006462:	238a      	movhi	r3, #138	; 0x8a
 8006464:	700a      	strbls	r2, [r1, #0]
 8006466:	6003      	strhi	r3, [r0, #0]
 8006468:	2001      	movls	r0, #1
 800646a:	bf88      	it	hi
 800646c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006470:	4770      	bx	lr
 8006472:	4608      	mov	r0, r1
 8006474:	4770      	bx	lr
	...

08006478 <_init>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	bf00      	nop
 800647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647e:	bc08      	pop	{r3}
 8006480:	469e      	mov	lr, r3
 8006482:	4770      	bx	lr

08006484 <_fini>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	bf00      	nop
 8006488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648a:	bc08      	pop	{r3}
 800648c:	469e      	mov	lr, r3
 800648e:	4770      	bx	lr
