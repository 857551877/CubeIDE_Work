
F4_USBdata.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006378  08006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e8  080063e8  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f0  080063f0  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  080063f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000940  200001c8  080065c0  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b08  080065c0  00020b08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d52  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b2a  00000000  00000000  00031f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b00  00000000  00000000  00034a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  00035578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022edd  00000000  00000000  00035f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c9d9  00000000  00000000  00058dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c352e  00000000  00000000  000657d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128d04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c0c  00000000  00000000  00128d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c8 	.word	0x200001c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006360 	.word	0x08006360

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001cc 	.word	0x200001cc
 80001c4:	08006360 	.word	0x08006360

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
 80004f2:	4b31      	ldr	r3, [pc, #196]	; (80005b8 <MX_GPIO_Init+0xe0>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a30      	ldr	r2, [pc, #192]	; (80005b8 <MX_GPIO_Init+0xe0>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <MX_GPIO_Init+0xe0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <MX_GPIO_Init+0xe0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a29      	ldr	r2, [pc, #164]	; (80005b8 <MX_GPIO_Init+0xe0>)
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <MX_GPIO_Init+0xe0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <MX_GPIO_Init+0xe0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a22      	ldr	r2, [pc, #136]	; (80005b8 <MX_GPIO_Init+0xe0>)
 8000530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <MX_GPIO_Init+0xe0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_GPIO_Init+0xe0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_GPIO_Init+0xe0>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_GPIO_Init+0xe0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2108      	movs	r1, #8
 8000562:	4816      	ldr	r0, [pc, #88]	; (80005bc <MX_GPIO_Init+0xe4>)
 8000564:	f000 fd1e 	bl	8000fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_SWITCH_GPIO_Port, USB_SWITCH_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056e:	4814      	ldr	r0, [pc, #80]	; (80005c0 <MX_GPIO_Init+0xe8>)
 8000570:	f000 fd18 	bl	8000fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000574:	2308      	movs	r3, #8
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	480c      	ldr	r0, [pc, #48]	; (80005bc <MX_GPIO_Init+0xe4>)
 800058c:	f000 fb70 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_SWITCH_Pin;
 8000590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_GPIO_Init+0xe8>)
 80005aa:	f000 fb61 	bl	8000c70 <HAL_GPIO_Init>

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40021800 	.word	0x40021800
 80005c0:	40020000 	.word	0x40020000

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 f9ac 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f81e 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f7ff ff82 	bl	80004d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005d4:	f005 f936 	bl	8005844 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(USB_SWITCH_GPIO_Port, USB_SWITCH_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <main+0x3c>)
 80005e0:	f000 fce0 	bl	8000fa4 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // USB_SentStr("abcdefghijklmn\n");

	  if(USB_GetDataFlag == 1) {
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <main+0x40>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d1fb      	bne.n	80005e4 <main+0x20>
		  USB_GetDataFlag = 0;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <main+0x40>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
		// uint8_t a =  USB_DataBuffer[0];
		 USB_SentStr(USB_DataBuffer);
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <main+0x44>)
 80005f4:	f000 f874 	bl	80006e0 <USB_SentStr>
		 USB_GetDataFlag = 0;
 80005f8:	4b02      	ldr	r3, [pc, #8]	; (8000604 <main+0x40>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	  if(USB_GetDataFlag == 1) {
 80005fe:	e7f1      	b.n	80005e4 <main+0x20>
 8000600:	40020000 	.word	0x40020000
 8000604:	2000021e 	.word	0x2000021e
 8000608:	200001ec 	.word	0x200001ec

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 fdde 	bl	80061dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000680:	23a8      	movs	r3, #168	; 0xa8
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fe0b 	bl	80022ac <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f86e 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2105      	movs	r1, #5
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 f864 	bl	800278c <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f857 	bl	800077c <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <USB_SentStr>:

/* USER CODE BEGIN 4 */
void USB_SentStr(uint8_t *str) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b096      	sub	sp, #88	; 0x58
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	int strSize = strlen(str); //get length
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff fd6d 	bl	80001c8 <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(strSize > 64) return; //if too long
 80006f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006f4:	2b40      	cmp	r3, #64	; 0x40
 80006f6:	dc3a      	bgt.n	800076e <USB_SentStr+0x8e>
	uint8_t temp[66] = {0}; //buffer string
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2242      	movs	r2, #66	; 0x42
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f005 fd6b 	bl	80061dc <memset>
	for(int i = 0; i < strSize; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	657b      	str	r3, [r7, #84]	; 0x54
 800070a:	e00c      	b.n	8000726 <USB_SentStr+0x46>
		temp[i] = str[i];  //move to buffer
 800070c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	7819      	ldrb	r1, [r3, #0]
 8000714:	f107 0208 	add.w	r2, r7, #8
 8000718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800071a:	4413      	add	r3, r2
 800071c:	460a      	mov	r2, r1
 800071e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strSize; i++) {
 8000720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000722:	3301      	adds	r3, #1
 8000724:	657b      	str	r3, [r7, #84]	; 0x54
 8000726:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800072a:	429a      	cmp	r2, r3
 800072c:	dbee      	blt.n	800070c <USB_SentStr+0x2c>
	}
	for(int j = 0; j < 11; j++) {
 800072e:	2300      	movs	r3, #0
 8000730:	653b      	str	r3, [r7, #80]	; 0x50
 8000732:	e018      	b.n	8000766 <USB_SentStr+0x86>
		while(((USBD_CUSTOM_HID_HandleTypeDef*)(hUsbDeviceFS.pClassData))->state == CUSTOM_HID_BUSY); //if dma trans busy
 8000734:	bf00      	nop
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <USB_SentStr+0x98>)
 8000738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800073c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000740:	2b01      	cmp	r3, #1
 8000742:	d0f8      	beq.n	8000736 <USB_SentStr+0x56>
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &temp[j * 6], 6); // sent data
 8000744:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	461a      	mov	r2, r3
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	4413      	add	r3, r2
 8000756:	2206      	movs	r2, #6
 8000758:	4619      	mov	r1, r3
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <USB_SentStr+0x98>)
 800075c:	f003 fe7e 	bl	800445c <USBD_CUSTOM_HID_SendReport>
	for(int j = 0; j < 11; j++) {
 8000760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000762:	3301      	adds	r3, #1
 8000764:	653b      	str	r3, [r7, #80]	; 0x50
 8000766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000768:	2b0a      	cmp	r3, #10
 800076a:	dde3      	ble.n	8000734 <USB_SentStr+0x54>
 800076c:	e000      	b.n	8000770 <USB_SentStr+0x90>
	if(strSize > 64) return; //if too long
 800076e:	bf00      	nop
	}
}
 8000770:	3758      	adds	r7, #88	; 0x58
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000022c 	.word	0x2000022c

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <HAL_MspInit+0x4c>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <HardFault_Handler+0x4>

080007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <MemManage_Handler+0x4>

080007f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <BusFault_Handler+0x4>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <UsageFault_Handler+0x4>

08000802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000830:	f000 f8ca 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <OTG_FS_IRQHandler+0x10>)
 800083e:	f000 fd1a 	bl	8001276 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200006fc 	.word	0x200006fc

0800084c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <_sbrk+0x50>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x16>
		heap_end = &end;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <_sbrk+0x50>)
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <_sbrk+0x54>)
 8000860:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <_sbrk+0x50>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <_sbrk+0x50>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	466a      	mov	r2, sp
 8000872:	4293      	cmp	r3, r2
 8000874:	d907      	bls.n	8000886 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000876:	f005 fc77 	bl	8006168 <__errno>
 800087a:	4602      	mov	r2, r0
 800087c:	230c      	movs	r3, #12
 800087e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	e006      	b.n	8000894 <_sbrk+0x48>
	}

	heap_end += incr;
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <_sbrk+0x50>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a03      	ldr	r2, [pc, #12]	; (800089c <_sbrk+0x50>)
 8000890:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200001e4 	.word	0x200001e4
 80008a0:	20000b08 	.word	0x20000b08

080008a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <SystemInit+0x28>)
 80008aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ae:	4a07      	ldr	r2, [pc, #28]	; (80008cc <SystemInit+0x28>)
 80008b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <SystemInit+0x28>)
 80008ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008be:	609a      	str	r2, [r3, #8]
#endif
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008d6:	e003      	b.n	80008e0 <LoopCopyDataInit>

080008d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008de:	3104      	adds	r1, #4

080008e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008e8:	d3f6      	bcc.n	80008d8 <CopyDataInit>
  ldr  r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008ec:	e002      	b.n	80008f4 <LoopFillZerobss>

080008ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008f0:	f842 3b04 	str.w	r3, [r2], #4

080008f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008f8:	d3f9      	bcc.n	80008ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008fa:	f7ff ffd3 	bl	80008a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f005 fc39 	bl	8006174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fe5f 	bl	80005c4 <main>
  bx  lr    
 8000906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000908:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800090c:	080063f8 	.word	0x080063f8
  ldr  r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000914:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8000918:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 800091c:	20000b08 	.word	0x20000b08

08000920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_Init+0x40>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <HAL_Init+0x40>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_Init+0x40>)
 800093a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x40>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f94d 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff ff18 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023c00 	.word	0x40023c00

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f965 	bl	8000c56 <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f92d 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000228 	.word	0x20000228

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000228 	.word	0x20000228

08000a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff ffee 	bl	80009f0 <HAL_GetTick>
 8000a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a20:	d005      	beq.n	8000a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_Delay+0x40>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffde 	bl	80009f0 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f7      	bhi.n	8000a30 <HAL_Delay+0x28>
  {
  }
}
 8000a40:	bf00      	nop
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000008 	.word	0x20000008

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <__NVIC_EnableIRQ+0x38>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff8e 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff29 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff3e 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff8e 	bl	8000b40 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5d 	bl	8000aec <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff31 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffa2 	bl	8000ba8 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
 8000c8a:	e16b      	b.n	8000f64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f040 815a 	bne.w	8000f5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d00b      	beq.n	8000cca <HAL_GPIO_Init+0x5a>
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d007      	beq.n	8000cca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cbe:	2b11      	cmp	r3, #17
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b12      	cmp	r3, #18
 8000cc8:	d130      	bne.n	8000d2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d00:	2201      	movs	r2, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	091b      	lsrs	r3, r3, #4
 8000d16:	f003 0201 	and.w	r2, r3, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0xfc>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b12      	cmp	r3, #18
 8000d6a:	d123      	bne.n	8000db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3208      	adds	r2, #8
 8000d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	69b9      	ldr	r1, [r7, #24]
 8000db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0203 	and.w	r2, r3, #3
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80b4 	beq.w	8000f5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b5f      	ldr	r3, [pc, #380]	; (8000f78 <HAL_GPIO_Init+0x308>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a5e      	ldr	r2, [pc, #376]	; (8000f78 <HAL_GPIO_Init+0x308>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b5c      	ldr	r3, [pc, #368]	; (8000f78 <HAL_GPIO_Init+0x308>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e12:	4a5a      	ldr	r2, [pc, #360]	; (8000f7c <HAL_GPIO_Init+0x30c>)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a51      	ldr	r2, [pc, #324]	; (8000f80 <HAL_GPIO_Init+0x310>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d02b      	beq.n	8000e96 <HAL_GPIO_Init+0x226>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a50      	ldr	r2, [pc, #320]	; (8000f84 <HAL_GPIO_Init+0x314>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d025      	beq.n	8000e92 <HAL_GPIO_Init+0x222>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4f      	ldr	r2, [pc, #316]	; (8000f88 <HAL_GPIO_Init+0x318>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d01f      	beq.n	8000e8e <HAL_GPIO_Init+0x21e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4e      	ldr	r2, [pc, #312]	; (8000f8c <HAL_GPIO_Init+0x31c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d019      	beq.n	8000e8a <HAL_GPIO_Init+0x21a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4d      	ldr	r2, [pc, #308]	; (8000f90 <HAL_GPIO_Init+0x320>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d013      	beq.n	8000e86 <HAL_GPIO_Init+0x216>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <HAL_GPIO_Init+0x324>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00d      	beq.n	8000e82 <HAL_GPIO_Init+0x212>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4b      	ldr	r2, [pc, #300]	; (8000f98 <HAL_GPIO_Init+0x328>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x20e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4a      	ldr	r2, [pc, #296]	; (8000f9c <HAL_GPIO_Init+0x32c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d101      	bne.n	8000e7a <HAL_GPIO_Init+0x20a>
 8000e76:	2307      	movs	r3, #7
 8000e78:	e00e      	b.n	8000e98 <HAL_GPIO_Init+0x228>
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	e00c      	b.n	8000e98 <HAL_GPIO_Init+0x228>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e00a      	b.n	8000e98 <HAL_GPIO_Init+0x228>
 8000e82:	2305      	movs	r3, #5
 8000e84:	e008      	b.n	8000e98 <HAL_GPIO_Init+0x228>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x228>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e004      	b.n	8000e98 <HAL_GPIO_Init+0x228>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e002      	b.n	8000e98 <HAL_GPIO_Init+0x228>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <HAL_GPIO_Init+0x228>
 8000e96:	2300      	movs	r3, #0
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	f002 0203 	and.w	r2, r2, #3
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	4093      	lsls	r3, r2
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea8:	4934      	ldr	r1, [pc, #208]	; (8000f7c <HAL_GPIO_Init+0x30c>)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <HAL_GPIO_Init+0x330>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eda:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <HAL_GPIO_Init+0x330>)
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_GPIO_Init+0x330>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f04:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <HAL_GPIO_Init+0x330>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <HAL_GPIO_Init+0x330>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_GPIO_Init+0x330>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_GPIO_Init+0x330>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f58:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <HAL_GPIO_Init+0x330>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	2b0f      	cmp	r3, #15
 8000f68:	f67f ae90 	bls.w	8000c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3724      	adds	r7, #36	; 0x24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40013800 	.word	0x40013800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40021400 	.word	0x40021400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40021c00 	.word	0x40021c00
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc0:	e003      	b.n	8000fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd8:	b08f      	sub	sp, #60	; 0x3c
 8000fda:	af0a      	add	r7, sp, #40	; 0x28
 8000fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e10f      	b.n	8001208 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d106      	bne.n	8001008 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f004 fdc6 	bl	8005b94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2203      	movs	r2, #3
 800100c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fe8f 	bl	8002d4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	687e      	ldr	r6, [r7, #4]
 8001034:	466d      	mov	r5, sp
 8001036:	f106 0410 	add.w	r4, r6, #16
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001046:	e885 0003 	stmia.w	r5, {r0, r1}
 800104a:	1d33      	adds	r3, r6, #4
 800104c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f001 fd66 	bl	8002b20 <USB_CoreInit>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d005      	beq.n	8001066 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2202      	movs	r2, #2
 800105e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e0d0      	b.n	8001208 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fe7d 	bl	8002d6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e04a      	b.n	800110e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	1a9b      	subs	r3, r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	333d      	adds	r3, #61	; 0x3d
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	1a9b      	subs	r3, r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	333c      	adds	r3, #60	; 0x3c
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	b298      	uxth	r0, r3
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	1a9b      	subs	r3, r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	3342      	adds	r3, #66	; 0x42
 80010b4:	4602      	mov	r2, r0
 80010b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	333f      	adds	r3, #63	; 0x3f
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	3344      	adds	r3, #68	; 0x44
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	3348      	adds	r3, #72	; 0x48
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	1a9b      	subs	r3, r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	3350      	adds	r3, #80	; 0x50
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	3301      	adds	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3af      	bcc.n	8001078 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	e044      	b.n	80011a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	1a9b      	subs	r3, r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	1a9b      	subs	r3, r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	3301      	adds	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d3b5      	bcc.n	800111e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	687e      	ldr	r6, [r7, #4]
 80011ba:	466d      	mov	r5, sp
 80011bc:	f106 0410 	add.w	r4, r6, #16
 80011c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80011d0:	1d33      	adds	r3, r6, #4
 80011d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f001 fdf3 	bl	8002dc0 <USB_DevInit>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e00d      	b.n	8001208 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f002 fe32 	bl	8003e6a <USB_DevDisconnect>

  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001210 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_PCD_Start+0x1c>
 8001228:	2302      	movs	r3, #2
 800122a:	e020      	b.n	800126e <HAL_PCD_Start+0x5e>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	2b01      	cmp	r3, #1
 800123a:	d109      	bne.n	8001250 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001240:	2b01      	cmp	r3, #1
 8001242:	d005      	beq.n	8001250 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001248:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f002 fdf0 	bl	8003e3a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fd62 	bl	8002d28 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001276:	b590      	push	{r4, r7, lr}
 8001278:	b08d      	sub	sp, #52	; 0x34
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f002 fe97 	bl	8003fc0 <USB_GetMode>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	f040 839d 	bne.w	80019d4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fdfb 	bl	8003e9a <USB_ReadInterrupts>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8393 	beq.w	80019d2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 fdf2 	bl	8003e9a <USB_ReadInterrupts>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d107      	bne.n	80012d0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f002 0202 	and.w	r2, r2, #2
 80012ce:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 fde0 	bl	8003e9a <USB_ReadInterrupts>
 80012da:	4603      	mov	r3, r0
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	2b10      	cmp	r3, #16
 80012e2:	d161      	bne.n	80013a8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0210 	bic.w	r2, r2, #16
 80012f2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	f003 020f 	and.w	r2, r3, #15
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	3304      	adds	r3, #4
 8001312:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	0c5b      	lsrs	r3, r3, #17
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	2b02      	cmp	r3, #2
 800131e:	d124      	bne.n	800136a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d035      	beq.n	8001398 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800133a:	b29b      	uxth	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	6a38      	ldr	r0, [r7, #32]
 8001340:	f002 fc58 	bl	8003bf4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001350:	441a      	add	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001362:	441a      	add	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	619a      	str	r2, [r3, #24]
 8001368:	e016      	b.n	8001398 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	0c5b      	lsrs	r3, r3, #17
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	2b06      	cmp	r3, #6
 8001374:	d110      	bne.n	8001398 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800137c:	2208      	movs	r2, #8
 800137e:	4619      	mov	r1, r3
 8001380:	6a38      	ldr	r0, [r7, #32]
 8001382:	f002 fc37 	bl	8003bf4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001392:	441a      	add	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	699a      	ldr	r2, [r3, #24]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0210 	orr.w	r2, r2, #16
 80013a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fd74 	bl	8003e9a <USB_ReadInterrupts>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013bc:	d16e      	bne.n	800149c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fd7a 	bl	8003ec0 <USB_ReadDevAllOutEpInterrupt>
 80013cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013ce:	e062      	b.n	8001496 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d057      	beq.n	800148a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fd9f 	bl	8003f28 <USB_ReadDevOutEPInterrupt>
 80013ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00c      	beq.n	8001410 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	015a      	lsls	r2, r3, #5
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	4413      	add	r3, r2
 80013fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001402:	461a      	mov	r2, r3
 8001404:	2301      	movs	r3, #1
 8001406:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fd98 	bl	8001f40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00c      	beq.n	8001434 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	015a      	lsls	r2, r3, #5
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	4413      	add	r3, r2
 8001422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001426:	461a      	mov	r2, r3
 8001428:	2308      	movs	r3, #8
 800142a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800142c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fe92 	bl	8002158 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	015a      	lsls	r2, r3, #5
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	4413      	add	r3, r2
 8001446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144a:	461a      	mov	r2, r3
 800144c:	2310      	movs	r3, #16
 800144e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	015a      	lsls	r2, r3, #5
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	4413      	add	r3, r2
 8001462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001466:	461a      	mov	r2, r3
 8001468:	2320      	movs	r3, #32
 800146a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	015a      	lsls	r2, r3, #5
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	4413      	add	r3, r2
 800147e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001482:	461a      	mov	r2, r3
 8001484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001488:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	3301      	adds	r3, #1
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	2b00      	cmp	r3, #0
 800149a:	d199      	bne.n	80013d0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fcfa 	bl	8003e9a <USB_ReadInterrupts>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014b0:	f040 80c0 	bne.w	8001634 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fd1b 	bl	8003ef4 <USB_ReadDevAllInEpInterrupt>
 80014be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014c4:	e0b2      	b.n	800162c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80a7 	beq.w	8001620 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 fd41 	bl	8003f64 <USB_ReadDevInEPInterrupt>
 80014e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d057      	beq.n	800159e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	2201      	movs	r2, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43db      	mvns	r3, r3
 8001508:	69f9      	ldr	r1, [r7, #28]
 800150a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800150e:	4013      	ands	r3, r2
 8001510:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	4413      	add	r3, r2
 800151a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800151e:	461a      	mov	r2, r3
 8001520:	2301      	movs	r3, #1
 8001522:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d132      	bne.n	8001592 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	1a9b      	subs	r3, r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	3348      	adds	r3, #72	; 0x48
 800153c:	6819      	ldr	r1, [r3, #0]
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4403      	add	r3, r0
 800154c:	3344      	adds	r3, #68	; 0x44
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4419      	add	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4403      	add	r3, r0
 8001560:	3348      	adds	r3, #72	; 0x48
 8001562:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	2b00      	cmp	r3, #0
 8001568:	d113      	bne.n	8001592 <HAL_PCD_IRQHandler+0x31c>
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	1a9b      	subs	r3, r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	3350      	adds	r3, #80	; 0x50
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d108      	bne.n	8001592 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800158a:	461a      	mov	r2, r3
 800158c:	2101      	movs	r1, #1
 800158e:	f002 fd49 	bl	8004024 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f004 fb7c 	bl	8005c96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	015a      	lsls	r2, r3, #5
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b4:	461a      	mov	r2, r3
 80015b6:	2308      	movs	r3, #8
 80015b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d0:	461a      	mov	r2, r3
 80015d2:	2310      	movs	r3, #16
 80015d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ec:	461a      	mov	r2, r3
 80015ee:	2340      	movs	r3, #64	; 0x40
 80015f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	015a      	lsls	r2, r3, #5
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	4413      	add	r3, r2
 8001604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001608:	461a      	mov	r2, r3
 800160a:	2302      	movs	r3, #2
 800160c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fc03 	bl	8001e26 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	3301      	adds	r3, #1
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162e:	2b00      	cmp	r3, #0
 8001630:	f47f af49 	bne.w	80014c6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fc2e 	bl	8003e9a <USB_ReadInterrupts>
 800163e:	4603      	mov	r3, r0
 8001640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001648:	d122      	bne.n	8001690 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001664:	2b01      	cmp	r3, #1
 8001666:	d108      	bne.n	800167a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001670:	2100      	movs	r1, #0
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fe0e 	bl	8002294 <HAL_PCDEx_LPM_Callback>
 8001678:	e002      	b.n	8001680 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f004 fb82 	bl	8005d84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800168e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fc00 	bl	8003e9a <USB_ReadInterrupts>
 800169a:	4603      	mov	r3, r0
 800169c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a4:	d112      	bne.n	80016cc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d102      	bne.n	80016bc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f004 fb3e 	bl	8005d38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016ca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 fbe2 	bl	8003e9a <USB_ReadInterrupts>
 80016d6:	4603      	mov	r3, r0
 80016d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016e0:	f040 80c7 	bne.w	8001872 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2110      	movs	r1, #16
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 fcc2 	bl	8003088 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001708:	e056      	b.n	80017b8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001716:	461a      	mov	r2, r3
 8001718:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800171c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172e:	0151      	lsls	r1, r2, #5
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	440a      	add	r2, r1
 8001734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001738:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800173c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	015a      	lsls	r2, r3, #5
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174e:	0151      	lsls	r1, r2, #5
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	440a      	add	r2, r1
 8001754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800175c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800176a:	461a      	mov	r2, r3
 800176c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001770:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	4413      	add	r3, r2
 800177a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001782:	0151      	lsls	r1, r2, #5
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	440a      	add	r2, r1
 8001788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800178c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001790:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	015a      	lsls	r2, r3, #5
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4413      	add	r3, r2
 800179a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a2:	0151      	lsls	r1, r2, #5
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	440a      	add	r2, r1
 80017a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	3301      	adds	r3, #1
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017be:	429a      	cmp	r2, r3
 80017c0:	d3a3      	bcc.n	800170a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d016      	beq.n	800180c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ee:	f043 030b 	orr.w	r3, r3, #11
 80017f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001804:	f043 030b 	orr.w	r3, r3, #11
 8001808:	6453      	str	r3, [r2, #68]	; 0x44
 800180a:	e015      	b.n	8001838 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800181e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001822:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001832:	f043 030b 	orr.w	r3, r3, #11
 8001836:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001846:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800184a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800185c:	461a      	mov	r2, r3
 800185e:	f002 fbe1 	bl	8004024 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fb0f 	bl	8003e9a <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001886:	d124      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fba5 	bl	8003fdc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f001 fc57 	bl	800314a <USB_GetDevSpeed>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681c      	ldr	r4, [r3, #0]
 80018a8:	f001 f92e 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 80018ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	4620      	mov	r0, r4
 80018b8:	f001 f994 	bl	8002be4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f004 fa12 	bl	8005ce6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f002 fadf 	bl	8003e9a <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d10a      	bne.n	80018fc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f004 f9ef 	bl	8005cca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f002 0208 	and.w	r2, r2, #8
 80018fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f002 faca 	bl	8003e9a <USB_ReadInterrupts>
 8001906:	4603      	mov	r3, r0
 8001908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001910:	d10f      	bne.n	8001932 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4619      	mov	r1, r3
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f004 fa51 	bl	8005dc4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695a      	ldr	r2, [r3, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f002 faaf 	bl	8003e9a <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001946:	d10f      	bne.n	8001968 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	b2db      	uxtb	r3, r3
 8001950:	4619      	mov	r1, r3
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f004 fa24 	bl	8005da0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001966:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fa94 	bl	8003e9a <USB_ReadInterrupts>
 8001972:	4603      	mov	r3, r0
 8001974:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197c:	d10a      	bne.n	8001994 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f004 fa32 	bl	8005de8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fa7e 	bl	8003e9a <USB_ReadInterrupts>
 800199e:	4603      	mov	r3, r0
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d115      	bne.n	80019d4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f004 fa22 	bl	8005e04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6859      	ldr	r1, [r3, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	e000      	b.n	80019d4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80019d2:	bf00      	nop
    }
  }
}
 80019d4:	3734      	adds	r7, #52	; 0x34
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}

080019da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_PCD_SetAddress+0x1a>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e013      	b.n	8001a1c <HAL_PCD_SetAddress+0x42>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 f9ee 	bl	8003dee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	4611      	mov	r1, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	4603      	mov	r3, r0
 8001a34:	70fb      	strb	r3, [r7, #3]
 8001a36:	460b      	mov	r3, r1
 8001a38:	803b      	strh	r3, [r7, #0]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da0f      	bge.n	8001a6a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f003 020f 	and.w	r2, r3, #15
 8001a50:	4613      	mov	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	3338      	adds	r3, #56	; 0x38
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3304      	adds	r3, #4
 8001a60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2201      	movs	r2, #1
 8001a66:	705a      	strb	r2, [r3, #1]
 8001a68:	e00f      	b.n	8001a8a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	f003 020f 	and.w	r2, r3, #15
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	3304      	adds	r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a96:	883a      	ldrh	r2, [r7, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	78ba      	ldrb	r2, [r7, #2]
 8001aa0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	785b      	ldrb	r3, [r3, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ab4:	78bb      	ldrb	r3, [r7, #2]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d102      	bne.n	8001ac0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_PCD_EP_Open+0xaa>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e00e      	b.n	8001aec <HAL_PCD_EP_Open+0xc8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 fb59 	bl	8003194 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001aea:	7afb      	ldrb	r3, [r7, #11]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da0f      	bge.n	8001b28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 020f 	and.w	r2, r3, #15
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	3338      	adds	r3, #56	; 0x38
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2201      	movs	r2, #1
 8001b24:	705a      	strb	r2, [r3, #1]
 8001b26:	e00f      	b.n	8001b48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 020f 	and.w	r2, r3, #15
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3304      	adds	r3, #4
 8001b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_PCD_EP_Close+0x6e>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e00e      	b.n	8001b80 <HAL_PCD_EP_Close+0x8c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68f9      	ldr	r1, [r7, #12]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 fb97 	bl	80032a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	460b      	mov	r3, r1
 8001b96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	f003 020f 	and.w	r2, r3, #15
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bca:	7afb      	ldrb	r3, [r7, #11]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d102      	bne.n	8001be4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001be4:	7afb      	ldrb	r3, [r7, #11]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	6979      	ldr	r1, [r7, #20]
 8001bfc:	f001 fe72 	bl	80038e4 <USB_EP0StartXfer>
 8001c00:	e008      	b.n	8001c14 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6979      	ldr	r1, [r7, #20]
 8001c10:	f001 fc24 	bl	800345c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	3338      	adds	r3, #56	; 0x38
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4413      	add	r3, r2
 8001c42:	3304      	adds	r3, #4
 8001c44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d102      	bne.n	8001c78 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	6979      	ldr	r1, [r7, #20]
 8001c90:	f001 fe28 	bl	80038e4 <USB_EP0StartXfer>
 8001c94:	e008      	b.n	8001ca8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	6979      	ldr	r1, [r7, #20]
 8001ca4:	f001 fbda 	bl	800345c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 020f 	and.w	r2, r3, #15
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d901      	bls.n	8001cd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e050      	b.n	8001d72 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	da0f      	bge.n	8001cf8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	f003 020f 	and.w	r2, r3, #15
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	3338      	adds	r3, #56	; 0x38
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	3304      	adds	r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	705a      	strb	r2, [r3, #1]
 8001cf6:	e00d      	b.n	8001d14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2201      	movs	r2, #1
 8001d18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_PCD_EP_SetStall+0x82>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e01e      	b.n	8001d72 <HAL_PCD_EP_SetStall+0xc0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 ff7f 	bl	8003c46 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10a      	bne.n	8001d68 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	b2d9      	uxtb	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d62:	461a      	mov	r2, r3
 8001d64:	f002 f95e 	bl	8004024 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 020f 	and.w	r2, r3, #15
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d901      	bls.n	8001d98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e042      	b.n	8001e1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da0f      	bge.n	8001dc0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 020f 	and.w	r2, r3, #15
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	3338      	adds	r3, #56	; 0x38
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	705a      	strb	r2, [r3, #1]
 8001dbe:	e00f      	b.n	8001de0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 020f 	and.w	r2, r3, #15
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_PCD_EP_ClrStall+0x86>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e00e      	b.n	8001e1e <HAL_PCD_EP_ClrStall+0xa4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68f9      	ldr	r1, [r7, #12]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 ff87 	bl	8003d22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b08a      	sub	sp, #40	; 0x28
 8001e2a:	af02      	add	r7, sp, #8
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	3338      	adds	r3, #56	; 0x38
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d901      	bls.n	8001e5e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06c      	b.n	8001f38 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d902      	bls.n	8001e7a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e82:	e02b      	b.n	8001edc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d902      	bls.n	8001ea0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	3303      	adds	r3, #3
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	68d9      	ldr	r1, [r3, #12]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f001 fe63 	bl	8003b8a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	441a      	add	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	699a      	ldr	r2, [r3, #24]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	441a      	add	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d809      	bhi.n	8001f06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d203      	bcs.n	8001f06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1be      	bne.n	8001e84 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d811      	bhi.n	8001f36 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	2201      	movs	r2, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	6939      	ldr	r1, [r7, #16]
 8001f2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f32:	4013      	ands	r3, r2
 8001f34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	333c      	adds	r3, #60	; 0x3c
 8001f58:	3304      	adds	r3, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	f040 80a0 	bne.w	80020b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d015      	beq.n	8001fae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a72      	ldr	r2, [pc, #456]	; (8002150 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	f240 80dd 	bls.w	8002146 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80d7 	beq.w	8002146 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001faa:	6093      	str	r3, [r2, #8]
 8001fac:	e0cb      	b.n	8002146 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	6093      	str	r3, [r2, #8]
 8001fca:	e0bc      	b.n	8002146 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 80b7 	bne.w	8002146 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a5d      	ldr	r2, [pc, #372]	; (8002150 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d90f      	bls.n	8002000 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffc:	6093      	str	r3, [r2, #8]
 8001ffe:	e0a2      	b.n	8002146 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002012:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	0159      	lsls	r1, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	440b      	add	r3, r1
 800201c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002026:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4403      	add	r3, r0
 8002036:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800203a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4403      	add	r3, r0
 800205e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4419      	add	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4403      	add	r3, r0
 8002074:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002078:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d114      	bne.n	80020aa <PCD_EP_OutXfrComplete_int+0x16a>
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d108      	bne.n	80020aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020a2:	461a      	mov	r2, r3
 80020a4:	2101      	movs	r1, #1
 80020a6:	f001 ffbd 	bl	8004024 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f003 fdd5 	bl	8005c60 <HAL_PCD_DataOutStageCallback>
 80020b6:	e046      	b.n	8002146 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a26      	ldr	r2, [pc, #152]	; (8002154 <PCD_EP_OutXfrComplete_int+0x214>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d124      	bne.n	800210a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d6:	461a      	mov	r2, r3
 80020d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020dc:	6093      	str	r3, [r2, #8]
 80020de:	e032      	b.n	8002146 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f6:	461a      	mov	r2, r3
 80020f8:	2320      	movs	r3, #32
 80020fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f003 fdac 	bl	8005c60 <HAL_PCD_DataOutStageCallback>
 8002108:	e01d      	b.n	8002146 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d114      	bne.n	800213a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	1a9b      	subs	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d108      	bne.n	800213a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002132:	461a      	mov	r2, r3
 8002134:	2100      	movs	r1, #0
 8002136:	f001 ff75 	bl	8004024 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	4619      	mov	r1, r3
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f003 fd8d 	bl	8005c60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	4f54300a 	.word	0x4f54300a
 8002154:	4f54310a 	.word	0x4f54310a

08002158 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	333c      	adds	r3, #60	; 0x3c
 8002170:	3304      	adds	r3, #4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d90e      	bls.n	80021ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a4:	461a      	mov	r2, r3
 80021a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f003 fd45 	bl	8005c3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d90c      	bls.n	80021d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d108      	bne.n	80021d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021cc:	461a      	mov	r2, r3
 80021ce:	2101      	movs	r1, #1
 80021d0:	f001 ff28 	bl	8004024 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	4f54300a 	.word	0x4f54300a

080021e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
 80021f0:	4613      	mov	r3, r2
 80021f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d107      	bne.n	8002212 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002202:	883b      	ldrh	r3, [r7, #0]
 8002204:	0419      	lsls	r1, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	430a      	orrs	r2, r1
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
 8002210:	e028      	b.n	8002264 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4413      	add	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e00d      	b.n	8002242 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	3340      	adds	r3, #64	; 0x40
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4413      	add	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	3301      	adds	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	3b01      	subs	r3, #1
 8002248:	429a      	cmp	r2, r3
 800224a:	d3ec      	bcc.n	8002226 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800224c:	883b      	ldrh	r3, [r7, #0]
 800224e:	0418      	lsls	r0, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	3b01      	subs	r3, #1
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	4302      	orrs	r2, r0
 800225c:	3340      	adds	r3, #64	; 0x40
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e25b      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d075      	beq.n	80023b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ca:	4ba3      	ldr	r3, [pc, #652]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d00c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d6:	4ba0      	ldr	r3, [pc, #640]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d112      	bne.n	8002308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e2:	4b9d      	ldr	r3, [pc, #628]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ee:	d10b      	bne.n	8002308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	4b99      	ldr	r3, [pc, #612]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d05b      	beq.n	80023b4 <HAL_RCC_OscConfig+0x108>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d157      	bne.n	80023b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e236      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x74>
 8002312:	4b91      	ldr	r3, [pc, #580]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a90      	ldr	r2, [pc, #576]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e01d      	b.n	800235c <HAL_RCC_OscConfig+0xb0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x98>
 800232a:	4b8b      	ldr	r3, [pc, #556]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a8a      	ldr	r2, [pc, #552]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b88      	ldr	r3, [pc, #544]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a87      	ldr	r2, [pc, #540]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0xb0>
 8002344:	4b84      	ldr	r3, [pc, #528]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a83      	ldr	r2, [pc, #524]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800234a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b81      	ldr	r3, [pc, #516]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a80      	ldr	r2, [pc, #512]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fb44 	bl	80009f0 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800236c:	f7fe fb40 	bl	80009f0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1fb      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b76      	ldr	r3, [pc, #472]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0xc0>
 800238a:	e014      	b.n	80023b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fb30 	bl	80009f0 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe fb2c 	bl	80009f0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e1e7      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	4b6c      	ldr	r3, [pc, #432]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_OscConfig+0xe8>
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d063      	beq.n	800248a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023c2:	4b65      	ldr	r3, [pc, #404]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ce:	4b62      	ldr	r3, [pc, #392]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d11c      	bne.n	8002414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023da:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x152>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1bb      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4952      	ldr	r1, [pc, #328]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	e03a      	b.n	800248a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b4f      	ldr	r3, [pc, #316]	; (800255c <HAL_RCC_OscConfig+0x2b0>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe fae5 	bl	80009f0 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242a:	f7fe fae1 	bl	80009f0 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e19c      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	4b46      	ldr	r3, [pc, #280]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4940      	ldr	r1, [pc, #256]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245e:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_RCC_OscConfig+0x2b0>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fac4 	bl	80009f0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fac0 	bl	80009f0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e17b      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d030      	beq.n	80024f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_RCC_OscConfig+0x2b4>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe faa4 	bl	80009f0 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ac:	f7fe faa0 	bl	80009f0 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e15b      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x200>
 80024ca:	e015      	b.n	80024f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024cc:	4b24      	ldr	r3, [pc, #144]	; (8002560 <HAL_RCC_OscConfig+0x2b4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d2:	f7fe fa8d 	bl	80009f0 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024da:	f7fe fa89 	bl	80009f0 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e144      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a0 	beq.w	8002646 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_OscConfig+0x2b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d121      	bne.n	8002586 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_RCC_OscConfig+0x2b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a07      	ldr	r2, [pc, #28]	; (8002564 <HAL_RCC_OscConfig+0x2b8>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254e:	f7fe fa4f 	bl	80009f0 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	e011      	b.n	800257a <HAL_RCC_OscConfig+0x2ce>
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	42470000 	.word	0x42470000
 8002560:	42470e80 	.word	0x42470e80
 8002564:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7fe fa42 	bl	80009f0 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0fd      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b81      	ldr	r3, [pc, #516]	; (8002780 <HAL_RCC_OscConfig+0x4d4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d106      	bne.n	800259c <HAL_RCC_OscConfig+0x2f0>
 800258e:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	4a7c      	ldr	r2, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6713      	str	r3, [r2, #112]	; 0x70
 800259a:	e01c      	b.n	80025d6 <HAL_RCC_OscConfig+0x32a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d10c      	bne.n	80025be <HAL_RCC_OscConfig+0x312>
 80025a4:	4b77      	ldr	r3, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	4a76      	ldr	r2, [pc, #472]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	6713      	str	r3, [r2, #112]	; 0x70
 80025b0:	4b74      	ldr	r3, [pc, #464]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a73      	ldr	r2, [pc, #460]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	e00b      	b.n	80025d6 <HAL_RCC_OscConfig+0x32a>
 80025be:	4b71      	ldr	r3, [pc, #452]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a70      	ldr	r2, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	4b6e      	ldr	r3, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a6d      	ldr	r2, [pc, #436]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025d0:	f023 0304 	bic.w	r3, r3, #4
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d015      	beq.n	800260a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025de:	f7fe fa07 	bl	80009f0 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e6:	f7fe fa03 	bl	80009f0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0bc      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	4b61      	ldr	r3, [pc, #388]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ee      	beq.n	80025e6 <HAL_RCC_OscConfig+0x33a>
 8002608:	e014      	b.n	8002634 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7fe f9f1 	bl	80009f0 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe f9ed 	bl	80009f0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0a6      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	4b56      	ldr	r3, [pc, #344]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1ee      	bne.n	8002612 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002634:	7dfb      	ldrb	r3, [r7, #23]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d105      	bne.n	8002646 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263a:	4b52      	ldr	r3, [pc, #328]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a51      	ldr	r2, [pc, #324]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8092 	beq.w	8002774 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002650:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d05c      	beq.n	8002716 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d141      	bne.n	80026e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002664:	4b48      	ldr	r3, [pc, #288]	; (8002788 <HAL_RCC_OscConfig+0x4dc>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe f9c1 	bl	80009f0 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe f9bd 	bl	80009f0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e078      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002684:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	019b      	lsls	r3, r3, #6
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	3b01      	subs	r3, #1
 80026aa:	041b      	lsls	r3, r3, #16
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	4933      	ldr	r1, [pc, #204]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_RCC_OscConfig+0x4dc>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7fe f996 	bl	80009f0 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe f992 	bl	80009f0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e04d      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x41c>
 80026e6:	e045      	b.n	8002774 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_RCC_OscConfig+0x4dc>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe f97f 	bl	80009f0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe f97b 	bl	80009f0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e036      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x44a>
 8002714:	e02e      	b.n	8002774 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e029      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002722:	4b18      	ldr	r3, [pc, #96]	; (8002784 <HAL_RCC_OscConfig+0x4d8>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	429a      	cmp	r2, r3
 8002734:	d11c      	bne.n	8002770 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d115      	bne.n	8002770 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002750:	4293      	cmp	r3, r2
 8002752:	d10d      	bne.n	8002770 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40007000 	.word	0x40007000
 8002784:	40023800 	.word	0x40023800
 8002788:	42470060 	.word	0x42470060

0800278c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0cc      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d90c      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b65      	ldr	r3, [pc, #404]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0b8      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	494d      	ldr	r1, [pc, #308]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d044      	beq.n	80028ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d119      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d003      	beq.n	800284a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002846:	2b03      	cmp	r3, #3
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e06f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e067      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286a:	4b37      	ldr	r3, [pc, #220]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4934      	ldr	r1, [pc, #208]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800287c:	f7fe f8b8 	bl	80009f0 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fe f8b4 	bl	80009f0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e04f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 020c 	and.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1eb      	bne.n	8002884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d20c      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e032      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4916      	ldr	r1, [pc, #88]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002912:	f000 f821 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002916:	4601      	mov	r1, r0
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	fa21 f303 	lsr.w	r3, r1, r3
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe f818 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00
 8002948:	40023800 	.word	0x40023800
 800294c:	080063d8 	.word	0x080063d8
 8002950:	20000000 	.word	0x20000000
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	2300      	movs	r3, #0
 8002968:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b04      	cmp	r3, #4
 8002978:	d007      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x32>
 800297a:	2b08      	cmp	r3, #8
 800297c:	d008      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x38>
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 80b4 	bne.w	8002aec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b5e      	ldr	r3, [pc, #376]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002986:	60bb      	str	r3, [r7, #8]
       break;
 8002988:	e0b3      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800298a:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800298c:	60bb      	str	r3, [r7, #8]
      break;
 800298e:	e0b0      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002990:	4b5a      	ldr	r3, [pc, #360]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002998:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800299a:	4b58      	ldr	r3, [pc, #352]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d04a      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a6:	4b55      	ldr	r3, [pc, #340]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	099b      	lsrs	r3, r3, #6
 80029ac:	f04f 0400 	mov.w	r4, #0
 80029b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	ea03 0501 	and.w	r5, r3, r1
 80029bc:	ea04 0602 	and.w	r6, r4, r2
 80029c0:	4629      	mov	r1, r5
 80029c2:	4632      	mov	r2, r6
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f04f 0400 	mov.w	r4, #0
 80029cc:	0154      	lsls	r4, r2, #5
 80029ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029d2:	014b      	lsls	r3, r1, #5
 80029d4:	4619      	mov	r1, r3
 80029d6:	4622      	mov	r2, r4
 80029d8:	1b49      	subs	r1, r1, r5
 80029da:	eb62 0206 	sbc.w	r2, r2, r6
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	f04f 0400 	mov.w	r4, #0
 80029e6:	0194      	lsls	r4, r2, #6
 80029e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029ec:	018b      	lsls	r3, r1, #6
 80029ee:	1a5b      	subs	r3, r3, r1
 80029f0:	eb64 0402 	sbc.w	r4, r4, r2
 80029f4:	f04f 0100 	mov.w	r1, #0
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	00e2      	lsls	r2, r4, #3
 80029fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a02:	00d9      	lsls	r1, r3, #3
 8002a04:	460b      	mov	r3, r1
 8002a06:	4614      	mov	r4, r2
 8002a08:	195b      	adds	r3, r3, r5
 8002a0a:	eb44 0406 	adc.w	r4, r4, r6
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	0262      	lsls	r2, r4, #9
 8002a18:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a1c:	0259      	lsls	r1, r3, #9
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4614      	mov	r4, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	4621      	mov	r1, r4
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f04f 0400 	mov.w	r4, #0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4623      	mov	r3, r4
 8002a30:	f7fd fbd2 	bl	80001d8 <__aeabi_uldivmod>
 8002a34:	4603      	mov	r3, r0
 8002a36:	460c      	mov	r4, r1
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e049      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3c:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	f04f 0400 	mov.w	r4, #0
 8002a46:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	ea03 0501 	and.w	r5, r3, r1
 8002a52:	ea04 0602 	and.w	r6, r4, r2
 8002a56:	4629      	mov	r1, r5
 8002a58:	4632      	mov	r2, r6
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	f04f 0400 	mov.w	r4, #0
 8002a62:	0154      	lsls	r4, r2, #5
 8002a64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a68:	014b      	lsls	r3, r1, #5
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4622      	mov	r2, r4
 8002a6e:	1b49      	subs	r1, r1, r5
 8002a70:	eb62 0206 	sbc.w	r2, r2, r6
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	f04f 0400 	mov.w	r4, #0
 8002a7c:	0194      	lsls	r4, r2, #6
 8002a7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a82:	018b      	lsls	r3, r1, #6
 8002a84:	1a5b      	subs	r3, r3, r1
 8002a86:	eb64 0402 	sbc.w	r4, r4, r2
 8002a8a:	f04f 0100 	mov.w	r1, #0
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	00e2      	lsls	r2, r4, #3
 8002a94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a98:	00d9      	lsls	r1, r3, #3
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4614      	mov	r4, r2
 8002a9e:	195b      	adds	r3, r3, r5
 8002aa0:	eb44 0406 	adc.w	r4, r4, r6
 8002aa4:	f04f 0100 	mov.w	r1, #0
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	02a2      	lsls	r2, r4, #10
 8002aae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ab2:	0299      	lsls	r1, r3, #10
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4614      	mov	r4, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	4621      	mov	r1, r4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f04f 0400 	mov.w	r4, #0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4623      	mov	r3, r4
 8002ac6:	f7fd fb87 	bl	80001d8 <__aeabi_uldivmod>
 8002aca:	4603      	mov	r3, r0
 8002acc:	460c      	mov	r4, r1
 8002ace:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	60bb      	str	r3, [r7, #8]
      break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002aee:	60bb      	str	r3, [r7, #8]
      break;
 8002af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af2:	68bb      	ldr	r3, [r7, #8]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	00f42400 	.word	0x00f42400
 8002b04:	007a1200 	.word	0x007a1200

08002b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000

08002b20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b20:	b084      	sub	sp, #16
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	f107 001c 	add.w	r0, r7, #28
 8002b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d122      	bne.n	8002b7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f001 fab4 	bl	80040e0 <USB_CoreReset>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e01a      	b.n	8002bb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f001 faa8 	bl	80040e0 <USB_CoreReset>
 8002b90:	4603      	mov	r3, r0
 8002b92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ba6:	e005      	b.n	8002bb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10b      	bne.n	8002bd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f043 0206 	orr.w	r2, r3, #6
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bde:	b004      	add	sp, #16
 8002be0:	4770      	bx	lr
	...

08002be4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d165      	bne.n	8002cc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4a41      	ldr	r2, [pc, #260]	; (8002d00 <USB_SetTurnaroundTime+0x11c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d906      	bls.n	8002c0e <USB_SetTurnaroundTime+0x2a>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4a40      	ldr	r2, [pc, #256]	; (8002d04 <USB_SetTurnaroundTime+0x120>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d802      	bhi.n	8002c0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c08:	230f      	movs	r3, #15
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e062      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4a3c      	ldr	r2, [pc, #240]	; (8002d04 <USB_SetTurnaroundTime+0x120>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d906      	bls.n	8002c24 <USB_SetTurnaroundTime+0x40>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4a3b      	ldr	r2, [pc, #236]	; (8002d08 <USB_SetTurnaroundTime+0x124>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d802      	bhi.n	8002c24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c1e:	230e      	movs	r3, #14
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e057      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <USB_SetTurnaroundTime+0x124>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d906      	bls.n	8002c3a <USB_SetTurnaroundTime+0x56>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4a37      	ldr	r2, [pc, #220]	; (8002d0c <USB_SetTurnaroundTime+0x128>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d802      	bhi.n	8002c3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c34:	230d      	movs	r3, #13
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e04c      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <USB_SetTurnaroundTime+0x128>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d906      	bls.n	8002c50 <USB_SetTurnaroundTime+0x6c>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4a32      	ldr	r2, [pc, #200]	; (8002d10 <USB_SetTurnaroundTime+0x12c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d802      	bhi.n	8002c50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e041      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <USB_SetTurnaroundTime+0x12c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d906      	bls.n	8002c66 <USB_SetTurnaroundTime+0x82>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <USB_SetTurnaroundTime+0x130>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d802      	bhi.n	8002c66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c60:	230b      	movs	r3, #11
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e036      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <USB_SetTurnaroundTime+0x130>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d906      	bls.n	8002c7c <USB_SetTurnaroundTime+0x98>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4a29      	ldr	r2, [pc, #164]	; (8002d18 <USB_SetTurnaroundTime+0x134>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d802      	bhi.n	8002c7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c76:	230a      	movs	r3, #10
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e02b      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <USB_SetTurnaroundTime+0x134>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d906      	bls.n	8002c92 <USB_SetTurnaroundTime+0xae>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4a25      	ldr	r2, [pc, #148]	; (8002d1c <USB_SetTurnaroundTime+0x138>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d802      	bhi.n	8002c92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c8c:	2309      	movs	r3, #9
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e020      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <USB_SetTurnaroundTime+0x138>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d906      	bls.n	8002ca8 <USB_SetTurnaroundTime+0xc4>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4a20      	ldr	r2, [pc, #128]	; (8002d20 <USB_SetTurnaroundTime+0x13c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d802      	bhi.n	8002ca8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e015      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <USB_SetTurnaroundTime+0x13c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d906      	bls.n	8002cbe <USB_SetTurnaroundTime+0xda>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <USB_SetTurnaroundTime+0x140>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d802      	bhi.n	8002cbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002cb8:	2307      	movs	r3, #7
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e00a      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e007      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002cca:	2309      	movs	r3, #9
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	e001      	b.n	8002cd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002cd0:	2309      	movs	r3, #9
 8002cd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	00d8acbf 	.word	0x00d8acbf
 8002d04:	00e4e1bf 	.word	0x00e4e1bf
 8002d08:	00f423ff 	.word	0x00f423ff
 8002d0c:	0106737f 	.word	0x0106737f
 8002d10:	011a499f 	.word	0x011a499f
 8002d14:	01312cff 	.word	0x01312cff
 8002d18:	014ca43f 	.word	0x014ca43f
 8002d1c:	016e35ff 	.word	0x016e35ff
 8002d20:	01a6ab1f 	.word	0x01a6ab1f
 8002d24:	01e847ff 	.word	0x01e847ff

08002d28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0201 	bic.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d106      	bne.n	8002d98 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	e00b      	b.n	8002db0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	e001      	b.n	8002db0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e003      	b.n	8002db8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002db0:	2032      	movs	r0, #50	; 0x32
 8002db2:	f7fd fe29 	bl	8000a08 <HAL_Delay>

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	e009      	b.n	8002df4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	3340      	adds	r3, #64	; 0x40
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	3301      	adds	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b0e      	cmp	r3, #14
 8002df8:	d9f2      	bls.n	8002de0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11c      	bne.n	8002e3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e0e:	f043 0302 	orr.w	r3, r3, #2
 8002e12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38
 8002e38:	e00b      	b.n	8002e52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e64:	4619      	mov	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	680b      	ldr	r3, [r1, #0]
 8002e70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10c      	bne.n	8002e92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e7e:	2100      	movs	r1, #0
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f949 	bl	8003118 <USB_SetDevSpeed>
 8002e86:	e008      	b.n	8002e9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e88:	2101      	movs	r1, #1
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f944 	bl	8003118 <USB_SetDevSpeed>
 8002e90:	e003      	b.n	8002e9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e92:	2103      	movs	r1, #3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f93f 	bl	8003118 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e9a:	2110      	movs	r1, #16
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f8f3 	bl	8003088 <USB_FlushTxFifo>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f911 	bl	80030d4 <USB_FlushRxFifo>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eda:	461a      	mov	r2, r3
 8002edc:	2300      	movs	r3, #0
 8002ede:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	e043      	b.n	8002f6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002efc:	d118      	bne.n	8002f30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f10:	461a      	mov	r2, r3
 8002f12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e013      	b.n	8002f42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f26:	461a      	mov	r2, r3
 8002f28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e008      	b.n	8002f42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2300      	movs	r3, #0
 8002f40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2300      	movs	r3, #0
 8002f52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f60:	461a      	mov	r2, r3
 8002f62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d3b7      	bcc.n	8002ee6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	e043      	b.n	8003004 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f92:	d118      	bne.n	8002fc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e013      	b.n	8002fd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e008      	b.n	8002fd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ffc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	3301      	adds	r3, #1
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	429a      	cmp	r2, r3
 800300a:	d3b7      	bcc.n	8002f7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800301a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800301e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800302c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <USB_DevInit+0x2c4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800304c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800305e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d107      	bne.n	8003074 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003074:	7dfb      	ldrb	r3, [r7, #23]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003080:	b004      	add	sp, #16
 8003082:	4770      	bx	lr
 8003084:	803c3800 	.word	0x803c3800

08003088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3301      	adds	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <USB_FlushTxFifo+0x48>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e006      	b.n	80030c2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d0f0      	beq.n	80030a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	00030d40 	.word	0x00030d40

080030d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2210      	movs	r2, #16
 80030e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3301      	adds	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <USB_FlushRxFifo+0x40>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e006      	b.n	8003106 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b10      	cmp	r3, #16
 8003102:	d0f0      	beq.n	80030e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	00030d40 	.word	0x00030d40

08003118 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	68f9      	ldr	r1, [r7, #12]
 8003134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800314a:	b480      	push	{r7}
 800314c:	b087      	sub	sp, #28
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0306 	and.w	r3, r3, #6
 8003162:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]
 800316e:	e00a      	b.n	8003186 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d002      	beq.n	800317c <USB_GetDevSpeed+0x32>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b06      	cmp	r3, #6
 800317a:	d102      	bne.n	8003182 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800317c:	2302      	movs	r3, #2
 800317e:	75fb      	strb	r3, [r7, #23]
 8003180:	e001      	b.n	8003186 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003182:	230f      	movs	r3, #15
 8003184:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003186:	7dfb      	ldrb	r3, [r7, #23]
}
 8003188:	4618      	mov	r0, r3
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d13a      	bne.n	8003226 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	2101      	movs	r1, #1
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d155      	bne.n	8003294 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	78db      	ldrb	r3, [r3, #3]
 8003202:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003204:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	059b      	lsls	r3, r3, #22
 800320a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800320c:	4313      	orrs	r3, r2
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	440a      	add	r2, r1
 8003216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800321a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e036      	b.n	8003294 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	68f9      	ldr	r1, [r7, #12]
 8003240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003244:	4313      	orrs	r3, r2
 8003246:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11a      	bne.n	8003294 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	78db      	ldrb	r3, [r3, #3]
 8003278:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800327a:	430b      	orrs	r3, r1
 800327c:	4313      	orrs	r3, r2
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	0151      	lsls	r1, r2, #5
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	440a      	add	r2, r1
 8003286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003292:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d161      	bne.n	8003384 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032d6:	d11f      	bne.n	8003318 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	0151      	lsls	r1, r2, #5
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	440a      	add	r2, r1
 80032ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	0151      	lsls	r1, r2, #5
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	440a      	add	r2, r1
 800330e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003316:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	b29b      	uxth	r3, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	68f9      	ldr	r1, [r7, #12]
 8003334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003338:	4013      	ands	r3, r2
 800333a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	2101      	movs	r1, #1
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	b29b      	uxth	r3, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	68f9      	ldr	r1, [r7, #12]
 8003358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800335c:	4013      	ands	r3, r2
 800335e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	0159      	lsls	r1, r3, #5
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	440b      	add	r3, r1
 8003376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337a:	4619      	mov	r1, r3
 800337c:	4b35      	ldr	r3, [pc, #212]	; (8003454 <USB_DeactivateEndpoint+0x1b0>)
 800337e:	4013      	ands	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
 8003382:	e060      	b.n	8003446 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800339a:	d11f      	bne.n	80033dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	0151      	lsls	r1, r2, #5
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	440a      	add	r2, r1
 80033b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	0151      	lsls	r1, r2, #5
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	440a      	add	r2, r1
 80033d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	2101      	movs	r1, #1
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	43db      	mvns	r3, r3
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033fc:	4013      	ands	r3, r2
 80033fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	041b      	lsls	r3, r3, #16
 8003418:	43db      	mvns	r3, r3
 800341a:	68f9      	ldr	r1, [r7, #12]
 800341c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003420:	4013      	ands	r3, r2
 8003422:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	0159      	lsls	r1, r3, #5
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	440b      	add	r3, r1
 800343a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343e:	4619      	mov	r1, r3
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <USB_DeactivateEndpoint+0x1b4>)
 8003442:	4013      	ands	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	ec337800 	.word	0xec337800
 8003458:	eff37800 	.word	0xeff37800

0800345c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	785b      	ldrb	r3, [r3, #1]
 8003478:	2b01      	cmp	r3, #1
 800347a:	f040 815c 	bne.w	8003736 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d132      	bne.n	80034ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	0151      	lsls	r1, r2, #5
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	440a      	add	r2, r1
 800349c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80034a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	0151      	lsls	r1, r2, #5
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	440a      	add	r2, r1
 80034c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	0151      	lsls	r1, r2, #5
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	440a      	add	r2, r1
 80034e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034e4:	0cdb      	lsrs	r3, r3, #19
 80034e6:	04db      	lsls	r3, r3, #19
 80034e8:	6113      	str	r3, [r2, #16]
 80034ea:	e074      	b.n	80035d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	0151      	lsls	r1, r2, #5
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	440a      	add	r2, r1
 8003502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003506:	0cdb      	lsrs	r3, r3, #19
 8003508:	04db      	lsls	r3, r3, #19
 800350a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	0151      	lsls	r1, r2, #5
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	440a      	add	r2, r1
 8003522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003526:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800352a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800352e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6959      	ldr	r1, [r3, #20]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	440b      	add	r3, r1
 8003548:	1e59      	subs	r1, r3, #1
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003552:	04d9      	lsls	r1, r3, #19
 8003554:	4b9d      	ldr	r3, [pc, #628]	; (80037cc <USB_EPStartXfer+0x370>)
 8003556:	400b      	ands	r3, r1
 8003558:	69b9      	ldr	r1, [r7, #24]
 800355a:	0148      	lsls	r0, r1, #5
 800355c:	69f9      	ldr	r1, [r7, #28]
 800355e:	4401      	add	r1, r0
 8003560:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003564:	4313      	orrs	r3, r2
 8003566:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357e:	69b9      	ldr	r1, [r7, #24]
 8003580:	0148      	lsls	r0, r1, #5
 8003582:	69f9      	ldr	r1, [r7, #28]
 8003584:	4401      	add	r1, r0
 8003586:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800358a:	4313      	orrs	r3, r2
 800358c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	78db      	ldrb	r3, [r3, #3]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d11f      	bne.n	80035d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	0151      	lsls	r1, r2, #5
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	440a      	add	r2, r1
 80035ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80035b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	0151      	lsls	r1, r2, #5
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	440a      	add	r2, r1
 80035cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d14b      	bne.n	8003674 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f0:	461a      	mov	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	78db      	ldrb	r3, [r3, #3]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d128      	bne.n	8003652 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d110      	bne.n	8003632 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	440a      	add	r2, r1
 8003626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800362a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	e00f      	b.n	8003652 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	0151      	lsls	r1, r2, #5
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	440a      	add	r2, r1
 8003648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800364c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003650:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	0151      	lsls	r1, r2, #5
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	440a      	add	r2, r1
 8003668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800366c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e12f      	b.n	80038d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	440a      	add	r2, r1
 800368a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800368e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003692:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	78db      	ldrb	r3, [r3, #3]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d015      	beq.n	80036c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8117 	beq.w	80038d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	69f9      	ldr	r1, [r7, #28]
 80036be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036c2:	4313      	orrs	r3, r2
 80036c4:	634b      	str	r3, [r1, #52]	; 0x34
 80036c6:	e105      	b.n	80038d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d110      	bne.n	80036fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	0151      	lsls	r1, r2, #5
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	440a      	add	r2, r1
 80036ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e00f      	b.n	800371a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	0151      	lsls	r1, r2, #5
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	440a      	add	r2, r1
 8003710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003718:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	68d9      	ldr	r1, [r3, #12]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	b298      	uxth	r0, r3
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4603      	mov	r3, r0
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa2b 	bl	8003b8a <USB_WritePacket>
 8003734:	e0ce      	b.n	80038d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	0151      	lsls	r1, r2, #5
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	440a      	add	r2, r1
 800374c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003750:	0cdb      	lsrs	r3, r3, #19
 8003752:	04db      	lsls	r3, r3, #19
 8003754:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	0151      	lsls	r1, r2, #5
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	440a      	add	r2, r1
 800376c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003770:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003774:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003778:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d126      	bne.n	80037d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	4413      	add	r3, r2
 800378a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003798:	69b9      	ldr	r1, [r7, #24]
 800379a:	0148      	lsls	r0, r1, #5
 800379c:	69f9      	ldr	r1, [r7, #28]
 800379e:	4401      	add	r1, r0
 80037a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037a4:	4313      	orrs	r3, r2
 80037a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	0151      	lsls	r1, r2, #5
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	440a      	add	r2, r1
 80037be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037c6:	6113      	str	r3, [r2, #16]
 80037c8:	e036      	b.n	8003838 <USB_EPStartXfer+0x3dc>
 80037ca:	bf00      	nop
 80037cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4413      	add	r3, r2
 80037da:	1e5a      	subs	r2, r3, #1
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	8afb      	ldrh	r3, [r7, #22]
 80037f6:	04d9      	lsls	r1, r3, #19
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <USB_EPStartXfer+0x484>)
 80037fa:	400b      	ands	r3, r1
 80037fc:	69b9      	ldr	r1, [r7, #24]
 80037fe:	0148      	lsls	r0, r1, #5
 8003800:	69f9      	ldr	r1, [r7, #28]
 8003802:	4401      	add	r1, r0
 8003804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003808:	4313      	orrs	r3, r2
 800380a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	8af9      	ldrh	r1, [r7, #22]
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003828:	69b9      	ldr	r1, [r7, #24]
 800382a:	0148      	lsls	r0, r1, #5
 800382c:	69f9      	ldr	r1, [r7, #28]
 800382e:	4401      	add	r1, r0
 8003830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003834:	4313      	orrs	r3, r2
 8003836:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d10d      	bne.n	800385a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	68d9      	ldr	r1, [r3, #12]
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	460a      	mov	r2, r1
 8003858:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	78db      	ldrb	r3, [r3, #3]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d128      	bne.n	80038b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d110      	bne.n	8003894 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	440a      	add	r2, r1
 8003888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800388c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e00f      	b.n	80038b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	0151      	lsls	r1, r2, #5
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	440a      	add	r2, r1
 80038aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	0151      	lsls	r1, r2, #5
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	440a      	add	r2, r1
 80038ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	1ff80000 	.word	0x1ff80000

080038e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	2b01      	cmp	r3, #1
 8003902:	f040 80cd 	bne.w	8003aa0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d132      	bne.n	8003974 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	0151      	lsls	r1, r2, #5
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	440a      	add	r2, r1
 8003924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003928:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800392c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	0151      	lsls	r1, r2, #5
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	440a      	add	r2, r1
 8003948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	0151      	lsls	r1, r2, #5
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	440a      	add	r2, r1
 8003968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800396c:	0cdb      	lsrs	r3, r3, #19
 800396e:	04db      	lsls	r3, r3, #19
 8003970:	6113      	str	r3, [r2, #16]
 8003972:	e04e      	b.n	8003a12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	440a      	add	r2, r1
 800398a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800398e:	0cdb      	lsrs	r3, r3, #19
 8003990:	04db      	lsls	r3, r3, #19
 8003992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	0151      	lsls	r1, r2, #5
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	440a      	add	r2, r1
 80039aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d903      	bls.n	80039cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	0151      	lsls	r1, r2, #5
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	440a      	add	r2, r1
 80039e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a02:	6939      	ldr	r1, [r7, #16]
 8003a04:	0148      	lsls	r0, r1, #5
 8003a06:	6979      	ldr	r1, [r7, #20]
 8003a08:	4401      	add	r1, r0
 8003a0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d11e      	bne.n	8003a56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d009      	beq.n	8003a34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	0151      	lsls	r1, r2, #5
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	440a      	add	r2, r1
 8003a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	e092      	b.n	8003b7c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	0151      	lsls	r1, r2, #5
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	440a      	add	r2, r1
 8003a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d07e      	beq.n	8003b7c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	2101      	movs	r1, #1
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	6979      	ldr	r1, [r7, #20]
 8003a96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	634b      	str	r3, [r1, #52]	; 0x34
 8003a9e:	e06d      	b.n	8003b7c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	0151      	lsls	r1, r2, #5
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	440a      	add	r2, r1
 8003ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aba:	0cdb      	lsrs	r3, r3, #19
 8003abc:	04db      	lsls	r3, r3, #19
 8003abe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	0151      	lsls	r1, r2, #5
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	440a      	add	r2, r1
 8003ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ada:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ade:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ae2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	0151      	lsls	r1, r2, #5
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	440a      	add	r2, r1
 8003b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b20:	691a      	ldr	r2, [r3, #16]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2a:	6939      	ldr	r1, [r7, #16]
 8003b2c:	0148      	lsls	r0, r1, #5
 8003b2e:	6979      	ldr	r1, [r7, #20]
 8003b30:	4401      	add	r1, r0
 8003b32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b36:	4313      	orrs	r3, r2
 8003b38:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d10d      	bne.n	8003b5c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	68d9      	ldr	r1, [r3, #12]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	460a      	mov	r2, r1
 8003b5a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b089      	sub	sp, #36	; 0x24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	4611      	mov	r1, r2
 8003b96:	461a      	mov	r2, r3
 8003b98:	460b      	mov	r3, r1
 8003b9a:	71fb      	strb	r3, [r7, #7]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003ba8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11a      	bne.n	8003be6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003bb0:	88bb      	ldrh	r3, [r7, #4]
 8003bb2:	3303      	adds	r3, #3
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	e00f      	b.n	8003bde <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	031a      	lsls	r2, r3, #12
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bca:	461a      	mov	r2, r3
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d3eb      	bcc.n	8003bbe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3724      	adds	r7, #36	; 0x24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	3303      	adds	r3, #3
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e00b      	b.n	8003c30 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	3304      	adds	r3, #4
 8003c28:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d3ef      	bcc.n	8003c18 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003c38:	69fb      	ldr	r3, [r7, #28]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3724      	adds	r7, #36	; 0x24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d12c      	bne.n	8003cbc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	db12      	blt.n	8003c9a <USB_EPSetStall+0x54>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00f      	beq.n	8003c9a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	0151      	lsls	r1, r2, #5
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	440a      	add	r2, r1
 8003c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c98:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	0151      	lsls	r1, r2, #5
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	440a      	add	r2, r1
 8003cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e02b      	b.n	8003d14 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	db12      	blt.n	8003cf4 <USB_EPSetStall+0xae>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00f      	beq.n	8003cf4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	0151      	lsls	r1, r2, #5
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	440a      	add	r2, r1
 8003cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cf2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	0151      	lsls	r1, r2, #5
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	440a      	add	r2, r1
 8003d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b085      	sub	sp, #20
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d128      	bne.n	8003d90 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	0151      	lsls	r1, r2, #5
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	440a      	add	r2, r1
 8003d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	78db      	ldrb	r3, [r3, #3]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d003      	beq.n	8003d6e <USB_EPClearStall+0x4c>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	78db      	ldrb	r3, [r3, #3]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d138      	bne.n	8003de0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	0151      	lsls	r1, r2, #5
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	440a      	add	r2, r1
 8003d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e027      	b.n	8003de0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	0151      	lsls	r1, r2, #5
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	440a      	add	r2, r1
 8003da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003daa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	78db      	ldrb	r3, [r3, #3]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d003      	beq.n	8003dc0 <USB_EPClearStall+0x9e>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	78db      	ldrb	r3, [r3, #3]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d10f      	bne.n	8003de0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	0151      	lsls	r1, r2, #5
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	440a      	add	r2, r1
 8003dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dde:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	460b      	mov	r3, r1
 8003df8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e10:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e54:	f023 0302 	bic.w	r3, r3, #2
 8003e58:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003e5a:	2003      	movs	r0, #3
 8003e5c:	f7fc fdd4 	bl	8000a08 <HAL_Delay>

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003e8a:	2003      	movs	r0, #3
 8003e8c:	f7fc fdbc 	bl	8000a08 <HAL_Delay>

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	0c1b      	lsrs	r3, r3, #16
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4013      	ands	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	b29b      	uxth	r3, r3
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f56:	68bb      	ldr	r3, [r7, #8]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f86:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
 8003f94:	01db      	lsls	r3, r3, #7
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ffa:	f023 0307 	bic.w	r3, r3, #7
 8003ffe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800400e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004012:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	460b      	mov	r3, r1
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	333c      	adds	r3, #60	; 0x3c
 800403a:	3304      	adds	r3, #4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4a26      	ldr	r2, [pc, #152]	; (80040dc <USB_EP0_OutStart+0xb8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d90a      	bls.n	800405e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004058:	d101      	bne.n	800405e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e037      	b.n	80040ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	461a      	mov	r2, r3
 8004066:	2300      	movs	r3, #0
 8004068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800407c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408c:	f043 0318 	orr.w	r3, r3, #24
 8004090:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80040a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80040a6:	7afb      	ldrb	r3, [r7, #11]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10f      	bne.n	80040cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80040ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	4f54300a 	.word	0x4f54300a

080040e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <USB_CoreReset+0x64>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e01b      	b.n	8004136 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	daf2      	bge.n	80040ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f043 0201 	orr.w	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3301      	adds	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4a09      	ldr	r2, [pc, #36]	; (8004144 <USB_CoreReset+0x64>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e006      	b.n	8004136 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d0f0      	beq.n	8004116 <USB_CoreReset+0x36>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	00030d40 	.word	0x00030d40

08004148 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004154:	2054      	movs	r0, #84	; 0x54
 8004156:	f002 f831 	bl	80061bc <malloc>
 800415a:	4603      	mov	r3, r0
 800415c:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <USBD_CUSTOM_HID_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800416c:	2302      	movs	r3, #2
 800416e:	e039      	b.n	80041e4 <USBD_CUSTOM_HID_Init+0x9c>
  }

  pdev->pClassData = (void *)hhid;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	7c1b      	ldrb	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d107      	bne.n	8004190 <USBD_CUSTOM_HID_Init+0x48>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2205      	movs	r2, #5
 8004184:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2205      	movs	r2, #5
 800418a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800418e:	e006      	b.n	800419e <USBD_CUSTOM_HID_Init+0x56>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2205      	movs	r2, #5
 8004194:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2205      	movs	r2, #5
 800419a:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800419e:	2302      	movs	r3, #2
 80041a0:	2203      	movs	r2, #3
 80041a2:	2181      	movs	r1, #129	; 0x81
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f001 fea2 	bl	8005eee <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80041b0:	2302      	movs	r3, #2
 80041b2:	2203      	movs	r2, #3
 80041b4:	2101      	movs	r1, #1
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f001 fe99 	bl	8005eee <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	2340      	movs	r3, #64	; 0x40
 80041da:	2101      	movs	r1, #1
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f001 ff75 	bl	80060cc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80041f8:	2181      	movs	r1, #129	; 0x81
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f001 fe9d 	bl	8005f3a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800420c:	2101      	movs	r1, #1
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f001 fe93 	bl	8005f3a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00e      	beq.n	800424c <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800423e:	4618      	mov	r0, r3
 8004240:	f001 ffc4 	bl	80061cc <free>
    pdev->pClassData = NULL;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004268:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004282:	2b00      	cmp	r3, #0
 8004284:	d051      	beq.n	800432a <USBD_CUSTOM_HID_Setup+0xd2>
 8004286:	2b20      	cmp	r3, #32
 8004288:	f040 80d9 	bne.w	800443e <USBD_CUSTOM_HID_Setup+0x1e6>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	3b02      	subs	r3, #2
 8004292:	2b09      	cmp	r3, #9
 8004294:	d841      	bhi.n	800431a <USBD_CUSTOM_HID_Setup+0xc2>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <USBD_CUSTOM_HID_Setup+0x44>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042f5 	.word	0x080042f5
 80042a0:	080042d3 	.word	0x080042d3
 80042a4:	0800431b 	.word	0x0800431b
 80042a8:	0800431b 	.word	0x0800431b
 80042ac:	0800431b 	.word	0x0800431b
 80042b0:	0800431b 	.word	0x0800431b
 80042b4:	0800431b 	.word	0x0800431b
 80042b8:	08004305 	.word	0x08004305
 80042bc:	080042e3 	.word	0x080042e3
 80042c0:	080042c5 	.word	0x080042c5
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	885b      	ldrh	r3, [r3, #2]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80042d0:	e02a      	b.n	8004328 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	3340      	adds	r3, #64	; 0x40
 80042d6:	2201      	movs	r2, #1
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 fa31 	bl	8005742 <USBD_CtlSendData>
      break;
 80042e0:	e022      	b.n	8004328 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	885b      	ldrh	r3, [r3, #2]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80042f2:	e019      	b.n	8004328 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	3344      	adds	r3, #68	; 0x44
 80042f8:	2201      	movs	r2, #1
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 fa20 	bl	8005742 <USBD_CtlSendData>
      break;
 8004302:	e011      	b.n	8004328 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2201      	movs	r2, #1
 8004308:	64da      	str	r2, [r3, #76]	; 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800430a:	6939      	ldr	r1, [r7, #16]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	88db      	ldrh	r3, [r3, #6]
 8004310:	461a      	mov	r2, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f001 fa41 	bl	800579a <USBD_CtlPrepareRx>
      break;
 8004318:	e006      	b.n	8004328 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800431a:	6839      	ldr	r1, [r7, #0]
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f001 f99f 	bl	8005660 <USBD_CtlError>
      ret = USBD_FAIL;
 8004322:	2303      	movs	r3, #3
 8004324:	75fb      	strb	r3, [r7, #23]
      break;
 8004326:	bf00      	nop
    }
    break;
 8004328:	e090      	b.n	800444c <USBD_CUSTOM_HID_Setup+0x1f4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	2b0b      	cmp	r3, #11
 8004330:	d87c      	bhi.n	800442c <USBD_CUSTOM_HID_Setup+0x1d4>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <USBD_CUSTOM_HID_Setup+0xe0>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	08004369 	.word	0x08004369
 800433c:	0800443b 	.word	0x0800443b
 8004340:	0800442d 	.word	0x0800442d
 8004344:	0800442d 	.word	0x0800442d
 8004348:	0800442d 	.word	0x0800442d
 800434c:	0800442d 	.word	0x0800442d
 8004350:	08004391 	.word	0x08004391
 8004354:	0800442d 	.word	0x0800442d
 8004358:	0800442d 	.word	0x0800442d
 800435c:	0800442d 	.word	0x0800442d
 8004360:	080043df 	.word	0x080043df
 8004364:	08004407 	.word	0x08004407
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800436e:	2b03      	cmp	r3, #3
 8004370:	d107      	bne.n	8004382 <USBD_CUSTOM_HID_Setup+0x12a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004372:	f107 030e 	add.w	r3, r7, #14
 8004376:	2202      	movs	r2, #2
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f001 f9e1 	bl	8005742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004380:	e05c      	b.n	800443c <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 8004382:	6839      	ldr	r1, [r7, #0]
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f001 f96b 	bl	8005660 <USBD_CtlError>
        ret = USBD_FAIL;
 800438a:	2303      	movs	r3, #3
 800438c:	75fb      	strb	r3, [r7, #23]
      break;
 800438e:	e055      	b.n	800443c <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	885b      	ldrh	r3, [r3, #2]
 8004394:	0a1b      	lsrs	r3, r3, #8
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b22      	cmp	r3, #34	; 0x22
 800439a:	d10b      	bne.n	80043b4 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	88db      	ldrh	r3, [r3, #6]
 80043a0:	2b21      	cmp	r3, #33	; 0x21
 80043a2:	bf28      	it	cs
 80043a4:	2321      	movcs	r3, #33	; 0x21
 80043a6:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e00d      	b.n	80043d0 <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	885b      	ldrh	r3, [r3, #2]
 80043b8:	0a1b      	lsrs	r3, r3, #8
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b21      	cmp	r3, #33	; 0x21
 80043be:	d107      	bne.n	80043d0 <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <USBD_CUSTOM_HID_Setup+0x200>)
 80043c2:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	88db      	ldrh	r3, [r3, #6]
 80043c8:	2b09      	cmp	r3, #9
 80043ca:	bf28      	it	cs
 80043cc:	2309      	movcs	r3, #9
 80043ce:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 80043d0:	8bfb      	ldrh	r3, [r7, #30]
 80043d2:	461a      	mov	r2, r3
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f001 f9b3 	bl	8005742 <USBD_CtlSendData>
      break;
 80043dc:	e02e      	b.n	800443c <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d107      	bne.n	80043f8 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	3348      	adds	r3, #72	; 0x48
 80043ec:	2201      	movs	r2, #1
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f001 f9a6 	bl	8005742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80043f6:	e021      	b.n	800443c <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f001 f930 	bl	8005660 <USBD_CtlError>
        ret = USBD_FAIL;
 8004400:	2303      	movs	r3, #3
 8004402:	75fb      	strb	r3, [r7, #23]
      break;
 8004404:	e01a      	b.n	800443c <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800440c:	2b03      	cmp	r3, #3
 800440e:	d106      	bne.n	800441e <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	885b      	ldrh	r3, [r3, #2]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	649a      	str	r2, [r3, #72]	; 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800441c:	e00e      	b.n	800443c <USBD_CUSTOM_HID_Setup+0x1e4>
        USBD_CtlError(pdev, req);
 800441e:	6839      	ldr	r1, [r7, #0]
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f001 f91d 	bl	8005660 <USBD_CtlError>
        ret = USBD_FAIL;
 8004426:	2303      	movs	r3, #3
 8004428:	75fb      	strb	r3, [r7, #23]
      break;
 800442a:	e007      	b.n	800443c <USBD_CUSTOM_HID_Setup+0x1e4>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800442c:	6839      	ldr	r1, [r7, #0]
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f001 f916 	bl	8005660 <USBD_CtlError>
      ret = USBD_FAIL;
 8004434:	2303      	movs	r3, #3
 8004436:	75fb      	strb	r3, [r7, #23]
      break;
 8004438:	e000      	b.n	800443c <USBD_CUSTOM_HID_Setup+0x1e4>
      break;
 800443a:	bf00      	nop
    }
    break;
 800443c:	e006      	b.n	800444c <USBD_CUSTOM_HID_Setup+0x1f4>

  default:
    USBD_CtlError(pdev, req);
 800443e:	6839      	ldr	r1, [r7, #0]
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f001 f90d 	bl	8005660 <USBD_CtlError>
    ret = USBD_FAIL;
 8004446:	2303      	movs	r3, #3
 8004448:	75fb      	strb	r3, [r7, #23]
    break;
 800444a:	bf00      	nop
  }
  return (uint8_t)ret;
 800444c:	7dfb      	ldrb	r3, [r7, #23]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3720      	adds	r7, #32
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	200000c8 	.word	0x200000c8

0800445c <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004474:	2303      	movs	r3, #3
 8004476:	e01b      	b.n	80044b0 <USBD_CUSTOM_HID_SendReport+0x54>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800447e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004486:	2b03      	cmp	r3, #3
 8004488:	d111      	bne.n	80044ae <USBD_CUSTOM_HID_SendReport+0x52>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10a      	bne.n	80044aa <USBD_CUSTOM_HID_SendReport+0x4e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	2181      	movs	r1, #129	; 0x81
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f001 fdf1 	bl	800608a <USBD_LL_Transmit>
 80044a8:	e001      	b.n	80044ae <USBD_CUSTOM_HID_SendReport+0x52>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <USBD_CUSTOM_HID_SendReport+0x54>
    }
  }
  return (uint8_t)USBD_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2229      	movs	r2, #41	; 0x29
 80044c4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80044c6:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	20000044 	.word	0x20000044

080044d8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2229      	movs	r2, #41	; 0x29
 80044e4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 80044e6:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	20000070 	.word	0x20000070

080044f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2229      	movs	r2, #41	; 0x29
 8004504:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004506:	4b03      	ldr	r3, [pc, #12]	; (8004514 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	2000009c 	.word	0x2000009c

08004518 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004554:	2303      	movs	r3, #3
 8004556:	e00e      	b.n	8004576 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800455e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	7810      	ldrb	r0, [r2, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	7852      	ldrb	r2, [r2, #1]
 8004570:	4611      	mov	r1, r2
 8004572:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8004590:	2303      	movs	r3, #3
 8004592:	e00a      	b.n	80045aa <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800459a:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	2340      	movs	r3, #64	; 0x40
 80045a0:	2101      	movs	r1, #1
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f001 fd92 	bl	80060cc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045c0:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d10c      	bne.n	80045e4 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	7810      	ldrb	r0, [r2, #0]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	7852      	ldrb	r2, [r2, #1]
 80045da:	4611      	mov	r1, r2
 80045dc:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	220a      	movs	r2, #10
 80045fc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80045fe:	4b03      	ldr	r3, [pc, #12]	; (800460c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	200000d4 	.word	0x200000d4

08004610 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004620:	2303      	movs	r3, #3
 8004622:	e004      	b.n	800462e <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b086      	sub	sp, #24
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	4613      	mov	r3, r2
 8004646:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800464e:	2303      	movs	r3, #3
 8004650:	e025      	b.n	800469e <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	79fa      	ldrb	r2, [r7, #7]
 8004690:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f001 fbc4 	bl	8005e20 <USBD_LL_Init>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e010      	b.n	80046e0 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	f107 020e 	add.w	r2, r7, #14
 80046d2:	4610      	mov	r0, r2
 80046d4:	4798      	blx	r3
 80046d6:	4602      	mov	r2, r0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f001 fbe1 	bl	8005eb8 <USBD_LL_Start>
 80046f6:	4603      	mov	r3, r0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	460b      	mov	r3, r1
 8004720:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004722:	2303      	movs	r3, #3
 8004724:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d009      	beq.n	8004744 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	4611      	mov	r1, r2
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
 8004740:	4603      	mov	r3, r0
 8004742:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	460b      	mov	r3, r1
 8004758:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	4611      	mov	r1, r2
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
  }

  return USBD_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800478e:	6839      	ldr	r1, [r7, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 ff2b 	bl	80055ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80047a4:	461a      	mov	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d00e      	beq.n	80047d8 <USBD_LL_SetupStage+0x5a>
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d302      	bcc.n	80047c4 <USBD_LL_SetupStage+0x46>
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d014      	beq.n	80047ec <USBD_LL_SetupStage+0x6e>
 80047c2:	e01d      	b.n	8004800 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047ca:	4619      	mov	r1, r3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fa17 	bl	8004c00 <USBD_StdDevReq>
 80047d2:	4603      	mov	r3, r0
 80047d4:	73fb      	strb	r3, [r7, #15]
      break;
 80047d6:	e020      	b.n	800481a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fa7b 	bl	8004cdc <USBD_StdItfReq>
 80047e6:	4603      	mov	r3, r0
 80047e8:	73fb      	strb	r3, [r7, #15]
      break;
 80047ea:	e016      	b.n	800481a <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fab7 	bl	8004d68 <USBD_StdEPReq>
 80047fa:	4603      	mov	r3, r0
 80047fc:	73fb      	strb	r3, [r7, #15]
      break;
 80047fe:	e00c      	b.n	800481a <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004806:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800480a:	b2db      	uxtb	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f001 fbb2 	bl	8005f78 <USBD_LL_StallEP>
 8004814:	4603      	mov	r3, r0
 8004816:	73fb      	strb	r3, [r7, #15]
      break;
 8004818:	bf00      	nop
  }

  return ret;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	460b      	mov	r3, r1
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004832:	7afb      	ldrb	r3, [r7, #11]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d137      	bne.n	80048a8 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800483e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004846:	2b03      	cmp	r3, #3
 8004848:	d14a      	bne.n	80048e0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	429a      	cmp	r2, r3
 8004854:	d913      	bls.n	800487e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	1ad2      	subs	r2, r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4293      	cmp	r3, r2
 800486e:	bf28      	it	cs
 8004870:	4613      	movcs	r3, r2
 8004872:	461a      	mov	r2, r3
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 ffac 	bl	80057d4 <USBD_CtlContinueRx>
 800487c:	e030      	b.n	80048e0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004890:	2b03      	cmp	r3, #3
 8004892:	d105      	bne.n	80048a0 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 ffa8 	bl	80057f6 <USBD_CtlSendStatus>
 80048a6:	e01b      	b.n	80048e0 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d013      	beq.n	80048dc <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d10e      	bne.n	80048dc <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	7afa      	ldrb	r2, [r7, #11]
 80048c8:	4611      	mov	r1, r2
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	4798      	blx	r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	e002      	b.n	80048e2 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80048dc:	2303      	movs	r3, #3
 80048de:	e000      	b.n	80048e2 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b086      	sub	sp, #24
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	460b      	mov	r3, r1
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80048f8:	7afb      	ldrb	r3, [r7, #11]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d16a      	bne.n	80049d4 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3314      	adds	r3, #20
 8004902:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800490a:	2b02      	cmp	r3, #2
 800490c:	d155      	bne.n	80049ba <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	429a      	cmp	r2, r3
 8004918:	d914      	bls.n	8004944 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	1ad2      	subs	r2, r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	461a      	mov	r2, r3
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 ff21 	bl	8005778 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004936:	2300      	movs	r3, #0
 8004938:	2200      	movs	r2, #0
 800493a:	2100      	movs	r1, #0
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f001 fbc5 	bl	80060cc <USBD_LL_PrepareReceive>
 8004942:	e03a      	b.n	80049ba <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	d11c      	bne.n	800498a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004958:	429a      	cmp	r2, r3
 800495a:	d316      	bcc.n	800498a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004966:	429a      	cmp	r2, r3
 8004968:	d20f      	bcs.n	800498a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800496a:	2200      	movs	r2, #0
 800496c:	2100      	movs	r1, #0
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 ff02 	bl	8005778 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800497c:	2300      	movs	r3, #0
 800497e:	2200      	movs	r2, #0
 8004980:	2100      	movs	r1, #0
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f001 fba2 	bl	80060cc <USBD_LL_PrepareReceive>
 8004988:	e017      	b.n	80049ba <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800499c:	2b03      	cmp	r3, #3
 800499e:	d105      	bne.n	80049ac <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80049ac:	2180      	movs	r1, #128	; 0x80
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f001 fae2 	bl	8005f78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 ff31 	bl	800581c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d123      	bne.n	8004a0c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f7ff fe9b 	bl	8004700 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80049d2:	e01b      	b.n	8004a0c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d013      	beq.n	8004a08 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d10e      	bne.n	8004a08 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	7afa      	ldrb	r2, [r7, #11]
 80049f4:	4611      	mov	r1, r2
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	4798      	blx	r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	e002      	b.n	8004a0e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e000      	b.n	8004a0e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6852      	ldr	r2, [r2, #4]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	4611      	mov	r1, r2
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a5a:	2340      	movs	r3, #64	; 0x40
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2100      	movs	r1, #0
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f001 fa44 	bl	8005eee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2240      	movs	r2, #64	; 0x40
 8004a72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a76:	2340      	movs	r3, #64	; 0x40
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2180      	movs	r1, #128	; 0x80
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f001 fa36 	bl	8005eee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2240      	movs	r2, #64	; 0x40
 8004a8c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d105      	bne.n	8004b00 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d10b      	bne.n	8004b38 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6852      	ldr	r2, [r2, #4]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	4798      	blx	r3
  }

  return USBD_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004be2:	8a3b      	ldrh	r3, [r7, #16]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	b21a      	sxth	r2, r3
 8004be8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	b21b      	sxth	r3, r3
 8004bf0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004bf2:	89fb      	ldrh	r3, [r7, #14]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d004      	beq.n	8004c24 <USBD_StdDevReq+0x24>
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d002      	beq.n	8004c24 <USBD_StdDevReq+0x24>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <USBD_StdDevReq+0x38>
 8004c22:	e050      	b.n	8004cc6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	73fb      	strb	r3, [r7, #15]
    break;
 8004c36:	e04b      	b.n	8004cd0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	2b09      	cmp	r3, #9
 8004c3e:	d83c      	bhi.n	8004cba <USBD_StdDevReq+0xba>
 8004c40:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <USBD_StdDevReq+0x48>)
 8004c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c46:	bf00      	nop
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004cb1 	.word	0x08004cb1
 8004c50:	08004cbb 	.word	0x08004cbb
 8004c54:	08004ca7 	.word	0x08004ca7
 8004c58:	08004cbb 	.word	0x08004cbb
 8004c5c:	08004c7b 	.word	0x08004c7b
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004cbb 	.word	0x08004cbb
 8004c68:	08004c93 	.word	0x08004c93
 8004c6c:	08004c85 	.word	0x08004c85
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004c70:	6839      	ldr	r1, [r7, #0]
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9ce 	bl	8005014 <USBD_GetDescriptor>
      break;
 8004c78:	e024      	b.n	8004cc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004c7a:	6839      	ldr	r1, [r7, #0]
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fb33 	bl	80052e8 <USBD_SetAddress>
      break;
 8004c82:	e01f      	b.n	8004cc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8004c84:	6839      	ldr	r1, [r7, #0]
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fb70 	bl	800536c <USBD_SetConfig>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c90:	e018      	b.n	8004cc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8004c92:	6839      	ldr	r1, [r7, #0]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fc0d 	bl	80054b4 <USBD_GetConfig>
      break;
 8004c9a:	e013      	b.n	8004cc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fc3c 	bl	800551c <USBD_GetStatus>
      break;
 8004ca4:	e00e      	b.n	8004cc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fc6a 	bl	8005582 <USBD_SetFeature>
      break;
 8004cae:	e009      	b.n	8004cc4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fc79 	bl	80055aa <USBD_ClrFeature>
      break;
 8004cb8:	e004      	b.n	8004cc4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fccf 	bl	8005660 <USBD_CtlError>
      break;
 8004cc2:	bf00      	nop
    }
    break;
 8004cc4:	e004      	b.n	8004cd0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fcc9 	bl	8005660 <USBD_CtlError>
    break;
 8004cce:	bf00      	nop
  }

  return ret;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop

08004cdc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d003      	beq.n	8004cfe <USBD_StdItfReq+0x22>
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d001      	beq.n	8004cfe <USBD_StdItfReq+0x22>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d12a      	bne.n	8004d54 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d04:	3b01      	subs	r3, #1
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d81d      	bhi.n	8004d46 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	889b      	ldrh	r3, [r3, #4]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d813      	bhi.n	8004d3c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	88db      	ldrh	r3, [r3, #6]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d110      	bne.n	8004d50 <USBD_StdItfReq+0x74>
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10d      	bne.n	8004d50 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fd5e 	bl	80057f6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004d3a:	e009      	b.n	8004d50 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004d3c:	6839      	ldr	r1, [r7, #0]
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fc8e 	bl	8005660 <USBD_CtlError>
      break;
 8004d44:	e004      	b.n	8004d50 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fc89 	bl	8005660 <USBD_CtlError>
      break;
 8004d4e:	e000      	b.n	8004d52 <USBD_StdItfReq+0x76>
      break;
 8004d50:	bf00      	nop
    }
    break;
 8004d52:	e004      	b.n	8004d5e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fc82 	bl	8005660 <USBD_CtlError>
    break;
 8004d5c:	bf00      	nop
  }

  return ret;
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	889b      	ldrh	r3, [r3, #4]
 8004d7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d004      	beq.n	8004d92 <USBD_StdEPReq+0x2a>
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d002      	beq.n	8004d92 <USBD_StdEPReq+0x2a>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <USBD_StdEPReq+0x3e>
 8004d90:	e135      	b.n	8004ffe <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	6839      	ldr	r1, [r7, #0]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]
    break;
 8004da4:	e130      	b.n	8005008 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d03e      	beq.n	8004e2c <USBD_StdEPReq+0xc4>
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d002      	beq.n	8004db8 <USBD_StdEPReq+0x50>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d077      	beq.n	8004ea6 <USBD_StdEPReq+0x13e>
 8004db6:	e11c      	b.n	8004ff2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d002      	beq.n	8004dc8 <USBD_StdEPReq+0x60>
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d015      	beq.n	8004df2 <USBD_StdEPReq+0x8a>
 8004dc6:	e02b      	b.n	8004e20 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004dc8:	7bbb      	ldrb	r3, [r7, #14]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <USBD_StdEPReq+0x80>
 8004dce:	7bbb      	ldrb	r3, [r7, #14]
 8004dd0:	2b80      	cmp	r3, #128	; 0x80
 8004dd2:	d009      	beq.n	8004de8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004dd4:	7bbb      	ldrb	r3, [r7, #14]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 f8cd 	bl	8005f78 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004dde:	2180      	movs	r1, #128	; 0x80
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f001 f8c9 	bl	8005f78 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004de6:	e020      	b.n	8004e2a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fc38 	bl	8005660 <USBD_CtlError>
        break;
 8004df0:	e01b      	b.n	8004e2a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	885b      	ldrh	r3, [r3, #2]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10e      	bne.n	8004e18 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004dfa:	7bbb      	ldrb	r3, [r7, #14]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00b      	beq.n	8004e18 <USBD_StdEPReq+0xb0>
 8004e00:	7bbb      	ldrb	r3, [r7, #14]
 8004e02:	2b80      	cmp	r3, #128	; 0x80
 8004e04:	d008      	beq.n	8004e18 <USBD_StdEPReq+0xb0>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	88db      	ldrh	r3, [r3, #6]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e0e:	7bbb      	ldrb	r3, [r7, #14]
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f001 f8b0 	bl	8005f78 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fcec 	bl	80057f6 <USBD_CtlSendStatus>

        break;
 8004e1e:	e004      	b.n	8004e2a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fc1c 	bl	8005660 <USBD_CtlError>
        break;
 8004e28:	bf00      	nop
      }
      break;
 8004e2a:	e0e7      	b.n	8004ffc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d002      	beq.n	8004e3c <USBD_StdEPReq+0xd4>
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d015      	beq.n	8004e66 <USBD_StdEPReq+0xfe>
 8004e3a:	e02d      	b.n	8004e98 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <USBD_StdEPReq+0xf4>
 8004e42:	7bbb      	ldrb	r3, [r7, #14]
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d009      	beq.n	8004e5c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e48:	7bbb      	ldrb	r3, [r7, #14]
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f001 f893 	bl	8005f78 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e52:	2180      	movs	r1, #128	; 0x80
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f001 f88f 	bl	8005f78 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004e5a:	e023      	b.n	8004ea4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fbfe 	bl	8005660 <USBD_CtlError>
        break;
 8004e64:	e01e      	b.n	8004ea4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	885b      	ldrh	r3, [r3, #2]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d119      	bne.n	8004ea2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004e6e:	7bbb      	ldrb	r3, [r7, #14]
 8004e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004e78:	7bbb      	ldrb	r3, [r7, #14]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 f89a 	bl	8005fb6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fcb7 	bl	80057f6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	4798      	blx	r3
        }
        break;
 8004e96:	e004      	b.n	8004ea2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fbe0 	bl	8005660 <USBD_CtlError>
        break;
 8004ea0:	e000      	b.n	8004ea4 <USBD_StdEPReq+0x13c>
        break;
 8004ea2:	bf00      	nop
      }
      break;
 8004ea4:	e0aa      	b.n	8004ffc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d002      	beq.n	8004eb6 <USBD_StdEPReq+0x14e>
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d032      	beq.n	8004f1a <USBD_StdEPReq+0x1b2>
 8004eb4:	e097      	b.n	8004fe6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004eb6:	7bbb      	ldrb	r3, [r7, #14]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <USBD_StdEPReq+0x164>
 8004ebc:	7bbb      	ldrb	r3, [r7, #14]
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d004      	beq.n	8004ecc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8004ec2:	6839      	ldr	r1, [r7, #0]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fbcb 	bl	8005660 <USBD_CtlError>
          break;
 8004eca:	e091      	b.n	8004ff0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	da0b      	bge.n	8004eec <USBD_StdEPReq+0x184>
 8004ed4:	7bbb      	ldrb	r3, [r7, #14]
 8004ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	3310      	adds	r3, #16
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3304      	adds	r3, #4
 8004eea:	e00b      	b.n	8004f04 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004eec:	7bbb      	ldrb	r3, [r7, #14]
 8004eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4413      	add	r3, r2
 8004f02:	3304      	adds	r3, #4
 8004f04:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fc15 	bl	8005742 <USBD_CtlSendData>
        break;
 8004f18:	e06a      	b.n	8004ff0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8004f1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da11      	bge.n	8004f46 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004f22:	7bbb      	ldrb	r3, [r7, #14]
 8004f24:	f003 020f 	and.w	r2, r3, #15
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3324      	adds	r3, #36	; 0x24
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d117      	bne.n	8004f6c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fb8e 	bl	8005660 <USBD_CtlError>
            break;
 8004f44:	e054      	b.n	8004ff0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004f46:	7bbb      	ldrb	r3, [r7, #14]
 8004f48:	f003 020f 	and.w	r2, r3, #15
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d104      	bne.n	8004f6c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fb7b 	bl	8005660 <USBD_CtlError>
            break;
 8004f6a:	e041      	b.n	8004ff0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	da0b      	bge.n	8004f8c <USBD_StdEPReq+0x224>
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	3310      	adds	r3, #16
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	4413      	add	r3, r2
 8004f88:	3304      	adds	r3, #4
 8004f8a:	e00b      	b.n	8004fa4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004f8c:	7bbb      	ldrb	r3, [r7, #14]
 8004f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004fa6:	7bbb      	ldrb	r3, [r7, #14]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <USBD_StdEPReq+0x24a>
 8004fac:	7bbb      	ldrb	r3, [r7, #14]
 8004fae:	2b80      	cmp	r3, #128	; 0x80
 8004fb0:	d103      	bne.n	8004fba <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	e00e      	b.n	8004fd8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004fba:	7bbb      	ldrb	r3, [r7, #14]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f001 f818 	bl	8005ff4 <USBD_LL_IsStallEP>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e002      	b.n	8004fd8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fbaf 	bl	8005742 <USBD_CtlSendData>
          break;
 8004fe4:	e004      	b.n	8004ff0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fb39 	bl	8005660 <USBD_CtlError>
        break;
 8004fee:	bf00      	nop
      }
      break;
 8004ff0:	e004      	b.n	8004ffc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fb33 	bl	8005660 <USBD_CtlError>
      break;
 8004ffa:	bf00      	nop
    }
    break;
 8004ffc:	e004      	b.n	8005008 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fb2d 	bl	8005660 <USBD_CtlError>
    break;
 8005006:	bf00      	nop
  }

  return ret;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	885b      	ldrh	r3, [r3, #2]
 800502e:	0a1b      	lsrs	r3, r3, #8
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	2b06      	cmp	r3, #6
 8005036:	f200 8128 	bhi.w	800528a <USBD_GetDescriptor+0x276>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <USBD_GetDescriptor+0x2c>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	0800505d 	.word	0x0800505d
 8005044:	08005075 	.word	0x08005075
 8005048:	080050b5 	.word	0x080050b5
 800504c:	0800528b 	.word	0x0800528b
 8005050:	0800528b 	.word	0x0800528b
 8005054:	0800522b 	.word	0x0800522b
 8005058:	08005257 	.word	0x08005257
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	7c12      	ldrb	r2, [r2, #16]
 8005068:	f107 0108 	add.w	r1, r7, #8
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
 8005070:	60f8      	str	r0, [r7, #12]
    break;
 8005072:	e112      	b.n	800529a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	7c1b      	ldrb	r3, [r3, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10d      	bne.n	8005098 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	f107 0208 	add.w	r2, r7, #8
 8005088:	4610      	mov	r0, r2
 800508a:	4798      	blx	r3
 800508c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3301      	adds	r3, #1
 8005092:	2202      	movs	r2, #2
 8005094:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005096:	e100      	b.n	800529a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	f107 0208 	add.w	r2, r7, #8
 80050a4:	4610      	mov	r0, r2
 80050a6:	4798      	blx	r3
 80050a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3301      	adds	r3, #1
 80050ae:	2202      	movs	r2, #2
 80050b0:	701a      	strb	r2, [r3, #0]
    break;
 80050b2:	e0f2      	b.n	800529a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	885b      	ldrh	r3, [r3, #2]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b05      	cmp	r3, #5
 80050bc:	f200 80ac 	bhi.w	8005218 <USBD_GetDescriptor+0x204>
 80050c0:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <USBD_GetDescriptor+0xb4>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050e1 	.word	0x080050e1
 80050cc:	08005115 	.word	0x08005115
 80050d0:	08005149 	.word	0x08005149
 80050d4:	0800517d 	.word	0x0800517d
 80050d8:	080051b1 	.word	0x080051b1
 80050dc:	080051e5 	.word	0x080051e5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	7c12      	ldrb	r2, [r2, #16]
 80050f8:	f107 0108 	add.w	r1, r7, #8
 80050fc:	4610      	mov	r0, r2
 80050fe:	4798      	blx	r3
 8005100:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005102:	e091      	b.n	8005228 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 faaa 	bl	8005660 <USBD_CtlError>
        err++;
 800510c:	7afb      	ldrb	r3, [r7, #11]
 800510e:	3301      	adds	r3, #1
 8005110:	72fb      	strb	r3, [r7, #11]
      break;
 8005112:	e089      	b.n	8005228 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	7c12      	ldrb	r2, [r2, #16]
 800512c:	f107 0108 	add.w	r1, r7, #8
 8005130:	4610      	mov	r0, r2
 8005132:	4798      	blx	r3
 8005134:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005136:	e077      	b.n	8005228 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa90 	bl	8005660 <USBD_CtlError>
        err++;
 8005140:	7afb      	ldrb	r3, [r7, #11]
 8005142:	3301      	adds	r3, #1
 8005144:	72fb      	strb	r3, [r7, #11]
      break;
 8005146:	e06f      	b.n	8005228 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00b      	beq.n	800516c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	7c12      	ldrb	r2, [r2, #16]
 8005160:	f107 0108 	add.w	r1, r7, #8
 8005164:	4610      	mov	r0, r2
 8005166:	4798      	blx	r3
 8005168:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800516a:	e05d      	b.n	8005228 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fa76 	bl	8005660 <USBD_CtlError>
        err++;
 8005174:	7afb      	ldrb	r3, [r7, #11]
 8005176:	3301      	adds	r3, #1
 8005178:	72fb      	strb	r3, [r7, #11]
      break;
 800517a:	e055      	b.n	8005228 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00b      	beq.n	80051a0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	7c12      	ldrb	r2, [r2, #16]
 8005194:	f107 0108 	add.w	r1, r7, #8
 8005198:	4610      	mov	r0, r2
 800519a:	4798      	blx	r3
 800519c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800519e:	e043      	b.n	8005228 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa5c 	bl	8005660 <USBD_CtlError>
        err++;
 80051a8:	7afb      	ldrb	r3, [r7, #11]
 80051aa:	3301      	adds	r3, #1
 80051ac:	72fb      	strb	r3, [r7, #11]
      break;
 80051ae:	e03b      	b.n	8005228 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00b      	beq.n	80051d4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	7c12      	ldrb	r2, [r2, #16]
 80051c8:	f107 0108 	add.w	r1, r7, #8
 80051cc:	4610      	mov	r0, r2
 80051ce:	4798      	blx	r3
 80051d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051d2:	e029      	b.n	8005228 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa42 	bl	8005660 <USBD_CtlError>
        err++;
 80051dc:	7afb      	ldrb	r3, [r7, #11]
 80051de:	3301      	adds	r3, #1
 80051e0:	72fb      	strb	r3, [r7, #11]
      break;
 80051e2:	e021      	b.n	8005228 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	7c12      	ldrb	r2, [r2, #16]
 80051fc:	f107 0108 	add.w	r1, r7, #8
 8005200:	4610      	mov	r0, r2
 8005202:	4798      	blx	r3
 8005204:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005206:	e00f      	b.n	8005228 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa28 	bl	8005660 <USBD_CtlError>
        err++;
 8005210:	7afb      	ldrb	r3, [r7, #11]
 8005212:	3301      	adds	r3, #1
 8005214:	72fb      	strb	r3, [r7, #11]
      break;
 8005216:	e007      	b.n	8005228 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa20 	bl	8005660 <USBD_CtlError>
      err++;
 8005220:	7afb      	ldrb	r3, [r7, #11]
 8005222:	3301      	adds	r3, #1
 8005224:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005226:	bf00      	nop
    }
    break;
 8005228:	e037      	b.n	800529a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	7c1b      	ldrb	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	f107 0208 	add.w	r2, r7, #8
 800523e:	4610      	mov	r0, r2
 8005240:	4798      	blx	r3
 8005242:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005244:	e029      	b.n	800529a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fa09 	bl	8005660 <USBD_CtlError>
      err++;
 800524e:	7afb      	ldrb	r3, [r7, #11]
 8005250:	3301      	adds	r3, #1
 8005252:	72fb      	strb	r3, [r7, #11]
    break;
 8005254:	e021      	b.n	800529a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	7c1b      	ldrb	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10d      	bne.n	800527a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	f107 0208 	add.w	r2, r7, #8
 800526a:	4610      	mov	r0, r2
 800526c:	4798      	blx	r3
 800526e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3301      	adds	r3, #1
 8005274:	2207      	movs	r2, #7
 8005276:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005278:	e00f      	b.n	800529a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f9ef 	bl	8005660 <USBD_CtlError>
      err++;
 8005282:	7afb      	ldrb	r3, [r7, #11]
 8005284:	3301      	adds	r3, #1
 8005286:	72fb      	strb	r3, [r7, #11]
    break;
 8005288:	e007      	b.n	800529a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f9e7 	bl	8005660 <USBD_CtlError>
    err++;
 8005292:	7afb      	ldrb	r3, [r7, #11]
 8005294:	3301      	adds	r3, #1
 8005296:	72fb      	strb	r3, [r7, #11]
    break;
 8005298:	bf00      	nop
  }

  if (err != 0U)
 800529a:	7afb      	ldrb	r3, [r7, #11]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d11e      	bne.n	80052de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	88db      	ldrh	r3, [r3, #6]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d016      	beq.n	80052d6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80052a8:	893b      	ldrh	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00e      	beq.n	80052cc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	88da      	ldrh	r2, [r3, #6]
 80052b2:	893b      	ldrh	r3, [r7, #8]
 80052b4:	4293      	cmp	r3, r2
 80052b6:	bf28      	it	cs
 80052b8:	4613      	movcs	r3, r2
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80052be:	893b      	ldrh	r3, [r7, #8]
 80052c0:	461a      	mov	r2, r3
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa3c 	bl	8005742 <USBD_CtlSendData>
 80052ca:	e009      	b.n	80052e0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f9c6 	bl	8005660 <USBD_CtlError>
 80052d4:	e004      	b.n	80052e0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa8d 	bl	80057f6 <USBD_CtlSendStatus>
 80052dc:	e000      	b.n	80052e0 <USBD_GetDescriptor+0x2cc>
    return;
 80052de:	bf00      	nop
    }
  }
}
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop

080052e8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	889b      	ldrh	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d130      	bne.n	800535c <USBD_SetAddress+0x74>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	88db      	ldrh	r3, [r3, #6]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d12c      	bne.n	800535c <USBD_SetAddress+0x74>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	885b      	ldrh	r3, [r3, #2]
 8005306:	2b7f      	cmp	r3, #127	; 0x7f
 8005308:	d828      	bhi.n	800535c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	885b      	ldrh	r3, [r3, #2]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005314:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800531c:	2b03      	cmp	r3, #3
 800531e:	d104      	bne.n	800532a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f99c 	bl	8005660 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005328:	e01c      	b.n	8005364 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	7bfa      	ldrb	r2, [r7, #15]
 800532e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005332:	7bfb      	ldrb	r3, [r7, #15]
 8005334:	4619      	mov	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fe88 	bl	800604c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fa5a 	bl	80057f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005342:	7bfb      	ldrb	r3, [r7, #15]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d004      	beq.n	8005352 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005350:	e008      	b.n	8005364 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535a:	e003      	b.n	8005364 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f97e 	bl	8005660 <USBD_CtlError>
  }
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	885b      	ldrh	r3, [r3, #2]
 800537e:	b2da      	uxtb	r2, r3
 8005380:	4b4b      	ldr	r3, [pc, #300]	; (80054b0 <USBD_SetConfig+0x144>)
 8005382:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005384:	4b4a      	ldr	r3, [pc, #296]	; (80054b0 <USBD_SetConfig+0x144>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d905      	bls.n	8005398 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f966 	bl	8005660 <USBD_CtlError>
    return USBD_FAIL;
 8005394:	2303      	movs	r3, #3
 8005396:	e087      	b.n	80054a8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d002      	beq.n	80053a8 <USBD_SetConfig+0x3c>
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d025      	beq.n	80053f2 <USBD_SetConfig+0x86>
 80053a6:	e071      	b.n	800548c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80053a8:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <USBD_SetConfig+0x144>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01c      	beq.n	80053ea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80053b0:	4b3f      	ldr	r3, [pc, #252]	; (80054b0 <USBD_SetConfig+0x144>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80053ba:	4b3d      	ldr	r3, [pc, #244]	; (80054b0 <USBD_SetConfig+0x144>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff f9a8 	bl	8004716 <USBD_SetClassConfig>
 80053c6:	4603      	mov	r3, r0
 80053c8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80053d0:	6839      	ldr	r1, [r7, #0]
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f944 	bl	8005660 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80053d8:	e065      	b.n	80054a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fa0b 	bl	80057f6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2203      	movs	r2, #3
 80053e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80053e8:	e05d      	b.n	80054a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa03 	bl	80057f6 <USBD_CtlSendStatus>
    break;
 80053f0:	e059      	b.n	80054a6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80053f2:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <USBD_SetConfig+0x144>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d112      	bne.n	8005420 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005402:	4b2b      	ldr	r3, [pc, #172]	; (80054b0 <USBD_SetConfig+0x144>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800540c:	4b28      	ldr	r3, [pc, #160]	; (80054b0 <USBD_SetConfig+0x144>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff f99b 	bl	800474e <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f9ec 	bl	80057f6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800541e:	e042      	b.n	80054a6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005420:	4b23      	ldr	r3, [pc, #140]	; (80054b0 <USBD_SetConfig+0x144>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	d02a      	beq.n	8005484 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	b2db      	uxtb	r3, r3
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff f989 	bl	800474e <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800543c:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <USBD_SetConfig+0x144>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005446:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <USBD_SetConfig+0x144>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff f962 	bl	8004716 <USBD_SetClassConfig>
 8005452:	4603      	mov	r3, r0
 8005454:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00f      	beq.n	800547c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8fe 	bl	8005660 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff f96e 	bl	800474e <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800547a:	e014      	b.n	80054a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f9ba 	bl	80057f6 <USBD_CtlSendStatus>
    break;
 8005482:	e010      	b.n	80054a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f9b6 	bl	80057f6 <USBD_CtlSendStatus>
    break;
 800548a:	e00c      	b.n	80054a6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f8e6 	bl	8005660 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <USBD_SetConfig+0x144>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff f957 	bl	800474e <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80054a0:	2303      	movs	r3, #3
 80054a2:	73fb      	strb	r3, [r7, #15]
    break;
 80054a4:	bf00      	nop
  }

  return ret;
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	200001e8 	.word	0x200001e8

080054b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	88db      	ldrh	r3, [r3, #6]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d004      	beq.n	80054d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80054c6:	6839      	ldr	r1, [r7, #0]
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f8c9 	bl	8005660 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80054ce:	e021      	b.n	8005514 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	db17      	blt.n	800550a <USBD_GetConfig+0x56>
 80054da:	2b02      	cmp	r3, #2
 80054dc:	dd02      	ble.n	80054e4 <USBD_GetConfig+0x30>
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d00b      	beq.n	80054fa <USBD_GetConfig+0x46>
 80054e2:	e012      	b.n	800550a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3308      	adds	r3, #8
 80054ee:	2201      	movs	r2, #1
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f925 	bl	8005742 <USBD_CtlSendData>
      break;
 80054f8:	e00c      	b.n	8005514 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3304      	adds	r3, #4
 80054fe:	2201      	movs	r2, #1
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f91d 	bl	8005742 <USBD_CtlSendData>
      break;
 8005508:	e004      	b.n	8005514 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800550a:	6839      	ldr	r1, [r7, #0]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f8a7 	bl	8005660 <USBD_CtlError>
      break;
 8005512:	bf00      	nop
}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800552c:	3b01      	subs	r3, #1
 800552e:	2b02      	cmp	r3, #2
 8005530:	d81e      	bhi.n	8005570 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	88db      	ldrh	r3, [r3, #6]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d004      	beq.n	8005544 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f88f 	bl	8005660 <USBD_CtlError>
      break;
 8005542:	e01a      	b.n	800557a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f043 0202 	orr.w	r2, r3, #2
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	330c      	adds	r3, #12
 8005564:	2202      	movs	r2, #2
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f8ea 	bl	8005742 <USBD_CtlSendData>
    break;
 800556e:	e004      	b.n	800557a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f874 	bl	8005660 <USBD_CtlError>
    break;
 8005578:	bf00      	nop
  }
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	885b      	ldrh	r3, [r3, #2]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d106      	bne.n	80055a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f92a 	bl	80057f6 <USBD_CtlSendStatus>
  }
}
 80055a2:	bf00      	nop
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ba:	3b01      	subs	r3, #1
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d80b      	bhi.n	80055d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	885b      	ldrh	r3, [r3, #2]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d10c      	bne.n	80055e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f910 	bl	80057f6 <USBD_CtlSendStatus>
      }
      break;
 80055d6:	e004      	b.n	80055e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80055d8:	6839      	ldr	r1, [r7, #0]
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f840 	bl	8005660 <USBD_CtlError>
      break;
 80055e0:	e000      	b.n	80055e4 <USBD_ClrFeature+0x3a>
      break;
 80055e2:	bf00      	nop
  }
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	781a      	ldrb	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3301      	adds	r3, #1
 8005606:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7ff fad4 	bl	8004bc4 <SWAPBYTE>
 800561c:	4603      	mov	r3, r0
 800561e:	461a      	mov	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3301      	adds	r3, #1
 8005628:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3301      	adds	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff fac7 	bl	8004bc4 <SWAPBYTE>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3301      	adds	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3301      	adds	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff faba 	bl	8004bc4 <SWAPBYTE>
 8005650:	4603      	mov	r3, r0
 8005652:	461a      	mov	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	80da      	strh	r2, [r3, #6]
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800566a:	2180      	movs	r1, #128	; 0x80
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fc83 	bl	8005f78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005672:	2100      	movs	r1, #0
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fc7f 	bl	8005f78 <USBD_LL_StallEP>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d036      	beq.n	8005706 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800569c:	6938      	ldr	r0, [r7, #16]
 800569e:	f000 f836 	bl	800570e <USBD_GetLen>
 80056a2:	4603      	mov	r3, r0
 80056a4:	3301      	adds	r3, #1
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	4413      	add	r3, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
 80056be:	3301      	adds	r3, #1
 80056c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80056c2:	7dfb      	ldrb	r3, [r7, #23]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4413      	add	r3, r2
 80056c8:	2203      	movs	r2, #3
 80056ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	3301      	adds	r3, #1
 80056d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80056d2:	e013      	b.n	80056fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	4413      	add	r3, r2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	3301      	adds	r3, #1
 80056e4:	613b      	str	r3, [r7, #16]
    idx++;
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
 80056e8:	3301      	adds	r3, #1
 80056ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	4413      	add	r3, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
 80056f8:	3301      	adds	r3, #1
 80056fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e7      	bne.n	80056d4 <USBD_GetString+0x52>
 8005704:	e000      	b.n	8005708 <USBD_GetString+0x86>
    return;
 8005706:	bf00      	nop
  }
}
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800571e:	e005      	b.n	800572c <USBD_GetLen+0x1e>
  {
    len++;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	3301      	adds	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3301      	adds	r3, #1
 800572a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f5      	bne.n	8005720 <USBD_GetLen+0x12>
  }

  return len;
 8005734:	7bfb      	ldrb	r3, [r7, #15]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2202      	movs	r2, #2
 8005752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	2100      	movs	r1, #0
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fc8e 	bl	800608a <USBD_LL_Transmit>

  return USBD_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	2100      	movs	r1, #0
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 fc7d 	bl	800608a <USBD_LL_Transmit>

  return USBD_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	60f8      	str	r0, [r7, #12]
 80057a2:	60b9      	str	r1, [r7, #8]
 80057a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2203      	movs	r2, #3
 80057aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	2100      	movs	r1, #0
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 fc81 	bl	80060cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	2100      	movs	r1, #0
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fc70 	bl	80060cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2204      	movs	r2, #4
 8005802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005806:	2300      	movs	r3, #0
 8005808:	2200      	movs	r2, #0
 800580a:	2100      	movs	r1, #0
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fc3c 	bl	800608a <USBD_LL_Transmit>

  return USBD_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2205      	movs	r2, #5
 8005828:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800582c:	2300      	movs	r3, #0
 800582e:	2200      	movs	r2, #0
 8005830:	2100      	movs	r1, #0
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fc4a 	bl	80060cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005848:	2200      	movs	r2, #0
 800584a:	4912      	ldr	r1, [pc, #72]	; (8005894 <MX_USB_DEVICE_Init+0x50>)
 800584c:	4812      	ldr	r0, [pc, #72]	; (8005898 <MX_USB_DEVICE_Init+0x54>)
 800584e:	f7fe fef4 	bl	800463a <USBD_Init>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005858:	f7fa ff90 	bl	800077c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800585c:	490f      	ldr	r1, [pc, #60]	; (800589c <MX_USB_DEVICE_Init+0x58>)
 800585e:	480e      	ldr	r0, [pc, #56]	; (8005898 <MX_USB_DEVICE_Init+0x54>)
 8005860:	f7fe ff21 	bl	80046a6 <USBD_RegisterClass>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800586a:	f7fa ff87 	bl	800077c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800586e:	490c      	ldr	r1, [pc, #48]	; (80058a0 <MX_USB_DEVICE_Init+0x5c>)
 8005870:	4809      	ldr	r0, [pc, #36]	; (8005898 <MX_USB_DEVICE_Init+0x54>)
 8005872:	f7fe fecd 	bl	8004610 <USBD_CUSTOM_HID_RegisterInterface>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800587c:	f7fa ff7e 	bl	800077c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005880:	4805      	ldr	r0, [pc, #20]	; (8005898 <MX_USB_DEVICE_Init+0x54>)
 8005882:	f7fe ff31 	bl	80046e8 <USBD_Start>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800588c:	f7fa ff76 	bl	800077c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005890:	bf00      	nop
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20000114 	.word	0x20000114
 8005898:	2000022c 	.word	0x2000022c
 800589c:	2000000c 	.word	0x2000000c
 80058a0:	20000104 	.word	0x20000104

080058a4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80058a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80058b8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	460a      	mov	r2, r1
 80058ce:	71fb      	strb	r3, [r7, #7]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	if(USB_GetDataFlag == 0) {
 80058d4:	4b24      	ldr	r3, [pc, #144]	; (8005968 <CUSTOM_HID_OutEvent_FS+0xa4>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d13d      	bne.n	8005958 <CUSTOM_HID_OutEvent_FS+0x94>
		if(event_idx == 0) {
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10c      	bne.n	80058fc <CUSTOM_HID_OutEvent_FS+0x38>
			USB_GetDataFlag = 1;
 80058e2:	4b21      	ldr	r3, [pc, #132]	; (8005968 <CUSTOM_HID_OutEvent_FS+0xa4>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	701a      	strb	r2, [r3, #0]
			USB_DataBuffer[USB_DataBufferIndex] = 0;
 80058e8:	4b20      	ldr	r3, [pc, #128]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b20      	ldr	r3, [pc, #128]	; (8005970 <CUSTOM_HID_OutEvent_FS+0xac>)
 80058f0:	2100      	movs	r1, #0
 80058f2:	5499      	strb	r1, [r3, r2]
			USB_DataBufferIndex = 0;
 80058f4:	4b1d      	ldr	r3, [pc, #116]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e02d      	b.n	8005958 <CUSTOM_HID_OutEvent_FS+0x94>
		} else if(state == 0) {
 80058fc:	79bb      	ldrb	r3, [r7, #6]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d112      	bne.n	8005928 <CUSTOM_HID_OutEvent_FS+0x64>
			USB_GetDataFlag = 1;
 8005902:	4b19      	ldr	r3, [pc, #100]	; (8005968 <CUSTOM_HID_OutEvent_FS+0xa4>)
 8005904:	2201      	movs	r2, #1
 8005906:	701a      	strb	r2, [r3, #0]
			USB_DataBuffer[USB_DataBufferIndex] = event_idx;
 8005908:	4b18      	ldr	r3, [pc, #96]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	4619      	mov	r1, r3
 800590e:	4a18      	ldr	r2, [pc, #96]	; (8005970 <CUSTOM_HID_OutEvent_FS+0xac>)
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	5453      	strb	r3, [r2, r1]
			USB_DataBuffer[USB_DataBufferIndex + 1] = 0;
 8005914:	4b15      	ldr	r3, [pc, #84]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	4a15      	ldr	r2, [pc, #84]	; (8005970 <CUSTOM_HID_OutEvent_FS+0xac>)
 800591c:	2100      	movs	r1, #0
 800591e:	54d1      	strb	r1, [r2, r3]
			USB_DataBufferIndex = 0;
 8005920:	4b12      	ldr	r3, [pc, #72]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	e017      	b.n	8005958 <CUSTOM_HID_OutEvent_FS+0x94>
		} else {
			USB_DataBuffer[USB_DataBufferIndex] = event_idx;
 8005928:	4b10      	ldr	r3, [pc, #64]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	4a10      	ldr	r2, [pc, #64]	; (8005970 <CUSTOM_HID_OutEvent_FS+0xac>)
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	5453      	strb	r3, [r2, r1]
			USB_DataBufferIndex++;
 8005934:	4b0d      	ldr	r3, [pc, #52]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	3301      	adds	r3, #1
 800593a:	b2da      	uxtb	r2, r3
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 800593e:	701a      	strb	r2, [r3, #0]
			USB_DataBuffer[USB_DataBufferIndex] = state;
 8005940:	4b0a      	ldr	r3, [pc, #40]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	4619      	mov	r1, r3
 8005946:	4a0a      	ldr	r2, [pc, #40]	; (8005970 <CUSTOM_HID_OutEvent_FS+0xac>)
 8005948:	79bb      	ldrb	r3, [r7, #6]
 800594a:	5453      	strb	r3, [r2, r1]
			USB_DataBufferIndex++;
 800594c:	4b07      	ldr	r3, [pc, #28]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	3301      	adds	r3, #1
 8005952:	b2da      	uxtb	r2, r3
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <CUSTOM_HID_OutEvent_FS+0xa8>)
 8005956:	701a      	strb	r2, [r3, #0]
	    } */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8005958:	4806      	ldr	r0, [pc, #24]	; (8005974 <CUSTOM_HID_OutEvent_FS+0xb0>)
 800595a:	f7fe fe10 	bl	800457e <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800595e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	2000021e 	.word	0x2000021e
 800596c:	2000021f 	.word	0x2000021f
 8005970:	200001ec 	.word	0x200001ec
 8005974:	2000022c 	.word	0x2000022c

08005978 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	6039      	str	r1, [r7, #0]
 8005982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2212      	movs	r2, #18
 8005988:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800598a:	4b03      	ldr	r3, [pc, #12]	; (8005998 <USBD_FS_DeviceDescriptor+0x20>)
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	20000130 	.word	0x20000130

0800599c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	6039      	str	r1, [r7, #0]
 80059a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2204      	movs	r2, #4
 80059ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80059ae:	4b03      	ldr	r3, [pc, #12]	; (80059bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	20000144 	.word	0x20000144

080059c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	4603      	mov	r3, r0
 80059c8:	6039      	str	r1, [r7, #0]
 80059ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d105      	bne.n	80059de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	4907      	ldr	r1, [pc, #28]	; (80059f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80059d6:	4808      	ldr	r0, [pc, #32]	; (80059f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80059d8:	f7ff fe53 	bl	8005682 <USBD_GetString>
 80059dc:	e004      	b.n	80059e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	4904      	ldr	r1, [pc, #16]	; (80059f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80059e2:	4805      	ldr	r0, [pc, #20]	; (80059f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80059e4:	f7ff fe4d 	bl	8005682 <USBD_GetString>
  }
  return USBD_StrDesc;
 80059e8:	4b02      	ldr	r3, [pc, #8]	; (80059f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	200004fc 	.word	0x200004fc
 80059f8:	08006378 	.word	0x08006378

080059fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	6039      	str	r1, [r7, #0]
 8005a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	4904      	ldr	r1, [pc, #16]	; (8005a1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005a0c:	4804      	ldr	r0, [pc, #16]	; (8005a20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005a0e:	f7ff fe38 	bl	8005682 <USBD_GetString>
  return USBD_StrDesc;
 8005a12:	4b02      	ldr	r3, [pc, #8]	; (8005a1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	200004fc 	.word	0x200004fc
 8005a20:	08006398 	.word	0x08006398

08005a24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	6039      	str	r1, [r7, #0]
 8005a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	221a      	movs	r2, #26
 8005a34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005a36:	f000 f843 	bl	8005ac0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005a3a:	4b02      	ldr	r3, [pc, #8]	; (8005a44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	20000148 	.word	0x20000148

08005a48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	6039      	str	r1, [r7, #0]
 8005a52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	4907      	ldr	r1, [pc, #28]	; (8005a7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005a5e:	4808      	ldr	r0, [pc, #32]	; (8005a80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005a60:	f7ff fe0f 	bl	8005682 <USBD_GetString>
 8005a64:	e004      	b.n	8005a70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	4904      	ldr	r1, [pc, #16]	; (8005a7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005a6a:	4805      	ldr	r0, [pc, #20]	; (8005a80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005a6c:	f7ff fe09 	bl	8005682 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005a70:	4b02      	ldr	r3, [pc, #8]	; (8005a7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	200004fc 	.word	0x200004fc
 8005a80:	080063ac 	.word	0x080063ac

08005a84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	6039      	str	r1, [r7, #0]
 8005a8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	4907      	ldr	r1, [pc, #28]	; (8005ab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005a9a:	4808      	ldr	r0, [pc, #32]	; (8005abc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005a9c:	f7ff fdf1 	bl	8005682 <USBD_GetString>
 8005aa0:	e004      	b.n	8005aac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	4904      	ldr	r1, [pc, #16]	; (8005ab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005aa6:	4805      	ldr	r0, [pc, #20]	; (8005abc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005aa8:	f7ff fdeb 	bl	8005682 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005aac:	4b02      	ldr	r3, [pc, #8]	; (8005ab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200004fc 	.word	0x200004fc
 8005abc:	080063c0 	.word	0x080063c0

08005ac0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <Get_SerialNum+0x44>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005acc:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <Get_SerialNum+0x48>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005ad2:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <Get_SerialNum+0x4c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005ae6:	2208      	movs	r2, #8
 8005ae8:	4909      	ldr	r1, [pc, #36]	; (8005b10 <Get_SerialNum+0x50>)
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f000 f814 	bl	8005b18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005af0:	2204      	movs	r2, #4
 8005af2:	4908      	ldr	r1, [pc, #32]	; (8005b14 <Get_SerialNum+0x54>)
 8005af4:	68b8      	ldr	r0, [r7, #8]
 8005af6:	f000 f80f 	bl	8005b18 <IntToUnicode>
  }
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	1fff7a10 	.word	0x1fff7a10
 8005b08:	1fff7a14 	.word	0x1fff7a14
 8005b0c:	1fff7a18 	.word	0x1fff7a18
 8005b10:	2000014a 	.word	0x2000014a
 8005b14:	2000015a 	.word	0x2000015a

08005b18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
 8005b2e:	e027      	b.n	8005b80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	0f1b      	lsrs	r3, r3, #28
 8005b34:	2b09      	cmp	r3, #9
 8005b36:	d80b      	bhi.n	8005b50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	0f1b      	lsrs	r3, r3, #28
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4619      	mov	r1, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	440b      	add	r3, r1
 8005b48:	3230      	adds	r2, #48	; 0x30
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	e00a      	b.n	8005b66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	0f1b      	lsrs	r3, r3, #28
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	440b      	add	r3, r1
 8005b60:	3237      	adds	r2, #55	; 0x37
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	3301      	adds	r3, #1
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	4413      	add	r3, r2
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
 8005b80:	7dfa      	ldrb	r2, [r7, #23]
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d3d3      	bcc.n	8005b30 <IntToUnicode+0x18>
  }
}
 8005b88:	bf00      	nop
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bb4:	d13a      	bne.n	8005c2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <HAL_PCD_MspInit+0xa0>)
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <HAL_PCD_MspInit+0xa0>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc6:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <HAL_PCD_MspInit+0xa0>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005bd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be0:	2303      	movs	r3, #3
 8005be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005be4:	230a      	movs	r3, #10
 8005be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005be8:	f107 0314 	add.w	r3, r7, #20
 8005bec:	4619      	mov	r1, r3
 8005bee:	4812      	ldr	r0, [pc, #72]	; (8005c38 <HAL_PCD_MspInit+0xa4>)
 8005bf0:	f7fb f83e 	bl	8000c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <HAL_PCD_MspInit+0xa0>)
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf8:	4a0e      	ldr	r2, [pc, #56]	; (8005c34 <HAL_PCD_MspInit+0xa0>)
 8005bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfe:	6353      	str	r3, [r2, #52]	; 0x34
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <HAL_PCD_MspInit+0xa0>)
 8005c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c08:	4a0a      	ldr	r2, [pc, #40]	; (8005c34 <HAL_PCD_MspInit+0xa0>)
 8005c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c0e:	6453      	str	r3, [r2, #68]	; 0x44
 8005c10:	4b08      	ldr	r3, [pc, #32]	; (8005c34 <HAL_PCD_MspInit+0xa0>)
 8005c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2100      	movs	r1, #0
 8005c20:	2043      	movs	r0, #67	; 0x43
 8005c22:	f7fa ffee 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005c26:	2043      	movs	r0, #67	; 0x43
 8005c28:	f7fb f807 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	3728      	adds	r7, #40	; 0x28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40023800 	.word	0x40023800
 8005c38:	40020000 	.word	0x40020000

08005c3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c50:	4619      	mov	r1, r3
 8005c52:	4610      	mov	r0, r2
 8005c54:	f7fe fd93 	bl	800477e <USBD_LL_SetupStage>
}
 8005c58:	bf00      	nop
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	f7fe fdcb 	bl	8004824 <USBD_LL_DataOutStage>
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	3348      	adds	r3, #72	; 0x48
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f7fe fe14 	bl	80048ea <USBD_LL_DataInStage>
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe ff18 	bl	8004b0e <USBD_LL_SOF>
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
 8005cfe:	e008      	b.n	8005d12 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d102      	bne.n	8005d0e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	73fb      	strb	r3, [r7, #15]
 8005d0c:	e001      	b.n	8005d12 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005d0e:	f7fa fd35 	bl	800077c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d18:	7bfa      	ldrb	r2, [r7, #15]
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe febb 	bl	8004a98 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fe fe74 	bl	8004a16 <USBD_LL_Reset>
}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe feb6 	bl	8004ab8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005d6c:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <HAL_PCD_SuspendCallback+0x48>)
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	4a03      	ldr	r2, [pc, #12]	; (8005d80 <HAL_PCD_SuspendCallback+0x48>)
 8005d72:	f043 0306 	orr.w	r3, r3, #6
 8005d76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	e000ed00 	.word	0xe000ed00

08005d84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fea5 	bl	8004ae2 <USBD_LL_Resume>
}
 8005d98:	bf00      	nop
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	4611      	mov	r1, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fed0 	bl	8004b5c <USBD_LL_IsoOUTIncomplete>
}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	4611      	mov	r1, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe feb1 	bl	8004b42 <USBD_LL_IsoINIncomplete>
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe febd 	bl	8004b76 <USBD_LL_DevConnected>
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe feba 	bl	8004b8c <USBD_LL_DevDisconnected>
}
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d13c      	bne.n	8005eaa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005e30:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a1e      	ldr	r2, [pc, #120]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e3c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005e40:	4b1c      	ldr	r3, [pc, #112]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005e46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005e48:	4b1a      	ldr	r3, [pc, #104]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005e4e:	4b19      	ldr	r3, [pc, #100]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e50:	2202      	movs	r2, #2
 8005e52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005e54:	4b17      	ldr	r3, [pc, #92]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005e5a:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005e60:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005e66:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005e6c:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005e72:	4b10      	ldr	r3, [pc, #64]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005e78:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005e7e:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e80:	f7fb f8a9 	bl	8000fd6 <HAL_PCD_Init>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005e8a:	f7fa fc77 	bl	800077c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005e8e:	2180      	movs	r1, #128	; 0x80
 8005e90:	4808      	ldr	r0, [pc, #32]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e92:	f7fc f9ee 	bl	8002272 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005e96:	2240      	movs	r2, #64	; 0x40
 8005e98:	2100      	movs	r1, #0
 8005e9a:	4806      	ldr	r0, [pc, #24]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005e9c:	f7fc f9a2 	bl	80021e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005ea0:	2280      	movs	r2, #128	; 0x80
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	4803      	ldr	r0, [pc, #12]	; (8005eb4 <USBD_LL_Init+0x94>)
 8005ea6:	f7fc f99d 	bl	80021e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	200006fc 	.word	0x200006fc

08005eb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fb f99e 	bl	8001210 <HAL_PCD_Start>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f918 	bl	8006110 <USBD_Get_USB_Status>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005ee4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	4608      	mov	r0, r1
 8005ef8:	4611      	mov	r1, r2
 8005efa:	461a      	mov	r2, r3
 8005efc:	4603      	mov	r3, r0
 8005efe:	70fb      	strb	r3, [r7, #3]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70bb      	strb	r3, [r7, #2]
 8005f04:	4613      	mov	r3, r2
 8005f06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005f16:	78bb      	ldrb	r3, [r7, #2]
 8005f18:	883a      	ldrh	r2, [r7, #0]
 8005f1a:	78f9      	ldrb	r1, [r7, #3]
 8005f1c:	f7fb fd82 	bl	8001a24 <HAL_PCD_EP_Open>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 f8f2 	bl	8006110 <USBD_Get_USB_Status>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f54:	78fa      	ldrb	r2, [r7, #3]
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fb fdcb 	bl	8001af4 <HAL_PCD_EP_Close>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 f8d3 	bl	8006110 <USBD_Get_USB_Status>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005f6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fb fe8b 	bl	8001cb2 <HAL_PCD_EP_SetStall>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f8b4 	bl	8006110 <USBD_Get_USB_Status>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005fd0:	78fa      	ldrb	r2, [r7, #3]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fb fed0 	bl	8001d7a <HAL_PCD_EP_ClrStall>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 f895 	bl	8006110 <USBD_Get_USB_Status>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006006:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800600c:	2b00      	cmp	r3, #0
 800600e:	da0b      	bge.n	8006028 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	4613      	mov	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	440b      	add	r3, r1
 8006022:	333e      	adds	r3, #62	; 0x3e
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	e00b      	b.n	8006040 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006028:	78fb      	ldrb	r3, [r7, #3]
 800602a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800602e:	68f9      	ldr	r1, [r7, #12]
 8006030:	4613      	mov	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	1a9b      	subs	r3, r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800603e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006066:	78fa      	ldrb	r2, [r7, #3]
 8006068:	4611      	mov	r1, r2
 800606a:	4618      	mov	r0, r3
 800606c:	f7fb fcb5 	bl	80019da <HAL_PCD_SetAddress>
 8006070:	4603      	mov	r3, r0
 8006072:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 f84a 	bl	8006110 <USBD_Get_USB_Status>
 800607c:	4603      	mov	r3, r0
 800607e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006080:	7bbb      	ldrb	r3, [r7, #14]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
 8006096:	460b      	mov	r3, r1
 8006098:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80060a8:	7af9      	ldrb	r1, [r7, #11]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	f7fb fdb6 	bl	8001c1e <HAL_PCD_EP_Transmit>
 80060b2:	4603      	mov	r3, r0
 80060b4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 f829 	bl	8006110 <USBD_Get_USB_Status>
 80060be:	4603      	mov	r3, r0
 80060c0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80060c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	460b      	mov	r3, r1
 80060da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80060ea:	7af9      	ldrb	r1, [r7, #11]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	f7fb fd4a 	bl	8001b88 <HAL_PCD_EP_Receive>
 80060f4:	4603      	mov	r3, r0
 80060f6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 f808 	bl	8006110 <USBD_Get_USB_Status>
 8006100:	4603      	mov	r3, r0
 8006102:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8006104:	7dbb      	ldrb	r3, [r7, #22]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	2b03      	cmp	r3, #3
 8006122:	d817      	bhi.n	8006154 <USBD_Get_USB_Status+0x44>
 8006124:	a201      	add	r2, pc, #4	; (adr r2, 800612c <USBD_Get_USB_Status+0x1c>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	0800613d 	.word	0x0800613d
 8006130:	08006143 	.word	0x08006143
 8006134:	08006149 	.word	0x08006149
 8006138:	0800614f 	.word	0x0800614f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	73fb      	strb	r3, [r7, #15]
    break;
 8006140:	e00b      	b.n	800615a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006142:	2303      	movs	r3, #3
 8006144:	73fb      	strb	r3, [r7, #15]
    break;
 8006146:	e008      	b.n	800615a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006148:	2301      	movs	r3, #1
 800614a:	73fb      	strb	r3, [r7, #15]
    break;
 800614c:	e005      	b.n	800615a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800614e:	2303      	movs	r3, #3
 8006150:	73fb      	strb	r3, [r7, #15]
    break;
 8006152:	e002      	b.n	800615a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006154:	2303      	movs	r3, #3
 8006156:	73fb      	strb	r3, [r7, #15]
    break;
 8006158:	bf00      	nop
  }
  return usb_status;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <__errno>:
 8006168:	4b01      	ldr	r3, [pc, #4]	; (8006170 <__errno+0x8>)
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20000164 	.word	0x20000164

08006174 <__libc_init_array>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	4e0d      	ldr	r6, [pc, #52]	; (80061ac <__libc_init_array+0x38>)
 8006178:	4c0d      	ldr	r4, [pc, #52]	; (80061b0 <__libc_init_array+0x3c>)
 800617a:	1ba4      	subs	r4, r4, r6
 800617c:	10a4      	asrs	r4, r4, #2
 800617e:	2500      	movs	r5, #0
 8006180:	42a5      	cmp	r5, r4
 8006182:	d109      	bne.n	8006198 <__libc_init_array+0x24>
 8006184:	4e0b      	ldr	r6, [pc, #44]	; (80061b4 <__libc_init_array+0x40>)
 8006186:	4c0c      	ldr	r4, [pc, #48]	; (80061b8 <__libc_init_array+0x44>)
 8006188:	f000 f8ea 	bl	8006360 <_init>
 800618c:	1ba4      	subs	r4, r4, r6
 800618e:	10a4      	asrs	r4, r4, #2
 8006190:	2500      	movs	r5, #0
 8006192:	42a5      	cmp	r5, r4
 8006194:	d105      	bne.n	80061a2 <__libc_init_array+0x2e>
 8006196:	bd70      	pop	{r4, r5, r6, pc}
 8006198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800619c:	4798      	blx	r3
 800619e:	3501      	adds	r5, #1
 80061a0:	e7ee      	b.n	8006180 <__libc_init_array+0xc>
 80061a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061a6:	4798      	blx	r3
 80061a8:	3501      	adds	r5, #1
 80061aa:	e7f2      	b.n	8006192 <__libc_init_array+0x1e>
 80061ac:	080063f0 	.word	0x080063f0
 80061b0:	080063f0 	.word	0x080063f0
 80061b4:	080063f0 	.word	0x080063f0
 80061b8:	080063f4 	.word	0x080063f4

080061bc <malloc>:
 80061bc:	4b02      	ldr	r3, [pc, #8]	; (80061c8 <malloc+0xc>)
 80061be:	4601      	mov	r1, r0
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f000 b861 	b.w	8006288 <_malloc_r>
 80061c6:	bf00      	nop
 80061c8:	20000164 	.word	0x20000164

080061cc <free>:
 80061cc:	4b02      	ldr	r3, [pc, #8]	; (80061d8 <free+0xc>)
 80061ce:	4601      	mov	r1, r0
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	f000 b80b 	b.w	80061ec <_free_r>
 80061d6:	bf00      	nop
 80061d8:	20000164 	.word	0x20000164

080061dc <memset>:
 80061dc:	4402      	add	r2, r0
 80061de:	4603      	mov	r3, r0
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d100      	bne.n	80061e6 <memset+0xa>
 80061e4:	4770      	bx	lr
 80061e6:	f803 1b01 	strb.w	r1, [r3], #1
 80061ea:	e7f9      	b.n	80061e0 <memset+0x4>

080061ec <_free_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4605      	mov	r5, r0
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d045      	beq.n	8006280 <_free_r+0x94>
 80061f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f8:	1f0c      	subs	r4, r1, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bfb8      	it	lt
 80061fe:	18e4      	addlt	r4, r4, r3
 8006200:	f000 f8ac 	bl	800635c <__malloc_lock>
 8006204:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <_free_r+0x98>)
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	4610      	mov	r0, r2
 800620a:	b933      	cbnz	r3, 800621a <_free_r+0x2e>
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	6014      	str	r4, [r2, #0]
 8006210:	4628      	mov	r0, r5
 8006212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006216:	f000 b8a2 	b.w	800635e <__malloc_unlock>
 800621a:	42a3      	cmp	r3, r4
 800621c:	d90c      	bls.n	8006238 <_free_r+0x4c>
 800621e:	6821      	ldr	r1, [r4, #0]
 8006220:	1862      	adds	r2, r4, r1
 8006222:	4293      	cmp	r3, r2
 8006224:	bf04      	itt	eq
 8006226:	681a      	ldreq	r2, [r3, #0]
 8006228:	685b      	ldreq	r3, [r3, #4]
 800622a:	6063      	str	r3, [r4, #4]
 800622c:	bf04      	itt	eq
 800622e:	1852      	addeq	r2, r2, r1
 8006230:	6022      	streq	r2, [r4, #0]
 8006232:	6004      	str	r4, [r0, #0]
 8006234:	e7ec      	b.n	8006210 <_free_r+0x24>
 8006236:	4613      	mov	r3, r2
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	b10a      	cbz	r2, 8006240 <_free_r+0x54>
 800623c:	42a2      	cmp	r2, r4
 800623e:	d9fa      	bls.n	8006236 <_free_r+0x4a>
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	1858      	adds	r0, r3, r1
 8006244:	42a0      	cmp	r0, r4
 8006246:	d10b      	bne.n	8006260 <_free_r+0x74>
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	4401      	add	r1, r0
 800624c:	1858      	adds	r0, r3, r1
 800624e:	4282      	cmp	r2, r0
 8006250:	6019      	str	r1, [r3, #0]
 8006252:	d1dd      	bne.n	8006210 <_free_r+0x24>
 8006254:	6810      	ldr	r0, [r2, #0]
 8006256:	6852      	ldr	r2, [r2, #4]
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	4401      	add	r1, r0
 800625c:	6019      	str	r1, [r3, #0]
 800625e:	e7d7      	b.n	8006210 <_free_r+0x24>
 8006260:	d902      	bls.n	8006268 <_free_r+0x7c>
 8006262:	230c      	movs	r3, #12
 8006264:	602b      	str	r3, [r5, #0]
 8006266:	e7d3      	b.n	8006210 <_free_r+0x24>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	1821      	adds	r1, r4, r0
 800626c:	428a      	cmp	r2, r1
 800626e:	bf04      	itt	eq
 8006270:	6811      	ldreq	r1, [r2, #0]
 8006272:	6852      	ldreq	r2, [r2, #4]
 8006274:	6062      	str	r2, [r4, #4]
 8006276:	bf04      	itt	eq
 8006278:	1809      	addeq	r1, r1, r0
 800627a:	6021      	streq	r1, [r4, #0]
 800627c:	605c      	str	r4, [r3, #4]
 800627e:	e7c7      	b.n	8006210 <_free_r+0x24>
 8006280:	bd38      	pop	{r3, r4, r5, pc}
 8006282:	bf00      	nop
 8006284:	20000220 	.word	0x20000220

08006288 <_malloc_r>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	1ccd      	adds	r5, r1, #3
 800628c:	f025 0503 	bic.w	r5, r5, #3
 8006290:	3508      	adds	r5, #8
 8006292:	2d0c      	cmp	r5, #12
 8006294:	bf38      	it	cc
 8006296:	250c      	movcc	r5, #12
 8006298:	2d00      	cmp	r5, #0
 800629a:	4606      	mov	r6, r0
 800629c:	db01      	blt.n	80062a2 <_malloc_r+0x1a>
 800629e:	42a9      	cmp	r1, r5
 80062a0:	d903      	bls.n	80062aa <_malloc_r+0x22>
 80062a2:	230c      	movs	r3, #12
 80062a4:	6033      	str	r3, [r6, #0]
 80062a6:	2000      	movs	r0, #0
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	f000 f857 	bl	800635c <__malloc_lock>
 80062ae:	4a21      	ldr	r2, [pc, #132]	; (8006334 <_malloc_r+0xac>)
 80062b0:	6814      	ldr	r4, [r2, #0]
 80062b2:	4621      	mov	r1, r4
 80062b4:	b991      	cbnz	r1, 80062dc <_malloc_r+0x54>
 80062b6:	4c20      	ldr	r4, [pc, #128]	; (8006338 <_malloc_r+0xb0>)
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	b91b      	cbnz	r3, 80062c4 <_malloc_r+0x3c>
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 f83d 	bl	800633c <_sbrk_r>
 80062c2:	6020      	str	r0, [r4, #0]
 80062c4:	4629      	mov	r1, r5
 80062c6:	4630      	mov	r0, r6
 80062c8:	f000 f838 	bl	800633c <_sbrk_r>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d124      	bne.n	800631a <_malloc_r+0x92>
 80062d0:	230c      	movs	r3, #12
 80062d2:	6033      	str	r3, [r6, #0]
 80062d4:	4630      	mov	r0, r6
 80062d6:	f000 f842 	bl	800635e <__malloc_unlock>
 80062da:	e7e4      	b.n	80062a6 <_malloc_r+0x1e>
 80062dc:	680b      	ldr	r3, [r1, #0]
 80062de:	1b5b      	subs	r3, r3, r5
 80062e0:	d418      	bmi.n	8006314 <_malloc_r+0x8c>
 80062e2:	2b0b      	cmp	r3, #11
 80062e4:	d90f      	bls.n	8006306 <_malloc_r+0x7e>
 80062e6:	600b      	str	r3, [r1, #0]
 80062e8:	50cd      	str	r5, [r1, r3]
 80062ea:	18cc      	adds	r4, r1, r3
 80062ec:	4630      	mov	r0, r6
 80062ee:	f000 f836 	bl	800635e <__malloc_unlock>
 80062f2:	f104 000b 	add.w	r0, r4, #11
 80062f6:	1d23      	adds	r3, r4, #4
 80062f8:	f020 0007 	bic.w	r0, r0, #7
 80062fc:	1ac3      	subs	r3, r0, r3
 80062fe:	d0d3      	beq.n	80062a8 <_malloc_r+0x20>
 8006300:	425a      	negs	r2, r3
 8006302:	50e2      	str	r2, [r4, r3]
 8006304:	e7d0      	b.n	80062a8 <_malloc_r+0x20>
 8006306:	428c      	cmp	r4, r1
 8006308:	684b      	ldr	r3, [r1, #4]
 800630a:	bf16      	itet	ne
 800630c:	6063      	strne	r3, [r4, #4]
 800630e:	6013      	streq	r3, [r2, #0]
 8006310:	460c      	movne	r4, r1
 8006312:	e7eb      	b.n	80062ec <_malloc_r+0x64>
 8006314:	460c      	mov	r4, r1
 8006316:	6849      	ldr	r1, [r1, #4]
 8006318:	e7cc      	b.n	80062b4 <_malloc_r+0x2c>
 800631a:	1cc4      	adds	r4, r0, #3
 800631c:	f024 0403 	bic.w	r4, r4, #3
 8006320:	42a0      	cmp	r0, r4
 8006322:	d005      	beq.n	8006330 <_malloc_r+0xa8>
 8006324:	1a21      	subs	r1, r4, r0
 8006326:	4630      	mov	r0, r6
 8006328:	f000 f808 	bl	800633c <_sbrk_r>
 800632c:	3001      	adds	r0, #1
 800632e:	d0cf      	beq.n	80062d0 <_malloc_r+0x48>
 8006330:	6025      	str	r5, [r4, #0]
 8006332:	e7db      	b.n	80062ec <_malloc_r+0x64>
 8006334:	20000220 	.word	0x20000220
 8006338:	20000224 	.word	0x20000224

0800633c <_sbrk_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4c06      	ldr	r4, [pc, #24]	; (8006358 <_sbrk_r+0x1c>)
 8006340:	2300      	movs	r3, #0
 8006342:	4605      	mov	r5, r0
 8006344:	4608      	mov	r0, r1
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	f7fa fa80 	bl	800084c <_sbrk>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_sbrk_r+0x1a>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	b103      	cbz	r3, 8006356 <_sbrk_r+0x1a>
 8006354:	602b      	str	r3, [r5, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	20000b04 	.word	0x20000b04

0800635c <__malloc_lock>:
 800635c:	4770      	bx	lr

0800635e <__malloc_unlock>:
 800635e:	4770      	bx	lr

08006360 <_init>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr

0800636c <_fini>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr
