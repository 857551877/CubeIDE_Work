
NUCLEO_IAP_APP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002240  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800a34c  0800a34c  0000a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3e8  0800a3e8  00010070  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3e8  0800a3e8  00010070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3e8  0800a3e8  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e8  0800a3e8  0000a3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3ec  0800a3ec  0000a3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a3f0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  0800a460  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800a460  00010120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007055  00000000  00000000  00010099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001709  00000000  00000000  000170ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  000187f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  00018ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014880  00000000  00000000  000194b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000066f7  00000000  00000000  0002dd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b4a0  00000000  00000000  00034427  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009f8c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed8  00000000  00000000  0009f944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000070 	.word	0x20000070
 8008128:	00000000 	.word	0x00000000
 800812c:	0800a334 	.word	0x0800a334

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	20000074 	.word	0x20000074
 8008148:	0800a334 	.word	0x0800a334

0800814c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008152:	f107 0310 	add.w	r3, r7, #16
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	605a      	str	r2, [r3, #4]
 800815c:	609a      	str	r2, [r3, #8]
 800815e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008160:	4b2d      	ldr	r3, [pc, #180]	; (8008218 <MX_GPIO_Init+0xcc>)
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	4a2c      	ldr	r2, [pc, #176]	; (8008218 <MX_GPIO_Init+0xcc>)
 8008166:	f043 0310 	orr.w	r3, r3, #16
 800816a:	6193      	str	r3, [r2, #24]
 800816c:	4b2a      	ldr	r3, [pc, #168]	; (8008218 <MX_GPIO_Init+0xcc>)
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f003 0310 	and.w	r3, r3, #16
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008178:	4b27      	ldr	r3, [pc, #156]	; (8008218 <MX_GPIO_Init+0xcc>)
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	4a26      	ldr	r2, [pc, #152]	; (8008218 <MX_GPIO_Init+0xcc>)
 800817e:	f043 0320 	orr.w	r3, r3, #32
 8008182:	6193      	str	r3, [r2, #24]
 8008184:	4b24      	ldr	r3, [pc, #144]	; (8008218 <MX_GPIO_Init+0xcc>)
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	60bb      	str	r3, [r7, #8]
 800818e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008190:	4b21      	ldr	r3, [pc, #132]	; (8008218 <MX_GPIO_Init+0xcc>)
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4a20      	ldr	r2, [pc, #128]	; (8008218 <MX_GPIO_Init+0xcc>)
 8008196:	f043 0304 	orr.w	r3, r3, #4
 800819a:	6193      	str	r3, [r2, #24]
 800819c:	4b1e      	ldr	r3, [pc, #120]	; (8008218 <MX_GPIO_Init+0xcc>)
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081a8:	4b1b      	ldr	r3, [pc, #108]	; (8008218 <MX_GPIO_Init+0xcc>)
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <MX_GPIO_Init+0xcc>)
 80081ae:	f043 0308 	orr.w	r3, r3, #8
 80081b2:	6193      	str	r3, [r2, #24]
 80081b4:	4b18      	ldr	r3, [pc, #96]	; (8008218 <MX_GPIO_Init+0xcc>)
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	603b      	str	r3, [r7, #0]
 80081be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80081c0:	2200      	movs	r2, #0
 80081c2:	2120      	movs	r1, #32
 80081c4:	4815      	ldr	r0, [pc, #84]	; (800821c <MX_GPIO_Init+0xd0>)
 80081c6:	f000 fdbd 	bl	8008d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80081ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80081d0:	4b13      	ldr	r3, [pc, #76]	; (8008220 <MX_GPIO_Init+0xd4>)
 80081d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80081d8:	f107 0310 	add.w	r3, r7, #16
 80081dc:	4619      	mov	r1, r3
 80081de:	4811      	ldr	r0, [pc, #68]	; (8008224 <MX_GPIO_Init+0xd8>)
 80081e0:	f000 fc56 	bl	8008a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80081e4:	2320      	movs	r3, #32
 80081e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081e8:	2301      	movs	r3, #1
 80081ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081f0:	2302      	movs	r3, #2
 80081f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80081f4:	f107 0310 	add.w	r3, r7, #16
 80081f8:	4619      	mov	r1, r3
 80081fa:	4808      	ldr	r0, [pc, #32]	; (800821c <MX_GPIO_Init+0xd0>)
 80081fc:	f000 fc48 	bl	8008a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008200:	2200      	movs	r2, #0
 8008202:	2100      	movs	r1, #0
 8008204:	2028      	movs	r0, #40	; 0x28
 8008206:	f000 fc0c 	bl	8008a22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800820a:	2028      	movs	r0, #40	; 0x28
 800820c:	f000 fc25 	bl	8008a5a <HAL_NVIC_EnableIRQ>

}
 8008210:	bf00      	nop
 8008212:	3720      	adds	r7, #32
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	40021000 	.word	0x40021000
 800821c:	40010800 	.word	0x40010800
 8008220:	10110000 	.word	0x10110000
 8008224:	40011000 	.word	0x40011000

08008228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800822c:	f000 fa9e 	bl	800876c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008230:	f000 f820 	bl	8008274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008234:	f7ff ff8a 	bl	800814c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008238:	f000 f9be 	bl	80085b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800823c:	f000 f992 	bl	8008564 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("APP Run\r\n");
 8008240:	480a      	ldr	r0, [pc, #40]	; (800826c <main+0x44>)
 8008242:	f001 fc6d 	bl	8009b20 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8008246:	2200      	movs	r2, #0
 8008248:	2120      	movs	r1, #32
 800824a:	4809      	ldr	r0, [pc, #36]	; (8008270 <main+0x48>)
 800824c:	f000 fd7a 	bl	8008d44 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8008250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008254:	f000 faec 	bl	8008830 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8008258:	2201      	movs	r2, #1
 800825a:	2120      	movs	r1, #32
 800825c:	4804      	ldr	r0, [pc, #16]	; (8008270 <main+0x48>)
 800825e:	f000 fd71 	bl	8008d44 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8008262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008266:	f000 fae3 	bl	8008830 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 800826a:	e7ec      	b.n	8008246 <main+0x1e>
 800826c:	0800a34c 	.word	0x0800a34c
 8008270:	40010800 	.word	0x40010800

08008274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b090      	sub	sp, #64	; 0x40
 8008278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800827a:	f107 0318 	add.w	r3, r7, #24
 800827e:	2228      	movs	r2, #40	; 0x28
 8008280:	2100      	movs	r1, #0
 8008282:	4618      	mov	r0, r3
 8008284:	f001 fbe8 	bl	8009a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	605a      	str	r2, [r3, #4]
 8008290:	609a      	str	r2, [r3, #8]
 8008292:	60da      	str	r2, [r3, #12]
 8008294:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008296:	2302      	movs	r3, #2
 8008298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800829a:	2301      	movs	r3, #1
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800829e:	2310      	movs	r3, #16
 80082a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80082a2:	2302      	movs	r3, #2
 80082a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80082a6:	2300      	movs	r3, #0
 80082a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80082aa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80082ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80082b0:	f107 0318 	add.w	r3, r7, #24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 fd7f 	bl	8008db8 <HAL_RCC_OscConfig>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80082c0:	f000 f819 	bl	80082f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80082c4:	230f      	movs	r3, #15
 80082c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082c8:	2302      	movs	r3, #2
 80082ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80082d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80082da:	1d3b      	adds	r3, r7, #4
 80082dc:	2102      	movs	r1, #2
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 ffea 	bl	80092b8 <HAL_RCC_ClockConfig>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80082ea:	f000 f804 	bl	80082f6 <Error_Handler>
  }
}
 80082ee:	bf00      	nop
 80082f0:	3740      	adds	r7, #64	; 0x40
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082f6:	b480      	push	{r7}
 80082f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80082fa:	bf00      	nop
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr
	...

08008304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800830a:	4b15      	ldr	r3, [pc, #84]	; (8008360 <HAL_MspInit+0x5c>)
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	4a14      	ldr	r2, [pc, #80]	; (8008360 <HAL_MspInit+0x5c>)
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	6193      	str	r3, [r2, #24]
 8008316:	4b12      	ldr	r3, [pc, #72]	; (8008360 <HAL_MspInit+0x5c>)
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	60bb      	str	r3, [r7, #8]
 8008320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <HAL_MspInit+0x5c>)
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	4a0e      	ldr	r2, [pc, #56]	; (8008360 <HAL_MspInit+0x5c>)
 8008328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800832c:	61d3      	str	r3, [r2, #28]
 800832e:	4b0c      	ldr	r3, [pc, #48]	; (8008360 <HAL_MspInit+0x5c>)
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008336:	607b      	str	r3, [r7, #4]
 8008338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800833a:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <HAL_MspInit+0x60>)
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	4a04      	ldr	r2, [pc, #16]	; (8008364 <HAL_MspInit+0x60>)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	bc80      	pop	{r7}
 800835e:	4770      	bx	lr
 8008360:	40021000 	.word	0x40021000
 8008364:	40010000 	.word	0x40010000

08008368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008368:	b480      	push	{r7}
 800836a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800836c:	bf00      	nop
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr

08008374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008378:	e7fe      	b.n	8008378 <HardFault_Handler+0x4>

0800837a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800837a:	b480      	push	{r7}
 800837c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800837e:	e7fe      	b.n	800837e <MemManage_Handler+0x4>

08008380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008384:	e7fe      	b.n	8008384 <BusFault_Handler+0x4>

08008386 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008386:	b480      	push	{r7}
 8008388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800838a:	e7fe      	b.n	800838a <UsageFault_Handler+0x4>

0800838c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008390:	bf00      	nop
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr

08008398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800839c:	bf00      	nop
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr

080083a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083a8:	bf00      	nop
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr

080083b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083b4:	f000 fa20 	bl	80087f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083b8:	bf00      	nop
 80083ba:	bd80      	pop	{r7, pc}

080083bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80083c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80083c4:	f000 fcd6 	bl	8008d74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80083c8:	bf00      	nop
 80083ca:	bd80      	pop	{r7, pc}

080083cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	e00a      	b.n	80083f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80083de:	f3af 8000 	nop.w
 80083e2:	4601      	mov	r1, r0
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	1c5a      	adds	r2, r3, #1
 80083e8:	60ba      	str	r2, [r7, #8]
 80083ea:	b2ca      	uxtb	r2, r1
 80083ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	3301      	adds	r3, #1
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	dbf0      	blt.n	80083de <_read+0x12>
	}

return len;
 80083fc:	687b      	ldr	r3, [r7, #4]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b086      	sub	sp, #24
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e009      	b.n	800842c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	60ba      	str	r2, [r7, #8]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4618      	mov	r0, r3
 8008422:	f000 f96b 	bl	80086fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	3301      	adds	r3, #1
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	429a      	cmp	r2, r3
 8008432:	dbf1      	blt.n	8008418 <_write+0x12>
	}
	return len;
 8008434:	687b      	ldr	r3, [r7, #4]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <_close>:

int _close(int file)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
	return -1;
 8008446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	bc80      	pop	{r7}
 8008452:	4770      	bx	lr

08008454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008464:	605a      	str	r2, [r3, #4]
	return 0;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	bc80      	pop	{r7}
 8008470:	4770      	bx	lr

08008472 <_isatty>:

int _isatty(int file)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
	return 1;
 800847a:	2301      	movs	r3, #1
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	bc80      	pop	{r7}
 8008484:	4770      	bx	lr

08008486 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	607a      	str	r2, [r7, #4]
	return 0;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	bc80      	pop	{r7}
 800849c:	4770      	bx	lr
	...

080084a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80084a8:	4b11      	ldr	r3, [pc, #68]	; (80084f0 <_sbrk+0x50>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d102      	bne.n	80084b6 <_sbrk+0x16>
		heap_end = &end;
 80084b0:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <_sbrk+0x50>)
 80084b2:	4a10      	ldr	r2, [pc, #64]	; (80084f4 <_sbrk+0x54>)
 80084b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80084b6:	4b0e      	ldr	r3, [pc, #56]	; (80084f0 <_sbrk+0x50>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80084bc:	4b0c      	ldr	r3, [pc, #48]	; (80084f0 <_sbrk+0x50>)
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4413      	add	r3, r2
 80084c4:	466a      	mov	r2, sp
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d907      	bls.n	80084da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80084ca:	f001 fa9b 	bl	8009a04 <__errno>
 80084ce:	4602      	mov	r2, r0
 80084d0:	230c      	movs	r3, #12
 80084d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80084d4:	f04f 33ff 	mov.w	r3, #4294967295
 80084d8:	e006      	b.n	80084e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80084da:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <_sbrk+0x50>)
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	4a03      	ldr	r2, [pc, #12]	; (80084f0 <_sbrk+0x50>)
 80084e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80084e6:	68fb      	ldr	r3, [r7, #12]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	2000008c 	.word	0x2000008c
 80084f4:	20000120 	.word	0x20000120

080084f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80084f8:	b480      	push	{r7}
 80084fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80084fc:	4b15      	ldr	r3, [pc, #84]	; (8008554 <SystemInit+0x5c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a14      	ldr	r2, [pc, #80]	; (8008554 <SystemInit+0x5c>)
 8008502:	f043 0301 	orr.w	r3, r3, #1
 8008506:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008508:	4b12      	ldr	r3, [pc, #72]	; (8008554 <SystemInit+0x5c>)
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	4911      	ldr	r1, [pc, #68]	; (8008554 <SystemInit+0x5c>)
 800850e:	4b12      	ldr	r3, [pc, #72]	; (8008558 <SystemInit+0x60>)
 8008510:	4013      	ands	r3, r2
 8008512:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008514:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <SystemInit+0x5c>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a0e      	ldr	r2, [pc, #56]	; (8008554 <SystemInit+0x5c>)
 800851a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800851e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008522:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008524:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <SystemInit+0x5c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a0a      	ldr	r2, [pc, #40]	; (8008554 <SystemInit+0x5c>)
 800852a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800852e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008530:	4b08      	ldr	r3, [pc, #32]	; (8008554 <SystemInit+0x5c>)
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	4a07      	ldr	r2, [pc, #28]	; (8008554 <SystemInit+0x5c>)
 8008536:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800853a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800853c:	4b05      	ldr	r3, [pc, #20]	; (8008554 <SystemInit+0x5c>)
 800853e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008542:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <SystemInit+0x64>)
 8008546:	4a06      	ldr	r2, [pc, #24]	; (8008560 <SystemInit+0x68>)
 8008548:	609a      	str	r2, [r3, #8]
#endif 
}
 800854a:	bf00      	nop
 800854c:	46bd      	mov	sp, r7
 800854e:	bc80      	pop	{r7}
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	40021000 	.word	0x40021000
 8008558:	f8ff0000 	.word	0xf8ff0000
 800855c:	e000ed00 	.word	0xe000ed00
 8008560:	08008000 	.word	0x08008000

08008564 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008568:	4b11      	ldr	r3, [pc, #68]	; (80085b0 <MX_USART1_UART_Init+0x4c>)
 800856a:	4a12      	ldr	r2, [pc, #72]	; (80085b4 <MX_USART1_UART_Init+0x50>)
 800856c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800856e:	4b10      	ldr	r3, [pc, #64]	; (80085b0 <MX_USART1_UART_Init+0x4c>)
 8008570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008576:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <MX_USART1_UART_Init+0x4c>)
 8008578:	2200      	movs	r2, #0
 800857a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800857c:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <MX_USART1_UART_Init+0x4c>)
 800857e:	2200      	movs	r2, #0
 8008580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008582:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <MX_USART1_UART_Init+0x4c>)
 8008584:	2200      	movs	r2, #0
 8008586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008588:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <MX_USART1_UART_Init+0x4c>)
 800858a:	220c      	movs	r2, #12
 800858c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800858e:	4b08      	ldr	r3, [pc, #32]	; (80085b0 <MX_USART1_UART_Init+0x4c>)
 8008590:	2200      	movs	r2, #0
 8008592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008594:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <MX_USART1_UART_Init+0x4c>)
 8008596:	2200      	movs	r2, #0
 8008598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800859a:	4805      	ldr	r0, [pc, #20]	; (80085b0 <MX_USART1_UART_Init+0x4c>)
 800859c:	f001 f828 	bl	80095f0 <HAL_UART_Init>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80085a6:	f7ff fea6 	bl	80082f6 <Error_Handler>
  }

}
 80085aa:	bf00      	nop
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000098 	.word	0x20000098
 80085b4:	40013800 	.word	0x40013800

080085b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80085bc:	4b11      	ldr	r3, [pc, #68]	; (8008604 <MX_USART2_UART_Init+0x4c>)
 80085be:	4a12      	ldr	r2, [pc, #72]	; (8008608 <MX_USART2_UART_Init+0x50>)
 80085c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80085c2:	4b10      	ldr	r3, [pc, #64]	; (8008604 <MX_USART2_UART_Init+0x4c>)
 80085c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80085c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80085ca:	4b0e      	ldr	r3, [pc, #56]	; (8008604 <MX_USART2_UART_Init+0x4c>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80085d0:	4b0c      	ldr	r3, [pc, #48]	; (8008604 <MX_USART2_UART_Init+0x4c>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <MX_USART2_UART_Init+0x4c>)
 80085d8:	2200      	movs	r2, #0
 80085da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80085dc:	4b09      	ldr	r3, [pc, #36]	; (8008604 <MX_USART2_UART_Init+0x4c>)
 80085de:	220c      	movs	r2, #12
 80085e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085e2:	4b08      	ldr	r3, [pc, #32]	; (8008604 <MX_USART2_UART_Init+0x4c>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80085e8:	4b06      	ldr	r3, [pc, #24]	; (8008604 <MX_USART2_UART_Init+0x4c>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80085ee:	4805      	ldr	r0, [pc, #20]	; (8008604 <MX_USART2_UART_Init+0x4c>)
 80085f0:	f000 fffe 	bl	80095f0 <HAL_UART_Init>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d001      	beq.n	80085fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80085fa:	f7ff fe7c 	bl	80082f6 <Error_Handler>
  }

}
 80085fe:	bf00      	nop
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	200000d8 	.word	0x200000d8
 8008608:	40004400 	.word	0x40004400

0800860c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08a      	sub	sp, #40	; 0x28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008614:	f107 0318 	add.w	r3, r7, #24
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	605a      	str	r2, [r3, #4]
 800861e:	609a      	str	r2, [r3, #8]
 8008620:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a31      	ldr	r2, [pc, #196]	; (80086ec <HAL_UART_MspInit+0xe0>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d132      	bne.n	8008692 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800862c:	4b30      	ldr	r3, [pc, #192]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	4a2f      	ldr	r2, [pc, #188]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 8008632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008636:	6193      	str	r3, [r2, #24]
 8008638:	4b2d      	ldr	r3, [pc, #180]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008640:	617b      	str	r3, [r7, #20]
 8008642:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008644:	4b2a      	ldr	r3, [pc, #168]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	4a29      	ldr	r2, [pc, #164]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 800864a:	f043 0304 	orr.w	r3, r3, #4
 800864e:	6193      	str	r3, [r2, #24]
 8008650:	4b27      	ldr	r3, [pc, #156]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f003 0304 	and.w	r3, r3, #4
 8008658:	613b      	str	r3, [r7, #16]
 800865a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800865c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008662:	2302      	movs	r3, #2
 8008664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008666:	2303      	movs	r3, #3
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800866a:	f107 0318 	add.w	r3, r7, #24
 800866e:	4619      	mov	r1, r3
 8008670:	4820      	ldr	r0, [pc, #128]	; (80086f4 <HAL_UART_MspInit+0xe8>)
 8008672:	f000 fa0d 	bl	8008a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800867a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800867c:	2300      	movs	r3, #0
 800867e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008680:	2300      	movs	r3, #0
 8008682:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008684:	f107 0318 	add.w	r3, r7, #24
 8008688:	4619      	mov	r1, r3
 800868a:	481a      	ldr	r0, [pc, #104]	; (80086f4 <HAL_UART_MspInit+0xe8>)
 800868c:	f000 fa00 	bl	8008a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008690:	e028      	b.n	80086e4 <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART2)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a18      	ldr	r2, [pc, #96]	; (80086f8 <HAL_UART_MspInit+0xec>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d123      	bne.n	80086e4 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800869c:	4b14      	ldr	r3, [pc, #80]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	4a13      	ldr	r2, [pc, #76]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 80086a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086a6:	61d3      	str	r3, [r2, #28]
 80086a8:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086b4:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 80086ba:	f043 0304 	orr.w	r3, r3, #4
 80086be:	6193      	str	r3, [r2, #24]
 80086c0:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <HAL_UART_MspInit+0xe4>)
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	60bb      	str	r3, [r7, #8]
 80086ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80086cc:	230c      	movs	r3, #12
 80086ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086d0:	2302      	movs	r3, #2
 80086d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086d4:	2302      	movs	r3, #2
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d8:	f107 0318 	add.w	r3, r7, #24
 80086dc:	4619      	mov	r1, r3
 80086de:	4805      	ldr	r0, [pc, #20]	; (80086f4 <HAL_UART_MspInit+0xe8>)
 80086e0:	f000 f9d6 	bl	8008a90 <HAL_GPIO_Init>
}
 80086e4:	bf00      	nop
 80086e6:	3728      	adds	r7, #40	; 0x28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	40013800 	.word	0x40013800
 80086f0:	40021000 	.word	0x40021000
 80086f4:	40010800 	.word	0x40010800
 80086f8:	40004400 	.word	0x40004400

080086fc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8008704:	1d39      	adds	r1, r7, #4
 8008706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800870a:	2201      	movs	r2, #1
 800870c:	4803      	ldr	r0, [pc, #12]	; (800871c <__io_putchar+0x20>)
 800870e:	f000 ffbc 	bl	800968a <HAL_UART_Transmit>
  return ch;
 8008712:	687b      	ldr	r3, [r7, #4]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	20000098 	.word	0x20000098

08008720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008720:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008722:	e003      	b.n	800872c <LoopCopyDataInit>

08008724 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008724:	4b0b      	ldr	r3, [pc, #44]	; (8008754 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8008726:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008728:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800872a:	3104      	adds	r1, #4

0800872c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800872c:	480a      	ldr	r0, [pc, #40]	; (8008758 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800872e:	4b0b      	ldr	r3, [pc, #44]	; (800875c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008730:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008732:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008734:	d3f6      	bcc.n	8008724 <CopyDataInit>
  ldr r2, =_sbss
 8008736:	4a0a      	ldr	r2, [pc, #40]	; (8008760 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008738:	e002      	b.n	8008740 <LoopFillZerobss>

0800873a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800873a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800873c:	f842 3b04 	str.w	r3, [r2], #4

08008740 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008740:	4b08      	ldr	r3, [pc, #32]	; (8008764 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008742:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008744:	d3f9      	bcc.n	800873a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008746:	f7ff fed7 	bl	80084f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800874a:	f001 f961 	bl	8009a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800874e:	f7ff fd6b 	bl	8008228 <main>
  bx lr
 8008752:	4770      	bx	lr
  ldr r3, =_sidata
 8008754:	0800a3f0 	.word	0x0800a3f0
  ldr r0, =_sdata
 8008758:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800875c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8008760:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8008764:	20000120 	.word	0x20000120

08008768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008768:	e7fe      	b.n	8008768 <ADC1_2_IRQHandler>
	...

0800876c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008770:	4b08      	ldr	r3, [pc, #32]	; (8008794 <HAL_Init+0x28>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a07      	ldr	r2, [pc, #28]	; (8008794 <HAL_Init+0x28>)
 8008776:	f043 0310 	orr.w	r3, r3, #16
 800877a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800877c:	2003      	movs	r0, #3
 800877e:	f000 f945 	bl	8008a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008782:	2000      	movs	r0, #0
 8008784:	f000 f808 	bl	8008798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008788:	f7ff fdbc 	bl	8008304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	40022000 	.word	0x40022000

08008798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80087a0:	4b12      	ldr	r3, [pc, #72]	; (80087ec <HAL_InitTick+0x54>)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	4b12      	ldr	r3, [pc, #72]	; (80087f0 <HAL_InitTick+0x58>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	4619      	mov	r1, r3
 80087aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80087b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 f95d 	bl	8008a76 <HAL_SYSTICK_Config>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e00e      	b.n	80087e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b0f      	cmp	r3, #15
 80087ca:	d80a      	bhi.n	80087e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087cc:	2200      	movs	r2, #0
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	f000 f925 	bl	8008a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087d8:	4a06      	ldr	r2, [pc, #24]	; (80087f4 <HAL_InitTick+0x5c>)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	e000      	b.n	80087e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	20000000 	.word	0x20000000
 80087f0:	20000008 	.word	0x20000008
 80087f4:	20000004 	.word	0x20000004

080087f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <HAL_IncTick+0x1c>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	461a      	mov	r2, r3
 8008802:	4b05      	ldr	r3, [pc, #20]	; (8008818 <HAL_IncTick+0x20>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4413      	add	r3, r2
 8008808:	4a03      	ldr	r2, [pc, #12]	; (8008818 <HAL_IncTick+0x20>)
 800880a:	6013      	str	r3, [r2, #0]
}
 800880c:	bf00      	nop
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr
 8008814:	20000008 	.word	0x20000008
 8008818:	20000118 	.word	0x20000118

0800881c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  return uwTick;
 8008820:	4b02      	ldr	r3, [pc, #8]	; (800882c <HAL_GetTick+0x10>)
 8008822:	681b      	ldr	r3, [r3, #0]
}
 8008824:	4618      	mov	r0, r3
 8008826:	46bd      	mov	sp, r7
 8008828:	bc80      	pop	{r7}
 800882a:	4770      	bx	lr
 800882c:	20000118 	.word	0x20000118

08008830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008838:	f7ff fff0 	bl	800881c <HAL_GetTick>
 800883c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008848:	d005      	beq.n	8008856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800884a:	4b09      	ldr	r3, [pc, #36]	; (8008870 <HAL_Delay+0x40>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008856:	bf00      	nop
 8008858:	f7ff ffe0 	bl	800881c <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	429a      	cmp	r2, r3
 8008866:	d8f7      	bhi.n	8008858 <HAL_Delay+0x28>
  {
  }
}
 8008868:	bf00      	nop
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	20000008 	.word	0x20000008

08008874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008884:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <__NVIC_SetPriorityGrouping+0x44>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008890:	4013      	ands	r3, r2
 8008892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800889c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80088a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80088a6:	4a04      	ldr	r2, [pc, #16]	; (80088b8 <__NVIC_SetPriorityGrouping+0x44>)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	60d3      	str	r3, [r2, #12]
}
 80088ac:	bf00      	nop
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	e000ed00 	.word	0xe000ed00

080088bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088c0:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <__NVIC_GetPriorityGrouping+0x18>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	0a1b      	lsrs	r3, r3, #8
 80088c6:	f003 0307 	and.w	r3, r3, #7
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	e000ed00 	.word	0xe000ed00

080088d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	db0b      	blt.n	8008902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	f003 021f 	and.w	r2, r3, #31
 80088f0:	4906      	ldr	r1, [pc, #24]	; (800890c <__NVIC_EnableIRQ+0x34>)
 80088f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088f6:	095b      	lsrs	r3, r3, #5
 80088f8:	2001      	movs	r0, #1
 80088fa:	fa00 f202 	lsl.w	r2, r0, r2
 80088fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008902:	bf00      	nop
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	bc80      	pop	{r7}
 800890a:	4770      	bx	lr
 800890c:	e000e100 	.word	0xe000e100

08008910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	6039      	str	r1, [r7, #0]
 800891a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800891c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008920:	2b00      	cmp	r3, #0
 8008922:	db0a      	blt.n	800893a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	b2da      	uxtb	r2, r3
 8008928:	490c      	ldr	r1, [pc, #48]	; (800895c <__NVIC_SetPriority+0x4c>)
 800892a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800892e:	0112      	lsls	r2, r2, #4
 8008930:	b2d2      	uxtb	r2, r2
 8008932:	440b      	add	r3, r1
 8008934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008938:	e00a      	b.n	8008950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	b2da      	uxtb	r2, r3
 800893e:	4908      	ldr	r1, [pc, #32]	; (8008960 <__NVIC_SetPriority+0x50>)
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	3b04      	subs	r3, #4
 8008948:	0112      	lsls	r2, r2, #4
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	440b      	add	r3, r1
 800894e:	761a      	strb	r2, [r3, #24]
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	bc80      	pop	{r7}
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	e000e100 	.word	0xe000e100
 8008960:	e000ed00 	.word	0xe000ed00

08008964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008964:	b480      	push	{r7}
 8008966:	b089      	sub	sp, #36	; 0x24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	f1c3 0307 	rsb	r3, r3, #7
 800897e:	2b04      	cmp	r3, #4
 8008980:	bf28      	it	cs
 8008982:	2304      	movcs	r3, #4
 8008984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	3304      	adds	r3, #4
 800898a:	2b06      	cmp	r3, #6
 800898c:	d902      	bls.n	8008994 <NVIC_EncodePriority+0x30>
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	3b03      	subs	r3, #3
 8008992:	e000      	b.n	8008996 <NVIC_EncodePriority+0x32>
 8008994:	2300      	movs	r3, #0
 8008996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008998:	f04f 32ff 	mov.w	r2, #4294967295
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	fa02 f303 	lsl.w	r3, r2, r3
 80089a2:	43da      	mvns	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	401a      	ands	r2, r3
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089ac:	f04f 31ff 	mov.w	r1, #4294967295
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	fa01 f303 	lsl.w	r3, r1, r3
 80089b6:	43d9      	mvns	r1, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089bc:	4313      	orrs	r3, r2
         );
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3724      	adds	r7, #36	; 0x24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089d8:	d301      	bcc.n	80089de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80089da:	2301      	movs	r3, #1
 80089dc:	e00f      	b.n	80089fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089de:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <SysTick_Config+0x40>)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80089e6:	210f      	movs	r1, #15
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	f7ff ff90 	bl	8008910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089f0:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <SysTick_Config+0x40>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089f6:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <SysTick_Config+0x40>)
 80089f8:	2207      	movs	r2, #7
 80089fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	e000e010 	.word	0xe000e010

08008a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff ff2d 	bl	8008874 <__NVIC_SetPriorityGrouping>
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b086      	sub	sp, #24
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	4603      	mov	r3, r0
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a34:	f7ff ff42 	bl	80088bc <__NVIC_GetPriorityGrouping>
 8008a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	6978      	ldr	r0, [r7, #20]
 8008a40:	f7ff ff90 	bl	8008964 <NVIC_EncodePriority>
 8008a44:	4602      	mov	r2, r0
 8008a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff ff5f 	bl	8008910 <__NVIC_SetPriority>
}
 8008a52:	bf00      	nop
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	4603      	mov	r3, r0
 8008a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff ff35 	bl	80088d8 <__NVIC_EnableIRQ>
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff ffa2 	bl	80089c8 <SysTick_Config>
 8008a84:	4603      	mov	r3, r0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b08b      	sub	sp, #44	; 0x2c
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008aa2:	e127      	b.n	8008cf4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69fa      	ldr	r2, [r7, #28]
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	f040 8116 	bne.w	8008cee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	2b12      	cmp	r3, #18
 8008ac8:	d034      	beq.n	8008b34 <HAL_GPIO_Init+0xa4>
 8008aca:	2b12      	cmp	r3, #18
 8008acc:	d80d      	bhi.n	8008aea <HAL_GPIO_Init+0x5a>
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d02b      	beq.n	8008b2a <HAL_GPIO_Init+0x9a>
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d804      	bhi.n	8008ae0 <HAL_GPIO_Init+0x50>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d031      	beq.n	8008b3e <HAL_GPIO_Init+0xae>
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d01c      	beq.n	8008b18 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008ade:	e048      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d043      	beq.n	8008b6c <HAL_GPIO_Init+0xdc>
 8008ae4:	2b11      	cmp	r3, #17
 8008ae6:	d01b      	beq.n	8008b20 <HAL_GPIO_Init+0x90>
          break;
 8008ae8:	e043      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008aea:	4a89      	ldr	r2, [pc, #548]	; (8008d10 <HAL_GPIO_Init+0x280>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d026      	beq.n	8008b3e <HAL_GPIO_Init+0xae>
 8008af0:	4a87      	ldr	r2, [pc, #540]	; (8008d10 <HAL_GPIO_Init+0x280>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d806      	bhi.n	8008b04 <HAL_GPIO_Init+0x74>
 8008af6:	4a87      	ldr	r2, [pc, #540]	; (8008d14 <HAL_GPIO_Init+0x284>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d020      	beq.n	8008b3e <HAL_GPIO_Init+0xae>
 8008afc:	4a86      	ldr	r2, [pc, #536]	; (8008d18 <HAL_GPIO_Init+0x288>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d01d      	beq.n	8008b3e <HAL_GPIO_Init+0xae>
          break;
 8008b02:	e036      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008b04:	4a85      	ldr	r2, [pc, #532]	; (8008d1c <HAL_GPIO_Init+0x28c>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d019      	beq.n	8008b3e <HAL_GPIO_Init+0xae>
 8008b0a:	4a85      	ldr	r2, [pc, #532]	; (8008d20 <HAL_GPIO_Init+0x290>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d016      	beq.n	8008b3e <HAL_GPIO_Init+0xae>
 8008b10:	4a84      	ldr	r2, [pc, #528]	; (8008d24 <HAL_GPIO_Init+0x294>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d013      	beq.n	8008b3e <HAL_GPIO_Init+0xae>
          break;
 8008b16:	e02c      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	623b      	str	r3, [r7, #32]
          break;
 8008b1e:	e028      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	3304      	adds	r3, #4
 8008b26:	623b      	str	r3, [r7, #32]
          break;
 8008b28:	e023      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	3308      	adds	r3, #8
 8008b30:	623b      	str	r3, [r7, #32]
          break;
 8008b32:	e01e      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	330c      	adds	r3, #12
 8008b3a:	623b      	str	r3, [r7, #32]
          break;
 8008b3c:	e019      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d102      	bne.n	8008b4c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008b46:	2304      	movs	r3, #4
 8008b48:	623b      	str	r3, [r7, #32]
          break;
 8008b4a:	e012      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d105      	bne.n	8008b60 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008b54:	2308      	movs	r3, #8
 8008b56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	611a      	str	r2, [r3, #16]
          break;
 8008b5e:	e008      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008b60:	2308      	movs	r3, #8
 8008b62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	69fa      	ldr	r2, [r7, #28]
 8008b68:	615a      	str	r2, [r3, #20]
          break;
 8008b6a:	e002      	b.n	8008b72 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	623b      	str	r3, [r7, #32]
          break;
 8008b70:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2bff      	cmp	r3, #255	; 0xff
 8008b76:	d801      	bhi.n	8008b7c <HAL_GPIO_Init+0xec>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	e001      	b.n	8008b80 <HAL_GPIO_Init+0xf0>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	2bff      	cmp	r3, #255	; 0xff
 8008b86:	d802      	bhi.n	8008b8e <HAL_GPIO_Init+0xfe>
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	e002      	b.n	8008b94 <HAL_GPIO_Init+0x104>
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b90:	3b08      	subs	r3, #8
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	210f      	movs	r1, #15
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba2:	43db      	mvns	r3, r3
 8008ba4:	401a      	ands	r2, r3
 8008ba6:	6a39      	ldr	r1, [r7, #32]
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	fa01 f303 	lsl.w	r3, r1, r3
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 8096 	beq.w	8008cee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008bc2:	4b59      	ldr	r3, [pc, #356]	; (8008d28 <HAL_GPIO_Init+0x298>)
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	4a58      	ldr	r2, [pc, #352]	; (8008d28 <HAL_GPIO_Init+0x298>)
 8008bc8:	f043 0301 	orr.w	r3, r3, #1
 8008bcc:	6193      	str	r3, [r2, #24]
 8008bce:	4b56      	ldr	r3, [pc, #344]	; (8008d28 <HAL_GPIO_Init+0x298>)
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	60bb      	str	r3, [r7, #8]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008bda:	4a54      	ldr	r2, [pc, #336]	; (8008d2c <HAL_GPIO_Init+0x29c>)
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	089b      	lsrs	r3, r3, #2
 8008be0:	3302      	adds	r3, #2
 8008be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008be6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	220f      	movs	r2, #15
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	43db      	mvns	r3, r3
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a4b      	ldr	r2, [pc, #300]	; (8008d30 <HAL_GPIO_Init+0x2a0>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d013      	beq.n	8008c2e <HAL_GPIO_Init+0x19e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a4a      	ldr	r2, [pc, #296]	; (8008d34 <HAL_GPIO_Init+0x2a4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d00d      	beq.n	8008c2a <HAL_GPIO_Init+0x19a>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a49      	ldr	r2, [pc, #292]	; (8008d38 <HAL_GPIO_Init+0x2a8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d007      	beq.n	8008c26 <HAL_GPIO_Init+0x196>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a48      	ldr	r2, [pc, #288]	; (8008d3c <HAL_GPIO_Init+0x2ac>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d101      	bne.n	8008c22 <HAL_GPIO_Init+0x192>
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e006      	b.n	8008c30 <HAL_GPIO_Init+0x1a0>
 8008c22:	2304      	movs	r3, #4
 8008c24:	e004      	b.n	8008c30 <HAL_GPIO_Init+0x1a0>
 8008c26:	2302      	movs	r3, #2
 8008c28:	e002      	b.n	8008c30 <HAL_GPIO_Init+0x1a0>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <HAL_GPIO_Init+0x1a0>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c32:	f002 0203 	and.w	r2, r2, #3
 8008c36:	0092      	lsls	r2, r2, #2
 8008c38:	4093      	lsls	r3, r2
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008c40:	493a      	ldr	r1, [pc, #232]	; (8008d2c <HAL_GPIO_Init+0x29c>)
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	089b      	lsrs	r3, r3, #2
 8008c46:	3302      	adds	r3, #2
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d006      	beq.n	8008c68 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008c5a:	4b39      	ldr	r3, [pc, #228]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4938      	ldr	r1, [pc, #224]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	600b      	str	r3, [r1, #0]
 8008c66:	e006      	b.n	8008c76 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008c68:	4b35      	ldr	r3, [pc, #212]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	43db      	mvns	r3, r3
 8008c70:	4933      	ldr	r1, [pc, #204]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008c72:	4013      	ands	r3, r2
 8008c74:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d006      	beq.n	8008c90 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008c82:	4b2f      	ldr	r3, [pc, #188]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	492e      	ldr	r1, [pc, #184]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	604b      	str	r3, [r1, #4]
 8008c8e:	e006      	b.n	8008c9e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008c90:	4b2b      	ldr	r3, [pc, #172]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	43db      	mvns	r3, r3
 8008c98:	4929      	ldr	r1, [pc, #164]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d006      	beq.n	8008cb8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008caa:	4b25      	ldr	r3, [pc, #148]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	4924      	ldr	r1, [pc, #144]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	608b      	str	r3, [r1, #8]
 8008cb6:	e006      	b.n	8008cc6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008cb8:	4b21      	ldr	r3, [pc, #132]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	491f      	ldr	r1, [pc, #124]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d006      	beq.n	8008ce0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008cd2:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008cd4:	68da      	ldr	r2, [r3, #12]
 8008cd6:	491a      	ldr	r1, [pc, #104]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60cb      	str	r3, [r1, #12]
 8008cde:	e006      	b.n	8008cee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008ce0:	4b17      	ldr	r3, [pc, #92]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	43db      	mvns	r3, r3
 8008ce8:	4915      	ldr	r1, [pc, #84]	; (8008d40 <HAL_GPIO_Init+0x2b0>)
 8008cea:	4013      	ands	r3, r2
 8008cec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f47f aed0 	bne.w	8008aa4 <HAL_GPIO_Init+0x14>
  }
}
 8008d04:	bf00      	nop
 8008d06:	372c      	adds	r7, #44	; 0x2c
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	10210000 	.word	0x10210000
 8008d14:	10110000 	.word	0x10110000
 8008d18:	10120000 	.word	0x10120000
 8008d1c:	10310000 	.word	0x10310000
 8008d20:	10320000 	.word	0x10320000
 8008d24:	10220000 	.word	0x10220000
 8008d28:	40021000 	.word	0x40021000
 8008d2c:	40010000 	.word	0x40010000
 8008d30:	40010800 	.word	0x40010800
 8008d34:	40010c00 	.word	0x40010c00
 8008d38:	40011000 	.word	0x40011000
 8008d3c:	40011400 	.word	0x40011400
 8008d40:	40010400 	.word	0x40010400

08008d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	807b      	strh	r3, [r7, #2]
 8008d50:	4613      	mov	r3, r2
 8008d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d54:	787b      	ldrb	r3, [r7, #1]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d5a:	887a      	ldrh	r2, [r7, #2]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008d60:	e003      	b.n	8008d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008d62:	887b      	ldrh	r3, [r7, #2]
 8008d64:	041a      	lsls	r2, r3, #16
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	611a      	str	r2, [r3, #16]
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bc80      	pop	{r7}
 8008d72:	4770      	bx	lr

08008d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008d7e:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d80:	695a      	ldr	r2, [r3, #20]
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	4013      	ands	r3, r2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d006      	beq.n	8008d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d8a:	4a05      	ldr	r2, [pc, #20]	; (8008da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d8c:	88fb      	ldrh	r3, [r7, #6]
 8008d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008d90:	88fb      	ldrh	r3, [r7, #6]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f806 	bl	8008da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40010400 	.word	0x40010400

08008da4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	4603      	mov	r3, r0
 8008dac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bc80      	pop	{r7}
 8008db6:	4770      	bx	lr

08008db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e26c      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 8087 	beq.w	8008ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008dd8:	4b92      	ldr	r3, [pc, #584]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f003 030c 	and.w	r3, r3, #12
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d00c      	beq.n	8008dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008de4:	4b8f      	ldr	r3, [pc, #572]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f003 030c 	and.w	r3, r3, #12
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d112      	bne.n	8008e16 <HAL_RCC_OscConfig+0x5e>
 8008df0:	4b8c      	ldr	r3, [pc, #560]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dfc:	d10b      	bne.n	8008e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dfe:	4b89      	ldr	r3, [pc, #548]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d06c      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x12c>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d168      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e246      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e1e:	d106      	bne.n	8008e2e <HAL_RCC_OscConfig+0x76>
 8008e20:	4b80      	ldr	r3, [pc, #512]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a7f      	ldr	r2, [pc, #508]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	e02e      	b.n	8008e8c <HAL_RCC_OscConfig+0xd4>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10c      	bne.n	8008e50 <HAL_RCC_OscConfig+0x98>
 8008e36:	4b7b      	ldr	r3, [pc, #492]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a7a      	ldr	r2, [pc, #488]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	4b78      	ldr	r3, [pc, #480]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a77      	ldr	r2, [pc, #476]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	e01d      	b.n	8008e8c <HAL_RCC_OscConfig+0xd4>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e58:	d10c      	bne.n	8008e74 <HAL_RCC_OscConfig+0xbc>
 8008e5a:	4b72      	ldr	r3, [pc, #456]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a71      	ldr	r2, [pc, #452]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	4b6f      	ldr	r3, [pc, #444]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a6e      	ldr	r2, [pc, #440]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	e00b      	b.n	8008e8c <HAL_RCC_OscConfig+0xd4>
 8008e74:	4b6b      	ldr	r3, [pc, #428]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a6a      	ldr	r2, [pc, #424]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	4b68      	ldr	r3, [pc, #416]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a67      	ldr	r2, [pc, #412]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d013      	beq.n	8008ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e94:	f7ff fcc2 	bl	800881c <HAL_GetTick>
 8008e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e9a:	e008      	b.n	8008eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e9c:	f7ff fcbe 	bl	800881c <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	2b64      	cmp	r3, #100	; 0x64
 8008ea8:	d901      	bls.n	8008eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e1fa      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eae:	4b5d      	ldr	r3, [pc, #372]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0f0      	beq.n	8008e9c <HAL_RCC_OscConfig+0xe4>
 8008eba:	e014      	b.n	8008ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ebc:	f7ff fcae 	bl	800881c <HAL_GetTick>
 8008ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ec2:	e008      	b.n	8008ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ec4:	f7ff fcaa 	bl	800881c <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b64      	cmp	r3, #100	; 0x64
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e1e6      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ed6:	4b53      	ldr	r3, [pc, #332]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1f0      	bne.n	8008ec4 <HAL_RCC_OscConfig+0x10c>
 8008ee2:	e000      	b.n	8008ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d063      	beq.n	8008fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ef2:	4b4c      	ldr	r3, [pc, #304]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f003 030c 	and.w	r3, r3, #12
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008efe:	4b49      	ldr	r3, [pc, #292]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f003 030c 	and.w	r3, r3, #12
 8008f06:	2b08      	cmp	r3, #8
 8008f08:	d11c      	bne.n	8008f44 <HAL_RCC_OscConfig+0x18c>
 8008f0a:	4b46      	ldr	r3, [pc, #280]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d116      	bne.n	8008f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f16:	4b43      	ldr	r3, [pc, #268]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d005      	beq.n	8008f2e <HAL_RCC_OscConfig+0x176>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d001      	beq.n	8008f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e1ba      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f2e:	4b3d      	ldr	r3, [pc, #244]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	4939      	ldr	r1, [pc, #228]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f42:	e03a      	b.n	8008fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d020      	beq.n	8008f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f4c:	4b36      	ldr	r3, [pc, #216]	; (8009028 <HAL_RCC_OscConfig+0x270>)
 8008f4e:	2201      	movs	r2, #1
 8008f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f52:	f7ff fc63 	bl	800881c <HAL_GetTick>
 8008f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f58:	e008      	b.n	8008f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f5a:	f7ff fc5f 	bl	800881c <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d901      	bls.n	8008f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e19b      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f6c:	4b2d      	ldr	r3, [pc, #180]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d0f0      	beq.n	8008f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f78:	4b2a      	ldr	r3, [pc, #168]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	4927      	ldr	r1, [pc, #156]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	600b      	str	r3, [r1, #0]
 8008f8c:	e015      	b.n	8008fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f8e:	4b26      	ldr	r3, [pc, #152]	; (8009028 <HAL_RCC_OscConfig+0x270>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f94:	f7ff fc42 	bl	800881c <HAL_GetTick>
 8008f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f9a:	e008      	b.n	8008fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f9c:	f7ff fc3e 	bl	800881c <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d901      	bls.n	8008fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e17a      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fae:	4b1d      	ldr	r3, [pc, #116]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1f0      	bne.n	8008f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d03a      	beq.n	800903c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d019      	beq.n	8009002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fce:	4b17      	ldr	r3, [pc, #92]	; (800902c <HAL_RCC_OscConfig+0x274>)
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fd4:	f7ff fc22 	bl	800881c <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fda:	e008      	b.n	8008fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fdc:	f7ff fc1e 	bl	800881c <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e15a      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fee:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <HAL_RCC_OscConfig+0x26c>)
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0f0      	beq.n	8008fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	f000 fada 	bl	80095b4 <RCC_Delay>
 8009000:	e01c      	b.n	800903c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009002:	4b0a      	ldr	r3, [pc, #40]	; (800902c <HAL_RCC_OscConfig+0x274>)
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009008:	f7ff fc08 	bl	800881c <HAL_GetTick>
 800900c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800900e:	e00f      	b.n	8009030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009010:	f7ff fc04 	bl	800881c <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	2b02      	cmp	r3, #2
 800901c:	d908      	bls.n	8009030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e140      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
 8009022:	bf00      	nop
 8009024:	40021000 	.word	0x40021000
 8009028:	42420000 	.word	0x42420000
 800902c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009030:	4b9e      	ldr	r3, [pc, #632]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	f003 0302 	and.w	r3, r3, #2
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e9      	bne.n	8009010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 80a6 	beq.w	8009196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800904a:	2300      	movs	r3, #0
 800904c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800904e:	4b97      	ldr	r3, [pc, #604]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10d      	bne.n	8009076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800905a:	4b94      	ldr	r3, [pc, #592]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	4a93      	ldr	r2, [pc, #588]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009064:	61d3      	str	r3, [r2, #28]
 8009066:	4b91      	ldr	r3, [pc, #580]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800906e:	60bb      	str	r3, [r7, #8]
 8009070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009072:	2301      	movs	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009076:	4b8e      	ldr	r3, [pc, #568]	; (80092b0 <HAL_RCC_OscConfig+0x4f8>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907e:	2b00      	cmp	r3, #0
 8009080:	d118      	bne.n	80090b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009082:	4b8b      	ldr	r3, [pc, #556]	; (80092b0 <HAL_RCC_OscConfig+0x4f8>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a8a      	ldr	r2, [pc, #552]	; (80092b0 <HAL_RCC_OscConfig+0x4f8>)
 8009088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800908c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800908e:	f7ff fbc5 	bl	800881c <HAL_GetTick>
 8009092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009094:	e008      	b.n	80090a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009096:	f7ff fbc1 	bl	800881c <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b64      	cmp	r3, #100	; 0x64
 80090a2:	d901      	bls.n	80090a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e0fd      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090a8:	4b81      	ldr	r3, [pc, #516]	; (80092b0 <HAL_RCC_OscConfig+0x4f8>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0f0      	beq.n	8009096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d106      	bne.n	80090ca <HAL_RCC_OscConfig+0x312>
 80090bc:	4b7b      	ldr	r3, [pc, #492]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	4a7a      	ldr	r2, [pc, #488]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80090c2:	f043 0301 	orr.w	r3, r3, #1
 80090c6:	6213      	str	r3, [r2, #32]
 80090c8:	e02d      	b.n	8009126 <HAL_RCC_OscConfig+0x36e>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10c      	bne.n	80090ec <HAL_RCC_OscConfig+0x334>
 80090d2:	4b76      	ldr	r3, [pc, #472]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	4a75      	ldr	r2, [pc, #468]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80090d8:	f023 0301 	bic.w	r3, r3, #1
 80090dc:	6213      	str	r3, [r2, #32]
 80090de:	4b73      	ldr	r3, [pc, #460]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	4a72      	ldr	r2, [pc, #456]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80090e4:	f023 0304 	bic.w	r3, r3, #4
 80090e8:	6213      	str	r3, [r2, #32]
 80090ea:	e01c      	b.n	8009126 <HAL_RCC_OscConfig+0x36e>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	2b05      	cmp	r3, #5
 80090f2:	d10c      	bne.n	800910e <HAL_RCC_OscConfig+0x356>
 80090f4:	4b6d      	ldr	r3, [pc, #436]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	4a6c      	ldr	r2, [pc, #432]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80090fa:	f043 0304 	orr.w	r3, r3, #4
 80090fe:	6213      	str	r3, [r2, #32]
 8009100:	4b6a      	ldr	r3, [pc, #424]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	4a69      	ldr	r2, [pc, #420]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009106:	f043 0301 	orr.w	r3, r3, #1
 800910a:	6213      	str	r3, [r2, #32]
 800910c:	e00b      	b.n	8009126 <HAL_RCC_OscConfig+0x36e>
 800910e:	4b67      	ldr	r3, [pc, #412]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009110:	6a1b      	ldr	r3, [r3, #32]
 8009112:	4a66      	ldr	r2, [pc, #408]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009114:	f023 0301 	bic.w	r3, r3, #1
 8009118:	6213      	str	r3, [r2, #32]
 800911a:	4b64      	ldr	r3, [pc, #400]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	4a63      	ldr	r2, [pc, #396]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009120:	f023 0304 	bic.w	r3, r3, #4
 8009124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d015      	beq.n	800915a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800912e:	f7ff fb75 	bl	800881c <HAL_GetTick>
 8009132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009134:	e00a      	b.n	800914c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009136:	f7ff fb71 	bl	800881c <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	f241 3288 	movw	r2, #5000	; 0x1388
 8009144:	4293      	cmp	r3, r2
 8009146:	d901      	bls.n	800914c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e0ab      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800914c:	4b57      	ldr	r3, [pc, #348]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0ee      	beq.n	8009136 <HAL_RCC_OscConfig+0x37e>
 8009158:	e014      	b.n	8009184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800915a:	f7ff fb5f 	bl	800881c <HAL_GetTick>
 800915e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009160:	e00a      	b.n	8009178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009162:	f7ff fb5b 	bl	800881c <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009170:	4293      	cmp	r3, r2
 8009172:	d901      	bls.n	8009178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e095      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009178:	4b4c      	ldr	r3, [pc, #304]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1ee      	bne.n	8009162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d105      	bne.n	8009196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800918a:	4b48      	ldr	r3, [pc, #288]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	4a47      	ldr	r2, [pc, #284]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 8081 	beq.w	80092a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091a0:	4b42      	ldr	r3, [pc, #264]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f003 030c 	and.w	r3, r3, #12
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d061      	beq.n	8009270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d146      	bne.n	8009242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091b4:	4b3f      	ldr	r3, [pc, #252]	; (80092b4 <HAL_RCC_OscConfig+0x4fc>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091ba:	f7ff fb2f 	bl	800881c <HAL_GetTick>
 80091be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80091c0:	e008      	b.n	80091d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091c2:	f7ff fb2b 	bl	800881c <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d901      	bls.n	80091d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e067      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80091d4:	4b35      	ldr	r3, [pc, #212]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1f0      	bne.n	80091c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e8:	d108      	bne.n	80091fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80091ea:	4b30      	ldr	r3, [pc, #192]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	492d      	ldr	r1, [pc, #180]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80091fc:	4b2b      	ldr	r3, [pc, #172]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a19      	ldr	r1, [r3, #32]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920c:	430b      	orrs	r3, r1
 800920e:	4927      	ldr	r1, [pc, #156]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009210:	4313      	orrs	r3, r2
 8009212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009214:	4b27      	ldr	r3, [pc, #156]	; (80092b4 <HAL_RCC_OscConfig+0x4fc>)
 8009216:	2201      	movs	r2, #1
 8009218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800921a:	f7ff faff 	bl	800881c <HAL_GetTick>
 800921e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009220:	e008      	b.n	8009234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009222:	f7ff fafb 	bl	800881c <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e037      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009234:	4b1d      	ldr	r3, [pc, #116]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0f0      	beq.n	8009222 <HAL_RCC_OscConfig+0x46a>
 8009240:	e02f      	b.n	80092a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009242:	4b1c      	ldr	r3, [pc, #112]	; (80092b4 <HAL_RCC_OscConfig+0x4fc>)
 8009244:	2200      	movs	r2, #0
 8009246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009248:	f7ff fae8 	bl	800881c <HAL_GetTick>
 800924c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800924e:	e008      	b.n	8009262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009250:	f7ff fae4 	bl	800881c <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	2b02      	cmp	r3, #2
 800925c:	d901      	bls.n	8009262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e020      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009262:	4b12      	ldr	r3, [pc, #72]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1f0      	bne.n	8009250 <HAL_RCC_OscConfig+0x498>
 800926e:	e018      	b.n	80092a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e013      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800927c:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <HAL_RCC_OscConfig+0x4f4>)
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	429a      	cmp	r2, r3
 800928e:	d106      	bne.n	800929e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800929a:	429a      	cmp	r2, r3
 800929c:	d001      	beq.n	80092a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e000      	b.n	80092a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	40021000 	.word	0x40021000
 80092b0:	40007000 	.word	0x40007000
 80092b4:	42420060 	.word	0x42420060

080092b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e0d0      	b.n	800946e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80092cc:	4b6a      	ldr	r3, [pc, #424]	; (8009478 <HAL_RCC_ClockConfig+0x1c0>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0307 	and.w	r3, r3, #7
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d910      	bls.n	80092fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092da:	4b67      	ldr	r3, [pc, #412]	; (8009478 <HAL_RCC_ClockConfig+0x1c0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f023 0207 	bic.w	r2, r3, #7
 80092e2:	4965      	ldr	r1, [pc, #404]	; (8009478 <HAL_RCC_ClockConfig+0x1c0>)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ea:	4b63      	ldr	r3, [pc, #396]	; (8009478 <HAL_RCC_ClockConfig+0x1c0>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d001      	beq.n	80092fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e0b8      	b.n	800946e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d020      	beq.n	800934a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	d005      	beq.n	8009320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009314:	4b59      	ldr	r3, [pc, #356]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	4a58      	ldr	r2, [pc, #352]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 800931a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800931e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0308 	and.w	r3, r3, #8
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800932c:	4b53      	ldr	r3, [pc, #332]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	4a52      	ldr	r2, [pc, #328]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009332:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009336:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009338:	4b50      	ldr	r3, [pc, #320]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	494d      	ldr	r1, [pc, #308]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009346:	4313      	orrs	r3, r2
 8009348:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d040      	beq.n	80093d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d107      	bne.n	800936e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800935e:	4b47      	ldr	r3, [pc, #284]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d115      	bne.n	8009396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e07f      	b.n	800946e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d107      	bne.n	8009386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009376:	4b41      	ldr	r3, [pc, #260]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d109      	bne.n	8009396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e073      	b.n	800946e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009386:	4b3d      	ldr	r3, [pc, #244]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e06b      	b.n	800946e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009396:	4b39      	ldr	r3, [pc, #228]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f023 0203 	bic.w	r2, r3, #3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	4936      	ldr	r1, [pc, #216]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093a8:	f7ff fa38 	bl	800881c <HAL_GetTick>
 80093ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ae:	e00a      	b.n	80093c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093b0:	f7ff fa34 	bl	800881c <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80093be:	4293      	cmp	r3, r2
 80093c0:	d901      	bls.n	80093c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e053      	b.n	800946e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093c6:	4b2d      	ldr	r3, [pc, #180]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f003 020c 	and.w	r2, r3, #12
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d1eb      	bne.n	80093b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80093d8:	4b27      	ldr	r3, [pc, #156]	; (8009478 <HAL_RCC_ClockConfig+0x1c0>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0307 	and.w	r3, r3, #7
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d210      	bcs.n	8009408 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093e6:	4b24      	ldr	r3, [pc, #144]	; (8009478 <HAL_RCC_ClockConfig+0x1c0>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f023 0207 	bic.w	r2, r3, #7
 80093ee:	4922      	ldr	r1, [pc, #136]	; (8009478 <HAL_RCC_ClockConfig+0x1c0>)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093f6:	4b20      	ldr	r3, [pc, #128]	; (8009478 <HAL_RCC_ClockConfig+0x1c0>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d001      	beq.n	8009408 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e032      	b.n	800946e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d008      	beq.n	8009426 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009414:	4b19      	ldr	r3, [pc, #100]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	4916      	ldr	r1, [pc, #88]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009422:	4313      	orrs	r3, r2
 8009424:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0308 	and.w	r3, r3, #8
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009432:	4b12      	ldr	r3, [pc, #72]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	490e      	ldr	r1, [pc, #56]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 8009442:	4313      	orrs	r3, r2
 8009444:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009446:	f000 f821 	bl	800948c <HAL_RCC_GetSysClockFreq>
 800944a:	4601      	mov	r1, r0
 800944c:	4b0b      	ldr	r3, [pc, #44]	; (800947c <HAL_RCC_ClockConfig+0x1c4>)
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	091b      	lsrs	r3, r3, #4
 8009452:	f003 030f 	and.w	r3, r3, #15
 8009456:	4a0a      	ldr	r2, [pc, #40]	; (8009480 <HAL_RCC_ClockConfig+0x1c8>)
 8009458:	5cd3      	ldrb	r3, [r2, r3]
 800945a:	fa21 f303 	lsr.w	r3, r1, r3
 800945e:	4a09      	ldr	r2, [pc, #36]	; (8009484 <HAL_RCC_ClockConfig+0x1cc>)
 8009460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009462:	4b09      	ldr	r3, [pc, #36]	; (8009488 <HAL_RCC_ClockConfig+0x1d0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4618      	mov	r0, r3
 8009468:	f7ff f996 	bl	8008798 <HAL_InitTick>

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40022000 	.word	0x40022000
 800947c:	40021000 	.word	0x40021000
 8009480:	0800a36c 	.word	0x0800a36c
 8009484:	20000000 	.word	0x20000000
 8009488:	20000004 	.word	0x20000004

0800948c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800948c:	b490      	push	{r4, r7}
 800948e:	b08a      	sub	sp, #40	; 0x28
 8009490:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009492:	4b2a      	ldr	r3, [pc, #168]	; (800953c <HAL_RCC_GetSysClockFreq+0xb0>)
 8009494:	1d3c      	adds	r4, r7, #4
 8009496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800949c:	4b28      	ldr	r3, [pc, #160]	; (8009540 <HAL_RCC_GetSysClockFreq+0xb4>)
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	61fb      	str	r3, [r7, #28]
 80094a6:	2300      	movs	r3, #0
 80094a8:	61bb      	str	r3, [r7, #24]
 80094aa:	2300      	movs	r3, #0
 80094ac:	627b      	str	r3, [r7, #36]	; 0x24
 80094ae:	2300      	movs	r3, #0
 80094b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80094b6:	4b23      	ldr	r3, [pc, #140]	; (8009544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	f003 030c 	and.w	r3, r3, #12
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d002      	beq.n	80094cc <HAL_RCC_GetSysClockFreq+0x40>
 80094c6:	2b08      	cmp	r3, #8
 80094c8:	d003      	beq.n	80094d2 <HAL_RCC_GetSysClockFreq+0x46>
 80094ca:	e02d      	b.n	8009528 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80094cc:	4b1e      	ldr	r3, [pc, #120]	; (8009548 <HAL_RCC_GetSysClockFreq+0xbc>)
 80094ce:	623b      	str	r3, [r7, #32]
      break;
 80094d0:	e02d      	b.n	800952e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	0c9b      	lsrs	r3, r3, #18
 80094d6:	f003 030f 	and.w	r3, r3, #15
 80094da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80094de:	4413      	add	r3, r2
 80094e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80094e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d013      	beq.n	8009518 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80094f0:	4b14      	ldr	r3, [pc, #80]	; (8009544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	0c5b      	lsrs	r3, r3, #17
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80094fe:	4413      	add	r3, r2
 8009500:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009504:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	4a0f      	ldr	r2, [pc, #60]	; (8009548 <HAL_RCC_GetSysClockFreq+0xbc>)
 800950a:	fb02 f203 	mul.w	r2, r2, r3
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	fbb2 f3f3 	udiv	r3, r2, r3
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
 8009516:	e004      	b.n	8009522 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	4a0c      	ldr	r2, [pc, #48]	; (800954c <HAL_RCC_GetSysClockFreq+0xc0>)
 800951c:	fb02 f303 	mul.w	r3, r2, r3
 8009520:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	623b      	str	r3, [r7, #32]
      break;
 8009526:	e002      	b.n	800952e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009528:	4b07      	ldr	r3, [pc, #28]	; (8009548 <HAL_RCC_GetSysClockFreq+0xbc>)
 800952a:	623b      	str	r3, [r7, #32]
      break;
 800952c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800952e:	6a3b      	ldr	r3, [r7, #32]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3728      	adds	r7, #40	; 0x28
 8009534:	46bd      	mov	sp, r7
 8009536:	bc90      	pop	{r4, r7}
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	0800a358 	.word	0x0800a358
 8009540:	0800a368 	.word	0x0800a368
 8009544:	40021000 	.word	0x40021000
 8009548:	007a1200 	.word	0x007a1200
 800954c:	003d0900 	.word	0x003d0900

08009550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <HAL_RCC_GetHCLKFreq+0x10>)
 8009556:	681b      	ldr	r3, [r3, #0]
}
 8009558:	4618      	mov	r0, r3
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr
 8009560:	20000000 	.word	0x20000000

08009564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009568:	f7ff fff2 	bl	8009550 <HAL_RCC_GetHCLKFreq>
 800956c:	4601      	mov	r1, r0
 800956e:	4b05      	ldr	r3, [pc, #20]	; (8009584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	f003 0307 	and.w	r3, r3, #7
 8009578:	4a03      	ldr	r2, [pc, #12]	; (8009588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800957a:	5cd3      	ldrb	r3, [r2, r3]
 800957c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009580:	4618      	mov	r0, r3
 8009582:	bd80      	pop	{r7, pc}
 8009584:	40021000 	.word	0x40021000
 8009588:	0800a37c 	.word	0x0800a37c

0800958c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009590:	f7ff ffde 	bl	8009550 <HAL_RCC_GetHCLKFreq>
 8009594:	4601      	mov	r1, r0
 8009596:	4b05      	ldr	r3, [pc, #20]	; (80095ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	0adb      	lsrs	r3, r3, #11
 800959c:	f003 0307 	and.w	r3, r3, #7
 80095a0:	4a03      	ldr	r2, [pc, #12]	; (80095b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095a2:	5cd3      	ldrb	r3, [r2, r3]
 80095a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	40021000 	.word	0x40021000
 80095b0:	0800a37c 	.word	0x0800a37c

080095b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <RCC_Delay+0x34>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a0a      	ldr	r2, [pc, #40]	; (80095ec <RCC_Delay+0x38>)
 80095c2:	fba2 2303 	umull	r2, r3, r2, r3
 80095c6:	0a5b      	lsrs	r3, r3, #9
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	fb02 f303 	mul.w	r3, r2, r3
 80095ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80095d0:	bf00      	nop
  }
  while (Delay --);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	1e5a      	subs	r2, r3, #1
 80095d6:	60fa      	str	r2, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1f9      	bne.n	80095d0 <RCC_Delay+0x1c>
}
 80095dc:	bf00      	nop
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bc80      	pop	{r7}
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	20000000 	.word	0x20000000
 80095ec:	10624dd3 	.word	0x10624dd3

080095f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e03f      	b.n	8009682 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7fe fff8 	bl	800860c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2224      	movs	r2, #36	; 0x24
 8009620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f90b 	bl	8009850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	691a      	ldr	r2, [r3, #16]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	695a      	ldr	r2, [r3, #20]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68da      	ldr	r2, [r3, #12]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2220      	movs	r2, #32
 8009674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2220      	movs	r2, #32
 800967c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b088      	sub	sp, #32
 800968e:	af02      	add	r7, sp, #8
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	603b      	str	r3, [r7, #0]
 8009696:	4613      	mov	r3, r2
 8009698:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	f040 8083 	bne.w	80097b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <HAL_UART_Transmit+0x2e>
 80096b2:	88fb      	ldrh	r3, [r7, #6]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d101      	bne.n	80096bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e07b      	b.n	80097b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <HAL_UART_Transmit+0x40>
 80096c6:	2302      	movs	r3, #2
 80096c8:	e074      	b.n	80097b4 <HAL_UART_Transmit+0x12a>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2221      	movs	r2, #33	; 0x21
 80096dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80096e0:	f7ff f89c 	bl	800881c <HAL_GetTick>
 80096e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	88fa      	ldrh	r2, [r7, #6]
 80096ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	88fa      	ldrh	r2, [r7, #6]
 80096f0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80096f2:	e042      	b.n	800977a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800970a:	d122      	bne.n	8009752 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2200      	movs	r2, #0
 8009714:	2180      	movs	r1, #128	; 0x80
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f000 f850 	bl	80097bc <UART_WaitOnFlagUntilTimeout>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e046      	b.n	80097b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009738:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d103      	bne.n	800974a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	3302      	adds	r3, #2
 8009746:	60bb      	str	r3, [r7, #8]
 8009748:	e017      	b.n	800977a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	3301      	adds	r3, #1
 800974e:	60bb      	str	r3, [r7, #8]
 8009750:	e013      	b.n	800977a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2200      	movs	r2, #0
 800975a:	2180      	movs	r1, #128	; 0x80
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 f82d 	bl	80097bc <UART_WaitOnFlagUntilTimeout>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e023      	b.n	80097b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	60ba      	str	r2, [r7, #8]
 8009772:	781a      	ldrb	r2, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800977e:	b29b      	uxth	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1b7      	bne.n	80096f4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2200      	movs	r2, #0
 800978c:	2140      	movs	r1, #64	; 0x40
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f000 f814 	bl	80097bc <UART_WaitOnFlagUntilTimeout>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e00a      	b.n	80097b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2220      	movs	r2, #32
 80097a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	e000      	b.n	80097b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80097b2:	2302      	movs	r3, #2
  }
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	4613      	mov	r3, r2
 80097ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097cc:	e02c      	b.n	8009828 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d4:	d028      	beq.n	8009828 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d007      	beq.n	80097ec <UART_WaitOnFlagUntilTimeout+0x30>
 80097dc:	f7ff f81e 	bl	800881c <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d21d      	bcs.n	8009828 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68da      	ldr	r2, [r3, #12]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	695a      	ldr	r2, [r3, #20]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 0201 	bic.w	r2, r2, #1
 800980a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2220      	movs	r2, #32
 8009810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2220      	movs	r2, #32
 8009818:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e00f      	b.n	8009848 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	4013      	ands	r3, r2
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	429a      	cmp	r2, r3
 8009836:	bf0c      	ite	eq
 8009838:	2301      	moveq	r3, #1
 800983a:	2300      	movne	r3, #0
 800983c:	b2db      	uxtb	r3, r3
 800983e:	461a      	mov	r2, r3
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	429a      	cmp	r2, r3
 8009844:	d0c3      	beq.n	80097ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68da      	ldr	r2, [r3, #12]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689a      	ldr	r2, [r3, #8]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	4313      	orrs	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800988a:	f023 030c 	bic.w	r3, r3, #12
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	6812      	ldr	r2, [r2, #0]
 8009892:	68f9      	ldr	r1, [r7, #12]
 8009894:	430b      	orrs	r3, r1
 8009896:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	699a      	ldr	r2, [r3, #24]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	430a      	orrs	r2, r1
 80098ac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a52      	ldr	r2, [pc, #328]	; (80099fc <UART_SetConfig+0x1ac>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d14e      	bne.n	8009956 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80098b8:	f7ff fe68 	bl	800958c <HAL_RCC_GetPCLK2Freq>
 80098bc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	4613      	mov	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	009a      	lsls	r2, r3, #2
 80098c8:	441a      	add	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d4:	4a4a      	ldr	r2, [pc, #296]	; (8009a00 <UART_SetConfig+0x1b0>)
 80098d6:	fba2 2303 	umull	r2, r3, r2, r3
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	0119      	lsls	r1, r3, #4
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	4613      	mov	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	4413      	add	r3, r2
 80098e6:	009a      	lsls	r2, r3, #2
 80098e8:	441a      	add	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80098f4:	4b42      	ldr	r3, [pc, #264]	; (8009a00 <UART_SetConfig+0x1b0>)
 80098f6:	fba3 0302 	umull	r0, r3, r3, r2
 80098fa:	095b      	lsrs	r3, r3, #5
 80098fc:	2064      	movs	r0, #100	; 0x64
 80098fe:	fb00 f303 	mul.w	r3, r0, r3
 8009902:	1ad3      	subs	r3, r2, r3
 8009904:	011b      	lsls	r3, r3, #4
 8009906:	3332      	adds	r3, #50	; 0x32
 8009908:	4a3d      	ldr	r2, [pc, #244]	; (8009a00 <UART_SetConfig+0x1b0>)
 800990a:	fba2 2303 	umull	r2, r3, r2, r3
 800990e:	095b      	lsrs	r3, r3, #5
 8009910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009914:	4419      	add	r1, r3
 8009916:	68ba      	ldr	r2, [r7, #8]
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009a      	lsls	r2, r3, #2
 8009920:	441a      	add	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	fbb2 f2f3 	udiv	r2, r2, r3
 800992c:	4b34      	ldr	r3, [pc, #208]	; (8009a00 <UART_SetConfig+0x1b0>)
 800992e:	fba3 0302 	umull	r0, r3, r3, r2
 8009932:	095b      	lsrs	r3, r3, #5
 8009934:	2064      	movs	r0, #100	; 0x64
 8009936:	fb00 f303 	mul.w	r3, r0, r3
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	011b      	lsls	r3, r3, #4
 800993e:	3332      	adds	r3, #50	; 0x32
 8009940:	4a2f      	ldr	r2, [pc, #188]	; (8009a00 <UART_SetConfig+0x1b0>)
 8009942:	fba2 2303 	umull	r2, r3, r2, r3
 8009946:	095b      	lsrs	r3, r3, #5
 8009948:	f003 020f 	and.w	r2, r3, #15
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	440a      	add	r2, r1
 8009952:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009954:	e04d      	b.n	80099f2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8009956:	f7ff fe05 	bl	8009564 <HAL_RCC_GetPCLK1Freq>
 800995a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009a      	lsls	r2, r3, #2
 8009966:	441a      	add	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009972:	4a23      	ldr	r2, [pc, #140]	; (8009a00 <UART_SetConfig+0x1b0>)
 8009974:	fba2 2303 	umull	r2, r3, r2, r3
 8009978:	095b      	lsrs	r3, r3, #5
 800997a:	0119      	lsls	r1, r3, #4
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	4613      	mov	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	009a      	lsls	r2, r3, #2
 8009986:	441a      	add	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009992:	4b1b      	ldr	r3, [pc, #108]	; (8009a00 <UART_SetConfig+0x1b0>)
 8009994:	fba3 0302 	umull	r0, r3, r3, r2
 8009998:	095b      	lsrs	r3, r3, #5
 800999a:	2064      	movs	r0, #100	; 0x64
 800999c:	fb00 f303 	mul.w	r3, r0, r3
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	011b      	lsls	r3, r3, #4
 80099a4:	3332      	adds	r3, #50	; 0x32
 80099a6:	4a16      	ldr	r2, [pc, #88]	; (8009a00 <UART_SetConfig+0x1b0>)
 80099a8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099b2:	4419      	add	r1, r3
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	009a      	lsls	r2, r3, #2
 80099be:	441a      	add	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80099ca:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <UART_SetConfig+0x1b0>)
 80099cc:	fba3 0302 	umull	r0, r3, r3, r2
 80099d0:	095b      	lsrs	r3, r3, #5
 80099d2:	2064      	movs	r0, #100	; 0x64
 80099d4:	fb00 f303 	mul.w	r3, r0, r3
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	3332      	adds	r3, #50	; 0x32
 80099de:	4a08      	ldr	r2, [pc, #32]	; (8009a00 <UART_SetConfig+0x1b0>)
 80099e0:	fba2 2303 	umull	r2, r3, r2, r3
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	f003 020f 	and.w	r2, r3, #15
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	440a      	add	r2, r1
 80099f0:	609a      	str	r2, [r3, #8]
}
 80099f2:	bf00      	nop
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	40013800 	.word	0x40013800
 8009a00:	51eb851f 	.word	0x51eb851f

08009a04 <__errno>:
 8009a04:	4b01      	ldr	r3, [pc, #4]	; (8009a0c <__errno+0x8>)
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	2000000c 	.word	0x2000000c

08009a10 <__libc_init_array>:
 8009a10:	b570      	push	{r4, r5, r6, lr}
 8009a12:	2500      	movs	r5, #0
 8009a14:	4e0c      	ldr	r6, [pc, #48]	; (8009a48 <__libc_init_array+0x38>)
 8009a16:	4c0d      	ldr	r4, [pc, #52]	; (8009a4c <__libc_init_array+0x3c>)
 8009a18:	1ba4      	subs	r4, r4, r6
 8009a1a:	10a4      	asrs	r4, r4, #2
 8009a1c:	42a5      	cmp	r5, r4
 8009a1e:	d109      	bne.n	8009a34 <__libc_init_array+0x24>
 8009a20:	f000 fc88 	bl	800a334 <_init>
 8009a24:	2500      	movs	r5, #0
 8009a26:	4e0a      	ldr	r6, [pc, #40]	; (8009a50 <__libc_init_array+0x40>)
 8009a28:	4c0a      	ldr	r4, [pc, #40]	; (8009a54 <__libc_init_array+0x44>)
 8009a2a:	1ba4      	subs	r4, r4, r6
 8009a2c:	10a4      	asrs	r4, r4, #2
 8009a2e:	42a5      	cmp	r5, r4
 8009a30:	d105      	bne.n	8009a3e <__libc_init_array+0x2e>
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a38:	4798      	blx	r3
 8009a3a:	3501      	adds	r5, #1
 8009a3c:	e7ee      	b.n	8009a1c <__libc_init_array+0xc>
 8009a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a42:	4798      	blx	r3
 8009a44:	3501      	adds	r5, #1
 8009a46:	e7f2      	b.n	8009a2e <__libc_init_array+0x1e>
 8009a48:	0800a3e8 	.word	0x0800a3e8
 8009a4c:	0800a3e8 	.word	0x0800a3e8
 8009a50:	0800a3e8 	.word	0x0800a3e8
 8009a54:	0800a3ec 	.word	0x0800a3ec

08009a58 <memset>:
 8009a58:	4603      	mov	r3, r0
 8009a5a:	4402      	add	r2, r0
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d100      	bne.n	8009a62 <memset+0xa>
 8009a60:	4770      	bx	lr
 8009a62:	f803 1b01 	strb.w	r1, [r3], #1
 8009a66:	e7f9      	b.n	8009a5c <memset+0x4>

08009a68 <_puts_r>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	460e      	mov	r6, r1
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	b118      	cbz	r0, 8009a78 <_puts_r+0x10>
 8009a70:	6983      	ldr	r3, [r0, #24]
 8009a72:	b90b      	cbnz	r3, 8009a78 <_puts_r+0x10>
 8009a74:	f000 fa0c 	bl	8009e90 <__sinit>
 8009a78:	69ab      	ldr	r3, [r5, #24]
 8009a7a:	68ac      	ldr	r4, [r5, #8]
 8009a7c:	b913      	cbnz	r3, 8009a84 <_puts_r+0x1c>
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 fa06 	bl	8009e90 <__sinit>
 8009a84:	4b23      	ldr	r3, [pc, #140]	; (8009b14 <_puts_r+0xac>)
 8009a86:	429c      	cmp	r4, r3
 8009a88:	d117      	bne.n	8009aba <_puts_r+0x52>
 8009a8a:	686c      	ldr	r4, [r5, #4]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	071b      	lsls	r3, r3, #28
 8009a90:	d51d      	bpl.n	8009ace <_puts_r+0x66>
 8009a92:	6923      	ldr	r3, [r4, #16]
 8009a94:	b1db      	cbz	r3, 8009ace <_puts_r+0x66>
 8009a96:	3e01      	subs	r6, #1
 8009a98:	68a3      	ldr	r3, [r4, #8]
 8009a9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	60a3      	str	r3, [r4, #8]
 8009aa2:	b9e9      	cbnz	r1, 8009ae0 <_puts_r+0x78>
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	da2e      	bge.n	8009b06 <_puts_r+0x9e>
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	210a      	movs	r1, #10
 8009aac:	4628      	mov	r0, r5
 8009aae:	f000 f83f 	bl	8009b30 <__swbuf_r>
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	d011      	beq.n	8009ada <_puts_r+0x72>
 8009ab6:	200a      	movs	r0, #10
 8009ab8:	e011      	b.n	8009ade <_puts_r+0x76>
 8009aba:	4b17      	ldr	r3, [pc, #92]	; (8009b18 <_puts_r+0xb0>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	d101      	bne.n	8009ac4 <_puts_r+0x5c>
 8009ac0:	68ac      	ldr	r4, [r5, #8]
 8009ac2:	e7e3      	b.n	8009a8c <_puts_r+0x24>
 8009ac4:	4b15      	ldr	r3, [pc, #84]	; (8009b1c <_puts_r+0xb4>)
 8009ac6:	429c      	cmp	r4, r3
 8009ac8:	bf08      	it	eq
 8009aca:	68ec      	ldreq	r4, [r5, #12]
 8009acc:	e7de      	b.n	8009a8c <_puts_r+0x24>
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f000 f87f 	bl	8009bd4 <__swsetup_r>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d0dd      	beq.n	8009a96 <_puts_r+0x2e>
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	da04      	bge.n	8009aee <_puts_r+0x86>
 8009ae4:	69a2      	ldr	r2, [r4, #24]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	dc06      	bgt.n	8009af8 <_puts_r+0x90>
 8009aea:	290a      	cmp	r1, #10
 8009aec:	d004      	beq.n	8009af8 <_puts_r+0x90>
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	6022      	str	r2, [r4, #0]
 8009af4:	7019      	strb	r1, [r3, #0]
 8009af6:	e7cf      	b.n	8009a98 <_puts_r+0x30>
 8009af8:	4622      	mov	r2, r4
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 f818 	bl	8009b30 <__swbuf_r>
 8009b00:	3001      	adds	r0, #1
 8009b02:	d1c9      	bne.n	8009a98 <_puts_r+0x30>
 8009b04:	e7e9      	b.n	8009ada <_puts_r+0x72>
 8009b06:	200a      	movs	r0, #10
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	6022      	str	r2, [r4, #0]
 8009b0e:	7018      	strb	r0, [r3, #0]
 8009b10:	e7e5      	b.n	8009ade <_puts_r+0x76>
 8009b12:	bf00      	nop
 8009b14:	0800a3a8 	.word	0x0800a3a8
 8009b18:	0800a3c8 	.word	0x0800a3c8
 8009b1c:	0800a388 	.word	0x0800a388

08009b20 <puts>:
 8009b20:	4b02      	ldr	r3, [pc, #8]	; (8009b2c <puts+0xc>)
 8009b22:	4601      	mov	r1, r0
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	f7ff bf9f 	b.w	8009a68 <_puts_r>
 8009b2a:	bf00      	nop
 8009b2c:	2000000c 	.word	0x2000000c

08009b30 <__swbuf_r>:
 8009b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b32:	460e      	mov	r6, r1
 8009b34:	4614      	mov	r4, r2
 8009b36:	4605      	mov	r5, r0
 8009b38:	b118      	cbz	r0, 8009b42 <__swbuf_r+0x12>
 8009b3a:	6983      	ldr	r3, [r0, #24]
 8009b3c:	b90b      	cbnz	r3, 8009b42 <__swbuf_r+0x12>
 8009b3e:	f000 f9a7 	bl	8009e90 <__sinit>
 8009b42:	4b21      	ldr	r3, [pc, #132]	; (8009bc8 <__swbuf_r+0x98>)
 8009b44:	429c      	cmp	r4, r3
 8009b46:	d12a      	bne.n	8009b9e <__swbuf_r+0x6e>
 8009b48:	686c      	ldr	r4, [r5, #4]
 8009b4a:	69a3      	ldr	r3, [r4, #24]
 8009b4c:	60a3      	str	r3, [r4, #8]
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	071a      	lsls	r2, r3, #28
 8009b52:	d52e      	bpl.n	8009bb2 <__swbuf_r+0x82>
 8009b54:	6923      	ldr	r3, [r4, #16]
 8009b56:	b363      	cbz	r3, 8009bb2 <__swbuf_r+0x82>
 8009b58:	6923      	ldr	r3, [r4, #16]
 8009b5a:	6820      	ldr	r0, [r4, #0]
 8009b5c:	b2f6      	uxtb	r6, r6
 8009b5e:	1ac0      	subs	r0, r0, r3
 8009b60:	6963      	ldr	r3, [r4, #20]
 8009b62:	4637      	mov	r7, r6
 8009b64:	4283      	cmp	r3, r0
 8009b66:	dc04      	bgt.n	8009b72 <__swbuf_r+0x42>
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f000 f926 	bl	8009dbc <_fflush_r>
 8009b70:	bb28      	cbnz	r0, 8009bbe <__swbuf_r+0x8e>
 8009b72:	68a3      	ldr	r3, [r4, #8]
 8009b74:	3001      	adds	r0, #1
 8009b76:	3b01      	subs	r3, #1
 8009b78:	60a3      	str	r3, [r4, #8]
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	6022      	str	r2, [r4, #0]
 8009b80:	701e      	strb	r6, [r3, #0]
 8009b82:	6963      	ldr	r3, [r4, #20]
 8009b84:	4283      	cmp	r3, r0
 8009b86:	d004      	beq.n	8009b92 <__swbuf_r+0x62>
 8009b88:	89a3      	ldrh	r3, [r4, #12]
 8009b8a:	07db      	lsls	r3, r3, #31
 8009b8c:	d519      	bpl.n	8009bc2 <__swbuf_r+0x92>
 8009b8e:	2e0a      	cmp	r6, #10
 8009b90:	d117      	bne.n	8009bc2 <__swbuf_r+0x92>
 8009b92:	4621      	mov	r1, r4
 8009b94:	4628      	mov	r0, r5
 8009b96:	f000 f911 	bl	8009dbc <_fflush_r>
 8009b9a:	b190      	cbz	r0, 8009bc2 <__swbuf_r+0x92>
 8009b9c:	e00f      	b.n	8009bbe <__swbuf_r+0x8e>
 8009b9e:	4b0b      	ldr	r3, [pc, #44]	; (8009bcc <__swbuf_r+0x9c>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	d101      	bne.n	8009ba8 <__swbuf_r+0x78>
 8009ba4:	68ac      	ldr	r4, [r5, #8]
 8009ba6:	e7d0      	b.n	8009b4a <__swbuf_r+0x1a>
 8009ba8:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <__swbuf_r+0xa0>)
 8009baa:	429c      	cmp	r4, r3
 8009bac:	bf08      	it	eq
 8009bae:	68ec      	ldreq	r4, [r5, #12]
 8009bb0:	e7cb      	b.n	8009b4a <__swbuf_r+0x1a>
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f000 f80d 	bl	8009bd4 <__swsetup_r>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d0cc      	beq.n	8009b58 <__swbuf_r+0x28>
 8009bbe:	f04f 37ff 	mov.w	r7, #4294967295
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	0800a3a8 	.word	0x0800a3a8
 8009bcc:	0800a3c8 	.word	0x0800a3c8
 8009bd0:	0800a388 	.word	0x0800a388

08009bd4 <__swsetup_r>:
 8009bd4:	4b32      	ldr	r3, [pc, #200]	; (8009ca0 <__swsetup_r+0xcc>)
 8009bd6:	b570      	push	{r4, r5, r6, lr}
 8009bd8:	681d      	ldr	r5, [r3, #0]
 8009bda:	4606      	mov	r6, r0
 8009bdc:	460c      	mov	r4, r1
 8009bde:	b125      	cbz	r5, 8009bea <__swsetup_r+0x16>
 8009be0:	69ab      	ldr	r3, [r5, #24]
 8009be2:	b913      	cbnz	r3, 8009bea <__swsetup_r+0x16>
 8009be4:	4628      	mov	r0, r5
 8009be6:	f000 f953 	bl	8009e90 <__sinit>
 8009bea:	4b2e      	ldr	r3, [pc, #184]	; (8009ca4 <__swsetup_r+0xd0>)
 8009bec:	429c      	cmp	r4, r3
 8009bee:	d10f      	bne.n	8009c10 <__swsetup_r+0x3c>
 8009bf0:	686c      	ldr	r4, [r5, #4]
 8009bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	0715      	lsls	r5, r2, #28
 8009bfa:	d42c      	bmi.n	8009c56 <__swsetup_r+0x82>
 8009bfc:	06d0      	lsls	r0, r2, #27
 8009bfe:	d411      	bmi.n	8009c24 <__swsetup_r+0x50>
 8009c00:	2209      	movs	r2, #9
 8009c02:	6032      	str	r2, [r6, #0]
 8009c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c08:	81a3      	strh	r3, [r4, #12]
 8009c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0e:	e03e      	b.n	8009c8e <__swsetup_r+0xba>
 8009c10:	4b25      	ldr	r3, [pc, #148]	; (8009ca8 <__swsetup_r+0xd4>)
 8009c12:	429c      	cmp	r4, r3
 8009c14:	d101      	bne.n	8009c1a <__swsetup_r+0x46>
 8009c16:	68ac      	ldr	r4, [r5, #8]
 8009c18:	e7eb      	b.n	8009bf2 <__swsetup_r+0x1e>
 8009c1a:	4b24      	ldr	r3, [pc, #144]	; (8009cac <__swsetup_r+0xd8>)
 8009c1c:	429c      	cmp	r4, r3
 8009c1e:	bf08      	it	eq
 8009c20:	68ec      	ldreq	r4, [r5, #12]
 8009c22:	e7e6      	b.n	8009bf2 <__swsetup_r+0x1e>
 8009c24:	0751      	lsls	r1, r2, #29
 8009c26:	d512      	bpl.n	8009c4e <__swsetup_r+0x7a>
 8009c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c2a:	b141      	cbz	r1, 8009c3e <__swsetup_r+0x6a>
 8009c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c30:	4299      	cmp	r1, r3
 8009c32:	d002      	beq.n	8009c3a <__swsetup_r+0x66>
 8009c34:	4630      	mov	r0, r6
 8009c36:	f000 fa19 	bl	800a06c <_free_r>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c3e:	89a3      	ldrh	r3, [r4, #12]
 8009c40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c44:	81a3      	strh	r3, [r4, #12]
 8009c46:	2300      	movs	r3, #0
 8009c48:	6063      	str	r3, [r4, #4]
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f043 0308 	orr.w	r3, r3, #8
 8009c54:	81a3      	strh	r3, [r4, #12]
 8009c56:	6923      	ldr	r3, [r4, #16]
 8009c58:	b94b      	cbnz	r3, 8009c6e <__swsetup_r+0x9a>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c64:	d003      	beq.n	8009c6e <__swsetup_r+0x9a>
 8009c66:	4621      	mov	r1, r4
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f000 f9bf 	bl	8009fec <__smakebuf_r>
 8009c6e:	89a2      	ldrh	r2, [r4, #12]
 8009c70:	f012 0301 	ands.w	r3, r2, #1
 8009c74:	d00c      	beq.n	8009c90 <__swsetup_r+0xbc>
 8009c76:	2300      	movs	r3, #0
 8009c78:	60a3      	str	r3, [r4, #8]
 8009c7a:	6963      	ldr	r3, [r4, #20]
 8009c7c:	425b      	negs	r3, r3
 8009c7e:	61a3      	str	r3, [r4, #24]
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	b953      	cbnz	r3, 8009c9a <__swsetup_r+0xc6>
 8009c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009c8c:	d1ba      	bne.n	8009c04 <__swsetup_r+0x30>
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	0792      	lsls	r2, r2, #30
 8009c92:	bf58      	it	pl
 8009c94:	6963      	ldrpl	r3, [r4, #20]
 8009c96:	60a3      	str	r3, [r4, #8]
 8009c98:	e7f2      	b.n	8009c80 <__swsetup_r+0xac>
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	e7f7      	b.n	8009c8e <__swsetup_r+0xba>
 8009c9e:	bf00      	nop
 8009ca0:	2000000c 	.word	0x2000000c
 8009ca4:	0800a3a8 	.word	0x0800a3a8
 8009ca8:	0800a3c8 	.word	0x0800a3c8
 8009cac:	0800a388 	.word	0x0800a388

08009cb0 <__sflush_r>:
 8009cb0:	898a      	ldrh	r2, [r1, #12]
 8009cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	0710      	lsls	r0, r2, #28
 8009cba:	460c      	mov	r4, r1
 8009cbc:	d458      	bmi.n	8009d70 <__sflush_r+0xc0>
 8009cbe:	684b      	ldr	r3, [r1, #4]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	dc05      	bgt.n	8009cd0 <__sflush_r+0x20>
 8009cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	dc02      	bgt.n	8009cd0 <__sflush_r+0x20>
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cd2:	2e00      	cmp	r6, #0
 8009cd4:	d0f9      	beq.n	8009cca <__sflush_r+0x1a>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cdc:	682f      	ldr	r7, [r5, #0]
 8009cde:	6a21      	ldr	r1, [r4, #32]
 8009ce0:	602b      	str	r3, [r5, #0]
 8009ce2:	d032      	beq.n	8009d4a <__sflush_r+0x9a>
 8009ce4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	075a      	lsls	r2, r3, #29
 8009cea:	d505      	bpl.n	8009cf8 <__sflush_r+0x48>
 8009cec:	6863      	ldr	r3, [r4, #4]
 8009cee:	1ac0      	subs	r0, r0, r3
 8009cf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cf2:	b10b      	cbz	r3, 8009cf8 <__sflush_r+0x48>
 8009cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cf6:	1ac0      	subs	r0, r0, r3
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cfe:	6a21      	ldr	r1, [r4, #32]
 8009d00:	4628      	mov	r0, r5
 8009d02:	47b0      	blx	r6
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	d106      	bne.n	8009d18 <__sflush_r+0x68>
 8009d0a:	6829      	ldr	r1, [r5, #0]
 8009d0c:	291d      	cmp	r1, #29
 8009d0e:	d848      	bhi.n	8009da2 <__sflush_r+0xf2>
 8009d10:	4a29      	ldr	r2, [pc, #164]	; (8009db8 <__sflush_r+0x108>)
 8009d12:	40ca      	lsrs	r2, r1
 8009d14:	07d6      	lsls	r6, r2, #31
 8009d16:	d544      	bpl.n	8009da2 <__sflush_r+0xf2>
 8009d18:	2200      	movs	r2, #0
 8009d1a:	6062      	str	r2, [r4, #4]
 8009d1c:	6922      	ldr	r2, [r4, #16]
 8009d1e:	04d9      	lsls	r1, r3, #19
 8009d20:	6022      	str	r2, [r4, #0]
 8009d22:	d504      	bpl.n	8009d2e <__sflush_r+0x7e>
 8009d24:	1c42      	adds	r2, r0, #1
 8009d26:	d101      	bne.n	8009d2c <__sflush_r+0x7c>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b903      	cbnz	r3, 8009d2e <__sflush_r+0x7e>
 8009d2c:	6560      	str	r0, [r4, #84]	; 0x54
 8009d2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d30:	602f      	str	r7, [r5, #0]
 8009d32:	2900      	cmp	r1, #0
 8009d34:	d0c9      	beq.n	8009cca <__sflush_r+0x1a>
 8009d36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d3a:	4299      	cmp	r1, r3
 8009d3c:	d002      	beq.n	8009d44 <__sflush_r+0x94>
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f994 	bl	800a06c <_free_r>
 8009d44:	2000      	movs	r0, #0
 8009d46:	6360      	str	r0, [r4, #52]	; 0x34
 8009d48:	e7c0      	b.n	8009ccc <__sflush_r+0x1c>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b0      	blx	r6
 8009d50:	1c41      	adds	r1, r0, #1
 8009d52:	d1c8      	bne.n	8009ce6 <__sflush_r+0x36>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d0c5      	beq.n	8009ce6 <__sflush_r+0x36>
 8009d5a:	2b1d      	cmp	r3, #29
 8009d5c:	d001      	beq.n	8009d62 <__sflush_r+0xb2>
 8009d5e:	2b16      	cmp	r3, #22
 8009d60:	d101      	bne.n	8009d66 <__sflush_r+0xb6>
 8009d62:	602f      	str	r7, [r5, #0]
 8009d64:	e7b1      	b.n	8009cca <__sflush_r+0x1a>
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	e7ad      	b.n	8009ccc <__sflush_r+0x1c>
 8009d70:	690f      	ldr	r7, [r1, #16]
 8009d72:	2f00      	cmp	r7, #0
 8009d74:	d0a9      	beq.n	8009cca <__sflush_r+0x1a>
 8009d76:	0793      	lsls	r3, r2, #30
 8009d78:	bf18      	it	ne
 8009d7a:	2300      	movne	r3, #0
 8009d7c:	680e      	ldr	r6, [r1, #0]
 8009d7e:	bf08      	it	eq
 8009d80:	694b      	ldreq	r3, [r1, #20]
 8009d82:	eba6 0807 	sub.w	r8, r6, r7
 8009d86:	600f      	str	r7, [r1, #0]
 8009d88:	608b      	str	r3, [r1, #8]
 8009d8a:	f1b8 0f00 	cmp.w	r8, #0
 8009d8e:	dd9c      	ble.n	8009cca <__sflush_r+0x1a>
 8009d90:	4643      	mov	r3, r8
 8009d92:	463a      	mov	r2, r7
 8009d94:	6a21      	ldr	r1, [r4, #32]
 8009d96:	4628      	mov	r0, r5
 8009d98:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d9a:	47b0      	blx	r6
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	dc06      	bgt.n	8009dae <__sflush_r+0xfe>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da6:	81a3      	strh	r3, [r4, #12]
 8009da8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dac:	e78e      	b.n	8009ccc <__sflush_r+0x1c>
 8009dae:	4407      	add	r7, r0
 8009db0:	eba8 0800 	sub.w	r8, r8, r0
 8009db4:	e7e9      	b.n	8009d8a <__sflush_r+0xda>
 8009db6:	bf00      	nop
 8009db8:	20400001 	.word	0x20400001

08009dbc <_fflush_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	690b      	ldr	r3, [r1, #16]
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	b1db      	cbz	r3, 8009dfe <_fflush_r+0x42>
 8009dc6:	b118      	cbz	r0, 8009dd0 <_fflush_r+0x14>
 8009dc8:	6983      	ldr	r3, [r0, #24]
 8009dca:	b90b      	cbnz	r3, 8009dd0 <_fflush_r+0x14>
 8009dcc:	f000 f860 	bl	8009e90 <__sinit>
 8009dd0:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <_fflush_r+0x48>)
 8009dd2:	429c      	cmp	r4, r3
 8009dd4:	d109      	bne.n	8009dea <_fflush_r+0x2e>
 8009dd6:	686c      	ldr	r4, [r5, #4]
 8009dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ddc:	b17b      	cbz	r3, 8009dfe <_fflush_r+0x42>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de6:	f7ff bf63 	b.w	8009cb0 <__sflush_r>
 8009dea:	4b07      	ldr	r3, [pc, #28]	; (8009e08 <_fflush_r+0x4c>)
 8009dec:	429c      	cmp	r4, r3
 8009dee:	d101      	bne.n	8009df4 <_fflush_r+0x38>
 8009df0:	68ac      	ldr	r4, [r5, #8]
 8009df2:	e7f1      	b.n	8009dd8 <_fflush_r+0x1c>
 8009df4:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <_fflush_r+0x50>)
 8009df6:	429c      	cmp	r4, r3
 8009df8:	bf08      	it	eq
 8009dfa:	68ec      	ldreq	r4, [r5, #12]
 8009dfc:	e7ec      	b.n	8009dd8 <_fflush_r+0x1c>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	bd38      	pop	{r3, r4, r5, pc}
 8009e02:	bf00      	nop
 8009e04:	0800a3a8 	.word	0x0800a3a8
 8009e08:	0800a3c8 	.word	0x0800a3c8
 8009e0c:	0800a388 	.word	0x0800a388

08009e10 <std>:
 8009e10:	2300      	movs	r3, #0
 8009e12:	b510      	push	{r4, lr}
 8009e14:	4604      	mov	r4, r0
 8009e16:	e9c0 3300 	strd	r3, r3, [r0]
 8009e1a:	6083      	str	r3, [r0, #8]
 8009e1c:	8181      	strh	r1, [r0, #12]
 8009e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8009e20:	81c2      	strh	r2, [r0, #14]
 8009e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e26:	6183      	str	r3, [r0, #24]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	305c      	adds	r0, #92	; 0x5c
 8009e2e:	f7ff fe13 	bl	8009a58 <memset>
 8009e32:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <std+0x38>)
 8009e34:	6224      	str	r4, [r4, #32]
 8009e36:	6263      	str	r3, [r4, #36]	; 0x24
 8009e38:	4b04      	ldr	r3, [pc, #16]	; (8009e4c <std+0x3c>)
 8009e3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e3c:	4b04      	ldr	r3, [pc, #16]	; (8009e50 <std+0x40>)
 8009e3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e40:	4b04      	ldr	r3, [pc, #16]	; (8009e54 <std+0x44>)
 8009e42:	6323      	str	r3, [r4, #48]	; 0x30
 8009e44:	bd10      	pop	{r4, pc}
 8009e46:	bf00      	nop
 8009e48:	0800a1d9 	.word	0x0800a1d9
 8009e4c:	0800a1fb 	.word	0x0800a1fb
 8009e50:	0800a233 	.word	0x0800a233
 8009e54:	0800a257 	.word	0x0800a257

08009e58 <_cleanup_r>:
 8009e58:	4901      	ldr	r1, [pc, #4]	; (8009e60 <_cleanup_r+0x8>)
 8009e5a:	f000 b885 	b.w	8009f68 <_fwalk_reent>
 8009e5e:	bf00      	nop
 8009e60:	08009dbd 	.word	0x08009dbd

08009e64 <__sfmoreglue>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	2568      	movs	r5, #104	; 0x68
 8009e68:	1e4a      	subs	r2, r1, #1
 8009e6a:	4355      	muls	r5, r2
 8009e6c:	460e      	mov	r6, r1
 8009e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e72:	f000 f947 	bl	800a104 <_malloc_r>
 8009e76:	4604      	mov	r4, r0
 8009e78:	b140      	cbz	r0, 8009e8c <__sfmoreglue+0x28>
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8009e80:	300c      	adds	r0, #12
 8009e82:	60a0      	str	r0, [r4, #8]
 8009e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e88:	f7ff fde6 	bl	8009a58 <memset>
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}

08009e90 <__sinit>:
 8009e90:	6983      	ldr	r3, [r0, #24]
 8009e92:	b510      	push	{r4, lr}
 8009e94:	4604      	mov	r4, r0
 8009e96:	bb33      	cbnz	r3, 8009ee6 <__sinit+0x56>
 8009e98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009e9c:	6503      	str	r3, [r0, #80]	; 0x50
 8009e9e:	4b12      	ldr	r3, [pc, #72]	; (8009ee8 <__sinit+0x58>)
 8009ea0:	4a12      	ldr	r2, [pc, #72]	; (8009eec <__sinit+0x5c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6282      	str	r2, [r0, #40]	; 0x28
 8009ea6:	4298      	cmp	r0, r3
 8009ea8:	bf04      	itt	eq
 8009eaa:	2301      	moveq	r3, #1
 8009eac:	6183      	streq	r3, [r0, #24]
 8009eae:	f000 f81f 	bl	8009ef0 <__sfp>
 8009eb2:	6060      	str	r0, [r4, #4]
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 f81b 	bl	8009ef0 <__sfp>
 8009eba:	60a0      	str	r0, [r4, #8]
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 f817 	bl	8009ef0 <__sfp>
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	60e0      	str	r0, [r4, #12]
 8009ec6:	2104      	movs	r1, #4
 8009ec8:	6860      	ldr	r0, [r4, #4]
 8009eca:	f7ff ffa1 	bl	8009e10 <std>
 8009ece:	2201      	movs	r2, #1
 8009ed0:	2109      	movs	r1, #9
 8009ed2:	68a0      	ldr	r0, [r4, #8]
 8009ed4:	f7ff ff9c 	bl	8009e10 <std>
 8009ed8:	2202      	movs	r2, #2
 8009eda:	2112      	movs	r1, #18
 8009edc:	68e0      	ldr	r0, [r4, #12]
 8009ede:	f7ff ff97 	bl	8009e10 <std>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	61a3      	str	r3, [r4, #24]
 8009ee6:	bd10      	pop	{r4, pc}
 8009ee8:	0800a384 	.word	0x0800a384
 8009eec:	08009e59 	.word	0x08009e59

08009ef0 <__sfp>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	4b1b      	ldr	r3, [pc, #108]	; (8009f60 <__sfp+0x70>)
 8009ef4:	4607      	mov	r7, r0
 8009ef6:	681e      	ldr	r6, [r3, #0]
 8009ef8:	69b3      	ldr	r3, [r6, #24]
 8009efa:	b913      	cbnz	r3, 8009f02 <__sfp+0x12>
 8009efc:	4630      	mov	r0, r6
 8009efe:	f7ff ffc7 	bl	8009e90 <__sinit>
 8009f02:	3648      	adds	r6, #72	; 0x48
 8009f04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	d503      	bpl.n	8009f14 <__sfp+0x24>
 8009f0c:	6833      	ldr	r3, [r6, #0]
 8009f0e:	b133      	cbz	r3, 8009f1e <__sfp+0x2e>
 8009f10:	6836      	ldr	r6, [r6, #0]
 8009f12:	e7f7      	b.n	8009f04 <__sfp+0x14>
 8009f14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f18:	b16d      	cbz	r5, 8009f36 <__sfp+0x46>
 8009f1a:	3468      	adds	r4, #104	; 0x68
 8009f1c:	e7f4      	b.n	8009f08 <__sfp+0x18>
 8009f1e:	2104      	movs	r1, #4
 8009f20:	4638      	mov	r0, r7
 8009f22:	f7ff ff9f 	bl	8009e64 <__sfmoreglue>
 8009f26:	6030      	str	r0, [r6, #0]
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d1f1      	bne.n	8009f10 <__sfp+0x20>
 8009f2c:	230c      	movs	r3, #12
 8009f2e:	4604      	mov	r4, r0
 8009f30:	603b      	str	r3, [r7, #0]
 8009f32:	4620      	mov	r0, r4
 8009f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f36:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <__sfp+0x74>)
 8009f38:	6665      	str	r5, [r4, #100]	; 0x64
 8009f3a:	e9c4 5500 	strd	r5, r5, [r4]
 8009f3e:	60a5      	str	r5, [r4, #8]
 8009f40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009f44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009f48:	2208      	movs	r2, #8
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f50:	f7ff fd82 	bl	8009a58 <memset>
 8009f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f5c:	e7e9      	b.n	8009f32 <__sfp+0x42>
 8009f5e:	bf00      	nop
 8009f60:	0800a384 	.word	0x0800a384
 8009f64:	ffff0001 	.word	0xffff0001

08009f68 <_fwalk_reent>:
 8009f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f6c:	4680      	mov	r8, r0
 8009f6e:	4689      	mov	r9, r1
 8009f70:	2600      	movs	r6, #0
 8009f72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f76:	b914      	cbnz	r4, 8009f7e <_fwalk_reent+0x16>
 8009f78:	4630      	mov	r0, r6
 8009f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009f82:	3f01      	subs	r7, #1
 8009f84:	d501      	bpl.n	8009f8a <_fwalk_reent+0x22>
 8009f86:	6824      	ldr	r4, [r4, #0]
 8009f88:	e7f5      	b.n	8009f76 <_fwalk_reent+0xe>
 8009f8a:	89ab      	ldrh	r3, [r5, #12]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d907      	bls.n	8009fa0 <_fwalk_reent+0x38>
 8009f90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f94:	3301      	adds	r3, #1
 8009f96:	d003      	beq.n	8009fa0 <_fwalk_reent+0x38>
 8009f98:	4629      	mov	r1, r5
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	47c8      	blx	r9
 8009f9e:	4306      	orrs	r6, r0
 8009fa0:	3568      	adds	r5, #104	; 0x68
 8009fa2:	e7ee      	b.n	8009f82 <_fwalk_reent+0x1a>

08009fa4 <__swhatbuf_r>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	460e      	mov	r6, r1
 8009fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fac:	b096      	sub	sp, #88	; 0x58
 8009fae:	2900      	cmp	r1, #0
 8009fb0:	4614      	mov	r4, r2
 8009fb2:	461d      	mov	r5, r3
 8009fb4:	da07      	bge.n	8009fc6 <__swhatbuf_r+0x22>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	602b      	str	r3, [r5, #0]
 8009fba:	89b3      	ldrh	r3, [r6, #12]
 8009fbc:	061a      	lsls	r2, r3, #24
 8009fbe:	d410      	bmi.n	8009fe2 <__swhatbuf_r+0x3e>
 8009fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fc4:	e00e      	b.n	8009fe4 <__swhatbuf_r+0x40>
 8009fc6:	466a      	mov	r2, sp
 8009fc8:	f000 f96c 	bl	800a2a4 <_fstat_r>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	dbf2      	blt.n	8009fb6 <__swhatbuf_r+0x12>
 8009fd0:	9a01      	ldr	r2, [sp, #4]
 8009fd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fda:	425a      	negs	r2, r3
 8009fdc:	415a      	adcs	r2, r3
 8009fde:	602a      	str	r2, [r5, #0]
 8009fe0:	e7ee      	b.n	8009fc0 <__swhatbuf_r+0x1c>
 8009fe2:	2340      	movs	r3, #64	; 0x40
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	6023      	str	r3, [r4, #0]
 8009fe8:	b016      	add	sp, #88	; 0x58
 8009fea:	bd70      	pop	{r4, r5, r6, pc}

08009fec <__smakebuf_r>:
 8009fec:	898b      	ldrh	r3, [r1, #12]
 8009fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ff0:	079d      	lsls	r5, r3, #30
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	d507      	bpl.n	800a008 <__smakebuf_r+0x1c>
 8009ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	6123      	str	r3, [r4, #16]
 800a000:	2301      	movs	r3, #1
 800a002:	6163      	str	r3, [r4, #20]
 800a004:	b002      	add	sp, #8
 800a006:	bd70      	pop	{r4, r5, r6, pc}
 800a008:	ab01      	add	r3, sp, #4
 800a00a:	466a      	mov	r2, sp
 800a00c:	f7ff ffca 	bl	8009fa4 <__swhatbuf_r>
 800a010:	9900      	ldr	r1, [sp, #0]
 800a012:	4605      	mov	r5, r0
 800a014:	4630      	mov	r0, r6
 800a016:	f000 f875 	bl	800a104 <_malloc_r>
 800a01a:	b948      	cbnz	r0, 800a030 <__smakebuf_r+0x44>
 800a01c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a020:	059a      	lsls	r2, r3, #22
 800a022:	d4ef      	bmi.n	800a004 <__smakebuf_r+0x18>
 800a024:	f023 0303 	bic.w	r3, r3, #3
 800a028:	f043 0302 	orr.w	r3, r3, #2
 800a02c:	81a3      	strh	r3, [r4, #12]
 800a02e:	e7e3      	b.n	8009ff8 <__smakebuf_r+0xc>
 800a030:	4b0d      	ldr	r3, [pc, #52]	; (800a068 <__smakebuf_r+0x7c>)
 800a032:	62b3      	str	r3, [r6, #40]	; 0x28
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	6020      	str	r0, [r4, #0]
 800a038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03c:	81a3      	strh	r3, [r4, #12]
 800a03e:	9b00      	ldr	r3, [sp, #0]
 800a040:	6120      	str	r0, [r4, #16]
 800a042:	6163      	str	r3, [r4, #20]
 800a044:	9b01      	ldr	r3, [sp, #4]
 800a046:	b15b      	cbz	r3, 800a060 <__smakebuf_r+0x74>
 800a048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a04c:	4630      	mov	r0, r6
 800a04e:	f000 f93b 	bl	800a2c8 <_isatty_r>
 800a052:	b128      	cbz	r0, 800a060 <__smakebuf_r+0x74>
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	f023 0303 	bic.w	r3, r3, #3
 800a05a:	f043 0301 	orr.w	r3, r3, #1
 800a05e:	81a3      	strh	r3, [r4, #12]
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	431d      	orrs	r5, r3
 800a064:	81a5      	strh	r5, [r4, #12]
 800a066:	e7cd      	b.n	800a004 <__smakebuf_r+0x18>
 800a068:	08009e59 	.word	0x08009e59

0800a06c <_free_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	4605      	mov	r5, r0
 800a070:	2900      	cmp	r1, #0
 800a072:	d043      	beq.n	800a0fc <_free_r+0x90>
 800a074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a078:	1f0c      	subs	r4, r1, #4
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	bfb8      	it	lt
 800a07e:	18e4      	addlt	r4, r4, r3
 800a080:	f000 f944 	bl	800a30c <__malloc_lock>
 800a084:	4a1e      	ldr	r2, [pc, #120]	; (800a100 <_free_r+0x94>)
 800a086:	6813      	ldr	r3, [r2, #0]
 800a088:	4610      	mov	r0, r2
 800a08a:	b933      	cbnz	r3, 800a09a <_free_r+0x2e>
 800a08c:	6063      	str	r3, [r4, #4]
 800a08e:	6014      	str	r4, [r2, #0]
 800a090:	4628      	mov	r0, r5
 800a092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a096:	f000 b93a 	b.w	800a30e <__malloc_unlock>
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	d90b      	bls.n	800a0b6 <_free_r+0x4a>
 800a09e:	6821      	ldr	r1, [r4, #0]
 800a0a0:	1862      	adds	r2, r4, r1
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	bf01      	itttt	eq
 800a0a6:	681a      	ldreq	r2, [r3, #0]
 800a0a8:	685b      	ldreq	r3, [r3, #4]
 800a0aa:	1852      	addeq	r2, r2, r1
 800a0ac:	6022      	streq	r2, [r4, #0]
 800a0ae:	6063      	str	r3, [r4, #4]
 800a0b0:	6004      	str	r4, [r0, #0]
 800a0b2:	e7ed      	b.n	800a090 <_free_r+0x24>
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	b10a      	cbz	r2, 800a0be <_free_r+0x52>
 800a0ba:	42a2      	cmp	r2, r4
 800a0bc:	d9fa      	bls.n	800a0b4 <_free_r+0x48>
 800a0be:	6819      	ldr	r1, [r3, #0]
 800a0c0:	1858      	adds	r0, r3, r1
 800a0c2:	42a0      	cmp	r0, r4
 800a0c4:	d10b      	bne.n	800a0de <_free_r+0x72>
 800a0c6:	6820      	ldr	r0, [r4, #0]
 800a0c8:	4401      	add	r1, r0
 800a0ca:	1858      	adds	r0, r3, r1
 800a0cc:	4282      	cmp	r2, r0
 800a0ce:	6019      	str	r1, [r3, #0]
 800a0d0:	d1de      	bne.n	800a090 <_free_r+0x24>
 800a0d2:	6810      	ldr	r0, [r2, #0]
 800a0d4:	6852      	ldr	r2, [r2, #4]
 800a0d6:	4401      	add	r1, r0
 800a0d8:	6019      	str	r1, [r3, #0]
 800a0da:	605a      	str	r2, [r3, #4]
 800a0dc:	e7d8      	b.n	800a090 <_free_r+0x24>
 800a0de:	d902      	bls.n	800a0e6 <_free_r+0x7a>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	602b      	str	r3, [r5, #0]
 800a0e4:	e7d4      	b.n	800a090 <_free_r+0x24>
 800a0e6:	6820      	ldr	r0, [r4, #0]
 800a0e8:	1821      	adds	r1, r4, r0
 800a0ea:	428a      	cmp	r2, r1
 800a0ec:	bf01      	itttt	eq
 800a0ee:	6811      	ldreq	r1, [r2, #0]
 800a0f0:	6852      	ldreq	r2, [r2, #4]
 800a0f2:	1809      	addeq	r1, r1, r0
 800a0f4:	6021      	streq	r1, [r4, #0]
 800a0f6:	6062      	str	r2, [r4, #4]
 800a0f8:	605c      	str	r4, [r3, #4]
 800a0fa:	e7c9      	b.n	800a090 <_free_r+0x24>
 800a0fc:	bd38      	pop	{r3, r4, r5, pc}
 800a0fe:	bf00      	nop
 800a100:	20000090 	.word	0x20000090

0800a104 <_malloc_r>:
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	1ccd      	adds	r5, r1, #3
 800a108:	f025 0503 	bic.w	r5, r5, #3
 800a10c:	3508      	adds	r5, #8
 800a10e:	2d0c      	cmp	r5, #12
 800a110:	bf38      	it	cc
 800a112:	250c      	movcc	r5, #12
 800a114:	2d00      	cmp	r5, #0
 800a116:	4606      	mov	r6, r0
 800a118:	db01      	blt.n	800a11e <_malloc_r+0x1a>
 800a11a:	42a9      	cmp	r1, r5
 800a11c:	d903      	bls.n	800a126 <_malloc_r+0x22>
 800a11e:	230c      	movs	r3, #12
 800a120:	6033      	str	r3, [r6, #0]
 800a122:	2000      	movs	r0, #0
 800a124:	bd70      	pop	{r4, r5, r6, pc}
 800a126:	f000 f8f1 	bl	800a30c <__malloc_lock>
 800a12a:	4a21      	ldr	r2, [pc, #132]	; (800a1b0 <_malloc_r+0xac>)
 800a12c:	6814      	ldr	r4, [r2, #0]
 800a12e:	4621      	mov	r1, r4
 800a130:	b991      	cbnz	r1, 800a158 <_malloc_r+0x54>
 800a132:	4c20      	ldr	r4, [pc, #128]	; (800a1b4 <_malloc_r+0xb0>)
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	b91b      	cbnz	r3, 800a140 <_malloc_r+0x3c>
 800a138:	4630      	mov	r0, r6
 800a13a:	f000 f83d 	bl	800a1b8 <_sbrk_r>
 800a13e:	6020      	str	r0, [r4, #0]
 800a140:	4629      	mov	r1, r5
 800a142:	4630      	mov	r0, r6
 800a144:	f000 f838 	bl	800a1b8 <_sbrk_r>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	d124      	bne.n	800a196 <_malloc_r+0x92>
 800a14c:	230c      	movs	r3, #12
 800a14e:	4630      	mov	r0, r6
 800a150:	6033      	str	r3, [r6, #0]
 800a152:	f000 f8dc 	bl	800a30e <__malloc_unlock>
 800a156:	e7e4      	b.n	800a122 <_malloc_r+0x1e>
 800a158:	680b      	ldr	r3, [r1, #0]
 800a15a:	1b5b      	subs	r3, r3, r5
 800a15c:	d418      	bmi.n	800a190 <_malloc_r+0x8c>
 800a15e:	2b0b      	cmp	r3, #11
 800a160:	d90f      	bls.n	800a182 <_malloc_r+0x7e>
 800a162:	600b      	str	r3, [r1, #0]
 800a164:	18cc      	adds	r4, r1, r3
 800a166:	50cd      	str	r5, [r1, r3]
 800a168:	4630      	mov	r0, r6
 800a16a:	f000 f8d0 	bl	800a30e <__malloc_unlock>
 800a16e:	f104 000b 	add.w	r0, r4, #11
 800a172:	1d23      	adds	r3, r4, #4
 800a174:	f020 0007 	bic.w	r0, r0, #7
 800a178:	1ac3      	subs	r3, r0, r3
 800a17a:	d0d3      	beq.n	800a124 <_malloc_r+0x20>
 800a17c:	425a      	negs	r2, r3
 800a17e:	50e2      	str	r2, [r4, r3]
 800a180:	e7d0      	b.n	800a124 <_malloc_r+0x20>
 800a182:	684b      	ldr	r3, [r1, #4]
 800a184:	428c      	cmp	r4, r1
 800a186:	bf16      	itet	ne
 800a188:	6063      	strne	r3, [r4, #4]
 800a18a:	6013      	streq	r3, [r2, #0]
 800a18c:	460c      	movne	r4, r1
 800a18e:	e7eb      	b.n	800a168 <_malloc_r+0x64>
 800a190:	460c      	mov	r4, r1
 800a192:	6849      	ldr	r1, [r1, #4]
 800a194:	e7cc      	b.n	800a130 <_malloc_r+0x2c>
 800a196:	1cc4      	adds	r4, r0, #3
 800a198:	f024 0403 	bic.w	r4, r4, #3
 800a19c:	42a0      	cmp	r0, r4
 800a19e:	d005      	beq.n	800a1ac <_malloc_r+0xa8>
 800a1a0:	1a21      	subs	r1, r4, r0
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f000 f808 	bl	800a1b8 <_sbrk_r>
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d0cf      	beq.n	800a14c <_malloc_r+0x48>
 800a1ac:	6025      	str	r5, [r4, #0]
 800a1ae:	e7db      	b.n	800a168 <_malloc_r+0x64>
 800a1b0:	20000090 	.word	0x20000090
 800a1b4:	20000094 	.word	0x20000094

0800a1b8 <_sbrk_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	4c05      	ldr	r4, [pc, #20]	; (800a1d4 <_sbrk_r+0x1c>)
 800a1be:	4605      	mov	r5, r0
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	f7fe f96c 	bl	80084a0 <_sbrk>
 800a1c8:	1c43      	adds	r3, r0, #1
 800a1ca:	d102      	bne.n	800a1d2 <_sbrk_r+0x1a>
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	b103      	cbz	r3, 800a1d2 <_sbrk_r+0x1a>
 800a1d0:	602b      	str	r3, [r5, #0]
 800a1d2:	bd38      	pop	{r3, r4, r5, pc}
 800a1d4:	2000011c 	.word	0x2000011c

0800a1d8 <__sread>:
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	460c      	mov	r4, r1
 800a1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e0:	f000 f896 	bl	800a310 <_read_r>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	bfab      	itete	ge
 800a1e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a1ec:	181b      	addge	r3, r3, r0
 800a1ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1f2:	bfac      	ite	ge
 800a1f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1f6:	81a3      	strhlt	r3, [r4, #12]
 800a1f8:	bd10      	pop	{r4, pc}

0800a1fa <__swrite>:
 800a1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fe:	461f      	mov	r7, r3
 800a200:	898b      	ldrh	r3, [r1, #12]
 800a202:	4605      	mov	r5, r0
 800a204:	05db      	lsls	r3, r3, #23
 800a206:	460c      	mov	r4, r1
 800a208:	4616      	mov	r6, r2
 800a20a:	d505      	bpl.n	800a218 <__swrite+0x1e>
 800a20c:	2302      	movs	r3, #2
 800a20e:	2200      	movs	r2, #0
 800a210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a214:	f000 f868 	bl	800a2e8 <_lseek_r>
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	4632      	mov	r2, r6
 800a21c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a220:	81a3      	strh	r3, [r4, #12]
 800a222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a226:	463b      	mov	r3, r7
 800a228:	4628      	mov	r0, r5
 800a22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a22e:	f000 b817 	b.w	800a260 <_write_r>

0800a232 <__sseek>:
 800a232:	b510      	push	{r4, lr}
 800a234:	460c      	mov	r4, r1
 800a236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23a:	f000 f855 	bl	800a2e8 <_lseek_r>
 800a23e:	1c43      	adds	r3, r0, #1
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	bf15      	itete	ne
 800a244:	6560      	strne	r0, [r4, #84]	; 0x54
 800a246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a24a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a24e:	81a3      	strheq	r3, [r4, #12]
 800a250:	bf18      	it	ne
 800a252:	81a3      	strhne	r3, [r4, #12]
 800a254:	bd10      	pop	{r4, pc}

0800a256 <__sclose>:
 800a256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a25a:	f000 b813 	b.w	800a284 <_close_r>
	...

0800a260 <_write_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4605      	mov	r5, r0
 800a264:	4608      	mov	r0, r1
 800a266:	4611      	mov	r1, r2
 800a268:	2200      	movs	r2, #0
 800a26a:	4c05      	ldr	r4, [pc, #20]	; (800a280 <_write_r+0x20>)
 800a26c:	6022      	str	r2, [r4, #0]
 800a26e:	461a      	mov	r2, r3
 800a270:	f7fe f8c9 	bl	8008406 <_write>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d102      	bne.n	800a27e <_write_r+0x1e>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	b103      	cbz	r3, 800a27e <_write_r+0x1e>
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	bd38      	pop	{r3, r4, r5, pc}
 800a280:	2000011c 	.word	0x2000011c

0800a284 <_close_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	2300      	movs	r3, #0
 800a288:	4c05      	ldr	r4, [pc, #20]	; (800a2a0 <_close_r+0x1c>)
 800a28a:	4605      	mov	r5, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	f7fe f8d5 	bl	800843e <_close>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_close_r+0x1a>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_close_r+0x1a>
 800a29c:	602b      	str	r3, [r5, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	2000011c 	.word	0x2000011c

0800a2a4 <_fstat_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	4c06      	ldr	r4, [pc, #24]	; (800a2c4 <_fstat_r+0x20>)
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	f7fe f8cf 	bl	8008454 <_fstat>
 800a2b6:	1c43      	adds	r3, r0, #1
 800a2b8:	d102      	bne.n	800a2c0 <_fstat_r+0x1c>
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	b103      	cbz	r3, 800a2c0 <_fstat_r+0x1c>
 800a2be:	602b      	str	r3, [r5, #0]
 800a2c0:	bd38      	pop	{r3, r4, r5, pc}
 800a2c2:	bf00      	nop
 800a2c4:	2000011c 	.word	0x2000011c

0800a2c8 <_isatty_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	4c05      	ldr	r4, [pc, #20]	; (800a2e4 <_isatty_r+0x1c>)
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	6023      	str	r3, [r4, #0]
 800a2d4:	f7fe f8cd 	bl	8008472 <_isatty>
 800a2d8:	1c43      	adds	r3, r0, #1
 800a2da:	d102      	bne.n	800a2e2 <_isatty_r+0x1a>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	b103      	cbz	r3, 800a2e2 <_isatty_r+0x1a>
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	2000011c 	.word	0x2000011c

0800a2e8 <_lseek_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	4c05      	ldr	r4, [pc, #20]	; (800a308 <_lseek_r+0x20>)
 800a2f4:	6022      	str	r2, [r4, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f7fe f8c5 	bl	8008486 <_lseek>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_lseek_r+0x1e>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	b103      	cbz	r3, 800a306 <_lseek_r+0x1e>
 800a304:	602b      	str	r3, [r5, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	2000011c 	.word	0x2000011c

0800a30c <__malloc_lock>:
 800a30c:	4770      	bx	lr

0800a30e <__malloc_unlock>:
 800a30e:	4770      	bx	lr

0800a310 <_read_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4605      	mov	r5, r0
 800a314:	4608      	mov	r0, r1
 800a316:	4611      	mov	r1, r2
 800a318:	2200      	movs	r2, #0
 800a31a:	4c05      	ldr	r4, [pc, #20]	; (800a330 <_read_r+0x20>)
 800a31c:	6022      	str	r2, [r4, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	f7fe f854 	bl	80083cc <_read>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_read_r+0x1e>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_read_r+0x1e>
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	2000011c 	.word	0x2000011c

0800a334 <_init>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	bf00      	nop
 800a338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33a:	bc08      	pop	{r3}
 800a33c:	469e      	mov	lr, r3
 800a33e:	4770      	bx	lr

0800a340 <_fini>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	bf00      	nop
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr
