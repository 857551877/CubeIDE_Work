
NUCLEO_Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  080051f0  080051f0  000151f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d08  08005d08  00020b1c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d08  08005d08  00020b1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d08  08005d08  00020b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b1c  20000000  08005d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000b1c  0800682c  00020b1c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c34  0800682c  00020c34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020b1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a31b  00000000  00000000  00020b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001adf  00000000  00000000  0002ae60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000970  00000000  00000000  0002c940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000898  00000000  00000000  0002d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000148b2  00000000  00000000  0002db48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d70  00000000  00000000  000423fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d0e3  00000000  00000000  0004b16a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b824d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000314c  00000000  00000000  000b82c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000b1c 	.word	0x20000b1c
 800012c:	00000000 	.word	0x00000000
 8000130:	080051d4 	.word	0x080051d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000b20 	.word	0x20000b20
 800014c:	080051d4 	.word	0x080051d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__gesf2>:
 8000a88:	f04f 3cff 	mov.w	ip, #4294967295
 8000a8c:	e006      	b.n	8000a9c <__cmpsf2+0x4>
 8000a8e:	bf00      	nop

08000a90 <__lesf2>:
 8000a90:	f04f 0c01 	mov.w	ip, #1
 8000a94:	e002      	b.n	8000a9c <__cmpsf2+0x4>
 8000a96:	bf00      	nop

08000a98 <__cmpsf2>:
 8000a98:	f04f 0c01 	mov.w	ip, #1
 8000a9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aac:	bf18      	it	ne
 8000aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab2:	d011      	beq.n	8000ad8 <__cmpsf2+0x40>
 8000ab4:	b001      	add	sp, #4
 8000ab6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000aba:	bf18      	it	ne
 8000abc:	ea90 0f01 	teqne	r0, r1
 8000ac0:	bf58      	it	pl
 8000ac2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ac6:	bf88      	it	hi
 8000ac8:	17c8      	asrhi	r0, r1, #31
 8000aca:	bf38      	it	cc
 8000acc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ad0:	bf18      	it	ne
 8000ad2:	f040 0001 	orrne.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	d102      	bne.n	8000ae4 <__cmpsf2+0x4c>
 8000ade:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ae2:	d105      	bne.n	8000af0 <__cmpsf2+0x58>
 8000ae4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ae8:	d1e4      	bne.n	8000ab4 <__cmpsf2+0x1c>
 8000aea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000aee:	d0e1      	beq.n	8000ab4 <__cmpsf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cfrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4608      	mov	r0, r1
 8000afc:	4661      	mov	r1, ip
 8000afe:	e7ff      	b.n	8000b00 <__aeabi_cfcmpeq>

08000b00 <__aeabi_cfcmpeq>:
 8000b00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b02:	f7ff ffc9 	bl	8000a98 <__cmpsf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b10 <__aeabi_fcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cfcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_fcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cfcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_fcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cfcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_fcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffd2 	bl	8000af8 <__aeabi_cfrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc8 	bl	8000af8 <__aeabi_cfrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b88:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a2c      	ldr	r2, [pc, #176]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0310 	and.w	r3, r3, #16
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a26      	ldr	r2, [pc, #152]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000ba6:	f043 0320 	orr.w	r3, r3, #32
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0320 	and.w	r3, r3, #32
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a20      	ldr	r2, [pc, #128]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	6193      	str	r3, [r2, #24]
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a1a      	ldr	r2, [pc, #104]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_GPIO_Init+0xcc>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0308 	and.w	r3, r3, #8
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2120      	movs	r1, #32
 8000bec:	4815      	ldr	r0, [pc, #84]	; (8000c44 <MX_GPIO_Init+0xd0>)
 8000bee:	f001 f8d1 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	4811      	ldr	r0, [pc, #68]	; (8000c4c <MX_GPIO_Init+0xd8>)
 8000c08:	f000 ff6a 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <MX_GPIO_Init+0xd0>)
 8000c24:	f000 ff5c 	bl	8001ae0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2028      	movs	r0, #40	; 0x28
 8000c2e:	f000 ff20 	bl	8001a72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c32:	2028      	movs	r0, #40	; 0x28
 8000c34:	f000 ff39 	bl	8001aaa <HAL_NVIC_EnableIRQ>

}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010800 	.word	0x40010800
 8000c48:	10110000 	.word	0x10110000
 8000c4c:	40011000 	.word	0x40011000

08000c50 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c56:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <MX_I2C1_Init+0x54>)
 8000c58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <MX_I2C1_Init+0x58>)
 8000c5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c8e:	f001 f8bb 	bl	8001e08 <HAL_I2C_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c98:	f000 f915 	bl	8000ec6 <Error_Handler>
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000b44 	.word	0x20000b44
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	000186a0 	.word	0x000186a0

08000cac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_I2C2_Init+0x50>)
 8000cb2:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <MX_I2C2_Init+0x54>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_I2C2_Init+0x50>)
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <MX_I2C2_Init+0x58>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_I2C2_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_I2C2_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_I2C2_Init+0x50>)
 8000cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_I2C2_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_I2C2_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_I2C2_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_I2C2_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_I2C2_Init+0x50>)
 8000cea:	f001 f88d 	bl	8001e08 <HAL_I2C_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cf4:	f000 f8e7 	bl	8000ec6 <Error_Handler>
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000b98 	.word	0x20000b98
 8000d00:	40005800 	.word	0x40005800
 8000d04:	000186a0 	.word	0x000186a0

08000d08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d124      	bne.n	8000d72 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a29      	ldr	r2, [pc, #164]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d40:	23c0      	movs	r3, #192	; 0xc0
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d44:	2312      	movs	r3, #18
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4821      	ldr	r0, [pc, #132]	; (8000dd8 <HAL_I2C_MspInit+0xd0>)
 8000d54:	f000 fec4 	bl	8001ae0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d62:	61d3      	str	r3, [r2, #28]
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d70:	e029      	b.n	8000dc6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_I2C_MspInit+0xd4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d124      	bne.n	8000dc6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9a:	2312      	movs	r3, #18
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	4619      	mov	r1, r3
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <HAL_I2C_MspInit+0xd0>)
 8000daa:	f000 fe99 	bl	8001ae0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000db4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	40005800 	.word	0x40005800

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f000 fce9 	bl	80017bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f82b 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f7ff fec1 	bl	8000b74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000df2:	f000 f933 	bl	800105c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000df6:	f7ff ff2b 	bl	8000c50 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000dfa:	f7ff ff57 	bl	8000cac <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000dfe:	f000 fc67 	bl	80016d0 <OLED_Init>
  OLED_DrawBMP(0, 0, 128, 8, BMP2);
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <main+0x58>)
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2308      	movs	r3, #8
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 fc17 	bl	8001640 <OLED_DrawBMP>
  while (1)
  {
	 // HAL_Delay (100);


	  OLED_ShowFlort(5, 1, 15.3412, 16);
 8000e12:	2310      	movs	r3, #16
 8000e14:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <main+0x5c>)
 8000e16:	2101      	movs	r1, #1
 8000e18:	2005      	movs	r0, #5
 8000e1a:	f000 fae3 	bl	80013e4 <OLED_ShowFlort>
	 OLED_ShowString(5, 3, "GPS", 16);
 8000e1e:	2310      	movs	r3, #16
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <main+0x60>)
 8000e22:	2103      	movs	r1, #3
 8000e24:	2005      	movs	r0, #5
 8000e26:	f000 faad 	bl	8001384 <OLED_ShowString>
	 //OLED_ShowString(0, 2, "GPS", 16);
	  OLED_ShowCHinese(5, 5, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f000 fbb6 	bl	80015a0 <OLED_ShowCHinese>
	  OLED_ShowFlort(5, 1, 15.3412, 16);
 8000e34:	e7ed      	b.n	8000e12 <main+0x32>
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	4175758e 	.word	0x4175758e
 8000e40:	080051f0 	.word	0x080051f0

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b090      	sub	sp, #64	; 0x40
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	2228      	movs	r2, #40	; 0x28
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 f978 	bl	8003148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e7a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0318 	add.w	r3, r7, #24
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fbf1 	bl	800266c <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e90:	f000 f819 	bl	8000ec6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2102      	movs	r1, #2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fe5c 	bl	8002b6c <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000eba:	f000 f804 	bl	8000ec6 <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3740      	adds	r7, #64	; 0x40
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
	...

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_MspInit+0x5c>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6193      	str	r3, [r2, #24]
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_MspInit+0x5c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efc:	61d3      	str	r3, [r2, #28]
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_MspInit+0x5c>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_MspInit+0x60>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_MspInit+0x60>)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010000 	.word	0x40010000

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <HardFault_Handler+0x4>

08000f4a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <MemManage_Handler+0x4>

08000f50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <BusFault_Handler+0x4>

08000f56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 fc60 	bl	8001848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f94:	f000 ff16 	bl	8001dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_sbrk+0x50>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x16>
		heap_end = &end;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <_sbrk+0x50>)
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <_sbrk+0x54>)
 8000fb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <_sbrk+0x50>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <_sbrk+0x50>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	466a      	mov	r2, sp
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d907      	bls.n	8000fd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fc6:	f002 f895 	bl	80030f4 <__errno>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	230c      	movs	r3, #12
 8000fce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <_sbrk+0x50>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a03      	ldr	r2, [pc, #12]	; (8000fec <_sbrk+0x50>)
 8000fe0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000b38 	.word	0x20000b38
 8000ff0:	20000c38 	.word	0x20000c38

08000ff4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <SystemInit+0x5c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <SystemInit+0x5c>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <SystemInit+0x5c>)
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	4911      	ldr	r1, [pc, #68]	; (8001050 <SystemInit+0x5c>)
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <SystemInit+0x60>)
 800100c:	4013      	ands	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SystemInit+0x5c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <SystemInit+0x5c>)
 8001016:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <SystemInit+0x5c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SystemInit+0x5c>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <SystemInit+0x5c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <SystemInit+0x5c>)
 8001032:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001036:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SystemInit+0x5c>)
 800103a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800103e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SystemInit+0x64>)
 8001042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001046:	609a      	str	r2, [r3, #8]
#endif 
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	40021000 	.word	0x40021000
 8001054:	f8ff0000 	.word	0xf8ff0000
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <MX_USART2_UART_Init+0x50>)
 8001064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800106c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001094:	f001 ff06 	bl	8002ea4 <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800109e:	f7ff ff12 	bl	8000ec6 <Error_Handler>
  }

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000bec 	.word	0x20000bec
 80010ac:	40004400 	.word	0x40004400

080010b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <HAL_UART_MspInit+0x70>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d123      	bne.n	8001118 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010da:	61d3      	str	r3, [r2, #28]
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001100:	230c      	movs	r3, #12
 8001102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2302      	movs	r3, #2
 800110a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_UART_MspInit+0x78>)
 8001114:	f000 fce4 	bl	8001ae0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40004400 	.word	0x40004400
 8001124:	40021000 	.word	0x40021000
 8001128:	40010800 	.word	0x40010800

0800112c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800112c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001152:	f7ff ff4f 	bl	8000ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f001 ffd3 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800115a:	f7ff fe41 	bl	8000de0 <main>
  bx lr
 800115e:	4770      	bx	lr
  ldr r3, =_sidata
 8001160:	08005d10 	.word	0x08005d10
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001168:	20000b1c 	.word	0x20000b1c
  ldr r2, =_sbss
 800116c:	20000b1c 	.word	0x20000b1c
  ldr r3, = _ebss
 8001170:	20000c34 	.word	0x20000c34

08001174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_2_IRQHandler>
	...

08001178 <Write_IIC_Cmddat>:

extern I2C_HandleTypeDef hi2c1;
extern I2C_HandleTypeDef hi2c2;

void Write_IIC_Cmddat(unsigned char IIC_Data,unsigned char cmddat)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c2, oledaddress, cmddat, I2C_MEMADD_SIZE_8BIT, &IIC_Data, 1, 100);
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	b29a      	uxth	r2, r3
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2301      	movs	r3, #1
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2178      	movs	r1, #120	; 0x78
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <Write_IIC_Cmddat+0x34>)
 800119e:	f000 ff5b 	bl	8002058 <HAL_I2C_Mem_Write>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000b98 	.word	0x20000b98

080011b0 <OLED_WR_Byte>:


void OLED_WR_Byte(unsigned char dat,unsigned char cmd)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	if(cmd)
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <OLED_WR_Byte+0x22>
			{
		Write_IIC_Cmddat (dat, OLED_DAT_ADDRESS );
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2140      	movs	r1, #64	; 0x40
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ffd4 	bl	8001178 <Write_IIC_Cmddat>
	else {
		Write_IIC_Cmddat (dat, OLED_CMD_ADDRESS);
		
	}
	
}
 80011d0:	e004      	b.n	80011dc <OLED_WR_Byte+0x2c>
		Write_IIC_Cmddat (dat, OLED_CMD_ADDRESS);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ffce 	bl	8001178 <Write_IIC_Cmddat>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <OLED_Set_Pos>:




	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 	OLED_WR_Byte(0xb0+y,OLED_CMD);
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	460a      	mov	r2, r1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	71bb      	strb	r3, [r7, #6]
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	3b50      	subs	r3, #80	; 0x50
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ffd7 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ffcd 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f),OLED_CMD); 
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffc5 	bl	80011b0 <OLED_WR_Byte>
}   	  
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
	unsigned char i,n;
	for(i=0;i<8;i++)  
 8001234:	2300      	movs	r3, #0
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	e01f      	b.n	800127a <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	3b50      	subs	r3, #80	; 0x50
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ffb4 	bl	80011b0 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 8001248:	2100      	movs	r1, #0
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff ffb0 	bl	80011b0 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 8001250:	2100      	movs	r1, #0
 8001252:	2010      	movs	r0, #16
 8001254:	f7ff ffac 	bl	80011b0 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8001258:	2300      	movs	r3, #0
 800125a:	71bb      	strb	r3, [r7, #6]
 800125c:	e006      	b.n	800126c <OLED_Clear+0x3e>
 800125e:	2101      	movs	r1, #1
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ffa5 	bl	80011b0 <OLED_WR_Byte>
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	3301      	adds	r3, #1
 800126a:	71bb      	strb	r3, [r7, #6]
 800126c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001270:	2b00      	cmp	r3, #0
 8001272:	daf4      	bge.n	800125e <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	3301      	adds	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b07      	cmp	r3, #7
 800127e:	d9dc      	bls.n	800123a <OLED_Clear+0xc>
	} //������ʾ
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,������ʾ;1,������ʾ				 
//size:ѡ������ 16/12 
void OLED_ShowChar(unsigned char x,unsigned char y,unsigned char chr,unsigned char Char_Size)
{      	
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	4603      	mov	r3, r0
 800129c:	71bb      	strb	r3, [r7, #6]
 800129e:	460b      	mov	r3, r1
 80012a0:	717b      	strb	r3, [r7, #5]
 80012a2:	4613      	mov	r3, r2
 80012a4:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 80012a6:	2300      	movs	r3, #0
 80012a8:	73bb      	strb	r3, [r7, #14]
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	3b20      	subs	r3, #32
 80012b2:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da04      	bge.n	80012c6 <OLED_ShowChar+0x3e>
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	3302      	adds	r3, #2
 80012c4:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 80012c6:	793b      	ldrb	r3, [r7, #4]
 80012c8:	2b10      	cmp	r3, #16
 80012ca:	d135      	bne.n	8001338 <OLED_ShowChar+0xb0>
			{
			OLED_Set_Pos(x,y);	
 80012cc:	79ba      	ldrb	r2, [r7, #6]
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff86 	bl	80011e4 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e00c      	b.n	80012f8 <OLED_ShowChar+0x70>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 80012de:	7bbb      	ldrb	r3, [r7, #14]
 80012e0:	011a      	lsls	r2, r3, #4
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a25      	ldr	r2, [pc, #148]	; (800137c <OLED_ShowChar+0xf4>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
 80012ea:	2101      	movs	r1, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5f 	bl	80011b0 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	3301      	adds	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	2b07      	cmp	r3, #7
 80012fc:	d9ef      	bls.n	80012de <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	3301      	adds	r3, #1
 8001302:	b2da      	uxtb	r2, r3
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff6b 	bl	80011e4 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e00d      	b.n	8001330 <OLED_ShowChar+0xa8>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8001314:	7bbb      	ldrb	r3, [r7, #14]
 8001316:	011a      	lsls	r2, r3, #4
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	4413      	add	r3, r2
 800131c:	3308      	adds	r3, #8
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <OLED_ShowChar+0xf4>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	2101      	movs	r1, #1
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff43 	bl	80011b0 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	3301      	adds	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b07      	cmp	r3, #7
 8001334:	d9ee      	bls.n	8001314 <OLED_ShowChar+0x8c>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 8001336:	e01c      	b.n	8001372 <OLED_ShowChar+0xea>
				OLED_Set_Pos(x,y);
 8001338:	79ba      	ldrb	r2, [r7, #6]
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff50 	bl	80011e4 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e010      	b.n	800136c <OLED_ShowChar+0xe4>
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 800134a:	7bba      	ldrb	r2, [r7, #14]
 800134c:	7bf9      	ldrb	r1, [r7, #15]
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <OLED_ShowChar+0xf8>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4403      	add	r3, r0
 800135a:	440b      	add	r3, r1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2101      	movs	r1, #1
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff25 	bl	80011b0 <OLED_WR_Byte>
				for(i=0;i<6;i++)
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	3301      	adds	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b05      	cmp	r3, #5
 8001370:	d9eb      	bls.n	800134a <OLED_ShowChar+0xc2>
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bd90      	pop	{r4, r7, pc}
 800137a:	bf00      	nop
 800137c:	08005458 	.word	0x08005458
 8001380:	08005230 	.word	0x08005230

08001384 <OLED_ShowString>:
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
	}
} 
//��ʾһ���ַ��Ŵ�
void OLED_ShowString(unsigned char x,unsigned char y,unsigned char *chr,unsigned char Char_Size)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	603a      	str	r2, [r7, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	460b      	mov	r3, r1
 8001394:	71bb      	strb	r3, [r7, #6]
 8001396:	4613      	mov	r3, r2
 8001398:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 800139e:	e016      	b.n	80013ce <OLED_ShowString+0x4a>
	{		OLED_ShowChar(x,y,chr[j],Char_Size);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	4413      	add	r3, r2
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	79b9      	ldrb	r1, [r7, #6]
 80013ac:	79f8      	ldrb	r0, [r7, #7]
 80013ae:	f7ff ff6b 	bl	8001288 <OLED_ShowChar>
			x+=8;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	3308      	adds	r3, #8
 80013b6:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b78      	cmp	r3, #120	; 0x78
 80013bc:	d904      	bls.n	80013c8 <OLED_ShowString+0x44>
 80013be:	2300      	movs	r3, #0
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	3302      	adds	r3, #2
 80013c6:	71bb      	strb	r3, [r7, #6]
			j++;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	3301      	adds	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1e2      	bne.n	80013a0 <OLED_ShowString+0x1c>
	}
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <OLED_ShowFlort>:




void OLED_ShowFlort(unsigned char x,unsigned char y,float Da,unsigned char Char_Size)
{
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	603a      	str	r2, [r7, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	460b      	mov	r3, r1
 80013f4:	71bb      	strb	r3, [r7, #6]
 80013f6:	4613      	mov	r3, r2
 80013f8:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]
	char chr[10]={0};
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	811a      	strh	r2, [r3, #8]


		if(Da<10)		//防止十位变化成个位小数点前移，导致小数点后两位产生一个不变的不可控制数字
 800140a:	4961      	ldr	r1, [pc, #388]	; (8001590 <OLED_ShowFlort+0x1ac>)
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f7ff fb89 	bl	8000b24 <__aeabi_fcmplt>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d036      	beq.n	8001486 <OLED_ShowFlort+0xa2>
	{
		  sprintf(chr, "%0.3f",Da);
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f7ff f805 	bl	8000428 <__aeabi_f2d>
 800141e:	4603      	mov	r3, r0
 8001420:	460c      	mov	r4, r1
 8001422:	f107 000c 	add.w	r0, r7, #12
 8001426:	461a      	mov	r2, r3
 8001428:	4623      	mov	r3, r4
 800142a:	495a      	ldr	r1, [pc, #360]	; (8001594 <OLED_ShowFlort+0x1b0>)
 800142c:	f002 fae4 	bl	80039f8 <siprintf>
			OLED_ShowChar(x,y,' ',Char_Size);
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	79b9      	ldrb	r1, [r7, #6]
 8001434:	79f8      	ldrb	r0, [r7, #7]
 8001436:	2220      	movs	r2, #32
 8001438:	f7ff ff26 	bl	8001288 <OLED_ShowChar>
					while (chr[j]!='\0')
 800143c:	e01a      	b.n	8001474 <OLED_ShowFlort+0x90>
			{
				OLED_ShowChar(x+8,y,chr[j],Char_Size);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	3308      	adds	r3, #8
 8001442:	b2d8      	uxtb	r0, r3
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	f107 0218 	add.w	r2, r7, #24
 800144a:	4413      	add	r3, r2
 800144c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	79b9      	ldrb	r1, [r7, #6]
 8001454:	f7ff ff18 	bl	8001288 <OLED_ShowChar>
					x+=8;
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	3308      	adds	r3, #8
 800145c:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b78      	cmp	r3, #120	; 0x78
 8001462:	d904      	bls.n	800146e <OLED_ShowFlort+0x8a>
 8001464:	2300      	movs	r3, #0
 8001466:	71fb      	strb	r3, [r7, #7]
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	3302      	adds	r3, #2
 800146c:	71bb      	strb	r3, [r7, #6]
					j++;
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	3301      	adds	r3, #1
 8001472:	75fb      	strb	r3, [r7, #23]
					while (chr[j]!='\0')
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	f107 0218 	add.w	r2, r7, #24
 800147a:	4413      	add	r3, r2
 800147c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1dc      	bne.n	800143e <OLED_ShowFlort+0x5a>
					j++;
			}

	}

}
 8001484:	e080      	b.n	8001588 <OLED_ShowFlort+0x1a4>
		if ((Da>10)&(100>Da))
 8001486:	2301      	movs	r3, #1
 8001488:	461c      	mov	r4, r3
 800148a:	4941      	ldr	r1, [pc, #260]	; (8001590 <OLED_ShowFlort+0x1ac>)
 800148c:	6838      	ldr	r0, [r7, #0]
 800148e:	f7ff fb67 	bl	8000b60 <__aeabi_fcmpgt>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <OLED_ShowFlort+0xb8>
 8001498:	2300      	movs	r3, #0
 800149a:	461c      	mov	r4, r3
 800149c:	b2e4      	uxtb	r4, r4
 800149e:	2301      	movs	r3, #1
 80014a0:	461d      	mov	r5, r3
 80014a2:	493d      	ldr	r1, [pc, #244]	; (8001598 <OLED_ShowFlort+0x1b4>)
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f7ff fb3d 	bl	8000b24 <__aeabi_fcmplt>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <OLED_ShowFlort+0xd0>
 80014b0:	2300      	movs	r3, #0
 80014b2:	461d      	mov	r5, r3
 80014b4:	b2eb      	uxtb	r3, r5
 80014b6:	4023      	ands	r3, r4
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d02e      	beq.n	800151c <OLED_ShowFlort+0x138>
		sprintf(chr, "%0.3f",Da);
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f7fe ffb2 	bl	8000428 <__aeabi_f2d>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	f107 000c 	add.w	r0, r7, #12
 80014cc:	461a      	mov	r2, r3
 80014ce:	4623      	mov	r3, r4
 80014d0:	4930      	ldr	r1, [pc, #192]	; (8001594 <OLED_ShowFlort+0x1b0>)
 80014d2:	f002 fa91 	bl	80039f8 <siprintf>
			while (chr[j]!='\0')
 80014d6:	e018      	b.n	800150a <OLED_ShowFlort+0x126>
			{		OLED_ShowChar(x,y,chr[j],Char_Size);
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	f107 0218 	add.w	r2, r7, #24
 80014de:	4413      	add	r3, r2
 80014e0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80014e4:	797b      	ldrb	r3, [r7, #5]
 80014e6:	79b9      	ldrb	r1, [r7, #6]
 80014e8:	79f8      	ldrb	r0, [r7, #7]
 80014ea:	f7ff fecd 	bl	8001288 <OLED_ShowChar>
					x+=8;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	3308      	adds	r3, #8
 80014f2:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b78      	cmp	r3, #120	; 0x78
 80014f8:	d904      	bls.n	8001504 <OLED_ShowFlort+0x120>
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	3302      	adds	r3, #2
 8001502:	71bb      	strb	r3, [r7, #6]
					j++;
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	3301      	adds	r3, #1
 8001508:	75fb      	strb	r3, [r7, #23]
			while (chr[j]!='\0')
 800150a:	7dfb      	ldrb	r3, [r7, #23]
 800150c:	f107 0218 	add.w	r2, r7, #24
 8001510:	4413      	add	r3, r2
 8001512:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1de      	bne.n	80014d8 <OLED_ShowFlort+0xf4>
}
 800151a:	e035      	b.n	8001588 <OLED_ShowFlort+0x1a4>
		if (Da>100)
 800151c:	491e      	ldr	r1, [pc, #120]	; (8001598 <OLED_ShowFlort+0x1b4>)
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f7ff fb1e 	bl	8000b60 <__aeabi_fcmpgt>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d100      	bne.n	800152c <OLED_ShowFlort+0x148>
}
 800152a:	e02d      	b.n	8001588 <OLED_ShowFlort+0x1a4>
			sprintf(chr, "%0.2f",Da);
 800152c:	6838      	ldr	r0, [r7, #0]
 800152e:	f7fe ff7b 	bl	8000428 <__aeabi_f2d>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	f107 000c 	add.w	r0, r7, #12
 800153a:	461a      	mov	r2, r3
 800153c:	4623      	mov	r3, r4
 800153e:	4917      	ldr	r1, [pc, #92]	; (800159c <OLED_ShowFlort+0x1b8>)
 8001540:	f002 fa5a 	bl	80039f8 <siprintf>
			while (chr[j]!='\0')
 8001544:	e018      	b.n	8001578 <OLED_ShowFlort+0x194>
			{		OLED_ShowChar(x,y,chr[j],Char_Size);
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	f107 0218 	add.w	r2, r7, #24
 800154c:	4413      	add	r3, r2
 800154e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001552:	797b      	ldrb	r3, [r7, #5]
 8001554:	79b9      	ldrb	r1, [r7, #6]
 8001556:	79f8      	ldrb	r0, [r7, #7]
 8001558:	f7ff fe96 	bl	8001288 <OLED_ShowChar>
					x+=8;
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	3308      	adds	r3, #8
 8001560:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b78      	cmp	r3, #120	; 0x78
 8001566:	d904      	bls.n	8001572 <OLED_ShowFlort+0x18e>
 8001568:	2300      	movs	r3, #0
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	3302      	adds	r3, #2
 8001570:	71bb      	strb	r3, [r7, #6]
					j++;
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	3301      	adds	r3, #1
 8001576:	75fb      	strb	r3, [r7, #23]
			while (chr[j]!='\0')
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	f107 0218 	add.w	r2, r7, #24
 800157e:	4413      	add	r3, r2
 8001580:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1de      	bne.n	8001546 <OLED_ShowFlort+0x162>
}
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	41200000 	.word	0x41200000
 8001594:	080051f4 	.word	0x080051f4
 8001598:	42c80000 	.word	0x42c80000
 800159c:	080051fc 	.word	0x080051fc

080015a0 <OLED_ShowCHinese>:

void OLED_ShowCHinese(unsigned char x,unsigned char y,unsigned char no)
{      			    
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
 80015aa:	460b      	mov	r3, r1
 80015ac:	71bb      	strb	r3, [r7, #6]
 80015ae:	4613      	mov	r3, r2
 80015b0:	717b      	strb	r3, [r7, #5]
	unsigned char t,adder=0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Pos(x,y);	
 80015b6:	79ba      	ldrb	r2, [r7, #6]
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fe11 	bl	80011e4 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e011      	b.n	80015ec <OLED_ShowCHinese+0x4c>
		{
				OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 80015c8:	797b      	ldrb	r3, [r7, #5]
 80015ca:	005a      	lsls	r2, r3, #1
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	491b      	ldr	r1, [pc, #108]	; (800163c <OLED_ShowCHinese+0x9c>)
 80015d0:	0152      	lsls	r2, r2, #5
 80015d2:	440a      	add	r2, r1
 80015d4:	4413      	add	r3, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2101      	movs	r1, #1
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fde8 	bl	80011b0 <OLED_WR_Byte>
				adder+=1;
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	3301      	adds	r3, #1
 80015e4:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	3301      	adds	r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	d9ea      	bls.n	80015c8 <OLED_ShowCHinese+0x28>
     }	
		OLED_Set_Pos(x,y+1);	
 80015f2:	79bb      	ldrb	r3, [r7, #6]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fdf1 	bl	80011e4 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e012      	b.n	800162e <OLED_ShowCHinese+0x8e>
			{	
				OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 8001608:	797b      	ldrb	r3, [r7, #5]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	490a      	ldr	r1, [pc, #40]	; (800163c <OLED_ShowCHinese+0x9c>)
 8001612:	0152      	lsls	r2, r2, #5
 8001614:	440a      	add	r2, r1
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2101      	movs	r1, #1
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fdc7 	bl	80011b0 <OLED_WR_Byte>
				adder+=1;
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	3301      	adds	r3, #1
 8001626:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	3301      	adds	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d9e9      	bls.n	8001608 <OLED_ShowCHinese+0x68>
      }					
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000404 	.word	0x20000404

08001640 <OLED_DrawBMP>:
/***********������������ʾ��ʾBMPͼƬ128��64��ʼ������(x,y),x�ķ�Χ0��127��yΪҳ�ķ�Χ0��7*****************/
void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[])
{ 	
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	4604      	mov	r4, r0
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4623      	mov	r3, r4
 8001650:	71fb      	strb	r3, [r7, #7]
 8001652:	4603      	mov	r3, r0
 8001654:	71bb      	strb	r3, [r7, #6]
 8001656:	460b      	mov	r3, r1
 8001658:	717b      	strb	r3, [r7, #5]
 800165a:	4613      	mov	r3, r2
 800165c:	713b      	strb	r3, [r7, #4]
 unsigned int j=0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 unsigned char x,y;
  
  if(y1%8==0) y=y1/8;      
 8001662:	793b      	ldrb	r3, [r7, #4]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <OLED_DrawBMP+0x36>
 800166e:	793b      	ldrb	r3, [r7, #4]
 8001670:	08db      	lsrs	r3, r3, #3
 8001672:	72bb      	strb	r3, [r7, #10]
 8001674:	e004      	b.n	8001680 <OLED_DrawBMP+0x40>
  else y=y1/8+1;
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	72bb      	strb	r3, [r7, #10]
 8001684:	e01c      	b.n	80016c0 <OLED_DrawBMP+0x80>
	{
		OLED_Set_Pos(x0,y);
 8001686:	7aba      	ldrb	r2, [r7, #10]
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fda9 	bl	80011e4 <OLED_Set_Pos>
    for(x=x0;x<x1;x++)
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	72fb      	strb	r3, [r7, #11]
 8001696:	e00c      	b.n	80016b2 <OLED_DrawBMP+0x72>
	    {      
	    	OLED_WR_Byte(BMP[j++],OLED_DATA);	    	
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60fa      	str	r2, [r7, #12]
 800169e:	6a3a      	ldr	r2, [r7, #32]
 80016a0:	4413      	add	r3, r2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fd82 	bl	80011b0 <OLED_WR_Byte>
    for(x=x0;x<x1;x++)
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	3301      	adds	r3, #1
 80016b0:	72fb      	strb	r3, [r7, #11]
 80016b2:	7afa      	ldrb	r2, [r7, #11]
 80016b4:	797b      	ldrb	r3, [r7, #5]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d3ee      	bcc.n	8001698 <OLED_DrawBMP+0x58>
	for(y=y0;y<y1;y++)
 80016ba:	7abb      	ldrb	r3, [r7, #10]
 80016bc:	3301      	adds	r3, #1
 80016be:	72bb      	strb	r3, [r7, #10]
 80016c0:	7aba      	ldrb	r2, [r7, #10]
 80016c2:	793b      	ldrb	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d3de      	bcc.n	8001686 <OLED_DrawBMP+0x46>
	    }
	}
} 
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}

080016d0 <OLED_Init>:

//��ʼ��SSD1306					    
void OLED_Init(void)
{ 	
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0

	HAL_Delay (100);					//看别人延时这么长时间
 80016d4:	2064      	movs	r0, #100	; 0x64
 80016d6:	f000 f8d3 	bl	8001880 <HAL_Delay>
	OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 80016da:	2100      	movs	r1, #0
 80016dc:	20ae      	movs	r0, #174	; 0xae
 80016de:	f7ff fd67 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 80016e2:	2100      	movs	r1, #0
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fd63 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 80016ea:	2100      	movs	r1, #0
 80016ec:	2010      	movs	r0, #16
 80016ee:	f7ff fd5f 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 80016f2:	2100      	movs	r1, #0
 80016f4:	2040      	movs	r0, #64	; 0x40
 80016f6:	f7ff fd5b 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 80016fa:	2100      	movs	r1, #0
 80016fc:	20b0      	movs	r0, #176	; 0xb0
 80016fe:	f7ff fd57 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); // contract control
 8001702:	2100      	movs	r1, #0
 8001704:	2081      	movs	r0, #129	; 0x81
 8001706:	f7ff fd53 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 800170a:	2100      	movs	r1, #0
 800170c:	20ff      	movs	r0, #255	; 0xff
 800170e:	f7ff fd4f 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 8001712:	2100      	movs	r1, #0
 8001714:	20a1      	movs	r0, #161	; 0xa1
 8001716:	f7ff fd4b 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 800171a:	2100      	movs	r1, #0
 800171c:	20a6      	movs	r0, #166	; 0xa6
 800171e:	f7ff fd47 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 8001722:	2100      	movs	r1, #0
 8001724:	20a8      	movs	r0, #168	; 0xa8
 8001726:	f7ff fd43 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 800172a:	2100      	movs	r1, #0
 800172c:	203f      	movs	r0, #63	; 0x3f
 800172e:	f7ff fd3f 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 8001732:	2100      	movs	r1, #0
 8001734:	20c8      	movs	r0, #200	; 0xc8
 8001736:	f7ff fd3b 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 800173a:	2100      	movs	r1, #0
 800173c:	20d3      	movs	r0, #211	; 0xd3
 800173e:	f7ff fd37 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//
 8001742:	2100      	movs	r1, #0
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff fd33 	bl	80011b0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 800174a:	2100      	movs	r1, #0
 800174c:	20d5      	movs	r0, #213	; 0xd5
 800174e:	f7ff fd2f 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//
 8001752:	2100      	movs	r1, #0
 8001754:	2080      	movs	r0, #128	; 0x80
 8001756:	f7ff fd2b 	bl	80011b0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 800175a:	2100      	movs	r1, #0
 800175c:	20d8      	movs	r0, #216	; 0xd8
 800175e:	f7ff fd27 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x05,OLED_CMD);//
 8001762:	2100      	movs	r1, #0
 8001764:	2005      	movs	r0, #5
 8001766:	f7ff fd23 	bl	80011b0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 800176a:	2100      	movs	r1, #0
 800176c:	20d9      	movs	r0, #217	; 0xd9
 800176e:	f7ff fd1f 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//
 8001772:	2100      	movs	r1, #0
 8001774:	20f1      	movs	r0, #241	; 0xf1
 8001776:	f7ff fd1b 	bl	80011b0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 800177a:	2100      	movs	r1, #0
 800177c:	20da      	movs	r0, #218	; 0xda
 800177e:	f7ff fd17 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);//
 8001782:	2100      	movs	r1, #0
 8001784:	2012      	movs	r0, #18
 8001786:	f7ff fd13 	bl	80011b0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 800178a:	2100      	movs	r1, #0
 800178c:	20db      	movs	r0, #219	; 0xdb
 800178e:	f7ff fd0f 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//
 8001792:	2100      	movs	r1, #0
 8001794:	2030      	movs	r0, #48	; 0x30
 8001796:	f7ff fd0b 	bl	80011b0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 800179a:	2100      	movs	r1, #0
 800179c:	208d      	movs	r0, #141	; 0x8d
 800179e:	f7ff fd07 	bl	80011b0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//
 80017a2:	2100      	movs	r1, #0
 80017a4:	2014      	movs	r0, #20
 80017a6:	f7ff fd03 	bl	80011b0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 80017aa:	2100      	movs	r1, #0
 80017ac:	20af      	movs	r0, #175	; 0xaf
 80017ae:	f7ff fcff 	bl	80011b0 <OLED_WR_Byte>


	OLED_Clear();
 80017b2:	f7ff fd3c 	bl	800122e <OLED_Clear>
}  
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_Init+0x28>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <HAL_Init+0x28>)
 80017c6:	f043 0310 	orr.w	r3, r3, #16
 80017ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017cc:	2003      	movs	r0, #3
 80017ce:	f000 f945 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f808 	bl	80017e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d8:	f7ff fb7c 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40022000 	.word	0x40022000

080017e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_InitTick+0x54>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_InitTick+0x58>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f95d 	bl	8001ac6 <HAL_SYSTICK_Config>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e00e      	b.n	8001834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b0f      	cmp	r3, #15
 800181a:	d80a      	bhi.n	8001832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f000 f925 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001828:	4a06      	ldr	r2, [pc, #24]	; (8001844 <HAL_InitTick+0x5c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000400 	.word	0x20000400
 8001840:	20000948 	.word	0x20000948
 8001844:	20000944 	.word	0x20000944

08001848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_IncTick+0x1c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_IncTick+0x20>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a03      	ldr	r2, [pc, #12]	; (8001868 <HAL_IncTick+0x20>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	20000948 	.word	0x20000948
 8001868:	20000c2c 	.word	0x20000c2c

0800186c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return uwTick;
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <HAL_GetTick+0x10>)
 8001872:	681b      	ldr	r3, [r3, #0]
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	20000c2c 	.word	0x20000c2c

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff fff0 	bl	800186c <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_Delay+0x40>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffe0 	bl	800186c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000948 	.word	0x20000948

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4906      	ldr	r1, [pc, #24]	; (800195c <__NVIC_EnableIRQ+0x34>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f7ff ff90 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff2d 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff42 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff90 	bl	80019b4 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5f 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff35 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffa2 	bl	8001a18 <SysTick_Config>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b08b      	sub	sp, #44	; 0x2c
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af2:	e127      	b.n	8001d44 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001af4:	2201      	movs	r2, #1
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f040 8116 	bne.w	8001d3e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d034      	beq.n	8001b84 <HAL_GPIO_Init+0xa4>
 8001b1a:	2b12      	cmp	r3, #18
 8001b1c:	d80d      	bhi.n	8001b3a <HAL_GPIO_Init+0x5a>
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d02b      	beq.n	8001b7a <HAL_GPIO_Init+0x9a>
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d804      	bhi.n	8001b30 <HAL_GPIO_Init+0x50>
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d031      	beq.n	8001b8e <HAL_GPIO_Init+0xae>
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d01c      	beq.n	8001b68 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2e:	e048      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	d043      	beq.n	8001bbc <HAL_GPIO_Init+0xdc>
 8001b34:	2b11      	cmp	r3, #17
 8001b36:	d01b      	beq.n	8001b70 <HAL_GPIO_Init+0x90>
          break;
 8001b38:	e043      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b3a:	4a89      	ldr	r2, [pc, #548]	; (8001d60 <HAL_GPIO_Init+0x280>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d026      	beq.n	8001b8e <HAL_GPIO_Init+0xae>
 8001b40:	4a87      	ldr	r2, [pc, #540]	; (8001d60 <HAL_GPIO_Init+0x280>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d806      	bhi.n	8001b54 <HAL_GPIO_Init+0x74>
 8001b46:	4a87      	ldr	r2, [pc, #540]	; (8001d64 <HAL_GPIO_Init+0x284>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d020      	beq.n	8001b8e <HAL_GPIO_Init+0xae>
 8001b4c:	4a86      	ldr	r2, [pc, #536]	; (8001d68 <HAL_GPIO_Init+0x288>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d01d      	beq.n	8001b8e <HAL_GPIO_Init+0xae>
          break;
 8001b52:	e036      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b54:	4a85      	ldr	r2, [pc, #532]	; (8001d6c <HAL_GPIO_Init+0x28c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d019      	beq.n	8001b8e <HAL_GPIO_Init+0xae>
 8001b5a:	4a85      	ldr	r2, [pc, #532]	; (8001d70 <HAL_GPIO_Init+0x290>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d016      	beq.n	8001b8e <HAL_GPIO_Init+0xae>
 8001b60:	4a84      	ldr	r2, [pc, #528]	; (8001d74 <HAL_GPIO_Init+0x294>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0xae>
          break;
 8001b66:	e02c      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e028      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	3304      	adds	r3, #4
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	e023      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	623b      	str	r3, [r7, #32]
          break;
 8001b82:	e01e      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	330c      	adds	r3, #12
 8001b8a:	623b      	str	r3, [r7, #32]
          break;
 8001b8c:	e019      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d102      	bne.n	8001b9c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b96:	2304      	movs	r3, #4
 8001b98:	623b      	str	r3, [r7, #32]
          break;
 8001b9a:	e012      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	611a      	str	r2, [r3, #16]
          break;
 8001bae:	e008      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	615a      	str	r2, [r3, #20]
          break;
 8001bba:	e002      	b.n	8001bc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2bff      	cmp	r3, #255	; 0xff
 8001bc6:	d801      	bhi.n	8001bcc <HAL_GPIO_Init+0xec>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	e001      	b.n	8001bd0 <HAL_GPIO_Init+0xf0>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2bff      	cmp	r3, #255	; 0xff
 8001bd6:	d802      	bhi.n	8001bde <HAL_GPIO_Init+0xfe>
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x104>
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	3b08      	subs	r3, #8
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	210f      	movs	r1, #15
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	6a39      	ldr	r1, [r7, #32]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8096 	beq.w	8001d3e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c12:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_GPIO_Init+0x298>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_GPIO_Init+0x298>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6193      	str	r3, [r2, #24]
 8001c1e:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <HAL_GPIO_Init+0x298>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c2a:	4a54      	ldr	r2, [pc, #336]	; (8001d7c <HAL_GPIO_Init+0x29c>)
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <HAL_GPIO_Init+0x2a0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x19e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <HAL_GPIO_Init+0x2a4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00d      	beq.n	8001c7a <HAL_GPIO_Init+0x19a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a49      	ldr	r2, [pc, #292]	; (8001d88 <HAL_GPIO_Init+0x2a8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x196>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a48      	ldr	r2, [pc, #288]	; (8001d8c <HAL_GPIO_Init+0x2ac>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_GPIO_Init+0x192>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x1a0>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x1a0>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x1a0>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x1a0>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c90:	493a      	ldr	r1, [pc, #232]	; (8001d7c <HAL_GPIO_Init+0x29c>)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001caa:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4938      	ldr	r1, [pc, #224]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
 8001cb6:	e006      	b.n	8001cc6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	4933      	ldr	r1, [pc, #204]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	492e      	ldr	r1, [pc, #184]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	4929      	ldr	r1, [pc, #164]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cfa:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	4924      	ldr	r1, [pc, #144]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
 8001d06:	e006      	b.n	8001d16 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	491f      	ldr	r1, [pc, #124]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d006      	beq.n	8001d30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	491a      	ldr	r1, [pc, #104]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60cb      	str	r3, [r1, #12]
 8001d2e:	e006      	b.n	8001d3e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	4915      	ldr	r1, [pc, #84]	; (8001d90 <HAL_GPIO_Init+0x2b0>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	3301      	adds	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f47f aed0 	bne.w	8001af4 <HAL_GPIO_Init+0x14>
  }
}
 8001d54:	bf00      	nop
 8001d56:	372c      	adds	r7, #44	; 0x2c
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	10210000 	.word	0x10210000
 8001d64:	10110000 	.word	0x10110000
 8001d68:	10120000 	.word	0x10120000
 8001d6c:	10310000 	.word	0x10310000
 8001d70:	10320000 	.word	0x10320000
 8001d74:	10220000 	.word	0x10220000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40010800 	.word	0x40010800
 8001d84:	40010c00 	.word	0x40010c00
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40011400 	.word	0x40011400
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f806 	bl	8001df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e10f      	b.n	800203a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe ff6a 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2224      	movs	r2, #36	; 0x24
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e4c:	f000 ffe4 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8001e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a7b      	ldr	r2, [pc, #492]	; (8002044 <HAL_I2C_Init+0x23c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d807      	bhi.n	8001e6c <HAL_I2C_Init+0x64>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a7a      	ldr	r2, [pc, #488]	; (8002048 <HAL_I2C_Init+0x240>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	bf94      	ite	ls
 8001e64:	2301      	movls	r3, #1
 8001e66:	2300      	movhi	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	e006      	b.n	8001e7a <HAL_I2C_Init+0x72>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4a77      	ldr	r2, [pc, #476]	; (800204c <HAL_I2C_Init+0x244>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	bf94      	ite	ls
 8001e74:	2301      	movls	r3, #1
 8001e76:	2300      	movhi	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0db      	b.n	800203a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4a72      	ldr	r2, [pc, #456]	; (8002050 <HAL_I2C_Init+0x248>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0c9b      	lsrs	r3, r3, #18
 8001e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a64      	ldr	r2, [pc, #400]	; (8002044 <HAL_I2C_Init+0x23c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d802      	bhi.n	8001ebc <HAL_I2C_Init+0xb4>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	e009      	b.n	8001ed0 <HAL_I2C_Init+0xc8>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	4a63      	ldr	r2, [pc, #396]	; (8002054 <HAL_I2C_Init+0x24c>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	099b      	lsrs	r3, r3, #6
 8001ece:	3301      	adds	r3, #1
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ee2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4956      	ldr	r1, [pc, #344]	; (8002044 <HAL_I2C_Init+0x23c>)
 8001eec:	428b      	cmp	r3, r1
 8001eee:	d80d      	bhi.n	8001f0c <HAL_I2C_Init+0x104>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1e59      	subs	r1, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	bf38      	it	cc
 8001f08:	2304      	movcc	r3, #4
 8001f0a:	e04f      	b.n	8001fac <HAL_I2C_Init+0x1a4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <HAL_I2C_Init+0x130>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1e58      	subs	r0, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	440b      	add	r3, r1
 8001f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf0c      	ite	eq
 8001f30:	2301      	moveq	r3, #1
 8001f32:	2300      	movne	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	e012      	b.n	8001f5e <HAL_I2C_Init+0x156>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1e58      	subs	r0, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	0099      	lsls	r1, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Init+0x15e>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e022      	b.n	8001fac <HAL_I2C_Init+0x1a4>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10e      	bne.n	8001f8c <HAL_I2C_Init+0x184>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1e58      	subs	r0, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6859      	ldr	r1, [r3, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	440b      	add	r3, r1
 8001f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8a:	e00f      	b.n	8001fac <HAL_I2C_Init+0x1a4>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e58      	subs	r0, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	0099      	lsls	r1, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	6809      	ldr	r1, [r1, #0]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69da      	ldr	r2, [r3, #28]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6911      	ldr	r1, [r2, #16]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68d2      	ldr	r2, [r2, #12]
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695a      	ldr	r2, [r3, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	000186a0 	.word	0x000186a0
 8002048:	001e847f 	.word	0x001e847f
 800204c:	003d08ff 	.word	0x003d08ff
 8002050:	431bde83 	.word	0x431bde83
 8002054:	10624dd3 	.word	0x10624dd3

08002058 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	4608      	mov	r0, r1
 8002062:	4611      	mov	r1, r2
 8002064:	461a      	mov	r2, r3
 8002066:	4603      	mov	r3, r0
 8002068:	817b      	strh	r3, [r7, #10]
 800206a:	460b      	mov	r3, r1
 800206c:	813b      	strh	r3, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002072:	f7ff fbfb 	bl	800186c <HAL_GetTick>
 8002076:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b20      	cmp	r3, #32
 8002082:	f040 80d9 	bne.w	8002238 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2319      	movs	r3, #25
 800208c:	2201      	movs	r2, #1
 800208e:	496d      	ldr	r1, [pc, #436]	; (8002244 <HAL_I2C_Mem_Write+0x1ec>)
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f965 	bl	8002360 <I2C_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800209c:	2302      	movs	r3, #2
 800209e:	e0cc      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_I2C_Mem_Write+0x56>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e0c5      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d007      	beq.n	80020d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2221      	movs	r2, #33	; 0x21
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2240      	movs	r2, #64	; 0x40
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a3a      	ldr	r2, [r7, #32]
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a4d      	ldr	r2, [pc, #308]	; (8002248 <HAL_I2C_Mem_Write+0x1f0>)
 8002114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002116:	88f8      	ldrh	r0, [r7, #6]
 8002118:	893a      	ldrh	r2, [r7, #8]
 800211a:	8979      	ldrh	r1, [r7, #10]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	4603      	mov	r3, r0
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f890 	bl	800224c <I2C_RequestMemoryWrite>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d052      	beq.n	80021d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e081      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f9e6 	bl	800250c <I2C_WaitOnTXEFlagUntilTimeout>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00d      	beq.n	8002162 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b04      	cmp	r3, #4
 800214c:	d107      	bne.n	800215e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e06b      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b04      	cmp	r3, #4
 800219e:	d11b      	bne.n	80021d8 <HAL_I2C_Mem_Write+0x180>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d017      	beq.n	80021d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1aa      	bne.n	8002136 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f9d2 	bl	800258e <I2C_WaitOnBTFFlagUntilTimeout>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00d      	beq.n	800220c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d107      	bne.n	8002208 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002206:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e016      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800221a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	00100002 	.word	0x00100002
 8002248:	ffff0000 	.word	0xffff0000

0800224c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	4608      	mov	r0, r1
 8002256:	4611      	mov	r1, r2
 8002258:	461a      	mov	r2, r3
 800225a:	4603      	mov	r3, r0
 800225c:	817b      	strh	r3, [r7, #10]
 800225e:	460b      	mov	r3, r1
 8002260:	813b      	strh	r3, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002274:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	2200      	movs	r2, #0
 800227e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f86c 	bl	8002360 <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e05f      	b.n	8002352 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002292:	897b      	ldrh	r3, [r7, #10]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	6a3a      	ldr	r2, [r7, #32]
 80022a6:	492d      	ldr	r1, [pc, #180]	; (800235c <I2C_RequestMemoryWrite+0x110>)
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f8b0 	bl	800240e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e04c      	b.n	8002352 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d0:	6a39      	ldr	r1, [r7, #32]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f91a 	bl	800250c <I2C_WaitOnTXEFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d107      	bne.n	80022f6 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e02b      	b.n	8002352 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d105      	bne.n	800230c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002300:	893b      	ldrh	r3, [r7, #8]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	611a      	str	r2, [r3, #16]
 800230a:	e021      	b.n	8002350 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800230c:	893b      	ldrh	r3, [r7, #8]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	b29b      	uxth	r3, r3
 8002312:	b2da      	uxtb	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	6a39      	ldr	r1, [r7, #32]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f8f4 	bl	800250c <I2C_WaitOnTXEFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	2b04      	cmp	r3, #4
 8002330:	d107      	bne.n	8002342 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002340:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e005      	b.n	8002352 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002346:	893b      	ldrh	r3, [r7, #8]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	00010002 	.word	0x00010002

08002360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002370:	e025      	b.n	80023be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d021      	beq.n	80023be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237a:	f7ff fa77 	bl	800186c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d302      	bcc.n	8002390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d116      	bne.n	80023be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f043 0220 	orr.w	r2, r3, #32
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e023      	b.n	8002406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10d      	bne.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4013      	ands	r3, r2
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	bf0c      	ite	eq
 80023da:	2301      	moveq	r3, #1
 80023dc:	2300      	movne	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	e00c      	b.n	80023fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4013      	ands	r3, r2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	429a      	cmp	r2, r3
 8002402:	d0b6      	beq.n	8002372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800241c:	e051      	b.n	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242c:	d123      	bne.n	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f043 0204 	orr.w	r2, r3, #4
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e046      	b.n	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d021      	beq.n	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247e:	f7ff f9f5 	bl	800186c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	d302      	bcc.n	8002494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d116      	bne.n	80024c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	f043 0220 	orr.w	r2, r3, #32
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e020      	b.n	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d10c      	bne.n	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4013      	ands	r3, r2
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	e00b      	b.n	80024fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	43da      	mvns	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d18d      	bne.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002518:	e02d      	b.n	8002576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f878 	bl	8002610 <I2C_IsAcknowledgeFailed>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e02d      	b.n	8002586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d021      	beq.n	8002576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002532:	f7ff f99b 	bl	800186c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	d302      	bcc.n	8002548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d116      	bne.n	8002576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e007      	b.n	8002586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002580:	2b80      	cmp	r3, #128	; 0x80
 8002582:	d1ca      	bne.n	800251a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800259a:	e02d      	b.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f837 	bl	8002610 <I2C_IsAcknowledgeFailed>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e02d      	b.n	8002608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d021      	beq.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b4:	f7ff f95a 	bl	800186c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d302      	bcc.n	80025ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e007      	b.n	8002608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b04      	cmp	r3, #4
 8002604:	d1ca      	bne.n	800259c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002626:	d11b      	bne.n	8002660 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002630:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0204 	orr.w	r2, r3, #4
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e26c      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8087 	beq.w	800279a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800268c:	4b92      	ldr	r3, [pc, #584]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b04      	cmp	r3, #4
 8002696:	d00c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002698:	4b8f      	ldr	r3, [pc, #572]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d112      	bne.n	80026ca <HAL_RCC_OscConfig+0x5e>
 80026a4:	4b8c      	ldr	r3, [pc, #560]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d10b      	bne.n	80026ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b2:	4b89      	ldr	r3, [pc, #548]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d06c      	beq.n	8002798 <HAL_RCC_OscConfig+0x12c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d168      	bne.n	8002798 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e246      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x76>
 80026d4:	4b80      	ldr	r3, [pc, #512]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a7f      	ldr	r2, [pc, #508]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e02e      	b.n	8002740 <HAL_RCC_OscConfig+0xd4>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x98>
 80026ea:	4b7b      	ldr	r3, [pc, #492]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a7a      	ldr	r2, [pc, #488]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b78      	ldr	r3, [pc, #480]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a77      	ldr	r2, [pc, #476]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e01d      	b.n	8002740 <HAL_RCC_OscConfig+0xd4>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0xbc>
 800270e:	4b72      	ldr	r3, [pc, #456]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a71      	ldr	r2, [pc, #452]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b6f      	ldr	r3, [pc, #444]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6e      	ldr	r2, [pc, #440]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0xd4>
 8002728:	4b6b      	ldr	r3, [pc, #428]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a6a      	ldr	r2, [pc, #424]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800272e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b68      	ldr	r3, [pc, #416]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a67      	ldr	r2, [pc, #412]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800273a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7ff f890 	bl	800186c <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7ff f88c 	bl	800186c <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1fa      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b5d      	ldr	r3, [pc, #372]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0xe4>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff f87c 	bl	800186c <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff f878 	bl	800186c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e1e6      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278a:	4b53      	ldr	r3, [pc, #332]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x10c>
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d063      	beq.n	800286e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027a6:	4b4c      	ldr	r3, [pc, #304]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027b2:	4b49      	ldr	r3, [pc, #292]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d11c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x18c>
 80027be:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d116      	bne.n	80027f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x176>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d001      	beq.n	80027e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e1ba      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4939      	ldr	r1, [pc, #228]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f6:	e03a      	b.n	800286e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d020      	beq.n	8002842 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002800:	4b36      	ldr	r3, [pc, #216]	; (80028dc <HAL_RCC_OscConfig+0x270>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7ff f831 	bl	800186c <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280e:	f7ff f82d 	bl	800186c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e19b      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002820:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282c:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4927      	ldr	r1, [pc, #156]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	600b      	str	r3, [r1, #0]
 8002840:	e015      	b.n	800286e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <HAL_RCC_OscConfig+0x270>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7ff f810 	bl	800186c <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002850:	f7ff f80c 	bl	800186c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e17a      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d03a      	beq.n	80028f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d019      	beq.n	80028b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <HAL_RCC_OscConfig+0x274>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7fe fff0 	bl	800186c <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002890:	f7fe ffec 	bl	800186c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e15a      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028ae:	2001      	movs	r0, #1
 80028b0:	f000 fada 	bl	8002e68 <RCC_Delay>
 80028b4:	e01c      	b.n	80028f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_RCC_OscConfig+0x274>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028bc:	f7fe ffd6 	bl	800186c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c2:	e00f      	b.n	80028e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c4:	f7fe ffd2 	bl	800186c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d908      	bls.n	80028e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e140      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	42420000 	.word	0x42420000
 80028e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	4b9e      	ldr	r3, [pc, #632]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e9      	bne.n	80028c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a6 	beq.w	8002a4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002902:	4b97      	ldr	r3, [pc, #604]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10d      	bne.n	800292a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	4b94      	ldr	r3, [pc, #592]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	4a93      	ldr	r2, [pc, #588]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	61d3      	str	r3, [r2, #28]
 800291a:	4b91      	ldr	r3, [pc, #580]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292a:	4b8e      	ldr	r3, [pc, #568]	; (8002b64 <HAL_RCC_OscConfig+0x4f8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d118      	bne.n	8002968 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002936:	4b8b      	ldr	r3, [pc, #556]	; (8002b64 <HAL_RCC_OscConfig+0x4f8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a8a      	ldr	r2, [pc, #552]	; (8002b64 <HAL_RCC_OscConfig+0x4f8>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002942:	f7fe ff93 	bl	800186c <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294a:	f7fe ff8f 	bl	800186c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b64      	cmp	r3, #100	; 0x64
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e0fd      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	4b81      	ldr	r3, [pc, #516]	; (8002b64 <HAL_RCC_OscConfig+0x4f8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d106      	bne.n	800297e <HAL_RCC_OscConfig+0x312>
 8002970:	4b7b      	ldr	r3, [pc, #492]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4a7a      	ldr	r2, [pc, #488]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6213      	str	r3, [r2, #32]
 800297c:	e02d      	b.n	80029da <HAL_RCC_OscConfig+0x36e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x334>
 8002986:	4b76      	ldr	r3, [pc, #472]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a75      	ldr	r2, [pc, #468]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	4b73      	ldr	r3, [pc, #460]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4a72      	ldr	r2, [pc, #456]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	f023 0304 	bic.w	r3, r3, #4
 800299c:	6213      	str	r3, [r2, #32]
 800299e:	e01c      	b.n	80029da <HAL_RCC_OscConfig+0x36e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	d10c      	bne.n	80029c2 <HAL_RCC_OscConfig+0x356>
 80029a8:	4b6d      	ldr	r3, [pc, #436]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4a6c      	ldr	r2, [pc, #432]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	6213      	str	r3, [r2, #32]
 80029b4:	4b6a      	ldr	r3, [pc, #424]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4a69      	ldr	r2, [pc, #420]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6213      	str	r3, [r2, #32]
 80029c0:	e00b      	b.n	80029da <HAL_RCC_OscConfig+0x36e>
 80029c2:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4a66      	ldr	r2, [pc, #408]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	6213      	str	r3, [r2, #32]
 80029ce:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4a63      	ldr	r2, [pc, #396]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 80029d4:	f023 0304 	bic.w	r3, r3, #4
 80029d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d015      	beq.n	8002a0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7fe ff43 	bl	800186c <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe ff3f 	bl	800186c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0ab      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	4b57      	ldr	r3, [pc, #348]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ee      	beq.n	80029ea <HAL_RCC_OscConfig+0x37e>
 8002a0c:	e014      	b.n	8002a38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe ff2d 	bl	800186c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe ff29 	bl	800186c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e095      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	4b4c      	ldr	r3, [pc, #304]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ee      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b48      	ldr	r3, [pc, #288]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	4a47      	ldr	r2, [pc, #284]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 8081 	beq.w	8002b56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a54:	4b42      	ldr	r3, [pc, #264]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 030c 	and.w	r3, r3, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d061      	beq.n	8002b24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d146      	bne.n	8002af6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a68:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <HAL_RCC_OscConfig+0x4fc>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fefd 	bl	800186c <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe fef9 	bl	800186c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e067      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a88:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d108      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a9e:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	492d      	ldr	r1, [pc, #180]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab0:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a19      	ldr	r1, [r3, #32]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	4927      	ldr	r1, [pc, #156]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_OscConfig+0x4fc>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7fe fecd 	bl	800186c <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7fe fec9 	bl	800186c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e037      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x46a>
 8002af4:	e02f      	b.n	8002b56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <HAL_RCC_OscConfig+0x4fc>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe feb6 	bl	800186c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe feb2 	bl	800186c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e020      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x498>
 8002b22:	e018      	b.n	8002b56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e013      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40007000 	.word	0x40007000
 8002b68:	42420060 	.word	0x42420060

08002b6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0d0      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d910      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	4965      	ldr	r1, [pc, #404]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494d      	ldr	r1, [pc, #308]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d040      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d115      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2a:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e073      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06b      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4a:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4936      	ldr	r1, [pc, #216]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fe06 	bl	800186c <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7fe fe02 	bl	800186c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e053      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 020c 	and.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d210      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 0207 	bic.w	r2, r3, #7
 8002ca2:	4922      	ldr	r1, [pc, #136]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4916      	ldr	r1, [pc, #88]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490e      	ldr	r1, [pc, #56]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f821 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4601      	mov	r1, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	5cd3      	ldrb	r3, [r2, r3]
 8002d0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1cc>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1d0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fd64 	bl	80017e8 <HAL_InitTick>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08005218 	.word	0x08005218
 8002d38:	20000400 	.word	0x20000400
 8002d3c:	20000944 	.word	0x20000944

08002d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	b490      	push	{r4, r7}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d46:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d48:	1d3c      	adds	r4, r7, #4
 8002d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d50:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d6a:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d002      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x40>
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCC_GetSysClockFreq+0x46>
 8002d7e:	e02d      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d80:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d82:	623b      	str	r3, [r7, #32]
      break;
 8002d84:	e02d      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	0c9b      	lsrs	r3, r3, #18
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d92:	4413      	add	r3, r2
 8002d94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	0c5b      	lsrs	r3, r3, #17
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002db2:	4413      	add	r3, r2
 8002db4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002db8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dbe:	fb02 f203 	mul.w	r2, r2, r3
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e004      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	4a0c      	ldr	r2, [pc, #48]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dd0:	fb02 f303 	mul.w	r3, r2, r3
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	623b      	str	r3, [r7, #32]
      break;
 8002dda:	e002      	b.n	8002de2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dde:	623b      	str	r3, [r7, #32]
      break;
 8002de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de2:	6a3b      	ldr	r3, [r7, #32]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc90      	pop	{r4, r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	08005204 	.word	0x08005204
 8002df4:	08005214 	.word	0x08005214
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	007a1200 	.word	0x007a1200
 8002e00:	003d0900 	.word	0x003d0900

08002e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000400 	.word	0x20000400

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e1c:	f7ff fff2 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e20:	4601      	mov	r1, r0
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4a03      	ldr	r2, [pc, #12]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e2e:	5cd3      	ldrb	r3, [r2, r3]
 8002e30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	08005228 	.word	0x08005228

08002e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e44:	f7ff ffde 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e48:	4601      	mov	r1, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0adb      	lsrs	r3, r3, #11
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4a03      	ldr	r2, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08005228 	.word	0x08005228

08002e68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <RCC_Delay+0x34>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <RCC_Delay+0x38>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	0a5b      	lsrs	r3, r3, #9
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e84:	bf00      	nop
  }
  while (Delay --);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1e5a      	subs	r2, r3, #1
 8002e8a:	60fa      	str	r2, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f9      	bne.n	8002e84 <RCC_Delay+0x1c>
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000400 	.word	0x20000400
 8002ea0:	10624dd3 	.word	0x10624dd3

08002ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e03f      	b.n	8002f36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe f8f0 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f829 	bl	8002f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f7a:	f023 030c 	bic.w	r3, r3, #12
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a52      	ldr	r2, [pc, #328]	; (80030ec <UART_SetConfig+0x1ac>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d14e      	bne.n	8003046 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7ff ff4a 	bl	8002e40 <HAL_RCC_GetPCLK2Freq>
 8002fac:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009a      	lsls	r2, r3, #2
 8002fb8:	441a      	add	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	4a4a      	ldr	r2, [pc, #296]	; (80030f0 <UART_SetConfig+0x1b0>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	0119      	lsls	r1, r3, #4
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009a      	lsls	r2, r3, #2
 8002fd8:	441a      	add	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe4:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <UART_SetConfig+0x1b0>)
 8002fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	2064      	movs	r0, #100	; 0x64
 8002fee:	fb00 f303 	mul.w	r3, r0, r3
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	3332      	adds	r3, #50	; 0x32
 8002ff8:	4a3d      	ldr	r2, [pc, #244]	; (80030f0 <UART_SetConfig+0x1b0>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003004:	4419      	add	r1, r3
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009a      	lsls	r2, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fbb2 f2f3 	udiv	r2, r2, r3
 800301c:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <UART_SetConfig+0x1b0>)
 800301e:	fba3 0302 	umull	r0, r3, r3, r2
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2064      	movs	r0, #100	; 0x64
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	3332      	adds	r3, #50	; 0x32
 8003030:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <UART_SetConfig+0x1b0>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	f003 020f 	and.w	r2, r3, #15
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	440a      	add	r2, r1
 8003042:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003044:	e04d      	b.n	80030e2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003046:	f7ff fee7 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 800304a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009a      	lsls	r2, r3, #2
 8003056:	441a      	add	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	4a23      	ldr	r2, [pc, #140]	; (80030f0 <UART_SetConfig+0x1b0>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	0119      	lsls	r1, r3, #4
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009a      	lsls	r2, r3, #2
 8003076:	441a      	add	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <UART_SetConfig+0x1b0>)
 8003084:	fba3 0302 	umull	r0, r3, r3, r2
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	2064      	movs	r0, #100	; 0x64
 800308c:	fb00 f303 	mul.w	r3, r0, r3
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	3332      	adds	r3, #50	; 0x32
 8003096:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <UART_SetConfig+0x1b0>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a2:	4419      	add	r1, r3
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	009a      	lsls	r2, r3, #2
 80030ae:	441a      	add	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <UART_SetConfig+0x1b0>)
 80030bc:	fba3 0302 	umull	r0, r3, r3, r2
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	2064      	movs	r0, #100	; 0x64
 80030c4:	fb00 f303 	mul.w	r3, r0, r3
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	3332      	adds	r3, #50	; 0x32
 80030ce:	4a08      	ldr	r2, [pc, #32]	; (80030f0 <UART_SetConfig+0x1b0>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	f003 020f 	and.w	r2, r3, #15
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	440a      	add	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]
}
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40013800 	.word	0x40013800
 80030f0:	51eb851f 	.word	0x51eb851f

080030f4 <__errno>:
 80030f4:	4b01      	ldr	r3, [pc, #4]	; (80030fc <__errno+0x8>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	2000094c 	.word	0x2000094c

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	2500      	movs	r5, #0
 8003104:	4e0c      	ldr	r6, [pc, #48]	; (8003138 <__libc_init_array+0x38>)
 8003106:	4c0d      	ldr	r4, [pc, #52]	; (800313c <__libc_init_array+0x3c>)
 8003108:	1ba4      	subs	r4, r4, r6
 800310a:	10a4      	asrs	r4, r4, #2
 800310c:	42a5      	cmp	r5, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	f002 f860 	bl	80051d4 <_init>
 8003114:	2500      	movs	r5, #0
 8003116:	4e0a      	ldr	r6, [pc, #40]	; (8003140 <__libc_init_array+0x40>)
 8003118:	4c0a      	ldr	r4, [pc, #40]	; (8003144 <__libc_init_array+0x44>)
 800311a:	1ba4      	subs	r4, r4, r6
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	42a5      	cmp	r5, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003128:	4798      	blx	r3
 800312a:	3501      	adds	r5, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003132:	4798      	blx	r3
 8003134:	3501      	adds	r5, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	08005d08 	.word	0x08005d08
 800313c:	08005d08 	.word	0x08005d08
 8003140:	08005d08 	.word	0x08005d08
 8003144:	08005d0c 	.word	0x08005d0c

08003148 <memset>:
 8003148:	4603      	mov	r3, r0
 800314a:	4402      	add	r2, r0
 800314c:	4293      	cmp	r3, r2
 800314e:	d100      	bne.n	8003152 <memset+0xa>
 8003150:	4770      	bx	lr
 8003152:	f803 1b01 	strb.w	r1, [r3], #1
 8003156:	e7f9      	b.n	800314c <memset+0x4>

08003158 <__cvt>:
 8003158:	2b00      	cmp	r3, #0
 800315a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800315e:	461e      	mov	r6, r3
 8003160:	bfbb      	ittet	lt
 8003162:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003166:	461e      	movlt	r6, r3
 8003168:	2300      	movge	r3, #0
 800316a:	232d      	movlt	r3, #45	; 0x2d
 800316c:	b088      	sub	sp, #32
 800316e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003170:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003174:	f027 0720 	bic.w	r7, r7, #32
 8003178:	2f46      	cmp	r7, #70	; 0x46
 800317a:	4614      	mov	r4, r2
 800317c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800317e:	700b      	strb	r3, [r1, #0]
 8003180:	d004      	beq.n	800318c <__cvt+0x34>
 8003182:	2f45      	cmp	r7, #69	; 0x45
 8003184:	d100      	bne.n	8003188 <__cvt+0x30>
 8003186:	3501      	adds	r5, #1
 8003188:	2302      	movs	r3, #2
 800318a:	e000      	b.n	800318e <__cvt+0x36>
 800318c:	2303      	movs	r3, #3
 800318e:	aa07      	add	r2, sp, #28
 8003190:	9204      	str	r2, [sp, #16]
 8003192:	aa06      	add	r2, sp, #24
 8003194:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003198:	e9cd 3500 	strd	r3, r5, [sp]
 800319c:	4622      	mov	r2, r4
 800319e:	4633      	mov	r3, r6
 80031a0:	f000 fcda 	bl	8003b58 <_dtoa_r>
 80031a4:	2f47      	cmp	r7, #71	; 0x47
 80031a6:	4680      	mov	r8, r0
 80031a8:	d102      	bne.n	80031b0 <__cvt+0x58>
 80031aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031ac:	07db      	lsls	r3, r3, #31
 80031ae:	d526      	bpl.n	80031fe <__cvt+0xa6>
 80031b0:	2f46      	cmp	r7, #70	; 0x46
 80031b2:	eb08 0905 	add.w	r9, r8, r5
 80031b6:	d111      	bne.n	80031dc <__cvt+0x84>
 80031b8:	f898 3000 	ldrb.w	r3, [r8]
 80031bc:	2b30      	cmp	r3, #48	; 0x30
 80031be:	d10a      	bne.n	80031d6 <__cvt+0x7e>
 80031c0:	2200      	movs	r2, #0
 80031c2:	2300      	movs	r3, #0
 80031c4:	4620      	mov	r0, r4
 80031c6:	4631      	mov	r1, r6
 80031c8:	f7fd fbee 	bl	80009a8 <__aeabi_dcmpeq>
 80031cc:	b918      	cbnz	r0, 80031d6 <__cvt+0x7e>
 80031ce:	f1c5 0501 	rsb	r5, r5, #1
 80031d2:	f8ca 5000 	str.w	r5, [sl]
 80031d6:	f8da 3000 	ldr.w	r3, [sl]
 80031da:	4499      	add	r9, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	2300      	movs	r3, #0
 80031e0:	4620      	mov	r0, r4
 80031e2:	4631      	mov	r1, r6
 80031e4:	f7fd fbe0 	bl	80009a8 <__aeabi_dcmpeq>
 80031e8:	b938      	cbnz	r0, 80031fa <__cvt+0xa2>
 80031ea:	2230      	movs	r2, #48	; 0x30
 80031ec:	9b07      	ldr	r3, [sp, #28]
 80031ee:	454b      	cmp	r3, r9
 80031f0:	d205      	bcs.n	80031fe <__cvt+0xa6>
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	9107      	str	r1, [sp, #28]
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e7f8      	b.n	80031ec <__cvt+0x94>
 80031fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80031fe:	4640      	mov	r0, r8
 8003200:	9b07      	ldr	r3, [sp, #28]
 8003202:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003204:	eba3 0308 	sub.w	r3, r3, r8
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	b008      	add	sp, #32
 800320c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003210 <__exponent>:
 8003210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003212:	2900      	cmp	r1, #0
 8003214:	bfb4      	ite	lt
 8003216:	232d      	movlt	r3, #45	; 0x2d
 8003218:	232b      	movge	r3, #43	; 0x2b
 800321a:	4604      	mov	r4, r0
 800321c:	bfb8      	it	lt
 800321e:	4249      	neglt	r1, r1
 8003220:	2909      	cmp	r1, #9
 8003222:	f804 2b02 	strb.w	r2, [r4], #2
 8003226:	7043      	strb	r3, [r0, #1]
 8003228:	dd21      	ble.n	800326e <__exponent+0x5e>
 800322a:	f10d 0307 	add.w	r3, sp, #7
 800322e:	461f      	mov	r7, r3
 8003230:	260a      	movs	r6, #10
 8003232:	fb91 f5f6 	sdiv	r5, r1, r6
 8003236:	fb06 1115 	mls	r1, r6, r5, r1
 800323a:	2d09      	cmp	r5, #9
 800323c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003240:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003244:	f103 32ff 	add.w	r2, r3, #4294967295
 8003248:	4629      	mov	r1, r5
 800324a:	dc09      	bgt.n	8003260 <__exponent+0x50>
 800324c:	3130      	adds	r1, #48	; 0x30
 800324e:	3b02      	subs	r3, #2
 8003250:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003254:	42bb      	cmp	r3, r7
 8003256:	4622      	mov	r2, r4
 8003258:	d304      	bcc.n	8003264 <__exponent+0x54>
 800325a:	1a10      	subs	r0, r2, r0
 800325c:	b003      	add	sp, #12
 800325e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003260:	4613      	mov	r3, r2
 8003262:	e7e6      	b.n	8003232 <__exponent+0x22>
 8003264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003268:	f804 2b01 	strb.w	r2, [r4], #1
 800326c:	e7f2      	b.n	8003254 <__exponent+0x44>
 800326e:	2330      	movs	r3, #48	; 0x30
 8003270:	4419      	add	r1, r3
 8003272:	7083      	strb	r3, [r0, #2]
 8003274:	1d02      	adds	r2, r0, #4
 8003276:	70c1      	strb	r1, [r0, #3]
 8003278:	e7ef      	b.n	800325a <__exponent+0x4a>
	...

0800327c <_printf_float>:
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	b091      	sub	sp, #68	; 0x44
 8003282:	460c      	mov	r4, r1
 8003284:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003286:	4693      	mov	fp, r2
 8003288:	461e      	mov	r6, r3
 800328a:	4605      	mov	r5, r0
 800328c:	f001 fa18 	bl	80046c0 <_localeconv_r>
 8003290:	6803      	ldr	r3, [r0, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	9309      	str	r3, [sp, #36]	; 0x24
 8003296:	f7fc ff5b 	bl	8000150 <strlen>
 800329a:	2300      	movs	r3, #0
 800329c:	930e      	str	r3, [sp, #56]	; 0x38
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	900a      	str	r0, [sp, #40]	; 0x28
 80032a2:	3307      	adds	r3, #7
 80032a4:	f023 0307 	bic.w	r3, r3, #7
 80032a8:	f103 0208 	add.w	r2, r3, #8
 80032ac:	f894 8018 	ldrb.w	r8, [r4, #24]
 80032b0:	f8d4 a000 	ldr.w	sl, [r4]
 80032b4:	603a      	str	r2, [r7, #0]
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80032be:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80032c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80032c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	4ba6      	ldr	r3, [pc, #664]	; (8003568 <_printf_float+0x2ec>)
 80032ce:	4638      	mov	r0, r7
 80032d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032d2:	f7fd fb9b 	bl	8000a0c <__aeabi_dcmpun>
 80032d6:	bb68      	cbnz	r0, 8003334 <_printf_float+0xb8>
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	4ba2      	ldr	r3, [pc, #648]	; (8003568 <_printf_float+0x2ec>)
 80032de:	4638      	mov	r0, r7
 80032e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032e2:	f7fd fb75 	bl	80009d0 <__aeabi_dcmple>
 80032e6:	bb28      	cbnz	r0, 8003334 <_printf_float+0xb8>
 80032e8:	2200      	movs	r2, #0
 80032ea:	2300      	movs	r3, #0
 80032ec:	4638      	mov	r0, r7
 80032ee:	4649      	mov	r1, r9
 80032f0:	f7fd fb64 	bl	80009bc <__aeabi_dcmplt>
 80032f4:	b110      	cbz	r0, 80032fc <_printf_float+0x80>
 80032f6:	232d      	movs	r3, #45	; 0x2d
 80032f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032fc:	4f9b      	ldr	r7, [pc, #620]	; (800356c <_printf_float+0x2f0>)
 80032fe:	4b9c      	ldr	r3, [pc, #624]	; (8003570 <_printf_float+0x2f4>)
 8003300:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003304:	bf98      	it	ls
 8003306:	461f      	movls	r7, r3
 8003308:	2303      	movs	r3, #3
 800330a:	f04f 0900 	mov.w	r9, #0
 800330e:	6123      	str	r3, [r4, #16]
 8003310:	f02a 0304 	bic.w	r3, sl, #4
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	9600      	str	r6, [sp, #0]
 8003318:	465b      	mov	r3, fp
 800331a:	aa0f      	add	r2, sp, #60	; 0x3c
 800331c:	4621      	mov	r1, r4
 800331e:	4628      	mov	r0, r5
 8003320:	f000 f9e2 	bl	80036e8 <_printf_common>
 8003324:	3001      	adds	r0, #1
 8003326:	f040 8090 	bne.w	800344a <_printf_float+0x1ce>
 800332a:	f04f 30ff 	mov.w	r0, #4294967295
 800332e:	b011      	add	sp, #68	; 0x44
 8003330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003334:	463a      	mov	r2, r7
 8003336:	464b      	mov	r3, r9
 8003338:	4638      	mov	r0, r7
 800333a:	4649      	mov	r1, r9
 800333c:	f7fd fb66 	bl	8000a0c <__aeabi_dcmpun>
 8003340:	b110      	cbz	r0, 8003348 <_printf_float+0xcc>
 8003342:	4f8c      	ldr	r7, [pc, #560]	; (8003574 <_printf_float+0x2f8>)
 8003344:	4b8c      	ldr	r3, [pc, #560]	; (8003578 <_printf_float+0x2fc>)
 8003346:	e7db      	b.n	8003300 <_printf_float+0x84>
 8003348:	6863      	ldr	r3, [r4, #4]
 800334a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800334e:	1c59      	adds	r1, r3, #1
 8003350:	a80d      	add	r0, sp, #52	; 0x34
 8003352:	a90e      	add	r1, sp, #56	; 0x38
 8003354:	d140      	bne.n	80033d8 <_printf_float+0x15c>
 8003356:	2306      	movs	r3, #6
 8003358:	6063      	str	r3, [r4, #4]
 800335a:	f04f 0c00 	mov.w	ip, #0
 800335e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8003362:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003366:	6863      	ldr	r3, [r4, #4]
 8003368:	6022      	str	r2, [r4, #0]
 800336a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	463a      	mov	r2, r7
 8003372:	464b      	mov	r3, r9
 8003374:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003378:	4628      	mov	r0, r5
 800337a:	f7ff feed 	bl	8003158 <__cvt>
 800337e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003382:	2b47      	cmp	r3, #71	; 0x47
 8003384:	4607      	mov	r7, r0
 8003386:	d109      	bne.n	800339c <_printf_float+0x120>
 8003388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800338a:	1cd8      	adds	r0, r3, #3
 800338c:	db02      	blt.n	8003394 <_printf_float+0x118>
 800338e:	6862      	ldr	r2, [r4, #4]
 8003390:	4293      	cmp	r3, r2
 8003392:	dd47      	ble.n	8003424 <_printf_float+0x1a8>
 8003394:	f1a8 0802 	sub.w	r8, r8, #2
 8003398:	fa5f f888 	uxtb.w	r8, r8
 800339c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80033a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033a2:	d824      	bhi.n	80033ee <_printf_float+0x172>
 80033a4:	3901      	subs	r1, #1
 80033a6:	4642      	mov	r2, r8
 80033a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033ac:	910d      	str	r1, [sp, #52]	; 0x34
 80033ae:	f7ff ff2f 	bl	8003210 <__exponent>
 80033b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033b4:	4681      	mov	r9, r0
 80033b6:	1813      	adds	r3, r2, r0
 80033b8:	2a01      	cmp	r2, #1
 80033ba:	6123      	str	r3, [r4, #16]
 80033bc:	dc02      	bgt.n	80033c4 <_printf_float+0x148>
 80033be:	6822      	ldr	r2, [r4, #0]
 80033c0:	07d1      	lsls	r1, r2, #31
 80033c2:	d501      	bpl.n	80033c8 <_printf_float+0x14c>
 80033c4:	3301      	adds	r3, #1
 80033c6:	6123      	str	r3, [r4, #16]
 80033c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0a2      	beq.n	8003316 <_printf_float+0x9a>
 80033d0:	232d      	movs	r3, #45	; 0x2d
 80033d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033d6:	e79e      	b.n	8003316 <_printf_float+0x9a>
 80033d8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80033dc:	f000 816e 	beq.w	80036bc <_printf_float+0x440>
 80033e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033e4:	d1b9      	bne.n	800335a <_printf_float+0xde>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1b7      	bne.n	800335a <_printf_float+0xde>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e7b4      	b.n	8003358 <_printf_float+0xdc>
 80033ee:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80033f2:	d119      	bne.n	8003428 <_printf_float+0x1ac>
 80033f4:	2900      	cmp	r1, #0
 80033f6:	6863      	ldr	r3, [r4, #4]
 80033f8:	dd0c      	ble.n	8003414 <_printf_float+0x198>
 80033fa:	6121      	str	r1, [r4, #16]
 80033fc:	b913      	cbnz	r3, 8003404 <_printf_float+0x188>
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	07d2      	lsls	r2, r2, #31
 8003402:	d502      	bpl.n	800340a <_printf_float+0x18e>
 8003404:	3301      	adds	r3, #1
 8003406:	440b      	add	r3, r1
 8003408:	6123      	str	r3, [r4, #16]
 800340a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800340c:	f04f 0900 	mov.w	r9, #0
 8003410:	65a3      	str	r3, [r4, #88]	; 0x58
 8003412:	e7d9      	b.n	80033c8 <_printf_float+0x14c>
 8003414:	b913      	cbnz	r3, 800341c <_printf_float+0x1a0>
 8003416:	6822      	ldr	r2, [r4, #0]
 8003418:	07d0      	lsls	r0, r2, #31
 800341a:	d501      	bpl.n	8003420 <_printf_float+0x1a4>
 800341c:	3302      	adds	r3, #2
 800341e:	e7f3      	b.n	8003408 <_printf_float+0x18c>
 8003420:	2301      	movs	r3, #1
 8003422:	e7f1      	b.n	8003408 <_printf_float+0x18c>
 8003424:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003428:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800342c:	4293      	cmp	r3, r2
 800342e:	db05      	blt.n	800343c <_printf_float+0x1c0>
 8003430:	6822      	ldr	r2, [r4, #0]
 8003432:	6123      	str	r3, [r4, #16]
 8003434:	07d1      	lsls	r1, r2, #31
 8003436:	d5e8      	bpl.n	800340a <_printf_float+0x18e>
 8003438:	3301      	adds	r3, #1
 800343a:	e7e5      	b.n	8003408 <_printf_float+0x18c>
 800343c:	2b00      	cmp	r3, #0
 800343e:	bfcc      	ite	gt
 8003440:	2301      	movgt	r3, #1
 8003442:	f1c3 0302 	rsble	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	e7de      	b.n	8003408 <_printf_float+0x18c>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	055a      	lsls	r2, r3, #21
 800344e:	d407      	bmi.n	8003460 <_printf_float+0x1e4>
 8003450:	6923      	ldr	r3, [r4, #16]
 8003452:	463a      	mov	r2, r7
 8003454:	4659      	mov	r1, fp
 8003456:	4628      	mov	r0, r5
 8003458:	47b0      	blx	r6
 800345a:	3001      	adds	r0, #1
 800345c:	d129      	bne.n	80034b2 <_printf_float+0x236>
 800345e:	e764      	b.n	800332a <_printf_float+0xae>
 8003460:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003464:	f240 80d7 	bls.w	8003616 <_printf_float+0x39a>
 8003468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800346c:	2200      	movs	r2, #0
 800346e:	2300      	movs	r3, #0
 8003470:	f7fd fa9a 	bl	80009a8 <__aeabi_dcmpeq>
 8003474:	b388      	cbz	r0, 80034da <_printf_float+0x25e>
 8003476:	2301      	movs	r3, #1
 8003478:	4a40      	ldr	r2, [pc, #256]	; (800357c <_printf_float+0x300>)
 800347a:	4659      	mov	r1, fp
 800347c:	4628      	mov	r0, r5
 800347e:	47b0      	blx	r6
 8003480:	3001      	adds	r0, #1
 8003482:	f43f af52 	beq.w	800332a <_printf_float+0xae>
 8003486:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800348a:	429a      	cmp	r2, r3
 800348c:	db02      	blt.n	8003494 <_printf_float+0x218>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	07d8      	lsls	r0, r3, #31
 8003492:	d50e      	bpl.n	80034b2 <_printf_float+0x236>
 8003494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003498:	4659      	mov	r1, fp
 800349a:	4628      	mov	r0, r5
 800349c:	47b0      	blx	r6
 800349e:	3001      	adds	r0, #1
 80034a0:	f43f af43 	beq.w	800332a <_printf_float+0xae>
 80034a4:	2700      	movs	r7, #0
 80034a6:	f104 081a 	add.w	r8, r4, #26
 80034aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034ac:	3b01      	subs	r3, #1
 80034ae:	42bb      	cmp	r3, r7
 80034b0:	dc09      	bgt.n	80034c6 <_printf_float+0x24a>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	079f      	lsls	r7, r3, #30
 80034b6:	f100 80fd 	bmi.w	80036b4 <_printf_float+0x438>
 80034ba:	68e0      	ldr	r0, [r4, #12]
 80034bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034be:	4298      	cmp	r0, r3
 80034c0:	bfb8      	it	lt
 80034c2:	4618      	movlt	r0, r3
 80034c4:	e733      	b.n	800332e <_printf_float+0xb2>
 80034c6:	2301      	movs	r3, #1
 80034c8:	4642      	mov	r2, r8
 80034ca:	4659      	mov	r1, fp
 80034cc:	4628      	mov	r0, r5
 80034ce:	47b0      	blx	r6
 80034d0:	3001      	adds	r0, #1
 80034d2:	f43f af2a 	beq.w	800332a <_printf_float+0xae>
 80034d6:	3701      	adds	r7, #1
 80034d8:	e7e7      	b.n	80034aa <_printf_float+0x22e>
 80034da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034dc:	2b00      	cmp	r3, #0
 80034de:	dc2b      	bgt.n	8003538 <_printf_float+0x2bc>
 80034e0:	2301      	movs	r3, #1
 80034e2:	4a26      	ldr	r2, [pc, #152]	; (800357c <_printf_float+0x300>)
 80034e4:	4659      	mov	r1, fp
 80034e6:	4628      	mov	r0, r5
 80034e8:	47b0      	blx	r6
 80034ea:	3001      	adds	r0, #1
 80034ec:	f43f af1d 	beq.w	800332a <_printf_float+0xae>
 80034f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034f2:	b923      	cbnz	r3, 80034fe <_printf_float+0x282>
 80034f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034f6:	b913      	cbnz	r3, 80034fe <_printf_float+0x282>
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	07d9      	lsls	r1, r3, #31
 80034fc:	d5d9      	bpl.n	80034b2 <_printf_float+0x236>
 80034fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003502:	4659      	mov	r1, fp
 8003504:	4628      	mov	r0, r5
 8003506:	47b0      	blx	r6
 8003508:	3001      	adds	r0, #1
 800350a:	f43f af0e 	beq.w	800332a <_printf_float+0xae>
 800350e:	f04f 0800 	mov.w	r8, #0
 8003512:	f104 091a 	add.w	r9, r4, #26
 8003516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003518:	425b      	negs	r3, r3
 800351a:	4543      	cmp	r3, r8
 800351c:	dc01      	bgt.n	8003522 <_printf_float+0x2a6>
 800351e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003520:	e797      	b.n	8003452 <_printf_float+0x1d6>
 8003522:	2301      	movs	r3, #1
 8003524:	464a      	mov	r2, r9
 8003526:	4659      	mov	r1, fp
 8003528:	4628      	mov	r0, r5
 800352a:	47b0      	blx	r6
 800352c:	3001      	adds	r0, #1
 800352e:	f43f aefc 	beq.w	800332a <_printf_float+0xae>
 8003532:	f108 0801 	add.w	r8, r8, #1
 8003536:	e7ee      	b.n	8003516 <_printf_float+0x29a>
 8003538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800353a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800353c:	429a      	cmp	r2, r3
 800353e:	bfa8      	it	ge
 8003540:	461a      	movge	r2, r3
 8003542:	2a00      	cmp	r2, #0
 8003544:	4690      	mov	r8, r2
 8003546:	dd07      	ble.n	8003558 <_printf_float+0x2dc>
 8003548:	4613      	mov	r3, r2
 800354a:	4659      	mov	r1, fp
 800354c:	463a      	mov	r2, r7
 800354e:	4628      	mov	r0, r5
 8003550:	47b0      	blx	r6
 8003552:	3001      	adds	r0, #1
 8003554:	f43f aee9 	beq.w	800332a <_printf_float+0xae>
 8003558:	f104 031a 	add.w	r3, r4, #26
 800355c:	f04f 0a00 	mov.w	sl, #0
 8003560:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003564:	930b      	str	r3, [sp, #44]	; 0x2c
 8003566:	e015      	b.n	8003594 <_printf_float+0x318>
 8003568:	7fefffff 	.word	0x7fefffff
 800356c:	08005a4c 	.word	0x08005a4c
 8003570:	08005a48 	.word	0x08005a48
 8003574:	08005a54 	.word	0x08005a54
 8003578:	08005a50 	.word	0x08005a50
 800357c:	08005a58 	.word	0x08005a58
 8003580:	2301      	movs	r3, #1
 8003582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003584:	4659      	mov	r1, fp
 8003586:	4628      	mov	r0, r5
 8003588:	47b0      	blx	r6
 800358a:	3001      	adds	r0, #1
 800358c:	f43f aecd 	beq.w	800332a <_printf_float+0xae>
 8003590:	f10a 0a01 	add.w	sl, sl, #1
 8003594:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003598:	eba9 0308 	sub.w	r3, r9, r8
 800359c:	4553      	cmp	r3, sl
 800359e:	dcef      	bgt.n	8003580 <_printf_float+0x304>
 80035a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035a4:	429a      	cmp	r2, r3
 80035a6:	444f      	add	r7, r9
 80035a8:	db14      	blt.n	80035d4 <_printf_float+0x358>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	07da      	lsls	r2, r3, #31
 80035ae:	d411      	bmi.n	80035d4 <_printf_float+0x358>
 80035b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035b4:	eba3 0209 	sub.w	r2, r3, r9
 80035b8:	eba3 0901 	sub.w	r9, r3, r1
 80035bc:	4591      	cmp	r9, r2
 80035be:	bfa8      	it	ge
 80035c0:	4691      	movge	r9, r2
 80035c2:	f1b9 0f00 	cmp.w	r9, #0
 80035c6:	dc0d      	bgt.n	80035e4 <_printf_float+0x368>
 80035c8:	2700      	movs	r7, #0
 80035ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035ce:	f104 081a 	add.w	r8, r4, #26
 80035d2:	e018      	b.n	8003606 <_printf_float+0x38a>
 80035d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035d8:	4659      	mov	r1, fp
 80035da:	4628      	mov	r0, r5
 80035dc:	47b0      	blx	r6
 80035de:	3001      	adds	r0, #1
 80035e0:	d1e6      	bne.n	80035b0 <_printf_float+0x334>
 80035e2:	e6a2      	b.n	800332a <_printf_float+0xae>
 80035e4:	464b      	mov	r3, r9
 80035e6:	463a      	mov	r2, r7
 80035e8:	4659      	mov	r1, fp
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b0      	blx	r6
 80035ee:	3001      	adds	r0, #1
 80035f0:	d1ea      	bne.n	80035c8 <_printf_float+0x34c>
 80035f2:	e69a      	b.n	800332a <_printf_float+0xae>
 80035f4:	2301      	movs	r3, #1
 80035f6:	4642      	mov	r2, r8
 80035f8:	4659      	mov	r1, fp
 80035fa:	4628      	mov	r0, r5
 80035fc:	47b0      	blx	r6
 80035fe:	3001      	adds	r0, #1
 8003600:	f43f ae93 	beq.w	800332a <_printf_float+0xae>
 8003604:	3701      	adds	r7, #1
 8003606:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	eba3 0309 	sub.w	r3, r3, r9
 8003610:	42bb      	cmp	r3, r7
 8003612:	dcef      	bgt.n	80035f4 <_printf_float+0x378>
 8003614:	e74d      	b.n	80034b2 <_printf_float+0x236>
 8003616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003618:	2a01      	cmp	r2, #1
 800361a:	dc01      	bgt.n	8003620 <_printf_float+0x3a4>
 800361c:	07db      	lsls	r3, r3, #31
 800361e:	d538      	bpl.n	8003692 <_printf_float+0x416>
 8003620:	2301      	movs	r3, #1
 8003622:	463a      	mov	r2, r7
 8003624:	4659      	mov	r1, fp
 8003626:	4628      	mov	r0, r5
 8003628:	47b0      	blx	r6
 800362a:	3001      	adds	r0, #1
 800362c:	f43f ae7d 	beq.w	800332a <_printf_float+0xae>
 8003630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003634:	4659      	mov	r1, fp
 8003636:	4628      	mov	r0, r5
 8003638:	47b0      	blx	r6
 800363a:	3001      	adds	r0, #1
 800363c:	f107 0701 	add.w	r7, r7, #1
 8003640:	f43f ae73 	beq.w	800332a <_printf_float+0xae>
 8003644:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800364a:	2200      	movs	r2, #0
 800364c:	f103 38ff 	add.w	r8, r3, #4294967295
 8003650:	2300      	movs	r3, #0
 8003652:	f7fd f9a9 	bl	80009a8 <__aeabi_dcmpeq>
 8003656:	b9c0      	cbnz	r0, 800368a <_printf_float+0x40e>
 8003658:	4643      	mov	r3, r8
 800365a:	463a      	mov	r2, r7
 800365c:	4659      	mov	r1, fp
 800365e:	4628      	mov	r0, r5
 8003660:	47b0      	blx	r6
 8003662:	3001      	adds	r0, #1
 8003664:	d10d      	bne.n	8003682 <_printf_float+0x406>
 8003666:	e660      	b.n	800332a <_printf_float+0xae>
 8003668:	2301      	movs	r3, #1
 800366a:	4642      	mov	r2, r8
 800366c:	4659      	mov	r1, fp
 800366e:	4628      	mov	r0, r5
 8003670:	47b0      	blx	r6
 8003672:	3001      	adds	r0, #1
 8003674:	f43f ae59 	beq.w	800332a <_printf_float+0xae>
 8003678:	3701      	adds	r7, #1
 800367a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800367c:	3b01      	subs	r3, #1
 800367e:	42bb      	cmp	r3, r7
 8003680:	dcf2      	bgt.n	8003668 <_printf_float+0x3ec>
 8003682:	464b      	mov	r3, r9
 8003684:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003688:	e6e4      	b.n	8003454 <_printf_float+0x1d8>
 800368a:	2700      	movs	r7, #0
 800368c:	f104 081a 	add.w	r8, r4, #26
 8003690:	e7f3      	b.n	800367a <_printf_float+0x3fe>
 8003692:	2301      	movs	r3, #1
 8003694:	e7e1      	b.n	800365a <_printf_float+0x3de>
 8003696:	2301      	movs	r3, #1
 8003698:	4642      	mov	r2, r8
 800369a:	4659      	mov	r1, fp
 800369c:	4628      	mov	r0, r5
 800369e:	47b0      	blx	r6
 80036a0:	3001      	adds	r0, #1
 80036a2:	f43f ae42 	beq.w	800332a <_printf_float+0xae>
 80036a6:	3701      	adds	r7, #1
 80036a8:	68e3      	ldr	r3, [r4, #12]
 80036aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	42bb      	cmp	r3, r7
 80036b0:	dcf1      	bgt.n	8003696 <_printf_float+0x41a>
 80036b2:	e702      	b.n	80034ba <_printf_float+0x23e>
 80036b4:	2700      	movs	r7, #0
 80036b6:	f104 0819 	add.w	r8, r4, #25
 80036ba:	e7f5      	b.n	80036a8 <_printf_float+0x42c>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f43f ae94 	beq.w	80033ea <_printf_float+0x16e>
 80036c2:	f04f 0c00 	mov.w	ip, #0
 80036c6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80036ca:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80036ce:	6022      	str	r2, [r4, #0]
 80036d0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80036d4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	463a      	mov	r2, r7
 80036dc:	464b      	mov	r3, r9
 80036de:	4628      	mov	r0, r5
 80036e0:	f7ff fd3a 	bl	8003158 <__cvt>
 80036e4:	4607      	mov	r7, r0
 80036e6:	e64f      	b.n	8003388 <_printf_float+0x10c>

080036e8 <_printf_common>:
 80036e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036ec:	4691      	mov	r9, r2
 80036ee:	461f      	mov	r7, r3
 80036f0:	688a      	ldr	r2, [r1, #8]
 80036f2:	690b      	ldr	r3, [r1, #16]
 80036f4:	4606      	mov	r6, r0
 80036f6:	4293      	cmp	r3, r2
 80036f8:	bfb8      	it	lt
 80036fa:	4613      	movlt	r3, r2
 80036fc:	f8c9 3000 	str.w	r3, [r9]
 8003700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003704:	460c      	mov	r4, r1
 8003706:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800370a:	b112      	cbz	r2, 8003712 <_printf_common+0x2a>
 800370c:	3301      	adds	r3, #1
 800370e:	f8c9 3000 	str.w	r3, [r9]
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	0699      	lsls	r1, r3, #26
 8003716:	bf42      	ittt	mi
 8003718:	f8d9 3000 	ldrmi.w	r3, [r9]
 800371c:	3302      	addmi	r3, #2
 800371e:	f8c9 3000 	strmi.w	r3, [r9]
 8003722:	6825      	ldr	r5, [r4, #0]
 8003724:	f015 0506 	ands.w	r5, r5, #6
 8003728:	d107      	bne.n	800373a <_printf_common+0x52>
 800372a:	f104 0a19 	add.w	sl, r4, #25
 800372e:	68e3      	ldr	r3, [r4, #12]
 8003730:	f8d9 2000 	ldr.w	r2, [r9]
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	42ab      	cmp	r3, r5
 8003738:	dc29      	bgt.n	800378e <_printf_common+0xa6>
 800373a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800373e:	6822      	ldr	r2, [r4, #0]
 8003740:	3300      	adds	r3, #0
 8003742:	bf18      	it	ne
 8003744:	2301      	movne	r3, #1
 8003746:	0692      	lsls	r2, r2, #26
 8003748:	d42e      	bmi.n	80037a8 <_printf_common+0xc0>
 800374a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800374e:	4639      	mov	r1, r7
 8003750:	4630      	mov	r0, r6
 8003752:	47c0      	blx	r8
 8003754:	3001      	adds	r0, #1
 8003756:	d021      	beq.n	800379c <_printf_common+0xb4>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	68e5      	ldr	r5, [r4, #12]
 800375c:	f003 0306 	and.w	r3, r3, #6
 8003760:	2b04      	cmp	r3, #4
 8003762:	bf18      	it	ne
 8003764:	2500      	movne	r5, #0
 8003766:	f8d9 2000 	ldr.w	r2, [r9]
 800376a:	f04f 0900 	mov.w	r9, #0
 800376e:	bf08      	it	eq
 8003770:	1aad      	subeq	r5, r5, r2
 8003772:	68a3      	ldr	r3, [r4, #8]
 8003774:	6922      	ldr	r2, [r4, #16]
 8003776:	bf08      	it	eq
 8003778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800377c:	4293      	cmp	r3, r2
 800377e:	bfc4      	itt	gt
 8003780:	1a9b      	subgt	r3, r3, r2
 8003782:	18ed      	addgt	r5, r5, r3
 8003784:	341a      	adds	r4, #26
 8003786:	454d      	cmp	r5, r9
 8003788:	d11a      	bne.n	80037c0 <_printf_common+0xd8>
 800378a:	2000      	movs	r0, #0
 800378c:	e008      	b.n	80037a0 <_printf_common+0xb8>
 800378e:	2301      	movs	r3, #1
 8003790:	4652      	mov	r2, sl
 8003792:	4639      	mov	r1, r7
 8003794:	4630      	mov	r0, r6
 8003796:	47c0      	blx	r8
 8003798:	3001      	adds	r0, #1
 800379a:	d103      	bne.n	80037a4 <_printf_common+0xbc>
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a4:	3501      	adds	r5, #1
 80037a6:	e7c2      	b.n	800372e <_printf_common+0x46>
 80037a8:	2030      	movs	r0, #48	; 0x30
 80037aa:	18e1      	adds	r1, r4, r3
 80037ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037b6:	4422      	add	r2, r4
 80037b8:	3302      	adds	r3, #2
 80037ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037be:	e7c4      	b.n	800374a <_printf_common+0x62>
 80037c0:	2301      	movs	r3, #1
 80037c2:	4622      	mov	r2, r4
 80037c4:	4639      	mov	r1, r7
 80037c6:	4630      	mov	r0, r6
 80037c8:	47c0      	blx	r8
 80037ca:	3001      	adds	r0, #1
 80037cc:	d0e6      	beq.n	800379c <_printf_common+0xb4>
 80037ce:	f109 0901 	add.w	r9, r9, #1
 80037d2:	e7d8      	b.n	8003786 <_printf_common+0x9e>

080037d4 <_printf_i>:
 80037d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037dc:	460c      	mov	r4, r1
 80037de:	7e09      	ldrb	r1, [r1, #24]
 80037e0:	b085      	sub	sp, #20
 80037e2:	296e      	cmp	r1, #110	; 0x6e
 80037e4:	4617      	mov	r7, r2
 80037e6:	4606      	mov	r6, r0
 80037e8:	4698      	mov	r8, r3
 80037ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037ec:	f000 80b3 	beq.w	8003956 <_printf_i+0x182>
 80037f0:	d822      	bhi.n	8003838 <_printf_i+0x64>
 80037f2:	2963      	cmp	r1, #99	; 0x63
 80037f4:	d036      	beq.n	8003864 <_printf_i+0x90>
 80037f6:	d80a      	bhi.n	800380e <_printf_i+0x3a>
 80037f8:	2900      	cmp	r1, #0
 80037fa:	f000 80b9 	beq.w	8003970 <_printf_i+0x19c>
 80037fe:	2958      	cmp	r1, #88	; 0x58
 8003800:	f000 8083 	beq.w	800390a <_printf_i+0x136>
 8003804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003808:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800380c:	e032      	b.n	8003874 <_printf_i+0xa0>
 800380e:	2964      	cmp	r1, #100	; 0x64
 8003810:	d001      	beq.n	8003816 <_printf_i+0x42>
 8003812:	2969      	cmp	r1, #105	; 0x69
 8003814:	d1f6      	bne.n	8003804 <_printf_i+0x30>
 8003816:	6820      	ldr	r0, [r4, #0]
 8003818:	6813      	ldr	r3, [r2, #0]
 800381a:	0605      	lsls	r5, r0, #24
 800381c:	f103 0104 	add.w	r1, r3, #4
 8003820:	d52a      	bpl.n	8003878 <_printf_i+0xa4>
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6011      	str	r1, [r2, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	da03      	bge.n	8003832 <_printf_i+0x5e>
 800382a:	222d      	movs	r2, #45	; 0x2d
 800382c:	425b      	negs	r3, r3
 800382e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003832:	486f      	ldr	r0, [pc, #444]	; (80039f0 <_printf_i+0x21c>)
 8003834:	220a      	movs	r2, #10
 8003836:	e039      	b.n	80038ac <_printf_i+0xd8>
 8003838:	2973      	cmp	r1, #115	; 0x73
 800383a:	f000 809d 	beq.w	8003978 <_printf_i+0x1a4>
 800383e:	d808      	bhi.n	8003852 <_printf_i+0x7e>
 8003840:	296f      	cmp	r1, #111	; 0x6f
 8003842:	d020      	beq.n	8003886 <_printf_i+0xb2>
 8003844:	2970      	cmp	r1, #112	; 0x70
 8003846:	d1dd      	bne.n	8003804 <_printf_i+0x30>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	f043 0320 	orr.w	r3, r3, #32
 800384e:	6023      	str	r3, [r4, #0]
 8003850:	e003      	b.n	800385a <_printf_i+0x86>
 8003852:	2975      	cmp	r1, #117	; 0x75
 8003854:	d017      	beq.n	8003886 <_printf_i+0xb2>
 8003856:	2978      	cmp	r1, #120	; 0x78
 8003858:	d1d4      	bne.n	8003804 <_printf_i+0x30>
 800385a:	2378      	movs	r3, #120	; 0x78
 800385c:	4865      	ldr	r0, [pc, #404]	; (80039f4 <_printf_i+0x220>)
 800385e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003862:	e055      	b.n	8003910 <_printf_i+0x13c>
 8003864:	6813      	ldr	r3, [r2, #0]
 8003866:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800386a:	1d19      	adds	r1, r3, #4
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6011      	str	r1, [r2, #0]
 8003870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003874:	2301      	movs	r3, #1
 8003876:	e08c      	b.n	8003992 <_printf_i+0x1be>
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800387e:	6011      	str	r1, [r2, #0]
 8003880:	bf18      	it	ne
 8003882:	b21b      	sxthne	r3, r3
 8003884:	e7cf      	b.n	8003826 <_printf_i+0x52>
 8003886:	6813      	ldr	r3, [r2, #0]
 8003888:	6825      	ldr	r5, [r4, #0]
 800388a:	1d18      	adds	r0, r3, #4
 800388c:	6010      	str	r0, [r2, #0]
 800388e:	0628      	lsls	r0, r5, #24
 8003890:	d501      	bpl.n	8003896 <_printf_i+0xc2>
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	e002      	b.n	800389c <_printf_i+0xc8>
 8003896:	0668      	lsls	r0, r5, #25
 8003898:	d5fb      	bpl.n	8003892 <_printf_i+0xbe>
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	296f      	cmp	r1, #111	; 0x6f
 800389e:	bf14      	ite	ne
 80038a0:	220a      	movne	r2, #10
 80038a2:	2208      	moveq	r2, #8
 80038a4:	4852      	ldr	r0, [pc, #328]	; (80039f0 <_printf_i+0x21c>)
 80038a6:	2100      	movs	r1, #0
 80038a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038ac:	6865      	ldr	r5, [r4, #4]
 80038ae:	2d00      	cmp	r5, #0
 80038b0:	60a5      	str	r5, [r4, #8]
 80038b2:	f2c0 8095 	blt.w	80039e0 <_printf_i+0x20c>
 80038b6:	6821      	ldr	r1, [r4, #0]
 80038b8:	f021 0104 	bic.w	r1, r1, #4
 80038bc:	6021      	str	r1, [r4, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d13d      	bne.n	800393e <_printf_i+0x16a>
 80038c2:	2d00      	cmp	r5, #0
 80038c4:	f040 808e 	bne.w	80039e4 <_printf_i+0x210>
 80038c8:	4665      	mov	r5, ip
 80038ca:	2a08      	cmp	r2, #8
 80038cc:	d10b      	bne.n	80038e6 <_printf_i+0x112>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	07db      	lsls	r3, r3, #31
 80038d2:	d508      	bpl.n	80038e6 <_printf_i+0x112>
 80038d4:	6923      	ldr	r3, [r4, #16]
 80038d6:	6862      	ldr	r2, [r4, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	bfde      	ittt	le
 80038dc:	2330      	movle	r3, #48	; 0x30
 80038de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038e6:	ebac 0305 	sub.w	r3, ip, r5
 80038ea:	6123      	str	r3, [r4, #16]
 80038ec:	f8cd 8000 	str.w	r8, [sp]
 80038f0:	463b      	mov	r3, r7
 80038f2:	aa03      	add	r2, sp, #12
 80038f4:	4621      	mov	r1, r4
 80038f6:	4630      	mov	r0, r6
 80038f8:	f7ff fef6 	bl	80036e8 <_printf_common>
 80038fc:	3001      	adds	r0, #1
 80038fe:	d14d      	bne.n	800399c <_printf_i+0x1c8>
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	b005      	add	sp, #20
 8003906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800390a:	4839      	ldr	r0, [pc, #228]	; (80039f0 <_printf_i+0x21c>)
 800390c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003910:	6813      	ldr	r3, [r2, #0]
 8003912:	6821      	ldr	r1, [r4, #0]
 8003914:	1d1d      	adds	r5, r3, #4
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6015      	str	r5, [r2, #0]
 800391a:	060a      	lsls	r2, r1, #24
 800391c:	d50b      	bpl.n	8003936 <_printf_i+0x162>
 800391e:	07ca      	lsls	r2, r1, #31
 8003920:	bf44      	itt	mi
 8003922:	f041 0120 	orrmi.w	r1, r1, #32
 8003926:	6021      	strmi	r1, [r4, #0]
 8003928:	b91b      	cbnz	r3, 8003932 <_printf_i+0x15e>
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	f022 0220 	bic.w	r2, r2, #32
 8003930:	6022      	str	r2, [r4, #0]
 8003932:	2210      	movs	r2, #16
 8003934:	e7b7      	b.n	80038a6 <_printf_i+0xd2>
 8003936:	064d      	lsls	r5, r1, #25
 8003938:	bf48      	it	mi
 800393a:	b29b      	uxthmi	r3, r3
 800393c:	e7ef      	b.n	800391e <_printf_i+0x14a>
 800393e:	4665      	mov	r5, ip
 8003940:	fbb3 f1f2 	udiv	r1, r3, r2
 8003944:	fb02 3311 	mls	r3, r2, r1, r3
 8003948:	5cc3      	ldrb	r3, [r0, r3]
 800394a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800394e:	460b      	mov	r3, r1
 8003950:	2900      	cmp	r1, #0
 8003952:	d1f5      	bne.n	8003940 <_printf_i+0x16c>
 8003954:	e7b9      	b.n	80038ca <_printf_i+0xf6>
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	6825      	ldr	r5, [r4, #0]
 800395a:	1d18      	adds	r0, r3, #4
 800395c:	6961      	ldr	r1, [r4, #20]
 800395e:	6010      	str	r0, [r2, #0]
 8003960:	0628      	lsls	r0, r5, #24
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	d501      	bpl.n	800396a <_printf_i+0x196>
 8003966:	6019      	str	r1, [r3, #0]
 8003968:	e002      	b.n	8003970 <_printf_i+0x19c>
 800396a:	066a      	lsls	r2, r5, #25
 800396c:	d5fb      	bpl.n	8003966 <_printf_i+0x192>
 800396e:	8019      	strh	r1, [r3, #0]
 8003970:	2300      	movs	r3, #0
 8003972:	4665      	mov	r5, ip
 8003974:	6123      	str	r3, [r4, #16]
 8003976:	e7b9      	b.n	80038ec <_printf_i+0x118>
 8003978:	6813      	ldr	r3, [r2, #0]
 800397a:	1d19      	adds	r1, r3, #4
 800397c:	6011      	str	r1, [r2, #0]
 800397e:	681d      	ldr	r5, [r3, #0]
 8003980:	6862      	ldr	r2, [r4, #4]
 8003982:	2100      	movs	r1, #0
 8003984:	4628      	mov	r0, r5
 8003986:	f000 feb1 	bl	80046ec <memchr>
 800398a:	b108      	cbz	r0, 8003990 <_printf_i+0x1bc>
 800398c:	1b40      	subs	r0, r0, r5
 800398e:	6060      	str	r0, [r4, #4]
 8003990:	6863      	ldr	r3, [r4, #4]
 8003992:	6123      	str	r3, [r4, #16]
 8003994:	2300      	movs	r3, #0
 8003996:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800399a:	e7a7      	b.n	80038ec <_printf_i+0x118>
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	462a      	mov	r2, r5
 80039a0:	4639      	mov	r1, r7
 80039a2:	4630      	mov	r0, r6
 80039a4:	47c0      	blx	r8
 80039a6:	3001      	adds	r0, #1
 80039a8:	d0aa      	beq.n	8003900 <_printf_i+0x12c>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	079b      	lsls	r3, r3, #30
 80039ae:	d413      	bmi.n	80039d8 <_printf_i+0x204>
 80039b0:	68e0      	ldr	r0, [r4, #12]
 80039b2:	9b03      	ldr	r3, [sp, #12]
 80039b4:	4298      	cmp	r0, r3
 80039b6:	bfb8      	it	lt
 80039b8:	4618      	movlt	r0, r3
 80039ba:	e7a3      	b.n	8003904 <_printf_i+0x130>
 80039bc:	2301      	movs	r3, #1
 80039be:	464a      	mov	r2, r9
 80039c0:	4639      	mov	r1, r7
 80039c2:	4630      	mov	r0, r6
 80039c4:	47c0      	blx	r8
 80039c6:	3001      	adds	r0, #1
 80039c8:	d09a      	beq.n	8003900 <_printf_i+0x12c>
 80039ca:	3501      	adds	r5, #1
 80039cc:	68e3      	ldr	r3, [r4, #12]
 80039ce:	9a03      	ldr	r2, [sp, #12]
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	42ab      	cmp	r3, r5
 80039d4:	dcf2      	bgt.n	80039bc <_printf_i+0x1e8>
 80039d6:	e7eb      	b.n	80039b0 <_printf_i+0x1dc>
 80039d8:	2500      	movs	r5, #0
 80039da:	f104 0919 	add.w	r9, r4, #25
 80039de:	e7f5      	b.n	80039cc <_printf_i+0x1f8>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1ac      	bne.n	800393e <_printf_i+0x16a>
 80039e4:	7803      	ldrb	r3, [r0, #0]
 80039e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039ee:	e76c      	b.n	80038ca <_printf_i+0xf6>
 80039f0:	08005a5a 	.word	0x08005a5a
 80039f4:	08005a6b 	.word	0x08005a6b

080039f8 <siprintf>:
 80039f8:	b40e      	push	{r1, r2, r3}
 80039fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039fe:	b500      	push	{lr}
 8003a00:	b09c      	sub	sp, #112	; 0x70
 8003a02:	ab1d      	add	r3, sp, #116	; 0x74
 8003a04:	9002      	str	r0, [sp, #8]
 8003a06:	9006      	str	r0, [sp, #24]
 8003a08:	9107      	str	r1, [sp, #28]
 8003a0a:	9104      	str	r1, [sp, #16]
 8003a0c:	4808      	ldr	r0, [pc, #32]	; (8003a30 <siprintf+0x38>)
 8003a0e:	4909      	ldr	r1, [pc, #36]	; (8003a34 <siprintf+0x3c>)
 8003a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a14:	9105      	str	r1, [sp, #20]
 8003a16:	6800      	ldr	r0, [r0, #0]
 8003a18:	a902      	add	r1, sp, #8
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	f001 fa6a 	bl	8004ef4 <_svfiprintf_r>
 8003a20:	2200      	movs	r2, #0
 8003a22:	9b02      	ldr	r3, [sp, #8]
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	b01c      	add	sp, #112	; 0x70
 8003a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a2c:	b003      	add	sp, #12
 8003a2e:	4770      	bx	lr
 8003a30:	2000094c 	.word	0x2000094c
 8003a34:	ffff0208 	.word	0xffff0208

08003a38 <quorem>:
 8003a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3c:	6903      	ldr	r3, [r0, #16]
 8003a3e:	690c      	ldr	r4, [r1, #16]
 8003a40:	4680      	mov	r8, r0
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	f2c0 8084 	blt.w	8003b50 <quorem+0x118>
 8003a48:	3c01      	subs	r4, #1
 8003a4a:	f101 0714 	add.w	r7, r1, #20
 8003a4e:	f100 0614 	add.w	r6, r0, #20
 8003a52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003a56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003a5a:	3501      	adds	r5, #1
 8003a5c:	fbb0 f5f5 	udiv	r5, r0, r5
 8003a60:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003a64:	eb06 030c 	add.w	r3, r6, ip
 8003a68:	eb07 090c 	add.w	r9, r7, ip
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	b39d      	cbz	r5, 8003ad8 <quorem+0xa0>
 8003a70:	f04f 0a00 	mov.w	sl, #0
 8003a74:	4638      	mov	r0, r7
 8003a76:	46b6      	mov	lr, r6
 8003a78:	46d3      	mov	fp, sl
 8003a7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a7e:	b293      	uxth	r3, r2
 8003a80:	fb05 a303 	mla	r3, r5, r3, sl
 8003a84:	0c12      	lsrs	r2, r2, #16
 8003a86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a8a:	fb05 a202 	mla	r2, r5, r2, sl
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	ebab 0303 	sub.w	r3, fp, r3
 8003a94:	f8de b000 	ldr.w	fp, [lr]
 8003a98:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003a9c:	fa1f fb8b 	uxth.w	fp, fp
 8003aa0:	445b      	add	r3, fp
 8003aa2:	fa1f fb82 	uxth.w	fp, r2
 8003aa6:	f8de 2000 	ldr.w	r2, [lr]
 8003aaa:	4581      	cmp	r9, r0
 8003aac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003aba:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003abe:	f84e 3b04 	str.w	r3, [lr], #4
 8003ac2:	d2da      	bcs.n	8003a7a <quorem+0x42>
 8003ac4:	f856 300c 	ldr.w	r3, [r6, ip]
 8003ac8:	b933      	cbnz	r3, 8003ad8 <quorem+0xa0>
 8003aca:	9b01      	ldr	r3, [sp, #4]
 8003acc:	3b04      	subs	r3, #4
 8003ace:	429e      	cmp	r6, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	d331      	bcc.n	8003b38 <quorem+0x100>
 8003ad4:	f8c8 4010 	str.w	r4, [r8, #16]
 8003ad8:	4640      	mov	r0, r8
 8003ada:	f001 f835 	bl	8004b48 <__mcmp>
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	db26      	blt.n	8003b30 <quorem+0xf8>
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f04f 0c00 	mov.w	ip, #0
 8003ae8:	3501      	adds	r5, #1
 8003aea:	f857 1b04 	ldr.w	r1, [r7], #4
 8003aee:	f8d0 e000 	ldr.w	lr, [r0]
 8003af2:	b28b      	uxth	r3, r1
 8003af4:	ebac 0303 	sub.w	r3, ip, r3
 8003af8:	fa1f f28e 	uxth.w	r2, lr
 8003afc:	4413      	add	r3, r2
 8003afe:	0c0a      	lsrs	r2, r1, #16
 8003b00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b0e:	45b9      	cmp	r9, r7
 8003b10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003b14:	f840 3b04 	str.w	r3, [r0], #4
 8003b18:	d2e7      	bcs.n	8003aea <quorem+0xb2>
 8003b1a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003b1e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003b22:	b92a      	cbnz	r2, 8003b30 <quorem+0xf8>
 8003b24:	3b04      	subs	r3, #4
 8003b26:	429e      	cmp	r6, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	d30b      	bcc.n	8003b44 <quorem+0x10c>
 8003b2c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003b30:	4628      	mov	r0, r5
 8003b32:	b003      	add	sp, #12
 8003b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	3b04      	subs	r3, #4
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	d1c9      	bne.n	8003ad4 <quorem+0x9c>
 8003b40:	3c01      	subs	r4, #1
 8003b42:	e7c4      	b.n	8003ace <quorem+0x96>
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	3b04      	subs	r3, #4
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	d1ef      	bne.n	8003b2c <quorem+0xf4>
 8003b4c:	3c01      	subs	r4, #1
 8003b4e:	e7ea      	b.n	8003b26 <quorem+0xee>
 8003b50:	2000      	movs	r0, #0
 8003b52:	e7ee      	b.n	8003b32 <quorem+0xfa>
 8003b54:	0000      	movs	r0, r0
	...

08003b58 <_dtoa_r>:
 8003b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	461f      	mov	r7, r3
 8003b60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003b62:	b095      	sub	sp, #84	; 0x54
 8003b64:	4604      	mov	r4, r0
 8003b66:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8003b6a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003b6e:	b93d      	cbnz	r5, 8003b80 <_dtoa_r+0x28>
 8003b70:	2010      	movs	r0, #16
 8003b72:	f000 fdb3 	bl	80046dc <malloc>
 8003b76:	6260      	str	r0, [r4, #36]	; 0x24
 8003b78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003b7c:	6005      	str	r5, [r0, #0]
 8003b7e:	60c5      	str	r5, [r0, #12]
 8003b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	b151      	cbz	r1, 8003b9c <_dtoa_r+0x44>
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	4093      	lsls	r3, r2
 8003b8c:	604a      	str	r2, [r1, #4]
 8003b8e:	608b      	str	r3, [r1, #8]
 8003b90:	4620      	mov	r0, r4
 8003b92:	f000 fdf8 	bl	8004786 <_Bfree>
 8003b96:	2200      	movs	r2, #0
 8003b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	1e3b      	subs	r3, r7, #0
 8003b9e:	bfaf      	iteee	ge
 8003ba0:	2300      	movge	r3, #0
 8003ba2:	2201      	movlt	r2, #1
 8003ba4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ba8:	9303      	strlt	r3, [sp, #12]
 8003baa:	bfac      	ite	ge
 8003bac:	f8c8 3000 	strge.w	r3, [r8]
 8003bb0:	f8c8 2000 	strlt.w	r2, [r8]
 8003bb4:	4bae      	ldr	r3, [pc, #696]	; (8003e70 <_dtoa_r+0x318>)
 8003bb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003bba:	ea33 0308 	bics.w	r3, r3, r8
 8003bbe:	d11b      	bne.n	8003bf8 <_dtoa_r+0xa0>
 8003bc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003bc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	9b02      	ldr	r3, [sp, #8]
 8003bca:	b923      	cbnz	r3, 8003bd6 <_dtoa_r+0x7e>
 8003bcc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	f000 8545 	beq.w	8004660 <_dtoa_r+0xb08>
 8003bd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bd8:	b953      	cbnz	r3, 8003bf0 <_dtoa_r+0x98>
 8003bda:	4ba6      	ldr	r3, [pc, #664]	; (8003e74 <_dtoa_r+0x31c>)
 8003bdc:	e021      	b.n	8003c22 <_dtoa_r+0xca>
 8003bde:	4ba6      	ldr	r3, [pc, #664]	; (8003e78 <_dtoa_r+0x320>)
 8003be0:	9306      	str	r3, [sp, #24]
 8003be2:	3308      	adds	r3, #8
 8003be4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	9806      	ldr	r0, [sp, #24]
 8003bea:	b015      	add	sp, #84	; 0x54
 8003bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf0:	4ba0      	ldr	r3, [pc, #640]	; (8003e74 <_dtoa_r+0x31c>)
 8003bf2:	9306      	str	r3, [sp, #24]
 8003bf4:	3303      	adds	r3, #3
 8003bf6:	e7f5      	b.n	8003be4 <_dtoa_r+0x8c>
 8003bf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2300      	movs	r3, #0
 8003c00:	4630      	mov	r0, r6
 8003c02:	4639      	mov	r1, r7
 8003c04:	f7fc fed0 	bl	80009a8 <__aeabi_dcmpeq>
 8003c08:	4682      	mov	sl, r0
 8003c0a:	b160      	cbz	r0, 8003c26 <_dtoa_r+0xce>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8520 	beq.w	800465a <_dtoa_r+0xb02>
 8003c1a:	4b98      	ldr	r3, [pc, #608]	; (8003e7c <_dtoa_r+0x324>)
 8003c1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	9306      	str	r3, [sp, #24]
 8003c24:	e7e0      	b.n	8003be8 <_dtoa_r+0x90>
 8003c26:	ab12      	add	r3, sp, #72	; 0x48
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	ab13      	add	r3, sp, #76	; 0x4c
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4632      	mov	r2, r6
 8003c30:	463b      	mov	r3, r7
 8003c32:	4620      	mov	r0, r4
 8003c34:	f001 f800 	bl	8004c38 <__d2b>
 8003c38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003c3c:	4683      	mov	fp, r0
 8003c3e:	2d00      	cmp	r5, #0
 8003c40:	d07d      	beq.n	8003d3e <_dtoa_r+0x1e6>
 8003c42:	46b0      	mov	r8, r6
 8003c44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003c48:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003c4c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003c50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003c54:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003c58:	2200      	movs	r2, #0
 8003c5a:	4b89      	ldr	r3, [pc, #548]	; (8003e80 <_dtoa_r+0x328>)
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	4649      	mov	r1, r9
 8003c60:	f7fc fa82 	bl	8000168 <__aeabi_dsub>
 8003c64:	a37c      	add	r3, pc, #496	; (adr r3, 8003e58 <_dtoa_r+0x300>)
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f7fc fc35 	bl	80004d8 <__aeabi_dmul>
 8003c6e:	a37c      	add	r3, pc, #496	; (adr r3, 8003e60 <_dtoa_r+0x308>)
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f7fc fa7a 	bl	800016c <__adddf3>
 8003c78:	4606      	mov	r6, r0
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	460f      	mov	r7, r1
 8003c7e:	f7fc fbc1 	bl	8000404 <__aeabi_i2d>
 8003c82:	a379      	add	r3, pc, #484	; (adr r3, 8003e68 <_dtoa_r+0x310>)
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f7fc fc26 	bl	80004d8 <__aeabi_dmul>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4630      	mov	r0, r6
 8003c92:	4639      	mov	r1, r7
 8003c94:	f7fc fa6a 	bl	800016c <__adddf3>
 8003c98:	4606      	mov	r6, r0
 8003c9a:	460f      	mov	r7, r1
 8003c9c:	f7fc fecc 	bl	8000a38 <__aeabi_d2iz>
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	4682      	mov	sl, r0
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	4639      	mov	r1, r7
 8003caa:	f7fc fe87 	bl	80009bc <__aeabi_dcmplt>
 8003cae:	b148      	cbz	r0, 8003cc4 <_dtoa_r+0x16c>
 8003cb0:	4650      	mov	r0, sl
 8003cb2:	f7fc fba7 	bl	8000404 <__aeabi_i2d>
 8003cb6:	4632      	mov	r2, r6
 8003cb8:	463b      	mov	r3, r7
 8003cba:	f7fc fe75 	bl	80009a8 <__aeabi_dcmpeq>
 8003cbe:	b908      	cbnz	r0, 8003cc4 <_dtoa_r+0x16c>
 8003cc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cc4:	f1ba 0f16 	cmp.w	sl, #22
 8003cc8:	d85a      	bhi.n	8003d80 <_dtoa_r+0x228>
 8003cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cce:	496d      	ldr	r1, [pc, #436]	; (8003e84 <_dtoa_r+0x32c>)
 8003cd0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cd8:	f7fc fe8e 	bl	80009f8 <__aeabi_dcmpgt>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d051      	beq.n	8003d84 <_dtoa_r+0x22c>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ce6:	930d      	str	r3, [sp, #52]	; 0x34
 8003ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cea:	1b5d      	subs	r5, r3, r5
 8003cec:	1e6b      	subs	r3, r5, #1
 8003cee:	9307      	str	r3, [sp, #28]
 8003cf0:	bf43      	ittte	mi
 8003cf2:	2300      	movmi	r3, #0
 8003cf4:	f1c5 0901 	rsbmi	r9, r5, #1
 8003cf8:	9307      	strmi	r3, [sp, #28]
 8003cfa:	f04f 0900 	movpl.w	r9, #0
 8003cfe:	f1ba 0f00 	cmp.w	sl, #0
 8003d02:	db41      	blt.n	8003d88 <_dtoa_r+0x230>
 8003d04:	9b07      	ldr	r3, [sp, #28]
 8003d06:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003d0a:	4453      	add	r3, sl
 8003d0c:	9307      	str	r3, [sp, #28]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9308      	str	r3, [sp, #32]
 8003d12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d14:	2b09      	cmp	r3, #9
 8003d16:	f200 808f 	bhi.w	8003e38 <_dtoa_r+0x2e0>
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	bfc4      	itt	gt
 8003d1e:	3b04      	subgt	r3, #4
 8003d20:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003d22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d24:	bfc8      	it	gt
 8003d26:	2500      	movgt	r5, #0
 8003d28:	f1a3 0302 	sub.w	r3, r3, #2
 8003d2c:	bfd8      	it	le
 8003d2e:	2501      	movle	r5, #1
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	f200 808d 	bhi.w	8003e50 <_dtoa_r+0x2f8>
 8003d36:	e8df f003 	tbb	[pc, r3]
 8003d3a:	7d7b      	.short	0x7d7b
 8003d3c:	6f2f      	.short	0x6f2f
 8003d3e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003d42:	441d      	add	r5, r3
 8003d44:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003d48:	2820      	cmp	r0, #32
 8003d4a:	dd13      	ble.n	8003d74 <_dtoa_r+0x21c>
 8003d4c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003d50:	9b02      	ldr	r3, [sp, #8]
 8003d52:	fa08 f800 	lsl.w	r8, r8, r0
 8003d56:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003d5a:	fa23 f000 	lsr.w	r0, r3, r0
 8003d5e:	ea48 0000 	orr.w	r0, r8, r0
 8003d62:	f7fc fb3f 	bl	80003e4 <__aeabi_ui2d>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4680      	mov	r8, r0
 8003d6a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003d6e:	3d01      	subs	r5, #1
 8003d70:	9310      	str	r3, [sp, #64]	; 0x40
 8003d72:	e771      	b.n	8003c58 <_dtoa_r+0x100>
 8003d74:	9b02      	ldr	r3, [sp, #8]
 8003d76:	f1c0 0020 	rsb	r0, r0, #32
 8003d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8003d7e:	e7f0      	b.n	8003d62 <_dtoa_r+0x20a>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e7b0      	b.n	8003ce6 <_dtoa_r+0x18e>
 8003d84:	900d      	str	r0, [sp, #52]	; 0x34
 8003d86:	e7af      	b.n	8003ce8 <_dtoa_r+0x190>
 8003d88:	f1ca 0300 	rsb	r3, sl, #0
 8003d8c:	9308      	str	r3, [sp, #32]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	eba9 090a 	sub.w	r9, r9, sl
 8003d94:	930c      	str	r3, [sp, #48]	; 0x30
 8003d96:	e7bc      	b.n	8003d12 <_dtoa_r+0x1ba>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	dd74      	ble.n	8003e8c <_dtoa_r+0x334>
 8003da2:	4698      	mov	r8, r3
 8003da4:	9304      	str	r3, [sp, #16]
 8003da6:	2200      	movs	r2, #0
 8003da8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003daa:	6072      	str	r2, [r6, #4]
 8003dac:	2204      	movs	r2, #4
 8003dae:	f102 0014 	add.w	r0, r2, #20
 8003db2:	4298      	cmp	r0, r3
 8003db4:	6871      	ldr	r1, [r6, #4]
 8003db6:	d96e      	bls.n	8003e96 <_dtoa_r+0x33e>
 8003db8:	4620      	mov	r0, r4
 8003dba:	f000 fcb0 	bl	800471e <_Balloc>
 8003dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dc0:	6030      	str	r0, [r6, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f1b8 0f0e 	cmp.w	r8, #14
 8003dc8:	9306      	str	r3, [sp, #24]
 8003dca:	f200 80ed 	bhi.w	8003fa8 <_dtoa_r+0x450>
 8003dce:	2d00      	cmp	r5, #0
 8003dd0:	f000 80ea 	beq.w	8003fa8 <_dtoa_r+0x450>
 8003dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dd8:	f1ba 0f00 	cmp.w	sl, #0
 8003ddc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003de0:	dd77      	ble.n	8003ed2 <_dtoa_r+0x37a>
 8003de2:	4a28      	ldr	r2, [pc, #160]	; (8003e84 <_dtoa_r+0x32c>)
 8003de4:	f00a 030f 	and.w	r3, sl, #15
 8003de8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003dec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003df0:	06f0      	lsls	r0, r6, #27
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003dfa:	d568      	bpl.n	8003ece <_dtoa_r+0x376>
 8003dfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e00:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <_dtoa_r+0x330>)
 8003e02:	2503      	movs	r5, #3
 8003e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e08:	f7fc fc90 	bl	800072c <__aeabi_ddiv>
 8003e0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e10:	f006 060f 	and.w	r6, r6, #15
 8003e14:	4f1c      	ldr	r7, [pc, #112]	; (8003e88 <_dtoa_r+0x330>)
 8003e16:	e04f      	b.n	8003eb8 <_dtoa_r+0x360>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e1e:	4453      	add	r3, sl
 8003e20:	f103 0801 	add.w	r8, r3, #1
 8003e24:	9304      	str	r3, [sp, #16]
 8003e26:	4643      	mov	r3, r8
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	bfb8      	it	lt
 8003e2c:	2301      	movlt	r3, #1
 8003e2e:	e7ba      	b.n	8003da6 <_dtoa_r+0x24e>
 8003e30:	2300      	movs	r3, #0
 8003e32:	e7b2      	b.n	8003d9a <_dtoa_r+0x242>
 8003e34:	2300      	movs	r3, #0
 8003e36:	e7f0      	b.n	8003e1a <_dtoa_r+0x2c2>
 8003e38:	2501      	movs	r5, #1
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	9509      	str	r5, [sp, #36]	; 0x24
 8003e3e:	931e      	str	r3, [sp, #120]	; 0x78
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
 8003e44:	2200      	movs	r2, #0
 8003e46:	9304      	str	r3, [sp, #16]
 8003e48:	4698      	mov	r8, r3
 8003e4a:	2312      	movs	r3, #18
 8003e4c:	921f      	str	r2, [sp, #124]	; 0x7c
 8003e4e:	e7aa      	b.n	8003da6 <_dtoa_r+0x24e>
 8003e50:	2301      	movs	r3, #1
 8003e52:	9309      	str	r3, [sp, #36]	; 0x24
 8003e54:	e7f4      	b.n	8003e40 <_dtoa_r+0x2e8>
 8003e56:	bf00      	nop
 8003e58:	636f4361 	.word	0x636f4361
 8003e5c:	3fd287a7 	.word	0x3fd287a7
 8003e60:	8b60c8b3 	.word	0x8b60c8b3
 8003e64:	3fc68a28 	.word	0x3fc68a28
 8003e68:	509f79fb 	.word	0x509f79fb
 8003e6c:	3fd34413 	.word	0x3fd34413
 8003e70:	7ff00000 	.word	0x7ff00000
 8003e74:	08005a85 	.word	0x08005a85
 8003e78:	08005a7c 	.word	0x08005a7c
 8003e7c:	08005a59 	.word	0x08005a59
 8003e80:	3ff80000 	.word	0x3ff80000
 8003e84:	08005b18 	.word	0x08005b18
 8003e88:	08005af0 	.word	0x08005af0
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	9304      	str	r3, [sp, #16]
 8003e90:	4698      	mov	r8, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	e7da      	b.n	8003e4c <_dtoa_r+0x2f4>
 8003e96:	3101      	adds	r1, #1
 8003e98:	6071      	str	r1, [r6, #4]
 8003e9a:	0052      	lsls	r2, r2, #1
 8003e9c:	e787      	b.n	8003dae <_dtoa_r+0x256>
 8003e9e:	07f1      	lsls	r1, r6, #31
 8003ea0:	d508      	bpl.n	8003eb4 <_dtoa_r+0x35c>
 8003ea2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eaa:	f7fc fb15 	bl	80004d8 <__aeabi_dmul>
 8003eae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003eb2:	3501      	adds	r5, #1
 8003eb4:	1076      	asrs	r6, r6, #1
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	2e00      	cmp	r6, #0
 8003eba:	d1f0      	bne.n	8003e9e <_dtoa_r+0x346>
 8003ebc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ec4:	f7fc fc32 	bl	800072c <__aeabi_ddiv>
 8003ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ecc:	e01b      	b.n	8003f06 <_dtoa_r+0x3ae>
 8003ece:	2502      	movs	r5, #2
 8003ed0:	e7a0      	b.n	8003e14 <_dtoa_r+0x2bc>
 8003ed2:	f000 80a4 	beq.w	800401e <_dtoa_r+0x4c6>
 8003ed6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003eda:	f1ca 0600 	rsb	r6, sl, #0
 8003ede:	4ba0      	ldr	r3, [pc, #640]	; (8004160 <_dtoa_r+0x608>)
 8003ee0:	f006 020f 	and.w	r2, r6, #15
 8003ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f7fc faf4 	bl	80004d8 <__aeabi_dmul>
 8003ef0:	2502      	movs	r5, #2
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ef8:	4f9a      	ldr	r7, [pc, #616]	; (8004164 <_dtoa_r+0x60c>)
 8003efa:	1136      	asrs	r6, r6, #4
 8003efc:	2e00      	cmp	r6, #0
 8003efe:	f040 8083 	bne.w	8004008 <_dtoa_r+0x4b0>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e0      	bne.n	8003ec8 <_dtoa_r+0x370>
 8003f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 808a 	beq.w	8004022 <_dtoa_r+0x4ca>
 8003f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003f16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4b92      	ldr	r3, [pc, #584]	; (8004168 <_dtoa_r+0x610>)
 8003f1e:	f7fc fd4d 	bl	80009bc <__aeabi_dcmplt>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d07d      	beq.n	8004022 <_dtoa_r+0x4ca>
 8003f26:	f1b8 0f00 	cmp.w	r8, #0
 8003f2a:	d07a      	beq.n	8004022 <_dtoa_r+0x4ca>
 8003f2c:	9b04      	ldr	r3, [sp, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	dd36      	ble.n	8003fa0 <_dtoa_r+0x448>
 8003f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f36:	2200      	movs	r2, #0
 8003f38:	4b8c      	ldr	r3, [pc, #560]	; (800416c <_dtoa_r+0x614>)
 8003f3a:	f7fc facd 	bl	80004d8 <__aeabi_dmul>
 8003f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f42:	9e04      	ldr	r6, [sp, #16]
 8003f44:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003f48:	3501      	adds	r5, #1
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f7fc fa5a 	bl	8000404 <__aeabi_i2d>
 8003f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f54:	f7fc fac0 	bl	80004d8 <__aeabi_dmul>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	4b85      	ldr	r3, [pc, #532]	; (8004170 <_dtoa_r+0x618>)
 8003f5c:	f7fc f906 	bl	800016c <__adddf3>
 8003f60:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003f64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f68:	950b      	str	r5, [sp, #44]	; 0x2c
 8003f6a:	2e00      	cmp	r6, #0
 8003f6c:	d15c      	bne.n	8004028 <_dtoa_r+0x4d0>
 8003f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f72:	2200      	movs	r2, #0
 8003f74:	4b7f      	ldr	r3, [pc, #508]	; (8004174 <_dtoa_r+0x61c>)
 8003f76:	f7fc f8f7 	bl	8000168 <__aeabi_dsub>
 8003f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f82:	f7fc fd39 	bl	80009f8 <__aeabi_dcmpgt>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	f040 8281 	bne.w	800448e <_dtoa_r+0x936>
 8003f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f92:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003f96:	f7fc fd11 	bl	80009bc <__aeabi_dcmplt>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	f040 8275 	bne.w	800448a <_dtoa_r+0x932>
 8003fa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f2c0 814b 	blt.w	8004246 <_dtoa_r+0x6ee>
 8003fb0:	f1ba 0f0e 	cmp.w	sl, #14
 8003fb4:	f300 8147 	bgt.w	8004246 <_dtoa_r+0x6ee>
 8003fb8:	4b69      	ldr	r3, [pc, #420]	; (8004160 <_dtoa_r+0x608>)
 8003fba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f280 80d7 	bge.w	800417c <_dtoa_r+0x624>
 8003fce:	f1b8 0f00 	cmp.w	r8, #0
 8003fd2:	f300 80d3 	bgt.w	800417c <_dtoa_r+0x624>
 8003fd6:	f040 8257 	bne.w	8004488 <_dtoa_r+0x930>
 8003fda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	4b64      	ldr	r3, [pc, #400]	; (8004174 <_dtoa_r+0x61c>)
 8003fe2:	f7fc fa79 	bl	80004d8 <__aeabi_dmul>
 8003fe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fea:	f7fc fcfb 	bl	80009e4 <__aeabi_dcmpge>
 8003fee:	4646      	mov	r6, r8
 8003ff0:	4647      	mov	r7, r8
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	f040 822d 	bne.w	8004452 <_dtoa_r+0x8fa>
 8003ff8:	9b06      	ldr	r3, [sp, #24]
 8003ffa:	9a06      	ldr	r2, [sp, #24]
 8003ffc:	1c5d      	adds	r5, r3, #1
 8003ffe:	2331      	movs	r3, #49	; 0x31
 8004000:	f10a 0a01 	add.w	sl, sl, #1
 8004004:	7013      	strb	r3, [r2, #0]
 8004006:	e228      	b.n	800445a <_dtoa_r+0x902>
 8004008:	07f2      	lsls	r2, r6, #31
 800400a:	d505      	bpl.n	8004018 <_dtoa_r+0x4c0>
 800400c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004010:	f7fc fa62 	bl	80004d8 <__aeabi_dmul>
 8004014:	2301      	movs	r3, #1
 8004016:	3501      	adds	r5, #1
 8004018:	1076      	asrs	r6, r6, #1
 800401a:	3708      	adds	r7, #8
 800401c:	e76e      	b.n	8003efc <_dtoa_r+0x3a4>
 800401e:	2502      	movs	r5, #2
 8004020:	e771      	b.n	8003f06 <_dtoa_r+0x3ae>
 8004022:	4657      	mov	r7, sl
 8004024:	4646      	mov	r6, r8
 8004026:	e790      	b.n	8003f4a <_dtoa_r+0x3f2>
 8004028:	4b4d      	ldr	r3, [pc, #308]	; (8004160 <_dtoa_r+0x608>)
 800402a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800402e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d048      	beq.n	80040ca <_dtoa_r+0x572>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	2000      	movs	r0, #0
 800403e:	494e      	ldr	r1, [pc, #312]	; (8004178 <_dtoa_r+0x620>)
 8004040:	f7fc fb74 	bl	800072c <__aeabi_ddiv>
 8004044:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004048:	f7fc f88e 	bl	8000168 <__aeabi_dsub>
 800404c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004050:	9d06      	ldr	r5, [sp, #24]
 8004052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004056:	f7fc fcef 	bl	8000a38 <__aeabi_d2iz>
 800405a:	9011      	str	r0, [sp, #68]	; 0x44
 800405c:	f7fc f9d2 	bl	8000404 <__aeabi_i2d>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004068:	f7fc f87e 	bl	8000168 <__aeabi_dsub>
 800406c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800406e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004072:	3330      	adds	r3, #48	; 0x30
 8004074:	f805 3b01 	strb.w	r3, [r5], #1
 8004078:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800407c:	f7fc fc9e 	bl	80009bc <__aeabi_dcmplt>
 8004080:	2800      	cmp	r0, #0
 8004082:	d163      	bne.n	800414c <_dtoa_r+0x5f4>
 8004084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004088:	2000      	movs	r0, #0
 800408a:	4937      	ldr	r1, [pc, #220]	; (8004168 <_dtoa_r+0x610>)
 800408c:	f7fc f86c 	bl	8000168 <__aeabi_dsub>
 8004090:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004094:	f7fc fc92 	bl	80009bc <__aeabi_dcmplt>
 8004098:	2800      	cmp	r0, #0
 800409a:	f040 80b5 	bne.w	8004208 <_dtoa_r+0x6b0>
 800409e:	9b06      	ldr	r3, [sp, #24]
 80040a0:	1aeb      	subs	r3, r5, r3
 80040a2:	429e      	cmp	r6, r3
 80040a4:	f77f af7c 	ble.w	8003fa0 <_dtoa_r+0x448>
 80040a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80040ac:	2200      	movs	r2, #0
 80040ae:	4b2f      	ldr	r3, [pc, #188]	; (800416c <_dtoa_r+0x614>)
 80040b0:	f7fc fa12 	bl	80004d8 <__aeabi_dmul>
 80040b4:	2200      	movs	r2, #0
 80040b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040be:	4b2b      	ldr	r3, [pc, #172]	; (800416c <_dtoa_r+0x614>)
 80040c0:	f7fc fa0a 	bl	80004d8 <__aeabi_dmul>
 80040c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040c8:	e7c3      	b.n	8004052 <_dtoa_r+0x4fa>
 80040ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80040ce:	f7fc fa03 	bl	80004d8 <__aeabi_dmul>
 80040d2:	9b06      	ldr	r3, [sp, #24]
 80040d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040d8:	199d      	adds	r5, r3, r6
 80040da:	461e      	mov	r6, r3
 80040dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040e0:	f7fc fcaa 	bl	8000a38 <__aeabi_d2iz>
 80040e4:	9011      	str	r0, [sp, #68]	; 0x44
 80040e6:	f7fc f98d 	bl	8000404 <__aeabi_i2d>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040f2:	f7fc f839 	bl	8000168 <__aeabi_dsub>
 80040f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040fc:	3330      	adds	r3, #48	; 0x30
 80040fe:	f806 3b01 	strb.w	r3, [r6], #1
 8004102:	42ae      	cmp	r6, r5
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	d124      	bne.n	8004154 <_dtoa_r+0x5fc>
 800410a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800410e:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <_dtoa_r+0x620>)
 8004110:	f7fc f82c 	bl	800016c <__adddf3>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800411c:	f7fc fc6c 	bl	80009f8 <__aeabi_dcmpgt>
 8004120:	2800      	cmp	r0, #0
 8004122:	d171      	bne.n	8004208 <_dtoa_r+0x6b0>
 8004124:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004128:	2000      	movs	r0, #0
 800412a:	4913      	ldr	r1, [pc, #76]	; (8004178 <_dtoa_r+0x620>)
 800412c:	f7fc f81c 	bl	8000168 <__aeabi_dsub>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004138:	f7fc fc40 	bl	80009bc <__aeabi_dcmplt>
 800413c:	2800      	cmp	r0, #0
 800413e:	f43f af2f 	beq.w	8003fa0 <_dtoa_r+0x448>
 8004142:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004146:	1e6a      	subs	r2, r5, #1
 8004148:	2b30      	cmp	r3, #48	; 0x30
 800414a:	d001      	beq.n	8004150 <_dtoa_r+0x5f8>
 800414c:	46ba      	mov	sl, r7
 800414e:	e04a      	b.n	80041e6 <_dtoa_r+0x68e>
 8004150:	4615      	mov	r5, r2
 8004152:	e7f6      	b.n	8004142 <_dtoa_r+0x5ea>
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <_dtoa_r+0x614>)
 8004156:	f7fc f9bf 	bl	80004d8 <__aeabi_dmul>
 800415a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800415e:	e7bd      	b.n	80040dc <_dtoa_r+0x584>
 8004160:	08005b18 	.word	0x08005b18
 8004164:	08005af0 	.word	0x08005af0
 8004168:	3ff00000 	.word	0x3ff00000
 800416c:	40240000 	.word	0x40240000
 8004170:	401c0000 	.word	0x401c0000
 8004174:	40140000 	.word	0x40140000
 8004178:	3fe00000 	.word	0x3fe00000
 800417c:	9d06      	ldr	r5, [sp, #24]
 800417e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004186:	4630      	mov	r0, r6
 8004188:	4639      	mov	r1, r7
 800418a:	f7fc facf 	bl	800072c <__aeabi_ddiv>
 800418e:	f7fc fc53 	bl	8000a38 <__aeabi_d2iz>
 8004192:	4681      	mov	r9, r0
 8004194:	f7fc f936 	bl	8000404 <__aeabi_i2d>
 8004198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800419c:	f7fc f99c 	bl	80004d8 <__aeabi_dmul>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4630      	mov	r0, r6
 80041a6:	4639      	mov	r1, r7
 80041a8:	f7fb ffde 	bl	8000168 <__aeabi_dsub>
 80041ac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80041b0:	f805 6b01 	strb.w	r6, [r5], #1
 80041b4:	9e06      	ldr	r6, [sp, #24]
 80041b6:	4602      	mov	r2, r0
 80041b8:	1bae      	subs	r6, r5, r6
 80041ba:	45b0      	cmp	r8, r6
 80041bc:	460b      	mov	r3, r1
 80041be:	d135      	bne.n	800422c <_dtoa_r+0x6d4>
 80041c0:	f7fb ffd4 	bl	800016c <__adddf3>
 80041c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041c8:	4606      	mov	r6, r0
 80041ca:	460f      	mov	r7, r1
 80041cc:	f7fc fc14 	bl	80009f8 <__aeabi_dcmpgt>
 80041d0:	b9c8      	cbnz	r0, 8004206 <_dtoa_r+0x6ae>
 80041d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041d6:	4630      	mov	r0, r6
 80041d8:	4639      	mov	r1, r7
 80041da:	f7fc fbe5 	bl	80009a8 <__aeabi_dcmpeq>
 80041de:	b110      	cbz	r0, 80041e6 <_dtoa_r+0x68e>
 80041e0:	f019 0f01 	tst.w	r9, #1
 80041e4:	d10f      	bne.n	8004206 <_dtoa_r+0x6ae>
 80041e6:	4659      	mov	r1, fp
 80041e8:	4620      	mov	r0, r4
 80041ea:	f000 facc 	bl	8004786 <_Bfree>
 80041ee:	2300      	movs	r3, #0
 80041f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041f2:	702b      	strb	r3, [r5, #0]
 80041f4:	f10a 0301 	add.w	r3, sl, #1
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f43f acf3 	beq.w	8003be8 <_dtoa_r+0x90>
 8004202:	601d      	str	r5, [r3, #0]
 8004204:	e4f0      	b.n	8003be8 <_dtoa_r+0x90>
 8004206:	4657      	mov	r7, sl
 8004208:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800420c:	1e6b      	subs	r3, r5, #1
 800420e:	2a39      	cmp	r2, #57	; 0x39
 8004210:	d106      	bne.n	8004220 <_dtoa_r+0x6c8>
 8004212:	9a06      	ldr	r2, [sp, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d107      	bne.n	8004228 <_dtoa_r+0x6d0>
 8004218:	2330      	movs	r3, #48	; 0x30
 800421a:	7013      	strb	r3, [r2, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	3701      	adds	r7, #1
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	3201      	adds	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
 8004226:	e791      	b.n	800414c <_dtoa_r+0x5f4>
 8004228:	461d      	mov	r5, r3
 800422a:	e7ed      	b.n	8004208 <_dtoa_r+0x6b0>
 800422c:	2200      	movs	r2, #0
 800422e:	4b99      	ldr	r3, [pc, #612]	; (8004494 <_dtoa_r+0x93c>)
 8004230:	f7fc f952 	bl	80004d8 <__aeabi_dmul>
 8004234:	2200      	movs	r2, #0
 8004236:	2300      	movs	r3, #0
 8004238:	4606      	mov	r6, r0
 800423a:	460f      	mov	r7, r1
 800423c:	f7fc fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8004240:	2800      	cmp	r0, #0
 8004242:	d09e      	beq.n	8004182 <_dtoa_r+0x62a>
 8004244:	e7cf      	b.n	80041e6 <_dtoa_r+0x68e>
 8004246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004248:	2a00      	cmp	r2, #0
 800424a:	f000 8088 	beq.w	800435e <_dtoa_r+0x806>
 800424e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004250:	2a01      	cmp	r2, #1
 8004252:	dc6d      	bgt.n	8004330 <_dtoa_r+0x7d8>
 8004254:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004256:	2a00      	cmp	r2, #0
 8004258:	d066      	beq.n	8004328 <_dtoa_r+0x7d0>
 800425a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800425e:	464d      	mov	r5, r9
 8004260:	9e08      	ldr	r6, [sp, #32]
 8004262:	9a07      	ldr	r2, [sp, #28]
 8004264:	2101      	movs	r1, #1
 8004266:	441a      	add	r2, r3
 8004268:	4620      	mov	r0, r4
 800426a:	4499      	add	r9, r3
 800426c:	9207      	str	r2, [sp, #28]
 800426e:	f000 fb2a 	bl	80048c6 <__i2b>
 8004272:	4607      	mov	r7, r0
 8004274:	2d00      	cmp	r5, #0
 8004276:	dd0b      	ble.n	8004290 <_dtoa_r+0x738>
 8004278:	9b07      	ldr	r3, [sp, #28]
 800427a:	2b00      	cmp	r3, #0
 800427c:	dd08      	ble.n	8004290 <_dtoa_r+0x738>
 800427e:	42ab      	cmp	r3, r5
 8004280:	bfa8      	it	ge
 8004282:	462b      	movge	r3, r5
 8004284:	9a07      	ldr	r2, [sp, #28]
 8004286:	eba9 0903 	sub.w	r9, r9, r3
 800428a:	1aed      	subs	r5, r5, r3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	9307      	str	r3, [sp, #28]
 8004290:	9b08      	ldr	r3, [sp, #32]
 8004292:	b1eb      	cbz	r3, 80042d0 <_dtoa_r+0x778>
 8004294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	d065      	beq.n	8004366 <_dtoa_r+0x80e>
 800429a:	b18e      	cbz	r6, 80042c0 <_dtoa_r+0x768>
 800429c:	4639      	mov	r1, r7
 800429e:	4632      	mov	r2, r6
 80042a0:	4620      	mov	r0, r4
 80042a2:	f000 fbaf 	bl	8004a04 <__pow5mult>
 80042a6:	465a      	mov	r2, fp
 80042a8:	4601      	mov	r1, r0
 80042aa:	4607      	mov	r7, r0
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 fb13 	bl	80048d8 <__multiply>
 80042b2:	4659      	mov	r1, fp
 80042b4:	900a      	str	r0, [sp, #40]	; 0x28
 80042b6:	4620      	mov	r0, r4
 80042b8:	f000 fa65 	bl	8004786 <_Bfree>
 80042bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042be:	469b      	mov	fp, r3
 80042c0:	9b08      	ldr	r3, [sp, #32]
 80042c2:	1b9a      	subs	r2, r3, r6
 80042c4:	d004      	beq.n	80042d0 <_dtoa_r+0x778>
 80042c6:	4659      	mov	r1, fp
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fb9b 	bl	8004a04 <__pow5mult>
 80042ce:	4683      	mov	fp, r0
 80042d0:	2101      	movs	r1, #1
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 faf7 	bl	80048c6 <__i2b>
 80042d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042da:	4606      	mov	r6, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 81c6 	beq.w	800466e <_dtoa_r+0xb16>
 80042e2:	461a      	mov	r2, r3
 80042e4:	4601      	mov	r1, r0
 80042e6:	4620      	mov	r0, r4
 80042e8:	f000 fb8c 	bl	8004a04 <__pow5mult>
 80042ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042ee:	4606      	mov	r6, r0
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	dc3e      	bgt.n	8004372 <_dtoa_r+0x81a>
 80042f4:	9b02      	ldr	r3, [sp, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d137      	bne.n	800436a <_dtoa_r+0x812>
 80042fa:	9b03      	ldr	r3, [sp, #12]
 80042fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004300:	2b00      	cmp	r3, #0
 8004302:	d134      	bne.n	800436e <_dtoa_r+0x816>
 8004304:	9b03      	ldr	r3, [sp, #12]
 8004306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800430a:	0d1b      	lsrs	r3, r3, #20
 800430c:	051b      	lsls	r3, r3, #20
 800430e:	b12b      	cbz	r3, 800431c <_dtoa_r+0x7c4>
 8004310:	9b07      	ldr	r3, [sp, #28]
 8004312:	f109 0901 	add.w	r9, r9, #1
 8004316:	3301      	adds	r3, #1
 8004318:	9307      	str	r3, [sp, #28]
 800431a:	2301      	movs	r3, #1
 800431c:	9308      	str	r3, [sp, #32]
 800431e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004320:	2b00      	cmp	r3, #0
 8004322:	d128      	bne.n	8004376 <_dtoa_r+0x81e>
 8004324:	2001      	movs	r0, #1
 8004326:	e02e      	b.n	8004386 <_dtoa_r+0x82e>
 8004328:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800432a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800432e:	e796      	b.n	800425e <_dtoa_r+0x706>
 8004330:	9b08      	ldr	r3, [sp, #32]
 8004332:	f108 36ff 	add.w	r6, r8, #4294967295
 8004336:	42b3      	cmp	r3, r6
 8004338:	bfb7      	itett	lt
 800433a:	9b08      	ldrlt	r3, [sp, #32]
 800433c:	1b9e      	subge	r6, r3, r6
 800433e:	1af2      	sublt	r2, r6, r3
 8004340:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004342:	bfbf      	itttt	lt
 8004344:	9608      	strlt	r6, [sp, #32]
 8004346:	189b      	addlt	r3, r3, r2
 8004348:	930c      	strlt	r3, [sp, #48]	; 0x30
 800434a:	2600      	movlt	r6, #0
 800434c:	f1b8 0f00 	cmp.w	r8, #0
 8004350:	bfb9      	ittee	lt
 8004352:	eba9 0508 	sublt.w	r5, r9, r8
 8004356:	2300      	movlt	r3, #0
 8004358:	464d      	movge	r5, r9
 800435a:	4643      	movge	r3, r8
 800435c:	e781      	b.n	8004262 <_dtoa_r+0x70a>
 800435e:	9e08      	ldr	r6, [sp, #32]
 8004360:	464d      	mov	r5, r9
 8004362:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004364:	e786      	b.n	8004274 <_dtoa_r+0x71c>
 8004366:	9a08      	ldr	r2, [sp, #32]
 8004368:	e7ad      	b.n	80042c6 <_dtoa_r+0x76e>
 800436a:	2300      	movs	r3, #0
 800436c:	e7d6      	b.n	800431c <_dtoa_r+0x7c4>
 800436e:	9b02      	ldr	r3, [sp, #8]
 8004370:	e7d4      	b.n	800431c <_dtoa_r+0x7c4>
 8004372:	2300      	movs	r3, #0
 8004374:	9308      	str	r3, [sp, #32]
 8004376:	6933      	ldr	r3, [r6, #16]
 8004378:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800437c:	6918      	ldr	r0, [r3, #16]
 800437e:	f000 fa54 	bl	800482a <__hi0bits>
 8004382:	f1c0 0020 	rsb	r0, r0, #32
 8004386:	9b07      	ldr	r3, [sp, #28]
 8004388:	4418      	add	r0, r3
 800438a:	f010 001f 	ands.w	r0, r0, #31
 800438e:	d047      	beq.n	8004420 <_dtoa_r+0x8c8>
 8004390:	f1c0 0320 	rsb	r3, r0, #32
 8004394:	2b04      	cmp	r3, #4
 8004396:	dd3b      	ble.n	8004410 <_dtoa_r+0x8b8>
 8004398:	9b07      	ldr	r3, [sp, #28]
 800439a:	f1c0 001c 	rsb	r0, r0, #28
 800439e:	4481      	add	r9, r0
 80043a0:	4405      	add	r5, r0
 80043a2:	4403      	add	r3, r0
 80043a4:	9307      	str	r3, [sp, #28]
 80043a6:	f1b9 0f00 	cmp.w	r9, #0
 80043aa:	dd05      	ble.n	80043b8 <_dtoa_r+0x860>
 80043ac:	4659      	mov	r1, fp
 80043ae:	464a      	mov	r2, r9
 80043b0:	4620      	mov	r0, r4
 80043b2:	f000 fb75 	bl	8004aa0 <__lshift>
 80043b6:	4683      	mov	fp, r0
 80043b8:	9b07      	ldr	r3, [sp, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	dd05      	ble.n	80043ca <_dtoa_r+0x872>
 80043be:	4631      	mov	r1, r6
 80043c0:	461a      	mov	r2, r3
 80043c2:	4620      	mov	r0, r4
 80043c4:	f000 fb6c 	bl	8004aa0 <__lshift>
 80043c8:	4606      	mov	r6, r0
 80043ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043cc:	b353      	cbz	r3, 8004424 <_dtoa_r+0x8cc>
 80043ce:	4631      	mov	r1, r6
 80043d0:	4658      	mov	r0, fp
 80043d2:	f000 fbb9 	bl	8004b48 <__mcmp>
 80043d6:	2800      	cmp	r0, #0
 80043d8:	da24      	bge.n	8004424 <_dtoa_r+0x8cc>
 80043da:	2300      	movs	r3, #0
 80043dc:	4659      	mov	r1, fp
 80043de:	220a      	movs	r2, #10
 80043e0:	4620      	mov	r0, r4
 80043e2:	f000 f9e7 	bl	80047b4 <__multadd>
 80043e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043ec:	4683      	mov	fp, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8144 	beq.w	800467c <_dtoa_r+0xb24>
 80043f4:	2300      	movs	r3, #0
 80043f6:	4639      	mov	r1, r7
 80043f8:	220a      	movs	r2, #10
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 f9da 	bl	80047b4 <__multadd>
 8004400:	9b04      	ldr	r3, [sp, #16]
 8004402:	4607      	mov	r7, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	dc4d      	bgt.n	80044a4 <_dtoa_r+0x94c>
 8004408:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800440a:	2b02      	cmp	r3, #2
 800440c:	dd4a      	ble.n	80044a4 <_dtoa_r+0x94c>
 800440e:	e011      	b.n	8004434 <_dtoa_r+0x8dc>
 8004410:	d0c9      	beq.n	80043a6 <_dtoa_r+0x84e>
 8004412:	9a07      	ldr	r2, [sp, #28]
 8004414:	331c      	adds	r3, #28
 8004416:	441a      	add	r2, r3
 8004418:	4499      	add	r9, r3
 800441a:	441d      	add	r5, r3
 800441c:	4613      	mov	r3, r2
 800441e:	e7c1      	b.n	80043a4 <_dtoa_r+0x84c>
 8004420:	4603      	mov	r3, r0
 8004422:	e7f6      	b.n	8004412 <_dtoa_r+0x8ba>
 8004424:	f1b8 0f00 	cmp.w	r8, #0
 8004428:	dc36      	bgt.n	8004498 <_dtoa_r+0x940>
 800442a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800442c:	2b02      	cmp	r3, #2
 800442e:	dd33      	ble.n	8004498 <_dtoa_r+0x940>
 8004430:	f8cd 8010 	str.w	r8, [sp, #16]
 8004434:	9b04      	ldr	r3, [sp, #16]
 8004436:	b963      	cbnz	r3, 8004452 <_dtoa_r+0x8fa>
 8004438:	4631      	mov	r1, r6
 800443a:	2205      	movs	r2, #5
 800443c:	4620      	mov	r0, r4
 800443e:	f000 f9b9 	bl	80047b4 <__multadd>
 8004442:	4601      	mov	r1, r0
 8004444:	4606      	mov	r6, r0
 8004446:	4658      	mov	r0, fp
 8004448:	f000 fb7e 	bl	8004b48 <__mcmp>
 800444c:	2800      	cmp	r0, #0
 800444e:	f73f add3 	bgt.w	8003ff8 <_dtoa_r+0x4a0>
 8004452:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004454:	9d06      	ldr	r5, [sp, #24]
 8004456:	ea6f 0a03 	mvn.w	sl, r3
 800445a:	f04f 0900 	mov.w	r9, #0
 800445e:	4631      	mov	r1, r6
 8004460:	4620      	mov	r0, r4
 8004462:	f000 f990 	bl	8004786 <_Bfree>
 8004466:	2f00      	cmp	r7, #0
 8004468:	f43f aebd 	beq.w	80041e6 <_dtoa_r+0x68e>
 800446c:	f1b9 0f00 	cmp.w	r9, #0
 8004470:	d005      	beq.n	800447e <_dtoa_r+0x926>
 8004472:	45b9      	cmp	r9, r7
 8004474:	d003      	beq.n	800447e <_dtoa_r+0x926>
 8004476:	4649      	mov	r1, r9
 8004478:	4620      	mov	r0, r4
 800447a:	f000 f984 	bl	8004786 <_Bfree>
 800447e:	4639      	mov	r1, r7
 8004480:	4620      	mov	r0, r4
 8004482:	f000 f980 	bl	8004786 <_Bfree>
 8004486:	e6ae      	b.n	80041e6 <_dtoa_r+0x68e>
 8004488:	2600      	movs	r6, #0
 800448a:	4637      	mov	r7, r6
 800448c:	e7e1      	b.n	8004452 <_dtoa_r+0x8fa>
 800448e:	46ba      	mov	sl, r7
 8004490:	4637      	mov	r7, r6
 8004492:	e5b1      	b.n	8003ff8 <_dtoa_r+0x4a0>
 8004494:	40240000 	.word	0x40240000
 8004498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800449a:	f8cd 8010 	str.w	r8, [sp, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80f3 	beq.w	800468a <_dtoa_r+0xb32>
 80044a4:	2d00      	cmp	r5, #0
 80044a6:	dd05      	ble.n	80044b4 <_dtoa_r+0x95c>
 80044a8:	4639      	mov	r1, r7
 80044aa:	462a      	mov	r2, r5
 80044ac:	4620      	mov	r0, r4
 80044ae:	f000 faf7 	bl	8004aa0 <__lshift>
 80044b2:	4607      	mov	r7, r0
 80044b4:	9b08      	ldr	r3, [sp, #32]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d04c      	beq.n	8004554 <_dtoa_r+0x9fc>
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4620      	mov	r0, r4
 80044be:	f000 f92e 	bl	800471e <_Balloc>
 80044c2:	4605      	mov	r5, r0
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	f107 010c 	add.w	r1, r7, #12
 80044ca:	3202      	adds	r2, #2
 80044cc:	0092      	lsls	r2, r2, #2
 80044ce:	300c      	adds	r0, #12
 80044d0:	f000 f91a 	bl	8004708 <memcpy>
 80044d4:	2201      	movs	r2, #1
 80044d6:	4629      	mov	r1, r5
 80044d8:	4620      	mov	r0, r4
 80044da:	f000 fae1 	bl	8004aa0 <__lshift>
 80044de:	46b9      	mov	r9, r7
 80044e0:	4607      	mov	r7, r0
 80044e2:	9b06      	ldr	r3, [sp, #24]
 80044e4:	9307      	str	r3, [sp, #28]
 80044e6:	9b02      	ldr	r3, [sp, #8]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	9308      	str	r3, [sp, #32]
 80044ee:	4631      	mov	r1, r6
 80044f0:	4658      	mov	r0, fp
 80044f2:	f7ff faa1 	bl	8003a38 <quorem>
 80044f6:	4649      	mov	r1, r9
 80044f8:	4605      	mov	r5, r0
 80044fa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80044fe:	4658      	mov	r0, fp
 8004500:	f000 fb22 	bl	8004b48 <__mcmp>
 8004504:	463a      	mov	r2, r7
 8004506:	9002      	str	r0, [sp, #8]
 8004508:	4631      	mov	r1, r6
 800450a:	4620      	mov	r0, r4
 800450c:	f000 fb36 	bl	8004b7c <__mdiff>
 8004510:	68c3      	ldr	r3, [r0, #12]
 8004512:	4602      	mov	r2, r0
 8004514:	bb03      	cbnz	r3, 8004558 <_dtoa_r+0xa00>
 8004516:	4601      	mov	r1, r0
 8004518:	9009      	str	r0, [sp, #36]	; 0x24
 800451a:	4658      	mov	r0, fp
 800451c:	f000 fb14 	bl	8004b48 <__mcmp>
 8004520:	4603      	mov	r3, r0
 8004522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004524:	4611      	mov	r1, r2
 8004526:	4620      	mov	r0, r4
 8004528:	9309      	str	r3, [sp, #36]	; 0x24
 800452a:	f000 f92c 	bl	8004786 <_Bfree>
 800452e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004530:	b9a3      	cbnz	r3, 800455c <_dtoa_r+0xa04>
 8004532:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004534:	b992      	cbnz	r2, 800455c <_dtoa_r+0xa04>
 8004536:	9a08      	ldr	r2, [sp, #32]
 8004538:	b982      	cbnz	r2, 800455c <_dtoa_r+0xa04>
 800453a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800453e:	d029      	beq.n	8004594 <_dtoa_r+0xa3c>
 8004540:	9b02      	ldr	r3, [sp, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	dd01      	ble.n	800454a <_dtoa_r+0x9f2>
 8004546:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800454a:	9b07      	ldr	r3, [sp, #28]
 800454c:	1c5d      	adds	r5, r3, #1
 800454e:	f883 8000 	strb.w	r8, [r3]
 8004552:	e784      	b.n	800445e <_dtoa_r+0x906>
 8004554:	4638      	mov	r0, r7
 8004556:	e7c2      	b.n	80044de <_dtoa_r+0x986>
 8004558:	2301      	movs	r3, #1
 800455a:	e7e3      	b.n	8004524 <_dtoa_r+0x9cc>
 800455c:	9a02      	ldr	r2, [sp, #8]
 800455e:	2a00      	cmp	r2, #0
 8004560:	db04      	blt.n	800456c <_dtoa_r+0xa14>
 8004562:	d123      	bne.n	80045ac <_dtoa_r+0xa54>
 8004564:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004566:	bb0a      	cbnz	r2, 80045ac <_dtoa_r+0xa54>
 8004568:	9a08      	ldr	r2, [sp, #32]
 800456a:	b9fa      	cbnz	r2, 80045ac <_dtoa_r+0xa54>
 800456c:	2b00      	cmp	r3, #0
 800456e:	ddec      	ble.n	800454a <_dtoa_r+0x9f2>
 8004570:	4659      	mov	r1, fp
 8004572:	2201      	movs	r2, #1
 8004574:	4620      	mov	r0, r4
 8004576:	f000 fa93 	bl	8004aa0 <__lshift>
 800457a:	4631      	mov	r1, r6
 800457c:	4683      	mov	fp, r0
 800457e:	f000 fae3 	bl	8004b48 <__mcmp>
 8004582:	2800      	cmp	r0, #0
 8004584:	dc03      	bgt.n	800458e <_dtoa_r+0xa36>
 8004586:	d1e0      	bne.n	800454a <_dtoa_r+0x9f2>
 8004588:	f018 0f01 	tst.w	r8, #1
 800458c:	d0dd      	beq.n	800454a <_dtoa_r+0x9f2>
 800458e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004592:	d1d8      	bne.n	8004546 <_dtoa_r+0x9ee>
 8004594:	9b07      	ldr	r3, [sp, #28]
 8004596:	9a07      	ldr	r2, [sp, #28]
 8004598:	1c5d      	adds	r5, r3, #1
 800459a:	2339      	movs	r3, #57	; 0x39
 800459c:	7013      	strb	r3, [r2, #0]
 800459e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045a2:	1e6a      	subs	r2, r5, #1
 80045a4:	2b39      	cmp	r3, #57	; 0x39
 80045a6:	d04d      	beq.n	8004644 <_dtoa_r+0xaec>
 80045a8:	3301      	adds	r3, #1
 80045aa:	e052      	b.n	8004652 <_dtoa_r+0xafa>
 80045ac:	9a07      	ldr	r2, [sp, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f102 0501 	add.w	r5, r2, #1
 80045b4:	dd06      	ble.n	80045c4 <_dtoa_r+0xa6c>
 80045b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80045ba:	d0eb      	beq.n	8004594 <_dtoa_r+0xa3c>
 80045bc:	f108 0801 	add.w	r8, r8, #1
 80045c0:	9b07      	ldr	r3, [sp, #28]
 80045c2:	e7c4      	b.n	800454e <_dtoa_r+0x9f6>
 80045c4:	9b06      	ldr	r3, [sp, #24]
 80045c6:	9a04      	ldr	r2, [sp, #16]
 80045c8:	1aeb      	subs	r3, r5, r3
 80045ca:	4293      	cmp	r3, r2
 80045cc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80045d0:	d021      	beq.n	8004616 <_dtoa_r+0xabe>
 80045d2:	4659      	mov	r1, fp
 80045d4:	2300      	movs	r3, #0
 80045d6:	220a      	movs	r2, #10
 80045d8:	4620      	mov	r0, r4
 80045da:	f000 f8eb 	bl	80047b4 <__multadd>
 80045de:	45b9      	cmp	r9, r7
 80045e0:	4683      	mov	fp, r0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	f04f 020a 	mov.w	r2, #10
 80045ea:	4649      	mov	r1, r9
 80045ec:	4620      	mov	r0, r4
 80045ee:	d105      	bne.n	80045fc <_dtoa_r+0xaa4>
 80045f0:	f000 f8e0 	bl	80047b4 <__multadd>
 80045f4:	4681      	mov	r9, r0
 80045f6:	4607      	mov	r7, r0
 80045f8:	9507      	str	r5, [sp, #28]
 80045fa:	e778      	b.n	80044ee <_dtoa_r+0x996>
 80045fc:	f000 f8da 	bl	80047b4 <__multadd>
 8004600:	4639      	mov	r1, r7
 8004602:	4681      	mov	r9, r0
 8004604:	2300      	movs	r3, #0
 8004606:	220a      	movs	r2, #10
 8004608:	4620      	mov	r0, r4
 800460a:	f000 f8d3 	bl	80047b4 <__multadd>
 800460e:	4607      	mov	r7, r0
 8004610:	e7f2      	b.n	80045f8 <_dtoa_r+0xaa0>
 8004612:	f04f 0900 	mov.w	r9, #0
 8004616:	4659      	mov	r1, fp
 8004618:	2201      	movs	r2, #1
 800461a:	4620      	mov	r0, r4
 800461c:	f000 fa40 	bl	8004aa0 <__lshift>
 8004620:	4631      	mov	r1, r6
 8004622:	4683      	mov	fp, r0
 8004624:	f000 fa90 	bl	8004b48 <__mcmp>
 8004628:	2800      	cmp	r0, #0
 800462a:	dcb8      	bgt.n	800459e <_dtoa_r+0xa46>
 800462c:	d102      	bne.n	8004634 <_dtoa_r+0xadc>
 800462e:	f018 0f01 	tst.w	r8, #1
 8004632:	d1b4      	bne.n	800459e <_dtoa_r+0xa46>
 8004634:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004638:	1e6a      	subs	r2, r5, #1
 800463a:	2b30      	cmp	r3, #48	; 0x30
 800463c:	f47f af0f 	bne.w	800445e <_dtoa_r+0x906>
 8004640:	4615      	mov	r5, r2
 8004642:	e7f7      	b.n	8004634 <_dtoa_r+0xadc>
 8004644:	9b06      	ldr	r3, [sp, #24]
 8004646:	4293      	cmp	r3, r2
 8004648:	d105      	bne.n	8004656 <_dtoa_r+0xafe>
 800464a:	2331      	movs	r3, #49	; 0x31
 800464c:	9a06      	ldr	r2, [sp, #24]
 800464e:	f10a 0a01 	add.w	sl, sl, #1
 8004652:	7013      	strb	r3, [r2, #0]
 8004654:	e703      	b.n	800445e <_dtoa_r+0x906>
 8004656:	4615      	mov	r5, r2
 8004658:	e7a1      	b.n	800459e <_dtoa_r+0xa46>
 800465a:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <_dtoa_r+0xb60>)
 800465c:	f7ff bae1 	b.w	8003c22 <_dtoa_r+0xca>
 8004660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004662:	2b00      	cmp	r3, #0
 8004664:	f47f aabb 	bne.w	8003bde <_dtoa_r+0x86>
 8004668:	4b14      	ldr	r3, [pc, #80]	; (80046bc <_dtoa_r+0xb64>)
 800466a:	f7ff bada 	b.w	8003c22 <_dtoa_r+0xca>
 800466e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004670:	2b01      	cmp	r3, #1
 8004672:	f77f ae3f 	ble.w	80042f4 <_dtoa_r+0x79c>
 8004676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004678:	9308      	str	r3, [sp, #32]
 800467a:	e653      	b.n	8004324 <_dtoa_r+0x7cc>
 800467c:	9b04      	ldr	r3, [sp, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	dc03      	bgt.n	800468a <_dtoa_r+0xb32>
 8004682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004684:	2b02      	cmp	r3, #2
 8004686:	f73f aed5 	bgt.w	8004434 <_dtoa_r+0x8dc>
 800468a:	9d06      	ldr	r5, [sp, #24]
 800468c:	4631      	mov	r1, r6
 800468e:	4658      	mov	r0, fp
 8004690:	f7ff f9d2 	bl	8003a38 <quorem>
 8004694:	9b06      	ldr	r3, [sp, #24]
 8004696:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800469a:	f805 8b01 	strb.w	r8, [r5], #1
 800469e:	9a04      	ldr	r2, [sp, #16]
 80046a0:	1aeb      	subs	r3, r5, r3
 80046a2:	429a      	cmp	r2, r3
 80046a4:	ddb5      	ble.n	8004612 <_dtoa_r+0xaba>
 80046a6:	4659      	mov	r1, fp
 80046a8:	2300      	movs	r3, #0
 80046aa:	220a      	movs	r2, #10
 80046ac:	4620      	mov	r0, r4
 80046ae:	f000 f881 	bl	80047b4 <__multadd>
 80046b2:	4683      	mov	fp, r0
 80046b4:	e7ea      	b.n	800468c <_dtoa_r+0xb34>
 80046b6:	bf00      	nop
 80046b8:	08005a58 	.word	0x08005a58
 80046bc:	08005a7c 	.word	0x08005a7c

080046c0 <_localeconv_r>:
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <_localeconv_r+0x14>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a18      	ldr	r0, [r3, #32]
 80046c6:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <_localeconv_r+0x18>)
 80046c8:	2800      	cmp	r0, #0
 80046ca:	bf08      	it	eq
 80046cc:	4618      	moveq	r0, r3
 80046ce:	30f0      	adds	r0, #240	; 0xf0
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000094c 	.word	0x2000094c
 80046d8:	200009b0 	.word	0x200009b0

080046dc <malloc>:
 80046dc:	4b02      	ldr	r3, [pc, #8]	; (80046e8 <malloc+0xc>)
 80046de:	4601      	mov	r1, r0
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	f000 bb53 	b.w	8004d8c <_malloc_r>
 80046e6:	bf00      	nop
 80046e8:	2000094c 	.word	0x2000094c

080046ec <memchr>:
 80046ec:	b510      	push	{r4, lr}
 80046ee:	b2c9      	uxtb	r1, r1
 80046f0:	4402      	add	r2, r0
 80046f2:	4290      	cmp	r0, r2
 80046f4:	4603      	mov	r3, r0
 80046f6:	d101      	bne.n	80046fc <memchr+0x10>
 80046f8:	2300      	movs	r3, #0
 80046fa:	e003      	b.n	8004704 <memchr+0x18>
 80046fc:	781c      	ldrb	r4, [r3, #0]
 80046fe:	3001      	adds	r0, #1
 8004700:	428c      	cmp	r4, r1
 8004702:	d1f6      	bne.n	80046f2 <memchr+0x6>
 8004704:	4618      	mov	r0, r3
 8004706:	bd10      	pop	{r4, pc}

08004708 <memcpy>:
 8004708:	b510      	push	{r4, lr}
 800470a:	1e43      	subs	r3, r0, #1
 800470c:	440a      	add	r2, r1
 800470e:	4291      	cmp	r1, r2
 8004710:	d100      	bne.n	8004714 <memcpy+0xc>
 8004712:	bd10      	pop	{r4, pc}
 8004714:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800471c:	e7f7      	b.n	800470e <memcpy+0x6>

0800471e <_Balloc>:
 800471e:	b570      	push	{r4, r5, r6, lr}
 8004720:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004722:	4604      	mov	r4, r0
 8004724:	460e      	mov	r6, r1
 8004726:	b93d      	cbnz	r5, 8004738 <_Balloc+0x1a>
 8004728:	2010      	movs	r0, #16
 800472a:	f7ff ffd7 	bl	80046dc <malloc>
 800472e:	6260      	str	r0, [r4, #36]	; 0x24
 8004730:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004734:	6005      	str	r5, [r0, #0]
 8004736:	60c5      	str	r5, [r0, #12]
 8004738:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800473a:	68eb      	ldr	r3, [r5, #12]
 800473c:	b183      	cbz	r3, 8004760 <_Balloc+0x42>
 800473e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004746:	b9b8      	cbnz	r0, 8004778 <_Balloc+0x5a>
 8004748:	2101      	movs	r1, #1
 800474a:	fa01 f506 	lsl.w	r5, r1, r6
 800474e:	1d6a      	adds	r2, r5, #5
 8004750:	0092      	lsls	r2, r2, #2
 8004752:	4620      	mov	r0, r4
 8004754:	f000 fabf 	bl	8004cd6 <_calloc_r>
 8004758:	b160      	cbz	r0, 8004774 <_Balloc+0x56>
 800475a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800475e:	e00e      	b.n	800477e <_Balloc+0x60>
 8004760:	2221      	movs	r2, #33	; 0x21
 8004762:	2104      	movs	r1, #4
 8004764:	4620      	mov	r0, r4
 8004766:	f000 fab6 	bl	8004cd6 <_calloc_r>
 800476a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800476c:	60e8      	str	r0, [r5, #12]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e4      	bne.n	800473e <_Balloc+0x20>
 8004774:	2000      	movs	r0, #0
 8004776:	bd70      	pop	{r4, r5, r6, pc}
 8004778:	6802      	ldr	r2, [r0, #0]
 800477a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800477e:	2300      	movs	r3, #0
 8004780:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004784:	e7f7      	b.n	8004776 <_Balloc+0x58>

08004786 <_Bfree>:
 8004786:	b570      	push	{r4, r5, r6, lr}
 8004788:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800478a:	4606      	mov	r6, r0
 800478c:	460d      	mov	r5, r1
 800478e:	b93c      	cbnz	r4, 80047a0 <_Bfree+0x1a>
 8004790:	2010      	movs	r0, #16
 8004792:	f7ff ffa3 	bl	80046dc <malloc>
 8004796:	6270      	str	r0, [r6, #36]	; 0x24
 8004798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800479c:	6004      	str	r4, [r0, #0]
 800479e:	60c4      	str	r4, [r0, #12]
 80047a0:	b13d      	cbz	r5, 80047b2 <_Bfree+0x2c>
 80047a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80047a4:	686a      	ldr	r2, [r5, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047ac:	6029      	str	r1, [r5, #0]
 80047ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80047b2:	bd70      	pop	{r4, r5, r6, pc}

080047b4 <__multadd>:
 80047b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047b8:	461f      	mov	r7, r3
 80047ba:	4606      	mov	r6, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	2300      	movs	r3, #0
 80047c0:	690d      	ldr	r5, [r1, #16]
 80047c2:	f101 0c14 	add.w	ip, r1, #20
 80047c6:	f8dc 0000 	ldr.w	r0, [ip]
 80047ca:	3301      	adds	r3, #1
 80047cc:	b281      	uxth	r1, r0
 80047ce:	fb02 7101 	mla	r1, r2, r1, r7
 80047d2:	0c00      	lsrs	r0, r0, #16
 80047d4:	0c0f      	lsrs	r7, r1, #16
 80047d6:	fb02 7000 	mla	r0, r2, r0, r7
 80047da:	b289      	uxth	r1, r1
 80047dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80047e0:	429d      	cmp	r5, r3
 80047e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80047e6:	f84c 1b04 	str.w	r1, [ip], #4
 80047ea:	dcec      	bgt.n	80047c6 <__multadd+0x12>
 80047ec:	b1d7      	cbz	r7, 8004824 <__multadd+0x70>
 80047ee:	68a3      	ldr	r3, [r4, #8]
 80047f0:	42ab      	cmp	r3, r5
 80047f2:	dc12      	bgt.n	800481a <__multadd+0x66>
 80047f4:	6861      	ldr	r1, [r4, #4]
 80047f6:	4630      	mov	r0, r6
 80047f8:	3101      	adds	r1, #1
 80047fa:	f7ff ff90 	bl	800471e <_Balloc>
 80047fe:	4680      	mov	r8, r0
 8004800:	6922      	ldr	r2, [r4, #16]
 8004802:	f104 010c 	add.w	r1, r4, #12
 8004806:	3202      	adds	r2, #2
 8004808:	0092      	lsls	r2, r2, #2
 800480a:	300c      	adds	r0, #12
 800480c:	f7ff ff7c 	bl	8004708 <memcpy>
 8004810:	4621      	mov	r1, r4
 8004812:	4630      	mov	r0, r6
 8004814:	f7ff ffb7 	bl	8004786 <_Bfree>
 8004818:	4644      	mov	r4, r8
 800481a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800481e:	3501      	adds	r5, #1
 8004820:	615f      	str	r7, [r3, #20]
 8004822:	6125      	str	r5, [r4, #16]
 8004824:	4620      	mov	r0, r4
 8004826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800482a <__hi0bits>:
 800482a:	0c02      	lsrs	r2, r0, #16
 800482c:	0412      	lsls	r2, r2, #16
 800482e:	4603      	mov	r3, r0
 8004830:	b9b2      	cbnz	r2, 8004860 <__hi0bits+0x36>
 8004832:	0403      	lsls	r3, r0, #16
 8004834:	2010      	movs	r0, #16
 8004836:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800483a:	bf04      	itt	eq
 800483c:	021b      	lsleq	r3, r3, #8
 800483e:	3008      	addeq	r0, #8
 8004840:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004844:	bf04      	itt	eq
 8004846:	011b      	lsleq	r3, r3, #4
 8004848:	3004      	addeq	r0, #4
 800484a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800484e:	bf04      	itt	eq
 8004850:	009b      	lsleq	r3, r3, #2
 8004852:	3002      	addeq	r0, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	db06      	blt.n	8004866 <__hi0bits+0x3c>
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	d503      	bpl.n	8004864 <__hi0bits+0x3a>
 800485c:	3001      	adds	r0, #1
 800485e:	4770      	bx	lr
 8004860:	2000      	movs	r0, #0
 8004862:	e7e8      	b.n	8004836 <__hi0bits+0xc>
 8004864:	2020      	movs	r0, #32
 8004866:	4770      	bx	lr

08004868 <__lo0bits>:
 8004868:	6803      	ldr	r3, [r0, #0]
 800486a:	4601      	mov	r1, r0
 800486c:	f013 0207 	ands.w	r2, r3, #7
 8004870:	d00b      	beq.n	800488a <__lo0bits+0x22>
 8004872:	07da      	lsls	r2, r3, #31
 8004874:	d423      	bmi.n	80048be <__lo0bits+0x56>
 8004876:	0798      	lsls	r0, r3, #30
 8004878:	bf49      	itett	mi
 800487a:	085b      	lsrmi	r3, r3, #1
 800487c:	089b      	lsrpl	r3, r3, #2
 800487e:	2001      	movmi	r0, #1
 8004880:	600b      	strmi	r3, [r1, #0]
 8004882:	bf5c      	itt	pl
 8004884:	600b      	strpl	r3, [r1, #0]
 8004886:	2002      	movpl	r0, #2
 8004888:	4770      	bx	lr
 800488a:	b298      	uxth	r0, r3
 800488c:	b9a8      	cbnz	r0, 80048ba <__lo0bits+0x52>
 800488e:	2010      	movs	r0, #16
 8004890:	0c1b      	lsrs	r3, r3, #16
 8004892:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004896:	bf04      	itt	eq
 8004898:	0a1b      	lsreq	r3, r3, #8
 800489a:	3008      	addeq	r0, #8
 800489c:	071a      	lsls	r2, r3, #28
 800489e:	bf04      	itt	eq
 80048a0:	091b      	lsreq	r3, r3, #4
 80048a2:	3004      	addeq	r0, #4
 80048a4:	079a      	lsls	r2, r3, #30
 80048a6:	bf04      	itt	eq
 80048a8:	089b      	lsreq	r3, r3, #2
 80048aa:	3002      	addeq	r0, #2
 80048ac:	07da      	lsls	r2, r3, #31
 80048ae:	d402      	bmi.n	80048b6 <__lo0bits+0x4e>
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	d006      	beq.n	80048c2 <__lo0bits+0x5a>
 80048b4:	3001      	adds	r0, #1
 80048b6:	600b      	str	r3, [r1, #0]
 80048b8:	4770      	bx	lr
 80048ba:	4610      	mov	r0, r2
 80048bc:	e7e9      	b.n	8004892 <__lo0bits+0x2a>
 80048be:	2000      	movs	r0, #0
 80048c0:	4770      	bx	lr
 80048c2:	2020      	movs	r0, #32
 80048c4:	4770      	bx	lr

080048c6 <__i2b>:
 80048c6:	b510      	push	{r4, lr}
 80048c8:	460c      	mov	r4, r1
 80048ca:	2101      	movs	r1, #1
 80048cc:	f7ff ff27 	bl	800471e <_Balloc>
 80048d0:	2201      	movs	r2, #1
 80048d2:	6144      	str	r4, [r0, #20]
 80048d4:	6102      	str	r2, [r0, #16]
 80048d6:	bd10      	pop	{r4, pc}

080048d8 <__multiply>:
 80048d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	4614      	mov	r4, r2
 80048de:	690a      	ldr	r2, [r1, #16]
 80048e0:	6923      	ldr	r3, [r4, #16]
 80048e2:	4688      	mov	r8, r1
 80048e4:	429a      	cmp	r2, r3
 80048e6:	bfbe      	ittt	lt
 80048e8:	460b      	movlt	r3, r1
 80048ea:	46a0      	movlt	r8, r4
 80048ec:	461c      	movlt	r4, r3
 80048ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80048f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80048f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80048fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80048fe:	eb07 0609 	add.w	r6, r7, r9
 8004902:	42b3      	cmp	r3, r6
 8004904:	bfb8      	it	lt
 8004906:	3101      	addlt	r1, #1
 8004908:	f7ff ff09 	bl	800471e <_Balloc>
 800490c:	f100 0514 	add.w	r5, r0, #20
 8004910:	462b      	mov	r3, r5
 8004912:	2200      	movs	r2, #0
 8004914:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004918:	4573      	cmp	r3, lr
 800491a:	d316      	bcc.n	800494a <__multiply+0x72>
 800491c:	f104 0214 	add.w	r2, r4, #20
 8004920:	f108 0114 	add.w	r1, r8, #20
 8004924:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004928:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	9b00      	ldr	r3, [sp, #0]
 8004930:	9201      	str	r2, [sp, #4]
 8004932:	4293      	cmp	r3, r2
 8004934:	d80c      	bhi.n	8004950 <__multiply+0x78>
 8004936:	2e00      	cmp	r6, #0
 8004938:	dd03      	ble.n	8004942 <__multiply+0x6a>
 800493a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800493e:	2b00      	cmp	r3, #0
 8004940:	d05d      	beq.n	80049fe <__multiply+0x126>
 8004942:	6106      	str	r6, [r0, #16]
 8004944:	b003      	add	sp, #12
 8004946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494a:	f843 2b04 	str.w	r2, [r3], #4
 800494e:	e7e3      	b.n	8004918 <__multiply+0x40>
 8004950:	f8b2 b000 	ldrh.w	fp, [r2]
 8004954:	f1bb 0f00 	cmp.w	fp, #0
 8004958:	d023      	beq.n	80049a2 <__multiply+0xca>
 800495a:	4689      	mov	r9, r1
 800495c:	46ac      	mov	ip, r5
 800495e:	f04f 0800 	mov.w	r8, #0
 8004962:	f859 4b04 	ldr.w	r4, [r9], #4
 8004966:	f8dc a000 	ldr.w	sl, [ip]
 800496a:	b2a3      	uxth	r3, r4
 800496c:	fa1f fa8a 	uxth.w	sl, sl
 8004970:	fb0b a303 	mla	r3, fp, r3, sl
 8004974:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004978:	f8dc 4000 	ldr.w	r4, [ip]
 800497c:	4443      	add	r3, r8
 800497e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004982:	fb0b 840a 	mla	r4, fp, sl, r8
 8004986:	46e2      	mov	sl, ip
 8004988:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800498c:	b29b      	uxth	r3, r3
 800498e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004992:	454f      	cmp	r7, r9
 8004994:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004998:	f84a 3b04 	str.w	r3, [sl], #4
 800499c:	d82b      	bhi.n	80049f6 <__multiply+0x11e>
 800499e:	f8cc 8004 	str.w	r8, [ip, #4]
 80049a2:	9b01      	ldr	r3, [sp, #4]
 80049a4:	3204      	adds	r2, #4
 80049a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80049aa:	f1ba 0f00 	cmp.w	sl, #0
 80049ae:	d020      	beq.n	80049f2 <__multiply+0x11a>
 80049b0:	4689      	mov	r9, r1
 80049b2:	46a8      	mov	r8, r5
 80049b4:	f04f 0b00 	mov.w	fp, #0
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	f8b9 c000 	ldrh.w	ip, [r9]
 80049be:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	fb0a 440c 	mla	r4, sl, ip, r4
 80049c8:	46c4      	mov	ip, r8
 80049ca:	445c      	add	r4, fp
 80049cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80049d0:	f84c 3b04 	str.w	r3, [ip], #4
 80049d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80049d8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	fb0a b303 	mla	r3, sl, r3, fp
 80049e2:	454f      	cmp	r7, r9
 80049e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80049e8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80049ec:	d805      	bhi.n	80049fa <__multiply+0x122>
 80049ee:	f8c8 3004 	str.w	r3, [r8, #4]
 80049f2:	3504      	adds	r5, #4
 80049f4:	e79b      	b.n	800492e <__multiply+0x56>
 80049f6:	46d4      	mov	ip, sl
 80049f8:	e7b3      	b.n	8004962 <__multiply+0x8a>
 80049fa:	46e0      	mov	r8, ip
 80049fc:	e7dd      	b.n	80049ba <__multiply+0xe2>
 80049fe:	3e01      	subs	r6, #1
 8004a00:	e799      	b.n	8004936 <__multiply+0x5e>
	...

08004a04 <__pow5mult>:
 8004a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a08:	4615      	mov	r5, r2
 8004a0a:	f012 0203 	ands.w	r2, r2, #3
 8004a0e:	4606      	mov	r6, r0
 8004a10:	460f      	mov	r7, r1
 8004a12:	d007      	beq.n	8004a24 <__pow5mult+0x20>
 8004a14:	4c21      	ldr	r4, [pc, #132]	; (8004a9c <__pow5mult+0x98>)
 8004a16:	3a01      	subs	r2, #1
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a1e:	f7ff fec9 	bl	80047b4 <__multadd>
 8004a22:	4607      	mov	r7, r0
 8004a24:	10ad      	asrs	r5, r5, #2
 8004a26:	d035      	beq.n	8004a94 <__pow5mult+0x90>
 8004a28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a2a:	b93c      	cbnz	r4, 8004a3c <__pow5mult+0x38>
 8004a2c:	2010      	movs	r0, #16
 8004a2e:	f7ff fe55 	bl	80046dc <malloc>
 8004a32:	6270      	str	r0, [r6, #36]	; 0x24
 8004a34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a38:	6004      	str	r4, [r0, #0]
 8004a3a:	60c4      	str	r4, [r0, #12]
 8004a3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a44:	b94c      	cbnz	r4, 8004a5a <__pow5mult+0x56>
 8004a46:	f240 2171 	movw	r1, #625	; 0x271
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f7ff ff3b 	bl	80048c6 <__i2b>
 8004a50:	2300      	movs	r3, #0
 8004a52:	4604      	mov	r4, r0
 8004a54:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a58:	6003      	str	r3, [r0, #0]
 8004a5a:	f04f 0800 	mov.w	r8, #0
 8004a5e:	07eb      	lsls	r3, r5, #31
 8004a60:	d50a      	bpl.n	8004a78 <__pow5mult+0x74>
 8004a62:	4639      	mov	r1, r7
 8004a64:	4622      	mov	r2, r4
 8004a66:	4630      	mov	r0, r6
 8004a68:	f7ff ff36 	bl	80048d8 <__multiply>
 8004a6c:	4681      	mov	r9, r0
 8004a6e:	4639      	mov	r1, r7
 8004a70:	4630      	mov	r0, r6
 8004a72:	f7ff fe88 	bl	8004786 <_Bfree>
 8004a76:	464f      	mov	r7, r9
 8004a78:	106d      	asrs	r5, r5, #1
 8004a7a:	d00b      	beq.n	8004a94 <__pow5mult+0x90>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	b938      	cbnz	r0, 8004a90 <__pow5mult+0x8c>
 8004a80:	4622      	mov	r2, r4
 8004a82:	4621      	mov	r1, r4
 8004a84:	4630      	mov	r0, r6
 8004a86:	f7ff ff27 	bl	80048d8 <__multiply>
 8004a8a:	6020      	str	r0, [r4, #0]
 8004a8c:	f8c0 8000 	str.w	r8, [r0]
 8004a90:	4604      	mov	r4, r0
 8004a92:	e7e4      	b.n	8004a5e <__pow5mult+0x5a>
 8004a94:	4638      	mov	r0, r7
 8004a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a9a:	bf00      	nop
 8004a9c:	08005be0 	.word	0x08005be0

08004aa0 <__lshift>:
 8004aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	4607      	mov	r7, r0
 8004aa8:	4616      	mov	r6, r2
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ab0:	eb0a 0903 	add.w	r9, sl, r3
 8004ab4:	6849      	ldr	r1, [r1, #4]
 8004ab6:	68a3      	ldr	r3, [r4, #8]
 8004ab8:	f109 0501 	add.w	r5, r9, #1
 8004abc:	42ab      	cmp	r3, r5
 8004abe:	db32      	blt.n	8004b26 <__lshift+0x86>
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	f7ff fe2c 	bl	800471e <_Balloc>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	4680      	mov	r8, r0
 8004aca:	461a      	mov	r2, r3
 8004acc:	f100 0114 	add.w	r1, r0, #20
 8004ad0:	4553      	cmp	r3, sl
 8004ad2:	db2b      	blt.n	8004b2c <__lshift+0x8c>
 8004ad4:	6920      	ldr	r0, [r4, #16]
 8004ad6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ada:	f104 0314 	add.w	r3, r4, #20
 8004ade:	f016 021f 	ands.w	r2, r6, #31
 8004ae2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ae6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004aea:	d025      	beq.n	8004b38 <__lshift+0x98>
 8004aec:	2000      	movs	r0, #0
 8004aee:	f1c2 0e20 	rsb	lr, r2, #32
 8004af2:	468a      	mov	sl, r1
 8004af4:	681e      	ldr	r6, [r3, #0]
 8004af6:	4096      	lsls	r6, r2
 8004af8:	4330      	orrs	r0, r6
 8004afa:	f84a 0b04 	str.w	r0, [sl], #4
 8004afe:	f853 0b04 	ldr.w	r0, [r3], #4
 8004b02:	459c      	cmp	ip, r3
 8004b04:	fa20 f00e 	lsr.w	r0, r0, lr
 8004b08:	d814      	bhi.n	8004b34 <__lshift+0x94>
 8004b0a:	6048      	str	r0, [r1, #4]
 8004b0c:	b108      	cbz	r0, 8004b12 <__lshift+0x72>
 8004b0e:	f109 0502 	add.w	r5, r9, #2
 8004b12:	3d01      	subs	r5, #1
 8004b14:	4638      	mov	r0, r7
 8004b16:	f8c8 5010 	str.w	r5, [r8, #16]
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	f7ff fe33 	bl	8004786 <_Bfree>
 8004b20:	4640      	mov	r0, r8
 8004b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b26:	3101      	adds	r1, #1
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	e7c7      	b.n	8004abc <__lshift+0x1c>
 8004b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b30:	3301      	adds	r3, #1
 8004b32:	e7cd      	b.n	8004ad0 <__lshift+0x30>
 8004b34:	4651      	mov	r1, sl
 8004b36:	e7dc      	b.n	8004af2 <__lshift+0x52>
 8004b38:	3904      	subs	r1, #4
 8004b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b3e:	459c      	cmp	ip, r3
 8004b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b44:	d8f9      	bhi.n	8004b3a <__lshift+0x9a>
 8004b46:	e7e4      	b.n	8004b12 <__lshift+0x72>

08004b48 <__mcmp>:
 8004b48:	6903      	ldr	r3, [r0, #16]
 8004b4a:	690a      	ldr	r2, [r1, #16]
 8004b4c:	b530      	push	{r4, r5, lr}
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	d10c      	bne.n	8004b6c <__mcmp+0x24>
 8004b52:	0092      	lsls	r2, r2, #2
 8004b54:	3014      	adds	r0, #20
 8004b56:	3114      	adds	r1, #20
 8004b58:	1884      	adds	r4, r0, r2
 8004b5a:	4411      	add	r1, r2
 8004b5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b64:	4295      	cmp	r5, r2
 8004b66:	d003      	beq.n	8004b70 <__mcmp+0x28>
 8004b68:	d305      	bcc.n	8004b76 <__mcmp+0x2e>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd30      	pop	{r4, r5, pc}
 8004b70:	42a0      	cmp	r0, r4
 8004b72:	d3f3      	bcc.n	8004b5c <__mcmp+0x14>
 8004b74:	e7fa      	b.n	8004b6c <__mcmp+0x24>
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7a:	e7f7      	b.n	8004b6c <__mcmp+0x24>

08004b7c <__mdiff>:
 8004b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b80:	460d      	mov	r5, r1
 8004b82:	4607      	mov	r7, r0
 8004b84:	4611      	mov	r1, r2
 8004b86:	4628      	mov	r0, r5
 8004b88:	4614      	mov	r4, r2
 8004b8a:	f7ff ffdd 	bl	8004b48 <__mcmp>
 8004b8e:	1e06      	subs	r6, r0, #0
 8004b90:	d108      	bne.n	8004ba4 <__mdiff+0x28>
 8004b92:	4631      	mov	r1, r6
 8004b94:	4638      	mov	r0, r7
 8004b96:	f7ff fdc2 	bl	800471e <_Balloc>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba4:	bfa4      	itt	ge
 8004ba6:	4623      	movge	r3, r4
 8004ba8:	462c      	movge	r4, r5
 8004baa:	4638      	mov	r0, r7
 8004bac:	6861      	ldr	r1, [r4, #4]
 8004bae:	bfa6      	itte	ge
 8004bb0:	461d      	movge	r5, r3
 8004bb2:	2600      	movge	r6, #0
 8004bb4:	2601      	movlt	r6, #1
 8004bb6:	f7ff fdb2 	bl	800471e <_Balloc>
 8004bba:	f04f 0e00 	mov.w	lr, #0
 8004bbe:	60c6      	str	r6, [r0, #12]
 8004bc0:	692b      	ldr	r3, [r5, #16]
 8004bc2:	6926      	ldr	r6, [r4, #16]
 8004bc4:	f104 0214 	add.w	r2, r4, #20
 8004bc8:	f105 0914 	add.w	r9, r5, #20
 8004bcc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004bd0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004bd4:	f100 0114 	add.w	r1, r0, #20
 8004bd8:	f852 ab04 	ldr.w	sl, [r2], #4
 8004bdc:	f859 5b04 	ldr.w	r5, [r9], #4
 8004be0:	fa1f f38a 	uxth.w	r3, sl
 8004be4:	4473      	add	r3, lr
 8004be6:	b2ac      	uxth	r4, r5
 8004be8:	1b1b      	subs	r3, r3, r4
 8004bea:	0c2c      	lsrs	r4, r5, #16
 8004bec:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004bf0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004bfa:	45c8      	cmp	r8, r9
 8004bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004c00:	4694      	mov	ip, r2
 8004c02:	f841 4b04 	str.w	r4, [r1], #4
 8004c06:	d8e7      	bhi.n	8004bd8 <__mdiff+0x5c>
 8004c08:	45bc      	cmp	ip, r7
 8004c0a:	d304      	bcc.n	8004c16 <__mdiff+0x9a>
 8004c0c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004c10:	b183      	cbz	r3, 8004c34 <__mdiff+0xb8>
 8004c12:	6106      	str	r6, [r0, #16]
 8004c14:	e7c4      	b.n	8004ba0 <__mdiff+0x24>
 8004c16:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004c1a:	b2a2      	uxth	r2, r4
 8004c1c:	4472      	add	r2, lr
 8004c1e:	1413      	asrs	r3, r2, #16
 8004c20:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004c24:	b292      	uxth	r2, r2
 8004c26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c2a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004c2e:	f841 2b04 	str.w	r2, [r1], #4
 8004c32:	e7e9      	b.n	8004c08 <__mdiff+0x8c>
 8004c34:	3e01      	subs	r6, #1
 8004c36:	e7e9      	b.n	8004c0c <__mdiff+0x90>

08004c38 <__d2b>:
 8004c38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004c3c:	461c      	mov	r4, r3
 8004c3e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004c42:	2101      	movs	r1, #1
 8004c44:	4690      	mov	r8, r2
 8004c46:	f7ff fd6a 	bl	800471e <_Balloc>
 8004c4a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004c4e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004c52:	4607      	mov	r7, r0
 8004c54:	bb34      	cbnz	r4, 8004ca4 <__d2b+0x6c>
 8004c56:	9201      	str	r2, [sp, #4]
 8004c58:	f1b8 0200 	subs.w	r2, r8, #0
 8004c5c:	d027      	beq.n	8004cae <__d2b+0x76>
 8004c5e:	a802      	add	r0, sp, #8
 8004c60:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004c64:	f7ff fe00 	bl	8004868 <__lo0bits>
 8004c68:	9900      	ldr	r1, [sp, #0]
 8004c6a:	b1f0      	cbz	r0, 8004caa <__d2b+0x72>
 8004c6c:	9a01      	ldr	r2, [sp, #4]
 8004c6e:	f1c0 0320 	rsb	r3, r0, #32
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	430b      	orrs	r3, r1
 8004c78:	40c2      	lsrs	r2, r0
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	9201      	str	r2, [sp, #4]
 8004c7e:	9b01      	ldr	r3, [sp, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf14      	ite	ne
 8004c84:	2102      	movne	r1, #2
 8004c86:	2101      	moveq	r1, #1
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	6139      	str	r1, [r7, #16]
 8004c8c:	b1c4      	cbz	r4, 8004cc0 <__d2b+0x88>
 8004c8e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004c92:	4404      	add	r4, r0
 8004c94:	6034      	str	r4, [r6, #0]
 8004c96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004c9a:	6028      	str	r0, [r5, #0]
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	b002      	add	sp, #8
 8004ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004ca8:	e7d5      	b.n	8004c56 <__d2b+0x1e>
 8004caa:	6179      	str	r1, [r7, #20]
 8004cac:	e7e7      	b.n	8004c7e <__d2b+0x46>
 8004cae:	a801      	add	r0, sp, #4
 8004cb0:	f7ff fdda 	bl	8004868 <__lo0bits>
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	9b01      	ldr	r3, [sp, #4]
 8004cb8:	6139      	str	r1, [r7, #16]
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	3020      	adds	r0, #32
 8004cbe:	e7e5      	b.n	8004c8c <__d2b+0x54>
 8004cc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004cc4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004cc8:	6030      	str	r0, [r6, #0]
 8004cca:	6918      	ldr	r0, [r3, #16]
 8004ccc:	f7ff fdad 	bl	800482a <__hi0bits>
 8004cd0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004cd4:	e7e1      	b.n	8004c9a <__d2b+0x62>

08004cd6 <_calloc_r>:
 8004cd6:	b538      	push	{r3, r4, r5, lr}
 8004cd8:	fb02 f401 	mul.w	r4, r2, r1
 8004cdc:	4621      	mov	r1, r4
 8004cde:	f000 f855 	bl	8004d8c <_malloc_r>
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	b118      	cbz	r0, 8004cee <_calloc_r+0x18>
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	2100      	movs	r1, #0
 8004cea:	f7fe fa2d 	bl	8003148 <memset>
 8004cee:	4628      	mov	r0, r5
 8004cf0:	bd38      	pop	{r3, r4, r5, pc}
	...

08004cf4 <_free_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	4605      	mov	r5, r0
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	d043      	beq.n	8004d84 <_free_r+0x90>
 8004cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d00:	1f0c      	subs	r4, r1, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bfb8      	it	lt
 8004d06:	18e4      	addlt	r4, r4, r3
 8004d08:	f000 fa27 	bl	800515a <__malloc_lock>
 8004d0c:	4a1e      	ldr	r2, [pc, #120]	; (8004d88 <_free_r+0x94>)
 8004d0e:	6813      	ldr	r3, [r2, #0]
 8004d10:	4610      	mov	r0, r2
 8004d12:	b933      	cbnz	r3, 8004d22 <_free_r+0x2e>
 8004d14:	6063      	str	r3, [r4, #4]
 8004d16:	6014      	str	r4, [r2, #0]
 8004d18:	4628      	mov	r0, r5
 8004d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d1e:	f000 ba1d 	b.w	800515c <__malloc_unlock>
 8004d22:	42a3      	cmp	r3, r4
 8004d24:	d90b      	bls.n	8004d3e <_free_r+0x4a>
 8004d26:	6821      	ldr	r1, [r4, #0]
 8004d28:	1862      	adds	r2, r4, r1
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	bf01      	itttt	eq
 8004d2e:	681a      	ldreq	r2, [r3, #0]
 8004d30:	685b      	ldreq	r3, [r3, #4]
 8004d32:	1852      	addeq	r2, r2, r1
 8004d34:	6022      	streq	r2, [r4, #0]
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	6004      	str	r4, [r0, #0]
 8004d3a:	e7ed      	b.n	8004d18 <_free_r+0x24>
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	b10a      	cbz	r2, 8004d46 <_free_r+0x52>
 8004d42:	42a2      	cmp	r2, r4
 8004d44:	d9fa      	bls.n	8004d3c <_free_r+0x48>
 8004d46:	6819      	ldr	r1, [r3, #0]
 8004d48:	1858      	adds	r0, r3, r1
 8004d4a:	42a0      	cmp	r0, r4
 8004d4c:	d10b      	bne.n	8004d66 <_free_r+0x72>
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	4401      	add	r1, r0
 8004d52:	1858      	adds	r0, r3, r1
 8004d54:	4282      	cmp	r2, r0
 8004d56:	6019      	str	r1, [r3, #0]
 8004d58:	d1de      	bne.n	8004d18 <_free_r+0x24>
 8004d5a:	6810      	ldr	r0, [r2, #0]
 8004d5c:	6852      	ldr	r2, [r2, #4]
 8004d5e:	4401      	add	r1, r0
 8004d60:	6019      	str	r1, [r3, #0]
 8004d62:	605a      	str	r2, [r3, #4]
 8004d64:	e7d8      	b.n	8004d18 <_free_r+0x24>
 8004d66:	d902      	bls.n	8004d6e <_free_r+0x7a>
 8004d68:	230c      	movs	r3, #12
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	e7d4      	b.n	8004d18 <_free_r+0x24>
 8004d6e:	6820      	ldr	r0, [r4, #0]
 8004d70:	1821      	adds	r1, r4, r0
 8004d72:	428a      	cmp	r2, r1
 8004d74:	bf01      	itttt	eq
 8004d76:	6811      	ldreq	r1, [r2, #0]
 8004d78:	6852      	ldreq	r2, [r2, #4]
 8004d7a:	1809      	addeq	r1, r1, r0
 8004d7c:	6021      	streq	r1, [r4, #0]
 8004d7e:	6062      	str	r2, [r4, #4]
 8004d80:	605c      	str	r4, [r3, #4]
 8004d82:	e7c9      	b.n	8004d18 <_free_r+0x24>
 8004d84:	bd38      	pop	{r3, r4, r5, pc}
 8004d86:	bf00      	nop
 8004d88:	20000b3c 	.word	0x20000b3c

08004d8c <_malloc_r>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	1ccd      	adds	r5, r1, #3
 8004d90:	f025 0503 	bic.w	r5, r5, #3
 8004d94:	3508      	adds	r5, #8
 8004d96:	2d0c      	cmp	r5, #12
 8004d98:	bf38      	it	cc
 8004d9a:	250c      	movcc	r5, #12
 8004d9c:	2d00      	cmp	r5, #0
 8004d9e:	4606      	mov	r6, r0
 8004da0:	db01      	blt.n	8004da6 <_malloc_r+0x1a>
 8004da2:	42a9      	cmp	r1, r5
 8004da4:	d903      	bls.n	8004dae <_malloc_r+0x22>
 8004da6:	230c      	movs	r3, #12
 8004da8:	6033      	str	r3, [r6, #0]
 8004daa:	2000      	movs	r0, #0
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
 8004dae:	f000 f9d4 	bl	800515a <__malloc_lock>
 8004db2:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <_malloc_r+0xac>)
 8004db4:	6814      	ldr	r4, [r2, #0]
 8004db6:	4621      	mov	r1, r4
 8004db8:	b991      	cbnz	r1, 8004de0 <_malloc_r+0x54>
 8004dba:	4c20      	ldr	r4, [pc, #128]	; (8004e3c <_malloc_r+0xb0>)
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	b91b      	cbnz	r3, 8004dc8 <_malloc_r+0x3c>
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 f98f 	bl	80050e4 <_sbrk_r>
 8004dc6:	6020      	str	r0, [r4, #0]
 8004dc8:	4629      	mov	r1, r5
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f000 f98a 	bl	80050e4 <_sbrk_r>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d124      	bne.n	8004e1e <_malloc_r+0x92>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	6033      	str	r3, [r6, #0]
 8004dda:	f000 f9bf 	bl	800515c <__malloc_unlock>
 8004dde:	e7e4      	b.n	8004daa <_malloc_r+0x1e>
 8004de0:	680b      	ldr	r3, [r1, #0]
 8004de2:	1b5b      	subs	r3, r3, r5
 8004de4:	d418      	bmi.n	8004e18 <_malloc_r+0x8c>
 8004de6:	2b0b      	cmp	r3, #11
 8004de8:	d90f      	bls.n	8004e0a <_malloc_r+0x7e>
 8004dea:	600b      	str	r3, [r1, #0]
 8004dec:	18cc      	adds	r4, r1, r3
 8004dee:	50cd      	str	r5, [r1, r3]
 8004df0:	4630      	mov	r0, r6
 8004df2:	f000 f9b3 	bl	800515c <__malloc_unlock>
 8004df6:	f104 000b 	add.w	r0, r4, #11
 8004dfa:	1d23      	adds	r3, r4, #4
 8004dfc:	f020 0007 	bic.w	r0, r0, #7
 8004e00:	1ac3      	subs	r3, r0, r3
 8004e02:	d0d3      	beq.n	8004dac <_malloc_r+0x20>
 8004e04:	425a      	negs	r2, r3
 8004e06:	50e2      	str	r2, [r4, r3]
 8004e08:	e7d0      	b.n	8004dac <_malloc_r+0x20>
 8004e0a:	684b      	ldr	r3, [r1, #4]
 8004e0c:	428c      	cmp	r4, r1
 8004e0e:	bf16      	itet	ne
 8004e10:	6063      	strne	r3, [r4, #4]
 8004e12:	6013      	streq	r3, [r2, #0]
 8004e14:	460c      	movne	r4, r1
 8004e16:	e7eb      	b.n	8004df0 <_malloc_r+0x64>
 8004e18:	460c      	mov	r4, r1
 8004e1a:	6849      	ldr	r1, [r1, #4]
 8004e1c:	e7cc      	b.n	8004db8 <_malloc_r+0x2c>
 8004e1e:	1cc4      	adds	r4, r0, #3
 8004e20:	f024 0403 	bic.w	r4, r4, #3
 8004e24:	42a0      	cmp	r0, r4
 8004e26:	d005      	beq.n	8004e34 <_malloc_r+0xa8>
 8004e28:	1a21      	subs	r1, r4, r0
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f000 f95a 	bl	80050e4 <_sbrk_r>
 8004e30:	3001      	adds	r0, #1
 8004e32:	d0cf      	beq.n	8004dd4 <_malloc_r+0x48>
 8004e34:	6025      	str	r5, [r4, #0]
 8004e36:	e7db      	b.n	8004df0 <_malloc_r+0x64>
 8004e38:	20000b3c 	.word	0x20000b3c
 8004e3c:	20000b40 	.word	0x20000b40

08004e40 <__ssputs_r>:
 8004e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	688e      	ldr	r6, [r1, #8]
 8004e46:	4682      	mov	sl, r0
 8004e48:	429e      	cmp	r6, r3
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	4690      	mov	r8, r2
 8004e4e:	4699      	mov	r9, r3
 8004e50:	d837      	bhi.n	8004ec2 <__ssputs_r+0x82>
 8004e52:	898a      	ldrh	r2, [r1, #12]
 8004e54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e58:	d031      	beq.n	8004ebe <__ssputs_r+0x7e>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	6825      	ldr	r5, [r4, #0]
 8004e5e:	6909      	ldr	r1, [r1, #16]
 8004e60:	1a6f      	subs	r7, r5, r1
 8004e62:	6965      	ldr	r5, [r4, #20]
 8004e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e68:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e6c:	f109 0301 	add.w	r3, r9, #1
 8004e70:	443b      	add	r3, r7
 8004e72:	429d      	cmp	r5, r3
 8004e74:	bf38      	it	cc
 8004e76:	461d      	movcc	r5, r3
 8004e78:	0553      	lsls	r3, r2, #21
 8004e7a:	d530      	bpl.n	8004ede <__ssputs_r+0x9e>
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f7ff ff85 	bl	8004d8c <_malloc_r>
 8004e82:	4606      	mov	r6, r0
 8004e84:	b950      	cbnz	r0, 8004e9c <__ssputs_r+0x5c>
 8004e86:	230c      	movs	r3, #12
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	f8ca 3000 	str.w	r3, [sl]
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	463a      	mov	r2, r7
 8004e9e:	6921      	ldr	r1, [r4, #16]
 8004ea0:	f7ff fc32 	bl	8004708 <memcpy>
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eae:	81a3      	strh	r3, [r4, #12]
 8004eb0:	6126      	str	r6, [r4, #16]
 8004eb2:	443e      	add	r6, r7
 8004eb4:	6026      	str	r6, [r4, #0]
 8004eb6:	464e      	mov	r6, r9
 8004eb8:	6165      	str	r5, [r4, #20]
 8004eba:	1bed      	subs	r5, r5, r7
 8004ebc:	60a5      	str	r5, [r4, #8]
 8004ebe:	454e      	cmp	r6, r9
 8004ec0:	d900      	bls.n	8004ec4 <__ssputs_r+0x84>
 8004ec2:	464e      	mov	r6, r9
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	6820      	ldr	r0, [r4, #0]
 8004eca:	f000 f92d 	bl	8005128 <memmove>
 8004ece:	68a3      	ldr	r3, [r4, #8]
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	1b9b      	subs	r3, r3, r6
 8004ed4:	60a3      	str	r3, [r4, #8]
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	441e      	add	r6, r3
 8004eda:	6026      	str	r6, [r4, #0]
 8004edc:	e7dc      	b.n	8004e98 <__ssputs_r+0x58>
 8004ede:	462a      	mov	r2, r5
 8004ee0:	f000 f93d 	bl	800515e <_realloc_r>
 8004ee4:	4606      	mov	r6, r0
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	d1e2      	bne.n	8004eb0 <__ssputs_r+0x70>
 8004eea:	6921      	ldr	r1, [r4, #16]
 8004eec:	4650      	mov	r0, sl
 8004eee:	f7ff ff01 	bl	8004cf4 <_free_r>
 8004ef2:	e7c8      	b.n	8004e86 <__ssputs_r+0x46>

08004ef4 <_svfiprintf_r>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	461d      	mov	r5, r3
 8004efa:	898b      	ldrh	r3, [r1, #12]
 8004efc:	b09d      	sub	sp, #116	; 0x74
 8004efe:	061f      	lsls	r7, r3, #24
 8004f00:	4680      	mov	r8, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	4616      	mov	r6, r2
 8004f06:	d50f      	bpl.n	8004f28 <_svfiprintf_r+0x34>
 8004f08:	690b      	ldr	r3, [r1, #16]
 8004f0a:	b96b      	cbnz	r3, 8004f28 <_svfiprintf_r+0x34>
 8004f0c:	2140      	movs	r1, #64	; 0x40
 8004f0e:	f7ff ff3d 	bl	8004d8c <_malloc_r>
 8004f12:	6020      	str	r0, [r4, #0]
 8004f14:	6120      	str	r0, [r4, #16]
 8004f16:	b928      	cbnz	r0, 8004f24 <_svfiprintf_r+0x30>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	f8c8 3000 	str.w	r3, [r8]
 8004f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f22:	e0c8      	b.n	80050b6 <_svfiprintf_r+0x1c2>
 8004f24:	2340      	movs	r3, #64	; 0x40
 8004f26:	6163      	str	r3, [r4, #20]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f32:	2330      	movs	r3, #48	; 0x30
 8004f34:	f04f 0b01 	mov.w	fp, #1
 8004f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f3c:	9503      	str	r5, [sp, #12]
 8004f3e:	4637      	mov	r7, r6
 8004f40:	463d      	mov	r5, r7
 8004f42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f46:	b10b      	cbz	r3, 8004f4c <_svfiprintf_r+0x58>
 8004f48:	2b25      	cmp	r3, #37	; 0x25
 8004f4a:	d13e      	bne.n	8004fca <_svfiprintf_r+0xd6>
 8004f4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f50:	d00b      	beq.n	8004f6a <_svfiprintf_r+0x76>
 8004f52:	4653      	mov	r3, sl
 8004f54:	4632      	mov	r2, r6
 8004f56:	4621      	mov	r1, r4
 8004f58:	4640      	mov	r0, r8
 8004f5a:	f7ff ff71 	bl	8004e40 <__ssputs_r>
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f000 80a4 	beq.w	80050ac <_svfiprintf_r+0x1b8>
 8004f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f66:	4453      	add	r3, sl
 8004f68:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6a:	783b      	ldrb	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 809d 	beq.w	80050ac <_svfiprintf_r+0x1b8>
 8004f72:	2300      	movs	r3, #0
 8004f74:	f04f 32ff 	mov.w	r2, #4294967295
 8004f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f7c:	9304      	str	r3, [sp, #16]
 8004f7e:	9307      	str	r3, [sp, #28]
 8004f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f84:	931a      	str	r3, [sp, #104]	; 0x68
 8004f86:	462f      	mov	r7, r5
 8004f88:	2205      	movs	r2, #5
 8004f8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f8e:	4850      	ldr	r0, [pc, #320]	; (80050d0 <_svfiprintf_r+0x1dc>)
 8004f90:	f7ff fbac 	bl	80046ec <memchr>
 8004f94:	9b04      	ldr	r3, [sp, #16]
 8004f96:	b9d0      	cbnz	r0, 8004fce <_svfiprintf_r+0xda>
 8004f98:	06d9      	lsls	r1, r3, #27
 8004f9a:	bf44      	itt	mi
 8004f9c:	2220      	movmi	r2, #32
 8004f9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fa2:	071a      	lsls	r2, r3, #28
 8004fa4:	bf44      	itt	mi
 8004fa6:	222b      	movmi	r2, #43	; 0x2b
 8004fa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fac:	782a      	ldrb	r2, [r5, #0]
 8004fae:	2a2a      	cmp	r2, #42	; 0x2a
 8004fb0:	d015      	beq.n	8004fde <_svfiprintf_r+0xea>
 8004fb2:	462f      	mov	r7, r5
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	250a      	movs	r5, #10
 8004fb8:	9a07      	ldr	r2, [sp, #28]
 8004fba:	4639      	mov	r1, r7
 8004fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fc0:	3b30      	subs	r3, #48	; 0x30
 8004fc2:	2b09      	cmp	r3, #9
 8004fc4:	d94d      	bls.n	8005062 <_svfiprintf_r+0x16e>
 8004fc6:	b1b8      	cbz	r0, 8004ff8 <_svfiprintf_r+0x104>
 8004fc8:	e00f      	b.n	8004fea <_svfiprintf_r+0xf6>
 8004fca:	462f      	mov	r7, r5
 8004fcc:	e7b8      	b.n	8004f40 <_svfiprintf_r+0x4c>
 8004fce:	4a40      	ldr	r2, [pc, #256]	; (80050d0 <_svfiprintf_r+0x1dc>)
 8004fd0:	463d      	mov	r5, r7
 8004fd2:	1a80      	subs	r0, r0, r2
 8004fd4:	fa0b f000 	lsl.w	r0, fp, r0
 8004fd8:	4318      	orrs	r0, r3
 8004fda:	9004      	str	r0, [sp, #16]
 8004fdc:	e7d3      	b.n	8004f86 <_svfiprintf_r+0x92>
 8004fde:	9a03      	ldr	r2, [sp, #12]
 8004fe0:	1d11      	adds	r1, r2, #4
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	9103      	str	r1, [sp, #12]
 8004fe6:	2a00      	cmp	r2, #0
 8004fe8:	db01      	blt.n	8004fee <_svfiprintf_r+0xfa>
 8004fea:	9207      	str	r2, [sp, #28]
 8004fec:	e004      	b.n	8004ff8 <_svfiprintf_r+0x104>
 8004fee:	4252      	negs	r2, r2
 8004ff0:	f043 0302 	orr.w	r3, r3, #2
 8004ff4:	9207      	str	r2, [sp, #28]
 8004ff6:	9304      	str	r3, [sp, #16]
 8004ff8:	783b      	ldrb	r3, [r7, #0]
 8004ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8004ffc:	d10c      	bne.n	8005018 <_svfiprintf_r+0x124>
 8004ffe:	787b      	ldrb	r3, [r7, #1]
 8005000:	2b2a      	cmp	r3, #42	; 0x2a
 8005002:	d133      	bne.n	800506c <_svfiprintf_r+0x178>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	3702      	adds	r7, #2
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	9203      	str	r2, [sp, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	bfb8      	it	lt
 8005012:	f04f 33ff 	movlt.w	r3, #4294967295
 8005016:	9305      	str	r3, [sp, #20]
 8005018:	4d2e      	ldr	r5, [pc, #184]	; (80050d4 <_svfiprintf_r+0x1e0>)
 800501a:	2203      	movs	r2, #3
 800501c:	7839      	ldrb	r1, [r7, #0]
 800501e:	4628      	mov	r0, r5
 8005020:	f7ff fb64 	bl	80046ec <memchr>
 8005024:	b138      	cbz	r0, 8005036 <_svfiprintf_r+0x142>
 8005026:	2340      	movs	r3, #64	; 0x40
 8005028:	1b40      	subs	r0, r0, r5
 800502a:	fa03 f000 	lsl.w	r0, r3, r0
 800502e:	9b04      	ldr	r3, [sp, #16]
 8005030:	3701      	adds	r7, #1
 8005032:	4303      	orrs	r3, r0
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	7839      	ldrb	r1, [r7, #0]
 8005038:	2206      	movs	r2, #6
 800503a:	4827      	ldr	r0, [pc, #156]	; (80050d8 <_svfiprintf_r+0x1e4>)
 800503c:	1c7e      	adds	r6, r7, #1
 800503e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005042:	f7ff fb53 	bl	80046ec <memchr>
 8005046:	2800      	cmp	r0, #0
 8005048:	d038      	beq.n	80050bc <_svfiprintf_r+0x1c8>
 800504a:	4b24      	ldr	r3, [pc, #144]	; (80050dc <_svfiprintf_r+0x1e8>)
 800504c:	bb13      	cbnz	r3, 8005094 <_svfiprintf_r+0x1a0>
 800504e:	9b03      	ldr	r3, [sp, #12]
 8005050:	3307      	adds	r3, #7
 8005052:	f023 0307 	bic.w	r3, r3, #7
 8005056:	3308      	adds	r3, #8
 8005058:	9303      	str	r3, [sp, #12]
 800505a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800505c:	444b      	add	r3, r9
 800505e:	9309      	str	r3, [sp, #36]	; 0x24
 8005060:	e76d      	b.n	8004f3e <_svfiprintf_r+0x4a>
 8005062:	fb05 3202 	mla	r2, r5, r2, r3
 8005066:	2001      	movs	r0, #1
 8005068:	460f      	mov	r7, r1
 800506a:	e7a6      	b.n	8004fba <_svfiprintf_r+0xc6>
 800506c:	2300      	movs	r3, #0
 800506e:	250a      	movs	r5, #10
 8005070:	4619      	mov	r1, r3
 8005072:	3701      	adds	r7, #1
 8005074:	9305      	str	r3, [sp, #20]
 8005076:	4638      	mov	r0, r7
 8005078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800507c:	3a30      	subs	r2, #48	; 0x30
 800507e:	2a09      	cmp	r2, #9
 8005080:	d903      	bls.n	800508a <_svfiprintf_r+0x196>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0c8      	beq.n	8005018 <_svfiprintf_r+0x124>
 8005086:	9105      	str	r1, [sp, #20]
 8005088:	e7c6      	b.n	8005018 <_svfiprintf_r+0x124>
 800508a:	fb05 2101 	mla	r1, r5, r1, r2
 800508e:	2301      	movs	r3, #1
 8005090:	4607      	mov	r7, r0
 8005092:	e7f0      	b.n	8005076 <_svfiprintf_r+0x182>
 8005094:	ab03      	add	r3, sp, #12
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	4622      	mov	r2, r4
 800509a:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <_svfiprintf_r+0x1ec>)
 800509c:	a904      	add	r1, sp, #16
 800509e:	4640      	mov	r0, r8
 80050a0:	f7fe f8ec 	bl	800327c <_printf_float>
 80050a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050a8:	4681      	mov	r9, r0
 80050aa:	d1d6      	bne.n	800505a <_svfiprintf_r+0x166>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	065b      	lsls	r3, r3, #25
 80050b0:	f53f af35 	bmi.w	8004f1e <_svfiprintf_r+0x2a>
 80050b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050b6:	b01d      	add	sp, #116	; 0x74
 80050b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050bc:	ab03      	add	r3, sp, #12
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	4622      	mov	r2, r4
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <_svfiprintf_r+0x1ec>)
 80050c4:	a904      	add	r1, sp, #16
 80050c6:	4640      	mov	r0, r8
 80050c8:	f7fe fb84 	bl	80037d4 <_printf_i>
 80050cc:	e7ea      	b.n	80050a4 <_svfiprintf_r+0x1b0>
 80050ce:	bf00      	nop
 80050d0:	08005bec 	.word	0x08005bec
 80050d4:	08005bf2 	.word	0x08005bf2
 80050d8:	08005bf6 	.word	0x08005bf6
 80050dc:	0800327d 	.word	0x0800327d
 80050e0:	08004e41 	.word	0x08004e41

080050e4 <_sbrk_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	2300      	movs	r3, #0
 80050e8:	4c05      	ldr	r4, [pc, #20]	; (8005100 <_sbrk_r+0x1c>)
 80050ea:	4605      	mov	r5, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	f7fb ff54 	bl	8000f9c <_sbrk>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_sbrk_r+0x1a>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_sbrk_r+0x1a>
 80050fc:	602b      	str	r3, [r5, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	20000c30 	.word	0x20000c30

08005104 <__ascii_mbtowc>:
 8005104:	b082      	sub	sp, #8
 8005106:	b901      	cbnz	r1, 800510a <__ascii_mbtowc+0x6>
 8005108:	a901      	add	r1, sp, #4
 800510a:	b142      	cbz	r2, 800511e <__ascii_mbtowc+0x1a>
 800510c:	b14b      	cbz	r3, 8005122 <__ascii_mbtowc+0x1e>
 800510e:	7813      	ldrb	r3, [r2, #0]
 8005110:	600b      	str	r3, [r1, #0]
 8005112:	7812      	ldrb	r2, [r2, #0]
 8005114:	1c10      	adds	r0, r2, #0
 8005116:	bf18      	it	ne
 8005118:	2001      	movne	r0, #1
 800511a:	b002      	add	sp, #8
 800511c:	4770      	bx	lr
 800511e:	4610      	mov	r0, r2
 8005120:	e7fb      	b.n	800511a <__ascii_mbtowc+0x16>
 8005122:	f06f 0001 	mvn.w	r0, #1
 8005126:	e7f8      	b.n	800511a <__ascii_mbtowc+0x16>

08005128 <memmove>:
 8005128:	4288      	cmp	r0, r1
 800512a:	b510      	push	{r4, lr}
 800512c:	eb01 0302 	add.w	r3, r1, r2
 8005130:	d807      	bhi.n	8005142 <memmove+0x1a>
 8005132:	1e42      	subs	r2, r0, #1
 8005134:	4299      	cmp	r1, r3
 8005136:	d00a      	beq.n	800514e <memmove+0x26>
 8005138:	f811 4b01 	ldrb.w	r4, [r1], #1
 800513c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005140:	e7f8      	b.n	8005134 <memmove+0xc>
 8005142:	4283      	cmp	r3, r0
 8005144:	d9f5      	bls.n	8005132 <memmove+0xa>
 8005146:	1881      	adds	r1, r0, r2
 8005148:	1ad2      	subs	r2, r2, r3
 800514a:	42d3      	cmn	r3, r2
 800514c:	d100      	bne.n	8005150 <memmove+0x28>
 800514e:	bd10      	pop	{r4, pc}
 8005150:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005154:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005158:	e7f7      	b.n	800514a <memmove+0x22>

0800515a <__malloc_lock>:
 800515a:	4770      	bx	lr

0800515c <__malloc_unlock>:
 800515c:	4770      	bx	lr

0800515e <_realloc_r>:
 800515e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005160:	4607      	mov	r7, r0
 8005162:	4614      	mov	r4, r2
 8005164:	460e      	mov	r6, r1
 8005166:	b921      	cbnz	r1, 8005172 <_realloc_r+0x14>
 8005168:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800516c:	4611      	mov	r1, r2
 800516e:	f7ff be0d 	b.w	8004d8c <_malloc_r>
 8005172:	b922      	cbnz	r2, 800517e <_realloc_r+0x20>
 8005174:	f7ff fdbe 	bl	8004cf4 <_free_r>
 8005178:	4625      	mov	r5, r4
 800517a:	4628      	mov	r0, r5
 800517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800517e:	f000 f821 	bl	80051c4 <_malloc_usable_size_r>
 8005182:	42a0      	cmp	r0, r4
 8005184:	d20f      	bcs.n	80051a6 <_realloc_r+0x48>
 8005186:	4621      	mov	r1, r4
 8005188:	4638      	mov	r0, r7
 800518a:	f7ff fdff 	bl	8004d8c <_malloc_r>
 800518e:	4605      	mov	r5, r0
 8005190:	2800      	cmp	r0, #0
 8005192:	d0f2      	beq.n	800517a <_realloc_r+0x1c>
 8005194:	4631      	mov	r1, r6
 8005196:	4622      	mov	r2, r4
 8005198:	f7ff fab6 	bl	8004708 <memcpy>
 800519c:	4631      	mov	r1, r6
 800519e:	4638      	mov	r0, r7
 80051a0:	f7ff fda8 	bl	8004cf4 <_free_r>
 80051a4:	e7e9      	b.n	800517a <_realloc_r+0x1c>
 80051a6:	4635      	mov	r5, r6
 80051a8:	e7e7      	b.n	800517a <_realloc_r+0x1c>

080051aa <__ascii_wctomb>:
 80051aa:	b149      	cbz	r1, 80051c0 <__ascii_wctomb+0x16>
 80051ac:	2aff      	cmp	r2, #255	; 0xff
 80051ae:	bf8b      	itete	hi
 80051b0:	238a      	movhi	r3, #138	; 0x8a
 80051b2:	700a      	strbls	r2, [r1, #0]
 80051b4:	6003      	strhi	r3, [r0, #0]
 80051b6:	2001      	movls	r0, #1
 80051b8:	bf88      	it	hi
 80051ba:	f04f 30ff 	movhi.w	r0, #4294967295
 80051be:	4770      	bx	lr
 80051c0:	4608      	mov	r0, r1
 80051c2:	4770      	bx	lr

080051c4 <_malloc_usable_size_r>:
 80051c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c8:	1f18      	subs	r0, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfbc      	itt	lt
 80051ce:	580b      	ldrlt	r3, [r1, r0]
 80051d0:	18c0      	addlt	r0, r0, r3
 80051d2:	4770      	bx	lr

080051d4 <_init>:
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d6:	bf00      	nop
 80051d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051da:	bc08      	pop	{r3}
 80051dc:	469e      	mov	lr, r3
 80051de:	4770      	bx	lr

080051e0 <_fini>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	bf00      	nop
 80051e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e6:	bc08      	pop	{r3}
 80051e8:	469e      	mov	lr, r3
 80051ea:	4770      	bx	lr
