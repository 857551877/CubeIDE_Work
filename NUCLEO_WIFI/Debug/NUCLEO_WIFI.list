
NUCLEO_WIFI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000308c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003318  08003318  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003318  08003318  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003318  08003318  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08003390  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003390  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007812  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a98  00000000  00000000  000278ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000790  00000000  00000000  00029348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000698  00000000  00000000  00029ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000146db  00000000  00000000  0002a170  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076e0  00000000  00000000  0003e84b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b787  00000000  00000000  00045f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b16b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002360  00000000  00000000  000b1730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003180 	.word	0x08003180

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003180 	.word	0x08003180

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4815      	ldr	r0, [pc, #84]	; (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f000 ff75 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f000 fe0e 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001e4:	2320      	movs	r3, #32
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 fe00 	bl	8000e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	; 0x28
 8000206:	f000 fd4e 	bl	8000ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	; 0x28
 800020c:	f000 fd67 	bl	8000cde <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 fbdf 	bl	80009f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f841 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f7ff ff89 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800023a:	f000 fa27 	bl	800068c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800023e:	f000 f9fb 	bl	8000638 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000242:	f000 fa4d 	bl	80006e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 8000246:	2201      	movs	r2, #1
 8000248:	4914      	ldr	r1, [pc, #80]	; (800029c <main+0x74>)
 800024a:	4815      	ldr	r0, [pc, #84]	; (80002a0 <main+0x78>)
 800024c:	f001 fc6e 	bl	8001b2c <HAL_UART_Receive_IT>
  Server_Init();
 8000250:	f000 fb64 	bl	800091c <Server_Init>
  uint8_t TestString[20] = "hahaha";
 8000254:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <main+0x7c>)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800025c:	6018      	str	r0, [r3, #0]
 800025e:	3304      	adds	r3, #4
 8000260:	8019      	strh	r1, [r3, #0]
 8000262:	3302      	adds	r3, #2
 8000264:	0c0a      	lsrs	r2, r1, #16
 8000266:	701a      	strb	r2, [r3, #0]
 8000268:	f107 030b 	add.w	r3, r7, #11
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	731a      	strb	r2, [r3, #12]
  Server_SentTo_Client("abcdeagfadgfdagfdsgfdshgfdsgfdsg");
 8000276:	480c      	ldr	r0, [pc, #48]	; (80002a8 <main+0x80>)
 8000278:	f000 fb80 	bl	800097c <Server_SentTo_Client>

  HAL_Delay(500);
 800027c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000280:	f000 fc18 	bl	8000ab4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Rx_Line_Flag == 1) {
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <main+0x84>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d1fb      	bne.n	8000284 <main+0x5c>

		  //printf("OK,i got a line is \n");
		  printf("OK,i got a line is %s\n", Uart1_Rx_Buffer);
 800028c:	4908      	ldr	r1, [pc, #32]	; (80002b0 <main+0x88>)
 800028e:	4809      	ldr	r0, [pc, #36]	; (80002b4 <main+0x8c>)
 8000290:	f002 f824 	bl	80022dc <iprintf>
		  Rx_Line_Flag = 0;
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <main+0x84>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
	  if(Rx_Line_Flag == 1) {
 800029a:	e7f3      	b.n	8000284 <main+0x5c>
 800029c:	20000100 	.word	0x20000100
 80002a0:	20000144 	.word	0x20000144
 80002a4:	080031d4 	.word	0x080031d4
 80002a8:	08003198 	.word	0x08003198
 80002ac:	200000f1 	.word	0x200000f1
 80002b0:	2000008c 	.word	0x2000008c
 80002b4:	080031bc 	.word	0x080031bc

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	; 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 f800 	bl	80022cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	2310      	movs	r3, #16
 80002e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002ea:	2300      	movs	r3, #0
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 ff15 	bl	8001128 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000304:	f000 f85a 	bl	80003bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2102      	movs	r1, #2
 8000322:	4618      	mov	r0, r3
 8000324:	f001 f980 	bl	8001628 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800032e:	f000 f845 	bl	80003bc <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	; 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <HAL_UART_RxCpltCallback+0x6c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	429a      	cmp	r2, r3
 800034e:	d126      	bne.n	800039e <HAL_UART_RxCpltCallback+0x62>
		if(Rx_Line_Flag == 0) {
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <HAL_UART_RxCpltCallback+0x70>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d11d      	bne.n	8000394 <HAL_UART_RxCpltCallback+0x58>
			if(Uart1_Rx_Char == '\n') {
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_UART_RxCpltCallback+0x74>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b0a      	cmp	r3, #10
 800035e:	d10c      	bne.n	800037a <HAL_UART_RxCpltCallback+0x3e>
				Uart1_Rx_Buffer[Rx_Buffer_Size] = '\0';
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <HAL_UART_RxCpltCallback+0x78>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <HAL_UART_RxCpltCallback+0x7c>)
 8000368:	2100      	movs	r1, #0
 800036a:	5499      	strb	r1, [r3, r2]
				Rx_Buffer_Size = 0;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <HAL_UART_RxCpltCallback+0x78>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
				Rx_Line_Flag = 1;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <HAL_UART_RxCpltCallback+0x70>)
 8000374:	2201      	movs	r2, #1
 8000376:	701a      	strb	r2, [r3, #0]
 8000378:	e00c      	b.n	8000394 <HAL_UART_RxCpltCallback+0x58>
			}else {
				Uart1_Rx_Buffer[Rx_Buffer_Size] = Uart1_Rx_Char;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <HAL_UART_RxCpltCallback+0x78>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	461a      	mov	r2, r3
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <HAL_UART_RxCpltCallback+0x74>)
 8000382:	7819      	ldrb	r1, [r3, #0]
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <HAL_UART_RxCpltCallback+0x7c>)
 8000386:	5499      	strb	r1, [r3, r2]
				Rx_Buffer_Size++;
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <HAL_UART_RxCpltCallback+0x78>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	b2da      	uxtb	r2, r3
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <HAL_UART_RxCpltCallback+0x78>)
 8000392:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 8000394:	2201      	movs	r2, #1
 8000396:	4906      	ldr	r1, [pc, #24]	; (80003b0 <HAL_UART_RxCpltCallback+0x74>)
 8000398:	4803      	ldr	r0, [pc, #12]	; (80003a8 <HAL_UART_RxCpltCallback+0x6c>)
 800039a:	f001 fbc7 	bl	8001b2c <HAL_UART_Receive_IT>
	}
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000144 	.word	0x20000144
 80003ac:	200000f1 	.word	0x200000f1
 80003b0:	20000100 	.word	0x20000100
 80003b4:	200000f0 	.word	0x200000f0
 80003b8:	2000008c 	.word	0x2000008c

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_MspInit+0x5c>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <HAL_MspInit+0x5c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b12      	ldr	r3, [pc, #72]	; (8000424 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <HAL_MspInit+0x5c>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <HAL_MspInit+0x5c>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <HAL_MspInit+0x60>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_MspInit+0x60>)
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	40021000 	.word	0x40021000
 8000428:	40010000 	.word	0x40010000

0800042c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043c:	e7fe      	b.n	800043c <HardFault_Handler+0x4>

0800043e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000442:	e7fe      	b.n	8000442 <MemManage_Handler+0x4>

08000444 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <BusFault_Handler+0x4>

0800044a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <UsageFault_Handler+0x4>

08000450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000478:	f000 fb00 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}

08000480 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <USART1_IRQHandler+0x10>)
 8000486:	f001 fba5 	bl	8001bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000144 	.word	0x20000144

08000494 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000498:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800049c:	f000 fe22 	bl	80010e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	e00a      	b.n	80004cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004b6:	f3af 8000 	nop.w
 80004ba:	4601      	mov	r1, r0
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	60ba      	str	r2, [r7, #8]
 80004c2:	b2ca      	uxtb	r2, r1
 80004c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	3301      	adds	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	dbf0      	blt.n	80004b6 <_read+0x12>
	}

return len;
 80004d4:	687b      	ldr	r3, [r7, #4]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3718      	adds	r7, #24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b086      	sub	sp, #24
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	60f8      	str	r0, [r7, #12]
 80004e6:	60b9      	str	r1, [r7, #8]
 80004e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	e009      	b.n	8000504 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	60ba      	str	r2, [r7, #8]
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f9d7 	bl	80008ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf1      	blt.n	80004f0 <_write+0x12>
	}
	return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <_close>:

int _close(int file)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	return -1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800053c:	605a      	str	r2, [r3, #4]
	return 0;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <_isatty>:

int _isatty(int file)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
	return 1;
 8000552:	2301      	movs	r3, #1
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800055e:	b480      	push	{r7}
 8000560:	b085      	sub	sp, #20
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
	return 0;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
	...

08000578 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <_sbrk+0x50>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d102      	bne.n	800058e <_sbrk+0x16>
		heap_end = &end;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <_sbrk+0x50>)
 800058a:	4a10      	ldr	r2, [pc, #64]	; (80005cc <_sbrk+0x54>)
 800058c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <_sbrk+0x50>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <_sbrk+0x50>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	466a      	mov	r2, sp
 800059e:	4293      	cmp	r3, r2
 80005a0:	d907      	bls.n	80005b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80005a2:	f001 fe69 	bl	8002278 <__errno>
 80005a6:	4602      	mov	r2, r0
 80005a8:	230c      	movs	r3, #12
 80005aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	e006      	b.n	80005c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <_sbrk+0x50>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <_sbrk+0x50>)
 80005bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200000f4 	.word	0x200000f4
 80005cc:	200001d0 	.word	0x200001d0

080005d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <SystemInit+0x5c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a14      	ldr	r2, [pc, #80]	; (800062c <SystemInit+0x5c>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <SystemInit+0x5c>)
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	4911      	ldr	r1, [pc, #68]	; (800062c <SystemInit+0x5c>)
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <SystemInit+0x60>)
 80005e8:	4013      	ands	r3, r2
 80005ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <SystemInit+0x5c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <SystemInit+0x5c>)
 80005f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <SystemInit+0x5c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <SystemInit+0x5c>)
 8000602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000606:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SystemInit+0x5c>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SystemInit+0x5c>)
 800060e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000612:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <SystemInit+0x5c>)
 8000616:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800061a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <SystemInit+0x64>)
 800061e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000622:	609a      	str	r2, [r3, #8]
#endif 
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	f8ff0000 	.word	0xf8ff0000
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_USART1_UART_Init+0x50>)
 8000640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_USART1_UART_Init+0x4c>)
 8000670:	f001 f976 	bl	8001960 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800067a:	f7ff fe9f 	bl	80003bc <Error_Handler>
  }

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000144 	.word	0x20000144
 8000688:	40013800 	.word	0x40013800

0800068c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART2_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f001 f94c 	bl	8001960 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f7ff fe75 	bl	80003bc <Error_Handler>
  }

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000184 	.word	0x20000184
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_USART3_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART3_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000718:	f001 f922 	bl	8001960 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f7ff fe4b 	bl	80003bc <Error_Handler>
  }

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000104 	.word	0x20000104
 8000730:	40004800 	.word	0x40004800

08000734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a51      	ldr	r2, [pc, #324]	; (8000894 <HAL_UART_MspInit+0x160>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d13a      	bne.n	80007ca <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000754:	4b50      	ldr	r3, [pc, #320]	; (8000898 <HAL_UART_MspInit+0x164>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a4f      	ldr	r2, [pc, #316]	; (8000898 <HAL_UART_MspInit+0x164>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b4d      	ldr	r3, [pc, #308]	; (8000898 <HAL_UART_MspInit+0x164>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b4a      	ldr	r3, [pc, #296]	; (8000898 <HAL_UART_MspInit+0x164>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a49      	ldr	r2, [pc, #292]	; (8000898 <HAL_UART_MspInit+0x164>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b47      	ldr	r3, [pc, #284]	; (8000898 <HAL_UART_MspInit+0x164>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	4619      	mov	r1, r3
 8000798:	4840      	ldr	r0, [pc, #256]	; (800089c <HAL_UART_MspInit+0x168>)
 800079a:	f000 fb31 	bl	8000e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800079e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4619      	mov	r1, r3
 80007b2:	483a      	ldr	r0, [pc, #232]	; (800089c <HAL_UART_MspInit+0x168>)
 80007b4:	f000 fb24 	bl	8000e00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	2025      	movs	r0, #37	; 0x25
 80007be:	f000 fa72 	bl	8000ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007c2:	2025      	movs	r0, #37	; 0x25
 80007c4:	f000 fa8b 	bl	8000cde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80007c8:	e060      	b.n	800088c <HAL_UART_MspInit+0x158>
  else if(uartHandle->Instance==USART2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a34      	ldr	r2, [pc, #208]	; (80008a0 <HAL_UART_MspInit+0x16c>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d124      	bne.n	800081e <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d4:	4b30      	ldr	r3, [pc, #192]	; (8000898 <HAL_UART_MspInit+0x164>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	4a2f      	ldr	r2, [pc, #188]	; (8000898 <HAL_UART_MspInit+0x164>)
 80007da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007de:	61d3      	str	r3, [r2, #28]
 80007e0:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <HAL_UART_MspInit+0x164>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <HAL_UART_MspInit+0x164>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a29      	ldr	r2, [pc, #164]	; (8000898 <HAL_UART_MspInit+0x164>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <HAL_UART_MspInit+0x164>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000804:	230c      	movs	r3, #12
 8000806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2302      	movs	r3, #2
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4619      	mov	r1, r3
 8000816:	4821      	ldr	r0, [pc, #132]	; (800089c <HAL_UART_MspInit+0x168>)
 8000818:	f000 faf2 	bl	8000e00 <HAL_GPIO_Init>
}
 800081c:	e036      	b.n	800088c <HAL_UART_MspInit+0x158>
  else if(uartHandle->Instance==USART3)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <HAL_UART_MspInit+0x170>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d131      	bne.n	800088c <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <HAL_UART_MspInit+0x164>)
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <HAL_UART_MspInit+0x164>)
 800082e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000832:	61d3      	str	r3, [r2, #28]
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_UART_MspInit+0x164>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_UART_MspInit+0x164>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <HAL_UART_MspInit+0x164>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_UART_MspInit+0x164>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	4619      	mov	r1, r3
 800086c:	480e      	ldr	r0, [pc, #56]	; (80008a8 <HAL_UART_MspInit+0x174>)
 800086e:	f000 fac7 	bl	8000e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4619      	mov	r1, r3
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <HAL_UART_MspInit+0x174>)
 8000888:	f000 faba 	bl	8000e00 <HAL_GPIO_Init>
}
 800088c:	bf00      	nop
 800088e:	3730      	adds	r7, #48	; 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40013800 	.word	0x40013800
 8000898:	40021000 	.word	0x40021000
 800089c:	40010800 	.word	0x40010800
 80008a0:	40004400 	.word	0x40004400
 80008a4:	40004800 	.word	0x40004800
 80008a8:	40010c00 	.word	0x40010c00

080008ac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ba:	2201      	movs	r2, #1
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <__io_putchar+0x20>)
 80008be:	f001 f89c 	bl	80019fa <HAL_UART_Transmit>
  //HAL_UART_Transmit_IT(&huart1, (uint8_t *)&ch, 1);
  return ch;
 80008c2:	687b      	ldr	r3, [r7, #4]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000144 	.word	0x20000144

080008d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008d2:	e003      	b.n	80008dc <LoopCopyDataInit>

080008d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008da:	3104      	adds	r1, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008dc:	480a      	ldr	r0, [pc, #40]	; (8000908 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008e4:	d3f6      	bcc.n	80008d4 <CopyDataInit>
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008e8:	e002      	b.n	80008f0 <LoopFillZerobss>

080008ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008ec:	f842 3b04 	str.w	r3, [r2], #4

080008f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008f4:	d3f9      	bcc.n	80008ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008f6:	f7ff fe6b 	bl	80005d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f001 fcc3 	bl	8002284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff fc93 	bl	8000228 <main>
  bx lr
 8000902:	4770      	bx	lr
  ldr r3, =_sidata
 8000904:	08003320 	.word	0x08003320
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800090c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000910:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000914:	200001cc 	.word	0x200001cc

08000918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_2_IRQHandler>
	...

0800091c <Server_Init>:
#include "wifi.h"

void Server_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000920:	2032      	movs	r0, #50	; 0x32
 8000922:	f000 f8c7 	bl	8000ab4 <HAL_Delay>
	printf("AT+RST\r\n");
 8000926:	4810      	ldr	r0, [pc, #64]	; (8000968 <Server_Init+0x4c>)
 8000928:	f001 fd4c 	bl	80023c4 <puts>
	HAL_Delay(300);
 800092c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000930:	f000 f8c0 	bl	8000ab4 <HAL_Delay>
	printf("AT+CWMODE=2\r\n");
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <Server_Init+0x50>)
 8000936:	f001 fd45 	bl	80023c4 <puts>
	HAL_Delay(100);
 800093a:	2064      	movs	r0, #100	; 0x64
 800093c:	f000 f8ba 	bl	8000ab4 <HAL_Delay>
	printf("AT+CIPMUX=1\r\n");
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <Server_Init+0x54>)
 8000942:	f001 fd3f 	bl	80023c4 <puts>
	HAL_Delay(100);
 8000946:	2064      	movs	r0, #100	; 0x64
 8000948:	f000 f8b4 	bl	8000ab4 <HAL_Delay>
	printf("AT+CIPSERVER=1,8080\r\n");
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <Server_Init+0x58>)
 800094e:	f001 fd39 	bl	80023c4 <puts>
	HAL_Delay(100);
 8000952:	2064      	movs	r0, #100	; 0x64
 8000954:	f000 f8ae 	bl	8000ab4 <HAL_Delay>
	printf("AT+CIPSTO=0\r\n");
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <Server_Init+0x5c>)
 800095a:	f001 fd33 	bl	80023c4 <puts>
	HAL_Delay(100);
 800095e:	2064      	movs	r0, #100	; 0x64
 8000960:	f000 f8a8 	bl	8000ab4 <HAL_Delay>
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	080031e8 	.word	0x080031e8
 800096c:	080031f0 	.word	0x080031f0
 8000970:	08003200 	.word	0x08003200
 8000974:	08003210 	.word	0x08003210
 8000978:	08003228 	.word	0x08003228

0800097c <Server_SentTo_Client>:

void Server_SentTo_Client(uint8_t *Str) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000984:	2032      	movs	r0, #50	; 0x32
 8000986:	f000 f895 	bl	8000ab4 <HAL_Delay>
	printf("AT+CIPSEND=0,%d\r\n", Strlen(Str) + 2);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 f818 	bl	80009c0 <Strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	3302      	adds	r3, #2
 8000994:	4619      	mov	r1, r3
 8000996:	4808      	ldr	r0, [pc, #32]	; (80009b8 <Server_SentTo_Client+0x3c>)
 8000998:	f001 fca0 	bl	80022dc <iprintf>
	HAL_Delay(50);
 800099c:	2032      	movs	r0, #50	; 0x32
 800099e:	f000 f889 	bl	8000ab4 <HAL_Delay>
	printf("%s\r\n", Str);
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <Server_SentTo_Client+0x40>)
 80009a6:	f001 fc99 	bl	80022dc <iprintf>
	HAL_Delay(50);
 80009aa:	2032      	movs	r0, #50	; 0x32
 80009ac:	f000 f882 	bl	8000ab4 <HAL_Delay>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08003238 	.word	0x08003238
 80009bc:	0800324c 	.word	0x0800324c

080009c0 <Strlen>:

 uint8_t Strlen(uint8_t *s) {
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	 for(uint8_t i = 0; i < 256; i++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <Strlen+0x1c>
			 return i;
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	e003      	b.n	80009e4 <Strlen+0x24>
	 for(uint8_t i = 0; i < 256; i++) {
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	3301      	adds	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 80009e2:	e7f3      	b.n	80009cc <Strlen+0xc>
		 }
	 }
 }
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
	...

080009f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x28>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x28>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f945 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff fcdc 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f95d 	bl	8000cfa <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f925 	bl	8000ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <HAL_IncTick+0x20>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	200001c4 	.word	0x200001c4

08000aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <HAL_GetTick+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	200001c4 	.word	0x200001c4

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff fff0 	bl	8000aa0 <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_Delay+0x40>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffe0 	bl	8000aa0 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000008 	.word	0x20000008

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4906      	ldr	r1, [pc, #24]	; (8000b90 <__NVIC_EnableIRQ+0x34>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c5c:	d301      	bcc.n	8000c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00f      	b.n	8000c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <SysTick_Config+0x40>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f7ff ff90 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x40>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff2d 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb8:	f7ff ff42 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	6978      	ldr	r0, [r7, #20]
 8000cc4:	f7ff ff90 	bl	8000be8 <NVIC_EncodePriority>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff5f 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff35 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffa2 	bl	8000c4c <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d005      	beq.n	8000d36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e051      	b.n	8000dda <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 020e 	bic.w	r2, r2, #14
 8000d44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f022 0201 	bic.w	r2, r2, #1
 8000d54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <HAL_DMA_Abort_IT+0xd0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d029      	beq.n	8000db4 <HAL_DMA_Abort_IT+0xa0>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_DMA_Abort_IT+0xd4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d022      	beq.n	8000db0 <HAL_DMA_Abort_IT+0x9c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_DMA_Abort_IT+0xd8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d01a      	beq.n	8000daa <HAL_DMA_Abort_IT+0x96>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <HAL_DMA_Abort_IT+0xdc>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d012      	beq.n	8000da4 <HAL_DMA_Abort_IT+0x90>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <HAL_DMA_Abort_IT+0xe0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d00a      	beq.n	8000d9e <HAL_DMA_Abort_IT+0x8a>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <HAL_DMA_Abort_IT+0xe4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d102      	bne.n	8000d98 <HAL_DMA_Abort_IT+0x84>
 8000d92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d96:	e00e      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d9c:	e00b      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da2:	e008      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	e005      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dae:	e002      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000db0:	2310      	movs	r3, #16
 8000db2:	e000      	b.n	8000db6 <HAL_DMA_Abort_IT+0xa2>
 8000db4:	2301      	movs	r3, #1
 8000db6:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <HAL_DMA_Abort_IT+0xe8>)
 8000db8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	4798      	blx	r3
    } 
  }
  return status;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40020008 	.word	0x40020008
 8000de8:	4002001c 	.word	0x4002001c
 8000dec:	40020030 	.word	0x40020030
 8000df0:	40020044 	.word	0x40020044
 8000df4:	40020058 	.word	0x40020058
 8000df8:	4002006c 	.word	0x4002006c
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b08b      	sub	sp, #44	; 0x2c
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	e127      	b.n	8001064 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e14:	2201      	movs	r2, #1
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 8116 	bne.w	800105e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d034      	beq.n	8000ea4 <HAL_GPIO_Init+0xa4>
 8000e3a:	2b12      	cmp	r3, #18
 8000e3c:	d80d      	bhi.n	8000e5a <HAL_GPIO_Init+0x5a>
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d02b      	beq.n	8000e9a <HAL_GPIO_Init+0x9a>
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d804      	bhi.n	8000e50 <HAL_GPIO_Init+0x50>
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d031      	beq.n	8000eae <HAL_GPIO_Init+0xae>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d01c      	beq.n	8000e88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e4e:	e048      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d043      	beq.n	8000edc <HAL_GPIO_Init+0xdc>
 8000e54:	2b11      	cmp	r3, #17
 8000e56:	d01b      	beq.n	8000e90 <HAL_GPIO_Init+0x90>
          break;
 8000e58:	e043      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e5a:	4a89      	ldr	r2, [pc, #548]	; (8001080 <HAL_GPIO_Init+0x280>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d026      	beq.n	8000eae <HAL_GPIO_Init+0xae>
 8000e60:	4a87      	ldr	r2, [pc, #540]	; (8001080 <HAL_GPIO_Init+0x280>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d806      	bhi.n	8000e74 <HAL_GPIO_Init+0x74>
 8000e66:	4a87      	ldr	r2, [pc, #540]	; (8001084 <HAL_GPIO_Init+0x284>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d020      	beq.n	8000eae <HAL_GPIO_Init+0xae>
 8000e6c:	4a86      	ldr	r2, [pc, #536]	; (8001088 <HAL_GPIO_Init+0x288>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d01d      	beq.n	8000eae <HAL_GPIO_Init+0xae>
          break;
 8000e72:	e036      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e74:	4a85      	ldr	r2, [pc, #532]	; (800108c <HAL_GPIO_Init+0x28c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0xae>
 8000e7a:	4a85      	ldr	r2, [pc, #532]	; (8001090 <HAL_GPIO_Init+0x290>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d016      	beq.n	8000eae <HAL_GPIO_Init+0xae>
 8000e80:	4a84      	ldr	r2, [pc, #528]	; (8001094 <HAL_GPIO_Init+0x294>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0xae>
          break;
 8000e86:	e02c      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	623b      	str	r3, [r7, #32]
          break;
 8000e8e:	e028      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	3304      	adds	r3, #4
 8000e96:	623b      	str	r3, [r7, #32]
          break;
 8000e98:	e023      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	3308      	adds	r3, #8
 8000ea0:	623b      	str	r3, [r7, #32]
          break;
 8000ea2:	e01e      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	330c      	adds	r3, #12
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	e019      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d102      	bne.n	8000ebc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	623b      	str	r3, [r7, #32]
          break;
 8000eba:	e012      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d105      	bne.n	8000ed0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	611a      	str	r2, [r3, #16]
          break;
 8000ece:	e008      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	615a      	str	r2, [r3, #20]
          break;
 8000eda:	e002      	b.n	8000ee2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000edc:	2300      	movs	r3, #0
 8000ede:	623b      	str	r3, [r7, #32]
          break;
 8000ee0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	2bff      	cmp	r3, #255	; 0xff
 8000ee6:	d801      	bhi.n	8000eec <HAL_GPIO_Init+0xec>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	e001      	b.n	8000ef0 <HAL_GPIO_Init+0xf0>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3304      	adds	r3, #4
 8000ef0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2bff      	cmp	r3, #255	; 0xff
 8000ef6:	d802      	bhi.n	8000efe <HAL_GPIO_Init+0xfe>
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x104>
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	3b08      	subs	r3, #8
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	401a      	ands	r2, r3
 8000f16:	6a39      	ldr	r1, [r7, #32]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 8096 	beq.w	800105e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f32:	4b59      	ldr	r3, [pc, #356]	; (8001098 <HAL_GPIO_Init+0x298>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a58      	ldr	r2, [pc, #352]	; (8001098 <HAL_GPIO_Init+0x298>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b56      	ldr	r3, [pc, #344]	; (8001098 <HAL_GPIO_Init+0x298>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f4a:	4a54      	ldr	r2, [pc, #336]	; (800109c <HAL_GPIO_Init+0x29c>)
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3302      	adds	r3, #2
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x2a0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0x19e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x2a4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d00d      	beq.n	8000f9a <HAL_GPIO_Init+0x19a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <HAL_GPIO_Init+0x2a8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d007      	beq.n	8000f96 <HAL_GPIO_Init+0x196>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a48      	ldr	r2, [pc, #288]	; (80010ac <HAL_GPIO_Init+0x2ac>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d101      	bne.n	8000f92 <HAL_GPIO_Init+0x192>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x1a0>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x1a0>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x1a0>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x1a0>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fb0:	493a      	ldr	r1, [pc, #232]	; (800109c <HAL_GPIO_Init+0x29c>)
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4938      	ldr	r1, [pc, #224]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	600b      	str	r3, [r1, #0]
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd8:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4933      	ldr	r1, [pc, #204]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	492e      	ldr	r1, [pc, #184]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	604b      	str	r3, [r1, #4]
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	43db      	mvns	r3, r3
 8001008:	4929      	ldr	r1, [pc, #164]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 800100a:	4013      	ands	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d006      	beq.n	8001028 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	4924      	ldr	r1, [pc, #144]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	608b      	str	r3, [r1, #8]
 8001026:	e006      	b.n	8001036 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	43db      	mvns	r3, r3
 8001030:	491f      	ldr	r1, [pc, #124]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001032:	4013      	ands	r3, r2
 8001034:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	491a      	ldr	r1, [pc, #104]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	60cb      	str	r3, [r1, #12]
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8001052:	68da      	ldr	r2, [r3, #12]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	43db      	mvns	r3, r3
 8001058:	4915      	ldr	r1, [pc, #84]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 800105a:	4013      	ands	r3, r2
 800105c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	3301      	adds	r3, #1
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	fa22 f303 	lsr.w	r3, r2, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	f47f aed0 	bne.w	8000e14 <HAL_GPIO_Init+0x14>
  }
}
 8001074:	bf00      	nop
 8001076:	372c      	adds	r7, #44	; 0x2c
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	10210000 	.word	0x10210000
 8001084:	10110000 	.word	0x10110000
 8001088:	10120000 	.word	0x10120000
 800108c:	10310000 	.word	0x10310000
 8001090:	10320000 	.word	0x10320000
 8001094:	10220000 	.word	0x10220000
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	40011000 	.word	0x40011000
 80010ac:	40011400 	.word	0x40011400
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	611a      	str	r2, [r3, #16]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f806 	bl	8001114 <HAL_GPIO_EXTI_Callback>
  }
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e26c      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8087 	beq.w	8001256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001148:	4b92      	ldr	r3, [pc, #584]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b04      	cmp	r3, #4
 8001152:	d00c      	beq.n	800116e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001154:	4b8f      	ldr	r3, [pc, #572]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d112      	bne.n	8001186 <HAL_RCC_OscConfig+0x5e>
 8001160:	4b8c      	ldr	r3, [pc, #560]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d10b      	bne.n	8001186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116e:	4b89      	ldr	r3, [pc, #548]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06c      	beq.n	8001254 <HAL_RCC_OscConfig+0x12c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d168      	bne.n	8001254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e246      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x76>
 8001190:	4b80      	ldr	r3, [pc, #512]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a7f      	ldr	r2, [pc, #508]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e02e      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x98>
 80011a6:	4b7b      	ldr	r3, [pc, #492]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a7a      	ldr	r2, [pc, #488]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b78      	ldr	r3, [pc, #480]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a77      	ldr	r2, [pc, #476]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e01d      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0xbc>
 80011ca:	4b72      	ldr	r3, [pc, #456]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a71      	ldr	r2, [pc, #452]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6e      	ldr	r2, [pc, #440]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 80011e4:	4b6b      	ldr	r3, [pc, #428]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a6a      	ldr	r2, [pc, #424]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b68      	ldr	r3, [pc, #416]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a67      	ldr	r2, [pc, #412]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fc4c 	bl	8000aa0 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fc48 	bl	8000aa0 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1fa      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0xe4>
 800122a:	e014      	b.n	8001256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fc38 	bl	8000aa0 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fc34 	bl	8000aa0 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e1e6      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	4b53      	ldr	r3, [pc, #332]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x10c>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d063      	beq.n	800132a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001262:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b08      	cmp	r3, #8
 8001278:	d11c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x18c>
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d116      	bne.n	80012b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x176>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e1ba      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4939      	ldr	r1, [pc, #228]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	e03a      	b.n	800132a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fbed 	bl	8000aa0 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fbe9 	bl	8000aa0 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e19b      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4927      	ldr	r1, [pc, #156]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
 80012fc:	e015      	b.n	800132a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fbcc 	bl	8000aa0 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130c:	f7ff fbc8 	bl	8000aa0 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e17a      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d03a      	beq.n	80013ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d019      	beq.n	8001372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_RCC_OscConfig+0x274>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fbac 	bl	8000aa0 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fba8 	bl	8000aa0 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e15a      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 fada 	bl	8001924 <RCC_Delay>
 8001370:	e01c      	b.n	80013ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_RCC_OscConfig+0x274>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7ff fb92 	bl	8000aa0 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137e:	e00f      	b.n	80013a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fb8e 	bl	8000aa0 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d908      	bls.n	80013a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e140      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	42420000 	.word	0x42420000
 800139c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	4b9e      	ldr	r3, [pc, #632]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e9      	bne.n	8001380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80a6 	beq.w	8001506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b97      	ldr	r3, [pc, #604]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10d      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b94      	ldr	r3, [pc, #592]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a93      	ldr	r2, [pc, #588]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b91      	ldr	r3, [pc, #580]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b8e      	ldr	r3, [pc, #568]	; (8001620 <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d118      	bne.n	8001424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f2:	4b8b      	ldr	r3, [pc, #556]	; (8001620 <HAL_RCC_OscConfig+0x4f8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a8a      	ldr	r2, [pc, #552]	; (8001620 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fb4f 	bl	8000aa0 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff fb4b 	bl	8000aa0 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b64      	cmp	r3, #100	; 0x64
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e0fd      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b81      	ldr	r3, [pc, #516]	; (8001620 <HAL_RCC_OscConfig+0x4f8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x312>
 800142c:	4b7b      	ldr	r3, [pc, #492]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4a7a      	ldr	r2, [pc, #488]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6213      	str	r3, [r2, #32]
 8001438:	e02d      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x334>
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a75      	ldr	r2, [pc, #468]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	4b73      	ldr	r3, [pc, #460]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a72      	ldr	r2, [pc, #456]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	6213      	str	r3, [r2, #32]
 800145a:	e01c      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d10c      	bne.n	800147e <HAL_RCC_OscConfig+0x356>
 8001464:	4b6d      	ldr	r3, [pc, #436]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a6c      	ldr	r2, [pc, #432]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	4b6a      	ldr	r3, [pc, #424]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a69      	ldr	r2, [pc, #420]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6213      	str	r3, [r2, #32]
 800147c:	e00b      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a66      	ldr	r2, [pc, #408]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a63      	ldr	r2, [pc, #396]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d015      	beq.n	80014ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff faff 	bl	8000aa0 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fafb 	bl	8000aa0 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0ab      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014bc:	4b57      	ldr	r3, [pc, #348]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ee      	beq.n	80014a6 <HAL_RCC_OscConfig+0x37e>
 80014c8:	e014      	b.n	80014f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fae9 	bl	8000aa0 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fae5 	bl	8000aa0 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e095      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e8:	4b4c      	ldr	r3, [pc, #304]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1ee      	bne.n	80014d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d105      	bne.n	8001506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fa:	4b48      	ldr	r3, [pc, #288]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8081 	beq.w	8001612 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001510:	4b42      	ldr	r3, [pc, #264]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d061      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d146      	bne.n	80015b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <HAL_RCC_OscConfig+0x4fc>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fab9 	bl	8000aa0 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff fab5 	bl	8000aa0 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e067      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001544:	4b35      	ldr	r3, [pc, #212]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d108      	bne.n	800156c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	492d      	ldr	r1, [pc, #180]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a19      	ldr	r1, [r3, #32]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	430b      	orrs	r3, r1
 800157e:	4927      	ldr	r1, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x4fc>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fa89 	bl	8000aa0 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fa85 	bl	8000aa0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e037      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x46a>
 80015b0:	e02f      	b.n	8001612 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_RCC_OscConfig+0x4fc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fa72 	bl	8000aa0 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fa6e 	bl	8000aa0 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e020      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x498>
 80015de:	e018      	b.n	8001612 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e013      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_RCC_OscConfig+0x4f4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000
 8001620:	40007000 	.word	0x40007000
 8001624:	42420060 	.word	0x42420060

08001628 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0d0      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d910      	bls.n	800166c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 0207 	bic.w	r2, r3, #7
 8001652:	4965      	ldr	r1, [pc, #404]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0b8      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a58      	ldr	r2, [pc, #352]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800168e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	494d      	ldr	r1, [pc, #308]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d040      	beq.n	8001748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d115      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e07f      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e073      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06b      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f023 0203 	bic.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4936      	ldr	r1, [pc, #216]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001718:	f7ff f9c2 	bl	8000aa0 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	e00a      	b.n	8001736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f9be 	bl	8000aa0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e053      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 020c 	and.w	r2, r3, #12
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	429a      	cmp	r2, r3
 8001746:	d1eb      	bne.n	8001720 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d210      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 0207 	bic.w	r2, r3, #7
 800175e:	4922      	ldr	r1, [pc, #136]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4916      	ldr	r1, [pc, #88]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	490e      	ldr	r1, [pc, #56]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017b6:	f000 f821 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 80017ba:	4601      	mov	r1, r0
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	fa21 f303 	lsr.w	r3, r1, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_RCC_ClockConfig+0x1cc>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1d0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f920 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40022000 	.word	0x40022000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	08003268 	.word	0x08003268
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	b490      	push	{r4, r7}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001804:	1d3c      	adds	r4, r7, #4
 8001806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001808:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001826:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b04      	cmp	r3, #4
 8001834:	d002      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x40>
 8001836:	2b08      	cmp	r3, #8
 8001838:	d003      	beq.n	8001842 <HAL_RCC_GetSysClockFreq+0x46>
 800183a:	e02d      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800183e:	623b      	str	r3, [r7, #32]
      break;
 8001840:	e02d      	b.n	800189e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	0c9b      	lsrs	r3, r3, #18
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800184e:	4413      	add	r3, r2
 8001850:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001854:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	0c5b      	lsrs	r3, r3, #17
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800186e:	4413      	add	r3, r2
 8001870:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001874:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800187a:	fb02 f203 	mul.w	r2, r2, r3
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
 8001886:	e004      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	623b      	str	r3, [r7, #32]
      break;
 8001896:	e002      	b.n	800189e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800189a:	623b      	str	r3, [r7, #32]
      break;
 800189c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189e:	6a3b      	ldr	r3, [r7, #32]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc90      	pop	{r4, r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	08003254 	.word	0x08003254
 80018b0:	08003264 	.word	0x08003264
 80018b4:	40021000 	.word	0x40021000
 80018b8:	007a1200 	.word	0x007a1200
 80018bc:	003d0900 	.word	0x003d0900

080018c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000000 	.word	0x20000000

080018d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018d8:	f7ff fff2 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 80018dc:	4601      	mov	r1, r0
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	08003278 	.word	0x08003278

080018fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001900:	f7ff ffde 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 8001904:	4601      	mov	r1, r0
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	0adb      	lsrs	r3, r3, #11
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	4a03      	ldr	r2, [pc, #12]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001912:	5cd3      	ldrb	r3, [r2, r3]
 8001914:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000
 8001920:	08003278 	.word	0x08003278

08001924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <RCC_Delay+0x34>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <RCC_Delay+0x38>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0a5b      	lsrs	r3, r3, #9
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001940:	bf00      	nop
  }
  while (Delay --);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	60fa      	str	r2, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f9      	bne.n	8001940 <RCC_Delay+0x1c>
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000000 	.word	0x20000000
 800195c:	10624dd3 	.word	0x10624dd3

08001960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e03f      	b.n	80019f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7fe fed4 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2224      	movs	r2, #36	; 0x24
 8001990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fb8d 	bl	80020c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b088      	sub	sp, #32
 80019fe:	af02      	add	r7, sp, #8
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	f040 8083 	bne.w	8001b22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_UART_Transmit+0x2e>
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e07b      	b.n	8001b24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_UART_Transmit+0x40>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e074      	b.n	8001b24 <HAL_UART_Transmit+0x12a>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2221      	movs	r2, #33	; 0x21
 8001a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a50:	f7ff f826 	bl	8000aa0 <HAL_GetTick>
 8001a54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	88fa      	ldrh	r2, [r7, #6]
 8001a5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	88fa      	ldrh	r2, [r7, #6]
 8001a60:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a62:	e042      	b.n	8001aea <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7a:	d122      	bne.n	8001ac2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2200      	movs	r2, #0
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 f9b2 	bl	8001df0 <UART_WaitOnFlagUntilTimeout>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e046      	b.n	8001b24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aa8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d103      	bne.n	8001aba <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	e017      	b.n	8001aea <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3301      	adds	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	e013      	b.n	8001aea <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f98f 	bl	8001df0 <UART_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e023      	b.n	8001b24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	60ba      	str	r2, [r7, #8]
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1b7      	bne.n	8001a64 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2200      	movs	r2, #0
 8001afc:	2140      	movs	r1, #64	; 0x40
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f976 	bl	8001df0 <UART_WaitOnFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e00a      	b.n	8001b24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001b22:	2302      	movs	r3, #2
  }
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	d140      	bne.n	8001bc8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_UART_Receive_IT+0x26>
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e039      	b.n	8001bca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_UART_Receive_IT+0x38>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e032      	b.n	8001bca <HAL_UART_Receive_IT+0x9e>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	88fa      	ldrh	r2, [r7, #6]
 8001b7c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2222      	movs	r2, #34	; 0x22
 8001b88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ba2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0220 	orr.w	r2, r2, #32
 8001bc2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e000      	b.n	8001bca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10d      	bne.n	8001c26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <HAL_UART_IRQHandler+0x52>
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f9ce 	bl	8001fc0 <UART_Receive_IT>
      return;
 8001c24:	e0cc      	b.n	8001dc0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80ab 	beq.w	8001d84 <HAL_UART_IRQHandler+0x1b0>
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_UART_IRQHandler+0x70>
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80a0 	beq.w	8001d84 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00a      	beq.n	8001c64 <HAL_UART_IRQHandler+0x90>
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	f043 0201 	orr.w	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_UART_IRQHandler+0xb0>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	f043 0202 	orr.w	r2, r3, #2
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_UART_IRQHandler+0xd0>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	f043 0204 	orr.w	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xf0>
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbc:	f043 0208 	orr.w	r2, r3, #8
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d078      	beq.n	8001dbe <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x112>
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f96d 	bl	8001fc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bf14      	ite	ne
 8001cf4:	2301      	movne	r3, #1
 8001cf6:	2300      	moveq	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <HAL_UART_IRQHandler+0x13a>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d031      	beq.n	8001d72 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8b8 	bl	8001e84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d023      	beq.n	8001d6a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d013      	beq.n	8001d62 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3e:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <HAL_UART_IRQHandler+0x1f4>)
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe ffe4 	bl	8000d14 <HAL_DMA_Abort_IT>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d016      	beq.n	8001d80 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d60:	e00e      	b.n	8001d80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f83b 	bl	8001dde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d68:	e00a      	b.n	8001d80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f837 	bl	8001dde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d70:	e006      	b.n	8001d80 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f833 	bl	8001dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001d7e:	e01e      	b.n	8001dbe <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d80:	bf00      	nop
    return;
 8001d82:	e01c      	b.n	8001dbe <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d008      	beq.n	8001da0 <HAL_UART_IRQHandler+0x1cc>
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f8a4 	bl	8001ee6 <UART_Transmit_IT>
    return;
 8001d9e:	e00f      	b.n	8001dc0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_UART_IRQHandler+0x1ec>
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f8eb 	bl	8001f90 <UART_EndTransmit_IT>
    return;
 8001dba:	bf00      	nop
 8001dbc:	e000      	b.n	8001dc0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001dbe:	bf00      	nop
  }
}
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	08001ebf 	.word	0x08001ebf

08001dcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e00:	e02c      	b.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d028      	beq.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e10:	f7fe fe46 	bl	8000aa0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d21d      	bcs.n	8001e5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e00f      	b.n	8001e7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4013      	ands	r3, r2
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d0c3      	beq.n	8001e02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f7ff ff80 	bl	8001dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b21      	cmp	r3, #33	; 0x21
 8001ef8:	d144      	bne.n	8001f84 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f02:	d11a      	bne.n	8001f3a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f18:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	1c9a      	adds	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	621a      	str	r2, [r3, #32]
 8001f2c:	e00e      	b.n	8001f4c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	621a      	str	r2, [r3, #32]
 8001f38:	e008      	b.n	8001f4c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	1c59      	adds	r1, r3, #1
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6211      	str	r1, [r2, #32]
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10f      	bne.n	8001f80 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	e000      	b.n	8001f86 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001f84:	2302      	movs	r3, #2
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff0b 	bl	8001dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b22      	cmp	r3, #34	; 0x22
 8001fd2:	d171      	bne.n	80020b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fdc:	d123      	bne.n	8002026 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10e      	bne.n	800200a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	1c9a      	adds	r2, r3, #2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
 8002008:	e029      	b.n	800205e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
 8002024:	e01b      	b.n	800205e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10a      	bne.n	8002044 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6858      	ldr	r0, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	1c59      	adds	r1, r3, #1
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6291      	str	r1, [r2, #40]	; 0x28
 800203e:	b2c2      	uxtb	r2, r0
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e00c      	b.n	800205e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	1c58      	adds	r0, r3, #1
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	6288      	str	r0, [r1, #40]	; 0x28
 8002056:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29b      	uxth	r3, r3
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4619      	mov	r1, r3
 800206c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800206e:	2b00      	cmp	r3, #0
 8002070:	d120      	bne.n	80020b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0220 	bic.w	r2, r2, #32
 8002080:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002090:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe f946 	bl	800033c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e002      	b.n	80020ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	e000      	b.n	80020ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80020b8:	2302      	movs	r3, #2
  }
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020fe:	f023 030c 	bic.w	r3, r3, #12
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	68f9      	ldr	r1, [r7, #12]
 8002108:	430b      	orrs	r3, r1
 800210a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a52      	ldr	r2, [pc, #328]	; (8002270 <UART_SetConfig+0x1ac>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d14e      	bne.n	80021ca <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800212c:	f7ff fbe6 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
 8002130:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	009a      	lsls	r2, r3, #2
 800213c:	441a      	add	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	4a4a      	ldr	r2, [pc, #296]	; (8002274 <UART_SetConfig+0x1b0>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	0119      	lsls	r1, r3, #4
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	009a      	lsls	r2, r3, #2
 800215c:	441a      	add	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fbb2 f2f3 	udiv	r2, r2, r3
 8002168:	4b42      	ldr	r3, [pc, #264]	; (8002274 <UART_SetConfig+0x1b0>)
 800216a:	fba3 0302 	umull	r0, r3, r3, r2
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2064      	movs	r0, #100	; 0x64
 8002172:	fb00 f303 	mul.w	r3, r0, r3
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	3332      	adds	r3, #50	; 0x32
 800217c:	4a3d      	ldr	r2, [pc, #244]	; (8002274 <UART_SetConfig+0x1b0>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002188:	4419      	add	r1, r3
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	009a      	lsls	r2, r3, #2
 8002194:	441a      	add	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a0:	4b34      	ldr	r3, [pc, #208]	; (8002274 <UART_SetConfig+0x1b0>)
 80021a2:	fba3 0302 	umull	r0, r3, r3, r2
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2064      	movs	r0, #100	; 0x64
 80021aa:	fb00 f303 	mul.w	r3, r0, r3
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	3332      	adds	r3, #50	; 0x32
 80021b4:	4a2f      	ldr	r2, [pc, #188]	; (8002274 <UART_SetConfig+0x1b0>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	f003 020f 	and.w	r2, r3, #15
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	440a      	add	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80021c8:	e04d      	b.n	8002266 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80021ca:	f7ff fb83 	bl	80018d4 <HAL_RCC_GetPCLK1Freq>
 80021ce:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	009a      	lsls	r2, r3, #2
 80021da:	441a      	add	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	4a23      	ldr	r2, [pc, #140]	; (8002274 <UART_SetConfig+0x1b0>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	0119      	lsls	r1, r3, #4
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	009a      	lsls	r2, r3, #2
 80021fa:	441a      	add	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	fbb2 f2f3 	udiv	r2, r2, r3
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <UART_SetConfig+0x1b0>)
 8002208:	fba3 0302 	umull	r0, r3, r3, r2
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	2064      	movs	r0, #100	; 0x64
 8002210:	fb00 f303 	mul.w	r3, r0, r3
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	3332      	adds	r3, #50	; 0x32
 800221a:	4a16      	ldr	r2, [pc, #88]	; (8002274 <UART_SetConfig+0x1b0>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002226:	4419      	add	r1, r3
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	009a      	lsls	r2, r3, #2
 8002232:	441a      	add	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	fbb2 f2f3 	udiv	r2, r2, r3
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <UART_SetConfig+0x1b0>)
 8002240:	fba3 0302 	umull	r0, r3, r3, r2
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	2064      	movs	r0, #100	; 0x64
 8002248:	fb00 f303 	mul.w	r3, r0, r3
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	3332      	adds	r3, #50	; 0x32
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <UART_SetConfig+0x1b0>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	f003 020f 	and.w	r2, r3, #15
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	440a      	add	r2, r1
 8002264:	609a      	str	r2, [r3, #8]
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40013800 	.word	0x40013800
 8002274:	51eb851f 	.word	0x51eb851f

08002278 <__errno>:
 8002278:	4b01      	ldr	r3, [pc, #4]	; (8002280 <__errno+0x8>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	2000000c 	.word	0x2000000c

08002284 <__libc_init_array>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	2500      	movs	r5, #0
 8002288:	4e0c      	ldr	r6, [pc, #48]	; (80022bc <__libc_init_array+0x38>)
 800228a:	4c0d      	ldr	r4, [pc, #52]	; (80022c0 <__libc_init_array+0x3c>)
 800228c:	1ba4      	subs	r4, r4, r6
 800228e:	10a4      	asrs	r4, r4, #2
 8002290:	42a5      	cmp	r5, r4
 8002292:	d109      	bne.n	80022a8 <__libc_init_array+0x24>
 8002294:	f000 ff74 	bl	8003180 <_init>
 8002298:	2500      	movs	r5, #0
 800229a:	4e0a      	ldr	r6, [pc, #40]	; (80022c4 <__libc_init_array+0x40>)
 800229c:	4c0a      	ldr	r4, [pc, #40]	; (80022c8 <__libc_init_array+0x44>)
 800229e:	1ba4      	subs	r4, r4, r6
 80022a0:	10a4      	asrs	r4, r4, #2
 80022a2:	42a5      	cmp	r5, r4
 80022a4:	d105      	bne.n	80022b2 <__libc_init_array+0x2e>
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022ac:	4798      	blx	r3
 80022ae:	3501      	adds	r5, #1
 80022b0:	e7ee      	b.n	8002290 <__libc_init_array+0xc>
 80022b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022b6:	4798      	blx	r3
 80022b8:	3501      	adds	r5, #1
 80022ba:	e7f2      	b.n	80022a2 <__libc_init_array+0x1e>
 80022bc:	08003318 	.word	0x08003318
 80022c0:	08003318 	.word	0x08003318
 80022c4:	08003318 	.word	0x08003318
 80022c8:	0800331c 	.word	0x0800331c

080022cc <memset>:
 80022cc:	4603      	mov	r3, r0
 80022ce:	4402      	add	r2, r0
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d100      	bne.n	80022d6 <memset+0xa>
 80022d4:	4770      	bx	lr
 80022d6:	f803 1b01 	strb.w	r1, [r3], #1
 80022da:	e7f9      	b.n	80022d0 <memset+0x4>

080022dc <iprintf>:
 80022dc:	b40f      	push	{r0, r1, r2, r3}
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <iprintf+0x2c>)
 80022e0:	b513      	push	{r0, r1, r4, lr}
 80022e2:	681c      	ldr	r4, [r3, #0]
 80022e4:	b124      	cbz	r4, 80022f0 <iprintf+0x14>
 80022e6:	69a3      	ldr	r3, [r4, #24]
 80022e8:	b913      	cbnz	r3, 80022f0 <iprintf+0x14>
 80022ea:	4620      	mov	r0, r4
 80022ec:	f000 fa22 	bl	8002734 <__sinit>
 80022f0:	ab05      	add	r3, sp, #20
 80022f2:	9a04      	ldr	r2, [sp, #16]
 80022f4:	68a1      	ldr	r1, [r4, #8]
 80022f6:	4620      	mov	r0, r4
 80022f8:	9301      	str	r3, [sp, #4]
 80022fa:	f000 fbd7 	bl	8002aac <_vfiprintf_r>
 80022fe:	b002      	add	sp, #8
 8002300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002304:	b004      	add	sp, #16
 8002306:	4770      	bx	lr
 8002308:	2000000c 	.word	0x2000000c

0800230c <_puts_r>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	460e      	mov	r6, r1
 8002310:	4605      	mov	r5, r0
 8002312:	b118      	cbz	r0, 800231c <_puts_r+0x10>
 8002314:	6983      	ldr	r3, [r0, #24]
 8002316:	b90b      	cbnz	r3, 800231c <_puts_r+0x10>
 8002318:	f000 fa0c 	bl	8002734 <__sinit>
 800231c:	69ab      	ldr	r3, [r5, #24]
 800231e:	68ac      	ldr	r4, [r5, #8]
 8002320:	b913      	cbnz	r3, 8002328 <_puts_r+0x1c>
 8002322:	4628      	mov	r0, r5
 8002324:	f000 fa06 	bl	8002734 <__sinit>
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <_puts_r+0xac>)
 800232a:	429c      	cmp	r4, r3
 800232c:	d117      	bne.n	800235e <_puts_r+0x52>
 800232e:	686c      	ldr	r4, [r5, #4]
 8002330:	89a3      	ldrh	r3, [r4, #12]
 8002332:	071b      	lsls	r3, r3, #28
 8002334:	d51d      	bpl.n	8002372 <_puts_r+0x66>
 8002336:	6923      	ldr	r3, [r4, #16]
 8002338:	b1db      	cbz	r3, 8002372 <_puts_r+0x66>
 800233a:	3e01      	subs	r6, #1
 800233c:	68a3      	ldr	r3, [r4, #8]
 800233e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002342:	3b01      	subs	r3, #1
 8002344:	60a3      	str	r3, [r4, #8]
 8002346:	b9e9      	cbnz	r1, 8002384 <_puts_r+0x78>
 8002348:	2b00      	cmp	r3, #0
 800234a:	da2e      	bge.n	80023aa <_puts_r+0x9e>
 800234c:	4622      	mov	r2, r4
 800234e:	210a      	movs	r1, #10
 8002350:	4628      	mov	r0, r5
 8002352:	f000 f83f 	bl	80023d4 <__swbuf_r>
 8002356:	3001      	adds	r0, #1
 8002358:	d011      	beq.n	800237e <_puts_r+0x72>
 800235a:	200a      	movs	r0, #10
 800235c:	e011      	b.n	8002382 <_puts_r+0x76>
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <_puts_r+0xb0>)
 8002360:	429c      	cmp	r4, r3
 8002362:	d101      	bne.n	8002368 <_puts_r+0x5c>
 8002364:	68ac      	ldr	r4, [r5, #8]
 8002366:	e7e3      	b.n	8002330 <_puts_r+0x24>
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <_puts_r+0xb4>)
 800236a:	429c      	cmp	r4, r3
 800236c:	bf08      	it	eq
 800236e:	68ec      	ldreq	r4, [r5, #12]
 8002370:	e7de      	b.n	8002330 <_puts_r+0x24>
 8002372:	4621      	mov	r1, r4
 8002374:	4628      	mov	r0, r5
 8002376:	f000 f87f 	bl	8002478 <__swsetup_r>
 800237a:	2800      	cmp	r0, #0
 800237c:	d0dd      	beq.n	800233a <_puts_r+0x2e>
 800237e:	f04f 30ff 	mov.w	r0, #4294967295
 8002382:	bd70      	pop	{r4, r5, r6, pc}
 8002384:	2b00      	cmp	r3, #0
 8002386:	da04      	bge.n	8002392 <_puts_r+0x86>
 8002388:	69a2      	ldr	r2, [r4, #24]
 800238a:	429a      	cmp	r2, r3
 800238c:	dc06      	bgt.n	800239c <_puts_r+0x90>
 800238e:	290a      	cmp	r1, #10
 8002390:	d004      	beq.n	800239c <_puts_r+0x90>
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	6022      	str	r2, [r4, #0]
 8002398:	7019      	strb	r1, [r3, #0]
 800239a:	e7cf      	b.n	800233c <_puts_r+0x30>
 800239c:	4622      	mov	r2, r4
 800239e:	4628      	mov	r0, r5
 80023a0:	f000 f818 	bl	80023d4 <__swbuf_r>
 80023a4:	3001      	adds	r0, #1
 80023a6:	d1c9      	bne.n	800233c <_puts_r+0x30>
 80023a8:	e7e9      	b.n	800237e <_puts_r+0x72>
 80023aa:	200a      	movs	r0, #10
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	6022      	str	r2, [r4, #0]
 80023b2:	7018      	strb	r0, [r3, #0]
 80023b4:	e7e5      	b.n	8002382 <_puts_r+0x76>
 80023b6:	bf00      	nop
 80023b8:	080032a4 	.word	0x080032a4
 80023bc:	080032c4 	.word	0x080032c4
 80023c0:	08003284 	.word	0x08003284

080023c4 <puts>:
 80023c4:	4b02      	ldr	r3, [pc, #8]	; (80023d0 <puts+0xc>)
 80023c6:	4601      	mov	r1, r0
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	f7ff bf9f 	b.w	800230c <_puts_r>
 80023ce:	bf00      	nop
 80023d0:	2000000c 	.word	0x2000000c

080023d4 <__swbuf_r>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	460e      	mov	r6, r1
 80023d8:	4614      	mov	r4, r2
 80023da:	4605      	mov	r5, r0
 80023dc:	b118      	cbz	r0, 80023e6 <__swbuf_r+0x12>
 80023de:	6983      	ldr	r3, [r0, #24]
 80023e0:	b90b      	cbnz	r3, 80023e6 <__swbuf_r+0x12>
 80023e2:	f000 f9a7 	bl	8002734 <__sinit>
 80023e6:	4b21      	ldr	r3, [pc, #132]	; (800246c <__swbuf_r+0x98>)
 80023e8:	429c      	cmp	r4, r3
 80023ea:	d12a      	bne.n	8002442 <__swbuf_r+0x6e>
 80023ec:	686c      	ldr	r4, [r5, #4]
 80023ee:	69a3      	ldr	r3, [r4, #24]
 80023f0:	60a3      	str	r3, [r4, #8]
 80023f2:	89a3      	ldrh	r3, [r4, #12]
 80023f4:	071a      	lsls	r2, r3, #28
 80023f6:	d52e      	bpl.n	8002456 <__swbuf_r+0x82>
 80023f8:	6923      	ldr	r3, [r4, #16]
 80023fa:	b363      	cbz	r3, 8002456 <__swbuf_r+0x82>
 80023fc:	6923      	ldr	r3, [r4, #16]
 80023fe:	6820      	ldr	r0, [r4, #0]
 8002400:	b2f6      	uxtb	r6, r6
 8002402:	1ac0      	subs	r0, r0, r3
 8002404:	6963      	ldr	r3, [r4, #20]
 8002406:	4637      	mov	r7, r6
 8002408:	4283      	cmp	r3, r0
 800240a:	dc04      	bgt.n	8002416 <__swbuf_r+0x42>
 800240c:	4621      	mov	r1, r4
 800240e:	4628      	mov	r0, r5
 8002410:	f000 f926 	bl	8002660 <_fflush_r>
 8002414:	bb28      	cbnz	r0, 8002462 <__swbuf_r+0x8e>
 8002416:	68a3      	ldr	r3, [r4, #8]
 8002418:	3001      	adds	r0, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	60a3      	str	r3, [r4, #8]
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	6022      	str	r2, [r4, #0]
 8002424:	701e      	strb	r6, [r3, #0]
 8002426:	6963      	ldr	r3, [r4, #20]
 8002428:	4283      	cmp	r3, r0
 800242a:	d004      	beq.n	8002436 <__swbuf_r+0x62>
 800242c:	89a3      	ldrh	r3, [r4, #12]
 800242e:	07db      	lsls	r3, r3, #31
 8002430:	d519      	bpl.n	8002466 <__swbuf_r+0x92>
 8002432:	2e0a      	cmp	r6, #10
 8002434:	d117      	bne.n	8002466 <__swbuf_r+0x92>
 8002436:	4621      	mov	r1, r4
 8002438:	4628      	mov	r0, r5
 800243a:	f000 f911 	bl	8002660 <_fflush_r>
 800243e:	b190      	cbz	r0, 8002466 <__swbuf_r+0x92>
 8002440:	e00f      	b.n	8002462 <__swbuf_r+0x8e>
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <__swbuf_r+0x9c>)
 8002444:	429c      	cmp	r4, r3
 8002446:	d101      	bne.n	800244c <__swbuf_r+0x78>
 8002448:	68ac      	ldr	r4, [r5, #8]
 800244a:	e7d0      	b.n	80023ee <__swbuf_r+0x1a>
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <__swbuf_r+0xa0>)
 800244e:	429c      	cmp	r4, r3
 8002450:	bf08      	it	eq
 8002452:	68ec      	ldreq	r4, [r5, #12]
 8002454:	e7cb      	b.n	80023ee <__swbuf_r+0x1a>
 8002456:	4621      	mov	r1, r4
 8002458:	4628      	mov	r0, r5
 800245a:	f000 f80d 	bl	8002478 <__swsetup_r>
 800245e:	2800      	cmp	r0, #0
 8002460:	d0cc      	beq.n	80023fc <__swbuf_r+0x28>
 8002462:	f04f 37ff 	mov.w	r7, #4294967295
 8002466:	4638      	mov	r0, r7
 8002468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800246a:	bf00      	nop
 800246c:	080032a4 	.word	0x080032a4
 8002470:	080032c4 	.word	0x080032c4
 8002474:	08003284 	.word	0x08003284

08002478 <__swsetup_r>:
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <__swsetup_r+0xcc>)
 800247a:	b570      	push	{r4, r5, r6, lr}
 800247c:	681d      	ldr	r5, [r3, #0]
 800247e:	4606      	mov	r6, r0
 8002480:	460c      	mov	r4, r1
 8002482:	b125      	cbz	r5, 800248e <__swsetup_r+0x16>
 8002484:	69ab      	ldr	r3, [r5, #24]
 8002486:	b913      	cbnz	r3, 800248e <__swsetup_r+0x16>
 8002488:	4628      	mov	r0, r5
 800248a:	f000 f953 	bl	8002734 <__sinit>
 800248e:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <__swsetup_r+0xd0>)
 8002490:	429c      	cmp	r4, r3
 8002492:	d10f      	bne.n	80024b4 <__swsetup_r+0x3c>
 8002494:	686c      	ldr	r4, [r5, #4]
 8002496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800249a:	b29a      	uxth	r2, r3
 800249c:	0715      	lsls	r5, r2, #28
 800249e:	d42c      	bmi.n	80024fa <__swsetup_r+0x82>
 80024a0:	06d0      	lsls	r0, r2, #27
 80024a2:	d411      	bmi.n	80024c8 <__swsetup_r+0x50>
 80024a4:	2209      	movs	r2, #9
 80024a6:	6032      	str	r2, [r6, #0]
 80024a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ac:	81a3      	strh	r3, [r4, #12]
 80024ae:	f04f 30ff 	mov.w	r0, #4294967295
 80024b2:	e03e      	b.n	8002532 <__swsetup_r+0xba>
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <__swsetup_r+0xd4>)
 80024b6:	429c      	cmp	r4, r3
 80024b8:	d101      	bne.n	80024be <__swsetup_r+0x46>
 80024ba:	68ac      	ldr	r4, [r5, #8]
 80024bc:	e7eb      	b.n	8002496 <__swsetup_r+0x1e>
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <__swsetup_r+0xd8>)
 80024c0:	429c      	cmp	r4, r3
 80024c2:	bf08      	it	eq
 80024c4:	68ec      	ldreq	r4, [r5, #12]
 80024c6:	e7e6      	b.n	8002496 <__swsetup_r+0x1e>
 80024c8:	0751      	lsls	r1, r2, #29
 80024ca:	d512      	bpl.n	80024f2 <__swsetup_r+0x7a>
 80024cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024ce:	b141      	cbz	r1, 80024e2 <__swsetup_r+0x6a>
 80024d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024d4:	4299      	cmp	r1, r3
 80024d6:	d002      	beq.n	80024de <__swsetup_r+0x66>
 80024d8:	4630      	mov	r0, r6
 80024da:	f000 fa19 	bl	8002910 <_free_r>
 80024de:	2300      	movs	r3, #0
 80024e0:	6363      	str	r3, [r4, #52]	; 0x34
 80024e2:	89a3      	ldrh	r3, [r4, #12]
 80024e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80024e8:	81a3      	strh	r3, [r4, #12]
 80024ea:	2300      	movs	r3, #0
 80024ec:	6063      	str	r3, [r4, #4]
 80024ee:	6923      	ldr	r3, [r4, #16]
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	89a3      	ldrh	r3, [r4, #12]
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	81a3      	strh	r3, [r4, #12]
 80024fa:	6923      	ldr	r3, [r4, #16]
 80024fc:	b94b      	cbnz	r3, 8002512 <__swsetup_r+0x9a>
 80024fe:	89a3      	ldrh	r3, [r4, #12]
 8002500:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002508:	d003      	beq.n	8002512 <__swsetup_r+0x9a>
 800250a:	4621      	mov	r1, r4
 800250c:	4630      	mov	r0, r6
 800250e:	f000 f9bf 	bl	8002890 <__smakebuf_r>
 8002512:	89a2      	ldrh	r2, [r4, #12]
 8002514:	f012 0301 	ands.w	r3, r2, #1
 8002518:	d00c      	beq.n	8002534 <__swsetup_r+0xbc>
 800251a:	2300      	movs	r3, #0
 800251c:	60a3      	str	r3, [r4, #8]
 800251e:	6963      	ldr	r3, [r4, #20]
 8002520:	425b      	negs	r3, r3
 8002522:	61a3      	str	r3, [r4, #24]
 8002524:	6923      	ldr	r3, [r4, #16]
 8002526:	b953      	cbnz	r3, 800253e <__swsetup_r+0xc6>
 8002528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800252c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002530:	d1ba      	bne.n	80024a8 <__swsetup_r+0x30>
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	0792      	lsls	r2, r2, #30
 8002536:	bf58      	it	pl
 8002538:	6963      	ldrpl	r3, [r4, #20]
 800253a:	60a3      	str	r3, [r4, #8]
 800253c:	e7f2      	b.n	8002524 <__swsetup_r+0xac>
 800253e:	2000      	movs	r0, #0
 8002540:	e7f7      	b.n	8002532 <__swsetup_r+0xba>
 8002542:	bf00      	nop
 8002544:	2000000c 	.word	0x2000000c
 8002548:	080032a4 	.word	0x080032a4
 800254c:	080032c4 	.word	0x080032c4
 8002550:	08003284 	.word	0x08003284

08002554 <__sflush_r>:
 8002554:	898a      	ldrh	r2, [r1, #12]
 8002556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800255a:	4605      	mov	r5, r0
 800255c:	0710      	lsls	r0, r2, #28
 800255e:	460c      	mov	r4, r1
 8002560:	d458      	bmi.n	8002614 <__sflush_r+0xc0>
 8002562:	684b      	ldr	r3, [r1, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	dc05      	bgt.n	8002574 <__sflush_r+0x20>
 8002568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	dc02      	bgt.n	8002574 <__sflush_r+0x20>
 800256e:	2000      	movs	r0, #0
 8002570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002576:	2e00      	cmp	r6, #0
 8002578:	d0f9      	beq.n	800256e <__sflush_r+0x1a>
 800257a:	2300      	movs	r3, #0
 800257c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002580:	682f      	ldr	r7, [r5, #0]
 8002582:	6a21      	ldr	r1, [r4, #32]
 8002584:	602b      	str	r3, [r5, #0]
 8002586:	d032      	beq.n	80025ee <__sflush_r+0x9a>
 8002588:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800258a:	89a3      	ldrh	r3, [r4, #12]
 800258c:	075a      	lsls	r2, r3, #29
 800258e:	d505      	bpl.n	800259c <__sflush_r+0x48>
 8002590:	6863      	ldr	r3, [r4, #4]
 8002592:	1ac0      	subs	r0, r0, r3
 8002594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002596:	b10b      	cbz	r3, 800259c <__sflush_r+0x48>
 8002598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800259a:	1ac0      	subs	r0, r0, r3
 800259c:	2300      	movs	r3, #0
 800259e:	4602      	mov	r2, r0
 80025a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025a2:	6a21      	ldr	r1, [r4, #32]
 80025a4:	4628      	mov	r0, r5
 80025a6:	47b0      	blx	r6
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	d106      	bne.n	80025bc <__sflush_r+0x68>
 80025ae:	6829      	ldr	r1, [r5, #0]
 80025b0:	291d      	cmp	r1, #29
 80025b2:	d848      	bhi.n	8002646 <__sflush_r+0xf2>
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <__sflush_r+0x108>)
 80025b6:	40ca      	lsrs	r2, r1
 80025b8:	07d6      	lsls	r6, r2, #31
 80025ba:	d544      	bpl.n	8002646 <__sflush_r+0xf2>
 80025bc:	2200      	movs	r2, #0
 80025be:	6062      	str	r2, [r4, #4]
 80025c0:	6922      	ldr	r2, [r4, #16]
 80025c2:	04d9      	lsls	r1, r3, #19
 80025c4:	6022      	str	r2, [r4, #0]
 80025c6:	d504      	bpl.n	80025d2 <__sflush_r+0x7e>
 80025c8:	1c42      	adds	r2, r0, #1
 80025ca:	d101      	bne.n	80025d0 <__sflush_r+0x7c>
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	b903      	cbnz	r3, 80025d2 <__sflush_r+0x7e>
 80025d0:	6560      	str	r0, [r4, #84]	; 0x54
 80025d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025d4:	602f      	str	r7, [r5, #0]
 80025d6:	2900      	cmp	r1, #0
 80025d8:	d0c9      	beq.n	800256e <__sflush_r+0x1a>
 80025da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025de:	4299      	cmp	r1, r3
 80025e0:	d002      	beq.n	80025e8 <__sflush_r+0x94>
 80025e2:	4628      	mov	r0, r5
 80025e4:	f000 f994 	bl	8002910 <_free_r>
 80025e8:	2000      	movs	r0, #0
 80025ea:	6360      	str	r0, [r4, #52]	; 0x34
 80025ec:	e7c0      	b.n	8002570 <__sflush_r+0x1c>
 80025ee:	2301      	movs	r3, #1
 80025f0:	4628      	mov	r0, r5
 80025f2:	47b0      	blx	r6
 80025f4:	1c41      	adds	r1, r0, #1
 80025f6:	d1c8      	bne.n	800258a <__sflush_r+0x36>
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0c5      	beq.n	800258a <__sflush_r+0x36>
 80025fe:	2b1d      	cmp	r3, #29
 8002600:	d001      	beq.n	8002606 <__sflush_r+0xb2>
 8002602:	2b16      	cmp	r3, #22
 8002604:	d101      	bne.n	800260a <__sflush_r+0xb6>
 8002606:	602f      	str	r7, [r5, #0]
 8002608:	e7b1      	b.n	800256e <__sflush_r+0x1a>
 800260a:	89a3      	ldrh	r3, [r4, #12]
 800260c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002610:	81a3      	strh	r3, [r4, #12]
 8002612:	e7ad      	b.n	8002570 <__sflush_r+0x1c>
 8002614:	690f      	ldr	r7, [r1, #16]
 8002616:	2f00      	cmp	r7, #0
 8002618:	d0a9      	beq.n	800256e <__sflush_r+0x1a>
 800261a:	0793      	lsls	r3, r2, #30
 800261c:	bf18      	it	ne
 800261e:	2300      	movne	r3, #0
 8002620:	680e      	ldr	r6, [r1, #0]
 8002622:	bf08      	it	eq
 8002624:	694b      	ldreq	r3, [r1, #20]
 8002626:	eba6 0807 	sub.w	r8, r6, r7
 800262a:	600f      	str	r7, [r1, #0]
 800262c:	608b      	str	r3, [r1, #8]
 800262e:	f1b8 0f00 	cmp.w	r8, #0
 8002632:	dd9c      	ble.n	800256e <__sflush_r+0x1a>
 8002634:	4643      	mov	r3, r8
 8002636:	463a      	mov	r2, r7
 8002638:	6a21      	ldr	r1, [r4, #32]
 800263a:	4628      	mov	r0, r5
 800263c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800263e:	47b0      	blx	r6
 8002640:	2800      	cmp	r0, #0
 8002642:	dc06      	bgt.n	8002652 <__sflush_r+0xfe>
 8002644:	89a3      	ldrh	r3, [r4, #12]
 8002646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264a:	81a3      	strh	r3, [r4, #12]
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	e78e      	b.n	8002570 <__sflush_r+0x1c>
 8002652:	4407      	add	r7, r0
 8002654:	eba8 0800 	sub.w	r8, r8, r0
 8002658:	e7e9      	b.n	800262e <__sflush_r+0xda>
 800265a:	bf00      	nop
 800265c:	20400001 	.word	0x20400001

08002660 <_fflush_r>:
 8002660:	b538      	push	{r3, r4, r5, lr}
 8002662:	690b      	ldr	r3, [r1, #16]
 8002664:	4605      	mov	r5, r0
 8002666:	460c      	mov	r4, r1
 8002668:	b1db      	cbz	r3, 80026a2 <_fflush_r+0x42>
 800266a:	b118      	cbz	r0, 8002674 <_fflush_r+0x14>
 800266c:	6983      	ldr	r3, [r0, #24]
 800266e:	b90b      	cbnz	r3, 8002674 <_fflush_r+0x14>
 8002670:	f000 f860 	bl	8002734 <__sinit>
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <_fflush_r+0x48>)
 8002676:	429c      	cmp	r4, r3
 8002678:	d109      	bne.n	800268e <_fflush_r+0x2e>
 800267a:	686c      	ldr	r4, [r5, #4]
 800267c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002680:	b17b      	cbz	r3, 80026a2 <_fflush_r+0x42>
 8002682:	4621      	mov	r1, r4
 8002684:	4628      	mov	r0, r5
 8002686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800268a:	f7ff bf63 	b.w	8002554 <__sflush_r>
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <_fflush_r+0x4c>)
 8002690:	429c      	cmp	r4, r3
 8002692:	d101      	bne.n	8002698 <_fflush_r+0x38>
 8002694:	68ac      	ldr	r4, [r5, #8]
 8002696:	e7f1      	b.n	800267c <_fflush_r+0x1c>
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <_fflush_r+0x50>)
 800269a:	429c      	cmp	r4, r3
 800269c:	bf08      	it	eq
 800269e:	68ec      	ldreq	r4, [r5, #12]
 80026a0:	e7ec      	b.n	800267c <_fflush_r+0x1c>
 80026a2:	2000      	movs	r0, #0
 80026a4:	bd38      	pop	{r3, r4, r5, pc}
 80026a6:	bf00      	nop
 80026a8:	080032a4 	.word	0x080032a4
 80026ac:	080032c4 	.word	0x080032c4
 80026b0:	08003284 	.word	0x08003284

080026b4 <std>:
 80026b4:	2300      	movs	r3, #0
 80026b6:	b510      	push	{r4, lr}
 80026b8:	4604      	mov	r4, r0
 80026ba:	e9c0 3300 	strd	r3, r3, [r0]
 80026be:	6083      	str	r3, [r0, #8]
 80026c0:	8181      	strh	r1, [r0, #12]
 80026c2:	6643      	str	r3, [r0, #100]	; 0x64
 80026c4:	81c2      	strh	r2, [r0, #14]
 80026c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026ca:	6183      	str	r3, [r0, #24]
 80026cc:	4619      	mov	r1, r3
 80026ce:	2208      	movs	r2, #8
 80026d0:	305c      	adds	r0, #92	; 0x5c
 80026d2:	f7ff fdfb 	bl	80022cc <memset>
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <std+0x38>)
 80026d8:	6224      	str	r4, [r4, #32]
 80026da:	6263      	str	r3, [r4, #36]	; 0x24
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <std+0x3c>)
 80026de:	62a3      	str	r3, [r4, #40]	; 0x28
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <std+0x40>)
 80026e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026e4:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <std+0x44>)
 80026e6:	6323      	str	r3, [r4, #48]	; 0x30
 80026e8:	bd10      	pop	{r4, pc}
 80026ea:	bf00      	nop
 80026ec:	08003009 	.word	0x08003009
 80026f0:	0800302b 	.word	0x0800302b
 80026f4:	08003063 	.word	0x08003063
 80026f8:	08003087 	.word	0x08003087

080026fc <_cleanup_r>:
 80026fc:	4901      	ldr	r1, [pc, #4]	; (8002704 <_cleanup_r+0x8>)
 80026fe:	f000 b885 	b.w	800280c <_fwalk_reent>
 8002702:	bf00      	nop
 8002704:	08002661 	.word	0x08002661

08002708 <__sfmoreglue>:
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	2568      	movs	r5, #104	; 0x68
 800270c:	1e4a      	subs	r2, r1, #1
 800270e:	4355      	muls	r5, r2
 8002710:	460e      	mov	r6, r1
 8002712:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002716:	f000 f947 	bl	80029a8 <_malloc_r>
 800271a:	4604      	mov	r4, r0
 800271c:	b140      	cbz	r0, 8002730 <__sfmoreglue+0x28>
 800271e:	2100      	movs	r1, #0
 8002720:	e9c0 1600 	strd	r1, r6, [r0]
 8002724:	300c      	adds	r0, #12
 8002726:	60a0      	str	r0, [r4, #8]
 8002728:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800272c:	f7ff fdce 	bl	80022cc <memset>
 8002730:	4620      	mov	r0, r4
 8002732:	bd70      	pop	{r4, r5, r6, pc}

08002734 <__sinit>:
 8002734:	6983      	ldr	r3, [r0, #24]
 8002736:	b510      	push	{r4, lr}
 8002738:	4604      	mov	r4, r0
 800273a:	bb33      	cbnz	r3, 800278a <__sinit+0x56>
 800273c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002740:	6503      	str	r3, [r0, #80]	; 0x50
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <__sinit+0x58>)
 8002744:	4a12      	ldr	r2, [pc, #72]	; (8002790 <__sinit+0x5c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6282      	str	r2, [r0, #40]	; 0x28
 800274a:	4298      	cmp	r0, r3
 800274c:	bf04      	itt	eq
 800274e:	2301      	moveq	r3, #1
 8002750:	6183      	streq	r3, [r0, #24]
 8002752:	f000 f81f 	bl	8002794 <__sfp>
 8002756:	6060      	str	r0, [r4, #4]
 8002758:	4620      	mov	r0, r4
 800275a:	f000 f81b 	bl	8002794 <__sfp>
 800275e:	60a0      	str	r0, [r4, #8]
 8002760:	4620      	mov	r0, r4
 8002762:	f000 f817 	bl	8002794 <__sfp>
 8002766:	2200      	movs	r2, #0
 8002768:	60e0      	str	r0, [r4, #12]
 800276a:	2104      	movs	r1, #4
 800276c:	6860      	ldr	r0, [r4, #4]
 800276e:	f7ff ffa1 	bl	80026b4 <std>
 8002772:	2201      	movs	r2, #1
 8002774:	2109      	movs	r1, #9
 8002776:	68a0      	ldr	r0, [r4, #8]
 8002778:	f7ff ff9c 	bl	80026b4 <std>
 800277c:	2202      	movs	r2, #2
 800277e:	2112      	movs	r1, #18
 8002780:	68e0      	ldr	r0, [r4, #12]
 8002782:	f7ff ff97 	bl	80026b4 <std>
 8002786:	2301      	movs	r3, #1
 8002788:	61a3      	str	r3, [r4, #24]
 800278a:	bd10      	pop	{r4, pc}
 800278c:	08003280 	.word	0x08003280
 8002790:	080026fd 	.word	0x080026fd

08002794 <__sfp>:
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <__sfp+0x70>)
 8002798:	4607      	mov	r7, r0
 800279a:	681e      	ldr	r6, [r3, #0]
 800279c:	69b3      	ldr	r3, [r6, #24]
 800279e:	b913      	cbnz	r3, 80027a6 <__sfp+0x12>
 80027a0:	4630      	mov	r0, r6
 80027a2:	f7ff ffc7 	bl	8002734 <__sinit>
 80027a6:	3648      	adds	r6, #72	; 0x48
 80027a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	d503      	bpl.n	80027b8 <__sfp+0x24>
 80027b0:	6833      	ldr	r3, [r6, #0]
 80027b2:	b133      	cbz	r3, 80027c2 <__sfp+0x2e>
 80027b4:	6836      	ldr	r6, [r6, #0]
 80027b6:	e7f7      	b.n	80027a8 <__sfp+0x14>
 80027b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027bc:	b16d      	cbz	r5, 80027da <__sfp+0x46>
 80027be:	3468      	adds	r4, #104	; 0x68
 80027c0:	e7f4      	b.n	80027ac <__sfp+0x18>
 80027c2:	2104      	movs	r1, #4
 80027c4:	4638      	mov	r0, r7
 80027c6:	f7ff ff9f 	bl	8002708 <__sfmoreglue>
 80027ca:	6030      	str	r0, [r6, #0]
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d1f1      	bne.n	80027b4 <__sfp+0x20>
 80027d0:	230c      	movs	r3, #12
 80027d2:	4604      	mov	r4, r0
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4620      	mov	r0, r4
 80027d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <__sfp+0x74>)
 80027dc:	6665      	str	r5, [r4, #100]	; 0x64
 80027de:	e9c4 5500 	strd	r5, r5, [r4]
 80027e2:	60a5      	str	r5, [r4, #8]
 80027e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80027e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80027ec:	2208      	movs	r2, #8
 80027ee:	4629      	mov	r1, r5
 80027f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027f4:	f7ff fd6a 	bl	80022cc <memset>
 80027f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002800:	e7e9      	b.n	80027d6 <__sfp+0x42>
 8002802:	bf00      	nop
 8002804:	08003280 	.word	0x08003280
 8002808:	ffff0001 	.word	0xffff0001

0800280c <_fwalk_reent>:
 800280c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002810:	4680      	mov	r8, r0
 8002812:	4689      	mov	r9, r1
 8002814:	2600      	movs	r6, #0
 8002816:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800281a:	b914      	cbnz	r4, 8002822 <_fwalk_reent+0x16>
 800281c:	4630      	mov	r0, r6
 800281e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002822:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002826:	3f01      	subs	r7, #1
 8002828:	d501      	bpl.n	800282e <_fwalk_reent+0x22>
 800282a:	6824      	ldr	r4, [r4, #0]
 800282c:	e7f5      	b.n	800281a <_fwalk_reent+0xe>
 800282e:	89ab      	ldrh	r3, [r5, #12]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d907      	bls.n	8002844 <_fwalk_reent+0x38>
 8002834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002838:	3301      	adds	r3, #1
 800283a:	d003      	beq.n	8002844 <_fwalk_reent+0x38>
 800283c:	4629      	mov	r1, r5
 800283e:	4640      	mov	r0, r8
 8002840:	47c8      	blx	r9
 8002842:	4306      	orrs	r6, r0
 8002844:	3568      	adds	r5, #104	; 0x68
 8002846:	e7ee      	b.n	8002826 <_fwalk_reent+0x1a>

08002848 <__swhatbuf_r>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	460e      	mov	r6, r1
 800284c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002850:	b096      	sub	sp, #88	; 0x58
 8002852:	2900      	cmp	r1, #0
 8002854:	4614      	mov	r4, r2
 8002856:	461d      	mov	r5, r3
 8002858:	da07      	bge.n	800286a <__swhatbuf_r+0x22>
 800285a:	2300      	movs	r3, #0
 800285c:	602b      	str	r3, [r5, #0]
 800285e:	89b3      	ldrh	r3, [r6, #12]
 8002860:	061a      	lsls	r2, r3, #24
 8002862:	d410      	bmi.n	8002886 <__swhatbuf_r+0x3e>
 8002864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002868:	e00e      	b.n	8002888 <__swhatbuf_r+0x40>
 800286a:	466a      	mov	r2, sp
 800286c:	f000 fc32 	bl	80030d4 <_fstat_r>
 8002870:	2800      	cmp	r0, #0
 8002872:	dbf2      	blt.n	800285a <__swhatbuf_r+0x12>
 8002874:	9a01      	ldr	r2, [sp, #4]
 8002876:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800287a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800287e:	425a      	negs	r2, r3
 8002880:	415a      	adcs	r2, r3
 8002882:	602a      	str	r2, [r5, #0]
 8002884:	e7ee      	b.n	8002864 <__swhatbuf_r+0x1c>
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	2000      	movs	r0, #0
 800288a:	6023      	str	r3, [r4, #0]
 800288c:	b016      	add	sp, #88	; 0x58
 800288e:	bd70      	pop	{r4, r5, r6, pc}

08002890 <__smakebuf_r>:
 8002890:	898b      	ldrh	r3, [r1, #12]
 8002892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002894:	079d      	lsls	r5, r3, #30
 8002896:	4606      	mov	r6, r0
 8002898:	460c      	mov	r4, r1
 800289a:	d507      	bpl.n	80028ac <__smakebuf_r+0x1c>
 800289c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	6123      	str	r3, [r4, #16]
 80028a4:	2301      	movs	r3, #1
 80028a6:	6163      	str	r3, [r4, #20]
 80028a8:	b002      	add	sp, #8
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	ab01      	add	r3, sp, #4
 80028ae:	466a      	mov	r2, sp
 80028b0:	f7ff ffca 	bl	8002848 <__swhatbuf_r>
 80028b4:	9900      	ldr	r1, [sp, #0]
 80028b6:	4605      	mov	r5, r0
 80028b8:	4630      	mov	r0, r6
 80028ba:	f000 f875 	bl	80029a8 <_malloc_r>
 80028be:	b948      	cbnz	r0, 80028d4 <__smakebuf_r+0x44>
 80028c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028c4:	059a      	lsls	r2, r3, #22
 80028c6:	d4ef      	bmi.n	80028a8 <__smakebuf_r+0x18>
 80028c8:	f023 0303 	bic.w	r3, r3, #3
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	81a3      	strh	r3, [r4, #12]
 80028d2:	e7e3      	b.n	800289c <__smakebuf_r+0xc>
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <__smakebuf_r+0x7c>)
 80028d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80028d8:	89a3      	ldrh	r3, [r4, #12]
 80028da:	6020      	str	r0, [r4, #0]
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	81a3      	strh	r3, [r4, #12]
 80028e2:	9b00      	ldr	r3, [sp, #0]
 80028e4:	6120      	str	r0, [r4, #16]
 80028e6:	6163      	str	r3, [r4, #20]
 80028e8:	9b01      	ldr	r3, [sp, #4]
 80028ea:	b15b      	cbz	r3, 8002904 <__smakebuf_r+0x74>
 80028ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028f0:	4630      	mov	r0, r6
 80028f2:	f000 fc01 	bl	80030f8 <_isatty_r>
 80028f6:	b128      	cbz	r0, 8002904 <__smakebuf_r+0x74>
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	81a3      	strh	r3, [r4, #12]
 8002904:	89a3      	ldrh	r3, [r4, #12]
 8002906:	431d      	orrs	r5, r3
 8002908:	81a5      	strh	r5, [r4, #12]
 800290a:	e7cd      	b.n	80028a8 <__smakebuf_r+0x18>
 800290c:	080026fd 	.word	0x080026fd

08002910 <_free_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4605      	mov	r5, r0
 8002914:	2900      	cmp	r1, #0
 8002916:	d043      	beq.n	80029a0 <_free_r+0x90>
 8002918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800291c:	1f0c      	subs	r4, r1, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	bfb8      	it	lt
 8002922:	18e4      	addlt	r4, r4, r3
 8002924:	f000 fc18 	bl	8003158 <__malloc_lock>
 8002928:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <_free_r+0x94>)
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	4610      	mov	r0, r2
 800292e:	b933      	cbnz	r3, 800293e <_free_r+0x2e>
 8002930:	6063      	str	r3, [r4, #4]
 8002932:	6014      	str	r4, [r2, #0]
 8002934:	4628      	mov	r0, r5
 8002936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800293a:	f000 bc0e 	b.w	800315a <__malloc_unlock>
 800293e:	42a3      	cmp	r3, r4
 8002940:	d90b      	bls.n	800295a <_free_r+0x4a>
 8002942:	6821      	ldr	r1, [r4, #0]
 8002944:	1862      	adds	r2, r4, r1
 8002946:	4293      	cmp	r3, r2
 8002948:	bf01      	itttt	eq
 800294a:	681a      	ldreq	r2, [r3, #0]
 800294c:	685b      	ldreq	r3, [r3, #4]
 800294e:	1852      	addeq	r2, r2, r1
 8002950:	6022      	streq	r2, [r4, #0]
 8002952:	6063      	str	r3, [r4, #4]
 8002954:	6004      	str	r4, [r0, #0]
 8002956:	e7ed      	b.n	8002934 <_free_r+0x24>
 8002958:	4613      	mov	r3, r2
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	b10a      	cbz	r2, 8002962 <_free_r+0x52>
 800295e:	42a2      	cmp	r2, r4
 8002960:	d9fa      	bls.n	8002958 <_free_r+0x48>
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	1858      	adds	r0, r3, r1
 8002966:	42a0      	cmp	r0, r4
 8002968:	d10b      	bne.n	8002982 <_free_r+0x72>
 800296a:	6820      	ldr	r0, [r4, #0]
 800296c:	4401      	add	r1, r0
 800296e:	1858      	adds	r0, r3, r1
 8002970:	4282      	cmp	r2, r0
 8002972:	6019      	str	r1, [r3, #0]
 8002974:	d1de      	bne.n	8002934 <_free_r+0x24>
 8002976:	6810      	ldr	r0, [r2, #0]
 8002978:	6852      	ldr	r2, [r2, #4]
 800297a:	4401      	add	r1, r0
 800297c:	6019      	str	r1, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	e7d8      	b.n	8002934 <_free_r+0x24>
 8002982:	d902      	bls.n	800298a <_free_r+0x7a>
 8002984:	230c      	movs	r3, #12
 8002986:	602b      	str	r3, [r5, #0]
 8002988:	e7d4      	b.n	8002934 <_free_r+0x24>
 800298a:	6820      	ldr	r0, [r4, #0]
 800298c:	1821      	adds	r1, r4, r0
 800298e:	428a      	cmp	r2, r1
 8002990:	bf01      	itttt	eq
 8002992:	6811      	ldreq	r1, [r2, #0]
 8002994:	6852      	ldreq	r2, [r2, #4]
 8002996:	1809      	addeq	r1, r1, r0
 8002998:	6021      	streq	r1, [r4, #0]
 800299a:	6062      	str	r2, [r4, #4]
 800299c:	605c      	str	r4, [r3, #4]
 800299e:	e7c9      	b.n	8002934 <_free_r+0x24>
 80029a0:	bd38      	pop	{r3, r4, r5, pc}
 80029a2:	bf00      	nop
 80029a4:	200000f8 	.word	0x200000f8

080029a8 <_malloc_r>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	1ccd      	adds	r5, r1, #3
 80029ac:	f025 0503 	bic.w	r5, r5, #3
 80029b0:	3508      	adds	r5, #8
 80029b2:	2d0c      	cmp	r5, #12
 80029b4:	bf38      	it	cc
 80029b6:	250c      	movcc	r5, #12
 80029b8:	2d00      	cmp	r5, #0
 80029ba:	4606      	mov	r6, r0
 80029bc:	db01      	blt.n	80029c2 <_malloc_r+0x1a>
 80029be:	42a9      	cmp	r1, r5
 80029c0:	d903      	bls.n	80029ca <_malloc_r+0x22>
 80029c2:	230c      	movs	r3, #12
 80029c4:	6033      	str	r3, [r6, #0]
 80029c6:	2000      	movs	r0, #0
 80029c8:	bd70      	pop	{r4, r5, r6, pc}
 80029ca:	f000 fbc5 	bl	8003158 <__malloc_lock>
 80029ce:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <_malloc_r+0xac>)
 80029d0:	6814      	ldr	r4, [r2, #0]
 80029d2:	4621      	mov	r1, r4
 80029d4:	b991      	cbnz	r1, 80029fc <_malloc_r+0x54>
 80029d6:	4c20      	ldr	r4, [pc, #128]	; (8002a58 <_malloc_r+0xb0>)
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	b91b      	cbnz	r3, 80029e4 <_malloc_r+0x3c>
 80029dc:	4630      	mov	r0, r6
 80029de:	f000 fb03 	bl	8002fe8 <_sbrk_r>
 80029e2:	6020      	str	r0, [r4, #0]
 80029e4:	4629      	mov	r1, r5
 80029e6:	4630      	mov	r0, r6
 80029e8:	f000 fafe 	bl	8002fe8 <_sbrk_r>
 80029ec:	1c43      	adds	r3, r0, #1
 80029ee:	d124      	bne.n	8002a3a <_malloc_r+0x92>
 80029f0:	230c      	movs	r3, #12
 80029f2:	4630      	mov	r0, r6
 80029f4:	6033      	str	r3, [r6, #0]
 80029f6:	f000 fbb0 	bl	800315a <__malloc_unlock>
 80029fa:	e7e4      	b.n	80029c6 <_malloc_r+0x1e>
 80029fc:	680b      	ldr	r3, [r1, #0]
 80029fe:	1b5b      	subs	r3, r3, r5
 8002a00:	d418      	bmi.n	8002a34 <_malloc_r+0x8c>
 8002a02:	2b0b      	cmp	r3, #11
 8002a04:	d90f      	bls.n	8002a26 <_malloc_r+0x7e>
 8002a06:	600b      	str	r3, [r1, #0]
 8002a08:	18cc      	adds	r4, r1, r3
 8002a0a:	50cd      	str	r5, [r1, r3]
 8002a0c:	4630      	mov	r0, r6
 8002a0e:	f000 fba4 	bl	800315a <__malloc_unlock>
 8002a12:	f104 000b 	add.w	r0, r4, #11
 8002a16:	1d23      	adds	r3, r4, #4
 8002a18:	f020 0007 	bic.w	r0, r0, #7
 8002a1c:	1ac3      	subs	r3, r0, r3
 8002a1e:	d0d3      	beq.n	80029c8 <_malloc_r+0x20>
 8002a20:	425a      	negs	r2, r3
 8002a22:	50e2      	str	r2, [r4, r3]
 8002a24:	e7d0      	b.n	80029c8 <_malloc_r+0x20>
 8002a26:	684b      	ldr	r3, [r1, #4]
 8002a28:	428c      	cmp	r4, r1
 8002a2a:	bf16      	itet	ne
 8002a2c:	6063      	strne	r3, [r4, #4]
 8002a2e:	6013      	streq	r3, [r2, #0]
 8002a30:	460c      	movne	r4, r1
 8002a32:	e7eb      	b.n	8002a0c <_malloc_r+0x64>
 8002a34:	460c      	mov	r4, r1
 8002a36:	6849      	ldr	r1, [r1, #4]
 8002a38:	e7cc      	b.n	80029d4 <_malloc_r+0x2c>
 8002a3a:	1cc4      	adds	r4, r0, #3
 8002a3c:	f024 0403 	bic.w	r4, r4, #3
 8002a40:	42a0      	cmp	r0, r4
 8002a42:	d005      	beq.n	8002a50 <_malloc_r+0xa8>
 8002a44:	1a21      	subs	r1, r4, r0
 8002a46:	4630      	mov	r0, r6
 8002a48:	f000 face 	bl	8002fe8 <_sbrk_r>
 8002a4c:	3001      	adds	r0, #1
 8002a4e:	d0cf      	beq.n	80029f0 <_malloc_r+0x48>
 8002a50:	6025      	str	r5, [r4, #0]
 8002a52:	e7db      	b.n	8002a0c <_malloc_r+0x64>
 8002a54:	200000f8 	.word	0x200000f8
 8002a58:	200000fc 	.word	0x200000fc

08002a5c <__sfputc_r>:
 8002a5c:	6893      	ldr	r3, [r2, #8]
 8002a5e:	b410      	push	{r4}
 8002a60:	3b01      	subs	r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	6093      	str	r3, [r2, #8]
 8002a66:	da07      	bge.n	8002a78 <__sfputc_r+0x1c>
 8002a68:	6994      	ldr	r4, [r2, #24]
 8002a6a:	42a3      	cmp	r3, r4
 8002a6c:	db01      	blt.n	8002a72 <__sfputc_r+0x16>
 8002a6e:	290a      	cmp	r1, #10
 8002a70:	d102      	bne.n	8002a78 <__sfputc_r+0x1c>
 8002a72:	bc10      	pop	{r4}
 8002a74:	f7ff bcae 	b.w	80023d4 <__swbuf_r>
 8002a78:	6813      	ldr	r3, [r2, #0]
 8002a7a:	1c58      	adds	r0, r3, #1
 8002a7c:	6010      	str	r0, [r2, #0]
 8002a7e:	7019      	strb	r1, [r3, #0]
 8002a80:	4608      	mov	r0, r1
 8002a82:	bc10      	pop	{r4}
 8002a84:	4770      	bx	lr

08002a86 <__sfputs_r>:
 8002a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a88:	4606      	mov	r6, r0
 8002a8a:	460f      	mov	r7, r1
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	18d5      	adds	r5, r2, r3
 8002a90:	42ac      	cmp	r4, r5
 8002a92:	d101      	bne.n	8002a98 <__sfputs_r+0x12>
 8002a94:	2000      	movs	r0, #0
 8002a96:	e007      	b.n	8002aa8 <__sfputs_r+0x22>
 8002a98:	463a      	mov	r2, r7
 8002a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	f7ff ffdc 	bl	8002a5c <__sfputc_r>
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	d1f3      	bne.n	8002a90 <__sfputs_r+0xa>
 8002aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002aac <_vfiprintf_r>:
 8002aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	b09d      	sub	sp, #116	; 0x74
 8002ab4:	4617      	mov	r7, r2
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	4606      	mov	r6, r0
 8002aba:	b118      	cbz	r0, 8002ac4 <_vfiprintf_r+0x18>
 8002abc:	6983      	ldr	r3, [r0, #24]
 8002abe:	b90b      	cbnz	r3, 8002ac4 <_vfiprintf_r+0x18>
 8002ac0:	f7ff fe38 	bl	8002734 <__sinit>
 8002ac4:	4b7c      	ldr	r3, [pc, #496]	; (8002cb8 <_vfiprintf_r+0x20c>)
 8002ac6:	429c      	cmp	r4, r3
 8002ac8:	d158      	bne.n	8002b7c <_vfiprintf_r+0xd0>
 8002aca:	6874      	ldr	r4, [r6, #4]
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	0718      	lsls	r0, r3, #28
 8002ad0:	d55e      	bpl.n	8002b90 <_vfiprintf_r+0xe4>
 8002ad2:	6923      	ldr	r3, [r4, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d05b      	beq.n	8002b90 <_vfiprintf_r+0xe4>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9309      	str	r3, [sp, #36]	; 0x24
 8002adc:	2320      	movs	r3, #32
 8002ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ae2:	2330      	movs	r3, #48	; 0x30
 8002ae4:	f04f 0b01 	mov.w	fp, #1
 8002ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aec:	9503      	str	r5, [sp, #12]
 8002aee:	46b8      	mov	r8, r7
 8002af0:	4645      	mov	r5, r8
 8002af2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002af6:	b10b      	cbz	r3, 8002afc <_vfiprintf_r+0x50>
 8002af8:	2b25      	cmp	r3, #37	; 0x25
 8002afa:	d154      	bne.n	8002ba6 <_vfiprintf_r+0xfa>
 8002afc:	ebb8 0a07 	subs.w	sl, r8, r7
 8002b00:	d00b      	beq.n	8002b1a <_vfiprintf_r+0x6e>
 8002b02:	4653      	mov	r3, sl
 8002b04:	463a      	mov	r2, r7
 8002b06:	4621      	mov	r1, r4
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f7ff ffbc 	bl	8002a86 <__sfputs_r>
 8002b0e:	3001      	adds	r0, #1
 8002b10:	f000 80c2 	beq.w	8002c98 <_vfiprintf_r+0x1ec>
 8002b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b16:	4453      	add	r3, sl
 8002b18:	9309      	str	r3, [sp, #36]	; 0x24
 8002b1a:	f898 3000 	ldrb.w	r3, [r8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80ba 	beq.w	8002c98 <_vfiprintf_r+0x1ec>
 8002b24:	2300      	movs	r3, #0
 8002b26:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b2e:	9304      	str	r3, [sp, #16]
 8002b30:	9307      	str	r3, [sp, #28]
 8002b32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b36:	931a      	str	r3, [sp, #104]	; 0x68
 8002b38:	46a8      	mov	r8, r5
 8002b3a:	2205      	movs	r2, #5
 8002b3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002b40:	485e      	ldr	r0, [pc, #376]	; (8002cbc <_vfiprintf_r+0x210>)
 8002b42:	f000 fafb 	bl	800313c <memchr>
 8002b46:	9b04      	ldr	r3, [sp, #16]
 8002b48:	bb78      	cbnz	r0, 8002baa <_vfiprintf_r+0xfe>
 8002b4a:	06d9      	lsls	r1, r3, #27
 8002b4c:	bf44      	itt	mi
 8002b4e:	2220      	movmi	r2, #32
 8002b50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b54:	071a      	lsls	r2, r3, #28
 8002b56:	bf44      	itt	mi
 8002b58:	222b      	movmi	r2, #43	; 0x2b
 8002b5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b5e:	782a      	ldrb	r2, [r5, #0]
 8002b60:	2a2a      	cmp	r2, #42	; 0x2a
 8002b62:	d02a      	beq.n	8002bba <_vfiprintf_r+0x10e>
 8002b64:	46a8      	mov	r8, r5
 8002b66:	2000      	movs	r0, #0
 8002b68:	250a      	movs	r5, #10
 8002b6a:	9a07      	ldr	r2, [sp, #28]
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b72:	3b30      	subs	r3, #48	; 0x30
 8002b74:	2b09      	cmp	r3, #9
 8002b76:	d969      	bls.n	8002c4c <_vfiprintf_r+0x1a0>
 8002b78:	b360      	cbz	r0, 8002bd4 <_vfiprintf_r+0x128>
 8002b7a:	e024      	b.n	8002bc6 <_vfiprintf_r+0x11a>
 8002b7c:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <_vfiprintf_r+0x214>)
 8002b7e:	429c      	cmp	r4, r3
 8002b80:	d101      	bne.n	8002b86 <_vfiprintf_r+0xda>
 8002b82:	68b4      	ldr	r4, [r6, #8]
 8002b84:	e7a2      	b.n	8002acc <_vfiprintf_r+0x20>
 8002b86:	4b4f      	ldr	r3, [pc, #316]	; (8002cc4 <_vfiprintf_r+0x218>)
 8002b88:	429c      	cmp	r4, r3
 8002b8a:	bf08      	it	eq
 8002b8c:	68f4      	ldreq	r4, [r6, #12]
 8002b8e:	e79d      	b.n	8002acc <_vfiprintf_r+0x20>
 8002b90:	4621      	mov	r1, r4
 8002b92:	4630      	mov	r0, r6
 8002b94:	f7ff fc70 	bl	8002478 <__swsetup_r>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d09d      	beq.n	8002ad8 <_vfiprintf_r+0x2c>
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	b01d      	add	sp, #116	; 0x74
 8002ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba6:	46a8      	mov	r8, r5
 8002ba8:	e7a2      	b.n	8002af0 <_vfiprintf_r+0x44>
 8002baa:	4a44      	ldr	r2, [pc, #272]	; (8002cbc <_vfiprintf_r+0x210>)
 8002bac:	4645      	mov	r5, r8
 8002bae:	1a80      	subs	r0, r0, r2
 8002bb0:	fa0b f000 	lsl.w	r0, fp, r0
 8002bb4:	4318      	orrs	r0, r3
 8002bb6:	9004      	str	r0, [sp, #16]
 8002bb8:	e7be      	b.n	8002b38 <_vfiprintf_r+0x8c>
 8002bba:	9a03      	ldr	r2, [sp, #12]
 8002bbc:	1d11      	adds	r1, r2, #4
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	9103      	str	r1, [sp, #12]
 8002bc2:	2a00      	cmp	r2, #0
 8002bc4:	db01      	blt.n	8002bca <_vfiprintf_r+0x11e>
 8002bc6:	9207      	str	r2, [sp, #28]
 8002bc8:	e004      	b.n	8002bd4 <_vfiprintf_r+0x128>
 8002bca:	4252      	negs	r2, r2
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	9207      	str	r2, [sp, #28]
 8002bd2:	9304      	str	r3, [sp, #16]
 8002bd4:	f898 3000 	ldrb.w	r3, [r8]
 8002bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8002bda:	d10e      	bne.n	8002bfa <_vfiprintf_r+0x14e>
 8002bdc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002be0:	2b2a      	cmp	r3, #42	; 0x2a
 8002be2:	d138      	bne.n	8002c56 <_vfiprintf_r+0x1aa>
 8002be4:	9b03      	ldr	r3, [sp, #12]
 8002be6:	f108 0802 	add.w	r8, r8, #2
 8002bea:	1d1a      	adds	r2, r3, #4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	9203      	str	r2, [sp, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bfb8      	it	lt
 8002bf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bf8:	9305      	str	r3, [sp, #20]
 8002bfa:	4d33      	ldr	r5, [pc, #204]	; (8002cc8 <_vfiprintf_r+0x21c>)
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	f898 1000 	ldrb.w	r1, [r8]
 8002c02:	4628      	mov	r0, r5
 8002c04:	f000 fa9a 	bl	800313c <memchr>
 8002c08:	b140      	cbz	r0, 8002c1c <_vfiprintf_r+0x170>
 8002c0a:	2340      	movs	r3, #64	; 0x40
 8002c0c:	1b40      	subs	r0, r0, r5
 8002c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8002c12:	9b04      	ldr	r3, [sp, #16]
 8002c14:	f108 0801 	add.w	r8, r8, #1
 8002c18:	4303      	orrs	r3, r0
 8002c1a:	9304      	str	r3, [sp, #16]
 8002c1c:	f898 1000 	ldrb.w	r1, [r8]
 8002c20:	2206      	movs	r2, #6
 8002c22:	482a      	ldr	r0, [pc, #168]	; (8002ccc <_vfiprintf_r+0x220>)
 8002c24:	f108 0701 	add.w	r7, r8, #1
 8002c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c2c:	f000 fa86 	bl	800313c <memchr>
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d037      	beq.n	8002ca4 <_vfiprintf_r+0x1f8>
 8002c34:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <_vfiprintf_r+0x224>)
 8002c36:	bb1b      	cbnz	r3, 8002c80 <_vfiprintf_r+0x1d4>
 8002c38:	9b03      	ldr	r3, [sp, #12]
 8002c3a:	3307      	adds	r3, #7
 8002c3c:	f023 0307 	bic.w	r3, r3, #7
 8002c40:	3308      	adds	r3, #8
 8002c42:	9303      	str	r3, [sp, #12]
 8002c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c46:	444b      	add	r3, r9
 8002c48:	9309      	str	r3, [sp, #36]	; 0x24
 8002c4a:	e750      	b.n	8002aee <_vfiprintf_r+0x42>
 8002c4c:	fb05 3202 	mla	r2, r5, r2, r3
 8002c50:	2001      	movs	r0, #1
 8002c52:	4688      	mov	r8, r1
 8002c54:	e78a      	b.n	8002b6c <_vfiprintf_r+0xc0>
 8002c56:	2300      	movs	r3, #0
 8002c58:	250a      	movs	r5, #10
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f108 0801 	add.w	r8, r8, #1
 8002c60:	9305      	str	r3, [sp, #20]
 8002c62:	4640      	mov	r0, r8
 8002c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c68:	3a30      	subs	r2, #48	; 0x30
 8002c6a:	2a09      	cmp	r2, #9
 8002c6c:	d903      	bls.n	8002c76 <_vfiprintf_r+0x1ca>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0c3      	beq.n	8002bfa <_vfiprintf_r+0x14e>
 8002c72:	9105      	str	r1, [sp, #20]
 8002c74:	e7c1      	b.n	8002bfa <_vfiprintf_r+0x14e>
 8002c76:	fb05 2101 	mla	r1, r5, r1, r2
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	4680      	mov	r8, r0
 8002c7e:	e7f0      	b.n	8002c62 <_vfiprintf_r+0x1b6>
 8002c80:	ab03      	add	r3, sp, #12
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	4622      	mov	r2, r4
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <_vfiprintf_r+0x228>)
 8002c88:	a904      	add	r1, sp, #16
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f3af 8000 	nop.w
 8002c90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c94:	4681      	mov	r9, r0
 8002c96:	d1d5      	bne.n	8002c44 <_vfiprintf_r+0x198>
 8002c98:	89a3      	ldrh	r3, [r4, #12]
 8002c9a:	065b      	lsls	r3, r3, #25
 8002c9c:	f53f af7e 	bmi.w	8002b9c <_vfiprintf_r+0xf0>
 8002ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ca2:	e77d      	b.n	8002ba0 <_vfiprintf_r+0xf4>
 8002ca4:	ab03      	add	r3, sp, #12
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4622      	mov	r2, r4
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <_vfiprintf_r+0x228>)
 8002cac:	a904      	add	r1, sp, #16
 8002cae:	4630      	mov	r0, r6
 8002cb0:	f000 f888 	bl	8002dc4 <_printf_i>
 8002cb4:	e7ec      	b.n	8002c90 <_vfiprintf_r+0x1e4>
 8002cb6:	bf00      	nop
 8002cb8:	080032a4 	.word	0x080032a4
 8002cbc:	080032e4 	.word	0x080032e4
 8002cc0:	080032c4 	.word	0x080032c4
 8002cc4:	08003284 	.word	0x08003284
 8002cc8:	080032ea 	.word	0x080032ea
 8002ccc:	080032ee 	.word	0x080032ee
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	08002a87 	.word	0x08002a87

08002cd8 <_printf_common>:
 8002cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cdc:	4691      	mov	r9, r2
 8002cde:	461f      	mov	r7, r3
 8002ce0:	688a      	ldr	r2, [r1, #8]
 8002ce2:	690b      	ldr	r3, [r1, #16]
 8002ce4:	4606      	mov	r6, r0
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	bfb8      	it	lt
 8002cea:	4613      	movlt	r3, r2
 8002cec:	f8c9 3000 	str.w	r3, [r9]
 8002cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cf4:	460c      	mov	r4, r1
 8002cf6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cfa:	b112      	cbz	r2, 8002d02 <_printf_common+0x2a>
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f8c9 3000 	str.w	r3, [r9]
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	0699      	lsls	r1, r3, #26
 8002d06:	bf42      	ittt	mi
 8002d08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d0c:	3302      	addmi	r3, #2
 8002d0e:	f8c9 3000 	strmi.w	r3, [r9]
 8002d12:	6825      	ldr	r5, [r4, #0]
 8002d14:	f015 0506 	ands.w	r5, r5, #6
 8002d18:	d107      	bne.n	8002d2a <_printf_common+0x52>
 8002d1a:	f104 0a19 	add.w	sl, r4, #25
 8002d1e:	68e3      	ldr	r3, [r4, #12]
 8002d20:	f8d9 2000 	ldr.w	r2, [r9]
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	42ab      	cmp	r3, r5
 8002d28:	dc29      	bgt.n	8002d7e <_printf_common+0xa6>
 8002d2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d2e:	6822      	ldr	r2, [r4, #0]
 8002d30:	3300      	adds	r3, #0
 8002d32:	bf18      	it	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	0692      	lsls	r2, r2, #26
 8002d38:	d42e      	bmi.n	8002d98 <_printf_common+0xc0>
 8002d3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d3e:	4639      	mov	r1, r7
 8002d40:	4630      	mov	r0, r6
 8002d42:	47c0      	blx	r8
 8002d44:	3001      	adds	r0, #1
 8002d46:	d021      	beq.n	8002d8c <_printf_common+0xb4>
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	68e5      	ldr	r5, [r4, #12]
 8002d4c:	f003 0306 	and.w	r3, r3, #6
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	bf18      	it	ne
 8002d54:	2500      	movne	r5, #0
 8002d56:	f8d9 2000 	ldr.w	r2, [r9]
 8002d5a:	f04f 0900 	mov.w	r9, #0
 8002d5e:	bf08      	it	eq
 8002d60:	1aad      	subeq	r5, r5, r2
 8002d62:	68a3      	ldr	r3, [r4, #8]
 8002d64:	6922      	ldr	r2, [r4, #16]
 8002d66:	bf08      	it	eq
 8002d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	bfc4      	itt	gt
 8002d70:	1a9b      	subgt	r3, r3, r2
 8002d72:	18ed      	addgt	r5, r5, r3
 8002d74:	341a      	adds	r4, #26
 8002d76:	454d      	cmp	r5, r9
 8002d78:	d11a      	bne.n	8002db0 <_printf_common+0xd8>
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	e008      	b.n	8002d90 <_printf_common+0xb8>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	4652      	mov	r2, sl
 8002d82:	4639      	mov	r1, r7
 8002d84:	4630      	mov	r0, r6
 8002d86:	47c0      	blx	r8
 8002d88:	3001      	adds	r0, #1
 8002d8a:	d103      	bne.n	8002d94 <_printf_common+0xbc>
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d94:	3501      	adds	r5, #1
 8002d96:	e7c2      	b.n	8002d1e <_printf_common+0x46>
 8002d98:	2030      	movs	r0, #48	; 0x30
 8002d9a:	18e1      	adds	r1, r4, r3
 8002d9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002da6:	4422      	add	r2, r4
 8002da8:	3302      	adds	r3, #2
 8002daa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dae:	e7c4      	b.n	8002d3a <_printf_common+0x62>
 8002db0:	2301      	movs	r3, #1
 8002db2:	4622      	mov	r2, r4
 8002db4:	4639      	mov	r1, r7
 8002db6:	4630      	mov	r0, r6
 8002db8:	47c0      	blx	r8
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d0e6      	beq.n	8002d8c <_printf_common+0xb4>
 8002dbe:	f109 0901 	add.w	r9, r9, #1
 8002dc2:	e7d8      	b.n	8002d76 <_printf_common+0x9e>

08002dc4 <_printf_i>:
 8002dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002dcc:	460c      	mov	r4, r1
 8002dce:	7e09      	ldrb	r1, [r1, #24]
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	296e      	cmp	r1, #110	; 0x6e
 8002dd4:	4617      	mov	r7, r2
 8002dd6:	4606      	mov	r6, r0
 8002dd8:	4698      	mov	r8, r3
 8002dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ddc:	f000 80b3 	beq.w	8002f46 <_printf_i+0x182>
 8002de0:	d822      	bhi.n	8002e28 <_printf_i+0x64>
 8002de2:	2963      	cmp	r1, #99	; 0x63
 8002de4:	d036      	beq.n	8002e54 <_printf_i+0x90>
 8002de6:	d80a      	bhi.n	8002dfe <_printf_i+0x3a>
 8002de8:	2900      	cmp	r1, #0
 8002dea:	f000 80b9 	beq.w	8002f60 <_printf_i+0x19c>
 8002dee:	2958      	cmp	r1, #88	; 0x58
 8002df0:	f000 8083 	beq.w	8002efa <_printf_i+0x136>
 8002df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002df8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002dfc:	e032      	b.n	8002e64 <_printf_i+0xa0>
 8002dfe:	2964      	cmp	r1, #100	; 0x64
 8002e00:	d001      	beq.n	8002e06 <_printf_i+0x42>
 8002e02:	2969      	cmp	r1, #105	; 0x69
 8002e04:	d1f6      	bne.n	8002df4 <_printf_i+0x30>
 8002e06:	6820      	ldr	r0, [r4, #0]
 8002e08:	6813      	ldr	r3, [r2, #0]
 8002e0a:	0605      	lsls	r5, r0, #24
 8002e0c:	f103 0104 	add.w	r1, r3, #4
 8002e10:	d52a      	bpl.n	8002e68 <_printf_i+0xa4>
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6011      	str	r1, [r2, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da03      	bge.n	8002e22 <_printf_i+0x5e>
 8002e1a:	222d      	movs	r2, #45	; 0x2d
 8002e1c:	425b      	negs	r3, r3
 8002e1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e22:	486f      	ldr	r0, [pc, #444]	; (8002fe0 <_printf_i+0x21c>)
 8002e24:	220a      	movs	r2, #10
 8002e26:	e039      	b.n	8002e9c <_printf_i+0xd8>
 8002e28:	2973      	cmp	r1, #115	; 0x73
 8002e2a:	f000 809d 	beq.w	8002f68 <_printf_i+0x1a4>
 8002e2e:	d808      	bhi.n	8002e42 <_printf_i+0x7e>
 8002e30:	296f      	cmp	r1, #111	; 0x6f
 8002e32:	d020      	beq.n	8002e76 <_printf_i+0xb2>
 8002e34:	2970      	cmp	r1, #112	; 0x70
 8002e36:	d1dd      	bne.n	8002df4 <_printf_i+0x30>
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	f043 0320 	orr.w	r3, r3, #32
 8002e3e:	6023      	str	r3, [r4, #0]
 8002e40:	e003      	b.n	8002e4a <_printf_i+0x86>
 8002e42:	2975      	cmp	r1, #117	; 0x75
 8002e44:	d017      	beq.n	8002e76 <_printf_i+0xb2>
 8002e46:	2978      	cmp	r1, #120	; 0x78
 8002e48:	d1d4      	bne.n	8002df4 <_printf_i+0x30>
 8002e4a:	2378      	movs	r3, #120	; 0x78
 8002e4c:	4865      	ldr	r0, [pc, #404]	; (8002fe4 <_printf_i+0x220>)
 8002e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e52:	e055      	b.n	8002f00 <_printf_i+0x13c>
 8002e54:	6813      	ldr	r3, [r2, #0]
 8002e56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e5a:	1d19      	adds	r1, r3, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6011      	str	r1, [r2, #0]
 8002e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e64:	2301      	movs	r3, #1
 8002e66:	e08c      	b.n	8002f82 <_printf_i+0x1be>
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e6e:	6011      	str	r1, [r2, #0]
 8002e70:	bf18      	it	ne
 8002e72:	b21b      	sxthne	r3, r3
 8002e74:	e7cf      	b.n	8002e16 <_printf_i+0x52>
 8002e76:	6813      	ldr	r3, [r2, #0]
 8002e78:	6825      	ldr	r5, [r4, #0]
 8002e7a:	1d18      	adds	r0, r3, #4
 8002e7c:	6010      	str	r0, [r2, #0]
 8002e7e:	0628      	lsls	r0, r5, #24
 8002e80:	d501      	bpl.n	8002e86 <_printf_i+0xc2>
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	e002      	b.n	8002e8c <_printf_i+0xc8>
 8002e86:	0668      	lsls	r0, r5, #25
 8002e88:	d5fb      	bpl.n	8002e82 <_printf_i+0xbe>
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	296f      	cmp	r1, #111	; 0x6f
 8002e8e:	bf14      	ite	ne
 8002e90:	220a      	movne	r2, #10
 8002e92:	2208      	moveq	r2, #8
 8002e94:	4852      	ldr	r0, [pc, #328]	; (8002fe0 <_printf_i+0x21c>)
 8002e96:	2100      	movs	r1, #0
 8002e98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e9c:	6865      	ldr	r5, [r4, #4]
 8002e9e:	2d00      	cmp	r5, #0
 8002ea0:	60a5      	str	r5, [r4, #8]
 8002ea2:	f2c0 8095 	blt.w	8002fd0 <_printf_i+0x20c>
 8002ea6:	6821      	ldr	r1, [r4, #0]
 8002ea8:	f021 0104 	bic.w	r1, r1, #4
 8002eac:	6021      	str	r1, [r4, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d13d      	bne.n	8002f2e <_printf_i+0x16a>
 8002eb2:	2d00      	cmp	r5, #0
 8002eb4:	f040 808e 	bne.w	8002fd4 <_printf_i+0x210>
 8002eb8:	4665      	mov	r5, ip
 8002eba:	2a08      	cmp	r2, #8
 8002ebc:	d10b      	bne.n	8002ed6 <_printf_i+0x112>
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	07db      	lsls	r3, r3, #31
 8002ec2:	d508      	bpl.n	8002ed6 <_printf_i+0x112>
 8002ec4:	6923      	ldr	r3, [r4, #16]
 8002ec6:	6862      	ldr	r2, [r4, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	bfde      	ittt	le
 8002ecc:	2330      	movle	r3, #48	; 0x30
 8002ece:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ed2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ed6:	ebac 0305 	sub.w	r3, ip, r5
 8002eda:	6123      	str	r3, [r4, #16]
 8002edc:	f8cd 8000 	str.w	r8, [sp]
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	aa03      	add	r2, sp, #12
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	f7ff fef6 	bl	8002cd8 <_printf_common>
 8002eec:	3001      	adds	r0, #1
 8002eee:	d14d      	bne.n	8002f8c <_printf_i+0x1c8>
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	b005      	add	sp, #20
 8002ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002efa:	4839      	ldr	r0, [pc, #228]	; (8002fe0 <_printf_i+0x21c>)
 8002efc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002f00:	6813      	ldr	r3, [r2, #0]
 8002f02:	6821      	ldr	r1, [r4, #0]
 8002f04:	1d1d      	adds	r5, r3, #4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6015      	str	r5, [r2, #0]
 8002f0a:	060a      	lsls	r2, r1, #24
 8002f0c:	d50b      	bpl.n	8002f26 <_printf_i+0x162>
 8002f0e:	07ca      	lsls	r2, r1, #31
 8002f10:	bf44      	itt	mi
 8002f12:	f041 0120 	orrmi.w	r1, r1, #32
 8002f16:	6021      	strmi	r1, [r4, #0]
 8002f18:	b91b      	cbnz	r3, 8002f22 <_printf_i+0x15e>
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	f022 0220 	bic.w	r2, r2, #32
 8002f20:	6022      	str	r2, [r4, #0]
 8002f22:	2210      	movs	r2, #16
 8002f24:	e7b7      	b.n	8002e96 <_printf_i+0xd2>
 8002f26:	064d      	lsls	r5, r1, #25
 8002f28:	bf48      	it	mi
 8002f2a:	b29b      	uxthmi	r3, r3
 8002f2c:	e7ef      	b.n	8002f0e <_printf_i+0x14a>
 8002f2e:	4665      	mov	r5, ip
 8002f30:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f34:	fb02 3311 	mls	r3, r2, r1, r3
 8002f38:	5cc3      	ldrb	r3, [r0, r3]
 8002f3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f3e:	460b      	mov	r3, r1
 8002f40:	2900      	cmp	r1, #0
 8002f42:	d1f5      	bne.n	8002f30 <_printf_i+0x16c>
 8002f44:	e7b9      	b.n	8002eba <_printf_i+0xf6>
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	6825      	ldr	r5, [r4, #0]
 8002f4a:	1d18      	adds	r0, r3, #4
 8002f4c:	6961      	ldr	r1, [r4, #20]
 8002f4e:	6010      	str	r0, [r2, #0]
 8002f50:	0628      	lsls	r0, r5, #24
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	d501      	bpl.n	8002f5a <_printf_i+0x196>
 8002f56:	6019      	str	r1, [r3, #0]
 8002f58:	e002      	b.n	8002f60 <_printf_i+0x19c>
 8002f5a:	066a      	lsls	r2, r5, #25
 8002f5c:	d5fb      	bpl.n	8002f56 <_printf_i+0x192>
 8002f5e:	8019      	strh	r1, [r3, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	4665      	mov	r5, ip
 8002f64:	6123      	str	r3, [r4, #16]
 8002f66:	e7b9      	b.n	8002edc <_printf_i+0x118>
 8002f68:	6813      	ldr	r3, [r2, #0]
 8002f6a:	1d19      	adds	r1, r3, #4
 8002f6c:	6011      	str	r1, [r2, #0]
 8002f6e:	681d      	ldr	r5, [r3, #0]
 8002f70:	6862      	ldr	r2, [r4, #4]
 8002f72:	2100      	movs	r1, #0
 8002f74:	4628      	mov	r0, r5
 8002f76:	f000 f8e1 	bl	800313c <memchr>
 8002f7a:	b108      	cbz	r0, 8002f80 <_printf_i+0x1bc>
 8002f7c:	1b40      	subs	r0, r0, r5
 8002f7e:	6060      	str	r0, [r4, #4]
 8002f80:	6863      	ldr	r3, [r4, #4]
 8002f82:	6123      	str	r3, [r4, #16]
 8002f84:	2300      	movs	r3, #0
 8002f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f8a:	e7a7      	b.n	8002edc <_printf_i+0x118>
 8002f8c:	6923      	ldr	r3, [r4, #16]
 8002f8e:	462a      	mov	r2, r5
 8002f90:	4639      	mov	r1, r7
 8002f92:	4630      	mov	r0, r6
 8002f94:	47c0      	blx	r8
 8002f96:	3001      	adds	r0, #1
 8002f98:	d0aa      	beq.n	8002ef0 <_printf_i+0x12c>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	079b      	lsls	r3, r3, #30
 8002f9e:	d413      	bmi.n	8002fc8 <_printf_i+0x204>
 8002fa0:	68e0      	ldr	r0, [r4, #12]
 8002fa2:	9b03      	ldr	r3, [sp, #12]
 8002fa4:	4298      	cmp	r0, r3
 8002fa6:	bfb8      	it	lt
 8002fa8:	4618      	movlt	r0, r3
 8002faa:	e7a3      	b.n	8002ef4 <_printf_i+0x130>
 8002fac:	2301      	movs	r3, #1
 8002fae:	464a      	mov	r2, r9
 8002fb0:	4639      	mov	r1, r7
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	47c0      	blx	r8
 8002fb6:	3001      	adds	r0, #1
 8002fb8:	d09a      	beq.n	8002ef0 <_printf_i+0x12c>
 8002fba:	3501      	adds	r5, #1
 8002fbc:	68e3      	ldr	r3, [r4, #12]
 8002fbe:	9a03      	ldr	r2, [sp, #12]
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	42ab      	cmp	r3, r5
 8002fc4:	dcf2      	bgt.n	8002fac <_printf_i+0x1e8>
 8002fc6:	e7eb      	b.n	8002fa0 <_printf_i+0x1dc>
 8002fc8:	2500      	movs	r5, #0
 8002fca:	f104 0919 	add.w	r9, r4, #25
 8002fce:	e7f5      	b.n	8002fbc <_printf_i+0x1f8>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ac      	bne.n	8002f2e <_printf_i+0x16a>
 8002fd4:	7803      	ldrb	r3, [r0, #0]
 8002fd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fde:	e76c      	b.n	8002eba <_printf_i+0xf6>
 8002fe0:	080032f5 	.word	0x080032f5
 8002fe4:	08003306 	.word	0x08003306

08002fe8 <_sbrk_r>:
 8002fe8:	b538      	push	{r3, r4, r5, lr}
 8002fea:	2300      	movs	r3, #0
 8002fec:	4c05      	ldr	r4, [pc, #20]	; (8003004 <_sbrk_r+0x1c>)
 8002fee:	4605      	mov	r5, r0
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	6023      	str	r3, [r4, #0]
 8002ff4:	f7fd fac0 	bl	8000578 <_sbrk>
 8002ff8:	1c43      	adds	r3, r0, #1
 8002ffa:	d102      	bne.n	8003002 <_sbrk_r+0x1a>
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	b103      	cbz	r3, 8003002 <_sbrk_r+0x1a>
 8003000:	602b      	str	r3, [r5, #0]
 8003002:	bd38      	pop	{r3, r4, r5, pc}
 8003004:	200001c8 	.word	0x200001c8

08003008 <__sread>:
 8003008:	b510      	push	{r4, lr}
 800300a:	460c      	mov	r4, r1
 800300c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003010:	f000 f8a4 	bl	800315c <_read_r>
 8003014:	2800      	cmp	r0, #0
 8003016:	bfab      	itete	ge
 8003018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800301a:	89a3      	ldrhlt	r3, [r4, #12]
 800301c:	181b      	addge	r3, r3, r0
 800301e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003022:	bfac      	ite	ge
 8003024:	6563      	strge	r3, [r4, #84]	; 0x54
 8003026:	81a3      	strhlt	r3, [r4, #12]
 8003028:	bd10      	pop	{r4, pc}

0800302a <__swrite>:
 800302a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800302e:	461f      	mov	r7, r3
 8003030:	898b      	ldrh	r3, [r1, #12]
 8003032:	4605      	mov	r5, r0
 8003034:	05db      	lsls	r3, r3, #23
 8003036:	460c      	mov	r4, r1
 8003038:	4616      	mov	r6, r2
 800303a:	d505      	bpl.n	8003048 <__swrite+0x1e>
 800303c:	2302      	movs	r3, #2
 800303e:	2200      	movs	r2, #0
 8003040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003044:	f000 f868 	bl	8003118 <_lseek_r>
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	4632      	mov	r2, r6
 800304c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003050:	81a3      	strh	r3, [r4, #12]
 8003052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003056:	463b      	mov	r3, r7
 8003058:	4628      	mov	r0, r5
 800305a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800305e:	f000 b817 	b.w	8003090 <_write_r>

08003062 <__sseek>:
 8003062:	b510      	push	{r4, lr}
 8003064:	460c      	mov	r4, r1
 8003066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800306a:	f000 f855 	bl	8003118 <_lseek_r>
 800306e:	1c43      	adds	r3, r0, #1
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	bf15      	itete	ne
 8003074:	6560      	strne	r0, [r4, #84]	; 0x54
 8003076:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800307a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800307e:	81a3      	strheq	r3, [r4, #12]
 8003080:	bf18      	it	ne
 8003082:	81a3      	strhne	r3, [r4, #12]
 8003084:	bd10      	pop	{r4, pc}

08003086 <__sclose>:
 8003086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800308a:	f000 b813 	b.w	80030b4 <_close_r>
	...

08003090 <_write_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4605      	mov	r5, r0
 8003094:	4608      	mov	r0, r1
 8003096:	4611      	mov	r1, r2
 8003098:	2200      	movs	r2, #0
 800309a:	4c05      	ldr	r4, [pc, #20]	; (80030b0 <_write_r+0x20>)
 800309c:	6022      	str	r2, [r4, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	f7fd fa1d 	bl	80004de <_write>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d102      	bne.n	80030ae <_write_r+0x1e>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	b103      	cbz	r3, 80030ae <_write_r+0x1e>
 80030ac:	602b      	str	r3, [r5, #0]
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	200001c8 	.word	0x200001c8

080030b4 <_close_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	2300      	movs	r3, #0
 80030b8:	4c05      	ldr	r4, [pc, #20]	; (80030d0 <_close_r+0x1c>)
 80030ba:	4605      	mov	r5, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	f7fd fa29 	bl	8000516 <_close>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_close_r+0x1a>
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_close_r+0x1a>
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	200001c8 	.word	0x200001c8

080030d4 <_fstat_r>:
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	2300      	movs	r3, #0
 80030d8:	4c06      	ldr	r4, [pc, #24]	; (80030f4 <_fstat_r+0x20>)
 80030da:	4605      	mov	r5, r0
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	f7fd fa23 	bl	800052c <_fstat>
 80030e6:	1c43      	adds	r3, r0, #1
 80030e8:	d102      	bne.n	80030f0 <_fstat_r+0x1c>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	b103      	cbz	r3, 80030f0 <_fstat_r+0x1c>
 80030ee:	602b      	str	r3, [r5, #0]
 80030f0:	bd38      	pop	{r3, r4, r5, pc}
 80030f2:	bf00      	nop
 80030f4:	200001c8 	.word	0x200001c8

080030f8 <_isatty_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	2300      	movs	r3, #0
 80030fc:	4c05      	ldr	r4, [pc, #20]	; (8003114 <_isatty_r+0x1c>)
 80030fe:	4605      	mov	r5, r0
 8003100:	4608      	mov	r0, r1
 8003102:	6023      	str	r3, [r4, #0]
 8003104:	f7fd fa21 	bl	800054a <_isatty>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d102      	bne.n	8003112 <_isatty_r+0x1a>
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	b103      	cbz	r3, 8003112 <_isatty_r+0x1a>
 8003110:	602b      	str	r3, [r5, #0]
 8003112:	bd38      	pop	{r3, r4, r5, pc}
 8003114:	200001c8 	.word	0x200001c8

08003118 <_lseek_r>:
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	4605      	mov	r5, r0
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	2200      	movs	r2, #0
 8003122:	4c05      	ldr	r4, [pc, #20]	; (8003138 <_lseek_r+0x20>)
 8003124:	6022      	str	r2, [r4, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	f7fd fa19 	bl	800055e <_lseek>
 800312c:	1c43      	adds	r3, r0, #1
 800312e:	d102      	bne.n	8003136 <_lseek_r+0x1e>
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	b103      	cbz	r3, 8003136 <_lseek_r+0x1e>
 8003134:	602b      	str	r3, [r5, #0]
 8003136:	bd38      	pop	{r3, r4, r5, pc}
 8003138:	200001c8 	.word	0x200001c8

0800313c <memchr>:
 800313c:	b510      	push	{r4, lr}
 800313e:	b2c9      	uxtb	r1, r1
 8003140:	4402      	add	r2, r0
 8003142:	4290      	cmp	r0, r2
 8003144:	4603      	mov	r3, r0
 8003146:	d101      	bne.n	800314c <memchr+0x10>
 8003148:	2300      	movs	r3, #0
 800314a:	e003      	b.n	8003154 <memchr+0x18>
 800314c:	781c      	ldrb	r4, [r3, #0]
 800314e:	3001      	adds	r0, #1
 8003150:	428c      	cmp	r4, r1
 8003152:	d1f6      	bne.n	8003142 <memchr+0x6>
 8003154:	4618      	mov	r0, r3
 8003156:	bd10      	pop	{r4, pc}

08003158 <__malloc_lock>:
 8003158:	4770      	bx	lr

0800315a <__malloc_unlock>:
 800315a:	4770      	bx	lr

0800315c <_read_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4605      	mov	r5, r0
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	2200      	movs	r2, #0
 8003166:	4c05      	ldr	r4, [pc, #20]	; (800317c <_read_r+0x20>)
 8003168:	6022      	str	r2, [r4, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	f7fd f99a 	bl	80004a4 <_read>
 8003170:	1c43      	adds	r3, r0, #1
 8003172:	d102      	bne.n	800317a <_read_r+0x1e>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	b103      	cbz	r3, 800317a <_read_r+0x1e>
 8003178:	602b      	str	r3, [r5, #0]
 800317a:	bd38      	pop	{r3, r4, r5, pc}
 800317c:	200001c8 	.word	0x200001c8

08003180 <_init>:
 8003180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003182:	bf00      	nop
 8003184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003186:	bc08      	pop	{r3}
 8003188:	469e      	mov	lr, r3
 800318a:	4770      	bx	lr

0800318c <_fini>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	bf00      	nop
 8003190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003192:	bc08      	pop	{r3}
 8003194:	469e      	mov	lr, r3
 8003196:	4770      	bx	lr
