
NUCLEO_WIFI_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c00  08003c00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003c00  08003c00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c00  08003c00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  08003c78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08003c78  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbf2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021fa  00000000  00000000  0002cc8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  0002ee88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb0  00000000  00000000  0002fb60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015b8b  00000000  00000000  00030710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a761  00000000  00000000  0004629b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072e47  00000000  00000000  000509fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3843  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b18  00000000  00000000  000c38c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003aa8 	.word	0x08003aa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003aa8 	.word	0x08003aa8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4815      	ldr	r0, [pc, #84]	; (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f001 f889 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f000 ff22 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001e4:	2320      	movs	r3, #32
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 ff14 	bl	8001028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	; 0x28
 8000206:	f000 fe62 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	; 0x28
 800020c:	f000 fe7b 	bl	8000f06 <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 fcf3 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f875 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f7ff ff89 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800023a:	f000 faed 	bl	8000818 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800023e:	f000 fa4f 	bl	80006e0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000242:	f000 fabf 	bl	80007c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000246:	f000 fb11 	bl	800086c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  Server_Init();
 800024a:	f000 fc2d 	bl	8000aa8 <Server_Init>

  //Server_SentTo_Client("abcdeagfadgfdagfdsgfdshgfdsgfdsg");

  HAL_Delay(500);
 800024e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000252:	f000 fd43 	bl	8000cdc <HAL_Delay>
  HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 8000256:	2201      	movs	r2, #1
 8000258:	4928      	ldr	r1, [pc, #160]	; (80002fc <main+0xd4>)
 800025a:	4829      	ldr	r0, [pc, #164]	; (8000300 <main+0xd8>)
 800025c:	f002 f8fa 	bl	8002454 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000260:	4828      	ldr	r0, [pc, #160]	; (8000304 <main+0xdc>)
 8000262:	f001 fcbc 	bl	8001bde <HAL_TIM_Base_Start_IT>
  {
	  //if(Client_Connect_Flag == 1) {
	//	  Server_SentTo_Client("i know you connected me");
	 // }

	  if(Wifi_Get_Command_Flag == 1) {
 8000266:	4b28      	ldr	r3, [pc, #160]	; (8000308 <main+0xe0>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b01      	cmp	r3, #1
 800026c:	d108      	bne.n	8000280 <main+0x58>
		  /*收到数据会拉起此标志，在此写业务代码 Wifi_Command_Buffer中为收到的数据*/
		  //此时Wifi_Command_Buffer的尾部为\r\0   指令匹配时需要注意
		  Server_SentTo_Client("i got");
 800026e:	4827      	ldr	r0, [pc, #156]	; (800030c <main+0xe4>)
 8000270:	f000 fc4a 	bl	8000b08 <Server_SentTo_Client>
		  Server_SentTo_Client(Wifi_Command_Buffer);
 8000274:	4826      	ldr	r0, [pc, #152]	; (8000310 <main+0xe8>)
 8000276:	f000 fc47 	bl	8000b08 <Server_SentTo_Client>
		  Wifi_Get_Command_Flag = 0;
 800027a:	4b23      	ldr	r3, [pc, #140]	; (8000308 <main+0xe0>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
	  }
	  if(Rx_Line_Flag == 1) {
 8000280:	4b24      	ldr	r3, [pc, #144]	; (8000314 <main+0xec>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d1ee      	bne.n	8000266 <main+0x3e>
		  	  if(Wifi_Get_Command_Flag == 0) {
 8000288:	4b1f      	ldr	r3, [pc, #124]	; (8000308 <main+0xe0>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d130      	bne.n	80002f2 <main+0xca>
		  		  Wifi_Command_Buffer[0] = Uart1_Rx_Buffer[0];
 8000290:	4b21      	ldr	r3, [pc, #132]	; (8000318 <main+0xf0>)
 8000292:	781a      	ldrb	r2, [r3, #0]
 8000294:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <main+0xe8>)
 8000296:	701a      	strb	r2, [r3, #0]
		  		  Wifi_Command_Buffer[1] = Uart1_Rx_Buffer[1];
 8000298:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <main+0xf0>)
 800029a:	785a      	ldrb	r2, [r3, #1]
 800029c:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <main+0xe8>)
 800029e:	705a      	strb	r2, [r3, #1]
		  		  Wifi_Command_Buffer[2] = Uart1_Rx_Buffer[2];
 80002a0:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <main+0xf0>)
 80002a2:	789a      	ldrb	r2, [r3, #2]
 80002a4:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <main+0xe8>)
 80002a6:	709a      	strb	r2, [r3, #2]
		  		  Wifi_Command_Buffer[3] = Uart1_Rx_Buffer[3];
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <main+0xf0>)
 80002aa:	78da      	ldrb	r2, [r3, #3]
 80002ac:	4b18      	ldr	r3, [pc, #96]	; (8000310 <main+0xe8>)
 80002ae:	70da      	strb	r2, [r3, #3]
		  		  Wifi_Command_Buffer[4] = '\0';
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <main+0xe8>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	711a      	strb	r2, [r3, #4]
		  	  if(Strcmp(Wifi_Command_Buffer, "+IPD") == 1) {
 80002b6:	4919      	ldr	r1, [pc, #100]	; (800031c <main+0xf4>)
 80002b8:	4815      	ldr	r0, [pc, #84]	; (8000310 <main+0xe8>)
 80002ba:	f000 fc81 	bl	8000bc0 <Strcmp>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d116      	bne.n	80002f2 <main+0xca>
			  	  //Strcpy(Wifi_Command_Buffer, Uart1_Rx_Buffer);
			  	  Wifi_Get_Command_Flag = 1;
 80002c4:	4b10      	ldr	r3, [pc, #64]	; (8000308 <main+0xe0>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	701a      	strb	r2, [r3, #0]
			  	  for(uint8_t i = 0; ; i++) {
 80002ca:	2300      	movs	r3, #0
 80002cc:	71fb      	strb	r3, [r7, #7]
			  		  if(Uart1_Rx_Buffer[i] == ':') {
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4a11      	ldr	r2, [pc, #68]	; (8000318 <main+0xf0>)
 80002d2:	5cd3      	ldrb	r3, [r2, r3]
 80002d4:	2b3a      	cmp	r3, #58	; 0x3a
 80002d6:	d108      	bne.n	80002ea <main+0xc2>
			  			  Strcpy(Wifi_Command_Buffer, Uart1_Rx_Buffer + i + 1);
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	3301      	adds	r3, #1
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <main+0xf0>)
 80002de:	4413      	add	r3, r2
 80002e0:	4619      	mov	r1, r3
 80002e2:	480b      	ldr	r0, [pc, #44]	; (8000310 <main+0xe8>)
 80002e4:	f000 fc49 	bl	8000b7a <Strcpy>
			  			  break;
 80002e8:	e003      	b.n	80002f2 <main+0xca>
			  	  for(uint8_t i = 0; ; i++) {
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	3301      	adds	r3, #1
 80002ee:	71fb      	strb	r3, [r7, #7]
			  		  if(Uart1_Rx_Buffer[i] == ':') {
 80002f0:	e7ed      	b.n	80002ce <main+0xa6>

		  	  }
		  }
		  //printf("OK,i got a line is \n");
		  //printf("OK,i got a line is %s\n", Uart1_Rx_Buffer);
		  Rx_Line_Flag = 0;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <main+0xec>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]
	  if(Wifi_Get_Command_Flag == 1) {
 80002f8:	e7b5      	b.n	8000266 <main+0x3e>
 80002fa:	bf00      	nop
 80002fc:	20000164 	.word	0x20000164
 8000300:	200001e8 	.word	0x200001e8
 8000304:	20000168 	.word	0x20000168
 8000308:	20000156 	.word	0x20000156
 800030c:	08003ac0 	.word	0x08003ac0
 8000310:	200000f0 	.word	0x200000f0
 8000314:	20000155 	.word	0x20000155
 8000318:	2000008c 	.word	0x2000008c
 800031c:	08003ac8 	.word	0x08003ac8

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b090      	sub	sp, #64	; 0x40
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0318 	add.w	r3, r7, #24
 800032a:	2228      	movs	r2, #40	; 0x28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f002 fc60 	bl	8002bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000342:	2302      	movs	r3, #2
 8000344:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000346:	2301      	movs	r3, #1
 8000348:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034a:	2310      	movs	r3, #16
 800034c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	2302      	movs	r3, #2
 8000350:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000352:	2300      	movs	r3, #0
 8000354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000356:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800035a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035c:	f107 0318 	add.w	r3, r7, #24
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fff5 	bl	8001350 <HAL_RCC_OscConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800036c:	f000 f870 	bl	8000450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000370:	230f      	movs	r3, #15
 8000372:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000374:	2302      	movs	r3, #2
 8000376:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2102      	movs	r1, #2
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fa60 	bl	8001850 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000396:	f000 f85b 	bl	8000450 <Error_Handler>
  }
}
 800039a:	bf00      	nop
 800039c:	3740      	adds	r7, #64	; 0x40
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

//UART接收中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance) {
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	4b1a      	ldr	r3, [pc, #104]	; (800041c <HAL_UART_RxCpltCallback+0x78>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d12d      	bne.n	8000414 <HAL_UART_RxCpltCallback+0x70>
		if(Rx_Line_Flag == 0) {
 80003b8:	4b19      	ldr	r3, [pc, #100]	; (8000420 <HAL_UART_RxCpltCallback+0x7c>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d124      	bne.n	800040a <HAL_UART_RxCpltCallback+0x66>
			if(Uart1_Rx_Char == '\n') {
 80003c0:	4b18      	ldr	r3, [pc, #96]	; (8000424 <HAL_UART_RxCpltCallback+0x80>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b0a      	cmp	r3, #10
 80003c6:	d113      	bne.n	80003f0 <HAL_UART_RxCpltCallback+0x4c>
				Uart1_Rx_Buffer[Rx_Buffer_Size] = '\0';
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <HAL_UART_RxCpltCallback+0x84>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	461a      	mov	r2, r3
 80003ce:	4b17      	ldr	r3, [pc, #92]	; (800042c <HAL_UART_RxCpltCallback+0x88>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	5499      	strb	r1, [r3, r2]
				//if(Rx_Buffer_Size >= 5) {
					Rx_Line_Flag = 1;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <HAL_UART_RxCpltCallback+0x7c>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
				//}
				if(Rx_Buffer_Size == 0){
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <HAL_UART_RxCpltCallback+0x84>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d102      	bne.n	80003e8 <HAL_UART_RxCpltCallback+0x44>
					Rx_Line_Flag = 0;
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <HAL_UART_RxCpltCallback+0x7c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
				}
				Rx_Buffer_Size = 0;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <HAL_UART_RxCpltCallback+0x84>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	e00c      	b.n	800040a <HAL_UART_RxCpltCallback+0x66>
			}else {
				Uart1_Rx_Buffer[Rx_Buffer_Size] = Uart1_Rx_Char;
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <HAL_UART_RxCpltCallback+0x84>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <HAL_UART_RxCpltCallback+0x80>)
 80003f8:	7819      	ldrb	r1, [r3, #0]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_UART_RxCpltCallback+0x88>)
 80003fc:	5499      	strb	r1, [r3, r2]
				Rx_Buffer_Size++;
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <HAL_UART_RxCpltCallback+0x84>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <HAL_UART_RxCpltCallback+0x84>)
 8000408:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 800040a:	2201      	movs	r2, #1
 800040c:	4905      	ldr	r1, [pc, #20]	; (8000424 <HAL_UART_RxCpltCallback+0x80>)
 800040e:	4803      	ldr	r0, [pc, #12]	; (800041c <HAL_UART_RxCpltCallback+0x78>)
 8000410:	f002 f820 	bl	8002454 <HAL_UART_Receive_IT>
	}
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200001e8 	.word	0x200001e8
 8000420:	20000155 	.word	0x20000155
 8000424:	20000164 	.word	0x20000164
 8000428:	20000154 	.word	0x20000154
 800042c:	2000008c 	.word	0x2000008c

08000430 <HAL_TIM_PeriodElapsedCallback>:

//定时器2中断
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance) { //定时器中断没用上 不要管
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	429a      	cmp	r2, r3
			//Server_SentTo_Client(Wifi_Command_Buffer);
			//Wifi_Get_Command_Flag = 0;
		}
	}

}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	20000168 	.word	0x20000168

08000450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <HAL_MspInit+0x5c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <HAL_MspInit+0x5c>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_MspInit+0x60>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <HAL_MspInit+0x60>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <HardFault_Handler+0x4>

080004d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <MemManage_Handler+0x4>

080004d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <BusFault_Handler+0x4>

080004de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e2:	e7fe      	b.n	80004e2 <UsageFault_Handler+0x4>

080004e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050c:	f000 fbca 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <TIM2_IRQHandler+0x10>)
 800051a:	f001 fb83 	bl	8001c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000168 	.word	0x20000168

08000528 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <USART1_IRQHandler+0x10>)
 800052e:	f001 ffe5 	bl	80024fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200001e8 	.word	0x200001e8

0800053c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000540:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000544:	f000 fee2 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	e00a      	b.n	8000574 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800055e:	f3af 8000 	nop.w
 8000562:	4601      	mov	r1, r0
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	60ba      	str	r2, [r7, #8]
 800056a:	b2ca      	uxtb	r2, r1
 800056c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf0      	blt.n	800055e <_read+0x12>
	}

return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b086      	sub	sp, #24
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	e009      	b.n	80005ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fa49 	bl	8000a38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	3301      	adds	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dbf1      	blt.n	8000598 <_write+0x12>
	}
	return len;
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <_close>:

int _close(int file)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
	return -1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e4:	605a      	str	r2, [r3, #4]
	return 0;
 80005e6:	2300      	movs	r3, #0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr

080005f2 <_isatty>:

int _isatty(int file)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
	return 1;
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000606:	b480      	push	{r7}
 8000608:	b085      	sub	sp, #20
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
	return 0;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
	...

08000620 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <_sbrk+0x50>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <_sbrk+0x16>
		heap_end = &end;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <_sbrk+0x50>)
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <_sbrk+0x54>)
 8000634:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <_sbrk+0x50>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <_sbrk+0x50>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4413      	add	r3, r2
 8000644:	466a      	mov	r2, sp
 8000646:	4293      	cmp	r3, r2
 8000648:	d907      	bls.n	800065a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800064a:	f002 faa9 	bl	8002ba0 <__errno>
 800064e:	4602      	mov	r2, r0
 8000650:	230c      	movs	r3, #12
 8000652:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	e006      	b.n	8000668 <_sbrk+0x48>
	}

	heap_end += incr;
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <_sbrk+0x50>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4a03      	ldr	r2, [pc, #12]	; (8000670 <_sbrk+0x50>)
 8000664:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000158 	.word	0x20000158
 8000674:	20000270 	.word	0x20000270

08000678 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <SystemInit+0x5c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <SystemInit+0x5c>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <SystemInit+0x5c>)
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	4911      	ldr	r1, [pc, #68]	; (80006d4 <SystemInit+0x5c>)
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x60>)
 8000690:	4013      	ands	r3, r2
 8000692:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <SystemInit+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <SystemInit+0x5c>)
 800069a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800069e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006a2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <SystemInit+0x5c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a0a      	ldr	r2, [pc, #40]	; (80006d4 <SystemInit+0x5c>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <SystemInit+0x5c>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <SystemInit+0x5c>)
 80006b6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006ba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <SystemInit+0x5c>)
 80006be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <SystemInit+0x64>)
 80006c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006ca:	609a      	str	r2, [r3, #8]
#endif 
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	40021000 	.word	0x40021000
 80006d8:	f8ff0000 	.word	0xf8ff0000
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_TIM2_Init+0x98>)
 80006fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 640-1;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_TIM2_Init+0x98>)
 8000706:	f240 227f 	movw	r2, #639	; 0x27f
 800070a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_TIM2_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_TIM2_Init+0x98>)
 8000714:	f242 720f 	movw	r2, #9999	; 0x270f
 8000718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_TIM2_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_TIM2_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <MX_TIM2_Init+0x98>)
 8000728:	f001 fa2e 	bl	8001b88 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000732:	f7ff fe8d 	bl	8000450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	4619      	mov	r1, r3
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <MX_TIM2_Init+0x98>)
 8000744:	f001 fb76 	bl	8001e34 <HAL_TIM_ConfigClockSource>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800074e:	f7ff fe7f 	bl	8000450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_TIM2_Init+0x98>)
 8000760:	f001 fd3c 	bl	80021dc <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800076a:	f7ff fe71 	bl	8000450 <Error_Handler>
  }

}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000168 	.word	0x20000168

0800077c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800078c:	d113      	bne.n	80007b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_TIM_Base_MspInit+0x44>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <HAL_TIM_Base_MspInit+0x44>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_TIM_Base_MspInit+0x44>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	201c      	movs	r0, #28
 80007ac:	f000 fb8f 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007b0:	201c      	movs	r0, #28
 80007b2:	f000 fba8 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_USART1_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007fc:	f001 fd44 	bl	8002288 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f7ff fe23 	bl	8000450 <Error_Handler>
  }

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200001e8 	.word	0x200001e8
 8000814:	40013800 	.word	0x40013800

08000818 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_USART2_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000850:	f001 fd1a 	bl	8002288 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f7ff fdf9 	bl	8000450 <Error_Handler>
  }

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000228 	.word	0x20000228
 8000868:	40004400 	.word	0x40004400

0800086c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART3_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART3_UART_Init+0x4c>)
 80008a4:	f001 fcf0 	bl	8002288 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f7ff fdcf 	bl	8000450 <Error_Handler>
  }

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001a8 	.word	0x200001a8
 80008bc:	40004800 	.word	0x40004800

080008c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a51      	ldr	r2, [pc, #324]	; (8000a20 <HAL_UART_MspInit+0x160>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d13a      	bne.n	8000956 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e0:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a4f      	ldr	r2, [pc, #316]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f4:	61fb      	str	r3, [r7, #28]
 80008f6:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b4a      	ldr	r3, [pc, #296]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a49      	ldr	r2, [pc, #292]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b47      	ldr	r3, [pc, #284]	; (8000a24 <HAL_UART_MspInit+0x164>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	4619      	mov	r1, r3
 8000924:	4840      	ldr	r0, [pc, #256]	; (8000a28 <HAL_UART_MspInit+0x168>)
 8000926:	f000 fb7f 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800092a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	4619      	mov	r1, r3
 800093e:	483a      	ldr	r0, [pc, #232]	; (8000a28 <HAL_UART_MspInit+0x168>)
 8000940:	f000 fb72 	bl	8001028 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2025      	movs	r0, #37	; 0x25
 800094a:	f000 fac0 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800094e:	2025      	movs	r0, #37	; 0x25
 8000950:	f000 fad9 	bl	8000f06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000954:	e060      	b.n	8000a18 <HAL_UART_MspInit+0x158>
  else if(uartHandle->Instance==USART2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a34      	ldr	r2, [pc, #208]	; (8000a2c <HAL_UART_MspInit+0x16c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d124      	bne.n	80009aa <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <HAL_UART_MspInit+0x164>)
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <HAL_UART_MspInit+0x164>)
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	61d3      	str	r3, [r2, #28]
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <HAL_UART_MspInit+0x164>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <HAL_UART_MspInit+0x164>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a29      	ldr	r2, [pc, #164]	; (8000a24 <HAL_UART_MspInit+0x164>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <HAL_UART_MspInit+0x164>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000990:	230c      	movs	r3, #12
 8000992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2302      	movs	r3, #2
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	4619      	mov	r1, r3
 80009a2:	4821      	ldr	r0, [pc, #132]	; (8000a28 <HAL_UART_MspInit+0x168>)
 80009a4:	f000 fb40 	bl	8001028 <HAL_GPIO_Init>
}
 80009a8:	e036      	b.n	8000a18 <HAL_UART_MspInit+0x158>
  else if(uartHandle->Instance==USART3)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a20      	ldr	r2, [pc, #128]	; (8000a30 <HAL_UART_MspInit+0x170>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d131      	bne.n	8000a18 <HAL_UART_MspInit+0x158>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80009ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009be:	61d3      	str	r3, [r2, #28]
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80009c2:	69db      	ldr	r3, [r3, #28]
 80009c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_UART_MspInit+0x164>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	4619      	mov	r1, r3
 80009f8:	480e      	ldr	r0, [pc, #56]	; (8000a34 <HAL_UART_MspInit+0x174>)
 80009fa:	f000 fb15 	bl	8001028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	4619      	mov	r1, r3
 8000a12:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_UART_MspInit+0x174>)
 8000a14:	f000 fb08 	bl	8001028 <HAL_GPIO_Init>
}
 8000a18:	bf00      	nop
 8000a1a:	3730      	adds	r7, #48	; 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40013800 	.word	0x40013800
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40004800 	.word	0x40004800
 8000a34:	40010c00 	.word	0x40010c00

08000a38 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000a40:	1d39      	adds	r1, r7, #4
 8000a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a46:	2201      	movs	r2, #1
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <__io_putchar+0x20>)
 8000a4a:	f001 fc6a 	bl	8002322 <HAL_UART_Transmit>
  //HAL_UART_Transmit_IT(&huart1, (uint8_t *)&ch, 1);
  return ch;
 8000a4e:	687b      	ldr	r3, [r7, #4]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200001e8 	.word	0x200001e8

08000a5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a5e:	e003      	b.n	8000a68 <LoopCopyDataInit>

08000a60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a66:	3104      	adds	r1, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a70:	d3f6      	bcc.n	8000a60 <CopyDataInit>
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a74:	e002      	b.n	8000a7c <LoopFillZerobss>

08000a76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a78:	f842 3b04 	str.w	r3, [r2], #4

08000a7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a80:	d3f9      	bcc.n	8000a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a82:	f7ff fdf9 	bl	8000678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f002 f891 	bl	8002bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8a:	f7ff fbcd 	bl	8000228 <main>
  bx lr
 8000a8e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a90:	08003c08 	.word	0x08003c08
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a98:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000a9c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000aa0:	20000270 	.word	0x20000270

08000aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_2_IRQHandler>
	...

08000aa8 <Server_Init>:
#include "wifi.h"
void Server_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000aac:	2032      	movs	r0, #50	; 0x32
 8000aae:	f000 f915 	bl	8000cdc <HAL_Delay>
	printf("AT+RST\r\n");
 8000ab2:	4810      	ldr	r0, [pc, #64]	; (8000af4 <Server_Init+0x4c>)
 8000ab4:	f002 f91a 	bl	8002cec <puts>
	HAL_Delay(300);
 8000ab8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000abc:	f000 f90e 	bl	8000cdc <HAL_Delay>
	printf("AT+CWMODE=2\r\n");
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <Server_Init+0x50>)
 8000ac2:	f002 f913 	bl	8002cec <puts>
	HAL_Delay(100);
 8000ac6:	2064      	movs	r0, #100	; 0x64
 8000ac8:	f000 f908 	bl	8000cdc <HAL_Delay>
	printf("AT+CIPMUX=1\r\n");
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <Server_Init+0x54>)
 8000ace:	f002 f90d 	bl	8002cec <puts>
	HAL_Delay(100);
 8000ad2:	2064      	movs	r0, #100	; 0x64
 8000ad4:	f000 f902 	bl	8000cdc <HAL_Delay>
	printf("AT+CIPSERVER=1,8080\r\n");
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <Server_Init+0x58>)
 8000ada:	f002 f907 	bl	8002cec <puts>
	HAL_Delay(100);
 8000ade:	2064      	movs	r0, #100	; 0x64
 8000ae0:	f000 f8fc 	bl	8000cdc <HAL_Delay>
	printf("AT+CIPSTO=0\r\n");
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <Server_Init+0x5c>)
 8000ae6:	f002 f901 	bl	8002cec <puts>
	HAL_Delay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f000 f8f6 	bl	8000cdc <HAL_Delay>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	08003ad0 	.word	0x08003ad0
 8000af8:	08003ad8 	.word	0x08003ad8
 8000afc:	08003ae8 	.word	0x08003ae8
 8000b00:	08003af8 	.word	0x08003af8
 8000b04:	08003b10 	.word	0x08003b10

08000b08 <Server_SentTo_Client>:

void Server_SentTo_Client(uint8_t *Str) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000b10:	2032      	movs	r0, #50	; 0x32
 8000b12:	f000 f8e3 	bl	8000cdc <HAL_Delay>
	printf("AT+CIPSEND=0,%d\r\n", Strlen(Str) + 2);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 f818 	bl	8000b4c <Strlen>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	3302      	adds	r3, #2
 8000b20:	4619      	mov	r1, r3
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <Server_SentTo_Client+0x3c>)
 8000b24:	f002 f86e 	bl	8002c04 <iprintf>
	HAL_Delay(50);
 8000b28:	2032      	movs	r0, #50	; 0x32
 8000b2a:	f000 f8d7 	bl	8000cdc <HAL_Delay>
	printf("%s\r\n", Str);
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <Server_SentTo_Client+0x40>)
 8000b32:	f002 f867 	bl	8002c04 <iprintf>
	HAL_Delay(50);
 8000b36:	2032      	movs	r0, #50	; 0x32
 8000b38:	f000 f8d0 	bl	8000cdc <HAL_Delay>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	08003b20 	.word	0x08003b20
 8000b48:	08003b34 	.word	0x08003b34

08000b4c <Strlen>:

 uint8_t Strlen(uint8_t *s) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	 for(uint8_t i = 0; i < 256; i++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <Strlen+0x1c>
			 return i;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	e003      	b.n	8000b70 <Strlen+0x24>
	 for(uint8_t i = 0; i < 256; i++) {
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 8000b6e:	e7f3      	b.n	8000b58 <Strlen+0xc>
		 }
	 }
 }
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <Strcpy>:
 void Strcpy(uint8_t *s1, uint8_t *s2) {
 8000b7a:	b480      	push	{r7}
 8000b7c:	b085      	sub	sp, #20
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
	 uint8_t i;
	 for(i = 0; s2[i] != '\0'; i++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e00a      	b.n	8000ba0 <Strcpy+0x26>
		 s1[i] = s2[i];
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	441a      	add	r2, r3
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	440b      	add	r3, r1
 8000b96:	7812      	ldrb	r2, [r2, #0]
 8000b98:	701a      	strb	r2, [r3, #0]
	 for(i = 0; s2[i] != '\0'; i++) {
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1ee      	bne.n	8000b8a <Strcpy+0x10>
	 }
	 s1[i] = '\0';
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
 }
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <Strcmp>:
uint8_t Strcmp(uint8_t *s1, uint8_t *s2) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
	uint8_t i;
		 for(i = 0; s2[i] != '\0'; i++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
 8000bce:	e00e      	b.n	8000bee <Strcmp+0x2e>
			 if(s1[i] != s2[i]) {
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	6839      	ldr	r1, [r7, #0]
 8000bdc:	440b      	add	r3, r1
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d001      	beq.n	8000be8 <Strcmp+0x28>
				 return 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e011      	b.n	8000c0c <Strcmp+0x4c>
		 for(i = 0; s2[i] != '\0'; i++) {
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	3301      	adds	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1ea      	bne.n	8000bd0 <Strcmp+0x10>
			 }
		 }
		 if(s1[i] == '\0') {
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <Strcmp+0x4a>
			 return 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e000      	b.n	8000c0c <Strcmp+0x4c>
		 }
		 return 0;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_Init+0x28>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x28>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f945 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f808 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fc12 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40022000 	.word	0x40022000

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f95d 	bl	8000f22 <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f925 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_IncTick+0x1c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000268 	.word	0x20000268

08000cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <HAL_GetTick+0x10>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	20000268 	.word	0x20000268

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff fff0 	bl	8000cc8 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_Delay+0x40>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffe0 	bl	8000cc8 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000008 	.word	0x20000008

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4906      	ldr	r1, [pc, #24]	; (8000db8 <__NVIC_EnableIRQ+0x34>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff90 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff2d 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff42 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff90 	bl	8000e10 <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5f 	bl	8000dbc <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff35 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d005      	beq.n	8000f5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2204      	movs	r2, #4
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e051      	b.n	8001002 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 020e 	bic.w	r2, r2, #14
 8000f6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0201 	bic.w	r2, r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a22      	ldr	r2, [pc, #136]	; (800100c <HAL_DMA_Abort_IT+0xd0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d029      	beq.n	8000fdc <HAL_DMA_Abort_IT+0xa0>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a20      	ldr	r2, [pc, #128]	; (8001010 <HAL_DMA_Abort_IT+0xd4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d022      	beq.n	8000fd8 <HAL_DMA_Abort_IT+0x9c>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <HAL_DMA_Abort_IT+0xd8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d01a      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x96>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <HAL_DMA_Abort_IT+0xdc>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d012      	beq.n	8000fcc <HAL_DMA_Abort_IT+0x90>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <HAL_DMA_Abort_IT+0xe0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d00a      	beq.n	8000fc6 <HAL_DMA_Abort_IT+0x8a>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <HAL_DMA_Abort_IT+0xe4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d102      	bne.n	8000fc0 <HAL_DMA_Abort_IT+0x84>
 8000fba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fbe:	e00e      	b.n	8000fde <HAL_DMA_Abort_IT+0xa2>
 8000fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fc4:	e00b      	b.n	8000fde <HAL_DMA_Abort_IT+0xa2>
 8000fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fca:	e008      	b.n	8000fde <HAL_DMA_Abort_IT+0xa2>
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	e005      	b.n	8000fde <HAL_DMA_Abort_IT+0xa2>
 8000fd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd6:	e002      	b.n	8000fde <HAL_DMA_Abort_IT+0xa2>
 8000fd8:	2310      	movs	r3, #16
 8000fda:	e000      	b.n	8000fde <HAL_DMA_Abort_IT+0xa2>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <HAL_DMA_Abort_IT+0xe8>)
 8000fe0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	4798      	blx	r3
    } 
  }
  return status;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020008 	.word	0x40020008
 8001010:	4002001c 	.word	0x4002001c
 8001014:	40020030 	.word	0x40020030
 8001018:	40020044 	.word	0x40020044
 800101c:	40020058 	.word	0x40020058
 8001020:	4002006c 	.word	0x4002006c
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b08b      	sub	sp, #44	; 0x2c
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	e127      	b.n	800128c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800103c:	2201      	movs	r2, #1
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 8116 	bne.w	8001286 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b12      	cmp	r3, #18
 8001060:	d034      	beq.n	80010cc <HAL_GPIO_Init+0xa4>
 8001062:	2b12      	cmp	r3, #18
 8001064:	d80d      	bhi.n	8001082 <HAL_GPIO_Init+0x5a>
 8001066:	2b02      	cmp	r3, #2
 8001068:	d02b      	beq.n	80010c2 <HAL_GPIO_Init+0x9a>
 800106a:	2b02      	cmp	r3, #2
 800106c:	d804      	bhi.n	8001078 <HAL_GPIO_Init+0x50>
 800106e:	2b00      	cmp	r3, #0
 8001070:	d031      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
 8001072:	2b01      	cmp	r3, #1
 8001074:	d01c      	beq.n	80010b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001076:	e048      	b.n	800110a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001078:	2b03      	cmp	r3, #3
 800107a:	d043      	beq.n	8001104 <HAL_GPIO_Init+0xdc>
 800107c:	2b11      	cmp	r3, #17
 800107e:	d01b      	beq.n	80010b8 <HAL_GPIO_Init+0x90>
          break;
 8001080:	e043      	b.n	800110a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001082:	4a89      	ldr	r2, [pc, #548]	; (80012a8 <HAL_GPIO_Init+0x280>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d026      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
 8001088:	4a87      	ldr	r2, [pc, #540]	; (80012a8 <HAL_GPIO_Init+0x280>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d806      	bhi.n	800109c <HAL_GPIO_Init+0x74>
 800108e:	4a87      	ldr	r2, [pc, #540]	; (80012ac <HAL_GPIO_Init+0x284>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d020      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
 8001094:	4a86      	ldr	r2, [pc, #536]	; (80012b0 <HAL_GPIO_Init+0x288>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d01d      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
          break;
 800109a:	e036      	b.n	800110a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800109c:	4a85      	ldr	r2, [pc, #532]	; (80012b4 <HAL_GPIO_Init+0x28c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
 80010a2:	4a85      	ldr	r2, [pc, #532]	; (80012b8 <HAL_GPIO_Init+0x290>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d016      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
 80010a8:	4a84      	ldr	r2, [pc, #528]	; (80012bc <HAL_GPIO_Init+0x294>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
          break;
 80010ae:	e02c      	b.n	800110a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e028      	b.n	800110a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	3304      	adds	r3, #4
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e023      	b.n	800110a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	3308      	adds	r3, #8
 80010c8:	623b      	str	r3, [r7, #32]
          break;
 80010ca:	e01e      	b.n	800110a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	330c      	adds	r3, #12
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e019      	b.n	800110a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010de:	2304      	movs	r3, #4
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e012      	b.n	800110a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ec:	2308      	movs	r3, #8
 80010ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	611a      	str	r2, [r3, #16]
          break;
 80010f6:	e008      	b.n	800110a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f8:	2308      	movs	r3, #8
 80010fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	615a      	str	r2, [r3, #20]
          break;
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	2bff      	cmp	r3, #255	; 0xff
 800110e:	d801      	bhi.n	8001114 <HAL_GPIO_Init+0xec>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	e001      	b.n	8001118 <HAL_GPIO_Init+0xf0>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3304      	adds	r3, #4
 8001118:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d802      	bhi.n	8001126 <HAL_GPIO_Init+0xfe>
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x104>
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	3b08      	subs	r3, #8
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	210f      	movs	r1, #15
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	401a      	ands	r2, r3
 800113e:	6a39      	ldr	r1, [r7, #32]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8096 	beq.w	8001286 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800115a:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <HAL_GPIO_Init+0x298>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_GPIO_Init+0x298>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6193      	str	r3, [r2, #24]
 8001166:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <HAL_GPIO_Init+0x298>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001172:	4a54      	ldr	r2, [pc, #336]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <HAL_GPIO_Init+0x2a0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x19e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4a      	ldr	r2, [pc, #296]	; (80012cc <HAL_GPIO_Init+0x2a4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x19a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a49      	ldr	r2, [pc, #292]	; (80012d0 <HAL_GPIO_Init+0x2a8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x196>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a48      	ldr	r2, [pc, #288]	; (80012d4 <HAL_GPIO_Init+0x2ac>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x192>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x1a0>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x1a0>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x1a0>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x1a0>
 80011c6:	2300      	movs	r3, #0
 80011c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011d8:	493a      	ldr	r1, [pc, #232]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4938      	ldr	r1, [pc, #224]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	43db      	mvns	r3, r3
 8001208:	4933      	ldr	r1, [pc, #204]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800120a:	4013      	ands	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	492e      	ldr	r1, [pc, #184]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	43db      	mvns	r3, r3
 8001230:	4929      	ldr	r1, [pc, #164]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001232:	4013      	ands	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4924      	ldr	r1, [pc, #144]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	43db      	mvns	r3, r3
 8001258:	491f      	ldr	r1, [pc, #124]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800125a:	4013      	ands	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	491a      	ldr	r1, [pc, #104]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	60cb      	str	r3, [r1, #12]
 8001276:	e006      	b.n	8001286 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	43db      	mvns	r3, r3
 8001280:	4915      	ldr	r1, [pc, #84]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001282:	4013      	ands	r3, r2
 8001284:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	3301      	adds	r3, #1
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	f47f aed0 	bne.w	800103c <HAL_GPIO_Init+0x14>
  }
}
 800129c:	bf00      	nop
 800129e:	372c      	adds	r7, #44	; 0x2c
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	10210000 	.word	0x10210000
 80012ac:	10110000 	.word	0x10110000
 80012b0:	10120000 	.word	0x10120000
 80012b4:	10310000 	.word	0x10310000
 80012b8:	10320000 	.word	0x10320000
 80012bc:	10220000 	.word	0x10220000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40011400 	.word	0x40011400
 80012d8:	40010400 	.word	0x40010400

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	611a      	str	r2, [r3, #16]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f806 	bl	800133c <HAL_GPIO_EXTI_Callback>
  }
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e26c      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8087 	beq.w	800147e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001370:	4b92      	ldr	r3, [pc, #584]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b04      	cmp	r3, #4
 800137a:	d00c      	beq.n	8001396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800137c:	4b8f      	ldr	r3, [pc, #572]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b08      	cmp	r3, #8
 8001386:	d112      	bne.n	80013ae <HAL_RCC_OscConfig+0x5e>
 8001388:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d10b      	bne.n	80013ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001396:	4b89      	ldr	r3, [pc, #548]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d06c      	beq.n	800147c <HAL_RCC_OscConfig+0x12c>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d168      	bne.n	800147c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e246      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x76>
 80013b8:	4b80      	ldr	r3, [pc, #512]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a7f      	ldr	r2, [pc, #508]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e02e      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x98>
 80013ce:	4b7b      	ldr	r3, [pc, #492]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a7a      	ldr	r2, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b78      	ldr	r3, [pc, #480]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a77      	ldr	r2, [pc, #476]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e01d      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0xbc>
 80013f2:	4b72      	ldr	r3, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a71      	ldr	r2, [pc, #452]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 800140c:	4b6b      	ldr	r3, [pc, #428]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a6a      	ldr	r2, [pc, #424]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a67      	ldr	r2, [pc, #412]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fc4c 	bl	8000cc8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fc48 	bl	8000cc8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1fa      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0xe4>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc38 	bl	8000cc8 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc34 	bl	8000cc8 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1e6      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x10c>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d063      	beq.n	8001552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148a:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d11c      	bne.n	80014dc <HAL_RCC_OscConfig+0x18c>
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x176>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e1ba      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4939      	ldr	r1, [pc, #228]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	e03a      	b.n	8001552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e4:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <HAL_RCC_OscConfig+0x270>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fbed 	bl	8000cc8 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fbe9 	bl	8000cc8 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e19b      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4927      	ldr	r1, [pc, #156]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_RCC_OscConfig+0x270>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fbcc 	bl	8000cc8 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fbc8 	bl	8000cc8 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e17a      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03a      	beq.n	80015d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d019      	beq.n	800159a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_RCC_OscConfig+0x274>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156c:	f7ff fbac 	bl	8000cc8 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fba8 	bl	8000cc8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e15a      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f000 fada 	bl	8001b4c <RCC_Delay>
 8001598:	e01c      	b.n	80015d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_RCC_OscConfig+0x274>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff fb92 	bl	8000cc8 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a6:	e00f      	b.n	80015c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fb8e 	bl	8000cc8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d908      	bls.n	80015c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e140      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	42420000 	.word	0x42420000
 80015c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	4b9e      	ldr	r3, [pc, #632]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e9      	bne.n	80015a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a6 	beq.w	800172e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e6:	4b97      	ldr	r3, [pc, #604]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b94      	ldr	r3, [pc, #592]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a93      	ldr	r2, [pc, #588]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b91      	ldr	r3, [pc, #580]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160a:	2301      	movs	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160e:	4b8e      	ldr	r3, [pc, #568]	; (8001848 <HAL_RCC_OscConfig+0x4f8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d118      	bne.n	800164c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161a:	4b8b      	ldr	r3, [pc, #556]	; (8001848 <HAL_RCC_OscConfig+0x4f8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a8a      	ldr	r2, [pc, #552]	; (8001848 <HAL_RCC_OscConfig+0x4f8>)
 8001620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001626:	f7ff fb4f 	bl	8000cc8 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162e:	f7ff fb4b 	bl	8000cc8 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b64      	cmp	r3, #100	; 0x64
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0fd      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b81      	ldr	r3, [pc, #516]	; (8001848 <HAL_RCC_OscConfig+0x4f8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x312>
 8001654:	4b7b      	ldr	r3, [pc, #492]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a7a      	ldr	r2, [pc, #488]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	e02d      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x334>
 800166a:	4b76      	ldr	r3, [pc, #472]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a75      	ldr	r2, [pc, #468]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	4b73      	ldr	r3, [pc, #460]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a72      	ldr	r2, [pc, #456]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	e01c      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d10c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x356>
 800168c:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a6c      	ldr	r2, [pc, #432]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a69      	ldr	r2, [pc, #420]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	e00b      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a66      	ldr	r2, [pc, #408]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b64      	ldr	r3, [pc, #400]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a63      	ldr	r2, [pc, #396]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d015      	beq.n	80016f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff faff 	bl	8000cc8 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff fafb 	bl	8000cc8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e0ab      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	4b57      	ldr	r3, [pc, #348]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ee      	beq.n	80016ce <HAL_RCC_OscConfig+0x37e>
 80016f0:	e014      	b.n	800171c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fae9 	bl	8000cc8 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff fae5 	bl	8000cc8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	; 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e095      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1ee      	bne.n	80016fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d105      	bne.n	800172e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a47      	ldr	r2, [pc, #284]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8081 	beq.w	800183a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b08      	cmp	r3, #8
 8001742:	d061      	beq.n	8001808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d146      	bne.n	80017da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_RCC_OscConfig+0x4fc>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff fab9 	bl	8000cc8 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175a:	f7ff fab5 	bl	8000cc8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e067      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176c:	4b35      	ldr	r3, [pc, #212]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d108      	bne.n	8001794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	492d      	ldr	r1, [pc, #180]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a19      	ldr	r1, [r3, #32]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	430b      	orrs	r3, r1
 80017a6:	4927      	ldr	r1, [pc, #156]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x4fc>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fa89 	bl	8000cc8 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fa85 	bl	8000cc8 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e037      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x46a>
 80017d8:	e02f      	b.n	800183a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_RCC_OscConfig+0x4fc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fa72 	bl	8000cc8 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fa6e 	bl	8000cc8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e020      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x498>
 8001806:	e018      	b.n	800183a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e013      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	429a      	cmp	r2, r3
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
 800184c:	42420060 	.word	0x42420060

08001850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0d0      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d910      	bls.n	8001894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b67      	ldr	r3, [pc, #412]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 0207 	bic.w	r2, r3, #7
 800187a:	4965      	ldr	r1, [pc, #404]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b8      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	494d      	ldr	r1, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d040      	beq.n	8001970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d115      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e073      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e06b      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4936      	ldr	r1, [pc, #216]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff f9c2 	bl	8000cc8 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff f9be 	bl	8000cc8 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e053      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d210      	bcs.n	80019a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 0207 	bic.w	r2, r3, #7
 8001986:	4922      	ldr	r1, [pc, #136]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e032      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4916      	ldr	r1, [pc, #88]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019de:	f000 f821 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019e2:	4601      	mov	r1, r0
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	fa21 f303 	lsr.w	r3, r1, r3
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1cc>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1d0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f920 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40022000 	.word	0x40022000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	08003b50 	.word	0x08003b50
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	b490      	push	{r4, r7}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a2c:	1d3c      	adds	r4, r7, #4
 8001a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x40>
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x46>
 8001a62:	e02d      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a66:	623b      	str	r3, [r7, #32]
      break;
 8001a68:	e02d      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	0c9b      	lsrs	r3, r3, #18
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a76:	4413      	add	r3, r2
 8001a78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	0c5b      	lsrs	r3, r3, #17
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a96:	4413      	add	r3, r2
 8001a98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aa2:	fb02 f203 	mul.w	r2, r2, r3
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
 8001aae:	e004      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	623b      	str	r3, [r7, #32]
      break;
 8001abe:	e002      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ac2:	623b      	str	r3, [r7, #32]
      break;
 8001ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc90      	pop	{r4, r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	08003b3c 	.word	0x08003b3c
 8001ad8:	08003b4c 	.word	0x08003b4c
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	007a1200 	.word	0x007a1200
 8001ae4:	003d0900 	.word	0x003d0900

08001ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff2 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b04:	4601      	mov	r1, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08003b60 	.word	0x08003b60

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0adb      	lsrs	r3, r3, #11
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4a03      	ldr	r2, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08003b60 	.word	0x08003b60

08001b4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <RCC_Delay+0x34>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <RCC_Delay+0x38>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0a5b      	lsrs	r3, r3, #9
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b68:	bf00      	nop
  }
  while (Delay --);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	60fa      	str	r2, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f9      	bne.n	8001b68 <RCC_Delay+0x1c>
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000000 	.word	0x20000000
 8001b84:	10624dd3 	.word	0x10624dd3

08001b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e01d      	b.n	8001bd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fde4 	bl	800077c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f000 fa10 	bl	8001fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b06      	cmp	r3, #6
 8001c06:	d007      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d122      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d11b      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0202 	mvn.w	r2, #2
 8001c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f9a4 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001c6c:	e005      	b.n	8001c7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f997 	bl	8001fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f9a6 	bl	8001fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d122      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d11b      	bne.n	8001cd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0204 	mvn.w	r2, #4
 8001ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f97a 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001cc0:	e005      	b.n	8001cce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f96d 	bl	8001fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f97c 	bl	8001fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d122      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d11b      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0208 	mvn.w	r2, #8
 8001cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f950 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001d14:	e005      	b.n	8001d22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f943 	bl	8001fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f952 	bl	8001fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d122      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d11b      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0210 	mvn.w	r2, #16
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2208      	movs	r2, #8
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f926 	bl	8001fb4 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f919 	bl	8001fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f928 	bl	8001fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d10e      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d107      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0201 	mvn.w	r2, #1
 8001da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fb44 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	2b80      	cmp	r3, #128	; 0x80
 8001db4:	d10e      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc0:	2b80      	cmp	r3, #128	; 0x80
 8001dc2:	d107      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fa51 	bl	8002276 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	d10e      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d107      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f8ec 	bl	8001fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d10e      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d107      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0220 	mvn.w	r2, #32
 8001e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fa1c 	bl	8002264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_TIM_ConfigClockSource+0x18>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e0a6      	b.n	8001f9a <HAL_TIM_ConfigClockSource+0x166>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b40      	cmp	r3, #64	; 0x40
 8001e82:	d067      	beq.n	8001f54 <HAL_TIM_ConfigClockSource+0x120>
 8001e84:	2b40      	cmp	r3, #64	; 0x40
 8001e86:	d80b      	bhi.n	8001ea0 <HAL_TIM_ConfigClockSource+0x6c>
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	d073      	beq.n	8001f74 <HAL_TIM_ConfigClockSource+0x140>
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d802      	bhi.n	8001e96 <HAL_TIM_ConfigClockSource+0x62>
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d06f      	beq.n	8001f74 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001e94:	e078      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d06c      	beq.n	8001f74 <HAL_TIM_ConfigClockSource+0x140>
 8001e9a:	2b30      	cmp	r3, #48	; 0x30
 8001e9c:	d06a      	beq.n	8001f74 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001e9e:	e073      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ea0:	2b70      	cmp	r3, #112	; 0x70
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_TIM_ConfigClockSource+0x8c>
 8001ea4:	2b70      	cmp	r3, #112	; 0x70
 8001ea6:	d804      	bhi.n	8001eb2 <HAL_TIM_ConfigClockSource+0x7e>
 8001ea8:	2b50      	cmp	r3, #80	; 0x50
 8001eaa:	d033      	beq.n	8001f14 <HAL_TIM_ConfigClockSource+0xe0>
 8001eac:	2b60      	cmp	r3, #96	; 0x60
 8001eae:	d041      	beq.n	8001f34 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001eb0:	e06a      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb6:	d066      	beq.n	8001f86 <HAL_TIM_ConfigClockSource+0x152>
 8001eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ebc:	d017      	beq.n	8001eee <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001ebe:	e063      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f000 f965 	bl	800219e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ee2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	609a      	str	r2, [r3, #8]
      break;
 8001eec:	e04c      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6899      	ldr	r1, [r3, #8]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f000 f94e 	bl	800219e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f10:	609a      	str	r2, [r3, #8]
      break;
 8001f12:	e039      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	461a      	mov	r2, r3
 8001f22:	f000 f8c5 	bl	80020b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2150      	movs	r1, #80	; 0x50
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f91c 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001f32:	e029      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	461a      	mov	r2, r3
 8001f42:	f000 f8e3 	bl	800210c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2160      	movs	r1, #96	; 0x60
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 f90c 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001f52:	e019      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f000 f8a5 	bl	80020b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2140      	movs	r1, #64	; 0x40
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f8fc 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001f72:	e009      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f000 f8f3 	bl	800216a <TIM_ITRx_SetConfig>
      break;
 8001f84:	e000      	b.n	8001f88 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001f86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
	...

08001fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <TIM_Base_SetConfig+0xb8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00b      	beq.n	800201c <TIM_Base_SetConfig+0x30>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200a:	d007      	beq.n	800201c <TIM_Base_SetConfig+0x30>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <TIM_Base_SetConfig+0xbc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_Base_SetConfig+0x30>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a25      	ldr	r2, [pc, #148]	; (80020ac <TIM_Base_SetConfig+0xc0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <TIM_Base_SetConfig+0xb8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00b      	beq.n	800204e <TIM_Base_SetConfig+0x62>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203c:	d007      	beq.n	800204e <TIM_Base_SetConfig+0x62>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a19      	ldr	r2, [pc, #100]	; (80020a8 <TIM_Base_SetConfig+0xbc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d003      	beq.n	800204e <TIM_Base_SetConfig+0x62>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a18      	ldr	r2, [pc, #96]	; (80020ac <TIM_Base_SetConfig+0xc0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d108      	bne.n	8002060 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <TIM_Base_SetConfig+0xb8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d103      	bne.n	8002094 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	615a      	str	r2, [r3, #20]
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	40012c00 	.word	0x40012c00
 80020a8:	40000400 	.word	0x40000400
 80020ac:	40000800 	.word	0x40000800

080020b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f023 0201 	bic.w	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f023 030a 	bic.w	r3, r3, #10
 80020ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	621a      	str	r2, [r3, #32]
}
 8002102:	bf00      	nop
 8002104:	371c      	adds	r7, #28
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f023 0210 	bic.w	r2, r3, #16
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002136:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	031b      	lsls	r3, r3, #12
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002148:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	621a      	str	r2, [r3, #32]
}
 8002160:	bf00      	nop
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	f043 0307 	orr.w	r3, r3, #7
 800218c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	609a      	str	r2, [r3, #8]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800219e:	b480      	push	{r7}
 80021a0:	b087      	sub	sp, #28
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	021a      	lsls	r2, r3, #8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	609a      	str	r2, [r3, #8]
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e032      	b.n	800225a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800222c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	4313      	orrs	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e03f      	b.n	800231a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fb06 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2224      	movs	r2, #36	; 0x24
 80022b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 fb8d 	bl	80029ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b088      	sub	sp, #32
 8002326:	af02      	add	r7, sp, #8
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b20      	cmp	r3, #32
 8002340:	f040 8083 	bne.w	800244a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <HAL_UART_Transmit+0x2e>
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e07b      	b.n	800244c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_UART_Transmit+0x40>
 800235e:	2302      	movs	r3, #2
 8002360:	e074      	b.n	800244c <HAL_UART_Transmit+0x12a>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2221      	movs	r2, #33	; 0x21
 8002374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002378:	f7fe fca6 	bl	8000cc8 <HAL_GetTick>
 800237c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	88fa      	ldrh	r2, [r7, #6]
 8002382:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	88fa      	ldrh	r2, [r7, #6]
 8002388:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800238a:	e042      	b.n	8002412 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	d122      	bne.n	80023ea <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2200      	movs	r2, #0
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f9b2 	bl	8002718 <UART_WaitOnFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e046      	b.n	800244c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d103      	bne.n	80023e2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3302      	adds	r3, #2
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	e017      	b.n	8002412 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3301      	adds	r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	e013      	b.n	8002412 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f98f 	bl	8002718 <UART_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e023      	b.n	800244c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	60ba      	str	r2, [r7, #8]
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1b7      	bne.n	800238c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2200      	movs	r2, #0
 8002424:	2140      	movs	r1, #64	; 0x40
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f976 	bl	8002718 <UART_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e00a      	b.n	800244c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e000      	b.n	800244c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800244a:	2302      	movs	r3, #2
  }
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	d140      	bne.n	80024f0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_UART_Receive_IT+0x26>
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e039      	b.n	80024f2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_UART_Receive_IT+0x38>
 8002488:	2302      	movs	r3, #2
 800248a:	e032      	b.n	80024f2 <HAL_UART_Receive_IT+0x9e>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	88fa      	ldrh	r2, [r7, #6]
 800249e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	88fa      	ldrh	r2, [r7, #6]
 80024a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2222      	movs	r2, #34	; 0x22
 80024b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ca:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0220 	orr.w	r2, r2, #32
 80024ea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10d      	bne.n	800254e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_UART_IRQHandler+0x52>
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f9ce 	bl	80028e8 <UART_Receive_IT>
      return;
 800254c:	e0cc      	b.n	80026e8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80ab 	beq.w	80026ac <HAL_UART_IRQHandler+0x1b0>
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_UART_IRQHandler+0x70>
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80a0 	beq.w	80026ac <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_UART_IRQHandler+0x90>
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_UART_IRQHandler+0xb0>
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	f043 0202 	orr.w	r2, r3, #2
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_UART_IRQHandler+0xd0>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	f043 0204 	orr.w	r2, r3, #4
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_UART_IRQHandler+0xf0>
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	f043 0208 	orr.w	r2, r3, #8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d078      	beq.n	80026e6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_UART_IRQHandler+0x112>
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f96d 	bl	80028e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d102      	bne.n	8002636 <HAL_UART_IRQHandler+0x13a>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d031      	beq.n	800269a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f8b8 	bl	80027ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d023      	beq.n	8002692 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002658:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	2b00      	cmp	r3, #0
 8002660:	d013      	beq.n	800268a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <HAL_UART_IRQHandler+0x1f4>)
 8002668:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fc64 	bl	8000f3c <HAL_DMA_Abort_IT>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002684:	4610      	mov	r0, r2
 8002686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002688:	e00e      	b.n	80026a8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f83b 	bl	8002706 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002690:	e00a      	b.n	80026a8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f837 	bl	8002706 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002698:	e006      	b.n	80026a8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f833 	bl	8002706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80026a6:	e01e      	b.n	80026e6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a8:	bf00      	nop
    return;
 80026aa:	e01c      	b.n	80026e6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_UART_IRQHandler+0x1cc>
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8a4 	bl	800280e <UART_Transmit_IT>
    return;
 80026c6:	e00f      	b.n	80026e8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_UART_IRQHandler+0x1ec>
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8eb 	bl	80028b8 <UART_EndTransmit_IT>
    return;
 80026e2:	bf00      	nop
 80026e4:	e000      	b.n	80026e8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80026e6:	bf00      	nop
  }
}
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	080027e7 	.word	0x080027e7

080026f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002728:	e02c      	b.n	8002784 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d028      	beq.n	8002784 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <UART_WaitOnFlagUntilTimeout+0x30>
 8002738:	f7fe fac6 	bl	8000cc8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	429a      	cmp	r2, r3
 8002746:	d21d      	bcs.n	8002784 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002756:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e00f      	b.n	80027a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4013      	ands	r3, r2
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	429a      	cmp	r2, r3
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d0c3      	beq.n	800272a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff ff80 	bl	8002706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b21      	cmp	r3, #33	; 0x21
 8002820:	d144      	bne.n	80028ac <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282a:	d11a      	bne.n	8002862 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002840:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	1c9a      	adds	r2, r3, #2
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	e00e      	b.n	8002874 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	621a      	str	r2, [r3, #32]
 8002860:	e008      	b.n	8002874 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	1c59      	adds	r1, r3, #1
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6211      	str	r1, [r2, #32]
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29b      	uxth	r3, r3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4619      	mov	r1, r3
 8002882:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10f      	bne.n	80028a8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002896:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff0b 	bl	80026f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b22      	cmp	r3, #34	; 0x22
 80028fa:	d171      	bne.n	80029e0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002904:	d123      	bne.n	800294e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10e      	bne.n	8002932 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	1c9a      	adds	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
 8002930:	e029      	b.n	8002986 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	b29b      	uxth	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
 800294c:	e01b      	b.n	8002986 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6858      	ldr	r0, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	1c59      	adds	r1, r3, #1
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6291      	str	r1, [r2, #40]	; 0x28
 8002966:	b2c2      	uxtb	r2, r0
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e00c      	b.n	8002986 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	1c58      	adds	r0, r3, #1
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	6288      	str	r0, [r1, #40]	; 0x28
 800297e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29b      	uxth	r3, r3
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4619      	mov	r1, r3
 8002994:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002996:	2b00      	cmp	r3, #0
 8002998:	d120      	bne.n	80029dc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0220 	bic.w	r2, r2, #32
 80029a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0201 	bic.w	r2, r2, #1
 80029c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd fce6 	bl	80003a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e002      	b.n	80029e2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	e000      	b.n	80029e2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a26:	f023 030c 	bic.w	r3, r3, #12
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	68f9      	ldr	r1, [r7, #12]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a52      	ldr	r2, [pc, #328]	; (8002b98 <UART_SetConfig+0x1ac>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d14e      	bne.n	8002af2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a54:	f7ff f866 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 8002a58:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009a      	lsls	r2, r3, #2
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	4a4a      	ldr	r2, [pc, #296]	; (8002b9c <UART_SetConfig+0x1b0>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	0119      	lsls	r1, r3, #4
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	009a      	lsls	r2, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a90:	4b42      	ldr	r3, [pc, #264]	; (8002b9c <UART_SetConfig+0x1b0>)
 8002a92:	fba3 0302 	umull	r0, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2064      	movs	r0, #100	; 0x64
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	3332      	adds	r3, #50	; 0x32
 8002aa4:	4a3d      	ldr	r2, [pc, #244]	; (8002b9c <UART_SetConfig+0x1b0>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab0:	4419      	add	r1, r3
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009a      	lsls	r2, r3, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac8:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <UART_SetConfig+0x1b0>)
 8002aca:	fba3 0302 	umull	r0, r3, r3, r2
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2064      	movs	r0, #100	; 0x64
 8002ad2:	fb00 f303 	mul.w	r3, r0, r3
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	3332      	adds	r3, #50	; 0x32
 8002adc:	4a2f      	ldr	r2, [pc, #188]	; (8002b9c <UART_SetConfig+0x1b0>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	f003 020f 	and.w	r2, r3, #15
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	440a      	add	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002af0:	e04d      	b.n	8002b8e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002af2:	f7ff f803 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8002af6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	009a      	lsls	r2, r3, #2
 8002b02:	441a      	add	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <UART_SetConfig+0x1b0>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	0119      	lsls	r1, r3, #4
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009a      	lsls	r2, r3, #2
 8002b22:	441a      	add	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <UART_SetConfig+0x1b0>)
 8002b30:	fba3 0302 	umull	r0, r3, r3, r2
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	2064      	movs	r0, #100	; 0x64
 8002b38:	fb00 f303 	mul.w	r3, r0, r3
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	3332      	adds	r3, #50	; 0x32
 8002b42:	4a16      	ldr	r2, [pc, #88]	; (8002b9c <UART_SetConfig+0x1b0>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4e:	4419      	add	r1, r3
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009a      	lsls	r2, r3, #2
 8002b5a:	441a      	add	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <UART_SetConfig+0x1b0>)
 8002b68:	fba3 0302 	umull	r0, r3, r3, r2
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	2064      	movs	r0, #100	; 0x64
 8002b70:	fb00 f303 	mul.w	r3, r0, r3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	3332      	adds	r3, #50	; 0x32
 8002b7a:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <UART_SetConfig+0x1b0>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	440a      	add	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	51eb851f 	.word	0x51eb851f

08002ba0 <__errno>:
 8002ba0:	4b01      	ldr	r3, [pc, #4]	; (8002ba8 <__errno+0x8>)
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	2000000c 	.word	0x2000000c

08002bac <__libc_init_array>:
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	2500      	movs	r5, #0
 8002bb0:	4e0c      	ldr	r6, [pc, #48]	; (8002be4 <__libc_init_array+0x38>)
 8002bb2:	4c0d      	ldr	r4, [pc, #52]	; (8002be8 <__libc_init_array+0x3c>)
 8002bb4:	1ba4      	subs	r4, r4, r6
 8002bb6:	10a4      	asrs	r4, r4, #2
 8002bb8:	42a5      	cmp	r5, r4
 8002bba:	d109      	bne.n	8002bd0 <__libc_init_array+0x24>
 8002bbc:	f000 ff74 	bl	8003aa8 <_init>
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	4e0a      	ldr	r6, [pc, #40]	; (8002bec <__libc_init_array+0x40>)
 8002bc4:	4c0a      	ldr	r4, [pc, #40]	; (8002bf0 <__libc_init_array+0x44>)
 8002bc6:	1ba4      	subs	r4, r4, r6
 8002bc8:	10a4      	asrs	r4, r4, #2
 8002bca:	42a5      	cmp	r5, r4
 8002bcc:	d105      	bne.n	8002bda <__libc_init_array+0x2e>
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
 8002bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bd4:	4798      	blx	r3
 8002bd6:	3501      	adds	r5, #1
 8002bd8:	e7ee      	b.n	8002bb8 <__libc_init_array+0xc>
 8002bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bde:	4798      	blx	r3
 8002be0:	3501      	adds	r5, #1
 8002be2:	e7f2      	b.n	8002bca <__libc_init_array+0x1e>
 8002be4:	08003c00 	.word	0x08003c00
 8002be8:	08003c00 	.word	0x08003c00
 8002bec:	08003c00 	.word	0x08003c00
 8002bf0:	08003c04 	.word	0x08003c04

08002bf4 <memset>:
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4402      	add	r2, r0
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d100      	bne.n	8002bfe <memset+0xa>
 8002bfc:	4770      	bx	lr
 8002bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002c02:	e7f9      	b.n	8002bf8 <memset+0x4>

08002c04 <iprintf>:
 8002c04:	b40f      	push	{r0, r1, r2, r3}
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <iprintf+0x2c>)
 8002c08:	b513      	push	{r0, r1, r4, lr}
 8002c0a:	681c      	ldr	r4, [r3, #0]
 8002c0c:	b124      	cbz	r4, 8002c18 <iprintf+0x14>
 8002c0e:	69a3      	ldr	r3, [r4, #24]
 8002c10:	b913      	cbnz	r3, 8002c18 <iprintf+0x14>
 8002c12:	4620      	mov	r0, r4
 8002c14:	f000 fa22 	bl	800305c <__sinit>
 8002c18:	ab05      	add	r3, sp, #20
 8002c1a:	9a04      	ldr	r2, [sp, #16]
 8002c1c:	68a1      	ldr	r1, [r4, #8]
 8002c1e:	4620      	mov	r0, r4
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	f000 fbd7 	bl	80033d4 <_vfiprintf_r>
 8002c26:	b002      	add	sp, #8
 8002c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c2c:	b004      	add	sp, #16
 8002c2e:	4770      	bx	lr
 8002c30:	2000000c 	.word	0x2000000c

08002c34 <_puts_r>:
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	460e      	mov	r6, r1
 8002c38:	4605      	mov	r5, r0
 8002c3a:	b118      	cbz	r0, 8002c44 <_puts_r+0x10>
 8002c3c:	6983      	ldr	r3, [r0, #24]
 8002c3e:	b90b      	cbnz	r3, 8002c44 <_puts_r+0x10>
 8002c40:	f000 fa0c 	bl	800305c <__sinit>
 8002c44:	69ab      	ldr	r3, [r5, #24]
 8002c46:	68ac      	ldr	r4, [r5, #8]
 8002c48:	b913      	cbnz	r3, 8002c50 <_puts_r+0x1c>
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	f000 fa06 	bl	800305c <__sinit>
 8002c50:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <_puts_r+0xac>)
 8002c52:	429c      	cmp	r4, r3
 8002c54:	d117      	bne.n	8002c86 <_puts_r+0x52>
 8002c56:	686c      	ldr	r4, [r5, #4]
 8002c58:	89a3      	ldrh	r3, [r4, #12]
 8002c5a:	071b      	lsls	r3, r3, #28
 8002c5c:	d51d      	bpl.n	8002c9a <_puts_r+0x66>
 8002c5e:	6923      	ldr	r3, [r4, #16]
 8002c60:	b1db      	cbz	r3, 8002c9a <_puts_r+0x66>
 8002c62:	3e01      	subs	r6, #1
 8002c64:	68a3      	ldr	r3, [r4, #8]
 8002c66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	60a3      	str	r3, [r4, #8]
 8002c6e:	b9e9      	cbnz	r1, 8002cac <_puts_r+0x78>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	da2e      	bge.n	8002cd2 <_puts_r+0x9e>
 8002c74:	4622      	mov	r2, r4
 8002c76:	210a      	movs	r1, #10
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f000 f83f 	bl	8002cfc <__swbuf_r>
 8002c7e:	3001      	adds	r0, #1
 8002c80:	d011      	beq.n	8002ca6 <_puts_r+0x72>
 8002c82:	200a      	movs	r0, #10
 8002c84:	e011      	b.n	8002caa <_puts_r+0x76>
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <_puts_r+0xb0>)
 8002c88:	429c      	cmp	r4, r3
 8002c8a:	d101      	bne.n	8002c90 <_puts_r+0x5c>
 8002c8c:	68ac      	ldr	r4, [r5, #8]
 8002c8e:	e7e3      	b.n	8002c58 <_puts_r+0x24>
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <_puts_r+0xb4>)
 8002c92:	429c      	cmp	r4, r3
 8002c94:	bf08      	it	eq
 8002c96:	68ec      	ldreq	r4, [r5, #12]
 8002c98:	e7de      	b.n	8002c58 <_puts_r+0x24>
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f000 f87f 	bl	8002da0 <__swsetup_r>
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d0dd      	beq.n	8002c62 <_puts_r+0x2e>
 8002ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da04      	bge.n	8002cba <_puts_r+0x86>
 8002cb0:	69a2      	ldr	r2, [r4, #24]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	dc06      	bgt.n	8002cc4 <_puts_r+0x90>
 8002cb6:	290a      	cmp	r1, #10
 8002cb8:	d004      	beq.n	8002cc4 <_puts_r+0x90>
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	6022      	str	r2, [r4, #0]
 8002cc0:	7019      	strb	r1, [r3, #0]
 8002cc2:	e7cf      	b.n	8002c64 <_puts_r+0x30>
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	4628      	mov	r0, r5
 8002cc8:	f000 f818 	bl	8002cfc <__swbuf_r>
 8002ccc:	3001      	adds	r0, #1
 8002cce:	d1c9      	bne.n	8002c64 <_puts_r+0x30>
 8002cd0:	e7e9      	b.n	8002ca6 <_puts_r+0x72>
 8002cd2:	200a      	movs	r0, #10
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	6022      	str	r2, [r4, #0]
 8002cda:	7018      	strb	r0, [r3, #0]
 8002cdc:	e7e5      	b.n	8002caa <_puts_r+0x76>
 8002cde:	bf00      	nop
 8002ce0:	08003b8c 	.word	0x08003b8c
 8002ce4:	08003bac 	.word	0x08003bac
 8002ce8:	08003b6c 	.word	0x08003b6c

08002cec <puts>:
 8002cec:	4b02      	ldr	r3, [pc, #8]	; (8002cf8 <puts+0xc>)
 8002cee:	4601      	mov	r1, r0
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	f7ff bf9f 	b.w	8002c34 <_puts_r>
 8002cf6:	bf00      	nop
 8002cf8:	2000000c 	.word	0x2000000c

08002cfc <__swbuf_r>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	460e      	mov	r6, r1
 8002d00:	4614      	mov	r4, r2
 8002d02:	4605      	mov	r5, r0
 8002d04:	b118      	cbz	r0, 8002d0e <__swbuf_r+0x12>
 8002d06:	6983      	ldr	r3, [r0, #24]
 8002d08:	b90b      	cbnz	r3, 8002d0e <__swbuf_r+0x12>
 8002d0a:	f000 f9a7 	bl	800305c <__sinit>
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <__swbuf_r+0x98>)
 8002d10:	429c      	cmp	r4, r3
 8002d12:	d12a      	bne.n	8002d6a <__swbuf_r+0x6e>
 8002d14:	686c      	ldr	r4, [r5, #4]
 8002d16:	69a3      	ldr	r3, [r4, #24]
 8002d18:	60a3      	str	r3, [r4, #8]
 8002d1a:	89a3      	ldrh	r3, [r4, #12]
 8002d1c:	071a      	lsls	r2, r3, #28
 8002d1e:	d52e      	bpl.n	8002d7e <__swbuf_r+0x82>
 8002d20:	6923      	ldr	r3, [r4, #16]
 8002d22:	b363      	cbz	r3, 8002d7e <__swbuf_r+0x82>
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	6820      	ldr	r0, [r4, #0]
 8002d28:	b2f6      	uxtb	r6, r6
 8002d2a:	1ac0      	subs	r0, r0, r3
 8002d2c:	6963      	ldr	r3, [r4, #20]
 8002d2e:	4637      	mov	r7, r6
 8002d30:	4283      	cmp	r3, r0
 8002d32:	dc04      	bgt.n	8002d3e <__swbuf_r+0x42>
 8002d34:	4621      	mov	r1, r4
 8002d36:	4628      	mov	r0, r5
 8002d38:	f000 f926 	bl	8002f88 <_fflush_r>
 8002d3c:	bb28      	cbnz	r0, 8002d8a <__swbuf_r+0x8e>
 8002d3e:	68a3      	ldr	r3, [r4, #8]
 8002d40:	3001      	adds	r0, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	60a3      	str	r3, [r4, #8]
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	6022      	str	r2, [r4, #0]
 8002d4c:	701e      	strb	r6, [r3, #0]
 8002d4e:	6963      	ldr	r3, [r4, #20]
 8002d50:	4283      	cmp	r3, r0
 8002d52:	d004      	beq.n	8002d5e <__swbuf_r+0x62>
 8002d54:	89a3      	ldrh	r3, [r4, #12]
 8002d56:	07db      	lsls	r3, r3, #31
 8002d58:	d519      	bpl.n	8002d8e <__swbuf_r+0x92>
 8002d5a:	2e0a      	cmp	r6, #10
 8002d5c:	d117      	bne.n	8002d8e <__swbuf_r+0x92>
 8002d5e:	4621      	mov	r1, r4
 8002d60:	4628      	mov	r0, r5
 8002d62:	f000 f911 	bl	8002f88 <_fflush_r>
 8002d66:	b190      	cbz	r0, 8002d8e <__swbuf_r+0x92>
 8002d68:	e00f      	b.n	8002d8a <__swbuf_r+0x8e>
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <__swbuf_r+0x9c>)
 8002d6c:	429c      	cmp	r4, r3
 8002d6e:	d101      	bne.n	8002d74 <__swbuf_r+0x78>
 8002d70:	68ac      	ldr	r4, [r5, #8]
 8002d72:	e7d0      	b.n	8002d16 <__swbuf_r+0x1a>
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <__swbuf_r+0xa0>)
 8002d76:	429c      	cmp	r4, r3
 8002d78:	bf08      	it	eq
 8002d7a:	68ec      	ldreq	r4, [r5, #12]
 8002d7c:	e7cb      	b.n	8002d16 <__swbuf_r+0x1a>
 8002d7e:	4621      	mov	r1, r4
 8002d80:	4628      	mov	r0, r5
 8002d82:	f000 f80d 	bl	8002da0 <__swsetup_r>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d0cc      	beq.n	8002d24 <__swbuf_r+0x28>
 8002d8a:	f04f 37ff 	mov.w	r7, #4294967295
 8002d8e:	4638      	mov	r0, r7
 8002d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d92:	bf00      	nop
 8002d94:	08003b8c 	.word	0x08003b8c
 8002d98:	08003bac 	.word	0x08003bac
 8002d9c:	08003b6c 	.word	0x08003b6c

08002da0 <__swsetup_r>:
 8002da0:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <__swsetup_r+0xcc>)
 8002da2:	b570      	push	{r4, r5, r6, lr}
 8002da4:	681d      	ldr	r5, [r3, #0]
 8002da6:	4606      	mov	r6, r0
 8002da8:	460c      	mov	r4, r1
 8002daa:	b125      	cbz	r5, 8002db6 <__swsetup_r+0x16>
 8002dac:	69ab      	ldr	r3, [r5, #24]
 8002dae:	b913      	cbnz	r3, 8002db6 <__swsetup_r+0x16>
 8002db0:	4628      	mov	r0, r5
 8002db2:	f000 f953 	bl	800305c <__sinit>
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <__swsetup_r+0xd0>)
 8002db8:	429c      	cmp	r4, r3
 8002dba:	d10f      	bne.n	8002ddc <__swsetup_r+0x3c>
 8002dbc:	686c      	ldr	r4, [r5, #4]
 8002dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	0715      	lsls	r5, r2, #28
 8002dc6:	d42c      	bmi.n	8002e22 <__swsetup_r+0x82>
 8002dc8:	06d0      	lsls	r0, r2, #27
 8002dca:	d411      	bmi.n	8002df0 <__swsetup_r+0x50>
 8002dcc:	2209      	movs	r2, #9
 8002dce:	6032      	str	r2, [r6, #0]
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd4:	81a3      	strh	r3, [r4, #12]
 8002dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dda:	e03e      	b.n	8002e5a <__swsetup_r+0xba>
 8002ddc:	4b25      	ldr	r3, [pc, #148]	; (8002e74 <__swsetup_r+0xd4>)
 8002dde:	429c      	cmp	r4, r3
 8002de0:	d101      	bne.n	8002de6 <__swsetup_r+0x46>
 8002de2:	68ac      	ldr	r4, [r5, #8]
 8002de4:	e7eb      	b.n	8002dbe <__swsetup_r+0x1e>
 8002de6:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <__swsetup_r+0xd8>)
 8002de8:	429c      	cmp	r4, r3
 8002dea:	bf08      	it	eq
 8002dec:	68ec      	ldreq	r4, [r5, #12]
 8002dee:	e7e6      	b.n	8002dbe <__swsetup_r+0x1e>
 8002df0:	0751      	lsls	r1, r2, #29
 8002df2:	d512      	bpl.n	8002e1a <__swsetup_r+0x7a>
 8002df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002df6:	b141      	cbz	r1, 8002e0a <__swsetup_r+0x6a>
 8002df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dfc:	4299      	cmp	r1, r3
 8002dfe:	d002      	beq.n	8002e06 <__swsetup_r+0x66>
 8002e00:	4630      	mov	r0, r6
 8002e02:	f000 fa19 	bl	8003238 <_free_r>
 8002e06:	2300      	movs	r3, #0
 8002e08:	6363      	str	r3, [r4, #52]	; 0x34
 8002e0a:	89a3      	ldrh	r3, [r4, #12]
 8002e0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e10:	81a3      	strh	r3, [r4, #12]
 8002e12:	2300      	movs	r3, #0
 8002e14:	6063      	str	r3, [r4, #4]
 8002e16:	6923      	ldr	r3, [r4, #16]
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	89a3      	ldrh	r3, [r4, #12]
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	81a3      	strh	r3, [r4, #12]
 8002e22:	6923      	ldr	r3, [r4, #16]
 8002e24:	b94b      	cbnz	r3, 8002e3a <__swsetup_r+0x9a>
 8002e26:	89a3      	ldrh	r3, [r4, #12]
 8002e28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d003      	beq.n	8002e3a <__swsetup_r+0x9a>
 8002e32:	4621      	mov	r1, r4
 8002e34:	4630      	mov	r0, r6
 8002e36:	f000 f9bf 	bl	80031b8 <__smakebuf_r>
 8002e3a:	89a2      	ldrh	r2, [r4, #12]
 8002e3c:	f012 0301 	ands.w	r3, r2, #1
 8002e40:	d00c      	beq.n	8002e5c <__swsetup_r+0xbc>
 8002e42:	2300      	movs	r3, #0
 8002e44:	60a3      	str	r3, [r4, #8]
 8002e46:	6963      	ldr	r3, [r4, #20]
 8002e48:	425b      	negs	r3, r3
 8002e4a:	61a3      	str	r3, [r4, #24]
 8002e4c:	6923      	ldr	r3, [r4, #16]
 8002e4e:	b953      	cbnz	r3, 8002e66 <__swsetup_r+0xc6>
 8002e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002e58:	d1ba      	bne.n	8002dd0 <__swsetup_r+0x30>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	0792      	lsls	r2, r2, #30
 8002e5e:	bf58      	it	pl
 8002e60:	6963      	ldrpl	r3, [r4, #20]
 8002e62:	60a3      	str	r3, [r4, #8]
 8002e64:	e7f2      	b.n	8002e4c <__swsetup_r+0xac>
 8002e66:	2000      	movs	r0, #0
 8002e68:	e7f7      	b.n	8002e5a <__swsetup_r+0xba>
 8002e6a:	bf00      	nop
 8002e6c:	2000000c 	.word	0x2000000c
 8002e70:	08003b8c 	.word	0x08003b8c
 8002e74:	08003bac 	.word	0x08003bac
 8002e78:	08003b6c 	.word	0x08003b6c

08002e7c <__sflush_r>:
 8002e7c:	898a      	ldrh	r2, [r1, #12]
 8002e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e82:	4605      	mov	r5, r0
 8002e84:	0710      	lsls	r0, r2, #28
 8002e86:	460c      	mov	r4, r1
 8002e88:	d458      	bmi.n	8002f3c <__sflush_r+0xc0>
 8002e8a:	684b      	ldr	r3, [r1, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	dc05      	bgt.n	8002e9c <__sflush_r+0x20>
 8002e90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	dc02      	bgt.n	8002e9c <__sflush_r+0x20>
 8002e96:	2000      	movs	r0, #0
 8002e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e9e:	2e00      	cmp	r6, #0
 8002ea0:	d0f9      	beq.n	8002e96 <__sflush_r+0x1a>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ea8:	682f      	ldr	r7, [r5, #0]
 8002eaa:	6a21      	ldr	r1, [r4, #32]
 8002eac:	602b      	str	r3, [r5, #0]
 8002eae:	d032      	beq.n	8002f16 <__sflush_r+0x9a>
 8002eb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	075a      	lsls	r2, r3, #29
 8002eb6:	d505      	bpl.n	8002ec4 <__sflush_r+0x48>
 8002eb8:	6863      	ldr	r3, [r4, #4]
 8002eba:	1ac0      	subs	r0, r0, r3
 8002ebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ebe:	b10b      	cbz	r3, 8002ec4 <__sflush_r+0x48>
 8002ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ec2:	1ac0      	subs	r0, r0, r3
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eca:	6a21      	ldr	r1, [r4, #32]
 8002ecc:	4628      	mov	r0, r5
 8002ece:	47b0      	blx	r6
 8002ed0:	1c43      	adds	r3, r0, #1
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	d106      	bne.n	8002ee4 <__sflush_r+0x68>
 8002ed6:	6829      	ldr	r1, [r5, #0]
 8002ed8:	291d      	cmp	r1, #29
 8002eda:	d848      	bhi.n	8002f6e <__sflush_r+0xf2>
 8002edc:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <__sflush_r+0x108>)
 8002ede:	40ca      	lsrs	r2, r1
 8002ee0:	07d6      	lsls	r6, r2, #31
 8002ee2:	d544      	bpl.n	8002f6e <__sflush_r+0xf2>
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	6062      	str	r2, [r4, #4]
 8002ee8:	6922      	ldr	r2, [r4, #16]
 8002eea:	04d9      	lsls	r1, r3, #19
 8002eec:	6022      	str	r2, [r4, #0]
 8002eee:	d504      	bpl.n	8002efa <__sflush_r+0x7e>
 8002ef0:	1c42      	adds	r2, r0, #1
 8002ef2:	d101      	bne.n	8002ef8 <__sflush_r+0x7c>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	b903      	cbnz	r3, 8002efa <__sflush_r+0x7e>
 8002ef8:	6560      	str	r0, [r4, #84]	; 0x54
 8002efa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002efc:	602f      	str	r7, [r5, #0]
 8002efe:	2900      	cmp	r1, #0
 8002f00:	d0c9      	beq.n	8002e96 <__sflush_r+0x1a>
 8002f02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f06:	4299      	cmp	r1, r3
 8002f08:	d002      	beq.n	8002f10 <__sflush_r+0x94>
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f000 f994 	bl	8003238 <_free_r>
 8002f10:	2000      	movs	r0, #0
 8002f12:	6360      	str	r0, [r4, #52]	; 0x34
 8002f14:	e7c0      	b.n	8002e98 <__sflush_r+0x1c>
 8002f16:	2301      	movs	r3, #1
 8002f18:	4628      	mov	r0, r5
 8002f1a:	47b0      	blx	r6
 8002f1c:	1c41      	adds	r1, r0, #1
 8002f1e:	d1c8      	bne.n	8002eb2 <__sflush_r+0x36>
 8002f20:	682b      	ldr	r3, [r5, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0c5      	beq.n	8002eb2 <__sflush_r+0x36>
 8002f26:	2b1d      	cmp	r3, #29
 8002f28:	d001      	beq.n	8002f2e <__sflush_r+0xb2>
 8002f2a:	2b16      	cmp	r3, #22
 8002f2c:	d101      	bne.n	8002f32 <__sflush_r+0xb6>
 8002f2e:	602f      	str	r7, [r5, #0]
 8002f30:	e7b1      	b.n	8002e96 <__sflush_r+0x1a>
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f38:	81a3      	strh	r3, [r4, #12]
 8002f3a:	e7ad      	b.n	8002e98 <__sflush_r+0x1c>
 8002f3c:	690f      	ldr	r7, [r1, #16]
 8002f3e:	2f00      	cmp	r7, #0
 8002f40:	d0a9      	beq.n	8002e96 <__sflush_r+0x1a>
 8002f42:	0793      	lsls	r3, r2, #30
 8002f44:	bf18      	it	ne
 8002f46:	2300      	movne	r3, #0
 8002f48:	680e      	ldr	r6, [r1, #0]
 8002f4a:	bf08      	it	eq
 8002f4c:	694b      	ldreq	r3, [r1, #20]
 8002f4e:	eba6 0807 	sub.w	r8, r6, r7
 8002f52:	600f      	str	r7, [r1, #0]
 8002f54:	608b      	str	r3, [r1, #8]
 8002f56:	f1b8 0f00 	cmp.w	r8, #0
 8002f5a:	dd9c      	ble.n	8002e96 <__sflush_r+0x1a>
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	463a      	mov	r2, r7
 8002f60:	6a21      	ldr	r1, [r4, #32]
 8002f62:	4628      	mov	r0, r5
 8002f64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f66:	47b0      	blx	r6
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	dc06      	bgt.n	8002f7a <__sflush_r+0xfe>
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f72:	81a3      	strh	r3, [r4, #12]
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	e78e      	b.n	8002e98 <__sflush_r+0x1c>
 8002f7a:	4407      	add	r7, r0
 8002f7c:	eba8 0800 	sub.w	r8, r8, r0
 8002f80:	e7e9      	b.n	8002f56 <__sflush_r+0xda>
 8002f82:	bf00      	nop
 8002f84:	20400001 	.word	0x20400001

08002f88 <_fflush_r>:
 8002f88:	b538      	push	{r3, r4, r5, lr}
 8002f8a:	690b      	ldr	r3, [r1, #16]
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	460c      	mov	r4, r1
 8002f90:	b1db      	cbz	r3, 8002fca <_fflush_r+0x42>
 8002f92:	b118      	cbz	r0, 8002f9c <_fflush_r+0x14>
 8002f94:	6983      	ldr	r3, [r0, #24]
 8002f96:	b90b      	cbnz	r3, 8002f9c <_fflush_r+0x14>
 8002f98:	f000 f860 	bl	800305c <__sinit>
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <_fflush_r+0x48>)
 8002f9e:	429c      	cmp	r4, r3
 8002fa0:	d109      	bne.n	8002fb6 <_fflush_r+0x2e>
 8002fa2:	686c      	ldr	r4, [r5, #4]
 8002fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fa8:	b17b      	cbz	r3, 8002fca <_fflush_r+0x42>
 8002faa:	4621      	mov	r1, r4
 8002fac:	4628      	mov	r0, r5
 8002fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fb2:	f7ff bf63 	b.w	8002e7c <__sflush_r>
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <_fflush_r+0x4c>)
 8002fb8:	429c      	cmp	r4, r3
 8002fba:	d101      	bne.n	8002fc0 <_fflush_r+0x38>
 8002fbc:	68ac      	ldr	r4, [r5, #8]
 8002fbe:	e7f1      	b.n	8002fa4 <_fflush_r+0x1c>
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <_fflush_r+0x50>)
 8002fc2:	429c      	cmp	r4, r3
 8002fc4:	bf08      	it	eq
 8002fc6:	68ec      	ldreq	r4, [r5, #12]
 8002fc8:	e7ec      	b.n	8002fa4 <_fflush_r+0x1c>
 8002fca:	2000      	movs	r0, #0
 8002fcc:	bd38      	pop	{r3, r4, r5, pc}
 8002fce:	bf00      	nop
 8002fd0:	08003b8c 	.word	0x08003b8c
 8002fd4:	08003bac 	.word	0x08003bac
 8002fd8:	08003b6c 	.word	0x08003b6c

08002fdc <std>:
 8002fdc:	2300      	movs	r3, #0
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8002fe6:	6083      	str	r3, [r0, #8]
 8002fe8:	8181      	strh	r1, [r0, #12]
 8002fea:	6643      	str	r3, [r0, #100]	; 0x64
 8002fec:	81c2      	strh	r2, [r0, #14]
 8002fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ff2:	6183      	str	r3, [r0, #24]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	305c      	adds	r0, #92	; 0x5c
 8002ffa:	f7ff fdfb 	bl	8002bf4 <memset>
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <std+0x38>)
 8003000:	6224      	str	r4, [r4, #32]
 8003002:	6263      	str	r3, [r4, #36]	; 0x24
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <std+0x3c>)
 8003006:	62a3      	str	r3, [r4, #40]	; 0x28
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <std+0x40>)
 800300a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <std+0x44>)
 800300e:	6323      	str	r3, [r4, #48]	; 0x30
 8003010:	bd10      	pop	{r4, pc}
 8003012:	bf00      	nop
 8003014:	08003931 	.word	0x08003931
 8003018:	08003953 	.word	0x08003953
 800301c:	0800398b 	.word	0x0800398b
 8003020:	080039af 	.word	0x080039af

08003024 <_cleanup_r>:
 8003024:	4901      	ldr	r1, [pc, #4]	; (800302c <_cleanup_r+0x8>)
 8003026:	f000 b885 	b.w	8003134 <_fwalk_reent>
 800302a:	bf00      	nop
 800302c:	08002f89 	.word	0x08002f89

08003030 <__sfmoreglue>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	2568      	movs	r5, #104	; 0x68
 8003034:	1e4a      	subs	r2, r1, #1
 8003036:	4355      	muls	r5, r2
 8003038:	460e      	mov	r6, r1
 800303a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800303e:	f000 f947 	bl	80032d0 <_malloc_r>
 8003042:	4604      	mov	r4, r0
 8003044:	b140      	cbz	r0, 8003058 <__sfmoreglue+0x28>
 8003046:	2100      	movs	r1, #0
 8003048:	e9c0 1600 	strd	r1, r6, [r0]
 800304c:	300c      	adds	r0, #12
 800304e:	60a0      	str	r0, [r4, #8]
 8003050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003054:	f7ff fdce 	bl	8002bf4 <memset>
 8003058:	4620      	mov	r0, r4
 800305a:	bd70      	pop	{r4, r5, r6, pc}

0800305c <__sinit>:
 800305c:	6983      	ldr	r3, [r0, #24]
 800305e:	b510      	push	{r4, lr}
 8003060:	4604      	mov	r4, r0
 8003062:	bb33      	cbnz	r3, 80030b2 <__sinit+0x56>
 8003064:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003068:	6503      	str	r3, [r0, #80]	; 0x50
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <__sinit+0x58>)
 800306c:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <__sinit+0x5c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6282      	str	r2, [r0, #40]	; 0x28
 8003072:	4298      	cmp	r0, r3
 8003074:	bf04      	itt	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	6183      	streq	r3, [r0, #24]
 800307a:	f000 f81f 	bl	80030bc <__sfp>
 800307e:	6060      	str	r0, [r4, #4]
 8003080:	4620      	mov	r0, r4
 8003082:	f000 f81b 	bl	80030bc <__sfp>
 8003086:	60a0      	str	r0, [r4, #8]
 8003088:	4620      	mov	r0, r4
 800308a:	f000 f817 	bl	80030bc <__sfp>
 800308e:	2200      	movs	r2, #0
 8003090:	60e0      	str	r0, [r4, #12]
 8003092:	2104      	movs	r1, #4
 8003094:	6860      	ldr	r0, [r4, #4]
 8003096:	f7ff ffa1 	bl	8002fdc <std>
 800309a:	2201      	movs	r2, #1
 800309c:	2109      	movs	r1, #9
 800309e:	68a0      	ldr	r0, [r4, #8]
 80030a0:	f7ff ff9c 	bl	8002fdc <std>
 80030a4:	2202      	movs	r2, #2
 80030a6:	2112      	movs	r1, #18
 80030a8:	68e0      	ldr	r0, [r4, #12]
 80030aa:	f7ff ff97 	bl	8002fdc <std>
 80030ae:	2301      	movs	r3, #1
 80030b0:	61a3      	str	r3, [r4, #24]
 80030b2:	bd10      	pop	{r4, pc}
 80030b4:	08003b68 	.word	0x08003b68
 80030b8:	08003025 	.word	0x08003025

080030bc <__sfp>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	4b1b      	ldr	r3, [pc, #108]	; (800312c <__sfp+0x70>)
 80030c0:	4607      	mov	r7, r0
 80030c2:	681e      	ldr	r6, [r3, #0]
 80030c4:	69b3      	ldr	r3, [r6, #24]
 80030c6:	b913      	cbnz	r3, 80030ce <__sfp+0x12>
 80030c8:	4630      	mov	r0, r6
 80030ca:	f7ff ffc7 	bl	800305c <__sinit>
 80030ce:	3648      	adds	r6, #72	; 0x48
 80030d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	d503      	bpl.n	80030e0 <__sfp+0x24>
 80030d8:	6833      	ldr	r3, [r6, #0]
 80030da:	b133      	cbz	r3, 80030ea <__sfp+0x2e>
 80030dc:	6836      	ldr	r6, [r6, #0]
 80030de:	e7f7      	b.n	80030d0 <__sfp+0x14>
 80030e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80030e4:	b16d      	cbz	r5, 8003102 <__sfp+0x46>
 80030e6:	3468      	adds	r4, #104	; 0x68
 80030e8:	e7f4      	b.n	80030d4 <__sfp+0x18>
 80030ea:	2104      	movs	r1, #4
 80030ec:	4638      	mov	r0, r7
 80030ee:	f7ff ff9f 	bl	8003030 <__sfmoreglue>
 80030f2:	6030      	str	r0, [r6, #0]
 80030f4:	2800      	cmp	r0, #0
 80030f6:	d1f1      	bne.n	80030dc <__sfp+0x20>
 80030f8:	230c      	movs	r3, #12
 80030fa:	4604      	mov	r4, r0
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4620      	mov	r0, r4
 8003100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <__sfp+0x74>)
 8003104:	6665      	str	r5, [r4, #100]	; 0x64
 8003106:	e9c4 5500 	strd	r5, r5, [r4]
 800310a:	60a5      	str	r5, [r4, #8]
 800310c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003110:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003114:	2208      	movs	r2, #8
 8003116:	4629      	mov	r1, r5
 8003118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800311c:	f7ff fd6a 	bl	8002bf4 <memset>
 8003120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003128:	e7e9      	b.n	80030fe <__sfp+0x42>
 800312a:	bf00      	nop
 800312c:	08003b68 	.word	0x08003b68
 8003130:	ffff0001 	.word	0xffff0001

08003134 <_fwalk_reent>:
 8003134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003138:	4680      	mov	r8, r0
 800313a:	4689      	mov	r9, r1
 800313c:	2600      	movs	r6, #0
 800313e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003142:	b914      	cbnz	r4, 800314a <_fwalk_reent+0x16>
 8003144:	4630      	mov	r0, r6
 8003146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800314a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800314e:	3f01      	subs	r7, #1
 8003150:	d501      	bpl.n	8003156 <_fwalk_reent+0x22>
 8003152:	6824      	ldr	r4, [r4, #0]
 8003154:	e7f5      	b.n	8003142 <_fwalk_reent+0xe>
 8003156:	89ab      	ldrh	r3, [r5, #12]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d907      	bls.n	800316c <_fwalk_reent+0x38>
 800315c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003160:	3301      	adds	r3, #1
 8003162:	d003      	beq.n	800316c <_fwalk_reent+0x38>
 8003164:	4629      	mov	r1, r5
 8003166:	4640      	mov	r0, r8
 8003168:	47c8      	blx	r9
 800316a:	4306      	orrs	r6, r0
 800316c:	3568      	adds	r5, #104	; 0x68
 800316e:	e7ee      	b.n	800314e <_fwalk_reent+0x1a>

08003170 <__swhatbuf_r>:
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	460e      	mov	r6, r1
 8003174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003178:	b096      	sub	sp, #88	; 0x58
 800317a:	2900      	cmp	r1, #0
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	da07      	bge.n	8003192 <__swhatbuf_r+0x22>
 8003182:	2300      	movs	r3, #0
 8003184:	602b      	str	r3, [r5, #0]
 8003186:	89b3      	ldrh	r3, [r6, #12]
 8003188:	061a      	lsls	r2, r3, #24
 800318a:	d410      	bmi.n	80031ae <__swhatbuf_r+0x3e>
 800318c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003190:	e00e      	b.n	80031b0 <__swhatbuf_r+0x40>
 8003192:	466a      	mov	r2, sp
 8003194:	f000 fc32 	bl	80039fc <_fstat_r>
 8003198:	2800      	cmp	r0, #0
 800319a:	dbf2      	blt.n	8003182 <__swhatbuf_r+0x12>
 800319c:	9a01      	ldr	r2, [sp, #4]
 800319e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031a6:	425a      	negs	r2, r3
 80031a8:	415a      	adcs	r2, r3
 80031aa:	602a      	str	r2, [r5, #0]
 80031ac:	e7ee      	b.n	800318c <__swhatbuf_r+0x1c>
 80031ae:	2340      	movs	r3, #64	; 0x40
 80031b0:	2000      	movs	r0, #0
 80031b2:	6023      	str	r3, [r4, #0]
 80031b4:	b016      	add	sp, #88	; 0x58
 80031b6:	bd70      	pop	{r4, r5, r6, pc}

080031b8 <__smakebuf_r>:
 80031b8:	898b      	ldrh	r3, [r1, #12]
 80031ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031bc:	079d      	lsls	r5, r3, #30
 80031be:	4606      	mov	r6, r0
 80031c0:	460c      	mov	r4, r1
 80031c2:	d507      	bpl.n	80031d4 <__smakebuf_r+0x1c>
 80031c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	6123      	str	r3, [r4, #16]
 80031cc:	2301      	movs	r3, #1
 80031ce:	6163      	str	r3, [r4, #20]
 80031d0:	b002      	add	sp, #8
 80031d2:	bd70      	pop	{r4, r5, r6, pc}
 80031d4:	ab01      	add	r3, sp, #4
 80031d6:	466a      	mov	r2, sp
 80031d8:	f7ff ffca 	bl	8003170 <__swhatbuf_r>
 80031dc:	9900      	ldr	r1, [sp, #0]
 80031de:	4605      	mov	r5, r0
 80031e0:	4630      	mov	r0, r6
 80031e2:	f000 f875 	bl	80032d0 <_malloc_r>
 80031e6:	b948      	cbnz	r0, 80031fc <__smakebuf_r+0x44>
 80031e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031ec:	059a      	lsls	r2, r3, #22
 80031ee:	d4ef      	bmi.n	80031d0 <__smakebuf_r+0x18>
 80031f0:	f023 0303 	bic.w	r3, r3, #3
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	81a3      	strh	r3, [r4, #12]
 80031fa:	e7e3      	b.n	80031c4 <__smakebuf_r+0xc>
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <__smakebuf_r+0x7c>)
 80031fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	6020      	str	r0, [r4, #0]
 8003204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003208:	81a3      	strh	r3, [r4, #12]
 800320a:	9b00      	ldr	r3, [sp, #0]
 800320c:	6120      	str	r0, [r4, #16]
 800320e:	6163      	str	r3, [r4, #20]
 8003210:	9b01      	ldr	r3, [sp, #4]
 8003212:	b15b      	cbz	r3, 800322c <__smakebuf_r+0x74>
 8003214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003218:	4630      	mov	r0, r6
 800321a:	f000 fc01 	bl	8003a20 <_isatty_r>
 800321e:	b128      	cbz	r0, 800322c <__smakebuf_r+0x74>
 8003220:	89a3      	ldrh	r3, [r4, #12]
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	81a3      	strh	r3, [r4, #12]
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	431d      	orrs	r5, r3
 8003230:	81a5      	strh	r5, [r4, #12]
 8003232:	e7cd      	b.n	80031d0 <__smakebuf_r+0x18>
 8003234:	08003025 	.word	0x08003025

08003238 <_free_r>:
 8003238:	b538      	push	{r3, r4, r5, lr}
 800323a:	4605      	mov	r5, r0
 800323c:	2900      	cmp	r1, #0
 800323e:	d043      	beq.n	80032c8 <_free_r+0x90>
 8003240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003244:	1f0c      	subs	r4, r1, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	bfb8      	it	lt
 800324a:	18e4      	addlt	r4, r4, r3
 800324c:	f000 fc18 	bl	8003a80 <__malloc_lock>
 8003250:	4a1e      	ldr	r2, [pc, #120]	; (80032cc <_free_r+0x94>)
 8003252:	6813      	ldr	r3, [r2, #0]
 8003254:	4610      	mov	r0, r2
 8003256:	b933      	cbnz	r3, 8003266 <_free_r+0x2e>
 8003258:	6063      	str	r3, [r4, #4]
 800325a:	6014      	str	r4, [r2, #0]
 800325c:	4628      	mov	r0, r5
 800325e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003262:	f000 bc0e 	b.w	8003a82 <__malloc_unlock>
 8003266:	42a3      	cmp	r3, r4
 8003268:	d90b      	bls.n	8003282 <_free_r+0x4a>
 800326a:	6821      	ldr	r1, [r4, #0]
 800326c:	1862      	adds	r2, r4, r1
 800326e:	4293      	cmp	r3, r2
 8003270:	bf01      	itttt	eq
 8003272:	681a      	ldreq	r2, [r3, #0]
 8003274:	685b      	ldreq	r3, [r3, #4]
 8003276:	1852      	addeq	r2, r2, r1
 8003278:	6022      	streq	r2, [r4, #0]
 800327a:	6063      	str	r3, [r4, #4]
 800327c:	6004      	str	r4, [r0, #0]
 800327e:	e7ed      	b.n	800325c <_free_r+0x24>
 8003280:	4613      	mov	r3, r2
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	b10a      	cbz	r2, 800328a <_free_r+0x52>
 8003286:	42a2      	cmp	r2, r4
 8003288:	d9fa      	bls.n	8003280 <_free_r+0x48>
 800328a:	6819      	ldr	r1, [r3, #0]
 800328c:	1858      	adds	r0, r3, r1
 800328e:	42a0      	cmp	r0, r4
 8003290:	d10b      	bne.n	80032aa <_free_r+0x72>
 8003292:	6820      	ldr	r0, [r4, #0]
 8003294:	4401      	add	r1, r0
 8003296:	1858      	adds	r0, r3, r1
 8003298:	4282      	cmp	r2, r0
 800329a:	6019      	str	r1, [r3, #0]
 800329c:	d1de      	bne.n	800325c <_free_r+0x24>
 800329e:	6810      	ldr	r0, [r2, #0]
 80032a0:	6852      	ldr	r2, [r2, #4]
 80032a2:	4401      	add	r1, r0
 80032a4:	6019      	str	r1, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	e7d8      	b.n	800325c <_free_r+0x24>
 80032aa:	d902      	bls.n	80032b2 <_free_r+0x7a>
 80032ac:	230c      	movs	r3, #12
 80032ae:	602b      	str	r3, [r5, #0]
 80032b0:	e7d4      	b.n	800325c <_free_r+0x24>
 80032b2:	6820      	ldr	r0, [r4, #0]
 80032b4:	1821      	adds	r1, r4, r0
 80032b6:	428a      	cmp	r2, r1
 80032b8:	bf01      	itttt	eq
 80032ba:	6811      	ldreq	r1, [r2, #0]
 80032bc:	6852      	ldreq	r2, [r2, #4]
 80032be:	1809      	addeq	r1, r1, r0
 80032c0:	6021      	streq	r1, [r4, #0]
 80032c2:	6062      	str	r2, [r4, #4]
 80032c4:	605c      	str	r4, [r3, #4]
 80032c6:	e7c9      	b.n	800325c <_free_r+0x24>
 80032c8:	bd38      	pop	{r3, r4, r5, pc}
 80032ca:	bf00      	nop
 80032cc:	2000015c 	.word	0x2000015c

080032d0 <_malloc_r>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	1ccd      	adds	r5, r1, #3
 80032d4:	f025 0503 	bic.w	r5, r5, #3
 80032d8:	3508      	adds	r5, #8
 80032da:	2d0c      	cmp	r5, #12
 80032dc:	bf38      	it	cc
 80032de:	250c      	movcc	r5, #12
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	4606      	mov	r6, r0
 80032e4:	db01      	blt.n	80032ea <_malloc_r+0x1a>
 80032e6:	42a9      	cmp	r1, r5
 80032e8:	d903      	bls.n	80032f2 <_malloc_r+0x22>
 80032ea:	230c      	movs	r3, #12
 80032ec:	6033      	str	r3, [r6, #0]
 80032ee:	2000      	movs	r0, #0
 80032f0:	bd70      	pop	{r4, r5, r6, pc}
 80032f2:	f000 fbc5 	bl	8003a80 <__malloc_lock>
 80032f6:	4a21      	ldr	r2, [pc, #132]	; (800337c <_malloc_r+0xac>)
 80032f8:	6814      	ldr	r4, [r2, #0]
 80032fa:	4621      	mov	r1, r4
 80032fc:	b991      	cbnz	r1, 8003324 <_malloc_r+0x54>
 80032fe:	4c20      	ldr	r4, [pc, #128]	; (8003380 <_malloc_r+0xb0>)
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	b91b      	cbnz	r3, 800330c <_malloc_r+0x3c>
 8003304:	4630      	mov	r0, r6
 8003306:	f000 fb03 	bl	8003910 <_sbrk_r>
 800330a:	6020      	str	r0, [r4, #0]
 800330c:	4629      	mov	r1, r5
 800330e:	4630      	mov	r0, r6
 8003310:	f000 fafe 	bl	8003910 <_sbrk_r>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d124      	bne.n	8003362 <_malloc_r+0x92>
 8003318:	230c      	movs	r3, #12
 800331a:	4630      	mov	r0, r6
 800331c:	6033      	str	r3, [r6, #0]
 800331e:	f000 fbb0 	bl	8003a82 <__malloc_unlock>
 8003322:	e7e4      	b.n	80032ee <_malloc_r+0x1e>
 8003324:	680b      	ldr	r3, [r1, #0]
 8003326:	1b5b      	subs	r3, r3, r5
 8003328:	d418      	bmi.n	800335c <_malloc_r+0x8c>
 800332a:	2b0b      	cmp	r3, #11
 800332c:	d90f      	bls.n	800334e <_malloc_r+0x7e>
 800332e:	600b      	str	r3, [r1, #0]
 8003330:	18cc      	adds	r4, r1, r3
 8003332:	50cd      	str	r5, [r1, r3]
 8003334:	4630      	mov	r0, r6
 8003336:	f000 fba4 	bl	8003a82 <__malloc_unlock>
 800333a:	f104 000b 	add.w	r0, r4, #11
 800333e:	1d23      	adds	r3, r4, #4
 8003340:	f020 0007 	bic.w	r0, r0, #7
 8003344:	1ac3      	subs	r3, r0, r3
 8003346:	d0d3      	beq.n	80032f0 <_malloc_r+0x20>
 8003348:	425a      	negs	r2, r3
 800334a:	50e2      	str	r2, [r4, r3]
 800334c:	e7d0      	b.n	80032f0 <_malloc_r+0x20>
 800334e:	684b      	ldr	r3, [r1, #4]
 8003350:	428c      	cmp	r4, r1
 8003352:	bf16      	itet	ne
 8003354:	6063      	strne	r3, [r4, #4]
 8003356:	6013      	streq	r3, [r2, #0]
 8003358:	460c      	movne	r4, r1
 800335a:	e7eb      	b.n	8003334 <_malloc_r+0x64>
 800335c:	460c      	mov	r4, r1
 800335e:	6849      	ldr	r1, [r1, #4]
 8003360:	e7cc      	b.n	80032fc <_malloc_r+0x2c>
 8003362:	1cc4      	adds	r4, r0, #3
 8003364:	f024 0403 	bic.w	r4, r4, #3
 8003368:	42a0      	cmp	r0, r4
 800336a:	d005      	beq.n	8003378 <_malloc_r+0xa8>
 800336c:	1a21      	subs	r1, r4, r0
 800336e:	4630      	mov	r0, r6
 8003370:	f000 face 	bl	8003910 <_sbrk_r>
 8003374:	3001      	adds	r0, #1
 8003376:	d0cf      	beq.n	8003318 <_malloc_r+0x48>
 8003378:	6025      	str	r5, [r4, #0]
 800337a:	e7db      	b.n	8003334 <_malloc_r+0x64>
 800337c:	2000015c 	.word	0x2000015c
 8003380:	20000160 	.word	0x20000160

08003384 <__sfputc_r>:
 8003384:	6893      	ldr	r3, [r2, #8]
 8003386:	b410      	push	{r4}
 8003388:	3b01      	subs	r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	6093      	str	r3, [r2, #8]
 800338e:	da07      	bge.n	80033a0 <__sfputc_r+0x1c>
 8003390:	6994      	ldr	r4, [r2, #24]
 8003392:	42a3      	cmp	r3, r4
 8003394:	db01      	blt.n	800339a <__sfputc_r+0x16>
 8003396:	290a      	cmp	r1, #10
 8003398:	d102      	bne.n	80033a0 <__sfputc_r+0x1c>
 800339a:	bc10      	pop	{r4}
 800339c:	f7ff bcae 	b.w	8002cfc <__swbuf_r>
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	1c58      	adds	r0, r3, #1
 80033a4:	6010      	str	r0, [r2, #0]
 80033a6:	7019      	strb	r1, [r3, #0]
 80033a8:	4608      	mov	r0, r1
 80033aa:	bc10      	pop	{r4}
 80033ac:	4770      	bx	lr

080033ae <__sfputs_r>:
 80033ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b0:	4606      	mov	r6, r0
 80033b2:	460f      	mov	r7, r1
 80033b4:	4614      	mov	r4, r2
 80033b6:	18d5      	adds	r5, r2, r3
 80033b8:	42ac      	cmp	r4, r5
 80033ba:	d101      	bne.n	80033c0 <__sfputs_r+0x12>
 80033bc:	2000      	movs	r0, #0
 80033be:	e007      	b.n	80033d0 <__sfputs_r+0x22>
 80033c0:	463a      	mov	r2, r7
 80033c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c6:	4630      	mov	r0, r6
 80033c8:	f7ff ffdc 	bl	8003384 <__sfputc_r>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d1f3      	bne.n	80033b8 <__sfputs_r+0xa>
 80033d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033d4 <_vfiprintf_r>:
 80033d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d8:	460c      	mov	r4, r1
 80033da:	b09d      	sub	sp, #116	; 0x74
 80033dc:	4617      	mov	r7, r2
 80033de:	461d      	mov	r5, r3
 80033e0:	4606      	mov	r6, r0
 80033e2:	b118      	cbz	r0, 80033ec <_vfiprintf_r+0x18>
 80033e4:	6983      	ldr	r3, [r0, #24]
 80033e6:	b90b      	cbnz	r3, 80033ec <_vfiprintf_r+0x18>
 80033e8:	f7ff fe38 	bl	800305c <__sinit>
 80033ec:	4b7c      	ldr	r3, [pc, #496]	; (80035e0 <_vfiprintf_r+0x20c>)
 80033ee:	429c      	cmp	r4, r3
 80033f0:	d158      	bne.n	80034a4 <_vfiprintf_r+0xd0>
 80033f2:	6874      	ldr	r4, [r6, #4]
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	0718      	lsls	r0, r3, #28
 80033f8:	d55e      	bpl.n	80034b8 <_vfiprintf_r+0xe4>
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d05b      	beq.n	80034b8 <_vfiprintf_r+0xe4>
 8003400:	2300      	movs	r3, #0
 8003402:	9309      	str	r3, [sp, #36]	; 0x24
 8003404:	2320      	movs	r3, #32
 8003406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800340a:	2330      	movs	r3, #48	; 0x30
 800340c:	f04f 0b01 	mov.w	fp, #1
 8003410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003414:	9503      	str	r5, [sp, #12]
 8003416:	46b8      	mov	r8, r7
 8003418:	4645      	mov	r5, r8
 800341a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800341e:	b10b      	cbz	r3, 8003424 <_vfiprintf_r+0x50>
 8003420:	2b25      	cmp	r3, #37	; 0x25
 8003422:	d154      	bne.n	80034ce <_vfiprintf_r+0xfa>
 8003424:	ebb8 0a07 	subs.w	sl, r8, r7
 8003428:	d00b      	beq.n	8003442 <_vfiprintf_r+0x6e>
 800342a:	4653      	mov	r3, sl
 800342c:	463a      	mov	r2, r7
 800342e:	4621      	mov	r1, r4
 8003430:	4630      	mov	r0, r6
 8003432:	f7ff ffbc 	bl	80033ae <__sfputs_r>
 8003436:	3001      	adds	r0, #1
 8003438:	f000 80c2 	beq.w	80035c0 <_vfiprintf_r+0x1ec>
 800343c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800343e:	4453      	add	r3, sl
 8003440:	9309      	str	r3, [sp, #36]	; 0x24
 8003442:	f898 3000 	ldrb.w	r3, [r8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80ba 	beq.w	80035c0 <_vfiprintf_r+0x1ec>
 800344c:	2300      	movs	r3, #0
 800344e:	f04f 32ff 	mov.w	r2, #4294967295
 8003452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	9307      	str	r3, [sp, #28]
 800345a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800345e:	931a      	str	r3, [sp, #104]	; 0x68
 8003460:	46a8      	mov	r8, r5
 8003462:	2205      	movs	r2, #5
 8003464:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003468:	485e      	ldr	r0, [pc, #376]	; (80035e4 <_vfiprintf_r+0x210>)
 800346a:	f000 fafb 	bl	8003a64 <memchr>
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	bb78      	cbnz	r0, 80034d2 <_vfiprintf_r+0xfe>
 8003472:	06d9      	lsls	r1, r3, #27
 8003474:	bf44      	itt	mi
 8003476:	2220      	movmi	r2, #32
 8003478:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800347c:	071a      	lsls	r2, r3, #28
 800347e:	bf44      	itt	mi
 8003480:	222b      	movmi	r2, #43	; 0x2b
 8003482:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003486:	782a      	ldrb	r2, [r5, #0]
 8003488:	2a2a      	cmp	r2, #42	; 0x2a
 800348a:	d02a      	beq.n	80034e2 <_vfiprintf_r+0x10e>
 800348c:	46a8      	mov	r8, r5
 800348e:	2000      	movs	r0, #0
 8003490:	250a      	movs	r5, #10
 8003492:	9a07      	ldr	r2, [sp, #28]
 8003494:	4641      	mov	r1, r8
 8003496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800349a:	3b30      	subs	r3, #48	; 0x30
 800349c:	2b09      	cmp	r3, #9
 800349e:	d969      	bls.n	8003574 <_vfiprintf_r+0x1a0>
 80034a0:	b360      	cbz	r0, 80034fc <_vfiprintf_r+0x128>
 80034a2:	e024      	b.n	80034ee <_vfiprintf_r+0x11a>
 80034a4:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <_vfiprintf_r+0x214>)
 80034a6:	429c      	cmp	r4, r3
 80034a8:	d101      	bne.n	80034ae <_vfiprintf_r+0xda>
 80034aa:	68b4      	ldr	r4, [r6, #8]
 80034ac:	e7a2      	b.n	80033f4 <_vfiprintf_r+0x20>
 80034ae:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <_vfiprintf_r+0x218>)
 80034b0:	429c      	cmp	r4, r3
 80034b2:	bf08      	it	eq
 80034b4:	68f4      	ldreq	r4, [r6, #12]
 80034b6:	e79d      	b.n	80033f4 <_vfiprintf_r+0x20>
 80034b8:	4621      	mov	r1, r4
 80034ba:	4630      	mov	r0, r6
 80034bc:	f7ff fc70 	bl	8002da0 <__swsetup_r>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d09d      	beq.n	8003400 <_vfiprintf_r+0x2c>
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	b01d      	add	sp, #116	; 0x74
 80034ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ce:	46a8      	mov	r8, r5
 80034d0:	e7a2      	b.n	8003418 <_vfiprintf_r+0x44>
 80034d2:	4a44      	ldr	r2, [pc, #272]	; (80035e4 <_vfiprintf_r+0x210>)
 80034d4:	4645      	mov	r5, r8
 80034d6:	1a80      	subs	r0, r0, r2
 80034d8:	fa0b f000 	lsl.w	r0, fp, r0
 80034dc:	4318      	orrs	r0, r3
 80034de:	9004      	str	r0, [sp, #16]
 80034e0:	e7be      	b.n	8003460 <_vfiprintf_r+0x8c>
 80034e2:	9a03      	ldr	r2, [sp, #12]
 80034e4:	1d11      	adds	r1, r2, #4
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	9103      	str	r1, [sp, #12]
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	db01      	blt.n	80034f2 <_vfiprintf_r+0x11e>
 80034ee:	9207      	str	r2, [sp, #28]
 80034f0:	e004      	b.n	80034fc <_vfiprintf_r+0x128>
 80034f2:	4252      	negs	r2, r2
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	9207      	str	r2, [sp, #28]
 80034fa:	9304      	str	r3, [sp, #16]
 80034fc:	f898 3000 	ldrb.w	r3, [r8]
 8003500:	2b2e      	cmp	r3, #46	; 0x2e
 8003502:	d10e      	bne.n	8003522 <_vfiprintf_r+0x14e>
 8003504:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003508:	2b2a      	cmp	r3, #42	; 0x2a
 800350a:	d138      	bne.n	800357e <_vfiprintf_r+0x1aa>
 800350c:	9b03      	ldr	r3, [sp, #12]
 800350e:	f108 0802 	add.w	r8, r8, #2
 8003512:	1d1a      	adds	r2, r3, #4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	9203      	str	r2, [sp, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	bfb8      	it	lt
 800351c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003520:	9305      	str	r3, [sp, #20]
 8003522:	4d33      	ldr	r5, [pc, #204]	; (80035f0 <_vfiprintf_r+0x21c>)
 8003524:	2203      	movs	r2, #3
 8003526:	f898 1000 	ldrb.w	r1, [r8]
 800352a:	4628      	mov	r0, r5
 800352c:	f000 fa9a 	bl	8003a64 <memchr>
 8003530:	b140      	cbz	r0, 8003544 <_vfiprintf_r+0x170>
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	1b40      	subs	r0, r0, r5
 8003536:	fa03 f000 	lsl.w	r0, r3, r0
 800353a:	9b04      	ldr	r3, [sp, #16]
 800353c:	f108 0801 	add.w	r8, r8, #1
 8003540:	4303      	orrs	r3, r0
 8003542:	9304      	str	r3, [sp, #16]
 8003544:	f898 1000 	ldrb.w	r1, [r8]
 8003548:	2206      	movs	r2, #6
 800354a:	482a      	ldr	r0, [pc, #168]	; (80035f4 <_vfiprintf_r+0x220>)
 800354c:	f108 0701 	add.w	r7, r8, #1
 8003550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003554:	f000 fa86 	bl	8003a64 <memchr>
 8003558:	2800      	cmp	r0, #0
 800355a:	d037      	beq.n	80035cc <_vfiprintf_r+0x1f8>
 800355c:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <_vfiprintf_r+0x224>)
 800355e:	bb1b      	cbnz	r3, 80035a8 <_vfiprintf_r+0x1d4>
 8003560:	9b03      	ldr	r3, [sp, #12]
 8003562:	3307      	adds	r3, #7
 8003564:	f023 0307 	bic.w	r3, r3, #7
 8003568:	3308      	adds	r3, #8
 800356a:	9303      	str	r3, [sp, #12]
 800356c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800356e:	444b      	add	r3, r9
 8003570:	9309      	str	r3, [sp, #36]	; 0x24
 8003572:	e750      	b.n	8003416 <_vfiprintf_r+0x42>
 8003574:	fb05 3202 	mla	r2, r5, r2, r3
 8003578:	2001      	movs	r0, #1
 800357a:	4688      	mov	r8, r1
 800357c:	e78a      	b.n	8003494 <_vfiprintf_r+0xc0>
 800357e:	2300      	movs	r3, #0
 8003580:	250a      	movs	r5, #10
 8003582:	4619      	mov	r1, r3
 8003584:	f108 0801 	add.w	r8, r8, #1
 8003588:	9305      	str	r3, [sp, #20]
 800358a:	4640      	mov	r0, r8
 800358c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003590:	3a30      	subs	r2, #48	; 0x30
 8003592:	2a09      	cmp	r2, #9
 8003594:	d903      	bls.n	800359e <_vfiprintf_r+0x1ca>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0c3      	beq.n	8003522 <_vfiprintf_r+0x14e>
 800359a:	9105      	str	r1, [sp, #20]
 800359c:	e7c1      	b.n	8003522 <_vfiprintf_r+0x14e>
 800359e:	fb05 2101 	mla	r1, r5, r1, r2
 80035a2:	2301      	movs	r3, #1
 80035a4:	4680      	mov	r8, r0
 80035a6:	e7f0      	b.n	800358a <_vfiprintf_r+0x1b6>
 80035a8:	ab03      	add	r3, sp, #12
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4622      	mov	r2, r4
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <_vfiprintf_r+0x228>)
 80035b0:	a904      	add	r1, sp, #16
 80035b2:	4630      	mov	r0, r6
 80035b4:	f3af 8000 	nop.w
 80035b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035bc:	4681      	mov	r9, r0
 80035be:	d1d5      	bne.n	800356c <_vfiprintf_r+0x198>
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	065b      	lsls	r3, r3, #25
 80035c4:	f53f af7e 	bmi.w	80034c4 <_vfiprintf_r+0xf0>
 80035c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035ca:	e77d      	b.n	80034c8 <_vfiprintf_r+0xf4>
 80035cc:	ab03      	add	r3, sp, #12
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4622      	mov	r2, r4
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <_vfiprintf_r+0x228>)
 80035d4:	a904      	add	r1, sp, #16
 80035d6:	4630      	mov	r0, r6
 80035d8:	f000 f888 	bl	80036ec <_printf_i>
 80035dc:	e7ec      	b.n	80035b8 <_vfiprintf_r+0x1e4>
 80035de:	bf00      	nop
 80035e0:	08003b8c 	.word	0x08003b8c
 80035e4:	08003bcc 	.word	0x08003bcc
 80035e8:	08003bac 	.word	0x08003bac
 80035ec:	08003b6c 	.word	0x08003b6c
 80035f0:	08003bd2 	.word	0x08003bd2
 80035f4:	08003bd6 	.word	0x08003bd6
 80035f8:	00000000 	.word	0x00000000
 80035fc:	080033af 	.word	0x080033af

08003600 <_printf_common>:
 8003600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003604:	4691      	mov	r9, r2
 8003606:	461f      	mov	r7, r3
 8003608:	688a      	ldr	r2, [r1, #8]
 800360a:	690b      	ldr	r3, [r1, #16]
 800360c:	4606      	mov	r6, r0
 800360e:	4293      	cmp	r3, r2
 8003610:	bfb8      	it	lt
 8003612:	4613      	movlt	r3, r2
 8003614:	f8c9 3000 	str.w	r3, [r9]
 8003618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800361c:	460c      	mov	r4, r1
 800361e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003622:	b112      	cbz	r2, 800362a <_printf_common+0x2a>
 8003624:	3301      	adds	r3, #1
 8003626:	f8c9 3000 	str.w	r3, [r9]
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	0699      	lsls	r1, r3, #26
 800362e:	bf42      	ittt	mi
 8003630:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003634:	3302      	addmi	r3, #2
 8003636:	f8c9 3000 	strmi.w	r3, [r9]
 800363a:	6825      	ldr	r5, [r4, #0]
 800363c:	f015 0506 	ands.w	r5, r5, #6
 8003640:	d107      	bne.n	8003652 <_printf_common+0x52>
 8003642:	f104 0a19 	add.w	sl, r4, #25
 8003646:	68e3      	ldr	r3, [r4, #12]
 8003648:	f8d9 2000 	ldr.w	r2, [r9]
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	42ab      	cmp	r3, r5
 8003650:	dc29      	bgt.n	80036a6 <_printf_common+0xa6>
 8003652:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	3300      	adds	r3, #0
 800365a:	bf18      	it	ne
 800365c:	2301      	movne	r3, #1
 800365e:	0692      	lsls	r2, r2, #26
 8003660:	d42e      	bmi.n	80036c0 <_printf_common+0xc0>
 8003662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003666:	4639      	mov	r1, r7
 8003668:	4630      	mov	r0, r6
 800366a:	47c0      	blx	r8
 800366c:	3001      	adds	r0, #1
 800366e:	d021      	beq.n	80036b4 <_printf_common+0xb4>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	68e5      	ldr	r5, [r4, #12]
 8003674:	f003 0306 	and.w	r3, r3, #6
 8003678:	2b04      	cmp	r3, #4
 800367a:	bf18      	it	ne
 800367c:	2500      	movne	r5, #0
 800367e:	f8d9 2000 	ldr.w	r2, [r9]
 8003682:	f04f 0900 	mov.w	r9, #0
 8003686:	bf08      	it	eq
 8003688:	1aad      	subeq	r5, r5, r2
 800368a:	68a3      	ldr	r3, [r4, #8]
 800368c:	6922      	ldr	r2, [r4, #16]
 800368e:	bf08      	it	eq
 8003690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003694:	4293      	cmp	r3, r2
 8003696:	bfc4      	itt	gt
 8003698:	1a9b      	subgt	r3, r3, r2
 800369a:	18ed      	addgt	r5, r5, r3
 800369c:	341a      	adds	r4, #26
 800369e:	454d      	cmp	r5, r9
 80036a0:	d11a      	bne.n	80036d8 <_printf_common+0xd8>
 80036a2:	2000      	movs	r0, #0
 80036a4:	e008      	b.n	80036b8 <_printf_common+0xb8>
 80036a6:	2301      	movs	r3, #1
 80036a8:	4652      	mov	r2, sl
 80036aa:	4639      	mov	r1, r7
 80036ac:	4630      	mov	r0, r6
 80036ae:	47c0      	blx	r8
 80036b0:	3001      	adds	r0, #1
 80036b2:	d103      	bne.n	80036bc <_printf_common+0xbc>
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036bc:	3501      	adds	r5, #1
 80036be:	e7c2      	b.n	8003646 <_printf_common+0x46>
 80036c0:	2030      	movs	r0, #48	; 0x30
 80036c2:	18e1      	adds	r1, r4, r3
 80036c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ce:	4422      	add	r2, r4
 80036d0:	3302      	adds	r3, #2
 80036d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036d6:	e7c4      	b.n	8003662 <_printf_common+0x62>
 80036d8:	2301      	movs	r3, #1
 80036da:	4622      	mov	r2, r4
 80036dc:	4639      	mov	r1, r7
 80036de:	4630      	mov	r0, r6
 80036e0:	47c0      	blx	r8
 80036e2:	3001      	adds	r0, #1
 80036e4:	d0e6      	beq.n	80036b4 <_printf_common+0xb4>
 80036e6:	f109 0901 	add.w	r9, r9, #1
 80036ea:	e7d8      	b.n	800369e <_printf_common+0x9e>

080036ec <_printf_i>:
 80036ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80036f4:	460c      	mov	r4, r1
 80036f6:	7e09      	ldrb	r1, [r1, #24]
 80036f8:	b085      	sub	sp, #20
 80036fa:	296e      	cmp	r1, #110	; 0x6e
 80036fc:	4617      	mov	r7, r2
 80036fe:	4606      	mov	r6, r0
 8003700:	4698      	mov	r8, r3
 8003702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003704:	f000 80b3 	beq.w	800386e <_printf_i+0x182>
 8003708:	d822      	bhi.n	8003750 <_printf_i+0x64>
 800370a:	2963      	cmp	r1, #99	; 0x63
 800370c:	d036      	beq.n	800377c <_printf_i+0x90>
 800370e:	d80a      	bhi.n	8003726 <_printf_i+0x3a>
 8003710:	2900      	cmp	r1, #0
 8003712:	f000 80b9 	beq.w	8003888 <_printf_i+0x19c>
 8003716:	2958      	cmp	r1, #88	; 0x58
 8003718:	f000 8083 	beq.w	8003822 <_printf_i+0x136>
 800371c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003720:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003724:	e032      	b.n	800378c <_printf_i+0xa0>
 8003726:	2964      	cmp	r1, #100	; 0x64
 8003728:	d001      	beq.n	800372e <_printf_i+0x42>
 800372a:	2969      	cmp	r1, #105	; 0x69
 800372c:	d1f6      	bne.n	800371c <_printf_i+0x30>
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	0605      	lsls	r5, r0, #24
 8003734:	f103 0104 	add.w	r1, r3, #4
 8003738:	d52a      	bpl.n	8003790 <_printf_i+0xa4>
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6011      	str	r1, [r2, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	da03      	bge.n	800374a <_printf_i+0x5e>
 8003742:	222d      	movs	r2, #45	; 0x2d
 8003744:	425b      	negs	r3, r3
 8003746:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800374a:	486f      	ldr	r0, [pc, #444]	; (8003908 <_printf_i+0x21c>)
 800374c:	220a      	movs	r2, #10
 800374e:	e039      	b.n	80037c4 <_printf_i+0xd8>
 8003750:	2973      	cmp	r1, #115	; 0x73
 8003752:	f000 809d 	beq.w	8003890 <_printf_i+0x1a4>
 8003756:	d808      	bhi.n	800376a <_printf_i+0x7e>
 8003758:	296f      	cmp	r1, #111	; 0x6f
 800375a:	d020      	beq.n	800379e <_printf_i+0xb2>
 800375c:	2970      	cmp	r1, #112	; 0x70
 800375e:	d1dd      	bne.n	800371c <_printf_i+0x30>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	f043 0320 	orr.w	r3, r3, #32
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	e003      	b.n	8003772 <_printf_i+0x86>
 800376a:	2975      	cmp	r1, #117	; 0x75
 800376c:	d017      	beq.n	800379e <_printf_i+0xb2>
 800376e:	2978      	cmp	r1, #120	; 0x78
 8003770:	d1d4      	bne.n	800371c <_printf_i+0x30>
 8003772:	2378      	movs	r3, #120	; 0x78
 8003774:	4865      	ldr	r0, [pc, #404]	; (800390c <_printf_i+0x220>)
 8003776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800377a:	e055      	b.n	8003828 <_printf_i+0x13c>
 800377c:	6813      	ldr	r3, [r2, #0]
 800377e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003782:	1d19      	adds	r1, r3, #4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6011      	str	r1, [r2, #0]
 8003788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800378c:	2301      	movs	r3, #1
 800378e:	e08c      	b.n	80038aa <_printf_i+0x1be>
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003796:	6011      	str	r1, [r2, #0]
 8003798:	bf18      	it	ne
 800379a:	b21b      	sxthne	r3, r3
 800379c:	e7cf      	b.n	800373e <_printf_i+0x52>
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	6825      	ldr	r5, [r4, #0]
 80037a2:	1d18      	adds	r0, r3, #4
 80037a4:	6010      	str	r0, [r2, #0]
 80037a6:	0628      	lsls	r0, r5, #24
 80037a8:	d501      	bpl.n	80037ae <_printf_i+0xc2>
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	e002      	b.n	80037b4 <_printf_i+0xc8>
 80037ae:	0668      	lsls	r0, r5, #25
 80037b0:	d5fb      	bpl.n	80037aa <_printf_i+0xbe>
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	296f      	cmp	r1, #111	; 0x6f
 80037b6:	bf14      	ite	ne
 80037b8:	220a      	movne	r2, #10
 80037ba:	2208      	moveq	r2, #8
 80037bc:	4852      	ldr	r0, [pc, #328]	; (8003908 <_printf_i+0x21c>)
 80037be:	2100      	movs	r1, #0
 80037c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037c4:	6865      	ldr	r5, [r4, #4]
 80037c6:	2d00      	cmp	r5, #0
 80037c8:	60a5      	str	r5, [r4, #8]
 80037ca:	f2c0 8095 	blt.w	80038f8 <_printf_i+0x20c>
 80037ce:	6821      	ldr	r1, [r4, #0]
 80037d0:	f021 0104 	bic.w	r1, r1, #4
 80037d4:	6021      	str	r1, [r4, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d13d      	bne.n	8003856 <_printf_i+0x16a>
 80037da:	2d00      	cmp	r5, #0
 80037dc:	f040 808e 	bne.w	80038fc <_printf_i+0x210>
 80037e0:	4665      	mov	r5, ip
 80037e2:	2a08      	cmp	r2, #8
 80037e4:	d10b      	bne.n	80037fe <_printf_i+0x112>
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	07db      	lsls	r3, r3, #31
 80037ea:	d508      	bpl.n	80037fe <_printf_i+0x112>
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	6862      	ldr	r2, [r4, #4]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	bfde      	ittt	le
 80037f4:	2330      	movle	r3, #48	; 0x30
 80037f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037fe:	ebac 0305 	sub.w	r3, ip, r5
 8003802:	6123      	str	r3, [r4, #16]
 8003804:	f8cd 8000 	str.w	r8, [sp]
 8003808:	463b      	mov	r3, r7
 800380a:	aa03      	add	r2, sp, #12
 800380c:	4621      	mov	r1, r4
 800380e:	4630      	mov	r0, r6
 8003810:	f7ff fef6 	bl	8003600 <_printf_common>
 8003814:	3001      	adds	r0, #1
 8003816:	d14d      	bne.n	80038b4 <_printf_i+0x1c8>
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	b005      	add	sp, #20
 800381e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003822:	4839      	ldr	r0, [pc, #228]	; (8003908 <_printf_i+0x21c>)
 8003824:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	6821      	ldr	r1, [r4, #0]
 800382c:	1d1d      	adds	r5, r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6015      	str	r5, [r2, #0]
 8003832:	060a      	lsls	r2, r1, #24
 8003834:	d50b      	bpl.n	800384e <_printf_i+0x162>
 8003836:	07ca      	lsls	r2, r1, #31
 8003838:	bf44      	itt	mi
 800383a:	f041 0120 	orrmi.w	r1, r1, #32
 800383e:	6021      	strmi	r1, [r4, #0]
 8003840:	b91b      	cbnz	r3, 800384a <_printf_i+0x15e>
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	f022 0220 	bic.w	r2, r2, #32
 8003848:	6022      	str	r2, [r4, #0]
 800384a:	2210      	movs	r2, #16
 800384c:	e7b7      	b.n	80037be <_printf_i+0xd2>
 800384e:	064d      	lsls	r5, r1, #25
 8003850:	bf48      	it	mi
 8003852:	b29b      	uxthmi	r3, r3
 8003854:	e7ef      	b.n	8003836 <_printf_i+0x14a>
 8003856:	4665      	mov	r5, ip
 8003858:	fbb3 f1f2 	udiv	r1, r3, r2
 800385c:	fb02 3311 	mls	r3, r2, r1, r3
 8003860:	5cc3      	ldrb	r3, [r0, r3]
 8003862:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003866:	460b      	mov	r3, r1
 8003868:	2900      	cmp	r1, #0
 800386a:	d1f5      	bne.n	8003858 <_printf_i+0x16c>
 800386c:	e7b9      	b.n	80037e2 <_printf_i+0xf6>
 800386e:	6813      	ldr	r3, [r2, #0]
 8003870:	6825      	ldr	r5, [r4, #0]
 8003872:	1d18      	adds	r0, r3, #4
 8003874:	6961      	ldr	r1, [r4, #20]
 8003876:	6010      	str	r0, [r2, #0]
 8003878:	0628      	lsls	r0, r5, #24
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	d501      	bpl.n	8003882 <_printf_i+0x196>
 800387e:	6019      	str	r1, [r3, #0]
 8003880:	e002      	b.n	8003888 <_printf_i+0x19c>
 8003882:	066a      	lsls	r2, r5, #25
 8003884:	d5fb      	bpl.n	800387e <_printf_i+0x192>
 8003886:	8019      	strh	r1, [r3, #0]
 8003888:	2300      	movs	r3, #0
 800388a:	4665      	mov	r5, ip
 800388c:	6123      	str	r3, [r4, #16]
 800388e:	e7b9      	b.n	8003804 <_printf_i+0x118>
 8003890:	6813      	ldr	r3, [r2, #0]
 8003892:	1d19      	adds	r1, r3, #4
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	681d      	ldr	r5, [r3, #0]
 8003898:	6862      	ldr	r2, [r4, #4]
 800389a:	2100      	movs	r1, #0
 800389c:	4628      	mov	r0, r5
 800389e:	f000 f8e1 	bl	8003a64 <memchr>
 80038a2:	b108      	cbz	r0, 80038a8 <_printf_i+0x1bc>
 80038a4:	1b40      	subs	r0, r0, r5
 80038a6:	6060      	str	r0, [r4, #4]
 80038a8:	6863      	ldr	r3, [r4, #4]
 80038aa:	6123      	str	r3, [r4, #16]
 80038ac:	2300      	movs	r3, #0
 80038ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038b2:	e7a7      	b.n	8003804 <_printf_i+0x118>
 80038b4:	6923      	ldr	r3, [r4, #16]
 80038b6:	462a      	mov	r2, r5
 80038b8:	4639      	mov	r1, r7
 80038ba:	4630      	mov	r0, r6
 80038bc:	47c0      	blx	r8
 80038be:	3001      	adds	r0, #1
 80038c0:	d0aa      	beq.n	8003818 <_printf_i+0x12c>
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	079b      	lsls	r3, r3, #30
 80038c6:	d413      	bmi.n	80038f0 <_printf_i+0x204>
 80038c8:	68e0      	ldr	r0, [r4, #12]
 80038ca:	9b03      	ldr	r3, [sp, #12]
 80038cc:	4298      	cmp	r0, r3
 80038ce:	bfb8      	it	lt
 80038d0:	4618      	movlt	r0, r3
 80038d2:	e7a3      	b.n	800381c <_printf_i+0x130>
 80038d4:	2301      	movs	r3, #1
 80038d6:	464a      	mov	r2, r9
 80038d8:	4639      	mov	r1, r7
 80038da:	4630      	mov	r0, r6
 80038dc:	47c0      	blx	r8
 80038de:	3001      	adds	r0, #1
 80038e0:	d09a      	beq.n	8003818 <_printf_i+0x12c>
 80038e2:	3501      	adds	r5, #1
 80038e4:	68e3      	ldr	r3, [r4, #12]
 80038e6:	9a03      	ldr	r2, [sp, #12]
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	42ab      	cmp	r3, r5
 80038ec:	dcf2      	bgt.n	80038d4 <_printf_i+0x1e8>
 80038ee:	e7eb      	b.n	80038c8 <_printf_i+0x1dc>
 80038f0:	2500      	movs	r5, #0
 80038f2:	f104 0919 	add.w	r9, r4, #25
 80038f6:	e7f5      	b.n	80038e4 <_printf_i+0x1f8>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ac      	bne.n	8003856 <_printf_i+0x16a>
 80038fc:	7803      	ldrb	r3, [r0, #0]
 80038fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003902:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003906:	e76c      	b.n	80037e2 <_printf_i+0xf6>
 8003908:	08003bdd 	.word	0x08003bdd
 800390c:	08003bee 	.word	0x08003bee

08003910 <_sbrk_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	2300      	movs	r3, #0
 8003914:	4c05      	ldr	r4, [pc, #20]	; (800392c <_sbrk_r+0x1c>)
 8003916:	4605      	mov	r5, r0
 8003918:	4608      	mov	r0, r1
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	f7fc fe80 	bl	8000620 <_sbrk>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d102      	bne.n	800392a <_sbrk_r+0x1a>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	b103      	cbz	r3, 800392a <_sbrk_r+0x1a>
 8003928:	602b      	str	r3, [r5, #0]
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	2000026c 	.word	0x2000026c

08003930 <__sread>:
 8003930:	b510      	push	{r4, lr}
 8003932:	460c      	mov	r4, r1
 8003934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003938:	f000 f8a4 	bl	8003a84 <_read_r>
 800393c:	2800      	cmp	r0, #0
 800393e:	bfab      	itete	ge
 8003940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003942:	89a3      	ldrhlt	r3, [r4, #12]
 8003944:	181b      	addge	r3, r3, r0
 8003946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800394a:	bfac      	ite	ge
 800394c:	6563      	strge	r3, [r4, #84]	; 0x54
 800394e:	81a3      	strhlt	r3, [r4, #12]
 8003950:	bd10      	pop	{r4, pc}

08003952 <__swrite>:
 8003952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003956:	461f      	mov	r7, r3
 8003958:	898b      	ldrh	r3, [r1, #12]
 800395a:	4605      	mov	r5, r0
 800395c:	05db      	lsls	r3, r3, #23
 800395e:	460c      	mov	r4, r1
 8003960:	4616      	mov	r6, r2
 8003962:	d505      	bpl.n	8003970 <__swrite+0x1e>
 8003964:	2302      	movs	r3, #2
 8003966:	2200      	movs	r2, #0
 8003968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396c:	f000 f868 	bl	8003a40 <_lseek_r>
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	4632      	mov	r2, r6
 8003974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003978:	81a3      	strh	r3, [r4, #12]
 800397a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800397e:	463b      	mov	r3, r7
 8003980:	4628      	mov	r0, r5
 8003982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003986:	f000 b817 	b.w	80039b8 <_write_r>

0800398a <__sseek>:
 800398a:	b510      	push	{r4, lr}
 800398c:	460c      	mov	r4, r1
 800398e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003992:	f000 f855 	bl	8003a40 <_lseek_r>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	bf15      	itete	ne
 800399c:	6560      	strne	r0, [r4, #84]	; 0x54
 800399e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039a6:	81a3      	strheq	r3, [r4, #12]
 80039a8:	bf18      	it	ne
 80039aa:	81a3      	strhne	r3, [r4, #12]
 80039ac:	bd10      	pop	{r4, pc}

080039ae <__sclose>:
 80039ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b2:	f000 b813 	b.w	80039dc <_close_r>
	...

080039b8 <_write_r>:
 80039b8:	b538      	push	{r3, r4, r5, lr}
 80039ba:	4605      	mov	r5, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	2200      	movs	r2, #0
 80039c2:	4c05      	ldr	r4, [pc, #20]	; (80039d8 <_write_r+0x20>)
 80039c4:	6022      	str	r2, [r4, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	f7fc fddd 	bl	8000586 <_write>
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	d102      	bne.n	80039d6 <_write_r+0x1e>
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	b103      	cbz	r3, 80039d6 <_write_r+0x1e>
 80039d4:	602b      	str	r3, [r5, #0]
 80039d6:	bd38      	pop	{r3, r4, r5, pc}
 80039d8:	2000026c 	.word	0x2000026c

080039dc <_close_r>:
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	2300      	movs	r3, #0
 80039e0:	4c05      	ldr	r4, [pc, #20]	; (80039f8 <_close_r+0x1c>)
 80039e2:	4605      	mov	r5, r0
 80039e4:	4608      	mov	r0, r1
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	f7fc fde9 	bl	80005be <_close>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	d102      	bne.n	80039f6 <_close_r+0x1a>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	b103      	cbz	r3, 80039f6 <_close_r+0x1a>
 80039f4:	602b      	str	r3, [r5, #0]
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
 80039f8:	2000026c 	.word	0x2000026c

080039fc <_fstat_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	2300      	movs	r3, #0
 8003a00:	4c06      	ldr	r4, [pc, #24]	; (8003a1c <_fstat_r+0x20>)
 8003a02:	4605      	mov	r5, r0
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	f7fc fde3 	bl	80005d4 <_fstat>
 8003a0e:	1c43      	adds	r3, r0, #1
 8003a10:	d102      	bne.n	8003a18 <_fstat_r+0x1c>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	b103      	cbz	r3, 8003a18 <_fstat_r+0x1c>
 8003a16:	602b      	str	r3, [r5, #0]
 8003a18:	bd38      	pop	{r3, r4, r5, pc}
 8003a1a:	bf00      	nop
 8003a1c:	2000026c 	.word	0x2000026c

08003a20 <_isatty_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	2300      	movs	r3, #0
 8003a24:	4c05      	ldr	r4, [pc, #20]	; (8003a3c <_isatty_r+0x1c>)
 8003a26:	4605      	mov	r5, r0
 8003a28:	4608      	mov	r0, r1
 8003a2a:	6023      	str	r3, [r4, #0]
 8003a2c:	f7fc fde1 	bl	80005f2 <_isatty>
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	d102      	bne.n	8003a3a <_isatty_r+0x1a>
 8003a34:	6823      	ldr	r3, [r4, #0]
 8003a36:	b103      	cbz	r3, 8003a3a <_isatty_r+0x1a>
 8003a38:	602b      	str	r3, [r5, #0]
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
 8003a3c:	2000026c 	.word	0x2000026c

08003a40 <_lseek_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4605      	mov	r5, r0
 8003a44:	4608      	mov	r0, r1
 8003a46:	4611      	mov	r1, r2
 8003a48:	2200      	movs	r2, #0
 8003a4a:	4c05      	ldr	r4, [pc, #20]	; (8003a60 <_lseek_r+0x20>)
 8003a4c:	6022      	str	r2, [r4, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f7fc fdd9 	bl	8000606 <_lseek>
 8003a54:	1c43      	adds	r3, r0, #1
 8003a56:	d102      	bne.n	8003a5e <_lseek_r+0x1e>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	b103      	cbz	r3, 8003a5e <_lseek_r+0x1e>
 8003a5c:	602b      	str	r3, [r5, #0]
 8003a5e:	bd38      	pop	{r3, r4, r5, pc}
 8003a60:	2000026c 	.word	0x2000026c

08003a64 <memchr>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	b2c9      	uxtb	r1, r1
 8003a68:	4402      	add	r2, r0
 8003a6a:	4290      	cmp	r0, r2
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	d101      	bne.n	8003a74 <memchr+0x10>
 8003a70:	2300      	movs	r3, #0
 8003a72:	e003      	b.n	8003a7c <memchr+0x18>
 8003a74:	781c      	ldrb	r4, [r3, #0]
 8003a76:	3001      	adds	r0, #1
 8003a78:	428c      	cmp	r4, r1
 8003a7a:	d1f6      	bne.n	8003a6a <memchr+0x6>
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd10      	pop	{r4, pc}

08003a80 <__malloc_lock>:
 8003a80:	4770      	bx	lr

08003a82 <__malloc_unlock>:
 8003a82:	4770      	bx	lr

08003a84 <_read_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4605      	mov	r5, r0
 8003a88:	4608      	mov	r0, r1
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	4c05      	ldr	r4, [pc, #20]	; (8003aa4 <_read_r+0x20>)
 8003a90:	6022      	str	r2, [r4, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f7fc fd5a 	bl	800054c <_read>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_read_r+0x1e>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_read_r+0x1e>
 8003aa0:	602b      	str	r3, [r5, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	2000026c 	.word	0x2000026c

08003aa8 <_init>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	bf00      	nop
 8003aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aae:	bc08      	pop	{r3}
 8003ab0:	469e      	mov	lr, r3
 8003ab2:	4770      	bx	lr

08003ab4 <_fini>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	bf00      	nop
 8003ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aba:	bc08      	pop	{r3}
 8003abc:	469e      	mov	lr, r3
 8003abe:	4770      	bx	lr
