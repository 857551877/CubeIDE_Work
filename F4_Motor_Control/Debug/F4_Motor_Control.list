
F4_Motor_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e18  08004e18  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e20  08004e20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000070  08004e98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08004e98  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eccb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023ff  00000000  00000000  0002ed6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d38  00000000  00000000  00031170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  00031ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000226c2  00000000  00000000  00032aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b905  00000000  00000000  0005516a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca71f  00000000  00000000  00060a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b18e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cbc  00000000  00000000  0012b20c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cdc 	.word	0x08004cdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004cdc 	.word	0x08004cdc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_GPIO_Init+0xb4>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a25      	ldr	r2, [pc, #148]	; (8000624 <MX_GPIO_Init+0xb4>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_GPIO_Init+0xb4>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <MX_GPIO_Init+0xb4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <MX_GPIO_Init+0xb4>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_GPIO_Init+0xb4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_GPIO_Init+0xb4>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <MX_GPIO_Init+0xb4>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_GPIO_Init+0xb4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_GPIO_Init+0xb4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a10      	ldr	r2, [pc, #64]	; (8000624 <MX_GPIO_Init+0xb4>)
 80005e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_GPIO_Init+0xb4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2108      	movs	r1, #8
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <MX_GPIO_Init+0xb8>)
 80005fc:	f001 f9a0 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000600:	2308      	movs	r3, #8
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_GPIO_Init+0xb8>)
 8000618:	f000 fff8 	bl	800160c <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3728      	adds	r7, #40	; 0x28
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40021800 	.word	0x40021800

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fe24 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f80c 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff ff9a 	bl	8000570 <MX_GPIO_Init>
  MX_TIM2_Init();
 800063c:	f000 f9dc 	bl	80009f8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000640:	f000 fa98 	bl	8000b74 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  System_Init();
 8000644:	f000 f86e 	bl	8000724 <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Tcp_DataAccept();
 8000648:	f000 fd62 	bl	8001110 <Tcp_DataAccept>
 800064c:	e7fc      	b.n	8000648 <main+0x1c>
	...

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fbec 	bl	8003e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f94c 	bl	8001974 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f867 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2105      	movs	r1, #5
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fba5 	bl	8001e54 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000710:	f000 f850 	bl	80007b4 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	; 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <System_Init>:

/* USER CODE BEGIN 4 */
void System_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	  /*WIFI  Init*/
	  Server_Init();
 8000728:	f000 fbf2 	bl	8000f10 <Server_Init>
	  HAL_Delay(500);
 800072c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000730:	f000 fe16 	bl	8001360 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 8000734:	2201      	movs	r2, #1
 8000736:	4909      	ldr	r1, [pc, #36]	; (800075c <System_Init+0x38>)
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <System_Init+0x3c>)
 800073a:	f002 fd03 	bl	8003144 <HAL_UART_Receive_IT>

	  /*input cap Init*/
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	// 开启输入捕获中断
 800073e:	2100      	movs	r1, #0
 8000740:	4808      	ldr	r0, [pc, #32]	; (8000764 <System_Init+0x40>)
 8000742:	f001 fdd9 	bl	80022f8 <HAL_TIM_IC_Start_IT>
	  __HAL_TIM_ENABLE_IT(&htim2,TIM_IT_UPDATE);	//使能更新中断
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <System_Init+0x40>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <System_Init+0x40>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f042 0201 	orr.w	r2, r2, #1
 8000754:	60da      	str	r2, [r3, #12]

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200001f4 	.word	0x200001f4
 8000760:	200001b0 	.word	0x200001b0
 8000764:	20000170 	.word	0x20000170

08000768 <Tcp_DataDeal>:
void Tcp_DataDeal(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
	//  Server_SentTo_Client("i got");
	  Server_SentTo_Client(Wifi_Command_Buffer);
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <Tcp_DataDeal+0x40>)
 8000770:	f000 fbfe 	bl	8000f70 <Server_SentTo_Client>
		uint8_t temp[15];
		IntToStr(Cycle, temp);
 8000774:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <Tcp_DataDeal+0x44>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	463a      	mov	r2, r7
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fd1d 	bl	80011bc <IntToStr>
		Server_SentTo_Client(temp);
 8000782:	463b      	mov	r3, r7
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fbf3 	bl	8000f70 <Server_SentTo_Client>
		IntToStr(Width, temp);
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <Tcp_DataDeal+0x48>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	463a      	mov	r2, r7
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fd12 	bl	80011bc <IntToStr>
		Server_SentTo_Client(temp);
 8000798:	463b      	mov	r3, r7
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fbe8 	bl	8000f70 <Server_SentTo_Client>
		//do nothing
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000100 	.word	0x20000100
 80007ac:	20000094 	.word	0x20000094
 80007b0:	20000098 	.word	0x20000098

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 fd5a 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <TIM2_IRQHandler+0x10>)
 8000876:	f001 fda7 	bl	80023c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000170 	.word	0x20000170

08000884 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <USART1_IRQHandler+0x10>)
 800088a:	f002 fcb1 	bl	80031f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001b0 	.word	0x200001b0

08000898 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e00a      	b.n	80008c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008aa:	f3af 8000 	nop.w
 80008ae:	4601      	mov	r1, r0
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	60ba      	str	r2, [r7, #8]
 80008b6:	b2ca      	uxtb	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3301      	adds	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbf0      	blt.n	80008aa <_read+0x12>
	}

return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e009      	b.n	80008f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	60ba      	str	r2, [r7, #8]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f9bb 	bl	8000c68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3301      	adds	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	dbf1      	blt.n	80008e4 <_write+0x12>
	}
	return len;
 8000900:	687b      	ldr	r3, [r7, #4]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <_close>:

int _close(int file)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
	return -1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000932:	605a      	str	r2, [r3, #4]
	return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <_isatty>:

int _isatty(int file)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
	return 1;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
	return 0;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <_sbrk+0x50>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <_sbrk+0x16>
		heap_end = &end;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <_sbrk+0x50>)
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <_sbrk+0x54>)
 8000988:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <_sbrk+0x50>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <_sbrk+0x50>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	466a      	mov	r2, sp
 800099a:	4293      	cmp	r3, r2
 800099c:	d907      	bls.n	80009ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800099e:	f003 fa23 	bl	8003de8 <__errno>
 80009a2:	4602      	mov	r2, r0
 80009a4:	230c      	movs	r3, #12
 80009a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ac:	e006      	b.n	80009bc <_sbrk+0x48>
	}

	heap_end += incr;
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <_sbrk+0x50>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <_sbrk+0x50>)
 80009b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000008c 	.word	0x2000008c
 80009c8:	20000200 	.word	0x20000200

080009cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <SystemInit+0x28>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d6:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <SystemInit+0x28>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SystemInit+0x28>)
 80009e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009e6:	609a      	str	r2, [r3, #8]
#endif
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000a22:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000a2c:	2253      	movs	r2, #83	; 0x53
 8000a2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8000a36:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a4a:	4822      	ldr	r0, [pc, #136]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000a4c:	f001 fbf4 	bl	8002238 <HAL_TIM_Base_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000a56:	f7ff fead 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	4619      	mov	r1, r3
 8000a66:	481b      	ldr	r0, [pc, #108]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000a68:	f001 fe52 	bl	8002710 <HAL_TIM_ConfigClockSource>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a72:	f7ff fe9f 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a76:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000a78:	f001 fc09 	bl	800228e <HAL_TIM_IC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a82:	f7ff fe97 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a86:	2320      	movs	r3, #32
 8000a88:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4619      	mov	r1, r3
 8000a94:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000a96:	f002 f9df 	bl	8002e58 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000aa0:	f7ff fe88 	bl	80007b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <MX_TIM2_Init+0xdc>)
 8000abc:	f001 fd8c 	bl	80025d8 <HAL_TIM_IC_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000ac6:	f7ff fe75 	bl	80007b4 <Error_Handler>
  }

}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	; 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000170 	.word	0x20000170

08000ad8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af8:	d133      	bne.n	8000b62 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_TIM_Base_MspInit+0x94>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <HAL_TIM_Base_MspInit+0x94>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_TIM_Base_MspInit+0x94>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_TIM_Base_MspInit+0x94>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <HAL_TIM_Base_MspInit+0x94>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_TIM_Base_MspInit+0x94>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b32:	2301      	movs	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b42:	2301      	movs	r3, #1
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <HAL_TIM_Base_MspInit+0x98>)
 8000b4e:	f000 fd5d 	bl	800160c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	201c      	movs	r0, #28
 8000b58:	f000 fcff 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b5c:	201c      	movs	r0, #28
 8000b5e:	f000 fd18 	bl	8001592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <MX_USART1_UART_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000bac:	f002 f9e4 	bl	8002f78 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f7ff fdfd 	bl	80007b4 <Error_Handler>
  }

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200001b0 	.word	0x200001b0
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_UART_MspInit+0x94>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d134      	bne.n	8000c54 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_UART_MspInit+0x98>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_UART_MspInit+0x98>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <HAL_UART_MspInit+0x98>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_UART_MspInit+0x98>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <HAL_UART_MspInit+0x98>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_UART_MspInit+0x98>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c34:	2307      	movs	r3, #7
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4809      	ldr	r0, [pc, #36]	; (8000c64 <HAL_UART_MspInit+0x9c>)
 8000c40:	f000 fce4 	bl	800160c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2025      	movs	r0, #37	; 0x25
 8000c4a:	f000 fc86 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c4e:	2025      	movs	r0, #37	; 0x25
 8000c50:	f000 fc9f 	bl	8001592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40011000 	.word	0x40011000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000c70:	1d39      	adds	r1, r7, #4
 8000c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c76:	2201      	movs	r2, #1
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <__io_putchar+0x20>)
 8000c7a:	f002 f9ca 	bl	8003012 <HAL_UART_Transmit>
  return ch;
 8000c7e:	687b      	ldr	r3, [r7, #4]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200001b0 	.word	0x200001b0

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c92:	e003      	b.n	8000c9c <LoopCopyDataInit>

08000c94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c9a:	3104      	adds	r1, #4

08000c9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ca0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ca2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ca4:	d3f6      	bcc.n	8000c94 <CopyDataInit>
  ldr  r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ca8:	e002      	b.n	8000cb0 <LoopFillZerobss>

08000caa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000caa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cac:	f842 3b04 	str.w	r3, [r2], #4

08000cb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cb4:	d3f9      	bcc.n	8000caa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff fe89 	bl	80009cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f003 f89b 	bl	8003df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fcb5 	bl	800062c <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cc8:	08004e28 	.word	0x08004e28
  ldr  r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cd0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000cd4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000cd8:	20000200 	.word	0x20000200

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <HAL_TIM_PeriodElapsedCallback>:

uint32_t Cycle = 0, Width = 0;

// 中断服务函数里面会自动调用这个回调函数  这个是定时器更新中断中处理的函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)	// 判断是定时器5发生中断
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf0:	d141      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x96>
  {
    if ((TIM5CH1_CAPTURE_STA & 0x80) == 0) // 还未成功捕获
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db3c      	blt.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x96>
    {
     // if (TIM5CH1_CAPTURE_STA & 0x40)		   // 捕获到高电平
      //{
        if ( (TIM5CH1_CAPTURE_STA & 0x3f) == 0x3f )		// 如果高电平太长  做溢出处理
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d04:	2b3f      	cmp	r3, #63	; 0x3f
 8000d06:	d130      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x8a>
        {
        	Cycle = 0x3f;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d0a:	223f      	movs	r2, #63	; 0x3f
 8000d0c:	601a      	str	r2, [r3, #0]
        	Cycle *= 0xffff;				// Total Overflow Time(总的溢出时间)
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4613      	mov	r3, r2
 8000d14:	041b      	lsls	r3, r3, #16
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d1a:	6013      	str	r3, [r2, #0]
        	TIM5CH1_CAPTURE_STA = 0;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
        	DownEdgeFlag = 0;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
        	__HAL_TIM_DISABLE(&htim2);
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6a1a      	ldr	r2, [r3, #32]
 8000d2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10f      	bne.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6a1a      	ldr	r2, [r3, #32]
 8000d3e:	f240 4344 	movw	r3, #1092	; 0x444
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d107      	bne.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 0201 	bic.w	r2, r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
        	__HAL_TIM_ENABLE(&htim2);
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f042 0201 	orr.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]
          TIM5CH1_CAPTURE_STA++;		// 若没有溢出, 就只让TIM5CH1_CAPTURE_STA自加就ok
        }
      //}
    }
  }
}
 8000d68:	e005      	b.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x96>
          TIM5CH1_CAPTURE_STA++;		// 若没有溢出, 就只让TIM5CH1_CAPTURE_STA自加就ok
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d74:	701a      	strb	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000090 	.word	0x20000090
 8000d88:	20000094 	.word	0x20000094
 8000d8c:	20000091 	.word	0x20000091
 8000d90:	20000170 	.word	0x20000170

08000d94 <HAL_TIM_IC_CaptureCallback>:

// 定时器输入捕获中断处理回调函数，该函数在 HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) 中会被调用


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ( (TIM5CH1_CAPTURE_STA & 0x80) == 0 )	// 还未成功捕获
 8000d9c:	4b56      	ldr	r3, [pc, #344]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f2c0 80a4 	blt.w	8000ef0 <HAL_TIM_IC_CaptureCallback+0x15c>
  {
    if (TIM5CH1_CAPTURE_STA & 0x40)			// 捕获到一个下降沿
 8000da8:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d033      	beq.n	8000e1c <HAL_TIM_IC_CaptureCallback+0x88>
    {
      //TIM5CH1_CAPTURE_STA |= 0x80;		// 标记成功捕获到一次高电平脉宽
      TIM5CH1_CAPTURE_VAL = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);	// 获取当前的捕获值. 即CCRx2
 8000db4:	2100      	movs	r1, #0
 8000db6:	4851      	ldr	r0, [pc, #324]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000db8:	f001 fd62 	bl	8002880 <HAL_TIM_ReadCapturedValue>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	4b50      	ldr	r3, [pc, #320]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000dc0:	601a      	str	r2, [r3, #0]

     // if (TIM5CH1_CAPTURE_STA & 0x80)   // 如果捕获完成
      	   // {
      Width = TIM5CH1_CAPTURE_STA & 0x3f;
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dca:	4a4e      	ldr	r2, [pc, #312]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000dcc:	6013      	str	r3, [r2, #0]
      Width *= 0xffff;				// Total Overflow Time(总的溢出时间)
 8000dce:	4b4d      	ldr	r3, [pc, #308]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	041b      	lsls	r3, r3, #16
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	4a4a      	ldr	r2, [pc, #296]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000dda:	6013      	str	r3, [r2, #0]
      Width += TIM5CH1_CAPTURE_VAL;    // Get Total High Level Time(获取总的高电平时长)
 8000ddc:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a47      	ldr	r2, [pc, #284]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000de8:	6013      	str	r3, [r2, #0]
      	      //  printf("HIGH: %f ms\r\n", (float)temp/1000); // Print Total High Level Time(打印总的高电平时长)
      //TIM5CH1_CAPTURE_STA = 0;			    // Clear Capture State , Open The Next Capture(清除捕获状态，打开下一次捕获)
      	   //}
      TIM5CH1_CAPTURE_STA &= 0xbf;
 8000dea:	4b43      	ldr	r3, [pc, #268]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b40      	ldr	r3, [pc, #256]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000df6:	701a      	strb	r2, [r3, #0]
      DownEdgeFlag = 1;
 8000df8:	4b43      	ldr	r3, [pc, #268]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]


      TIM_RESET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1);						// 清除原来的设置
 8000dfe:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6a1a      	ldr	r2, [r3, #32]
 8000e04:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 020a 	bic.w	r2, r2, #10
 8000e0c:	621a      	str	r2, [r3, #32]
      TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);	// 配置TIM5通道1上升沿捕获
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6a12      	ldr	r2, [r2, #32]
 8000e18:	621a      	str	r2, [r3, #32]
    	}


    }
  }
}
 8000e1a:	e069      	b.n	8000ef0 <HAL_TIM_IC_CaptureCallback+0x15c>
    	if(DownEdgeFlag == 1) {
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d124      	bne.n	8000e6e <HAL_TIM_IC_CaptureCallback+0xda>
    		TIM5CH1_CAPTURE_VAL = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000e24:	2100      	movs	r1, #0
 8000e26:	4835      	ldr	r0, [pc, #212]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000e28:	f001 fd2a 	bl	8002880 <HAL_TIM_ReadCapturedValue>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000e30:	601a      	str	r2, [r3, #0]
    		Cycle = TIM5CH1_CAPTURE_STA & 0x3f;
 8000e32:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e3a:	4a34      	ldr	r2, [pc, #208]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e3c:	6013      	str	r3, [r2, #0]
    		Cycle *= 0xffff;				// Total Overflow Time(总的溢出时间)
 8000e3e:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4613      	mov	r3, r2
 8000e44:	041b      	lsls	r3, r3, #16
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	4a30      	ldr	r2, [pc, #192]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e4a:	6013      	str	r3, [r2, #0]
    		Cycle += TIM5CH1_CAPTURE_VAL;    // Get Total High Level Time(获取总的高电平时长)
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a2d      	ldr	r2, [pc, #180]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x178>)
 8000e58:	6013      	str	r3, [r2, #0]
    		TIM5CH1_CAPTURE_STA = 0;
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
    		TIM5CH1_CAPTURE_VAL = 0;
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
    		DownEdgeFlag = 0;
 8000e66:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
}
 8000e6c:	e040      	b.n	8000ef0 <HAL_TIM_IC_CaptureCallback+0x15c>
      TIM5CH1_CAPTURE_STA = 0;	// 清空自定义的状态寄存器
 8000e6e:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
      TIM5CH1_CAPTURE_VAL = 0;	// 清空捕获值
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
      TIM5CH1_CAPTURE_STA |= 0x40;// 标记捕获到了上升沿
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000e86:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_DISABLE(&htim2);	//关闭定时器5
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6a1a      	ldr	r2, [r3, #32]
 8000e8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10f      	bne.n	8000eb8 <HAL_TIM_IC_CaptureCallback+0x124>
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6a1a      	ldr	r2, [r3, #32]
 8000e9e:	f240 4344 	movw	r3, #1092	; 0x444
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d107      	bne.n	8000eb8 <HAL_TIM_IC_CaptureCallback+0x124>
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0201 	bic.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(&htim2,0);
 8000eb8:	4b10      	ldr	r3, [pc, #64]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
      TIM_RESET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1);   //一定要先清除原来的设置！！
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6a1a      	ldr	r2, [r3, #32]
 8000ec6:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 020a 	bic.w	r2, r2, #10
 8000ece:	621a      	str	r2, [r3, #32]
      TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_ICPOLARITY_FALLING);//定时器5通道1设置为下降沿捕获
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a1a      	ldr	r2, [r3, #32]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0202 	orr.w	r2, r2, #2
 8000ede:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE(&htim2);//使能定时器5
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x168>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0201 	orr.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000090 	.word	0x20000090
 8000efc:	20000170 	.word	0x20000170
 8000f00:	200001f0 	.word	0x200001f0
 8000f04:	20000098 	.word	0x20000098
 8000f08:	20000091 	.word	0x20000091
 8000f0c:	20000094 	.word	0x20000094

08000f10 <Server_Init>:
uint8_t Rx_Line_Flag = 0;
uint8_t Wifi_Get_Command_Flag = 0;



void Server_Init(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000f14:	2032      	movs	r0, #50	; 0x32
 8000f16:	f000 fa23 	bl	8001360 <HAL_Delay>
	printf("AT+RST\r\n");
 8000f1a:	4810      	ldr	r0, [pc, #64]	; (8000f5c <Server_Init+0x4c>)
 8000f1c:	f003 f80a 	bl	8003f34 <puts>
	HAL_Delay(300);
 8000f20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f24:	f000 fa1c 	bl	8001360 <HAL_Delay>
	printf("AT+CWMODE=2\r\n");
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <Server_Init+0x50>)
 8000f2a:	f003 f803 	bl	8003f34 <puts>
	HAL_Delay(100);
 8000f2e:	2064      	movs	r0, #100	; 0x64
 8000f30:	f000 fa16 	bl	8001360 <HAL_Delay>
	printf("AT+CIPMUX=1\r\n");
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <Server_Init+0x54>)
 8000f36:	f002 fffd 	bl	8003f34 <puts>
	HAL_Delay(100);
 8000f3a:	2064      	movs	r0, #100	; 0x64
 8000f3c:	f000 fa10 	bl	8001360 <HAL_Delay>
	printf("AT+CIPSERVER=1,8080\r\n");
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <Server_Init+0x58>)
 8000f42:	f002 fff7 	bl	8003f34 <puts>
	HAL_Delay(100);
 8000f46:	2064      	movs	r0, #100	; 0x64
 8000f48:	f000 fa0a 	bl	8001360 <HAL_Delay>
	printf("AT+CIPSTO=0\r\n");
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <Server_Init+0x5c>)
 8000f4e:	f002 fff1 	bl	8003f34 <puts>
	HAL_Delay(100);
 8000f52:	2064      	movs	r0, #100	; 0x64
 8000f54:	f000 fa04 	bl	8001360 <HAL_Delay>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	08004cf4 	.word	0x08004cf4
 8000f60:	08004cfc 	.word	0x08004cfc
 8000f64:	08004d0c 	.word	0x08004d0c
 8000f68:	08004d1c 	.word	0x08004d1c
 8000f6c:	08004d34 	.word	0x08004d34

08000f70 <Server_SentTo_Client>:

void Server_SentTo_Client(uint8_t *Str) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8000f78:	2032      	movs	r0, #50	; 0x32
 8000f7a:	f000 f9f1 	bl	8001360 <HAL_Delay>
	printf("AT+CIPSEND=0,%d\r\n", Strlen(Str) + 2);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f818 	bl	8000fb4 <Strlen>
 8000f84:	4603      	mov	r3, r0
 8000f86:	3302      	adds	r3, #2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <Server_SentTo_Client+0x3c>)
 8000f8c:	f002 ff5e 	bl	8003e4c <iprintf>
	HAL_Delay(50);
 8000f90:	2032      	movs	r0, #50	; 0x32
 8000f92:	f000 f9e5 	bl	8001360 <HAL_Delay>
	printf("%s\r\n", Str);
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <Server_SentTo_Client+0x40>)
 8000f9a:	f002 ff57 	bl	8003e4c <iprintf>
	HAL_Delay(50);
 8000f9e:	2032      	movs	r0, #50	; 0x32
 8000fa0:	f000 f9de 	bl	8001360 <HAL_Delay>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	08004d44 	.word	0x08004d44
 8000fb0:	08004d58 	.word	0x08004d58

08000fb4 <Strlen>:

 uint8_t Strlen(uint8_t *s) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	 for(uint8_t i = 0; i < 256; i++) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <Strlen+0x1c>
			 return i;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	e003      	b.n	8000fd8 <Strlen+0x24>
	 for(uint8_t i = 0; i < 256; i++) {
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 8000fd6:	e7f3      	b.n	8000fc0 <Strlen+0xc>
		 }
	 }
 }
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <Strcpy>:
 void Strcpy(uint8_t *s1, uint8_t *s2) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	 uint8_t i;
	 for(i = 0; s2[i] != '\0'; i++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e00a      	b.n	800100a <Strcpy+0x26>
		 s1[i] = s2[i];
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	441a      	add	r2, r3
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	440b      	add	r3, r1
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	701a      	strb	r2, [r3, #0]
	 for(i = 0; s2[i] != '\0'; i++) {
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3301      	adds	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1ee      	bne.n	8000ff4 <Strcpy+0x10>
	 }
	 s1[i] = '\0';
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
 }
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <Strcmp>:
uint8_t Strcmp(uint8_t *s1, uint8_t *s2) {
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	uint8_t i;
		 for(i = 0; s2[i] != '\0'; i++) {
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e00e      	b.n	800105a <Strcmp+0x2e>
			 if(s1[i] != s2[i]) {
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	440b      	add	r3, r1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	429a      	cmp	r2, r3
 800104e:	d001      	beq.n	8001054 <Strcmp+0x28>
				 return 0;
 8001050:	2300      	movs	r3, #0
 8001052:	e011      	b.n	8001078 <Strcmp+0x4c>
		 for(i = 0; s2[i] != '\0'; i++) {
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	3301      	adds	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1ea      	bne.n	800103c <Strcmp+0x10>
			 }
		 }
		 if(s1[i] == '\0') {
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <Strcmp+0x4a>
			 return 1;
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <Strcmp+0x4c>
		 }
		 return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_UART_RxCpltCallback>:

//UART接收中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_UART_RxCpltCallback+0x78>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d12d      	bne.n	80010f4 <HAL_UART_RxCpltCallback+0x70>
		if(Rx_Line_Flag == 0) {
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_UART_RxCpltCallback+0x7c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d124      	bne.n	80010ea <HAL_UART_RxCpltCallback+0x66>
			if(Uart1_Rx_Char == '\n') {
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_UART_RxCpltCallback+0x80>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b0a      	cmp	r3, #10
 80010a6:	d113      	bne.n	80010d0 <HAL_UART_RxCpltCallback+0x4c>
				Uart1_Rx_Buffer[Rx_Buffer_Size] = '\0';
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_UART_RxCpltCallback+0x84>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <HAL_UART_RxCpltCallback+0x88>)
 80010b0:	2100      	movs	r1, #0
 80010b2:	5499      	strb	r1, [r3, r2]
				//if(Rx_Buffer_Size >= 5) {
					Rx_Line_Flag = 1;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_UART_RxCpltCallback+0x7c>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
				//}
				if(Rx_Buffer_Size == 0){
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_UART_RxCpltCallback+0x84>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <HAL_UART_RxCpltCallback+0x44>
					Rx_Line_Flag = 0;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_UART_RxCpltCallback+0x7c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
				}
				Rx_Buffer_Size = 0;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_UART_RxCpltCallback+0x84>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e00c      	b.n	80010ea <HAL_UART_RxCpltCallback+0x66>
			}else {
				Uart1_Rx_Buffer[Rx_Buffer_Size] = Uart1_Rx_Char;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_UART_RxCpltCallback+0x84>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_UART_RxCpltCallback+0x80>)
 80010d8:	7819      	ldrb	r1, [r3, #0]
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_UART_RxCpltCallback+0x88>)
 80010dc:	5499      	strb	r1, [r3, r2]
				Rx_Buffer_Size++;
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_UART_RxCpltCallback+0x84>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_UART_RxCpltCallback+0x84>)
 80010e8:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	4905      	ldr	r1, [pc, #20]	; (8001104 <HAL_UART_RxCpltCallback+0x80>)
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <HAL_UART_RxCpltCallback+0x78>)
 80010f0:	f002 f828 	bl	8003144 <HAL_UART_Receive_IT>
	}
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200001b0 	.word	0x200001b0
 8001100:	20000165 	.word	0x20000165
 8001104:	200001f4 	.word	0x200001f4
 8001108:	20000164 	.word	0x20000164
 800110c:	2000009c 	.word	0x2000009c

08001110 <Tcp_DataAccept>:

void Tcp_DataAccept(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

	if(Wifi_Get_Command_Flag == 1) {
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <Tcp_DataAccept+0x98>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d104      	bne.n	8001128 <Tcp_DataAccept+0x18>
			Tcp_DataDeal();
 800111e:	f7ff fb23 	bl	8000768 <Tcp_DataDeal>
			Wifi_Get_Command_Flag = 0;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <Tcp_DataAccept+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
		  }
		  if(Rx_Line_Flag == 1) {
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <Tcp_DataAccept+0x9c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d137      	bne.n	80011a0 <Tcp_DataAccept+0x90>
			  if(Wifi_Get_Command_Flag == 0) {
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <Tcp_DataAccept+0x98>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d130      	bne.n	800119a <Tcp_DataAccept+0x8a>
				  Wifi_Command_Buffer[0] = Uart1_Rx_Buffer[0];
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <Tcp_DataAccept+0xa0>)
 800113a:	781a      	ldrb	r2, [r3, #0]
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <Tcp_DataAccept+0xa4>)
 800113e:	701a      	strb	r2, [r3, #0]
		  		  Wifi_Command_Buffer[1] = Uart1_Rx_Buffer[1];
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <Tcp_DataAccept+0xa0>)
 8001142:	785a      	ldrb	r2, [r3, #1]
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <Tcp_DataAccept+0xa4>)
 8001146:	705a      	strb	r2, [r3, #1]
		  		  Wifi_Command_Buffer[2] = Uart1_Rx_Buffer[2];
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <Tcp_DataAccept+0xa0>)
 800114a:	789a      	ldrb	r2, [r3, #2]
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <Tcp_DataAccept+0xa4>)
 800114e:	709a      	strb	r2, [r3, #2]
		  		  Wifi_Command_Buffer[3] = Uart1_Rx_Buffer[3];
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <Tcp_DataAccept+0xa0>)
 8001152:	78da      	ldrb	r2, [r3, #3]
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <Tcp_DataAccept+0xa4>)
 8001156:	70da      	strb	r2, [r3, #3]
		  		  Wifi_Command_Buffer[4] = '\0';
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <Tcp_DataAccept+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	711a      	strb	r2, [r3, #4]
		  		  if(Strcmp(Wifi_Command_Buffer, "+IPD") == 1) {
 800115e:	4916      	ldr	r1, [pc, #88]	; (80011b8 <Tcp_DataAccept+0xa8>)
 8001160:	4814      	ldr	r0, [pc, #80]	; (80011b4 <Tcp_DataAccept+0xa4>)
 8001162:	f7ff ff63 	bl	800102c <Strcmp>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d116      	bne.n	800119a <Tcp_DataAccept+0x8a>
		  			  //Strcpy(Wifi_Command_Buffer, Uart1_Rx_Buffer);
		  			  Wifi_Get_Command_Flag = 1;
 800116c:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <Tcp_DataAccept+0x98>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
		  			  for(uint8_t i = 0; ; i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	71fb      	strb	r3, [r7, #7]
		  				  if(Uart1_Rx_Buffer[i] == ':') {
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <Tcp_DataAccept+0xa0>)
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	2b3a      	cmp	r3, #58	; 0x3a
 800117e:	d108      	bne.n	8001192 <Tcp_DataAccept+0x82>
		  					  Strcpy(Wifi_Command_Buffer, Uart1_Rx_Buffer + i + 1);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	3301      	adds	r3, #1
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <Tcp_DataAccept+0xa0>)
 8001186:	4413      	add	r3, r2
 8001188:	4619      	mov	r1, r3
 800118a:	480a      	ldr	r0, [pc, #40]	; (80011b4 <Tcp_DataAccept+0xa4>)
 800118c:	f7ff ff2a 	bl	8000fe4 <Strcpy>
		  					  break;
 8001190:	e003      	b.n	800119a <Tcp_DataAccept+0x8a>
		  			  for(uint8_t i = 0; ; i++) {
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	3301      	adds	r3, #1
 8001196:	71fb      	strb	r3, [r7, #7]
		  				  if(Uart1_Rx_Buffer[i] == ':') {
 8001198:	e7ed      	b.n	8001176 <Tcp_DataAccept+0x66>
		  				  }
		  			  }
		  		  }
			  }
			  Rx_Line_Flag = 0;
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <Tcp_DataAccept+0x9c>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
		  }
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000166 	.word	0x20000166
 80011ac:	20000165 	.word	0x20000165
 80011b0:	2000009c 	.word	0x2000009c
 80011b4:	20000100 	.word	0x20000100
 80011b8:	08004d60 	.word	0x08004d60

080011bc <IntToStr>:
	//weak修饰 在main中重写
		//do nothing

}

void IntToStr(uint32_t num, uint8_t *s) {
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
	uint32_t TempNum = num;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

	if(num == 0) {
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d103      	bne.n	80011d8 <IntToStr+0x1c>
		s[0] = '0';
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2230      	movs	r2, #48	; 0x30
 80011d4:	701a      	strb	r2, [r3, #0]
		return;
 80011d6:	e049      	b.n	800126c <IntToStr+0xb0>
	}

	for(uint8_t i = 0; ; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	72fb      	strb	r3, [r7, #11]
		if(TempNum == 0) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d129      	bne.n	8001236 <IntToStr+0x7a>
			for(uint8_t j = 0; j < i / 2; j++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	72bb      	strb	r3, [r7, #10]
 80011e6:	e01a      	b.n	800121e <IntToStr+0x62>
				uint8_t temp = s[j];
 80011e8:	7abb      	ldrb	r3, [r7, #10]
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	727b      	strb	r3, [r7, #9]
				s[j] = s[i - j - 1];
 80011f2:	7afa      	ldrb	r2, [r7, #11]
 80011f4:	7abb      	ldrb	r3, [r7, #10]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	3b01      	subs	r3, #1
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	441a      	add	r2, r3
 80011fe:	7abb      	ldrb	r3, [r7, #10]
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	440b      	add	r3, r1
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	701a      	strb	r2, [r3, #0]
				s[i - j - 1] = temp;
 8001208:	7afa      	ldrb	r2, [r7, #11]
 800120a:	7abb      	ldrb	r3, [r7, #10]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	3b01      	subs	r3, #1
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	4413      	add	r3, r2
 8001214:	7a7a      	ldrb	r2, [r7, #9]
 8001216:	701a      	strb	r2, [r3, #0]
			for(uint8_t j = 0; j < i / 2; j++) {
 8001218:	7abb      	ldrb	r3, [r7, #10]
 800121a:	3301      	adds	r3, #1
 800121c:	72bb      	strb	r3, [r7, #10]
 800121e:	7afb      	ldrb	r3, [r7, #11]
 8001220:	085b      	lsrs	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	7aba      	ldrb	r2, [r7, #10]
 8001226:	429a      	cmp	r2, r3
 8001228:	d3de      	bcc.n	80011e8 <IntToStr+0x2c>
			}
			s[i] = 0;
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4413      	add	r3, r2
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
			break;
 8001234:	e01a      	b.n	800126c <IntToStr+0xb0>
		}
		s[i] = '0' + TempNum % 10;
 8001236:	68f9      	ldr	r1, [r7, #12]
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <IntToStr+0xbc>)
 800123a:	fba3 2301 	umull	r2, r3, r3, r1
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	1aca      	subs	r2, r1, r3
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	6839      	ldr	r1, [r7, #0]
 8001250:	440b      	add	r3, r1
 8001252:	3230      	adds	r2, #48	; 0x30
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	701a      	strb	r2, [r3, #0]
		TempNum /= 10;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <IntToStr+0xbc>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; ; i++) {
 8001264:	7afb      	ldrb	r3, [r7, #11]
 8001266:	3301      	adds	r3, #1
 8001268:	72fb      	strb	r3, [r7, #11]
		if(TempNum == 0) {
 800126a:	e7b7      	b.n	80011dc <IntToStr+0x20>
	}

}
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	cccccccd 	.word	0xcccccccd

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_Init+0x40>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_Init+0x40>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_Init+0x40>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f94d 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f808 	bl	80012c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b0:	f7ff fa88 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x54>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x58>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f965 	bl	80015ae <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 f92d 	bl	800155a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_InitTick+0x5c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000000 	.word	0x20000000
 8001318:	20000008 	.word	0x20000008
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	200001f8 	.word	0x200001f8

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200001f8 	.word	0x200001f8

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_Delay+0x40>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000008 	.word	0x20000008

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f7ff ff8e 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff29 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff3e 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff8e 	bl	8001498 <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5d 	bl	8001444 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff31 	bl	8001408 <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffa2 	bl	8001500 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d004      	beq.n	80015e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e00c      	b.n	80015fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2205      	movs	r2, #5
 80015e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	e16b      	b.n	8001900 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001628:	2201      	movs	r2, #1
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	429a      	cmp	r2, r3
 8001642:	f040 815a 	bne.w	80018fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d00b      	beq.n	8001666 <HAL_GPIO_Init+0x5a>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800165a:	2b11      	cmp	r3, #17
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b12      	cmp	r3, #18
 8001664:	d130      	bne.n	80016c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800169c:	2201      	movs	r2, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 0201 	and.w	r2, r3, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0xfc>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b12      	cmp	r3, #18
 8001706:	d123      	bne.n	8001750 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	08da      	lsrs	r2, r3, #3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3208      	adds	r2, #8
 8001710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	08da      	lsrs	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3208      	adds	r2, #8
 800174a:	69b9      	ldr	r1, [r7, #24]
 800174c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0203 	and.w	r2, r3, #3
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80b4 	beq.w	80018fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b5f      	ldr	r3, [pc, #380]	; (8001914 <HAL_GPIO_Init+0x308>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a5e      	ldr	r2, [pc, #376]	; (8001914 <HAL_GPIO_Init+0x308>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b5c      	ldr	r3, [pc, #368]	; (8001914 <HAL_GPIO_Init+0x308>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ae:	4a5a      	ldr	r2, [pc, #360]	; (8001918 <HAL_GPIO_Init+0x30c>)
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a51      	ldr	r2, [pc, #324]	; (800191c <HAL_GPIO_Init+0x310>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d02b      	beq.n	8001832 <HAL_GPIO_Init+0x226>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a50      	ldr	r2, [pc, #320]	; (8001920 <HAL_GPIO_Init+0x314>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d025      	beq.n	800182e <HAL_GPIO_Init+0x222>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4f      	ldr	r2, [pc, #316]	; (8001924 <HAL_GPIO_Init+0x318>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d01f      	beq.n	800182a <HAL_GPIO_Init+0x21e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4e      	ldr	r2, [pc, #312]	; (8001928 <HAL_GPIO_Init+0x31c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d019      	beq.n	8001826 <HAL_GPIO_Init+0x21a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4d      	ldr	r2, [pc, #308]	; (800192c <HAL_GPIO_Init+0x320>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0x216>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4c      	ldr	r2, [pc, #304]	; (8001930 <HAL_GPIO_Init+0x324>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00d      	beq.n	800181e <HAL_GPIO_Init+0x212>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4b      	ldr	r2, [pc, #300]	; (8001934 <HAL_GPIO_Init+0x328>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d007      	beq.n	800181a <HAL_GPIO_Init+0x20e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_GPIO_Init+0x32c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_GPIO_Init+0x20a>
 8001812:	2307      	movs	r3, #7
 8001814:	e00e      	b.n	8001834 <HAL_GPIO_Init+0x228>
 8001816:	2308      	movs	r3, #8
 8001818:	e00c      	b.n	8001834 <HAL_GPIO_Init+0x228>
 800181a:	2306      	movs	r3, #6
 800181c:	e00a      	b.n	8001834 <HAL_GPIO_Init+0x228>
 800181e:	2305      	movs	r3, #5
 8001820:	e008      	b.n	8001834 <HAL_GPIO_Init+0x228>
 8001822:	2304      	movs	r3, #4
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x228>
 8001826:	2303      	movs	r3, #3
 8001828:	e004      	b.n	8001834 <HAL_GPIO_Init+0x228>
 800182a:	2302      	movs	r3, #2
 800182c:	e002      	b.n	8001834 <HAL_GPIO_Init+0x228>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x228>
 8001832:	2300      	movs	r3, #0
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f002 0203 	and.w	r2, r2, #3
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	4093      	lsls	r3, r2
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001844:	4934      	ldr	r1, [pc, #208]	; (8001918 <HAL_GPIO_Init+0x30c>)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001852:	4b3a      	ldr	r3, [pc, #232]	; (800193c <HAL_GPIO_Init+0x330>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001876:	4a31      	ldr	r2, [pc, #196]	; (800193c <HAL_GPIO_Init+0x330>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800187c:	4b2f      	ldr	r3, [pc, #188]	; (800193c <HAL_GPIO_Init+0x330>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <HAL_GPIO_Init+0x330>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_GPIO_Init+0x330>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ca:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_GPIO_Init+0x330>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_GPIO_Init+0x330>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f4:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_GPIO_Init+0x330>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3301      	adds	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	f67f ae90 	bls.w	8001628 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001908:	bf00      	nop
 800190a:	3724      	adds	r7, #36	; 0x24
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40023800 	.word	0x40023800
 8001918:	40013800 	.word	0x40013800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40020800 	.word	0x40020800
 8001928:	40020c00 	.word	0x40020c00
 800192c:	40021000 	.word	0x40021000
 8001930:	40021400 	.word	0x40021400
 8001934:	40021800 	.word	0x40021800
 8001938:	40021c00 	.word	0x40021c00
 800193c:	40013c00 	.word	0x40013c00

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800195c:	e003      	b.n	8001966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	619a      	str	r2, [r3, #24]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e25b      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d075      	beq.n	8001a7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001992:	4ba3      	ldr	r3, [pc, #652]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b04      	cmp	r3, #4
 800199c:	d00c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4ba0      	ldr	r3, [pc, #640]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d112      	bne.n	80019d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019aa:	4b9d      	ldr	r3, [pc, #628]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019b6:	d10b      	bne.n	80019d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	4b99      	ldr	r3, [pc, #612]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d05b      	beq.n	8001a7c <HAL_RCC_OscConfig+0x108>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d157      	bne.n	8001a7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e236      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d8:	d106      	bne.n	80019e8 <HAL_RCC_OscConfig+0x74>
 80019da:	4b91      	ldr	r3, [pc, #580]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a90      	ldr	r2, [pc, #576]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e01d      	b.n	8001a24 <HAL_RCC_OscConfig+0xb0>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x98>
 80019f2:	4b8b      	ldr	r3, [pc, #556]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a8a      	ldr	r2, [pc, #552]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b88      	ldr	r3, [pc, #544]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a87      	ldr	r2, [pc, #540]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0xb0>
 8001a0c:	4b84      	ldr	r3, [pc, #528]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a83      	ldr	r2, [pc, #524]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b81      	ldr	r3, [pc, #516]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a80      	ldr	r2, [pc, #512]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fc8c 	bl	8001348 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fc88 	bl	8001348 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1fb      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xc0>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fc78 	bl	8001348 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fc74 	bl	8001348 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1e7      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	4b6c      	ldr	r3, [pc, #432]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0xe8>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d063      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a8a:	4b65      	ldr	r3, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a96:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d11c      	bne.n	8001adc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x152>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1bb      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4952      	ldr	r1, [pc, #328]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	e03a      	b.n	8001b52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b4f      	ldr	r3, [pc, #316]	; (8001c24 <HAL_RCC_OscConfig+0x2b0>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fc2d 	bl	8001348 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fc29 	bl	8001348 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e19c      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4940      	ldr	r1, [pc, #256]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_RCC_OscConfig+0x2b0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fc0c 	bl	8001348 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff fc08 	bl	8001348 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e17b      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d030      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d016      	beq.n	8001b94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b66:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_RCC_OscConfig+0x2b4>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fbec 	bl	8001348 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff fbe8 	bl	8001348 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e15b      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x200>
 8001b92:	e015      	b.n	8001bc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_RCC_OscConfig+0x2b4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fbd5 	bl	8001348 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fbd1 	bl	8001348 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e144      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a0 	beq.w	8001d0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10f      	bne.n	8001bfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_OscConfig+0x2b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d121      	bne.n	8001c4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_RCC_OscConfig+0x2b8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_RCC_OscConfig+0x2b8>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fb97 	bl	8001348 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	e011      	b.n	8001c42 <HAL_RCC_OscConfig+0x2ce>
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	42470000 	.word	0x42470000
 8001c28:	42470e80 	.word	0x42470e80
 8001c2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c30:	f7ff fb8a 	bl	8001348 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0fd      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <HAL_RCC_OscConfig+0x4d4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2f0>
 8001c56:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a7c      	ldr	r2, [pc, #496]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70
 8001c62:	e01c      	b.n	8001c9e <HAL_RCC_OscConfig+0x32a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d10c      	bne.n	8001c86 <HAL_RCC_OscConfig+0x312>
 8001c6c:	4b77      	ldr	r3, [pc, #476]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a76      	ldr	r2, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	4b74      	ldr	r3, [pc, #464]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a73      	ldr	r2, [pc, #460]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
 8001c84:	e00b      	b.n	8001c9e <HAL_RCC_OscConfig+0x32a>
 8001c86:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a70      	ldr	r2, [pc, #448]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
 8001c92:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a6d      	ldr	r2, [pc, #436]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d015      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fb4f 	bl	8001348 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7ff fb4b 	bl	8001348 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0bc      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ee      	beq.n	8001cae <HAL_RCC_OscConfig+0x33a>
 8001cd0:	e014      	b.n	8001cfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fb39 	bl	8001348 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff fb35 	bl	8001348 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e0a6      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ee      	bne.n	8001cda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d02:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a51      	ldr	r2, [pc, #324]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8092 	beq.w	8001e3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d18:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d05c      	beq.n	8001dde <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d141      	bne.n	8001db0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	4b48      	ldr	r3, [pc, #288]	; (8001e50 <HAL_RCC_OscConfig+0x4dc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff fb09 	bl	8001348 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7ff fb05 	bl	8001348 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e078      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f0      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	019b      	lsls	r3, r3, #6
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	085b      	lsrs	r3, r3, #1
 8001d70:	3b01      	subs	r3, #1
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	061b      	lsls	r3, r3, #24
 8001d7c:	4933      	ldr	r1, [pc, #204]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x4dc>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fade 	bl	8001348 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff fada 	bl	8001348 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e04d      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x41c>
 8001dae:	e045      	b.n	8001e3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x4dc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff fac7 	bl	8001348 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff fac3 	bl	8001348 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e036      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x44a>
 8001ddc:	e02e      	b.n	8001e3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e029      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_RCC_OscConfig+0x4d8>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d11c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d115      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e12:	4013      	ands	r3, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d10d      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	42470060 	.word	0x42470060

08001e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0cc      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b68      	ldr	r3, [pc, #416]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d90c      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b65      	ldr	r3, [pc, #404]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b63      	ldr	r3, [pc, #396]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0b8      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d020      	beq.n	8001ede <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea8:	4b59      	ldr	r3, [pc, #356]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4a58      	ldr	r2, [pc, #352]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ecc:	4b50      	ldr	r3, [pc, #320]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	494d      	ldr	r1, [pc, #308]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d044      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d119      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e07f      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b3f      	ldr	r3, [pc, #252]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e06f      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e067      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f32:	4b37      	ldr	r3, [pc, #220]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f023 0203 	bic.w	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4934      	ldr	r1, [pc, #208]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f44:	f7ff fa00 	bl	8001348 <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4c:	f7ff f9fc 	bl	8001348 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e04f      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 020c 	and.w	r2, r3, #12
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1eb      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d20c      	bcs.n	8001f9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e032      	b.n	8002002 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4916      	ldr	r1, [pc, #88]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	490e      	ldr	r1, [pc, #56]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fda:	f000 f821 	bl	8002020 <HAL_RCC_GetSysClockFreq>
 8001fde:	4601      	mov	r1, r0
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	fa21 f303 	lsr.w	r3, r1, r3
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff f960 	bl	80012c0 <HAL_InitTick>

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023c00 	.word	0x40023c00
 8002010:	40023800 	.word	0x40023800
 8002014:	08004d68 	.word	0x08004d68
 8002018:	20000000 	.word	0x20000000
 800201c:	20000004 	.word	0x20000004

08002020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b04      	cmp	r3, #4
 8002040:	d007      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0x32>
 8002042:	2b08      	cmp	r3, #8
 8002044:	d008      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x38>
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 80b4 	bne.w	80021b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800204c:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800204e:	60bb      	str	r3, [r7, #8]
       break;
 8002050:	e0b3      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002052:	4b5e      	ldr	r3, [pc, #376]	; (80021cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002054:	60bb      	str	r3, [r7, #8]
      break;
 8002056:	e0b0      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002058:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002060:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002062:	4b58      	ldr	r3, [pc, #352]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d04a      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206e:	4b55      	ldr	r3, [pc, #340]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	099b      	lsrs	r3, r3, #6
 8002074:	f04f 0400 	mov.w	r4, #0
 8002078:	f240 11ff 	movw	r1, #511	; 0x1ff
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	ea03 0501 	and.w	r5, r3, r1
 8002084:	ea04 0602 	and.w	r6, r4, r2
 8002088:	4629      	mov	r1, r5
 800208a:	4632      	mov	r2, r6
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	f04f 0400 	mov.w	r4, #0
 8002094:	0154      	lsls	r4, r2, #5
 8002096:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800209a:	014b      	lsls	r3, r1, #5
 800209c:	4619      	mov	r1, r3
 800209e:	4622      	mov	r2, r4
 80020a0:	1b49      	subs	r1, r1, r5
 80020a2:	eb62 0206 	sbc.w	r2, r2, r6
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f04f 0400 	mov.w	r4, #0
 80020ae:	0194      	lsls	r4, r2, #6
 80020b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020b4:	018b      	lsls	r3, r1, #6
 80020b6:	1a5b      	subs	r3, r3, r1
 80020b8:	eb64 0402 	sbc.w	r4, r4, r2
 80020bc:	f04f 0100 	mov.w	r1, #0
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	00e2      	lsls	r2, r4, #3
 80020c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020ca:	00d9      	lsls	r1, r3, #3
 80020cc:	460b      	mov	r3, r1
 80020ce:	4614      	mov	r4, r2
 80020d0:	195b      	adds	r3, r3, r5
 80020d2:	eb44 0406 	adc.w	r4, r4, r6
 80020d6:	f04f 0100 	mov.w	r1, #0
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	0262      	lsls	r2, r4, #9
 80020e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020e4:	0259      	lsls	r1, r3, #9
 80020e6:	460b      	mov	r3, r1
 80020e8:	4614      	mov	r4, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	4621      	mov	r1, r4
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f04f 0400 	mov.w	r4, #0
 80020f4:	461a      	mov	r2, r3
 80020f6:	4623      	mov	r3, r4
 80020f8:	f7fe f8ba 	bl	8000270 <__aeabi_uldivmod>
 80020fc:	4603      	mov	r3, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	e049      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	f04f 0400 	mov.w	r4, #0
 800210e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	ea03 0501 	and.w	r5, r3, r1
 800211a:	ea04 0602 	and.w	r6, r4, r2
 800211e:	4629      	mov	r1, r5
 8002120:	4632      	mov	r2, r6
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	f04f 0400 	mov.w	r4, #0
 800212a:	0154      	lsls	r4, r2, #5
 800212c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002130:	014b      	lsls	r3, r1, #5
 8002132:	4619      	mov	r1, r3
 8002134:	4622      	mov	r2, r4
 8002136:	1b49      	subs	r1, r1, r5
 8002138:	eb62 0206 	sbc.w	r2, r2, r6
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	f04f 0400 	mov.w	r4, #0
 8002144:	0194      	lsls	r4, r2, #6
 8002146:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800214a:	018b      	lsls	r3, r1, #6
 800214c:	1a5b      	subs	r3, r3, r1
 800214e:	eb64 0402 	sbc.w	r4, r4, r2
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	00e2      	lsls	r2, r4, #3
 800215c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002160:	00d9      	lsls	r1, r3, #3
 8002162:	460b      	mov	r3, r1
 8002164:	4614      	mov	r4, r2
 8002166:	195b      	adds	r3, r3, r5
 8002168:	eb44 0406 	adc.w	r4, r4, r6
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	02a2      	lsls	r2, r4, #10
 8002176:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800217a:	0299      	lsls	r1, r3, #10
 800217c:	460b      	mov	r3, r1
 800217e:	4614      	mov	r4, r2
 8002180:	4618      	mov	r0, r3
 8002182:	4621      	mov	r1, r4
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f04f 0400 	mov.w	r4, #0
 800218a:	461a      	mov	r2, r3
 800218c:	4623      	mov	r3, r4
 800218e:	f7fe f86f 	bl	8000270 <__aeabi_uldivmod>
 8002192:	4603      	mov	r3, r0
 8002194:	460c      	mov	r4, r1
 8002196:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	3301      	adds	r3, #1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	60bb      	str	r3, [r7, #8]
      break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021b6:	60bb      	str	r3, [r7, #8]
      break;
 80021b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ba:	68bb      	ldr	r3, [r7, #8]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	00f42400 	.word	0x00f42400
 80021cc:	007a1200 	.word	0x007a1200

080021d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000000 	.word	0x20000000

080021e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021ec:	f7ff fff0 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 80021f0:	4601      	mov	r1, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0a9b      	lsrs	r3, r3, #10
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4a03      	ldr	r2, [pc, #12]	; (800220c <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fe:	5cd3      	ldrb	r3, [r2, r3]
 8002200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	08004d78 	.word	0x08004d78

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002214:	f7ff ffdc 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 8002218:	4601      	mov	r1, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	0b5b      	lsrs	r3, r3, #13
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4a03      	ldr	r2, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	fa21 f303 	lsr.w	r3, r1, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	08004d78 	.word	0x08004d78

08002238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e01d      	b.n	8002286 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fc3a 	bl	8000ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 fb64 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e01d      	b.n	80022dc <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f815 	bl	80022e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2202      	movs	r2, #2
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	4610      	mov	r0, r2
 80022ce:	f000 fb39 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b0c      	cmp	r3, #12
 8002306:	d841      	bhi.n	800238c <HAL_TIM_IC_Start_IT+0x94>
 8002308:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <HAL_TIM_IC_Start_IT+0x18>)
 800230a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230e:	bf00      	nop
 8002310:	08002345 	.word	0x08002345
 8002314:	0800238d 	.word	0x0800238d
 8002318:	0800238d 	.word	0x0800238d
 800231c:	0800238d 	.word	0x0800238d
 8002320:	08002357 	.word	0x08002357
 8002324:	0800238d 	.word	0x0800238d
 8002328:	0800238d 	.word	0x0800238d
 800232c:	0800238d 	.word	0x0800238d
 8002330:	08002369 	.word	0x08002369
 8002334:	0800238d 	.word	0x0800238d
 8002338:	0800238d 	.word	0x0800238d
 800233c:	0800238d 	.word	0x0800238d
 8002340:	0800237b 	.word	0x0800237b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0202 	orr.w	r2, r2, #2
 8002352:	60da      	str	r2, [r3, #12]
      break;
 8002354:	e01b      	b.n	800238e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0204 	orr.w	r2, r2, #4
 8002364:	60da      	str	r2, [r3, #12]
      break;
 8002366:	e012      	b.n	800238e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0208 	orr.w	r2, r2, #8
 8002376:	60da      	str	r2, [r3, #12]
      break;
 8002378:	e009      	b.n	800238e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0210 	orr.w	r2, r2, #16
 8002388:	60da      	str	r2, [r3, #12]
      break;
 800238a:	e000      	b.n	800238e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800238c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	6839      	ldr	r1, [r7, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fd38 	bl	8002e0c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d007      	beq.n	80023be <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d122      	bne.n	8002424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d11b      	bne.n	8002424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0202 	mvn.w	r2, #2
 80023f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe fcc2 	bl	8000d94 <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fa78 	bl	8002908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fa7f 	bl	800291c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b04      	cmp	r3, #4
 8002430:	d122      	bne.n	8002478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d11b      	bne.n	8002478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0204 	mvn.w	r2, #4
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe fc98 	bl	8000d94 <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa4e 	bl	8002908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fa55 	bl	800291c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b08      	cmp	r3, #8
 8002484:	d122      	bne.n	80024cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b08      	cmp	r3, #8
 8002492:	d11b      	bne.n	80024cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0208 	mvn.w	r2, #8
 800249c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2204      	movs	r2, #4
 80024a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe fc6e 	bl	8000d94 <HAL_TIM_IC_CaptureCallback>
 80024b8:	e005      	b.n	80024c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fa24 	bl	8002908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fa2b 	bl	800291c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d122      	bne.n	8002520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d11b      	bne.n	8002520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0210 	mvn.w	r2, #16
 80024f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2208      	movs	r2, #8
 80024f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fc44 	bl	8000d94 <HAL_TIM_IC_CaptureCallback>
 800250c:	e005      	b.n	800251a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f9fa 	bl	8002908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fa01 	bl	800291c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10e      	bne.n	800254c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0201 	mvn.w	r2, #1
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fbca 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002556:	2b80      	cmp	r3, #128	; 0x80
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002564:	2b80      	cmp	r3, #128	; 0x80
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fcf6 	bl	8002f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b40      	cmp	r3, #64	; 0x40
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	d107      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f9c6 	bl	8002930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d10e      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d107      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0220 	mvn.w	r2, #32
 80025c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fcc0 	bl	8002f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e08a      	b.n	8002708 <HAL_TIM_IC_ConfigChannel+0x130>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2202      	movs	r2, #2
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d11b      	bne.n	8002640 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6819      	ldr	r1, [r3, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f000 fa34 	bl	8002a84 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 020c 	bic.w	r2, r2, #12
 800262a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6999      	ldr	r1, [r3, #24]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	619a      	str	r2, [r3, #24]
 800263e:	e05a      	b.n	80026f6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d11c      	bne.n	8002680 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f000 fab8 	bl	8002bca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002668:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6999      	ldr	r1, [r3, #24]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	021a      	lsls	r2, r3, #8
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	619a      	str	r2, [r3, #24]
 800267e:	e03a      	b.n	80026f6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b08      	cmp	r3, #8
 8002684:	d11b      	bne.n	80026be <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f000 fb05 	bl	8002ca4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 020c 	bic.w	r2, r2, #12
 80026a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69d9      	ldr	r1, [r3, #28]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	61da      	str	r2, [r3, #28]
 80026bc:	e01b      	b.n	80026f6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6819      	ldr	r1, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f000 fb25 	bl	8002d1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69d9      	ldr	r1, [r3, #28]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	021a      	lsls	r2, r3, #8
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_TIM_ConfigClockSource+0x18>
 8002724:	2302      	movs	r3, #2
 8002726:	e0a6      	b.n	8002876 <HAL_TIM_ConfigClockSource+0x166>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800274e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b40      	cmp	r3, #64	; 0x40
 800275e:	d067      	beq.n	8002830 <HAL_TIM_ConfigClockSource+0x120>
 8002760:	2b40      	cmp	r3, #64	; 0x40
 8002762:	d80b      	bhi.n	800277c <HAL_TIM_ConfigClockSource+0x6c>
 8002764:	2b10      	cmp	r3, #16
 8002766:	d073      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0x140>
 8002768:	2b10      	cmp	r3, #16
 800276a:	d802      	bhi.n	8002772 <HAL_TIM_ConfigClockSource+0x62>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d06f      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002770:	e078      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002772:	2b20      	cmp	r3, #32
 8002774:	d06c      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0x140>
 8002776:	2b30      	cmp	r3, #48	; 0x30
 8002778:	d06a      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800277a:	e073      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800277c:	2b70      	cmp	r3, #112	; 0x70
 800277e:	d00d      	beq.n	800279c <HAL_TIM_ConfigClockSource+0x8c>
 8002780:	2b70      	cmp	r3, #112	; 0x70
 8002782:	d804      	bhi.n	800278e <HAL_TIM_ConfigClockSource+0x7e>
 8002784:	2b50      	cmp	r3, #80	; 0x50
 8002786:	d033      	beq.n	80027f0 <HAL_TIM_ConfigClockSource+0xe0>
 8002788:	2b60      	cmp	r3, #96	; 0x60
 800278a:	d041      	beq.n	8002810 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800278c:	e06a      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002792:	d066      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x152>
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002798:	d017      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800279a:	e063      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f000 fb0e 	bl	8002dcc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	609a      	str	r2, [r3, #8]
      break;
 80027c8:	e04c      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f000 faf7 	bl	8002dcc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027ec:	609a      	str	r2, [r3, #8]
      break;
 80027ee:	e039      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	461a      	mov	r2, r3
 80027fe:	f000 f9b5 	bl	8002b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2150      	movs	r1, #80	; 0x50
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fac4 	bl	8002d96 <TIM_ITRx_SetConfig>
      break;
 800280e:	e029      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	461a      	mov	r2, r3
 800281e:	f000 fa11 	bl	8002c44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2160      	movs	r1, #96	; 0x60
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fab4 	bl	8002d96 <TIM_ITRx_SetConfig>
      break;
 800282e:	e019      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	461a      	mov	r2, r3
 800283e:	f000 f995 	bl	8002b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	4618      	mov	r0, r3
 800284a:	f000 faa4 	bl	8002d96 <TIM_ITRx_SetConfig>
      break;
 800284e:	e009      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f000 fa9b 	bl	8002d96 <TIM_ITRx_SetConfig>
      break;
 8002860:	e000      	b.n	8002864 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d831      	bhi.n	80028f8 <HAL_TIM_ReadCapturedValue+0x78>
 8002894:	a201      	add	r2, pc, #4	; (adr r2, 800289c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289a:	bf00      	nop
 800289c:	080028d1 	.word	0x080028d1
 80028a0:	080028f9 	.word	0x080028f9
 80028a4:	080028f9 	.word	0x080028f9
 80028a8:	080028f9 	.word	0x080028f9
 80028ac:	080028db 	.word	0x080028db
 80028b0:	080028f9 	.word	0x080028f9
 80028b4:	080028f9 	.word	0x080028f9
 80028b8:	080028f9 	.word	0x080028f9
 80028bc:	080028e5 	.word	0x080028e5
 80028c0:	080028f9 	.word	0x080028f9
 80028c4:	080028f9 	.word	0x080028f9
 80028c8:	080028f9 	.word	0x080028f9
 80028cc:	080028ef 	.word	0x080028ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	60fb      	str	r3, [r7, #12]

      break;
 80028d8:	e00f      	b.n	80028fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	60fb      	str	r3, [r7, #12]

      break;
 80028e2:	e00a      	b.n	80028fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	60fb      	str	r3, [r7, #12]

      break;
 80028ec:	e005      	b.n	80028fa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	60fb      	str	r3, [r7, #12]

      break;
 80028f6:	e000      	b.n	80028fa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80028f8:	bf00      	nop
  }

  return tmpreg;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a40      	ldr	r2, [pc, #256]	; (8002a58 <TIM_Base_SetConfig+0x114>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <TIM_Base_SetConfig+0x40>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002962:	d00f      	beq.n	8002984 <TIM_Base_SetConfig+0x40>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3d      	ldr	r2, [pc, #244]	; (8002a5c <TIM_Base_SetConfig+0x118>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00b      	beq.n	8002984 <TIM_Base_SetConfig+0x40>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3c      	ldr	r2, [pc, #240]	; (8002a60 <TIM_Base_SetConfig+0x11c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d007      	beq.n	8002984 <TIM_Base_SetConfig+0x40>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a3b      	ldr	r2, [pc, #236]	; (8002a64 <TIM_Base_SetConfig+0x120>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <TIM_Base_SetConfig+0x40>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a3a      	ldr	r2, [pc, #232]	; (8002a68 <TIM_Base_SetConfig+0x124>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d108      	bne.n	8002996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2f      	ldr	r2, [pc, #188]	; (8002a58 <TIM_Base_SetConfig+0x114>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02b      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a4:	d027      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a2c      	ldr	r2, [pc, #176]	; (8002a5c <TIM_Base_SetConfig+0x118>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d023      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a2b      	ldr	r2, [pc, #172]	; (8002a60 <TIM_Base_SetConfig+0x11c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01f      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a2a      	ldr	r2, [pc, #168]	; (8002a64 <TIM_Base_SetConfig+0x120>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01b      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <TIM_Base_SetConfig+0x124>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d017      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <TIM_Base_SetConfig+0x128>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <TIM_Base_SetConfig+0x12c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00f      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <TIM_Base_SetConfig+0x130>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a25      	ldr	r2, [pc, #148]	; (8002a78 <TIM_Base_SetConfig+0x134>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <TIM_Base_SetConfig+0x138>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a23      	ldr	r2, [pc, #140]	; (8002a80 <TIM_Base_SetConfig+0x13c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <TIM_Base_SetConfig+0x114>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d003      	beq.n	8002a3c <TIM_Base_SetConfig+0xf8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <TIM_Base_SetConfig+0x124>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d103      	bne.n	8002a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	615a      	str	r2, [r3, #20]
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800
 8002a64:	40000c00 	.word	0x40000c00
 8002a68:	40010400 	.word	0x40010400
 8002a6c:	40014000 	.word	0x40014000
 8002a70:	40014400 	.word	0x40014400
 8002a74:	40014800 	.word	0x40014800
 8002a78:	40001800 	.word	0x40001800
 8002a7c:	40001c00 	.word	0x40001c00
 8002a80:	40002000 	.word	0x40002000

08002a84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f023 0201 	bic.w	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4a28      	ldr	r2, [pc, #160]	; (8002b50 <TIM_TI1_SetConfig+0xcc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d01b      	beq.n	8002aea <TIM_TI1_SetConfig+0x66>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab8:	d017      	beq.n	8002aea <TIM_TI1_SetConfig+0x66>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <TIM_TI1_SetConfig+0xd0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <TIM_TI1_SetConfig+0x66>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <TIM_TI1_SetConfig+0xd4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00f      	beq.n	8002aea <TIM_TI1_SetConfig+0x66>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <TIM_TI1_SetConfig+0xd8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00b      	beq.n	8002aea <TIM_TI1_SetConfig+0x66>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <TIM_TI1_SetConfig+0xdc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d007      	beq.n	8002aea <TIM_TI1_SetConfig+0x66>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <TIM_TI1_SetConfig+0xe0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d003      	beq.n	8002aea <TIM_TI1_SetConfig+0x66>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4a20      	ldr	r2, [pc, #128]	; (8002b68 <TIM_TI1_SetConfig+0xe4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <TIM_TI1_SetConfig+0x6a>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <TIM_TI1_SetConfig+0x6c>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0303 	bic.w	r3, r3, #3
 8002afa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	e003      	b.n	8002b0e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f023 030a 	bic.w	r3, r3, #10
 8002b28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 030a 	and.w	r3, r3, #10
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	621a      	str	r2, [r3, #32]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800
 8002b5c:	40000c00 	.word	0x40000c00
 8002b60:	40010400 	.word	0x40010400
 8002b64:	40014000 	.word	0x40014000
 8002b68:	40001800 	.word	0x40001800

08002b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f023 0201 	bic.w	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f023 030a 	bic.w	r3, r3, #10
 8002ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b087      	sub	sp, #28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f023 0210 	bic.w	r2, r3, #16
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	031b      	lsls	r3, r3, #12
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	621a      	str	r2, [r3, #32]
}
 8002c38:	bf00      	nop
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f023 0210 	bic.w	r2, r3, #16
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	031b      	lsls	r3, r3, #12
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	621a      	str	r2, [r3, #32]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f023 0303 	bic.w	r3, r3, #3
 8002cd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002cf4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	621a      	str	r2, [r3, #32]
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	031b      	lsls	r3, r3, #12
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	031b      	lsls	r3, r3, #12
 8002d74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	621a      	str	r2, [r3, #32]
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f043 0307 	orr.w	r3, r3, #7
 8002db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	609a      	str	r2, [r3, #8]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	021a      	lsls	r2, r3, #8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	609a      	str	r2, [r3, #8]
}
 8002e00:	bf00      	nop
 8002e02:	371c      	adds	r7, #28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2201      	movs	r2, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	621a      	str	r2, [r3, #32]
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e05a      	b.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d022      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebc:	d01d      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1b      	ldr	r2, [pc, #108]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00e      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a18      	ldr	r2, [pc, #96]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10c      	bne.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40000c00 	.word	0x40000c00
 8002f44:	40010400 	.word	0x40010400
 8002f48:	40014000 	.word	0x40014000
 8002f4c:	40001800 	.word	0x40001800

08002f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e03f      	b.n	800300a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fe12 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fb97 	bl	80036f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b088      	sub	sp, #32
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b20      	cmp	r3, #32
 8003030:	f040 8083 	bne.w	800313a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_UART_Transmit+0x2e>
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e07b      	b.n	800313c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_UART_Transmit+0x40>
 800304e:	2302      	movs	r3, #2
 8003050:	e074      	b.n	800313c <HAL_UART_Transmit+0x12a>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2221      	movs	r2, #33	; 0x21
 8003064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003068:	f7fe f96e 	bl	8001348 <HAL_GetTick>
 800306c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003082:	e042      	b.n	800310a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003088:	b29b      	uxth	r3, r3
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	d122      	bne.n	80030e2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f9b6 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e042      	b.n	800313c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3302      	adds	r3, #2
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	e017      	b.n	800310a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	e013      	b.n	800310a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2200      	movs	r2, #0
 80030ea:	2180      	movs	r1, #128	; 0x80
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f993 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e01f      	b.n	800313c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	60ba      	str	r2, [r7, #8]
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1b7      	bne.n	8003084 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2200      	movs	r2, #0
 800311c:	2140      	movs	r1, #64	; 0x40
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f97a 	bl	8003418 <UART_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e006      	b.n	800313c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	4613      	mov	r3, r2
 8003150:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b20      	cmp	r3, #32
 800315c:	d140      	bne.n	80031e0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_UART_Receive_IT+0x26>
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e039      	b.n	80031e2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_UART_Receive_IT+0x38>
 8003178:	2302      	movs	r3, #2
 800317a:	e032      	b.n	80031e2 <HAL_UART_Receive_IT+0x9e>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2222      	movs	r2, #34	; 0x22
 80031a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ba:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0220 	orr.w	r2, r2, #32
 80031da:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10d      	bne.n	8003242 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_UART_IRQHandler+0x52>
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f9d6 	bl	80035ec <UART_Receive_IT>
      return;
 8003240:	e0d1      	b.n	80033e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80b0 	beq.w	80033aa <HAL_UART_IRQHandler+0x1ba>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_UART_IRQHandler+0x70>
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a5 	beq.w	80033aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_UART_IRQHandler+0x90>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_UART_IRQHandler+0xb0>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003298:	f043 0202 	orr.w	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_UART_IRQHandler+0xd0>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	f043 0204 	orr.w	r2, r3, #4
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00f      	beq.n	80032ea <HAL_UART_IRQHandler+0xfa>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <HAL_UART_IRQHandler+0xee>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	f043 0208 	orr.w	r2, r3, #8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d078      	beq.n	80033e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_UART_IRQHandler+0x11c>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f970 	bl	80035ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	bf0c      	ite	eq
 800331a:	2301      	moveq	r3, #1
 800331c:	2300      	movne	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_UART_IRQHandler+0x144>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d031      	beq.n	8003398 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f8b9 	bl	80034ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d123      	bne.n	8003390 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003356:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003364:	4a21      	ldr	r2, [pc, #132]	; (80033ec <HAL_UART_IRQHandler+0x1fc>)
 8003366:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe f92a 	bl	80015c6 <HAL_DMA_Abort_IT>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d016      	beq.n	80033a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003382:	4610      	mov	r0, r2
 8003384:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003386:	e00e      	b.n	80033a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f83b 	bl	8003404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338e:	e00a      	b.n	80033a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f837 	bl	8003404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003396:	e006      	b.n	80033a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f833 	bl	8003404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033a4:	e01e      	b.n	80033e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a6:	bf00      	nop
    return;
 80033a8:	e01c      	b.n	80033e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_UART_IRQHandler+0x1d6>
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8a6 	bl	8003510 <UART_Transmit_IT>
    return;
 80033c4:	e00f      	b.n	80033e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_UART_IRQHandler+0x1f6>
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8ee 	bl	80035bc <UART_EndTransmit_IT>
    return;
 80033e0:	bf00      	nop
 80033e2:	e000      	b.n	80033e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80033e4:	bf00      	nop
  }
}
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	080034e9 	.word	0x080034e9

080033f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003428:	e02c      	b.n	8003484 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d028      	beq.n	8003484 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <UART_WaitOnFlagUntilTimeout+0x30>
 8003438:	f7fd ff86 	bl	8001348 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	429a      	cmp	r2, r3
 8003446:	d21d      	bcs.n	8003484 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003456:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e00f      	b.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4013      	ands	r3, r2
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	429a      	cmp	r2, r3
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d0c3      	beq.n	800342a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7ff ff7e 	bl	8003404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b21      	cmp	r3, #33	; 0x21
 8003522:	d144      	bne.n	80035ae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352c:	d11a      	bne.n	8003564 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003542:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	1c9a      	adds	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	621a      	str	r2, [r3, #32]
 8003556:	e00e      	b.n	8003576 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	621a      	str	r2, [r3, #32]
 8003562:	e008      	b.n	8003576 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	1c59      	adds	r1, r3, #1
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6211      	str	r1, [r2, #32]
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4619      	mov	r1, r3
 8003584:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003598:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
  }
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff07 	bl	80033f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b22      	cmp	r3, #34	; 0x22
 80035fe:	d171      	bne.n	80036e4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	d123      	bne.n	8003652 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10e      	bne.n	8003636 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	1c9a      	adds	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
 8003634:	e029      	b.n	800368a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	b29b      	uxth	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
 8003650:	e01b      	b.n	800368a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6858      	ldr	r0, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	1c59      	adds	r1, r3, #1
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6291      	str	r1, [r2, #40]	; 0x28
 800366a:	b2c2      	uxtb	r2, r0
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e00c      	b.n	800368a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	1c58      	adds	r0, r3, #1
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	6288      	str	r0, [r1, #40]	; 0x28
 8003682:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29b      	uxth	r3, r3
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4619      	mov	r1, r3
 8003698:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800369a:	2b00      	cmp	r3, #0
 800369c:	d120      	bne.n	80036e0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0220 	bic.w	r2, r2, #32
 80036ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd fcd4 	bl	8001084 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e002      	b.n	80036e6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003732:	f023 030c 	bic.w	r3, r3, #12
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	68f9      	ldr	r1, [r7, #12]
 800373c:	430b      	orrs	r3, r1
 800373e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800375e:	f040 818b 	bne.w	8003a78 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4ac1      	ldr	r2, [pc, #772]	; (8003a6c <UART_SetConfig+0x37c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d005      	beq.n	8003778 <UART_SetConfig+0x88>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4abf      	ldr	r2, [pc, #764]	; (8003a70 <UART_SetConfig+0x380>)
 8003772:	4293      	cmp	r3, r2
 8003774:	f040 80bd 	bne.w	80038f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003778:	f7fe fd4a 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 800377c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	461d      	mov	r5, r3
 8003782:	f04f 0600 	mov.w	r6, #0
 8003786:	46a8      	mov	r8, r5
 8003788:	46b1      	mov	r9, r6
 800378a:	eb18 0308 	adds.w	r3, r8, r8
 800378e:	eb49 0409 	adc.w	r4, r9, r9
 8003792:	4698      	mov	r8, r3
 8003794:	46a1      	mov	r9, r4
 8003796:	eb18 0805 	adds.w	r8, r8, r5
 800379a:	eb49 0906 	adc.w	r9, r9, r6
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037b2:	4688      	mov	r8, r1
 80037b4:	4691      	mov	r9, r2
 80037b6:	eb18 0005 	adds.w	r0, r8, r5
 80037ba:	eb49 0106 	adc.w	r1, r9, r6
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	461d      	mov	r5, r3
 80037c4:	f04f 0600 	mov.w	r6, #0
 80037c8:	196b      	adds	r3, r5, r5
 80037ca:	eb46 0406 	adc.w	r4, r6, r6
 80037ce:	461a      	mov	r2, r3
 80037d0:	4623      	mov	r3, r4
 80037d2:	f7fc fd4d 	bl	8000270 <__aeabi_uldivmod>
 80037d6:	4603      	mov	r3, r0
 80037d8:	460c      	mov	r4, r1
 80037da:	461a      	mov	r2, r3
 80037dc:	4ba5      	ldr	r3, [pc, #660]	; (8003a74 <UART_SetConfig+0x384>)
 80037de:	fba3 2302 	umull	r2, r3, r3, r2
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	461d      	mov	r5, r3
 80037ec:	f04f 0600 	mov.w	r6, #0
 80037f0:	46a9      	mov	r9, r5
 80037f2:	46b2      	mov	sl, r6
 80037f4:	eb19 0309 	adds.w	r3, r9, r9
 80037f8:	eb4a 040a 	adc.w	r4, sl, sl
 80037fc:	4699      	mov	r9, r3
 80037fe:	46a2      	mov	sl, r4
 8003800:	eb19 0905 	adds.w	r9, r9, r5
 8003804:	eb4a 0a06 	adc.w	sl, sl, r6
 8003808:	f04f 0100 	mov.w	r1, #0
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003814:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003818:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800381c:	4689      	mov	r9, r1
 800381e:	4692      	mov	sl, r2
 8003820:	eb19 0005 	adds.w	r0, r9, r5
 8003824:	eb4a 0106 	adc.w	r1, sl, r6
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	461d      	mov	r5, r3
 800382e:	f04f 0600 	mov.w	r6, #0
 8003832:	196b      	adds	r3, r5, r5
 8003834:	eb46 0406 	adc.w	r4, r6, r6
 8003838:	461a      	mov	r2, r3
 800383a:	4623      	mov	r3, r4
 800383c:	f7fc fd18 	bl	8000270 <__aeabi_uldivmod>
 8003840:	4603      	mov	r3, r0
 8003842:	460c      	mov	r4, r1
 8003844:	461a      	mov	r2, r3
 8003846:	4b8b      	ldr	r3, [pc, #556]	; (8003a74 <UART_SetConfig+0x384>)
 8003848:	fba3 1302 	umull	r1, r3, r3, r2
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	2164      	movs	r1, #100	; 0x64
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	3332      	adds	r3, #50	; 0x32
 800385a:	4a86      	ldr	r2, [pc, #536]	; (8003a74 <UART_SetConfig+0x384>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003868:	4498      	add	r8, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	461d      	mov	r5, r3
 800386e:	f04f 0600 	mov.w	r6, #0
 8003872:	46a9      	mov	r9, r5
 8003874:	46b2      	mov	sl, r6
 8003876:	eb19 0309 	adds.w	r3, r9, r9
 800387a:	eb4a 040a 	adc.w	r4, sl, sl
 800387e:	4699      	mov	r9, r3
 8003880:	46a2      	mov	sl, r4
 8003882:	eb19 0905 	adds.w	r9, r9, r5
 8003886:	eb4a 0a06 	adc.w	sl, sl, r6
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003896:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800389a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800389e:	4689      	mov	r9, r1
 80038a0:	4692      	mov	sl, r2
 80038a2:	eb19 0005 	adds.w	r0, r9, r5
 80038a6:	eb4a 0106 	adc.w	r1, sl, r6
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	461d      	mov	r5, r3
 80038b0:	f04f 0600 	mov.w	r6, #0
 80038b4:	196b      	adds	r3, r5, r5
 80038b6:	eb46 0406 	adc.w	r4, r6, r6
 80038ba:	461a      	mov	r2, r3
 80038bc:	4623      	mov	r3, r4
 80038be:	f7fc fcd7 	bl	8000270 <__aeabi_uldivmod>
 80038c2:	4603      	mov	r3, r0
 80038c4:	460c      	mov	r4, r1
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b6a      	ldr	r3, [pc, #424]	; (8003a74 <UART_SetConfig+0x384>)
 80038ca:	fba3 1302 	umull	r1, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2164      	movs	r1, #100	; 0x64
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	3332      	adds	r3, #50	; 0x32
 80038dc:	4a65      	ldr	r2, [pc, #404]	; (8003a74 <UART_SetConfig+0x384>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	f003 0207 	and.w	r2, r3, #7
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4442      	add	r2, r8
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	e26f      	b.n	8003dd2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038f2:	f7fe fc79 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 80038f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	461d      	mov	r5, r3
 80038fc:	f04f 0600 	mov.w	r6, #0
 8003900:	46a8      	mov	r8, r5
 8003902:	46b1      	mov	r9, r6
 8003904:	eb18 0308 	adds.w	r3, r8, r8
 8003908:	eb49 0409 	adc.w	r4, r9, r9
 800390c:	4698      	mov	r8, r3
 800390e:	46a1      	mov	r9, r4
 8003910:	eb18 0805 	adds.w	r8, r8, r5
 8003914:	eb49 0906 	adc.w	r9, r9, r6
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003924:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003928:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800392c:	4688      	mov	r8, r1
 800392e:	4691      	mov	r9, r2
 8003930:	eb18 0005 	adds.w	r0, r8, r5
 8003934:	eb49 0106 	adc.w	r1, r9, r6
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	461d      	mov	r5, r3
 800393e:	f04f 0600 	mov.w	r6, #0
 8003942:	196b      	adds	r3, r5, r5
 8003944:	eb46 0406 	adc.w	r4, r6, r6
 8003948:	461a      	mov	r2, r3
 800394a:	4623      	mov	r3, r4
 800394c:	f7fc fc90 	bl	8000270 <__aeabi_uldivmod>
 8003950:	4603      	mov	r3, r0
 8003952:	460c      	mov	r4, r1
 8003954:	461a      	mov	r2, r3
 8003956:	4b47      	ldr	r3, [pc, #284]	; (8003a74 <UART_SetConfig+0x384>)
 8003958:	fba3 2302 	umull	r2, r3, r3, r2
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	461d      	mov	r5, r3
 8003966:	f04f 0600 	mov.w	r6, #0
 800396a:	46a9      	mov	r9, r5
 800396c:	46b2      	mov	sl, r6
 800396e:	eb19 0309 	adds.w	r3, r9, r9
 8003972:	eb4a 040a 	adc.w	r4, sl, sl
 8003976:	4699      	mov	r9, r3
 8003978:	46a2      	mov	sl, r4
 800397a:	eb19 0905 	adds.w	r9, r9, r5
 800397e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800398e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003992:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003996:	4689      	mov	r9, r1
 8003998:	4692      	mov	sl, r2
 800399a:	eb19 0005 	adds.w	r0, r9, r5
 800399e:	eb4a 0106 	adc.w	r1, sl, r6
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	461d      	mov	r5, r3
 80039a8:	f04f 0600 	mov.w	r6, #0
 80039ac:	196b      	adds	r3, r5, r5
 80039ae:	eb46 0406 	adc.w	r4, r6, r6
 80039b2:	461a      	mov	r2, r3
 80039b4:	4623      	mov	r3, r4
 80039b6:	f7fc fc5b 	bl	8000270 <__aeabi_uldivmod>
 80039ba:	4603      	mov	r3, r0
 80039bc:	460c      	mov	r4, r1
 80039be:	461a      	mov	r2, r3
 80039c0:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <UART_SetConfig+0x384>)
 80039c2:	fba3 1302 	umull	r1, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2164      	movs	r1, #100	; 0x64
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	3332      	adds	r3, #50	; 0x32
 80039d4:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <UART_SetConfig+0x384>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039e2:	4498      	add	r8, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	461d      	mov	r5, r3
 80039e8:	f04f 0600 	mov.w	r6, #0
 80039ec:	46a9      	mov	r9, r5
 80039ee:	46b2      	mov	sl, r6
 80039f0:	eb19 0309 	adds.w	r3, r9, r9
 80039f4:	eb4a 040a 	adc.w	r4, sl, sl
 80039f8:	4699      	mov	r9, r3
 80039fa:	46a2      	mov	sl, r4
 80039fc:	eb19 0905 	adds.w	r9, r9, r5
 8003a00:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a04:	f04f 0100 	mov.w	r1, #0
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a18:	4689      	mov	r9, r1
 8003a1a:	4692      	mov	sl, r2
 8003a1c:	eb19 0005 	adds.w	r0, r9, r5
 8003a20:	eb4a 0106 	adc.w	r1, sl, r6
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	461d      	mov	r5, r3
 8003a2a:	f04f 0600 	mov.w	r6, #0
 8003a2e:	196b      	adds	r3, r5, r5
 8003a30:	eb46 0406 	adc.w	r4, r6, r6
 8003a34:	461a      	mov	r2, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	f7fc fc1a 	bl	8000270 <__aeabi_uldivmod>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	461a      	mov	r2, r3
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <UART_SetConfig+0x384>)
 8003a44:	fba3 1302 	umull	r1, r3, r3, r2
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	2164      	movs	r1, #100	; 0x64
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	3332      	adds	r3, #50	; 0x32
 8003a56:	4a07      	ldr	r2, [pc, #28]	; (8003a74 <UART_SetConfig+0x384>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	f003 0207 	and.w	r2, r3, #7
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4442      	add	r2, r8
 8003a68:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a6a:	e1b2      	b.n	8003dd2 <UART_SetConfig+0x6e2>
 8003a6c:	40011000 	.word	0x40011000
 8003a70:	40011400 	.word	0x40011400
 8003a74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4ad7      	ldr	r2, [pc, #860]	; (8003ddc <UART_SetConfig+0x6ec>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d005      	beq.n	8003a8e <UART_SetConfig+0x39e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4ad6      	ldr	r2, [pc, #856]	; (8003de0 <UART_SetConfig+0x6f0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	f040 80d1 	bne.w	8003c30 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a8e:	f7fe fbbf 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8003a92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	469a      	mov	sl, r3
 8003a98:	f04f 0b00 	mov.w	fp, #0
 8003a9c:	46d0      	mov	r8, sl
 8003a9e:	46d9      	mov	r9, fp
 8003aa0:	eb18 0308 	adds.w	r3, r8, r8
 8003aa4:	eb49 0409 	adc.w	r4, r9, r9
 8003aa8:	4698      	mov	r8, r3
 8003aaa:	46a1      	mov	r9, r4
 8003aac:	eb18 080a 	adds.w	r8, r8, sl
 8003ab0:	eb49 090b 	adc.w	r9, r9, fp
 8003ab4:	f04f 0100 	mov.w	r1, #0
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ac0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ac4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ac8:	4688      	mov	r8, r1
 8003aca:	4691      	mov	r9, r2
 8003acc:	eb1a 0508 	adds.w	r5, sl, r8
 8003ad0:	eb4b 0609 	adc.w	r6, fp, r9
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	f04f 0400 	mov.w	r4, #0
 8003ae6:	0094      	lsls	r4, r2, #2
 8003ae8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003aec:	008b      	lsls	r3, r1, #2
 8003aee:	461a      	mov	r2, r3
 8003af0:	4623      	mov	r3, r4
 8003af2:	4628      	mov	r0, r5
 8003af4:	4631      	mov	r1, r6
 8003af6:	f7fc fbbb 	bl	8000270 <__aeabi_uldivmod>
 8003afa:	4603      	mov	r3, r0
 8003afc:	460c      	mov	r4, r1
 8003afe:	461a      	mov	r2, r3
 8003b00:	4bb8      	ldr	r3, [pc, #736]	; (8003de4 <UART_SetConfig+0x6f4>)
 8003b02:	fba3 2302 	umull	r2, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	469b      	mov	fp, r3
 8003b10:	f04f 0c00 	mov.w	ip, #0
 8003b14:	46d9      	mov	r9, fp
 8003b16:	46e2      	mov	sl, ip
 8003b18:	eb19 0309 	adds.w	r3, r9, r9
 8003b1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b20:	4699      	mov	r9, r3
 8003b22:	46a2      	mov	sl, r4
 8003b24:	eb19 090b 	adds.w	r9, r9, fp
 8003b28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b40:	4689      	mov	r9, r1
 8003b42:	4692      	mov	sl, r2
 8003b44:	eb1b 0509 	adds.w	r5, fp, r9
 8003b48:	eb4c 060a 	adc.w	r6, ip, sl
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4619      	mov	r1, r3
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	f04f 0400 	mov.w	r4, #0
 8003b5e:	0094      	lsls	r4, r2, #2
 8003b60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b64:	008b      	lsls	r3, r1, #2
 8003b66:	461a      	mov	r2, r3
 8003b68:	4623      	mov	r3, r4
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	4631      	mov	r1, r6
 8003b6e:	f7fc fb7f 	bl	8000270 <__aeabi_uldivmod>
 8003b72:	4603      	mov	r3, r0
 8003b74:	460c      	mov	r4, r1
 8003b76:	461a      	mov	r2, r3
 8003b78:	4b9a      	ldr	r3, [pc, #616]	; (8003de4 <UART_SetConfig+0x6f4>)
 8003b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	2164      	movs	r1, #100	; 0x64
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	3332      	adds	r3, #50	; 0x32
 8003b8c:	4a95      	ldr	r2, [pc, #596]	; (8003de4 <UART_SetConfig+0x6f4>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b98:	4498      	add	r8, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	469b      	mov	fp, r3
 8003b9e:	f04f 0c00 	mov.w	ip, #0
 8003ba2:	46d9      	mov	r9, fp
 8003ba4:	46e2      	mov	sl, ip
 8003ba6:	eb19 0309 	adds.w	r3, r9, r9
 8003baa:	eb4a 040a 	adc.w	r4, sl, sl
 8003bae:	4699      	mov	r9, r3
 8003bb0:	46a2      	mov	sl, r4
 8003bb2:	eb19 090b 	adds.w	r9, r9, fp
 8003bb6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bba:	f04f 0100 	mov.w	r1, #0
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bce:	4689      	mov	r9, r1
 8003bd0:	4692      	mov	sl, r2
 8003bd2:	eb1b 0509 	adds.w	r5, fp, r9
 8003bd6:	eb4c 060a 	adc.w	r6, ip, sl
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4619      	mov	r1, r3
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	f04f 0400 	mov.w	r4, #0
 8003bec:	0094      	lsls	r4, r2, #2
 8003bee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bf2:	008b      	lsls	r3, r1, #2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	f7fc fb38 	bl	8000270 <__aeabi_uldivmod>
 8003c00:	4603      	mov	r3, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b77      	ldr	r3, [pc, #476]	; (8003de4 <UART_SetConfig+0x6f4>)
 8003c08:	fba3 1302 	umull	r1, r3, r3, r2
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	2164      	movs	r1, #100	; 0x64
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	3332      	adds	r3, #50	; 0x32
 8003c1a:	4a72      	ldr	r2, [pc, #456]	; (8003de4 <UART_SetConfig+0x6f4>)
 8003c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	f003 020f 	and.w	r2, r3, #15
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4442      	add	r2, r8
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	e0d0      	b.n	8003dd2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c30:	f7fe fada 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 8003c34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	469a      	mov	sl, r3
 8003c3a:	f04f 0b00 	mov.w	fp, #0
 8003c3e:	46d0      	mov	r8, sl
 8003c40:	46d9      	mov	r9, fp
 8003c42:	eb18 0308 	adds.w	r3, r8, r8
 8003c46:	eb49 0409 	adc.w	r4, r9, r9
 8003c4a:	4698      	mov	r8, r3
 8003c4c:	46a1      	mov	r9, r4
 8003c4e:	eb18 080a 	adds.w	r8, r8, sl
 8003c52:	eb49 090b 	adc.w	r9, r9, fp
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c6a:	4688      	mov	r8, r1
 8003c6c:	4691      	mov	r9, r2
 8003c6e:	eb1a 0508 	adds.w	r5, sl, r8
 8003c72:	eb4b 0609 	adc.w	r6, fp, r9
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	f04f 0400 	mov.w	r4, #0
 8003c88:	0094      	lsls	r4, r2, #2
 8003c8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c8e:	008b      	lsls	r3, r1, #2
 8003c90:	461a      	mov	r2, r3
 8003c92:	4623      	mov	r3, r4
 8003c94:	4628      	mov	r0, r5
 8003c96:	4631      	mov	r1, r6
 8003c98:	f7fc faea 	bl	8000270 <__aeabi_uldivmod>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <UART_SetConfig+0x6f4>)
 8003ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	469b      	mov	fp, r3
 8003cb2:	f04f 0c00 	mov.w	ip, #0
 8003cb6:	46d9      	mov	r9, fp
 8003cb8:	46e2      	mov	sl, ip
 8003cba:	eb19 0309 	adds.w	r3, r9, r9
 8003cbe:	eb4a 040a 	adc.w	r4, sl, sl
 8003cc2:	4699      	mov	r9, r3
 8003cc4:	46a2      	mov	sl, r4
 8003cc6:	eb19 090b 	adds.w	r9, r9, fp
 8003cca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ce2:	4689      	mov	r9, r1
 8003ce4:	4692      	mov	sl, r2
 8003ce6:	eb1b 0509 	adds.w	r5, fp, r9
 8003cea:	eb4c 060a 	adc.w	r6, ip, sl
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	f04f 0400 	mov.w	r4, #0
 8003d00:	0094      	lsls	r4, r2, #2
 8003d02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d06:	008b      	lsls	r3, r1, #2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4623      	mov	r3, r4
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	4631      	mov	r1, r6
 8003d10:	f7fc faae 	bl	8000270 <__aeabi_uldivmod>
 8003d14:	4603      	mov	r3, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <UART_SetConfig+0x6f4>)
 8003d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	2164      	movs	r1, #100	; 0x64
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	3332      	adds	r3, #50	; 0x32
 8003d2e:	4a2d      	ldr	r2, [pc, #180]	; (8003de4 <UART_SetConfig+0x6f4>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	095b      	lsrs	r3, r3, #5
 8003d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d3a:	4498      	add	r8, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	469b      	mov	fp, r3
 8003d40:	f04f 0c00 	mov.w	ip, #0
 8003d44:	46d9      	mov	r9, fp
 8003d46:	46e2      	mov	sl, ip
 8003d48:	eb19 0309 	adds.w	r3, r9, r9
 8003d4c:	eb4a 040a 	adc.w	r4, sl, sl
 8003d50:	4699      	mov	r9, r3
 8003d52:	46a2      	mov	sl, r4
 8003d54:	eb19 090b 	adds.w	r9, r9, fp
 8003d58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d70:	4689      	mov	r9, r1
 8003d72:	4692      	mov	sl, r2
 8003d74:	eb1b 0509 	adds.w	r5, fp, r9
 8003d78:	eb4c 060a 	adc.w	r6, ip, sl
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4619      	mov	r1, r3
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	f04f 0400 	mov.w	r4, #0
 8003d8e:	0094      	lsls	r4, r2, #2
 8003d90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d94:	008b      	lsls	r3, r1, #2
 8003d96:	461a      	mov	r2, r3
 8003d98:	4623      	mov	r3, r4
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	4631      	mov	r1, r6
 8003d9e:	f7fc fa67 	bl	8000270 <__aeabi_uldivmod>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <UART_SetConfig+0x6f4>)
 8003daa:	fba3 1302 	umull	r1, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2164      	movs	r1, #100	; 0x64
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	3332      	adds	r3, #50	; 0x32
 8003dbc:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <UART_SetConfig+0x6f4>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	f003 020f 	and.w	r2, r3, #15
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4442      	add	r2, r8
 8003dce:	609a      	str	r2, [r3, #8]
}
 8003dd0:	e7ff      	b.n	8003dd2 <UART_SetConfig+0x6e2>
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ddc:	40011000 	.word	0x40011000
 8003de0:	40011400 	.word	0x40011400
 8003de4:	51eb851f 	.word	0x51eb851f

08003de8 <__errno>:
 8003de8:	4b01      	ldr	r3, [pc, #4]	; (8003df0 <__errno+0x8>)
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	2000000c 	.word	0x2000000c

08003df4 <__libc_init_array>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	4e0d      	ldr	r6, [pc, #52]	; (8003e2c <__libc_init_array+0x38>)
 8003df8:	4c0d      	ldr	r4, [pc, #52]	; (8003e30 <__libc_init_array+0x3c>)
 8003dfa:	1ba4      	subs	r4, r4, r6
 8003dfc:	10a4      	asrs	r4, r4, #2
 8003dfe:	2500      	movs	r5, #0
 8003e00:	42a5      	cmp	r5, r4
 8003e02:	d109      	bne.n	8003e18 <__libc_init_array+0x24>
 8003e04:	4e0b      	ldr	r6, [pc, #44]	; (8003e34 <__libc_init_array+0x40>)
 8003e06:	4c0c      	ldr	r4, [pc, #48]	; (8003e38 <__libc_init_array+0x44>)
 8003e08:	f000 ff68 	bl	8004cdc <_init>
 8003e0c:	1ba4      	subs	r4, r4, r6
 8003e0e:	10a4      	asrs	r4, r4, #2
 8003e10:	2500      	movs	r5, #0
 8003e12:	42a5      	cmp	r5, r4
 8003e14:	d105      	bne.n	8003e22 <__libc_init_array+0x2e>
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e1c:	4798      	blx	r3
 8003e1e:	3501      	adds	r5, #1
 8003e20:	e7ee      	b.n	8003e00 <__libc_init_array+0xc>
 8003e22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e26:	4798      	blx	r3
 8003e28:	3501      	adds	r5, #1
 8003e2a:	e7f2      	b.n	8003e12 <__libc_init_array+0x1e>
 8003e2c:	08004e20 	.word	0x08004e20
 8003e30:	08004e20 	.word	0x08004e20
 8003e34:	08004e20 	.word	0x08004e20
 8003e38:	08004e24 	.word	0x08004e24

08003e3c <memset>:
 8003e3c:	4402      	add	r2, r0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d100      	bne.n	8003e46 <memset+0xa>
 8003e44:	4770      	bx	lr
 8003e46:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4a:	e7f9      	b.n	8003e40 <memset+0x4>

08003e4c <iprintf>:
 8003e4c:	b40f      	push	{r0, r1, r2, r3}
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <iprintf+0x2c>)
 8003e50:	b513      	push	{r0, r1, r4, lr}
 8003e52:	681c      	ldr	r4, [r3, #0]
 8003e54:	b124      	cbz	r4, 8003e60 <iprintf+0x14>
 8003e56:	69a3      	ldr	r3, [r4, #24]
 8003e58:	b913      	cbnz	r3, 8003e60 <iprintf+0x14>
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f000 fa22 	bl	80042a4 <__sinit>
 8003e60:	ab05      	add	r3, sp, #20
 8003e62:	9a04      	ldr	r2, [sp, #16]
 8003e64:	68a1      	ldr	r1, [r4, #8]
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f000 fbdb 	bl	8004624 <_vfiprintf_r>
 8003e6e:	b002      	add	sp, #8
 8003e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e74:	b004      	add	sp, #16
 8003e76:	4770      	bx	lr
 8003e78:	2000000c 	.word	0x2000000c

08003e7c <_puts_r>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	460e      	mov	r6, r1
 8003e80:	4605      	mov	r5, r0
 8003e82:	b118      	cbz	r0, 8003e8c <_puts_r+0x10>
 8003e84:	6983      	ldr	r3, [r0, #24]
 8003e86:	b90b      	cbnz	r3, 8003e8c <_puts_r+0x10>
 8003e88:	f000 fa0c 	bl	80042a4 <__sinit>
 8003e8c:	69ab      	ldr	r3, [r5, #24]
 8003e8e:	68ac      	ldr	r4, [r5, #8]
 8003e90:	b913      	cbnz	r3, 8003e98 <_puts_r+0x1c>
 8003e92:	4628      	mov	r0, r5
 8003e94:	f000 fa06 	bl	80042a4 <__sinit>
 8003e98:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <_puts_r+0xac>)
 8003e9a:	429c      	cmp	r4, r3
 8003e9c:	d117      	bne.n	8003ece <_puts_r+0x52>
 8003e9e:	686c      	ldr	r4, [r5, #4]
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	071b      	lsls	r3, r3, #28
 8003ea4:	d51d      	bpl.n	8003ee2 <_puts_r+0x66>
 8003ea6:	6923      	ldr	r3, [r4, #16]
 8003ea8:	b1db      	cbz	r3, 8003ee2 <_puts_r+0x66>
 8003eaa:	3e01      	subs	r6, #1
 8003eac:	68a3      	ldr	r3, [r4, #8]
 8003eae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	60a3      	str	r3, [r4, #8]
 8003eb6:	b9e9      	cbnz	r1, 8003ef4 <_puts_r+0x78>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	da2e      	bge.n	8003f1a <_puts_r+0x9e>
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	210a      	movs	r1, #10
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f000 f83f 	bl	8003f44 <__swbuf_r>
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	d011      	beq.n	8003eee <_puts_r+0x72>
 8003eca:	200a      	movs	r0, #10
 8003ecc:	e011      	b.n	8003ef2 <_puts_r+0x76>
 8003ece:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <_puts_r+0xb0>)
 8003ed0:	429c      	cmp	r4, r3
 8003ed2:	d101      	bne.n	8003ed8 <_puts_r+0x5c>
 8003ed4:	68ac      	ldr	r4, [r5, #8]
 8003ed6:	e7e3      	b.n	8003ea0 <_puts_r+0x24>
 8003ed8:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <_puts_r+0xb4>)
 8003eda:	429c      	cmp	r4, r3
 8003edc:	bf08      	it	eq
 8003ede:	68ec      	ldreq	r4, [r5, #12]
 8003ee0:	e7de      	b.n	8003ea0 <_puts_r+0x24>
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 f87f 	bl	8003fe8 <__swsetup_r>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d0dd      	beq.n	8003eaa <_puts_r+0x2e>
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	da04      	bge.n	8003f02 <_puts_r+0x86>
 8003ef8:	69a2      	ldr	r2, [r4, #24]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	dc06      	bgt.n	8003f0c <_puts_r+0x90>
 8003efe:	290a      	cmp	r1, #10
 8003f00:	d004      	beq.n	8003f0c <_puts_r+0x90>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	6022      	str	r2, [r4, #0]
 8003f08:	7019      	strb	r1, [r3, #0]
 8003f0a:	e7cf      	b.n	8003eac <_puts_r+0x30>
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 f818 	bl	8003f44 <__swbuf_r>
 8003f14:	3001      	adds	r0, #1
 8003f16:	d1c9      	bne.n	8003eac <_puts_r+0x30>
 8003f18:	e7e9      	b.n	8003eee <_puts_r+0x72>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	200a      	movs	r0, #10
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	6022      	str	r2, [r4, #0]
 8003f22:	7018      	strb	r0, [r3, #0]
 8003f24:	e7e5      	b.n	8003ef2 <_puts_r+0x76>
 8003f26:	bf00      	nop
 8003f28:	08004da4 	.word	0x08004da4
 8003f2c:	08004dc4 	.word	0x08004dc4
 8003f30:	08004d84 	.word	0x08004d84

08003f34 <puts>:
 8003f34:	4b02      	ldr	r3, [pc, #8]	; (8003f40 <puts+0xc>)
 8003f36:	4601      	mov	r1, r0
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	f7ff bf9f 	b.w	8003e7c <_puts_r>
 8003f3e:	bf00      	nop
 8003f40:	2000000c 	.word	0x2000000c

08003f44 <__swbuf_r>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	460e      	mov	r6, r1
 8003f48:	4614      	mov	r4, r2
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	b118      	cbz	r0, 8003f56 <__swbuf_r+0x12>
 8003f4e:	6983      	ldr	r3, [r0, #24]
 8003f50:	b90b      	cbnz	r3, 8003f56 <__swbuf_r+0x12>
 8003f52:	f000 f9a7 	bl	80042a4 <__sinit>
 8003f56:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <__swbuf_r+0x98>)
 8003f58:	429c      	cmp	r4, r3
 8003f5a:	d12a      	bne.n	8003fb2 <__swbuf_r+0x6e>
 8003f5c:	686c      	ldr	r4, [r5, #4]
 8003f5e:	69a3      	ldr	r3, [r4, #24]
 8003f60:	60a3      	str	r3, [r4, #8]
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	071a      	lsls	r2, r3, #28
 8003f66:	d52e      	bpl.n	8003fc6 <__swbuf_r+0x82>
 8003f68:	6923      	ldr	r3, [r4, #16]
 8003f6a:	b363      	cbz	r3, 8003fc6 <__swbuf_r+0x82>
 8003f6c:	6923      	ldr	r3, [r4, #16]
 8003f6e:	6820      	ldr	r0, [r4, #0]
 8003f70:	1ac0      	subs	r0, r0, r3
 8003f72:	6963      	ldr	r3, [r4, #20]
 8003f74:	b2f6      	uxtb	r6, r6
 8003f76:	4283      	cmp	r3, r0
 8003f78:	4637      	mov	r7, r6
 8003f7a:	dc04      	bgt.n	8003f86 <__swbuf_r+0x42>
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f000 f926 	bl	80041d0 <_fflush_r>
 8003f84:	bb28      	cbnz	r0, 8003fd2 <__swbuf_r+0x8e>
 8003f86:	68a3      	ldr	r3, [r4, #8]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	60a3      	str	r3, [r4, #8]
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	6022      	str	r2, [r4, #0]
 8003f92:	701e      	strb	r6, [r3, #0]
 8003f94:	6963      	ldr	r3, [r4, #20]
 8003f96:	3001      	adds	r0, #1
 8003f98:	4283      	cmp	r3, r0
 8003f9a:	d004      	beq.n	8003fa6 <__swbuf_r+0x62>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	07db      	lsls	r3, r3, #31
 8003fa0:	d519      	bpl.n	8003fd6 <__swbuf_r+0x92>
 8003fa2:	2e0a      	cmp	r6, #10
 8003fa4:	d117      	bne.n	8003fd6 <__swbuf_r+0x92>
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 f911 	bl	80041d0 <_fflush_r>
 8003fae:	b190      	cbz	r0, 8003fd6 <__swbuf_r+0x92>
 8003fb0:	e00f      	b.n	8003fd2 <__swbuf_r+0x8e>
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <__swbuf_r+0x9c>)
 8003fb4:	429c      	cmp	r4, r3
 8003fb6:	d101      	bne.n	8003fbc <__swbuf_r+0x78>
 8003fb8:	68ac      	ldr	r4, [r5, #8]
 8003fba:	e7d0      	b.n	8003f5e <__swbuf_r+0x1a>
 8003fbc:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <__swbuf_r+0xa0>)
 8003fbe:	429c      	cmp	r4, r3
 8003fc0:	bf08      	it	eq
 8003fc2:	68ec      	ldreq	r4, [r5, #12]
 8003fc4:	e7cb      	b.n	8003f5e <__swbuf_r+0x1a>
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 f80d 	bl	8003fe8 <__swsetup_r>
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	d0cc      	beq.n	8003f6c <__swbuf_r+0x28>
 8003fd2:	f04f 37ff 	mov.w	r7, #4294967295
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	08004da4 	.word	0x08004da4
 8003fe0:	08004dc4 	.word	0x08004dc4
 8003fe4:	08004d84 	.word	0x08004d84

08003fe8 <__swsetup_r>:
 8003fe8:	4b32      	ldr	r3, [pc, #200]	; (80040b4 <__swsetup_r+0xcc>)
 8003fea:	b570      	push	{r4, r5, r6, lr}
 8003fec:	681d      	ldr	r5, [r3, #0]
 8003fee:	4606      	mov	r6, r0
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	b125      	cbz	r5, 8003ffe <__swsetup_r+0x16>
 8003ff4:	69ab      	ldr	r3, [r5, #24]
 8003ff6:	b913      	cbnz	r3, 8003ffe <__swsetup_r+0x16>
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f000 f953 	bl	80042a4 <__sinit>
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <__swsetup_r+0xd0>)
 8004000:	429c      	cmp	r4, r3
 8004002:	d10f      	bne.n	8004024 <__swsetup_r+0x3c>
 8004004:	686c      	ldr	r4, [r5, #4]
 8004006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800400a:	b29a      	uxth	r2, r3
 800400c:	0715      	lsls	r5, r2, #28
 800400e:	d42c      	bmi.n	800406a <__swsetup_r+0x82>
 8004010:	06d0      	lsls	r0, r2, #27
 8004012:	d411      	bmi.n	8004038 <__swsetup_r+0x50>
 8004014:	2209      	movs	r2, #9
 8004016:	6032      	str	r2, [r6, #0]
 8004018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401c:	81a3      	strh	r3, [r4, #12]
 800401e:	f04f 30ff 	mov.w	r0, #4294967295
 8004022:	e03e      	b.n	80040a2 <__swsetup_r+0xba>
 8004024:	4b25      	ldr	r3, [pc, #148]	; (80040bc <__swsetup_r+0xd4>)
 8004026:	429c      	cmp	r4, r3
 8004028:	d101      	bne.n	800402e <__swsetup_r+0x46>
 800402a:	68ac      	ldr	r4, [r5, #8]
 800402c:	e7eb      	b.n	8004006 <__swsetup_r+0x1e>
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <__swsetup_r+0xd8>)
 8004030:	429c      	cmp	r4, r3
 8004032:	bf08      	it	eq
 8004034:	68ec      	ldreq	r4, [r5, #12]
 8004036:	e7e6      	b.n	8004006 <__swsetup_r+0x1e>
 8004038:	0751      	lsls	r1, r2, #29
 800403a:	d512      	bpl.n	8004062 <__swsetup_r+0x7a>
 800403c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800403e:	b141      	cbz	r1, 8004052 <__swsetup_r+0x6a>
 8004040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004044:	4299      	cmp	r1, r3
 8004046:	d002      	beq.n	800404e <__swsetup_r+0x66>
 8004048:	4630      	mov	r0, r6
 800404a:	f000 fa19 	bl	8004480 <_free_r>
 800404e:	2300      	movs	r3, #0
 8004050:	6363      	str	r3, [r4, #52]	; 0x34
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004058:	81a3      	strh	r3, [r4, #12]
 800405a:	2300      	movs	r3, #0
 800405c:	6063      	str	r3, [r4, #4]
 800405e:	6923      	ldr	r3, [r4, #16]
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	f043 0308 	orr.w	r3, r3, #8
 8004068:	81a3      	strh	r3, [r4, #12]
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	b94b      	cbnz	r3, 8004082 <__swsetup_r+0x9a>
 800406e:	89a3      	ldrh	r3, [r4, #12]
 8004070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004078:	d003      	beq.n	8004082 <__swsetup_r+0x9a>
 800407a:	4621      	mov	r1, r4
 800407c:	4630      	mov	r0, r6
 800407e:	f000 f9bf 	bl	8004400 <__smakebuf_r>
 8004082:	89a2      	ldrh	r2, [r4, #12]
 8004084:	f012 0301 	ands.w	r3, r2, #1
 8004088:	d00c      	beq.n	80040a4 <__swsetup_r+0xbc>
 800408a:	2300      	movs	r3, #0
 800408c:	60a3      	str	r3, [r4, #8]
 800408e:	6963      	ldr	r3, [r4, #20]
 8004090:	425b      	negs	r3, r3
 8004092:	61a3      	str	r3, [r4, #24]
 8004094:	6923      	ldr	r3, [r4, #16]
 8004096:	b953      	cbnz	r3, 80040ae <__swsetup_r+0xc6>
 8004098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800409c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80040a0:	d1ba      	bne.n	8004018 <__swsetup_r+0x30>
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	0792      	lsls	r2, r2, #30
 80040a6:	bf58      	it	pl
 80040a8:	6963      	ldrpl	r3, [r4, #20]
 80040aa:	60a3      	str	r3, [r4, #8]
 80040ac:	e7f2      	b.n	8004094 <__swsetup_r+0xac>
 80040ae:	2000      	movs	r0, #0
 80040b0:	e7f7      	b.n	80040a2 <__swsetup_r+0xba>
 80040b2:	bf00      	nop
 80040b4:	2000000c 	.word	0x2000000c
 80040b8:	08004da4 	.word	0x08004da4
 80040bc:	08004dc4 	.word	0x08004dc4
 80040c0:	08004d84 	.word	0x08004d84

080040c4 <__sflush_r>:
 80040c4:	898a      	ldrh	r2, [r1, #12]
 80040c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ca:	4605      	mov	r5, r0
 80040cc:	0710      	lsls	r0, r2, #28
 80040ce:	460c      	mov	r4, r1
 80040d0:	d458      	bmi.n	8004184 <__sflush_r+0xc0>
 80040d2:	684b      	ldr	r3, [r1, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	dc05      	bgt.n	80040e4 <__sflush_r+0x20>
 80040d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	dc02      	bgt.n	80040e4 <__sflush_r+0x20>
 80040de:	2000      	movs	r0, #0
 80040e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040e6:	2e00      	cmp	r6, #0
 80040e8:	d0f9      	beq.n	80040de <__sflush_r+0x1a>
 80040ea:	2300      	movs	r3, #0
 80040ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040f0:	682f      	ldr	r7, [r5, #0]
 80040f2:	6a21      	ldr	r1, [r4, #32]
 80040f4:	602b      	str	r3, [r5, #0]
 80040f6:	d032      	beq.n	800415e <__sflush_r+0x9a>
 80040f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	075a      	lsls	r2, r3, #29
 80040fe:	d505      	bpl.n	800410c <__sflush_r+0x48>
 8004100:	6863      	ldr	r3, [r4, #4]
 8004102:	1ac0      	subs	r0, r0, r3
 8004104:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004106:	b10b      	cbz	r3, 800410c <__sflush_r+0x48>
 8004108:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800410a:	1ac0      	subs	r0, r0, r3
 800410c:	2300      	movs	r3, #0
 800410e:	4602      	mov	r2, r0
 8004110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004112:	6a21      	ldr	r1, [r4, #32]
 8004114:	4628      	mov	r0, r5
 8004116:	47b0      	blx	r6
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	d106      	bne.n	800412c <__sflush_r+0x68>
 800411e:	6829      	ldr	r1, [r5, #0]
 8004120:	291d      	cmp	r1, #29
 8004122:	d848      	bhi.n	80041b6 <__sflush_r+0xf2>
 8004124:	4a29      	ldr	r2, [pc, #164]	; (80041cc <__sflush_r+0x108>)
 8004126:	40ca      	lsrs	r2, r1
 8004128:	07d6      	lsls	r6, r2, #31
 800412a:	d544      	bpl.n	80041b6 <__sflush_r+0xf2>
 800412c:	2200      	movs	r2, #0
 800412e:	6062      	str	r2, [r4, #4]
 8004130:	04d9      	lsls	r1, r3, #19
 8004132:	6922      	ldr	r2, [r4, #16]
 8004134:	6022      	str	r2, [r4, #0]
 8004136:	d504      	bpl.n	8004142 <__sflush_r+0x7e>
 8004138:	1c42      	adds	r2, r0, #1
 800413a:	d101      	bne.n	8004140 <__sflush_r+0x7c>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b903      	cbnz	r3, 8004142 <__sflush_r+0x7e>
 8004140:	6560      	str	r0, [r4, #84]	; 0x54
 8004142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004144:	602f      	str	r7, [r5, #0]
 8004146:	2900      	cmp	r1, #0
 8004148:	d0c9      	beq.n	80040de <__sflush_r+0x1a>
 800414a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800414e:	4299      	cmp	r1, r3
 8004150:	d002      	beq.n	8004158 <__sflush_r+0x94>
 8004152:	4628      	mov	r0, r5
 8004154:	f000 f994 	bl	8004480 <_free_r>
 8004158:	2000      	movs	r0, #0
 800415a:	6360      	str	r0, [r4, #52]	; 0x34
 800415c:	e7c0      	b.n	80040e0 <__sflush_r+0x1c>
 800415e:	2301      	movs	r3, #1
 8004160:	4628      	mov	r0, r5
 8004162:	47b0      	blx	r6
 8004164:	1c41      	adds	r1, r0, #1
 8004166:	d1c8      	bne.n	80040fa <__sflush_r+0x36>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0c5      	beq.n	80040fa <__sflush_r+0x36>
 800416e:	2b1d      	cmp	r3, #29
 8004170:	d001      	beq.n	8004176 <__sflush_r+0xb2>
 8004172:	2b16      	cmp	r3, #22
 8004174:	d101      	bne.n	800417a <__sflush_r+0xb6>
 8004176:	602f      	str	r7, [r5, #0]
 8004178:	e7b1      	b.n	80040de <__sflush_r+0x1a>
 800417a:	89a3      	ldrh	r3, [r4, #12]
 800417c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004180:	81a3      	strh	r3, [r4, #12]
 8004182:	e7ad      	b.n	80040e0 <__sflush_r+0x1c>
 8004184:	690f      	ldr	r7, [r1, #16]
 8004186:	2f00      	cmp	r7, #0
 8004188:	d0a9      	beq.n	80040de <__sflush_r+0x1a>
 800418a:	0793      	lsls	r3, r2, #30
 800418c:	680e      	ldr	r6, [r1, #0]
 800418e:	bf08      	it	eq
 8004190:	694b      	ldreq	r3, [r1, #20]
 8004192:	600f      	str	r7, [r1, #0]
 8004194:	bf18      	it	ne
 8004196:	2300      	movne	r3, #0
 8004198:	eba6 0807 	sub.w	r8, r6, r7
 800419c:	608b      	str	r3, [r1, #8]
 800419e:	f1b8 0f00 	cmp.w	r8, #0
 80041a2:	dd9c      	ble.n	80040de <__sflush_r+0x1a>
 80041a4:	4643      	mov	r3, r8
 80041a6:	463a      	mov	r2, r7
 80041a8:	6a21      	ldr	r1, [r4, #32]
 80041aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041ac:	4628      	mov	r0, r5
 80041ae:	47b0      	blx	r6
 80041b0:	2800      	cmp	r0, #0
 80041b2:	dc06      	bgt.n	80041c2 <__sflush_r+0xfe>
 80041b4:	89a3      	ldrh	r3, [r4, #12]
 80041b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	e78e      	b.n	80040e0 <__sflush_r+0x1c>
 80041c2:	4407      	add	r7, r0
 80041c4:	eba8 0800 	sub.w	r8, r8, r0
 80041c8:	e7e9      	b.n	800419e <__sflush_r+0xda>
 80041ca:	bf00      	nop
 80041cc:	20400001 	.word	0x20400001

080041d0 <_fflush_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	690b      	ldr	r3, [r1, #16]
 80041d4:	4605      	mov	r5, r0
 80041d6:	460c      	mov	r4, r1
 80041d8:	b1db      	cbz	r3, 8004212 <_fflush_r+0x42>
 80041da:	b118      	cbz	r0, 80041e4 <_fflush_r+0x14>
 80041dc:	6983      	ldr	r3, [r0, #24]
 80041de:	b90b      	cbnz	r3, 80041e4 <_fflush_r+0x14>
 80041e0:	f000 f860 	bl	80042a4 <__sinit>
 80041e4:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <_fflush_r+0x48>)
 80041e6:	429c      	cmp	r4, r3
 80041e8:	d109      	bne.n	80041fe <_fflush_r+0x2e>
 80041ea:	686c      	ldr	r4, [r5, #4]
 80041ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041f0:	b17b      	cbz	r3, 8004212 <_fflush_r+0x42>
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041fa:	f7ff bf63 	b.w	80040c4 <__sflush_r>
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <_fflush_r+0x4c>)
 8004200:	429c      	cmp	r4, r3
 8004202:	d101      	bne.n	8004208 <_fflush_r+0x38>
 8004204:	68ac      	ldr	r4, [r5, #8]
 8004206:	e7f1      	b.n	80041ec <_fflush_r+0x1c>
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <_fflush_r+0x50>)
 800420a:	429c      	cmp	r4, r3
 800420c:	bf08      	it	eq
 800420e:	68ec      	ldreq	r4, [r5, #12]
 8004210:	e7ec      	b.n	80041ec <_fflush_r+0x1c>
 8004212:	2000      	movs	r0, #0
 8004214:	bd38      	pop	{r3, r4, r5, pc}
 8004216:	bf00      	nop
 8004218:	08004da4 	.word	0x08004da4
 800421c:	08004dc4 	.word	0x08004dc4
 8004220:	08004d84 	.word	0x08004d84

08004224 <std>:
 8004224:	2300      	movs	r3, #0
 8004226:	b510      	push	{r4, lr}
 8004228:	4604      	mov	r4, r0
 800422a:	e9c0 3300 	strd	r3, r3, [r0]
 800422e:	6083      	str	r3, [r0, #8]
 8004230:	8181      	strh	r1, [r0, #12]
 8004232:	6643      	str	r3, [r0, #100]	; 0x64
 8004234:	81c2      	strh	r2, [r0, #14]
 8004236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800423a:	6183      	str	r3, [r0, #24]
 800423c:	4619      	mov	r1, r3
 800423e:	2208      	movs	r2, #8
 8004240:	305c      	adds	r0, #92	; 0x5c
 8004242:	f7ff fdfb 	bl	8003e3c <memset>
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <std+0x38>)
 8004248:	6263      	str	r3, [r4, #36]	; 0x24
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <std+0x3c>)
 800424c:	62a3      	str	r3, [r4, #40]	; 0x28
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <std+0x40>)
 8004250:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <std+0x44>)
 8004254:	6224      	str	r4, [r4, #32]
 8004256:	6323      	str	r3, [r4, #48]	; 0x30
 8004258:	bd10      	pop	{r4, pc}
 800425a:	bf00      	nop
 800425c:	08004b81 	.word	0x08004b81
 8004260:	08004ba3 	.word	0x08004ba3
 8004264:	08004bdb 	.word	0x08004bdb
 8004268:	08004bff 	.word	0x08004bff

0800426c <_cleanup_r>:
 800426c:	4901      	ldr	r1, [pc, #4]	; (8004274 <_cleanup_r+0x8>)
 800426e:	f000 b885 	b.w	800437c <_fwalk_reent>
 8004272:	bf00      	nop
 8004274:	080041d1 	.word	0x080041d1

08004278 <__sfmoreglue>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	1e4a      	subs	r2, r1, #1
 800427c:	2568      	movs	r5, #104	; 0x68
 800427e:	4355      	muls	r5, r2
 8004280:	460e      	mov	r6, r1
 8004282:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004286:	f000 f949 	bl	800451c <_malloc_r>
 800428a:	4604      	mov	r4, r0
 800428c:	b140      	cbz	r0, 80042a0 <__sfmoreglue+0x28>
 800428e:	2100      	movs	r1, #0
 8004290:	e9c0 1600 	strd	r1, r6, [r0]
 8004294:	300c      	adds	r0, #12
 8004296:	60a0      	str	r0, [r4, #8]
 8004298:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800429c:	f7ff fdce 	bl	8003e3c <memset>
 80042a0:	4620      	mov	r0, r4
 80042a2:	bd70      	pop	{r4, r5, r6, pc}

080042a4 <__sinit>:
 80042a4:	6983      	ldr	r3, [r0, #24]
 80042a6:	b510      	push	{r4, lr}
 80042a8:	4604      	mov	r4, r0
 80042aa:	bb33      	cbnz	r3, 80042fa <__sinit+0x56>
 80042ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80042b0:	6503      	str	r3, [r0, #80]	; 0x50
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <__sinit+0x58>)
 80042b4:	4a12      	ldr	r2, [pc, #72]	; (8004300 <__sinit+0x5c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6282      	str	r2, [r0, #40]	; 0x28
 80042ba:	4298      	cmp	r0, r3
 80042bc:	bf04      	itt	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	6183      	streq	r3, [r0, #24]
 80042c2:	f000 f81f 	bl	8004304 <__sfp>
 80042c6:	6060      	str	r0, [r4, #4]
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 f81b 	bl	8004304 <__sfp>
 80042ce:	60a0      	str	r0, [r4, #8]
 80042d0:	4620      	mov	r0, r4
 80042d2:	f000 f817 	bl	8004304 <__sfp>
 80042d6:	2200      	movs	r2, #0
 80042d8:	60e0      	str	r0, [r4, #12]
 80042da:	2104      	movs	r1, #4
 80042dc:	6860      	ldr	r0, [r4, #4]
 80042de:	f7ff ffa1 	bl	8004224 <std>
 80042e2:	2201      	movs	r2, #1
 80042e4:	2109      	movs	r1, #9
 80042e6:	68a0      	ldr	r0, [r4, #8]
 80042e8:	f7ff ff9c 	bl	8004224 <std>
 80042ec:	2202      	movs	r2, #2
 80042ee:	2112      	movs	r1, #18
 80042f0:	68e0      	ldr	r0, [r4, #12]
 80042f2:	f7ff ff97 	bl	8004224 <std>
 80042f6:	2301      	movs	r3, #1
 80042f8:	61a3      	str	r3, [r4, #24]
 80042fa:	bd10      	pop	{r4, pc}
 80042fc:	08004d80 	.word	0x08004d80
 8004300:	0800426d 	.word	0x0800426d

08004304 <__sfp>:
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <__sfp+0x70>)
 8004308:	681e      	ldr	r6, [r3, #0]
 800430a:	69b3      	ldr	r3, [r6, #24]
 800430c:	4607      	mov	r7, r0
 800430e:	b913      	cbnz	r3, 8004316 <__sfp+0x12>
 8004310:	4630      	mov	r0, r6
 8004312:	f7ff ffc7 	bl	80042a4 <__sinit>
 8004316:	3648      	adds	r6, #72	; 0x48
 8004318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800431c:	3b01      	subs	r3, #1
 800431e:	d503      	bpl.n	8004328 <__sfp+0x24>
 8004320:	6833      	ldr	r3, [r6, #0]
 8004322:	b133      	cbz	r3, 8004332 <__sfp+0x2e>
 8004324:	6836      	ldr	r6, [r6, #0]
 8004326:	e7f7      	b.n	8004318 <__sfp+0x14>
 8004328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800432c:	b16d      	cbz	r5, 800434a <__sfp+0x46>
 800432e:	3468      	adds	r4, #104	; 0x68
 8004330:	e7f4      	b.n	800431c <__sfp+0x18>
 8004332:	2104      	movs	r1, #4
 8004334:	4638      	mov	r0, r7
 8004336:	f7ff ff9f 	bl	8004278 <__sfmoreglue>
 800433a:	6030      	str	r0, [r6, #0]
 800433c:	2800      	cmp	r0, #0
 800433e:	d1f1      	bne.n	8004324 <__sfp+0x20>
 8004340:	230c      	movs	r3, #12
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4604      	mov	r4, r0
 8004346:	4620      	mov	r0, r4
 8004348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <__sfp+0x74>)
 800434c:	6665      	str	r5, [r4, #100]	; 0x64
 800434e:	e9c4 5500 	strd	r5, r5, [r4]
 8004352:	60a5      	str	r5, [r4, #8]
 8004354:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004358:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800435c:	2208      	movs	r2, #8
 800435e:	4629      	mov	r1, r5
 8004360:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004364:	f7ff fd6a 	bl	8003e3c <memset>
 8004368:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800436c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004370:	e7e9      	b.n	8004346 <__sfp+0x42>
 8004372:	bf00      	nop
 8004374:	08004d80 	.word	0x08004d80
 8004378:	ffff0001 	.word	0xffff0001

0800437c <_fwalk_reent>:
 800437c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004380:	4680      	mov	r8, r0
 8004382:	4689      	mov	r9, r1
 8004384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004388:	2600      	movs	r6, #0
 800438a:	b914      	cbnz	r4, 8004392 <_fwalk_reent+0x16>
 800438c:	4630      	mov	r0, r6
 800438e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004392:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004396:	3f01      	subs	r7, #1
 8004398:	d501      	bpl.n	800439e <_fwalk_reent+0x22>
 800439a:	6824      	ldr	r4, [r4, #0]
 800439c:	e7f5      	b.n	800438a <_fwalk_reent+0xe>
 800439e:	89ab      	ldrh	r3, [r5, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d907      	bls.n	80043b4 <_fwalk_reent+0x38>
 80043a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043a8:	3301      	adds	r3, #1
 80043aa:	d003      	beq.n	80043b4 <_fwalk_reent+0x38>
 80043ac:	4629      	mov	r1, r5
 80043ae:	4640      	mov	r0, r8
 80043b0:	47c8      	blx	r9
 80043b2:	4306      	orrs	r6, r0
 80043b4:	3568      	adds	r5, #104	; 0x68
 80043b6:	e7ee      	b.n	8004396 <_fwalk_reent+0x1a>

080043b8 <__swhatbuf_r>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	460e      	mov	r6, r1
 80043bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c0:	2900      	cmp	r1, #0
 80043c2:	b096      	sub	sp, #88	; 0x58
 80043c4:	4614      	mov	r4, r2
 80043c6:	461d      	mov	r5, r3
 80043c8:	da07      	bge.n	80043da <__swhatbuf_r+0x22>
 80043ca:	2300      	movs	r3, #0
 80043cc:	602b      	str	r3, [r5, #0]
 80043ce:	89b3      	ldrh	r3, [r6, #12]
 80043d0:	061a      	lsls	r2, r3, #24
 80043d2:	d410      	bmi.n	80043f6 <__swhatbuf_r+0x3e>
 80043d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043d8:	e00e      	b.n	80043f8 <__swhatbuf_r+0x40>
 80043da:	466a      	mov	r2, sp
 80043dc:	f000 fc36 	bl	8004c4c <_fstat_r>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	dbf2      	blt.n	80043ca <__swhatbuf_r+0x12>
 80043e4:	9a01      	ldr	r2, [sp, #4]
 80043e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80043ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80043ee:	425a      	negs	r2, r3
 80043f0:	415a      	adcs	r2, r3
 80043f2:	602a      	str	r2, [r5, #0]
 80043f4:	e7ee      	b.n	80043d4 <__swhatbuf_r+0x1c>
 80043f6:	2340      	movs	r3, #64	; 0x40
 80043f8:	2000      	movs	r0, #0
 80043fa:	6023      	str	r3, [r4, #0]
 80043fc:	b016      	add	sp, #88	; 0x58
 80043fe:	bd70      	pop	{r4, r5, r6, pc}

08004400 <__smakebuf_r>:
 8004400:	898b      	ldrh	r3, [r1, #12]
 8004402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004404:	079d      	lsls	r5, r3, #30
 8004406:	4606      	mov	r6, r0
 8004408:	460c      	mov	r4, r1
 800440a:	d507      	bpl.n	800441c <__smakebuf_r+0x1c>
 800440c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004410:	6023      	str	r3, [r4, #0]
 8004412:	6123      	str	r3, [r4, #16]
 8004414:	2301      	movs	r3, #1
 8004416:	6163      	str	r3, [r4, #20]
 8004418:	b002      	add	sp, #8
 800441a:	bd70      	pop	{r4, r5, r6, pc}
 800441c:	ab01      	add	r3, sp, #4
 800441e:	466a      	mov	r2, sp
 8004420:	f7ff ffca 	bl	80043b8 <__swhatbuf_r>
 8004424:	9900      	ldr	r1, [sp, #0]
 8004426:	4605      	mov	r5, r0
 8004428:	4630      	mov	r0, r6
 800442a:	f000 f877 	bl	800451c <_malloc_r>
 800442e:	b948      	cbnz	r0, 8004444 <__smakebuf_r+0x44>
 8004430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004434:	059a      	lsls	r2, r3, #22
 8004436:	d4ef      	bmi.n	8004418 <__smakebuf_r+0x18>
 8004438:	f023 0303 	bic.w	r3, r3, #3
 800443c:	f043 0302 	orr.w	r3, r3, #2
 8004440:	81a3      	strh	r3, [r4, #12]
 8004442:	e7e3      	b.n	800440c <__smakebuf_r+0xc>
 8004444:	4b0d      	ldr	r3, [pc, #52]	; (800447c <__smakebuf_r+0x7c>)
 8004446:	62b3      	str	r3, [r6, #40]	; 0x28
 8004448:	89a3      	ldrh	r3, [r4, #12]
 800444a:	6020      	str	r0, [r4, #0]
 800444c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004450:	81a3      	strh	r3, [r4, #12]
 8004452:	9b00      	ldr	r3, [sp, #0]
 8004454:	6163      	str	r3, [r4, #20]
 8004456:	9b01      	ldr	r3, [sp, #4]
 8004458:	6120      	str	r0, [r4, #16]
 800445a:	b15b      	cbz	r3, 8004474 <__smakebuf_r+0x74>
 800445c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004460:	4630      	mov	r0, r6
 8004462:	f000 fc05 	bl	8004c70 <_isatty_r>
 8004466:	b128      	cbz	r0, 8004474 <__smakebuf_r+0x74>
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	81a3      	strh	r3, [r4, #12]
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	431d      	orrs	r5, r3
 8004478:	81a5      	strh	r5, [r4, #12]
 800447a:	e7cd      	b.n	8004418 <__smakebuf_r+0x18>
 800447c:	0800426d 	.word	0x0800426d

08004480 <_free_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4605      	mov	r5, r0
 8004484:	2900      	cmp	r1, #0
 8004486:	d045      	beq.n	8004514 <_free_r+0x94>
 8004488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800448c:	1f0c      	subs	r4, r1, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	bfb8      	it	lt
 8004492:	18e4      	addlt	r4, r4, r3
 8004494:	f000 fc0e 	bl	8004cb4 <__malloc_lock>
 8004498:	4a1f      	ldr	r2, [pc, #124]	; (8004518 <_free_r+0x98>)
 800449a:	6813      	ldr	r3, [r2, #0]
 800449c:	4610      	mov	r0, r2
 800449e:	b933      	cbnz	r3, 80044ae <_free_r+0x2e>
 80044a0:	6063      	str	r3, [r4, #4]
 80044a2:	6014      	str	r4, [r2, #0]
 80044a4:	4628      	mov	r0, r5
 80044a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044aa:	f000 bc04 	b.w	8004cb6 <__malloc_unlock>
 80044ae:	42a3      	cmp	r3, r4
 80044b0:	d90c      	bls.n	80044cc <_free_r+0x4c>
 80044b2:	6821      	ldr	r1, [r4, #0]
 80044b4:	1862      	adds	r2, r4, r1
 80044b6:	4293      	cmp	r3, r2
 80044b8:	bf04      	itt	eq
 80044ba:	681a      	ldreq	r2, [r3, #0]
 80044bc:	685b      	ldreq	r3, [r3, #4]
 80044be:	6063      	str	r3, [r4, #4]
 80044c0:	bf04      	itt	eq
 80044c2:	1852      	addeq	r2, r2, r1
 80044c4:	6022      	streq	r2, [r4, #0]
 80044c6:	6004      	str	r4, [r0, #0]
 80044c8:	e7ec      	b.n	80044a4 <_free_r+0x24>
 80044ca:	4613      	mov	r3, r2
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	b10a      	cbz	r2, 80044d4 <_free_r+0x54>
 80044d0:	42a2      	cmp	r2, r4
 80044d2:	d9fa      	bls.n	80044ca <_free_r+0x4a>
 80044d4:	6819      	ldr	r1, [r3, #0]
 80044d6:	1858      	adds	r0, r3, r1
 80044d8:	42a0      	cmp	r0, r4
 80044da:	d10b      	bne.n	80044f4 <_free_r+0x74>
 80044dc:	6820      	ldr	r0, [r4, #0]
 80044de:	4401      	add	r1, r0
 80044e0:	1858      	adds	r0, r3, r1
 80044e2:	4282      	cmp	r2, r0
 80044e4:	6019      	str	r1, [r3, #0]
 80044e6:	d1dd      	bne.n	80044a4 <_free_r+0x24>
 80044e8:	6810      	ldr	r0, [r2, #0]
 80044ea:	6852      	ldr	r2, [r2, #4]
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	4401      	add	r1, r0
 80044f0:	6019      	str	r1, [r3, #0]
 80044f2:	e7d7      	b.n	80044a4 <_free_r+0x24>
 80044f4:	d902      	bls.n	80044fc <_free_r+0x7c>
 80044f6:	230c      	movs	r3, #12
 80044f8:	602b      	str	r3, [r5, #0]
 80044fa:	e7d3      	b.n	80044a4 <_free_r+0x24>
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	1821      	adds	r1, r4, r0
 8004500:	428a      	cmp	r2, r1
 8004502:	bf04      	itt	eq
 8004504:	6811      	ldreq	r1, [r2, #0]
 8004506:	6852      	ldreq	r2, [r2, #4]
 8004508:	6062      	str	r2, [r4, #4]
 800450a:	bf04      	itt	eq
 800450c:	1809      	addeq	r1, r1, r0
 800450e:	6021      	streq	r1, [r4, #0]
 8004510:	605c      	str	r4, [r3, #4]
 8004512:	e7c7      	b.n	80044a4 <_free_r+0x24>
 8004514:	bd38      	pop	{r3, r4, r5, pc}
 8004516:	bf00      	nop
 8004518:	20000168 	.word	0x20000168

0800451c <_malloc_r>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	1ccd      	adds	r5, r1, #3
 8004520:	f025 0503 	bic.w	r5, r5, #3
 8004524:	3508      	adds	r5, #8
 8004526:	2d0c      	cmp	r5, #12
 8004528:	bf38      	it	cc
 800452a:	250c      	movcc	r5, #12
 800452c:	2d00      	cmp	r5, #0
 800452e:	4606      	mov	r6, r0
 8004530:	db01      	blt.n	8004536 <_malloc_r+0x1a>
 8004532:	42a9      	cmp	r1, r5
 8004534:	d903      	bls.n	800453e <_malloc_r+0x22>
 8004536:	230c      	movs	r3, #12
 8004538:	6033      	str	r3, [r6, #0]
 800453a:	2000      	movs	r0, #0
 800453c:	bd70      	pop	{r4, r5, r6, pc}
 800453e:	f000 fbb9 	bl	8004cb4 <__malloc_lock>
 8004542:	4a21      	ldr	r2, [pc, #132]	; (80045c8 <_malloc_r+0xac>)
 8004544:	6814      	ldr	r4, [r2, #0]
 8004546:	4621      	mov	r1, r4
 8004548:	b991      	cbnz	r1, 8004570 <_malloc_r+0x54>
 800454a:	4c20      	ldr	r4, [pc, #128]	; (80045cc <_malloc_r+0xb0>)
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	b91b      	cbnz	r3, 8004558 <_malloc_r+0x3c>
 8004550:	4630      	mov	r0, r6
 8004552:	f000 fb05 	bl	8004b60 <_sbrk_r>
 8004556:	6020      	str	r0, [r4, #0]
 8004558:	4629      	mov	r1, r5
 800455a:	4630      	mov	r0, r6
 800455c:	f000 fb00 	bl	8004b60 <_sbrk_r>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d124      	bne.n	80045ae <_malloc_r+0x92>
 8004564:	230c      	movs	r3, #12
 8004566:	6033      	str	r3, [r6, #0]
 8004568:	4630      	mov	r0, r6
 800456a:	f000 fba4 	bl	8004cb6 <__malloc_unlock>
 800456e:	e7e4      	b.n	800453a <_malloc_r+0x1e>
 8004570:	680b      	ldr	r3, [r1, #0]
 8004572:	1b5b      	subs	r3, r3, r5
 8004574:	d418      	bmi.n	80045a8 <_malloc_r+0x8c>
 8004576:	2b0b      	cmp	r3, #11
 8004578:	d90f      	bls.n	800459a <_malloc_r+0x7e>
 800457a:	600b      	str	r3, [r1, #0]
 800457c:	50cd      	str	r5, [r1, r3]
 800457e:	18cc      	adds	r4, r1, r3
 8004580:	4630      	mov	r0, r6
 8004582:	f000 fb98 	bl	8004cb6 <__malloc_unlock>
 8004586:	f104 000b 	add.w	r0, r4, #11
 800458a:	1d23      	adds	r3, r4, #4
 800458c:	f020 0007 	bic.w	r0, r0, #7
 8004590:	1ac3      	subs	r3, r0, r3
 8004592:	d0d3      	beq.n	800453c <_malloc_r+0x20>
 8004594:	425a      	negs	r2, r3
 8004596:	50e2      	str	r2, [r4, r3]
 8004598:	e7d0      	b.n	800453c <_malloc_r+0x20>
 800459a:	428c      	cmp	r4, r1
 800459c:	684b      	ldr	r3, [r1, #4]
 800459e:	bf16      	itet	ne
 80045a0:	6063      	strne	r3, [r4, #4]
 80045a2:	6013      	streq	r3, [r2, #0]
 80045a4:	460c      	movne	r4, r1
 80045a6:	e7eb      	b.n	8004580 <_malloc_r+0x64>
 80045a8:	460c      	mov	r4, r1
 80045aa:	6849      	ldr	r1, [r1, #4]
 80045ac:	e7cc      	b.n	8004548 <_malloc_r+0x2c>
 80045ae:	1cc4      	adds	r4, r0, #3
 80045b0:	f024 0403 	bic.w	r4, r4, #3
 80045b4:	42a0      	cmp	r0, r4
 80045b6:	d005      	beq.n	80045c4 <_malloc_r+0xa8>
 80045b8:	1a21      	subs	r1, r4, r0
 80045ba:	4630      	mov	r0, r6
 80045bc:	f000 fad0 	bl	8004b60 <_sbrk_r>
 80045c0:	3001      	adds	r0, #1
 80045c2:	d0cf      	beq.n	8004564 <_malloc_r+0x48>
 80045c4:	6025      	str	r5, [r4, #0]
 80045c6:	e7db      	b.n	8004580 <_malloc_r+0x64>
 80045c8:	20000168 	.word	0x20000168
 80045cc:	2000016c 	.word	0x2000016c

080045d0 <__sfputc_r>:
 80045d0:	6893      	ldr	r3, [r2, #8]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	b410      	push	{r4}
 80045d8:	6093      	str	r3, [r2, #8]
 80045da:	da08      	bge.n	80045ee <__sfputc_r+0x1e>
 80045dc:	6994      	ldr	r4, [r2, #24]
 80045de:	42a3      	cmp	r3, r4
 80045e0:	db01      	blt.n	80045e6 <__sfputc_r+0x16>
 80045e2:	290a      	cmp	r1, #10
 80045e4:	d103      	bne.n	80045ee <__sfputc_r+0x1e>
 80045e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045ea:	f7ff bcab 	b.w	8003f44 <__swbuf_r>
 80045ee:	6813      	ldr	r3, [r2, #0]
 80045f0:	1c58      	adds	r0, r3, #1
 80045f2:	6010      	str	r0, [r2, #0]
 80045f4:	7019      	strb	r1, [r3, #0]
 80045f6:	4608      	mov	r0, r1
 80045f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <__sfputs_r>:
 80045fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004600:	4606      	mov	r6, r0
 8004602:	460f      	mov	r7, r1
 8004604:	4614      	mov	r4, r2
 8004606:	18d5      	adds	r5, r2, r3
 8004608:	42ac      	cmp	r4, r5
 800460a:	d101      	bne.n	8004610 <__sfputs_r+0x12>
 800460c:	2000      	movs	r0, #0
 800460e:	e007      	b.n	8004620 <__sfputs_r+0x22>
 8004610:	463a      	mov	r2, r7
 8004612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004616:	4630      	mov	r0, r6
 8004618:	f7ff ffda 	bl	80045d0 <__sfputc_r>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d1f3      	bne.n	8004608 <__sfputs_r+0xa>
 8004620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004624 <_vfiprintf_r>:
 8004624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004628:	460c      	mov	r4, r1
 800462a:	b09d      	sub	sp, #116	; 0x74
 800462c:	4617      	mov	r7, r2
 800462e:	461d      	mov	r5, r3
 8004630:	4606      	mov	r6, r0
 8004632:	b118      	cbz	r0, 800463c <_vfiprintf_r+0x18>
 8004634:	6983      	ldr	r3, [r0, #24]
 8004636:	b90b      	cbnz	r3, 800463c <_vfiprintf_r+0x18>
 8004638:	f7ff fe34 	bl	80042a4 <__sinit>
 800463c:	4b7c      	ldr	r3, [pc, #496]	; (8004830 <_vfiprintf_r+0x20c>)
 800463e:	429c      	cmp	r4, r3
 8004640:	d158      	bne.n	80046f4 <_vfiprintf_r+0xd0>
 8004642:	6874      	ldr	r4, [r6, #4]
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	0718      	lsls	r0, r3, #28
 8004648:	d55e      	bpl.n	8004708 <_vfiprintf_r+0xe4>
 800464a:	6923      	ldr	r3, [r4, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d05b      	beq.n	8004708 <_vfiprintf_r+0xe4>
 8004650:	2300      	movs	r3, #0
 8004652:	9309      	str	r3, [sp, #36]	; 0x24
 8004654:	2320      	movs	r3, #32
 8004656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800465a:	2330      	movs	r3, #48	; 0x30
 800465c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004660:	9503      	str	r5, [sp, #12]
 8004662:	f04f 0b01 	mov.w	fp, #1
 8004666:	46b8      	mov	r8, r7
 8004668:	4645      	mov	r5, r8
 800466a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800466e:	b10b      	cbz	r3, 8004674 <_vfiprintf_r+0x50>
 8004670:	2b25      	cmp	r3, #37	; 0x25
 8004672:	d154      	bne.n	800471e <_vfiprintf_r+0xfa>
 8004674:	ebb8 0a07 	subs.w	sl, r8, r7
 8004678:	d00b      	beq.n	8004692 <_vfiprintf_r+0x6e>
 800467a:	4653      	mov	r3, sl
 800467c:	463a      	mov	r2, r7
 800467e:	4621      	mov	r1, r4
 8004680:	4630      	mov	r0, r6
 8004682:	f7ff ffbc 	bl	80045fe <__sfputs_r>
 8004686:	3001      	adds	r0, #1
 8004688:	f000 80c2 	beq.w	8004810 <_vfiprintf_r+0x1ec>
 800468c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800468e:	4453      	add	r3, sl
 8004690:	9309      	str	r3, [sp, #36]	; 0x24
 8004692:	f898 3000 	ldrb.w	r3, [r8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80ba 	beq.w	8004810 <_vfiprintf_r+0x1ec>
 800469c:	2300      	movs	r3, #0
 800469e:	f04f 32ff 	mov.w	r2, #4294967295
 80046a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046a6:	9304      	str	r3, [sp, #16]
 80046a8:	9307      	str	r3, [sp, #28]
 80046aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ae:	931a      	str	r3, [sp, #104]	; 0x68
 80046b0:	46a8      	mov	r8, r5
 80046b2:	2205      	movs	r2, #5
 80046b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80046b8:	485e      	ldr	r0, [pc, #376]	; (8004834 <_vfiprintf_r+0x210>)
 80046ba:	f7fb fd89 	bl	80001d0 <memchr>
 80046be:	9b04      	ldr	r3, [sp, #16]
 80046c0:	bb78      	cbnz	r0, 8004722 <_vfiprintf_r+0xfe>
 80046c2:	06d9      	lsls	r1, r3, #27
 80046c4:	bf44      	itt	mi
 80046c6:	2220      	movmi	r2, #32
 80046c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046cc:	071a      	lsls	r2, r3, #28
 80046ce:	bf44      	itt	mi
 80046d0:	222b      	movmi	r2, #43	; 0x2b
 80046d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80046d6:	782a      	ldrb	r2, [r5, #0]
 80046d8:	2a2a      	cmp	r2, #42	; 0x2a
 80046da:	d02a      	beq.n	8004732 <_vfiprintf_r+0x10e>
 80046dc:	9a07      	ldr	r2, [sp, #28]
 80046de:	46a8      	mov	r8, r5
 80046e0:	2000      	movs	r0, #0
 80046e2:	250a      	movs	r5, #10
 80046e4:	4641      	mov	r1, r8
 80046e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046ea:	3b30      	subs	r3, #48	; 0x30
 80046ec:	2b09      	cmp	r3, #9
 80046ee:	d969      	bls.n	80047c4 <_vfiprintf_r+0x1a0>
 80046f0:	b360      	cbz	r0, 800474c <_vfiprintf_r+0x128>
 80046f2:	e024      	b.n	800473e <_vfiprintf_r+0x11a>
 80046f4:	4b50      	ldr	r3, [pc, #320]	; (8004838 <_vfiprintf_r+0x214>)
 80046f6:	429c      	cmp	r4, r3
 80046f8:	d101      	bne.n	80046fe <_vfiprintf_r+0xda>
 80046fa:	68b4      	ldr	r4, [r6, #8]
 80046fc:	e7a2      	b.n	8004644 <_vfiprintf_r+0x20>
 80046fe:	4b4f      	ldr	r3, [pc, #316]	; (800483c <_vfiprintf_r+0x218>)
 8004700:	429c      	cmp	r4, r3
 8004702:	bf08      	it	eq
 8004704:	68f4      	ldreq	r4, [r6, #12]
 8004706:	e79d      	b.n	8004644 <_vfiprintf_r+0x20>
 8004708:	4621      	mov	r1, r4
 800470a:	4630      	mov	r0, r6
 800470c:	f7ff fc6c 	bl	8003fe8 <__swsetup_r>
 8004710:	2800      	cmp	r0, #0
 8004712:	d09d      	beq.n	8004650 <_vfiprintf_r+0x2c>
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	b01d      	add	sp, #116	; 0x74
 800471a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800471e:	46a8      	mov	r8, r5
 8004720:	e7a2      	b.n	8004668 <_vfiprintf_r+0x44>
 8004722:	4a44      	ldr	r2, [pc, #272]	; (8004834 <_vfiprintf_r+0x210>)
 8004724:	1a80      	subs	r0, r0, r2
 8004726:	fa0b f000 	lsl.w	r0, fp, r0
 800472a:	4318      	orrs	r0, r3
 800472c:	9004      	str	r0, [sp, #16]
 800472e:	4645      	mov	r5, r8
 8004730:	e7be      	b.n	80046b0 <_vfiprintf_r+0x8c>
 8004732:	9a03      	ldr	r2, [sp, #12]
 8004734:	1d11      	adds	r1, r2, #4
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	9103      	str	r1, [sp, #12]
 800473a:	2a00      	cmp	r2, #0
 800473c:	db01      	blt.n	8004742 <_vfiprintf_r+0x11e>
 800473e:	9207      	str	r2, [sp, #28]
 8004740:	e004      	b.n	800474c <_vfiprintf_r+0x128>
 8004742:	4252      	negs	r2, r2
 8004744:	f043 0302 	orr.w	r3, r3, #2
 8004748:	9207      	str	r2, [sp, #28]
 800474a:	9304      	str	r3, [sp, #16]
 800474c:	f898 3000 	ldrb.w	r3, [r8]
 8004750:	2b2e      	cmp	r3, #46	; 0x2e
 8004752:	d10e      	bne.n	8004772 <_vfiprintf_r+0x14e>
 8004754:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004758:	2b2a      	cmp	r3, #42	; 0x2a
 800475a:	d138      	bne.n	80047ce <_vfiprintf_r+0x1aa>
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	9203      	str	r2, [sp, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	bfb8      	it	lt
 8004768:	f04f 33ff 	movlt.w	r3, #4294967295
 800476c:	f108 0802 	add.w	r8, r8, #2
 8004770:	9305      	str	r3, [sp, #20]
 8004772:	4d33      	ldr	r5, [pc, #204]	; (8004840 <_vfiprintf_r+0x21c>)
 8004774:	f898 1000 	ldrb.w	r1, [r8]
 8004778:	2203      	movs	r2, #3
 800477a:	4628      	mov	r0, r5
 800477c:	f7fb fd28 	bl	80001d0 <memchr>
 8004780:	b140      	cbz	r0, 8004794 <_vfiprintf_r+0x170>
 8004782:	2340      	movs	r3, #64	; 0x40
 8004784:	1b40      	subs	r0, r0, r5
 8004786:	fa03 f000 	lsl.w	r0, r3, r0
 800478a:	9b04      	ldr	r3, [sp, #16]
 800478c:	4303      	orrs	r3, r0
 800478e:	f108 0801 	add.w	r8, r8, #1
 8004792:	9304      	str	r3, [sp, #16]
 8004794:	f898 1000 	ldrb.w	r1, [r8]
 8004798:	482a      	ldr	r0, [pc, #168]	; (8004844 <_vfiprintf_r+0x220>)
 800479a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800479e:	2206      	movs	r2, #6
 80047a0:	f108 0701 	add.w	r7, r8, #1
 80047a4:	f7fb fd14 	bl	80001d0 <memchr>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d037      	beq.n	800481c <_vfiprintf_r+0x1f8>
 80047ac:	4b26      	ldr	r3, [pc, #152]	; (8004848 <_vfiprintf_r+0x224>)
 80047ae:	bb1b      	cbnz	r3, 80047f8 <_vfiprintf_r+0x1d4>
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	3307      	adds	r3, #7
 80047b4:	f023 0307 	bic.w	r3, r3, #7
 80047b8:	3308      	adds	r3, #8
 80047ba:	9303      	str	r3, [sp, #12]
 80047bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047be:	444b      	add	r3, r9
 80047c0:	9309      	str	r3, [sp, #36]	; 0x24
 80047c2:	e750      	b.n	8004666 <_vfiprintf_r+0x42>
 80047c4:	fb05 3202 	mla	r2, r5, r2, r3
 80047c8:	2001      	movs	r0, #1
 80047ca:	4688      	mov	r8, r1
 80047cc:	e78a      	b.n	80046e4 <_vfiprintf_r+0xc0>
 80047ce:	2300      	movs	r3, #0
 80047d0:	f108 0801 	add.w	r8, r8, #1
 80047d4:	9305      	str	r3, [sp, #20]
 80047d6:	4619      	mov	r1, r3
 80047d8:	250a      	movs	r5, #10
 80047da:	4640      	mov	r0, r8
 80047dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047e0:	3a30      	subs	r2, #48	; 0x30
 80047e2:	2a09      	cmp	r2, #9
 80047e4:	d903      	bls.n	80047ee <_vfiprintf_r+0x1ca>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0c3      	beq.n	8004772 <_vfiprintf_r+0x14e>
 80047ea:	9105      	str	r1, [sp, #20]
 80047ec:	e7c1      	b.n	8004772 <_vfiprintf_r+0x14e>
 80047ee:	fb05 2101 	mla	r1, r5, r1, r2
 80047f2:	2301      	movs	r3, #1
 80047f4:	4680      	mov	r8, r0
 80047f6:	e7f0      	b.n	80047da <_vfiprintf_r+0x1b6>
 80047f8:	ab03      	add	r3, sp, #12
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	4622      	mov	r2, r4
 80047fe:	4b13      	ldr	r3, [pc, #76]	; (800484c <_vfiprintf_r+0x228>)
 8004800:	a904      	add	r1, sp, #16
 8004802:	4630      	mov	r0, r6
 8004804:	f3af 8000 	nop.w
 8004808:	f1b0 3fff 	cmp.w	r0, #4294967295
 800480c:	4681      	mov	r9, r0
 800480e:	d1d5      	bne.n	80047bc <_vfiprintf_r+0x198>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	065b      	lsls	r3, r3, #25
 8004814:	f53f af7e 	bmi.w	8004714 <_vfiprintf_r+0xf0>
 8004818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800481a:	e77d      	b.n	8004718 <_vfiprintf_r+0xf4>
 800481c:	ab03      	add	r3, sp, #12
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	4622      	mov	r2, r4
 8004822:	4b0a      	ldr	r3, [pc, #40]	; (800484c <_vfiprintf_r+0x228>)
 8004824:	a904      	add	r1, sp, #16
 8004826:	4630      	mov	r0, r6
 8004828:	f000 f888 	bl	800493c <_printf_i>
 800482c:	e7ec      	b.n	8004808 <_vfiprintf_r+0x1e4>
 800482e:	bf00      	nop
 8004830:	08004da4 	.word	0x08004da4
 8004834:	08004de4 	.word	0x08004de4
 8004838:	08004dc4 	.word	0x08004dc4
 800483c:	08004d84 	.word	0x08004d84
 8004840:	08004dea 	.word	0x08004dea
 8004844:	08004dee 	.word	0x08004dee
 8004848:	00000000 	.word	0x00000000
 800484c:	080045ff 	.word	0x080045ff

08004850 <_printf_common>:
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	4691      	mov	r9, r2
 8004856:	461f      	mov	r7, r3
 8004858:	688a      	ldr	r2, [r1, #8]
 800485a:	690b      	ldr	r3, [r1, #16]
 800485c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004860:	4293      	cmp	r3, r2
 8004862:	bfb8      	it	lt
 8004864:	4613      	movlt	r3, r2
 8004866:	f8c9 3000 	str.w	r3, [r9]
 800486a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800486e:	4606      	mov	r6, r0
 8004870:	460c      	mov	r4, r1
 8004872:	b112      	cbz	r2, 800487a <_printf_common+0x2a>
 8004874:	3301      	adds	r3, #1
 8004876:	f8c9 3000 	str.w	r3, [r9]
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	0699      	lsls	r1, r3, #26
 800487e:	bf42      	ittt	mi
 8004880:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004884:	3302      	addmi	r3, #2
 8004886:	f8c9 3000 	strmi.w	r3, [r9]
 800488a:	6825      	ldr	r5, [r4, #0]
 800488c:	f015 0506 	ands.w	r5, r5, #6
 8004890:	d107      	bne.n	80048a2 <_printf_common+0x52>
 8004892:	f104 0a19 	add.w	sl, r4, #25
 8004896:	68e3      	ldr	r3, [r4, #12]
 8004898:	f8d9 2000 	ldr.w	r2, [r9]
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	42ab      	cmp	r3, r5
 80048a0:	dc28      	bgt.n	80048f4 <_printf_common+0xa4>
 80048a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	3300      	adds	r3, #0
 80048aa:	bf18      	it	ne
 80048ac:	2301      	movne	r3, #1
 80048ae:	0692      	lsls	r2, r2, #26
 80048b0:	d42d      	bmi.n	800490e <_printf_common+0xbe>
 80048b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048b6:	4639      	mov	r1, r7
 80048b8:	4630      	mov	r0, r6
 80048ba:	47c0      	blx	r8
 80048bc:	3001      	adds	r0, #1
 80048be:	d020      	beq.n	8004902 <_printf_common+0xb2>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	68e5      	ldr	r5, [r4, #12]
 80048c4:	f8d9 2000 	ldr.w	r2, [r9]
 80048c8:	f003 0306 	and.w	r3, r3, #6
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	bf08      	it	eq
 80048d0:	1aad      	subeq	r5, r5, r2
 80048d2:	68a3      	ldr	r3, [r4, #8]
 80048d4:	6922      	ldr	r2, [r4, #16]
 80048d6:	bf0c      	ite	eq
 80048d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048dc:	2500      	movne	r5, #0
 80048de:	4293      	cmp	r3, r2
 80048e0:	bfc4      	itt	gt
 80048e2:	1a9b      	subgt	r3, r3, r2
 80048e4:	18ed      	addgt	r5, r5, r3
 80048e6:	f04f 0900 	mov.w	r9, #0
 80048ea:	341a      	adds	r4, #26
 80048ec:	454d      	cmp	r5, r9
 80048ee:	d11a      	bne.n	8004926 <_printf_common+0xd6>
 80048f0:	2000      	movs	r0, #0
 80048f2:	e008      	b.n	8004906 <_printf_common+0xb6>
 80048f4:	2301      	movs	r3, #1
 80048f6:	4652      	mov	r2, sl
 80048f8:	4639      	mov	r1, r7
 80048fa:	4630      	mov	r0, r6
 80048fc:	47c0      	blx	r8
 80048fe:	3001      	adds	r0, #1
 8004900:	d103      	bne.n	800490a <_printf_common+0xba>
 8004902:	f04f 30ff 	mov.w	r0, #4294967295
 8004906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490a:	3501      	adds	r5, #1
 800490c:	e7c3      	b.n	8004896 <_printf_common+0x46>
 800490e:	18e1      	adds	r1, r4, r3
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	2030      	movs	r0, #48	; 0x30
 8004914:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004918:	4422      	add	r2, r4
 800491a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800491e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004922:	3302      	adds	r3, #2
 8004924:	e7c5      	b.n	80048b2 <_printf_common+0x62>
 8004926:	2301      	movs	r3, #1
 8004928:	4622      	mov	r2, r4
 800492a:	4639      	mov	r1, r7
 800492c:	4630      	mov	r0, r6
 800492e:	47c0      	blx	r8
 8004930:	3001      	adds	r0, #1
 8004932:	d0e6      	beq.n	8004902 <_printf_common+0xb2>
 8004934:	f109 0901 	add.w	r9, r9, #1
 8004938:	e7d8      	b.n	80048ec <_printf_common+0x9c>
	...

0800493c <_printf_i>:
 800493c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004940:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004944:	460c      	mov	r4, r1
 8004946:	7e09      	ldrb	r1, [r1, #24]
 8004948:	b085      	sub	sp, #20
 800494a:	296e      	cmp	r1, #110	; 0x6e
 800494c:	4617      	mov	r7, r2
 800494e:	4606      	mov	r6, r0
 8004950:	4698      	mov	r8, r3
 8004952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004954:	f000 80b3 	beq.w	8004abe <_printf_i+0x182>
 8004958:	d822      	bhi.n	80049a0 <_printf_i+0x64>
 800495a:	2963      	cmp	r1, #99	; 0x63
 800495c:	d036      	beq.n	80049cc <_printf_i+0x90>
 800495e:	d80a      	bhi.n	8004976 <_printf_i+0x3a>
 8004960:	2900      	cmp	r1, #0
 8004962:	f000 80b9 	beq.w	8004ad8 <_printf_i+0x19c>
 8004966:	2958      	cmp	r1, #88	; 0x58
 8004968:	f000 8083 	beq.w	8004a72 <_printf_i+0x136>
 800496c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004970:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004974:	e032      	b.n	80049dc <_printf_i+0xa0>
 8004976:	2964      	cmp	r1, #100	; 0x64
 8004978:	d001      	beq.n	800497e <_printf_i+0x42>
 800497a:	2969      	cmp	r1, #105	; 0x69
 800497c:	d1f6      	bne.n	800496c <_printf_i+0x30>
 800497e:	6820      	ldr	r0, [r4, #0]
 8004980:	6813      	ldr	r3, [r2, #0]
 8004982:	0605      	lsls	r5, r0, #24
 8004984:	f103 0104 	add.w	r1, r3, #4
 8004988:	d52a      	bpl.n	80049e0 <_printf_i+0xa4>
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6011      	str	r1, [r2, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	da03      	bge.n	800499a <_printf_i+0x5e>
 8004992:	222d      	movs	r2, #45	; 0x2d
 8004994:	425b      	negs	r3, r3
 8004996:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800499a:	486f      	ldr	r0, [pc, #444]	; (8004b58 <_printf_i+0x21c>)
 800499c:	220a      	movs	r2, #10
 800499e:	e039      	b.n	8004a14 <_printf_i+0xd8>
 80049a0:	2973      	cmp	r1, #115	; 0x73
 80049a2:	f000 809d 	beq.w	8004ae0 <_printf_i+0x1a4>
 80049a6:	d808      	bhi.n	80049ba <_printf_i+0x7e>
 80049a8:	296f      	cmp	r1, #111	; 0x6f
 80049aa:	d020      	beq.n	80049ee <_printf_i+0xb2>
 80049ac:	2970      	cmp	r1, #112	; 0x70
 80049ae:	d1dd      	bne.n	800496c <_printf_i+0x30>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	f043 0320 	orr.w	r3, r3, #32
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	e003      	b.n	80049c2 <_printf_i+0x86>
 80049ba:	2975      	cmp	r1, #117	; 0x75
 80049bc:	d017      	beq.n	80049ee <_printf_i+0xb2>
 80049be:	2978      	cmp	r1, #120	; 0x78
 80049c0:	d1d4      	bne.n	800496c <_printf_i+0x30>
 80049c2:	2378      	movs	r3, #120	; 0x78
 80049c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049c8:	4864      	ldr	r0, [pc, #400]	; (8004b5c <_printf_i+0x220>)
 80049ca:	e055      	b.n	8004a78 <_printf_i+0x13c>
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	1d19      	adds	r1, r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6011      	str	r1, [r2, #0]
 80049d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049dc:	2301      	movs	r3, #1
 80049de:	e08c      	b.n	8004afa <_printf_i+0x1be>
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6011      	str	r1, [r2, #0]
 80049e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049e8:	bf18      	it	ne
 80049ea:	b21b      	sxthne	r3, r3
 80049ec:	e7cf      	b.n	800498e <_printf_i+0x52>
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	6825      	ldr	r5, [r4, #0]
 80049f2:	1d18      	adds	r0, r3, #4
 80049f4:	6010      	str	r0, [r2, #0]
 80049f6:	0628      	lsls	r0, r5, #24
 80049f8:	d501      	bpl.n	80049fe <_printf_i+0xc2>
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	e002      	b.n	8004a04 <_printf_i+0xc8>
 80049fe:	0668      	lsls	r0, r5, #25
 8004a00:	d5fb      	bpl.n	80049fa <_printf_i+0xbe>
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	4854      	ldr	r0, [pc, #336]	; (8004b58 <_printf_i+0x21c>)
 8004a06:	296f      	cmp	r1, #111	; 0x6f
 8004a08:	bf14      	ite	ne
 8004a0a:	220a      	movne	r2, #10
 8004a0c:	2208      	moveq	r2, #8
 8004a0e:	2100      	movs	r1, #0
 8004a10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a14:	6865      	ldr	r5, [r4, #4]
 8004a16:	60a5      	str	r5, [r4, #8]
 8004a18:	2d00      	cmp	r5, #0
 8004a1a:	f2c0 8095 	blt.w	8004b48 <_printf_i+0x20c>
 8004a1e:	6821      	ldr	r1, [r4, #0]
 8004a20:	f021 0104 	bic.w	r1, r1, #4
 8004a24:	6021      	str	r1, [r4, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d13d      	bne.n	8004aa6 <_printf_i+0x16a>
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	f040 808e 	bne.w	8004b4c <_printf_i+0x210>
 8004a30:	4665      	mov	r5, ip
 8004a32:	2a08      	cmp	r2, #8
 8004a34:	d10b      	bne.n	8004a4e <_printf_i+0x112>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	07db      	lsls	r3, r3, #31
 8004a3a:	d508      	bpl.n	8004a4e <_printf_i+0x112>
 8004a3c:	6923      	ldr	r3, [r4, #16]
 8004a3e:	6862      	ldr	r2, [r4, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	bfde      	ittt	le
 8004a44:	2330      	movle	r3, #48	; 0x30
 8004a46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a4e:	ebac 0305 	sub.w	r3, ip, r5
 8004a52:	6123      	str	r3, [r4, #16]
 8004a54:	f8cd 8000 	str.w	r8, [sp]
 8004a58:	463b      	mov	r3, r7
 8004a5a:	aa03      	add	r2, sp, #12
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f7ff fef6 	bl	8004850 <_printf_common>
 8004a64:	3001      	adds	r0, #1
 8004a66:	d14d      	bne.n	8004b04 <_printf_i+0x1c8>
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	b005      	add	sp, #20
 8004a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a72:	4839      	ldr	r0, [pc, #228]	; (8004b58 <_printf_i+0x21c>)
 8004a74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004a78:	6813      	ldr	r3, [r2, #0]
 8004a7a:	6821      	ldr	r1, [r4, #0]
 8004a7c:	1d1d      	adds	r5, r3, #4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6015      	str	r5, [r2, #0]
 8004a82:	060a      	lsls	r2, r1, #24
 8004a84:	d50b      	bpl.n	8004a9e <_printf_i+0x162>
 8004a86:	07ca      	lsls	r2, r1, #31
 8004a88:	bf44      	itt	mi
 8004a8a:	f041 0120 	orrmi.w	r1, r1, #32
 8004a8e:	6021      	strmi	r1, [r4, #0]
 8004a90:	b91b      	cbnz	r3, 8004a9a <_printf_i+0x15e>
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	f022 0220 	bic.w	r2, r2, #32
 8004a98:	6022      	str	r2, [r4, #0]
 8004a9a:	2210      	movs	r2, #16
 8004a9c:	e7b7      	b.n	8004a0e <_printf_i+0xd2>
 8004a9e:	064d      	lsls	r5, r1, #25
 8004aa0:	bf48      	it	mi
 8004aa2:	b29b      	uxthmi	r3, r3
 8004aa4:	e7ef      	b.n	8004a86 <_printf_i+0x14a>
 8004aa6:	4665      	mov	r5, ip
 8004aa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aac:	fb02 3311 	mls	r3, r2, r1, r3
 8004ab0:	5cc3      	ldrb	r3, [r0, r3]
 8004ab2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	2900      	cmp	r1, #0
 8004aba:	d1f5      	bne.n	8004aa8 <_printf_i+0x16c>
 8004abc:	e7b9      	b.n	8004a32 <_printf_i+0xf6>
 8004abe:	6813      	ldr	r3, [r2, #0]
 8004ac0:	6825      	ldr	r5, [r4, #0]
 8004ac2:	6961      	ldr	r1, [r4, #20]
 8004ac4:	1d18      	adds	r0, r3, #4
 8004ac6:	6010      	str	r0, [r2, #0]
 8004ac8:	0628      	lsls	r0, r5, #24
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	d501      	bpl.n	8004ad2 <_printf_i+0x196>
 8004ace:	6019      	str	r1, [r3, #0]
 8004ad0:	e002      	b.n	8004ad8 <_printf_i+0x19c>
 8004ad2:	066a      	lsls	r2, r5, #25
 8004ad4:	d5fb      	bpl.n	8004ace <_printf_i+0x192>
 8004ad6:	8019      	strh	r1, [r3, #0]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	6123      	str	r3, [r4, #16]
 8004adc:	4665      	mov	r5, ip
 8004ade:	e7b9      	b.n	8004a54 <_printf_i+0x118>
 8004ae0:	6813      	ldr	r3, [r2, #0]
 8004ae2:	1d19      	adds	r1, r3, #4
 8004ae4:	6011      	str	r1, [r2, #0]
 8004ae6:	681d      	ldr	r5, [r3, #0]
 8004ae8:	6862      	ldr	r2, [r4, #4]
 8004aea:	2100      	movs	r1, #0
 8004aec:	4628      	mov	r0, r5
 8004aee:	f7fb fb6f 	bl	80001d0 <memchr>
 8004af2:	b108      	cbz	r0, 8004af8 <_printf_i+0x1bc>
 8004af4:	1b40      	subs	r0, r0, r5
 8004af6:	6060      	str	r0, [r4, #4]
 8004af8:	6863      	ldr	r3, [r4, #4]
 8004afa:	6123      	str	r3, [r4, #16]
 8004afc:	2300      	movs	r3, #0
 8004afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b02:	e7a7      	b.n	8004a54 <_printf_i+0x118>
 8004b04:	6923      	ldr	r3, [r4, #16]
 8004b06:	462a      	mov	r2, r5
 8004b08:	4639      	mov	r1, r7
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	47c0      	blx	r8
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d0aa      	beq.n	8004a68 <_printf_i+0x12c>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	079b      	lsls	r3, r3, #30
 8004b16:	d413      	bmi.n	8004b40 <_printf_i+0x204>
 8004b18:	68e0      	ldr	r0, [r4, #12]
 8004b1a:	9b03      	ldr	r3, [sp, #12]
 8004b1c:	4298      	cmp	r0, r3
 8004b1e:	bfb8      	it	lt
 8004b20:	4618      	movlt	r0, r3
 8004b22:	e7a3      	b.n	8004a6c <_printf_i+0x130>
 8004b24:	2301      	movs	r3, #1
 8004b26:	464a      	mov	r2, r9
 8004b28:	4639      	mov	r1, r7
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	47c0      	blx	r8
 8004b2e:	3001      	adds	r0, #1
 8004b30:	d09a      	beq.n	8004a68 <_printf_i+0x12c>
 8004b32:	3501      	adds	r5, #1
 8004b34:	68e3      	ldr	r3, [r4, #12]
 8004b36:	9a03      	ldr	r2, [sp, #12]
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	42ab      	cmp	r3, r5
 8004b3c:	dcf2      	bgt.n	8004b24 <_printf_i+0x1e8>
 8004b3e:	e7eb      	b.n	8004b18 <_printf_i+0x1dc>
 8004b40:	2500      	movs	r5, #0
 8004b42:	f104 0919 	add.w	r9, r4, #25
 8004b46:	e7f5      	b.n	8004b34 <_printf_i+0x1f8>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1ac      	bne.n	8004aa6 <_printf_i+0x16a>
 8004b4c:	7803      	ldrb	r3, [r0, #0]
 8004b4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b56:	e76c      	b.n	8004a32 <_printf_i+0xf6>
 8004b58:	08004df5 	.word	0x08004df5
 8004b5c:	08004e06 	.word	0x08004e06

08004b60 <_sbrk_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4c06      	ldr	r4, [pc, #24]	; (8004b7c <_sbrk_r+0x1c>)
 8004b64:	2300      	movs	r3, #0
 8004b66:	4605      	mov	r5, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	f7fb ff02 	bl	8000974 <_sbrk>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d102      	bne.n	8004b7a <_sbrk_r+0x1a>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	b103      	cbz	r3, 8004b7a <_sbrk_r+0x1a>
 8004b78:	602b      	str	r3, [r5, #0]
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
 8004b7c:	200001fc 	.word	0x200001fc

08004b80 <__sread>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	460c      	mov	r4, r1
 8004b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b88:	f000 f896 	bl	8004cb8 <_read_r>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	bfab      	itete	ge
 8004b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b92:	89a3      	ldrhlt	r3, [r4, #12]
 8004b94:	181b      	addge	r3, r3, r0
 8004b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b9a:	bfac      	ite	ge
 8004b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b9e:	81a3      	strhlt	r3, [r4, #12]
 8004ba0:	bd10      	pop	{r4, pc}

08004ba2 <__swrite>:
 8004ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba6:	461f      	mov	r7, r3
 8004ba8:	898b      	ldrh	r3, [r1, #12]
 8004baa:	05db      	lsls	r3, r3, #23
 8004bac:	4605      	mov	r5, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	d505      	bpl.n	8004bc0 <__swrite+0x1e>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bbc:	f000 f868 	bl	8004c90 <_lseek_r>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bca:	81a3      	strh	r3, [r4, #12]
 8004bcc:	4632      	mov	r2, r6
 8004bce:	463b      	mov	r3, r7
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd6:	f000 b817 	b.w	8004c08 <_write_r>

08004bda <__sseek>:
 8004bda:	b510      	push	{r4, lr}
 8004bdc:	460c      	mov	r4, r1
 8004bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be2:	f000 f855 	bl	8004c90 <_lseek_r>
 8004be6:	1c43      	adds	r3, r0, #1
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	bf15      	itete	ne
 8004bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bf6:	81a3      	strheq	r3, [r4, #12]
 8004bf8:	bf18      	it	ne
 8004bfa:	81a3      	strhne	r3, [r4, #12]
 8004bfc:	bd10      	pop	{r4, pc}

08004bfe <__sclose>:
 8004bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c02:	f000 b813 	b.w	8004c2c <_close_r>
	...

08004c08 <_write_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4c07      	ldr	r4, [pc, #28]	; (8004c28 <_write_r+0x20>)
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	4608      	mov	r0, r1
 8004c10:	4611      	mov	r1, r2
 8004c12:	2200      	movs	r2, #0
 8004c14:	6022      	str	r2, [r4, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f7fb fe5b 	bl	80008d2 <_write>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d102      	bne.n	8004c26 <_write_r+0x1e>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	b103      	cbz	r3, 8004c26 <_write_r+0x1e>
 8004c24:	602b      	str	r3, [r5, #0]
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	200001fc 	.word	0x200001fc

08004c2c <_close_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4c06      	ldr	r4, [pc, #24]	; (8004c48 <_close_r+0x1c>)
 8004c30:	2300      	movs	r3, #0
 8004c32:	4605      	mov	r5, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	f7fb fe67 	bl	800090a <_close>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_close_r+0x1a>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_close_r+0x1a>
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	200001fc 	.word	0x200001fc

08004c4c <_fstat_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4c07      	ldr	r4, [pc, #28]	; (8004c6c <_fstat_r+0x20>)
 8004c50:	2300      	movs	r3, #0
 8004c52:	4605      	mov	r5, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	f7fb fe62 	bl	8000922 <_fstat>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	d102      	bne.n	8004c68 <_fstat_r+0x1c>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	b103      	cbz	r3, 8004c68 <_fstat_r+0x1c>
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	bd38      	pop	{r3, r4, r5, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200001fc 	.word	0x200001fc

08004c70 <_isatty_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4c06      	ldr	r4, [pc, #24]	; (8004c8c <_isatty_r+0x1c>)
 8004c74:	2300      	movs	r3, #0
 8004c76:	4605      	mov	r5, r0
 8004c78:	4608      	mov	r0, r1
 8004c7a:	6023      	str	r3, [r4, #0]
 8004c7c:	f7fb fe61 	bl	8000942 <_isatty>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_isatty_r+0x1a>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_isatty_r+0x1a>
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	200001fc 	.word	0x200001fc

08004c90 <_lseek_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4c07      	ldr	r4, [pc, #28]	; (8004cb0 <_lseek_r+0x20>)
 8004c94:	4605      	mov	r5, r0
 8004c96:	4608      	mov	r0, r1
 8004c98:	4611      	mov	r1, r2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	6022      	str	r2, [r4, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f7fb fe5a 	bl	8000958 <_lseek>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_lseek_r+0x1e>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_lseek_r+0x1e>
 8004cac:	602b      	str	r3, [r5, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	200001fc 	.word	0x200001fc

08004cb4 <__malloc_lock>:
 8004cb4:	4770      	bx	lr

08004cb6 <__malloc_unlock>:
 8004cb6:	4770      	bx	lr

08004cb8 <_read_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4c07      	ldr	r4, [pc, #28]	; (8004cd8 <_read_r+0x20>)
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	4608      	mov	r0, r1
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	6022      	str	r2, [r4, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f7fb fde6 	bl	8000898 <_read>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	d102      	bne.n	8004cd6 <_read_r+0x1e>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	b103      	cbz	r3, 8004cd6 <_read_r+0x1e>
 8004cd4:	602b      	str	r3, [r5, #0]
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	200001fc 	.word	0x200001fc

08004cdc <_init>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	bf00      	nop
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr

08004ce8 <_fini>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	bf00      	nop
 8004cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cee:	bc08      	pop	{r3}
 8004cf0:	469e      	mov	lr, r3
 8004cf2:	4770      	bx	lr
