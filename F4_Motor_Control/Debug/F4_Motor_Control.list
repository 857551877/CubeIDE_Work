
F4_Motor_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009890  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08009a20  08009a20  00019a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e08  08009e08  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009e08  08009e08  00019e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e10  08009e10  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e10  08009e10  00019e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e14  08009e14  00019e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001268  200001fc  0800a014  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001464  0800a014  00021464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127a5  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ced  00000000  00000000  000329d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  000356c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  000365f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023967  00000000  00000000  00037398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000df47  00000000  00000000  0005acff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfe24  00000000  00000000  00068c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138a6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb8  00000000  00000000  00138ae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a08 	.word	0x08009a08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08009a08 	.word	0x08009a08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f5c:	4a28      	ldr	r2, [pc, #160]	; (8001000 <MX_ADC1_Init+0xb8>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f82:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f8a:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <MX_ADC1_Init+0xbc>)
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa8:	4814      	ldr	r0, [pc, #80]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000faa:	f001 ff75 	bl	8002e98 <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fb4:	f000 fd8e 	bl	8001ad4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000fca:	f002 f8af 	bl	800312c <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fd4:	f000 fd7e 	bl	8001ad4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_ADC1_Init+0xb4>)
 8000fe6:	f002 f8a1 	bl	800312c <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ff0:	f000 fd70 	bl	8001ad4 <Error_Handler>
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000030c 	.word	0x2000030c
 8001000:	40012000 	.word	0x40012000
 8001004:	0f000001 	.word	0x0f000001

08001008 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2f      	ldr	r2, [pc, #188]	; (80010e4 <HAL_ADC_MspInit+0xdc>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d157      	bne.n	80010da <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	4a2d      	ldr	r2, [pc, #180]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 8001034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001038:	6453      	str	r3, [r2, #68]	; 0x44
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <HAL_ADC_MspInit+0xe0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001062:	2303      	movs	r3, #3
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001066:	2303      	movs	r3, #3
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	481d      	ldr	r0, [pc, #116]	; (80010ec <HAL_ADC_MspInit+0xe4>)
 8001076:	f002 ff9b 	bl	8003fb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 800107c:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_ADC_MspInit+0xec>)
 800107e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 8001094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001098:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 800109c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 80010a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 80010ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010be:	480c      	ldr	r0, [pc, #48]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 80010c0:	f002 fbe6 	bl	8003890 <HAL_DMA_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010ca:	f000 fd03 	bl	8001ad4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_ADC_MspInit+0xe8>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40012000 	.word	0x40012000
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	20000354 	.word	0x20000354
 80010f4:	40026410 	.word	0x40026410

080010f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_DMA_Init+0x3c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <MX_DMA_Init+0x3c>)
 8001108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_DMA_Init+0x3c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2101      	movs	r1, #1
 800111e:	2038      	movs	r0, #56	; 0x38
 8001120:	f002 fb7f 	bl	8003822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001124:	2038      	movs	r0, #56	; 0x38
 8001126:	f002 fb98 	bl	800385a <HAL_NVIC_EnableIRQ>

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b3e      	ldr	r3, [pc, #248]	; (800124c <MX_GPIO_Init+0x114>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a3d      	ldr	r2, [pc, #244]	; (800124c <MX_GPIO_Init+0x114>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <MX_GPIO_Init+0x114>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <MX_GPIO_Init+0x114>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a36      	ldr	r2, [pc, #216]	; (800124c <MX_GPIO_Init+0x114>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <MX_GPIO_Init+0x114>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <MX_GPIO_Init+0x114>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <MX_GPIO_Init+0x114>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <MX_GPIO_Init+0x114>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <MX_GPIO_Init+0x114>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <MX_GPIO_Init+0x114>)
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_GPIO_Init+0x114>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <MX_GPIO_Init+0x114>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <MX_GPIO_Init+0x114>)
 80011c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_GPIO_Init+0x114>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2108      	movs	r1, #8
 80011de:	481c      	ldr	r0, [pc, #112]	; (8001250 <MX_GPIO_Init+0x118>)
 80011e0:	f003 f898 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_SET);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ea:	481a      	ldr	r0, [pc, #104]	; (8001254 <MX_GPIO_Init+0x11c>)
 80011ec:	f003 f892 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011f0:	2308      	movs	r3, #8
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4812      	ldr	r0, [pc, #72]	; (8001250 <MX_GPIO_Init+0x118>)
 8001208:	f002 fed2 	bl	8003fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 800120c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001212:	2311      	movs	r3, #17
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001216:	2301      	movs	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <MX_GPIO_Init+0x11c>)
 8001226:	f002 fec3 	bl	8003fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Up_Down_Pin;
 800122a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Up_Down_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_GPIO_Init+0x11c>)
 8001240:	f002 feb6 	bl	8003fb0 <HAL_GPIO_Init>

}
 8001244:	bf00      	nop
 8001246:	3728      	adds	r7, #40	; 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40021800 	.word	0x40021800
 8001254:	40020800 	.word	0x40020800

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f001 fd88 	bl	8002d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001260:	f000 f82e 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001264:	f7ff ff68 	bl	8001138 <MX_GPIO_Init>
  MX_DMA_Init();
 8001268:	f7ff ff46 	bl	80010f8 <MX_DMA_Init>
  MX_TIM2_Init();
 800126c:	f000 fe42 	bl	8001ef4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001270:	f001 f8b8 	bl	80023e4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001274:	f7ff fe68 	bl	8000f48 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001278:	f000 fd84 	bl	8001d84 <MX_TIM1_Init>
  MX_TIM3_Init();
 800127c:	f000 feaa 	bl	8001fd4 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001280:	f000 fef6 	bl	8002070 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  System_Init();
 8001284:	f000 fa92 	bl	80017ac <System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Direction_Control();
 8001288:	f000 f8aa 	bl	80013e0 <Direction_Control>
	  Motor_Contorl();
 800128c:	f000 fa4a 	bl	8001724 <Motor_Contorl>
	 StateJudgment((float)2000 / 30 / Cycle);
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <main+0x60>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800129c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012bc <main+0x64>
 80012a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012a4:	eeb0 0a66 	vmov.f32	s0, s13
 80012a8:	f000 f8ca 	bl	8001440 <StateJudgment>
	 //Boost_Control();


	  Update_Data(); //update data,do fliter to change ADC_ValueAverage
 80012ac:	f001 f9a4 	bl	80025f8 <Update_Data>
	  Tcp_DataAccept(); //get tcp data and deal the wifi request
 80012b0:	f001 fd08 	bl	8002cc4 <Tcp_DataAccept>
	  Direction_Control();
 80012b4:	e7e8      	b.n	8001288 <main+0x30>
 80012b6:	bf00      	nop
 80012b8:	20000020 	.word	0x20000020
 80012bc:	42855555 	.word	0x42855555

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	; 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	2230      	movs	r2, #48	; 0x30
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f005 fe4c 	bl	8006f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <SystemClock_Config+0xcc>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <SystemClock_Config+0xcc>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <SystemClock_Config+0xcc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <SystemClock_Config+0xd0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a21      	ldr	r2, [pc, #132]	; (8001390 <SystemClock_Config+0xd0>)
 800130a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <SystemClock_Config+0xd0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001330:	2308      	movs	r3, #8
 8001332:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001334:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001338:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133a:	2302      	movs	r3, #2
 800133c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800133e:	2304      	movs	r3, #4
 8001340:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fffe 	bl	8004348 <HAL_RCC_OscConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001352:	f000 fbbf 	bl	8001ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001356:	230f      	movs	r3, #15
 8001358:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135a:	2302      	movs	r3, #2
 800135c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001362:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001366:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2105      	movs	r1, #5
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fa57 	bl	8004828 <HAL_RCC_ClockConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001380:	f000 fba8 	bl	8001ad4 <Error_Handler>
  }
}
 8001384:	bf00      	nop
 8001386:	3750      	adds	r7, #80	; 0x50
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <Set_CompareValue>:

/* USER CODE BEGIN 4 */
void Set_CompareValue(int CompareValue) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	if(Up_Flag == 1) {
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <Set_CompareValue+0x44>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d109      	bne.n	80013b8 <Set_CompareValue+0x24>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80013a4:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <Set_CompareValue+0x48>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2200      	movs	r2, #0
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t)CompareValue);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <Set_CompareValue+0x48>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t)CompareValue);
	}
}
 80013b6:	e008      	b.n	80013ca <Set_CompareValue+0x36>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <Set_CompareValue+0x48>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2200      	movs	r2, #0
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t)CompareValue);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <Set_CompareValue+0x48>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000434 	.word	0x20000434

080013e0 <Direction_Control>:

uint8_t LastTime_Up_Flag = 1;
void Direction_Control(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(Up_Down_GPIO_Port, Up_Down_Pin) == GPIO_PIN_SET) {
 80013e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e8:	4811      	ldr	r0, [pc, #68]	; (8001430 <Direction_Control+0x50>)
 80013ea:	f002 ff7b 	bl	80042e4 <HAL_GPIO_ReadPin>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10d      	bne.n	8001410 <Direction_Control+0x30>
		if(LastTime_Up_Flag != 1) {
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <Direction_Control+0x54>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d016      	beq.n	800142a <Direction_Control+0x4a>
			Set_CompareValue((int)0);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff ffc9 	bl	8001394 <Set_CompareValue>
			Up_Flag = 1;
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <Direction_Control+0x58>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
			LastTime_Up_Flag = 1;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <Direction_Control+0x54>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
		 	Set_CompareValue((int)0);
		 	Up_Flag = 0;
		 	LastTime_Up_Flag = 0;
		 }
	 }
}
 800140e:	e00c      	b.n	800142a <Direction_Control+0x4a>
		 if(LastTime_Up_Flag != 0) {
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <Direction_Control+0x54>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <Direction_Control+0x4a>
		 	Set_CompareValue((int)0);
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff ffbb 	bl	8001394 <Set_CompareValue>
		 	Up_Flag = 0;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <Direction_Control+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
		 	LastTime_Up_Flag = 0;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <Direction_Control+0x54>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40020800 	.word	0x40020800
 8001434:	20000010 	.word	0x20000010
 8001438:	20000000 	.word	0x20000000
 800143c:	00000000 	.word	0x00000000

08001440 <StateJudgment>:

uint16_t BufferIndex = 0;

uint8_t SystemState = 0; //system status:0init,1Uniform speed,2Lost speed after constant speed,3restore
float StableI = 0; // I at constant speed
void StateJudgment(float Speed) {
 8001440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001444:	b087      	sub	sp, #28
 8001446:	af00      	add	r7, sp, #0
 8001448:	ed87 0a05 	vstr	s0, [r7, #20]
	if(SystemState == 0) { //init
 800144c:	4baa      	ldr	r3, [pc, #680]	; (80016f8 <StateJudgment+0x2b8>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d137      	bne.n	80014c4 <StateJudgment+0x84>
		if((Speed < Target_Speed * MinRange) || (Speed > Target_Speed * MaxRange)) {
 8001454:	4ba9      	ldr	r3, [pc, #676]	; (80016fc <StateJudgment+0x2bc>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4ba9      	ldr	r3, [pc, #676]	; (8001700 <StateJudgment+0x2c0>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001464:	ed97 7a05 	vldr	s14, [r7, #20]
 8001468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	d40e      	bmi.n	8001490 <StateJudgment+0x50>
 8001472:	4ba2      	ldr	r3, [pc, #648]	; (80016fc <StateJudgment+0x2bc>)
 8001474:	ed93 7a00 	vldr	s14, [r3]
 8001478:	4ba2      	ldr	r3, [pc, #648]	; (8001704 <StateJudgment+0x2c4>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001482:	ed97 7a05 	vldr	s14, [r7, #20]
 8001486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	dd03      	ble.n	8001498 <StateJudgment+0x58>
			BufferIndex = 0;
 8001490:	4b9d      	ldr	r3, [pc, #628]	; (8001708 <StateJudgment+0x2c8>)
 8001492:	2200      	movs	r2, #0
 8001494:	801a      	strh	r2, [r3, #0]
 8001496:	e005      	b.n	80014a4 <StateJudgment+0x64>
		} else {
			BufferIndex++;
 8001498:	4b9b      	ldr	r3, [pc, #620]	; (8001708 <StateJudgment+0x2c8>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b99      	ldr	r3, [pc, #612]	; (8001708 <StateJudgment+0x2c8>)
 80014a2:	801a      	strh	r2, [r3, #0]
		}
		if(BufferIndex == BufferSize) {
 80014a4:	4b98      	ldr	r3, [pc, #608]	; (8001708 <StateJudgment+0x2c8>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80014ac:	d10a      	bne.n	80014c4 <StateJudgment+0x84>
			SystemState = 1; //constant speed
 80014ae:	4b92      	ldr	r3, [pc, #584]	; (80016f8 <StateJudgment+0x2b8>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
			StableI = ADC_ValueAverage[1]; //Current at constant speed
 80014b4:	4b95      	ldr	r3, [pc, #596]	; (800170c <StateJudgment+0x2cc>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a95      	ldr	r2, [pc, #596]	; (8001710 <StateJudgment+0x2d0>)
 80014ba:	6013      	str	r3, [r2, #0]
			//HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
			BufferIndex = 0;
 80014bc:	4b92      	ldr	r3, [pc, #584]	; (8001708 <StateJudgment+0x2c8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	801a      	strh	r2, [r3, #0]
			return;
 80014c2:	e106      	b.n	80016d2 <StateJudgment+0x292>
		}
	}
	if(SystemState == 1) { //constant speed
 80014c4:	4b8c      	ldr	r3, [pc, #560]	; (80016f8 <StateJudgment+0x2b8>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d148      	bne.n	800155e <StateJudgment+0x11e>
		if(Speed > Target_Speed * 1.3 || Speed < Target_Speed * 0.7) {
 80014cc:	6978      	ldr	r0, [r7, #20]
 80014ce:	f7ff f83b 	bl	8000548 <__aeabi_f2d>
 80014d2:	e9c7 0100 	strd	r0, r1, [r7]
 80014d6:	4b89      	ldr	r3, [pc, #548]	; (80016fc <StateJudgment+0x2bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f834 	bl	8000548 <__aeabi_f2d>
 80014e0:	a37f      	add	r3, pc, #508	; (adr r3, 80016e0 <StateJudgment+0x2a0>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff f887 	bl	80005f8 <__aeabi_dmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	461a      	mov	r2, r3
 80014f0:	4623      	mov	r3, r4
 80014f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014f6:	f7ff fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d119      	bne.n	8001534 <StateJudgment+0xf4>
 8001500:	6978      	ldr	r0, [r7, #20]
 8001502:	f7ff f821 	bl	8000548 <__aeabi_f2d>
 8001506:	e9c7 0100 	strd	r0, r1, [r7]
 800150a:	4b7c      	ldr	r3, [pc, #496]	; (80016fc <StateJudgment+0x2bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f81a 	bl	8000548 <__aeabi_f2d>
 8001514:	a374      	add	r3, pc, #464	; (adr r3, 80016e8 <StateJudgment+0x2a8>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f86d 	bl	80005f8 <__aeabi_dmul>
 800151e:	4603      	mov	r3, r0
 8001520:	460c      	mov	r4, r1
 8001522:	461a      	mov	r2, r3
 8001524:	4623      	mov	r3, r4
 8001526:	e9d7 0100 	ldrd	r0, r1, [r7]
 800152a:	f7ff fad7 	bl	8000adc <__aeabi_dcmplt>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <StateJudgment+0x102>
			BufferIndex++;
 8001534:	4b74      	ldr	r3, [pc, #464]	; (8001708 <StateJudgment+0x2c8>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b72      	ldr	r3, [pc, #456]	; (8001708 <StateJudgment+0x2c8>)
 800153e:	801a      	strh	r2, [r3, #0]
 8001540:	e002      	b.n	8001548 <StateJudgment+0x108>
		} else {
			BufferIndex = 0;
 8001542:	4b71      	ldr	r3, [pc, #452]	; (8001708 <StateJudgment+0x2c8>)
 8001544:	2200      	movs	r2, #0
 8001546:	801a      	strh	r2, [r3, #0]
		}
		if(BufferIndex == 10) {
 8001548:	4b6f      	ldr	r3, [pc, #444]	; (8001708 <StateJudgment+0x2c8>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	2b0a      	cmp	r3, #10
 800154e:	d106      	bne.n	800155e <StateJudgment+0x11e>
			SystemState = 2;
 8001550:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <StateJudgment+0x2b8>)
 8001552:	2202      	movs	r2, #2
 8001554:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
			BufferIndex = 0;
 8001556:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <StateJudgment+0x2c8>)
 8001558:	2200      	movs	r2, #0
 800155a:	801a      	strh	r2, [r3, #0]
			return;
 800155c:	e0b9      	b.n	80016d2 <StateJudgment+0x292>
		}
	}
	if(SystemState == 2) { //Enter the speed control state
 800155e:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <StateJudgment+0x2b8>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d139      	bne.n	80015da <StateJudgment+0x19a>
		if((Speed < Target_Speed * MinRange) || (Speed > Target_Speed * MaxRange)) {
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <StateJudgment+0x2bc>)
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	4b64      	ldr	r3, [pc, #400]	; (8001700 <StateJudgment+0x2c0>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001576:	ed97 7a05 	vldr	s14, [r7, #20]
 800157a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d40e      	bmi.n	80015a2 <StateJudgment+0x162>
 8001584:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <StateJudgment+0x2bc>)
 8001586:	ed93 7a00 	vldr	s14, [r3]
 800158a:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <StateJudgment+0x2c4>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001594:	ed97 7a05 	vldr	s14, [r7, #20]
 8001598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	dd03      	ble.n	80015aa <StateJudgment+0x16a>
			BufferIndex = 0;
 80015a2:	4b59      	ldr	r3, [pc, #356]	; (8001708 <StateJudgment+0x2c8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	801a      	strh	r2, [r3, #0]
 80015a8:	e005      	b.n	80015b6 <StateJudgment+0x176>
		} else {
			BufferIndex++;
 80015aa:	4b57      	ldr	r3, [pc, #348]	; (8001708 <StateJudgment+0x2c8>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b55      	ldr	r3, [pc, #340]	; (8001708 <StateJudgment+0x2c8>)
 80015b4:	801a      	strh	r2, [r3, #0]
		}
		if(BufferIndex == BufferSize) {
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <StateJudgment+0x2c8>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80015be:	d10c      	bne.n	80015da <StateJudgment+0x19a>
			SystemState = 3; //constant speed
 80015c0:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <StateJudgment+0x2b8>)
 80015c2:	2203      	movs	r2, #3
 80015c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015cc:	4851      	ldr	r0, [pc, #324]	; (8001714 <StateJudgment+0x2d4>)
 80015ce:	f002 fea1 	bl	8004314 <HAL_GPIO_WritePin>
			BufferIndex = 0;
 80015d2:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <StateJudgment+0x2c8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]
			return;
 80015d8:	e07b      	b.n	80016d2 <StateJudgment+0x292>
		}
	}
	if(SystemState == 3) { //the speed is restored
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <StateJudgment+0x2b8>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d177      	bne.n	80016d2 <StateJudgment+0x292>
		if(Up_Flag == 1 && (fabs(ADC_ValueAverage[1] - 1.65) > 1.5 * fabs(StableI - 1.65))) {
 80015e2:	4b4d      	ldr	r3, [pc, #308]	; (8001718 <StateJudgment+0x2d8>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d136      	bne.n	8001658 <StateJudgment+0x218>
 80015ea:	4b48      	ldr	r3, [pc, #288]	; (800170c <StateJudgment+0x2cc>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ffaa 	bl	8000548 <__aeabi_f2d>
 80015f4:	a33e      	add	r3, pc, #248	; (adr r3, 80016f0 <StateJudgment+0x2b0>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fe45 	bl	8000288 <__aeabi_dsub>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	469a      	mov	sl, r3
 8001604:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8001608:	4b41      	ldr	r3, [pc, #260]	; (8001710 <StateJudgment+0x2d0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff9b 	bl	8000548 <__aeabi_f2d>
 8001612:	a337      	add	r3, pc, #220	; (adr r3, 80016f0 <StateJudgment+0x2b0>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7fe fe36 	bl	8000288 <__aeabi_dsub>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b3b      	ldr	r3, [pc, #236]	; (800171c <StateJudgment+0x2dc>)
 800162e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001632:	f7fe ffe1 	bl	80005f8 <__aeabi_dmul>
 8001636:	4603      	mov	r3, r0
 8001638:	460c      	mov	r4, r1
 800163a:	461a      	mov	r2, r3
 800163c:	4623      	mov	r3, r4
 800163e:	4650      	mov	r0, sl
 8001640:	4659      	mov	r1, fp
 8001642:	f7ff fa69 	bl	8000b18 <__aeabi_dcmpgt>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <StateJudgment+0x218>
			HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001652:	4830      	ldr	r0, [pc, #192]	; (8001714 <StateJudgment+0x2d4>)
 8001654:	f002 fe5e 	bl	8004314 <HAL_GPIO_WritePin>
			//Beep();  //When rising
		}
		if(Up_Flag == 0 && (fabs(ADC_ValueAverage[1] - 1.65) < 0.5 * fabs(StableI - 1.65))) {
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <StateJudgment+0x2d8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d135      	bne.n	80016cc <StateJudgment+0x28c>
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <StateJudgment+0x2cc>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff6f 	bl	8000548 <__aeabi_f2d>
 800166a:	a321      	add	r3, pc, #132	; (adr r3, 80016f0 <StateJudgment+0x2b0>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe fe0a 	bl	8000288 <__aeabi_dsub>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	461d      	mov	r5, r3
 800167a:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <StateJudgment+0x2d0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff60 	bl	8000548 <__aeabi_f2d>
 8001688:	a319      	add	r3, pc, #100	; (adr r3, 80016f0 <StateJudgment+0x2b0>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe fdfb 	bl	8000288 <__aeabi_dsub>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	4698      	mov	r8, r3
 8001698:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <StateJudgment+0x2e0>)
 80016a2:	4640      	mov	r0, r8
 80016a4:	4649      	mov	r1, r9
 80016a6:	f7fe ffa7 	bl	80005f8 <__aeabi_dmul>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	461a      	mov	r2, r3
 80016b0:	4623      	mov	r3, r4
 80016b2:	4628      	mov	r0, r5
 80016b4:	4631      	mov	r1, r6
 80016b6:	f7ff fa11 	bl	8000adc <__aeabi_dcmplt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <StateJudgment+0x28c>
			HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c6:	4813      	ldr	r0, [pc, #76]	; (8001714 <StateJudgment+0x2d4>)
 80016c8:	f002 fe24 	bl	8004314 <HAL_GPIO_WritePin>
			//Beep(); //When falling
		}
		SystemState = 1; //Return to constant speed mode
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <StateJudgment+0x2b8>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
	}
}
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016da:	bf00      	nop
 80016dc:	f3af 8000 	nop.w
 80016e0:	cccccccd 	.word	0xcccccccd
 80016e4:	3ff4cccc 	.word	0x3ff4cccc
 80016e8:	66666666 	.word	0x66666666
 80016ec:	3fe66666 	.word	0x3fe66666
 80016f0:	66666666 	.word	0x66666666
 80016f4:	3ffa6666 	.word	0x3ffa6666
 80016f8:	2000021a 	.word	0x2000021a
 80016fc:	20000004 	.word	0x20000004
 8001700:	20000018 	.word	0x20000018
 8001704:	20000014 	.word	0x20000014
 8001708:	20000218 	.word	0x20000218
 800170c:	200004f4 	.word	0x200004f4
 8001710:	2000021c 	.word	0x2000021c
 8001714:	40020800 	.word	0x40020800
 8001718:	20000000 	.word	0x20000000
 800171c:	3ff80000 	.word	0x3ff80000
 8001720:	3fe00000 	.word	0x3fe00000

08001724 <Motor_Contorl>:

void Motor_Contorl(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	 float Pid_Output = PID_Calc((float)2000 / 30 / Cycle , Target_Speed); //Perform Pid operation
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <Motor_Contorl+0x78>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	ee07 3a90 	vmov	s15, r3
 8001732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001736:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80017a0 <Motor_Contorl+0x7c>
 800173a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <Motor_Contorl+0x80>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	eef0 0a67 	vmov.f32	s1, s15
 8001748:	eeb0 0a66 	vmov.f32	s0, s13
 800174c:	f001 f91e 	bl	800298c <PID_Calc>
 8001750:	ed87 0a01 	vstr	s0, [r7, #4]
	 Pwm_Motor_CompareValue += (int) Pid_Output; //Pwm+ PIdoutput
 8001754:	edd7 7a01 	vldr	s15, [r7, #4]
 8001758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175c:	ee17 2a90 	vmov	r2, s15
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <Motor_Contorl+0x84>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4413      	add	r3, r2
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <Motor_Contorl+0x84>)
 8001768:	6013      	str	r3, [r2, #0]
	 if(Pwm_Motor_CompareValue >= 1000) {//if compare too high
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <Motor_Contorl+0x84>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001772:	db03      	blt.n	800177c <Motor_Contorl+0x58>
		 Pwm_Motor_CompareValue = 1000/2;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <Motor_Contorl+0x84>)
 8001776:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800177a:	601a      	str	r2, [r3, #0]
	 }
	 if(Pwm_Motor_CompareValue <= 0) { //ifcompare too low
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <Motor_Contorl+0x84>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	dc02      	bgt.n	800178a <Motor_Contorl+0x66>
		 Pwm_Motor_CompareValue = 0;
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <Motor_Contorl+0x84>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
	 }
	 Set_CompareValue(Pwm_Motor_CompareValue); //set the compareValue
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <Motor_Contorl+0x84>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fe00 	bl	8001394 <Set_CompareValue>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000020 	.word	0x20000020
 80017a0:	42855555 	.word	0x42855555
 80017a4:	20000004 	.word	0x20000004
 80017a8:	2000000c 	.word	0x2000000c

080017ac <System_Init>:
	}
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, Pwm_Boost_CompareValue); //set the compareValue
}


void System_Init(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	  /*WIFI  Init*/
	  Server_Init();
 80017b0:	f001 f96a 	bl	8002a88 <Server_Init>
	  HAL_Delay(500);
 80017b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017b8:	f001 fb4c 	bl	8002e54 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 80017bc:	2201      	movs	r2, #1
 80017be:	4922      	ldr	r1, [pc, #136]	; (8001848 <System_Init+0x9c>)
 80017c0:	4822      	ldr	r0, [pc, #136]	; (800184c <System_Init+0xa0>)
 80017c2:	f004 fd58 	bl	8006276 <HAL_UART_Receive_IT>

	  /*input cap Init*/
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	// Start timer input capture channel
 80017c6:	2100      	movs	r1, #0
 80017c8:	4821      	ldr	r0, [pc, #132]	; (8001850 <System_Init+0xa4>)
 80017ca:	f003 fb17 	bl	8004dfc <HAL_TIM_IC_Start_IT>
	  __HAL_TIM_ENABLE_IT(&htim2,TIM_IT_UPDATE);	//Enable update interrupt
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <System_Init+0xa4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <System_Init+0xa4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0201 	orr.w	r2, r2, #1
 80017dc:	60da      	str	r2, [r3, #12]

	  /*ADC  Dma Init*/
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, Sample_Num * Channel_Num);
 80017de:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 80017e2:	491c      	ldr	r1, [pc, #112]	; (8001854 <System_Init+0xa8>)
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <System_Init+0xac>)
 80017e6:	f001 fb9b 	bl	8002f20 <HAL_ADC_Start_DMA>

	  /*motor Init*/
	  //HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80017ea:	2100      	movs	r1, #0
 80017ec:	481b      	ldr	r0, [pc, #108]	; (800185c <System_Init+0xb0>)
 80017ee:	f003 fa91 	bl	8004d14 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80017f2:	2104      	movs	r1, #4
 80017f4:	4819      	ldr	r0, [pc, #100]	; (800185c <System_Init+0xb0>)
 80017f6:	f003 fa8d 	bl	8004d14 <HAL_TIM_PWM_Start>
	  Set_CompareValue(Pwm_Motor_CompareValue); //motor init
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <System_Init+0xb4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fdc8 	bl	8001394 <Set_CompareValue>

	  /*Boost Init*/
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001804:	2100      	movs	r1, #0
 8001806:	4817      	ldr	r0, [pc, #92]	; (8001864 <System_Init+0xb8>)
 8001808:	f003 fa84 	bl	8004d14 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);//boost init
 800180c:	2100      	movs	r1, #0
 800180e:	4815      	ldr	r0, [pc, #84]	; (8001864 <System_Init+0xb8>)
 8001810:	f004 fb19 	bl	8005e46 <HAL_TIMEx_PWMN_Start>
	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, Pwm_Boost_CompareValue);
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <System_Init+0xbc>)
 8001816:	881a      	ldrh	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <System_Init+0xb8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	635a      	str	r2, [r3, #52]	; 0x34

	  /*pid partParameter Set*/
	  Set_PID_Parameter(20, 5, 0);
 800181e:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800186c <System_Init+0xc0>
 8001822:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001826:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800182a:	f001 f8f1 	bl	8002a10 <Set_PID_Parameter>
	  Set_PID_Parameter1(1, 1, 1);
 800182e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001832:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001836:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800183a:	f001 f907 	bl	8002a4c <Set_PID_Parameter1>

	  /*tim3 init*/
	  HAL_TIM_Base_Start_IT(&htim3);  //10ms interrupt
 800183e:	480c      	ldr	r0, [pc, #48]	; (8001870 <System_Init+0xc4>)
 8001840:	f003 fa0f 	bl	8004c62 <HAL_TIM_Base_Start_IT>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20001458 	.word	0x20001458
 800184c:	200004b4 	.word	0x200004b4
 8001850:	20000474 	.word	0x20000474
 8001854:	200004fc 	.word	0x200004fc
 8001858:	2000030c 	.word	0x2000030c
 800185c:	20000434 	.word	0x20000434
 8001860:	2000000c 	.word	0x2000000c
 8001864:	200003b4 	.word	0x200003b4
 8001868:	20000008 	.word	0x20000008
 800186c:	00000000 	.word	0x00000000
 8001870:	200003f4 	.word	0x200003f4
 8001874:	00000000 	.word	0x00000000

08001878 <Tcp_DataDeal>:

uint16_t CompareValue_Buffer = 0;
void Tcp_DataDeal(void) {
 8001878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800187c:	b093      	sub	sp, #76	; 0x4c
 800187e:	af04      	add	r7, sp, #16
	  //Server_SentTo_Client(Wifi_Command_Buffer);
	  char Str[50] = {0};
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2232      	movs	r2, #50	; 0x32
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f005 fb70 	bl	8006f6c <memset>
	  if(Strcmp(Wifi_Command_Buffer, (uint8_t *)"Speed\r")) {
 800188c:	4980      	ldr	r1, [pc, #512]	; (8001a90 <Tcp_DataDeal+0x218>)
 800188e:	4881      	ldr	r0, [pc, #516]	; (8001a94 <Tcp_DataDeal+0x21c>)
 8001890:	f001 f99e 	bl	8002bd0 <Strcmp>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d01a      	beq.n	80018d0 <Tcp_DataDeal+0x58>
		  sprintf(Str, "Speed: %f r/s", (float)2000 / 30 / Cycle);
 800189a:	4b7f      	ldr	r3, [pc, #508]	; (8001a98 <Tcp_DataDeal+0x220>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001a9c <Tcp_DataDeal+0x224>
 80018aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80018ae:	ee16 0a90 	vmov	r0, s13
 80018b2:	f7fe fe49 	bl	8000548 <__aeabi_f2d>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	1d38      	adds	r0, r7, #4
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	4977      	ldr	r1, [pc, #476]	; (8001aa0 <Tcp_DataDeal+0x228>)
 80018c2:	f006 f833 	bl	800792c <siprintf>
		  Server_SentTo_Client((uint8_t *)Str);
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 f923 	bl	8002b14 <Server_SentTo_Client>
	  }
	  else {
		  sprintf(Str, "Cycle:%d\r\nWidth:%d\r\nI: %f A\r\nV: %f V", (int)Cycle, (int)Width, fabs(ADC_ValueAverage[1] - 1.60) * 2, ADC_ValueAverage[0]);
	  	  Server_SentTo_Client((uint8_t *)Str);
	  }
}
 80018ce:	e0d5      	b.n	8001a7c <Tcp_DataDeal+0x204>
	  } else if(Strcmp(Wifi_Command_Buffer, (uint8_t *)"I\r")) {
 80018d0:	4974      	ldr	r1, [pc, #464]	; (8001aa4 <Tcp_DataDeal+0x22c>)
 80018d2:	4870      	ldr	r0, [pc, #448]	; (8001a94 <Tcp_DataDeal+0x21c>)
 80018d4:	f001 f97c 	bl	8002bd0 <Strcmp>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d021      	beq.n	8001922 <Tcp_DataDeal+0xaa>
		  sprintf(Str, "Motor_I: %f A", fabs(ADC_ValueAverage[1] - 1.60) * 2);
 80018de:	4b72      	ldr	r3, [pc, #456]	; (8001aa8 <Tcp_DataDeal+0x230>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe30 	bl	8000548 <__aeabi_f2d>
 80018e8:	a367      	add	r3, pc, #412	; (adr r3, 8001a88 <Tcp_DataDeal+0x210>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fccb 	bl	8000288 <__aeabi_dsub>
 80018f2:	4603      	mov	r3, r0
 80018f4:	460c      	mov	r4, r1
 80018f6:	4698      	mov	r8, r3
 80018f8:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80018fc:	4642      	mov	r2, r8
 80018fe:	464b      	mov	r3, r9
 8001900:	4640      	mov	r0, r8
 8001902:	4649      	mov	r1, r9
 8001904:	f7fe fcc2 	bl	800028c <__adddf3>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	1d38      	adds	r0, r7, #4
 800190e:	461a      	mov	r2, r3
 8001910:	4623      	mov	r3, r4
 8001912:	4966      	ldr	r1, [pc, #408]	; (8001aac <Tcp_DataDeal+0x234>)
 8001914:	f006 f80a 	bl	800792c <siprintf>
		  Server_SentTo_Client((uint8_t *)Str);
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4618      	mov	r0, r3
 800191c:	f001 f8fa 	bl	8002b14 <Server_SentTo_Client>
}
 8001920:	e0ac      	b.n	8001a7c <Tcp_DataDeal+0x204>
	  } else if(Strcmp(Wifi_Command_Buffer, (uint8_t *)"V\r")) {
 8001922:	4963      	ldr	r1, [pc, #396]	; (8001ab0 <Tcp_DataDeal+0x238>)
 8001924:	485b      	ldr	r0, [pc, #364]	; (8001a94 <Tcp_DataDeal+0x21c>)
 8001926:	f001 f953 	bl	8002bd0 <Strcmp>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d011      	beq.n	8001954 <Tcp_DataDeal+0xdc>
		  sprintf(Str, "Boost_V: %f V", ADC_ValueAverage[0]);
 8001930:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <Tcp_DataDeal+0x230>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe07 	bl	8000548 <__aeabi_f2d>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	1d38      	adds	r0, r7, #4
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	495b      	ldr	r1, [pc, #364]	; (8001ab4 <Tcp_DataDeal+0x23c>)
 8001946:	f005 fff1 	bl	800792c <siprintf>
		  Server_SentTo_Client((uint8_t *)Str);
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4618      	mov	r0, r3
 800194e:	f001 f8e1 	bl	8002b14 <Server_SentTo_Client>
}
 8001952:	e093      	b.n	8001a7c <Tcp_DataDeal+0x204>
	  } else if(Wifi_Command_Buffer[0] == 'S' && Wifi_Command_Buffer[1] == 'E' && Wifi_Command_Buffer[2] == 'T') {
 8001954:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <Tcp_DataDeal+0x21c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b53      	cmp	r3, #83	; 0x53
 800195a:	d15a      	bne.n	8001a12 <Tcp_DataDeal+0x19a>
 800195c:	4b4d      	ldr	r3, [pc, #308]	; (8001a94 <Tcp_DataDeal+0x21c>)
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	2b45      	cmp	r3, #69	; 0x45
 8001962:	d156      	bne.n	8001a12 <Tcp_DataDeal+0x19a>
 8001964:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <Tcp_DataDeal+0x21c>)
 8001966:	789b      	ldrb	r3, [r3, #2]
 8001968:	2b54      	cmp	r3, #84	; 0x54
 800196a:	d152      	bne.n	8001a12 <Tcp_DataDeal+0x19a>
		  if(Wifi_Command_Buffer[3] == 'C') {
 800196c:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <Tcp_DataDeal+0x21c>)
 800196e:	78db      	ldrb	r3, [r3, #3]
 8001970:	2b43      	cmp	r3, #67	; 0x43
 8001972:	d13e      	bne.n	80019f2 <Tcp_DataDeal+0x17a>
			  for(uint8_t i = 5; Wifi_Command_Buffer[i] != '\r'; i++) {
 8001974:	2305      	movs	r3, #5
 8001976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800197a:	e01a      	b.n	80019b2 <Tcp_DataDeal+0x13a>
				  CompareValue_Buffer += Wifi_Command_Buffer[i] - '0';
 800197c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001980:	4a44      	ldr	r2, [pc, #272]	; (8001a94 <Tcp_DataDeal+0x21c>)
 8001982:	5cd3      	ldrb	r3, [r2, r3]
 8001984:	b29a      	uxth	r2, r3
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <Tcp_DataDeal+0x240>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	b29b      	uxth	r3, r3
 800198e:	3b30      	subs	r3, #48	; 0x30
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b49      	ldr	r3, [pc, #292]	; (8001ab8 <Tcp_DataDeal+0x240>)
 8001994:	801a      	strh	r2, [r3, #0]
				  CompareValue_Buffer *= 10;
 8001996:	4b48      	ldr	r3, [pc, #288]	; (8001ab8 <Tcp_DataDeal+0x240>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4413      	add	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <Tcp_DataDeal+0x240>)
 80019a6:	801a      	strh	r2, [r3, #0]
			  for(uint8_t i = 5; Wifi_Command_Buffer[i] != '\r'; i++) {
 80019a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019ac:	3301      	adds	r3, #1
 80019ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80019b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019b6:	4a37      	ldr	r2, [pc, #220]	; (8001a94 <Tcp_DataDeal+0x21c>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	2b0d      	cmp	r3, #13
 80019bc:	d1de      	bne.n	800197c <Tcp_DataDeal+0x104>
			  CompareValue_Buffer /= 10;
 80019be:	4b3e      	ldr	r3, [pc, #248]	; (8001ab8 <Tcp_DataDeal+0x240>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <Tcp_DataDeal+0x244>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b3a      	ldr	r3, [pc, #232]	; (8001ab8 <Tcp_DataDeal+0x240>)
 80019ce:	801a      	strh	r2, [r3, #0]
			  Pwm_Motor_CompareValue = (int)CompareValue_Buffer;
 80019d0:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <Tcp_DataDeal+0x240>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <Tcp_DataDeal+0x248>)
 80019d8:	601a      	str	r2, [r3, #0]
			  Target_Speed = (float)CompareValue_Buffer;
 80019da:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <Tcp_DataDeal+0x240>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e6:	4b37      	ldr	r3, [pc, #220]	; (8001ac4 <Tcp_DataDeal+0x24c>)
 80019e8:	edc3 7a00 	vstr	s15, [r3]
			  CompareValue_Buffer = 0;
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <Tcp_DataDeal+0x240>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	801a      	strh	r2, [r3, #0]
		  if(Wifi_Command_Buffer[3] == 'T') {
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <Tcp_DataDeal+0x21c>)
 80019f4:	78db      	ldrb	r3, [r3, #3]
 80019f6:	2b54      	cmp	r3, #84	; 0x54
 80019f8:	d140      	bne.n	8001a7c <Tcp_DataDeal+0x204>
			  if(Up_Flag == 1) {
 80019fa:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <Tcp_DataDeal+0x250>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d103      	bne.n	8001a0a <Tcp_DataDeal+0x192>
				  Up_Flag = 0;
 8001a02:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <Tcp_DataDeal+0x250>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
		  if(Wifi_Command_Buffer[3] == 'T') {
 8001a08:	e038      	b.n	8001a7c <Tcp_DataDeal+0x204>
				  Up_Flag = 1;
 8001a0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <Tcp_DataDeal+0x250>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
		  if(Wifi_Command_Buffer[3] == 'T') {
 8001a10:	e034      	b.n	8001a7c <Tcp_DataDeal+0x204>
		  sprintf(Str, "Cycle:%d\r\nWidth:%d\r\nI: %f A\r\nV: %f V", (int)Cycle, (int)Width, fabs(ADC_ValueAverage[1] - 1.60) * 2, ADC_ValueAverage[0]);
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <Tcp_DataDeal+0x220>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	461e      	mov	r6, r3
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <Tcp_DataDeal+0x254>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4698      	mov	r8, r3
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <Tcp_DataDeal+0x230>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd90 	bl	8000548 <__aeabi_f2d>
 8001a28:	a317      	add	r3, pc, #92	; (adr r3, 8001a88 <Tcp_DataDeal+0x210>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fc2b 	bl	8000288 <__aeabi_dsub>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4614      	mov	r4, r2
 8001a38:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	462b      	mov	r3, r5
 8001a40:	4620      	mov	r0, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	f7fe fc22 	bl	800028c <__adddf3>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	4625      	mov	r5, r4
 8001a4e:	461c      	mov	r4, r3
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <Tcp_DataDeal+0x230>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd77 	bl	8000548 <__aeabi_f2d>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	1d38      	adds	r0, r7, #4
 8001a60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a64:	e9cd 4500 	strd	r4, r5, [sp]
 8001a68:	4643      	mov	r3, r8
 8001a6a:	4632      	mov	r2, r6
 8001a6c:	4918      	ldr	r1, [pc, #96]	; (8001ad0 <Tcp_DataDeal+0x258>)
 8001a6e:	f005 ff5d 	bl	800792c <siprintf>
	  	  Server_SentTo_Client((uint8_t *)Str);
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 f84d 	bl	8002b14 <Server_SentTo_Client>
}
 8001a7a:	e7ff      	b.n	8001a7c <Tcp_DataDeal+0x204>
 8001a7c:	bf00      	nop
 8001a7e:	373c      	adds	r7, #60	; 0x3c
 8001a80:	46bd      	mov	sp, r7
 8001a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a86:	bf00      	nop
 8001a88:	9999999a 	.word	0x9999999a
 8001a8c:	3ff99999 	.word	0x3ff99999
 8001a90:	08009a20 	.word	0x08009a20
 8001a94:	2000029c 	.word	0x2000029c
 8001a98:	20000020 	.word	0x20000020
 8001a9c:	42855555 	.word	0x42855555
 8001aa0:	08009a28 	.word	0x08009a28
 8001aa4:	08009a38 	.word	0x08009a38
 8001aa8:	200004f4 	.word	0x200004f4
 8001aac:	08009a3c 	.word	0x08009a3c
 8001ab0:	08009a4c 	.word	0x08009a4c
 8001ab4:	08009a50 	.word	0x08009a50
 8001ab8:	20000220 	.word	0x20000220
 8001abc:	cccccccd 	.word	0xcccccccd
 8001ac0:	2000000c 	.word	0x2000000c
 8001ac4:	20000004 	.word	0x20000004
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	2000022c 	.word	0x2000022c
 8001ad0:	08009a60 	.word	0x08009a60

08001ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_MspInit+0x90>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <HAL_MspInit+0x90>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_MspInit+0x90>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_MspInit+0x90>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_MspInit+0x90>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_MspInit+0x90>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2101      	movs	r1, #1
 8001b26:	f06f 000b 	mvn.w	r0, #11
 8001b2a:	f001 fe7a 	bl	8003822 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2101      	movs	r1, #1
 8001b32:	f06f 000a 	mvn.w	r0, #10
 8001b36:	f001 fe74 	bl	8003822 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	f06f 0009 	mvn.w	r0, #9
 8001b42:	f001 fe6e 	bl	8003822 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2101      	movs	r1, #1
 8001b4a:	f06f 0004 	mvn.w	r0, #4
 8001b4e:	f001 fe68 	bl	8003822 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2101      	movs	r1, #1
 8001b56:	f06f 0003 	mvn.w	r0, #3
 8001b5a:	f001 fe62 	bl	8003822 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2101      	movs	r1, #1
 8001b62:	f06f 0001 	mvn.w	r0, #1
 8001b66:	f001 fe5c 	bl	8003822 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bcc:	f001 f922 	bl	8002e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <TIM2_IRQHandler+0x10>)
 8001bda:	f003 f977 	bl	8004ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000474 	.word	0x20000474

08001be8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM3_IRQHandler+0x10>)
 8001bee:	f003 f96d 	bl	8004ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200003f4 	.word	0x200003f4

08001bfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <USART1_IRQHandler+0x10>)
 8001c02:	f004 fb8d 	bl	8006320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200004b4 	.word	0x200004b4

08001c10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <DMA2_Stream0_IRQHandler+0x10>)
 8001c16:	f001 ff63 	bl	8003ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000354 	.word	0x20000354

08001c24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e00a      	b.n	8001c4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c36:	f3af 8000 	nop.w
 8001c3a:	4601      	mov	r1, r0
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	60ba      	str	r2, [r7, #8]
 8001c42:	b2ca      	uxtb	r2, r1
 8001c44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf0      	blt.n	8001c36 <_read+0x12>
	}

return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e009      	b.n	8001c84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	60ba      	str	r2, [r7, #8]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fc2d 	bl	80024d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	3301      	adds	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbf1      	blt.n	8001c70 <_write+0x12>
	}
	return len;
 8001c8c:	687b      	ldr	r3, [r7, #4]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <_close>:

int _close(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <_isatty>:

int _isatty(int file)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
	return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <_sbrk+0x50>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <_sbrk+0x16>
		heap_end = &end;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <_sbrk+0x50>)
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <_sbrk+0x54>)
 8001d14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <_sbrk+0x50>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <_sbrk+0x50>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	466a      	mov	r2, sp
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d907      	bls.n	8001d3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d2a:	f005 f8f5 	bl	8006f18 <__errno>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	230c      	movs	r3, #12
 8001d32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e006      	b.n	8001d48 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <_sbrk+0x50>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a03      	ldr	r2, [pc, #12]	; (8001d50 <_sbrk+0x50>)
 8001d44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000224 	.word	0x20000224
 8001d54:	20001468 	.word	0x20001468

08001d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <SystemInit+0x28>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <SystemInit+0x28>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <SystemInit+0x28>)
 8001d6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d72:	609a      	str	r2, [r3, #8]
#endif
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b096      	sub	sp, #88	; 0x58
 8001d88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	611a      	str	r2, [r3, #16]
 8001db2:	615a      	str	r2, [r3, #20]
 8001db4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2220      	movs	r2, #32
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f005 f8d5 	bl	8006f6c <memset>

  htim1.Instance = TIM1;
 8001dc2:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <MX_TIM1_Init+0x168>)
 8001dc4:	4a4a      	ldr	r2, [pc, #296]	; (8001ef0 <MX_TIM1_Init+0x16c>)
 8001dc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8001dc8:	4b48      	ldr	r3, [pc, #288]	; (8001eec <MX_TIM1_Init+0x168>)
 8001dca:	22a7      	movs	r2, #167	; 0xa7
 8001dcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dce:	4b47      	ldr	r3, [pc, #284]	; (8001eec <MX_TIM1_Init+0x168>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001dd4:	4b45      	ldr	r3, [pc, #276]	; (8001eec <MX_TIM1_Init+0x168>)
 8001dd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ddc:	4b43      	ldr	r3, [pc, #268]	; (8001eec <MX_TIM1_Init+0x168>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001de2:	4b42      	ldr	r3, [pc, #264]	; (8001eec <MX_TIM1_Init+0x168>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de8:	4b40      	ldr	r3, [pc, #256]	; (8001eec <MX_TIM1_Init+0x168>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dee:	483f      	ldr	r0, [pc, #252]	; (8001eec <MX_TIM1_Init+0x168>)
 8001df0:	f002 ff0c 	bl	8004c0c <HAL_TIM_Base_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001dfa:	f7ff fe6b 	bl	8001ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e02:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4838      	ldr	r0, [pc, #224]	; (8001eec <MX_TIM1_Init+0x168>)
 8001e0c:	f003 fac8 	bl	80053a0 <HAL_TIM_ConfigClockSource>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e16:	f7ff fe5d 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e1a:	4834      	ldr	r0, [pc, #208]	; (8001eec <MX_TIM1_Init+0x168>)
 8001e1c:	f002 ff45 	bl	8004caa <HAL_TIM_PWM_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e26:	f7ff fe55 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e36:	4619      	mov	r1, r3
 8001e38:	482c      	ldr	r0, [pc, #176]	; (8001eec <MX_TIM1_Init+0x168>)
 8001e3a:	f004 f82f 	bl	8005e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e44:	f7ff fe46 	bl	8001ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e48:	2360      	movs	r3, #96	; 0x60
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e54:	2300      	movs	r3, #0
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	481f      	ldr	r0, [pc, #124]	; (8001eec <MX_TIM1_Init+0x168>)
 8001e6e:	f003 f9d1 	bl	8005214 <HAL_TIM_PWM_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001e78:	f7ff fe2c 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e80:	2204      	movs	r2, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4819      	ldr	r0, [pc, #100]	; (8001eec <MX_TIM1_Init+0x168>)
 8001e86:	f003 f9c5 	bl	8005214 <HAL_TIM_PWM_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001e90:	f7ff fe20 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	220c      	movs	r2, #12
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4813      	ldr	r0, [pc, #76]	; (8001eec <MX_TIM1_Init+0x168>)
 8001e9e:	f003 f9b9 	bl	8005214 <HAL_TIM_PWM_ConfigChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001ea8:	f7ff fe14 	bl	8001ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4807      	ldr	r0, [pc, #28]	; (8001eec <MX_TIM1_Init+0x168>)
 8001ed0:	f004 f860 	bl	8005f94 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001eda:	f7ff fdfb 	bl	8001ad4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001ede:	4803      	ldr	r0, [pc, #12]	; (8001eec <MX_TIM1_Init+0x168>)
 8001ee0:	f000 f9fe 	bl	80022e0 <HAL_TIM_MspPostInit>

}
 8001ee4:	bf00      	nop
 8001ee6:	3758      	adds	r7, #88	; 0x58
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000434 	.word	0x20000434
 8001ef0:	40010000 	.word	0x40010000

08001ef4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001efa:	f107 0318 	add.w	r3, r7, #24
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001f20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001f28:	2253      	movs	r2, #83	; 0x53
 8001f2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8001f32:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3a:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f46:	4822      	ldr	r0, [pc, #136]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001f48:	f002 fe60 	bl	8004c0c <HAL_TIM_Base_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001f52:	f7ff fdbf 	bl	8001ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f5a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	4619      	mov	r1, r3
 8001f62:	481b      	ldr	r0, [pc, #108]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001f64:	f003 fa1c 	bl	80053a0 <HAL_TIM_ConfigClockSource>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f6e:	f7ff fdb1 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001f72:	4817      	ldr	r0, [pc, #92]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001f74:	f002 ff0c 	bl	8004d90 <HAL_TIM_IC_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f7e:	f7ff fda9 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f82:	2320      	movs	r3, #32
 8001f84:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f8a:	f107 0310 	add.w	r3, r7, #16
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480f      	ldr	r0, [pc, #60]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001f92:	f003 ff83 	bl	8005e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001f9c:	f7ff fd9a 	bl	8001ad4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <MX_TIM2_Init+0xdc>)
 8001fb8:	f003 f890 	bl	80050dc <HAL_TIM_IC_ConfigChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001fc2:	f7ff fd87 	bl	8001ad4 <Error_Handler>
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	3728      	adds	r7, #40	; 0x28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000474 	.word	0x20000474

08001fd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_TIM3_Init+0x94>)
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <MX_TIM3_Init+0x98>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <MX_TIM3_Init+0x94>)
 8001ff8:	2253      	movs	r2, #83	; 0x53
 8001ffa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_TIM3_Init+0x94>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <MX_TIM3_Init+0x94>)
 8002004:	f242 720f 	movw	r2, #9999	; 0x270f
 8002008:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_TIM3_Init+0x94>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <MX_TIM3_Init+0x94>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002016:	4814      	ldr	r0, [pc, #80]	; (8002068 <MX_TIM3_Init+0x94>)
 8002018:	f002 fdf8 	bl	8004c0c <HAL_TIM_Base_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002022:	f7ff fd57 	bl	8001ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	4619      	mov	r1, r3
 8002032:	480d      	ldr	r0, [pc, #52]	; (8002068 <MX_TIM3_Init+0x94>)
 8002034:	f003 f9b4 	bl	80053a0 <HAL_TIM_ConfigClockSource>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800203e:	f7ff fd49 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800204a:	463b      	mov	r3, r7
 800204c:	4619      	mov	r1, r3
 800204e:	4806      	ldr	r0, [pc, #24]	; (8002068 <MX_TIM3_Init+0x94>)
 8002050:	f003 ff24 	bl	8005e9c <HAL_TIMEx_MasterConfigSynchronization>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800205a:	f7ff fd3b 	bl	8001ad4 <Error_Handler>
  }

}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200003f4 	.word	0x200003f4
 800206c:	40000400 	.word	0x40000400

08002070 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b096      	sub	sp, #88	; 0x58
 8002074:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	615a      	str	r2, [r3, #20]
 80020a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	2220      	movs	r2, #32
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f004 ff5f 	bl	8006f6c <memset>

  htim8.Instance = TIM8;
 80020ae:	4b3e      	ldr	r3, [pc, #248]	; (80021a8 <MX_TIM8_Init+0x138>)
 80020b0:	4a3e      	ldr	r2, [pc, #248]	; (80021ac <MX_TIM8_Init+0x13c>)
 80020b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 80020b4:	4b3c      	ldr	r3, [pc, #240]	; (80021a8 <MX_TIM8_Init+0x138>)
 80020b6:	22a7      	movs	r2, #167	; 0xa7
 80020b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ba:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <MX_TIM8_Init+0x138>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80020c0:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <MX_TIM8_Init+0x138>)
 80020c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c8:	4b37      	ldr	r3, [pc, #220]	; (80021a8 <MX_TIM8_Init+0x138>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020ce:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <MX_TIM8_Init+0x138>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d4:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <MX_TIM8_Init+0x138>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020da:	4833      	ldr	r0, [pc, #204]	; (80021a8 <MX_TIM8_Init+0x138>)
 80020dc:	f002 fd96 	bl	8004c0c <HAL_TIM_Base_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80020e6:	f7ff fcf5 	bl	8001ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020f4:	4619      	mov	r1, r3
 80020f6:	482c      	ldr	r0, [pc, #176]	; (80021a8 <MX_TIM8_Init+0x138>)
 80020f8:	f003 f952 	bl	80053a0 <HAL_TIM_ConfigClockSource>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002102:	f7ff fce7 	bl	8001ad4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002106:	4828      	ldr	r0, [pc, #160]	; (80021a8 <MX_TIM8_Init+0x138>)
 8002108:	f002 fdcf 	bl	8004caa <HAL_TIM_PWM_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002112:	f7ff fcdf 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800211e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002122:	4619      	mov	r1, r3
 8002124:	4820      	ldr	r0, [pc, #128]	; (80021a8 <MX_TIM8_Init+0x138>)
 8002126:	f003 feb9 	bl	8005e9c <HAL_TIMEx_MasterConfigSynchronization>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002130:	f7ff fcd0 	bl	8001ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002134:	2360      	movs	r3, #96	; 0x60
 8002136:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002140:	2300      	movs	r3, #0
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002148:	2300      	movs	r3, #0
 800214a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002154:	2200      	movs	r2, #0
 8002156:	4619      	mov	r1, r3
 8002158:	4813      	ldr	r0, [pc, #76]	; (80021a8 <MX_TIM8_Init+0x138>)
 800215a:	f003 f85b 	bl	8005214 <HAL_TIM_PWM_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002164:	f7ff fcb6 	bl	8001ad4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800217c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002180:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4807      	ldr	r0, [pc, #28]	; (80021a8 <MX_TIM8_Init+0x138>)
 800218c:	f003 ff02 	bl	8005f94 <HAL_TIMEx_ConfigBreakDeadTime>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8002196:	f7ff fc9d 	bl	8001ad4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800219a:	4803      	ldr	r0, [pc, #12]	; (80021a8 <MX_TIM8_Init+0x138>)
 800219c:	f000 f8a0 	bl	80022e0 <HAL_TIM_MspPostInit>

}
 80021a0:	bf00      	nop
 80021a2:	3758      	adds	r7, #88	; 0x58
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200003b4 	.word	0x200003b4
 80021ac:	40010400 	.word	0x40010400

080021b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a3f      	ldr	r2, [pc, #252]	; (80022cc <HAL_TIM_Base_MspInit+0x11c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10e      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a3d      	ldr	r2, [pc, #244]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80021ee:	e068      	b.n	80022c2 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d134      	bne.n	8002264 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a33      	ldr	r2, [pc, #204]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002232:	2320      	movs	r3, #32
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002242:	2301      	movs	r3, #1
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4619      	mov	r1, r3
 800224c:	4821      	ldr	r0, [pc, #132]	; (80022d4 <HAL_TIM_Base_MspInit+0x124>)
 800224e:	f001 feaf 	bl	8003fb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	201c      	movs	r0, #28
 8002258:	f001 fae3 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800225c:	201c      	movs	r0, #28
 800225e:	f001 fafc 	bl	800385a <HAL_NVIC_EnableIRQ>
}
 8002262:	e02e      	b.n	80022c2 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_TIM_Base_MspInit+0x128>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d116      	bne.n	800229c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2101      	movs	r1, #1
 800228e:	201d      	movs	r0, #29
 8002290:	f001 fac7 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002294:	201d      	movs	r0, #29
 8002296:	f001 fae0 	bl	800385a <HAL_NVIC_EnableIRQ>
}
 800229a:	e012      	b.n	80022c2 <HAL_TIM_Base_MspInit+0x112>
  else if(tim_baseHandle->Instance==TIM8)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_TIM_Base_MspInit+0x12c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10d      	bne.n	80022c2 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_TIM_Base_MspInit+0x120>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
}
 80022c2:	bf00      	nop
 80022c4:	3730      	adds	r7, #48	; 0x30
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40010000 	.word	0x40010000
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40010400 	.word	0x40010400

080022e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a33      	ldr	r2, [pc, #204]	; (80023cc <HAL_TIM_MspPostInit+0xec>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d11f      	bne.n	8002342 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b32      	ldr	r3, [pc, #200]	; (80023d0 <HAL_TIM_MspPostInit+0xf0>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a31      	ldr	r2, [pc, #196]	; (80023d0 <HAL_TIM_MspPostInit+0xf0>)
 800230c:	f043 0310 	orr.w	r3, r3, #16
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <HAL_TIM_MspPostInit+0xf0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 800231e:	f44f 4394 	mov.w	r3, #18944	; 0x4a00
 8002322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002330:	2301      	movs	r3, #1
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4619      	mov	r1, r3
 800233a:	4826      	ldr	r0, [pc, #152]	; (80023d4 <HAL_TIM_MspPostInit+0xf4>)
 800233c:	f001 fe38 	bl	8003fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002340:	e040      	b.n	80023c4 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <HAL_TIM_MspPostInit+0xf8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d13b      	bne.n	80023c4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <HAL_TIM_MspPostInit+0xf0>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <HAL_TIM_MspPostInit+0xf0>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6313      	str	r3, [r2, #48]	; 0x30
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <HAL_TIM_MspPostInit+0xf0>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_TIM_MspPostInit+0xf0>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	4a17      	ldr	r2, [pc, #92]	; (80023d0 <HAL_TIM_MspPostInit+0xf0>)
 8002372:	f043 0304 	orr.w	r3, r3, #4
 8002376:	6313      	str	r3, [r2, #48]	; 0x30
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_TIM_MspPostInit+0xf0>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	2302      	movs	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002394:	2303      	movs	r3, #3
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	4619      	mov	r1, r3
 800239e:	480f      	ldr	r0, [pc, #60]	; (80023dc <HAL_TIM_MspPostInit+0xfc>)
 80023a0:	f001 fe06 	bl	8003fb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023a4:	2340      	movs	r3, #64	; 0x40
 80023a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023b4:	2303      	movs	r3, #3
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4619      	mov	r1, r3
 80023be:	4808      	ldr	r0, [pc, #32]	; (80023e0 <HAL_TIM_MspPostInit+0x100>)
 80023c0:	f001 fdf6 	bl	8003fb0 <HAL_GPIO_Init>
}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010400 	.word	0x40010400
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020800 	.word	0x40020800

080023e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <MX_USART1_UART_Init+0x50>)
 80023ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 80023f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 800240a:	220c      	movs	r2, #12
 800240c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <MX_USART1_UART_Init+0x4c>)
 800241c:	f003 fe45 	bl	80060aa <HAL_UART_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002426:	f7ff fb55 	bl	8001ad4 <Error_Handler>
  }

}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200004b4 	.word	0x200004b4
 8002434:	40011000 	.word	0x40011000

08002438 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_UART_MspInit+0x94>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d134      	bne.n	80024c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_UART_MspInit+0x98>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_UART_MspInit+0x98>)
 8002464:	f043 0310 	orr.w	r3, r3, #16
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_UART_MspInit+0x98>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_UART_MspInit+0x98>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_UART_MspInit+0x98>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_UART_MspInit+0x98>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002492:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024a4:	2307      	movs	r3, #7
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	4809      	ldr	r0, [pc, #36]	; (80024d4 <HAL_UART_MspInit+0x9c>)
 80024b0:	f001 fd7e 	bl	8003fb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	2025      	movs	r0, #37	; 0x25
 80024ba:	f001 f9b2 	bl	8003822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024be:	2025      	movs	r0, #37	; 0x25
 80024c0:	f001 f9cb 	bl	800385a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024c4:	bf00      	nop
 80024c6:	3728      	adds	r7, #40	; 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000

080024d8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80024e0:	1d39      	adds	r1, r7, #4
 80024e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e6:	2201      	movs	r2, #1
 80024e8:	4803      	ldr	r0, [pc, #12]	; (80024f8 <__io_putchar+0x20>)
 80024ea:	f003 fe2b 	bl	8006144 <HAL_UART_Transmit>
  return ch;
 80024ee:	687b      	ldr	r3, [r7, #4]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200004b4 	.word	0x200004b4

080024fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002534 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002500:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002502:	e003      	b.n	800250c <LoopCopyDataInit>

08002504 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002506:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002508:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800250a:	3104      	adds	r1, #4

0800250c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800250c:	480b      	ldr	r0, [pc, #44]	; (800253c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800250e:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002510:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002512:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002514:	d3f6      	bcc.n	8002504 <CopyDataInit>
  ldr  r2, =_sbss
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002518:	e002      	b.n	8002520 <LoopFillZerobss>

0800251a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800251a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800251c:	f842 3b04 	str.w	r3, [r2], #4

08002520 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002522:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002524:	d3f9      	bcc.n	800251a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002526:	f7ff fc17 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800252a:	f004 fcfb 	bl	8006f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800252e:	f7fe fe93 	bl	8001258 <main>
  bx  lr    
 8002532:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002534:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002538:	08009e18 	.word	0x08009e18
  ldr  r0, =_sdata
 800253c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002540:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8002544:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8002548:	20001464 	.word	0x20001464

0800254c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800254c:	e7fe      	b.n	800254c <ADC_IRQHandler>
	...

08002550 <HAL_ADC_ConvCpltCallback>:
uint32_t ADC_Value[Sample_Num][Channel_Num];
uint8_t Dma_DataDeal_Flag = 0;
float ADC_Value_Buffer[Sample_Num][Channel_Num];
float ADC_ValueAverage[Channel_Num];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

	if(Dma_DataDeal_Flag == 0) {
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <HAL_ADC_ConvCpltCallback+0x98>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d13a      	bne.n	80025d6 <HAL_ADC_ConvCpltCallback+0x86>
		//Dma_DataDeal_Flag = 0;

		for(int x = 0; x < Sample_Num; x++) {
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e031      	b.n	80025ca <HAL_ADC_ConvCpltCallback+0x7a>
			for(int y = 0; y < Channel_Num; y++) {
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	e028      	b.n	80025be <HAL_ADC_ConvCpltCallback+0x6e>
				ADC_Value_Buffer[x][y] = (float)ADC_Value[x][y] / 4096 * 3.3;
 800256c:	491f      	ldr	r1, [pc, #124]	; (80025ec <HAL_ADC_ConvCpltCallback+0x9c>)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	005a      	lsls	r2, r3, #1
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4413      	add	r3, r2
 8002576:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002582:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80025f0 <HAL_ADC_ConvCpltCallback+0xa0>
 8002586:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800258a:	ee16 0a90 	vmov	r0, s13
 800258e:	f7fd ffdb 	bl	8000548 <__aeabi_f2d>
 8002592:	a313      	add	r3, pc, #76	; (adr r3, 80025e0 <HAL_ADC_ConvCpltCallback+0x90>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	f7fe f82e 	bl	80005f8 <__aeabi_dmul>
 800259c:	4603      	mov	r3, r0
 800259e:	460c      	mov	r4, r1
 80025a0:	4618      	mov	r0, r3
 80025a2:	4621      	mov	r1, r4
 80025a4:	f7fe fb00 	bl	8000ba8 <__aeabi_d2f>
 80025a8:	4912      	ldr	r1, [pc, #72]	; (80025f4 <HAL_ADC_ConvCpltCallback+0xa4>)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	005a      	lsls	r2, r3, #1
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	6018      	str	r0, [r3, #0]
			for(int y = 0; y < Channel_Num; y++) {
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	3301      	adds	r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	ddd3      	ble.n	800256c <HAL_ADC_ConvCpltCallback+0x1c>
		for(int x = 0; x < Sample_Num; x++) {
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3301      	adds	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2be8      	cmp	r3, #232	; 0xe8
 80025ce:	ddca      	ble.n	8002566 <HAL_ADC_ConvCpltCallback+0x16>
			}
		}

		Dma_DataDeal_Flag = 1;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_ADC_ConvCpltCallback+0x98>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
	}
}
 80025d6:	bf00      	nop
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd90      	pop	{r4, r7, pc}
 80025de:	bf00      	nop
 80025e0:	66666666 	.word	0x66666666
 80025e4:	400a6666 	.word	0x400a6666
 80025e8:	20000228 	.word	0x20000228
 80025ec:	200004fc 	.word	0x200004fc
 80025f0:	45800000 	.word	0x45800000
 80025f4:	20000c44 	.word	0x20000c44

080025f8 <Update_Data>:

void Update_Data(void) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
	//while(1) {
		if(Dma_DataDeal_Flag == 1) {
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <Update_Data+0x1c>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d104      	bne.n	800260e <Update_Data+0x16>
			//Dma_DataDeal_Flag  = 0;
			Data_Fliter();
 8002604:	f000 f808 	bl	8002618 <Data_Fliter>
			Dma_DataDeal_Flag = 0;
 8002608:	4b02      	ldr	r3, [pc, #8]	; (8002614 <Update_Data+0x1c>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
			//break;
		}
	//}
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000228 	.word	0x20000228

08002618 <Data_Fliter>:

void Data_Fliter(void) {
 8002618:	b480      	push	{r7}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
	for(int l=0; l<Channel_Num; l++) {
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e053      	b.n	80026cc <Data_Fliter+0xb4>
		for(int i=0; i<Sample_Num-1; i++) { // 冒泡排序
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e04a      	b.n	80026c0 <Data_Fliter+0xa8>
			for(int j=0; j<Sample_Num-i; j++) {
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e03e      	b.n	80026ae <Data_Fliter+0x96>
				if(ADC_Value_Buffer[j][l] > ADC_Value_Buffer[j+1][l]) {
 8002630:	4943      	ldr	r1, [pc, #268]	; (8002740 <Data_Fliter+0x128>)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005a      	lsls	r2, r3, #1
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	ed93 7a00 	vldr	s14, [r3]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	493e      	ldr	r1, [pc, #248]	; (8002740 <Data_Fliter+0x128>)
 8002648:	005a      	lsls	r2, r3, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265e:	dd23      	ble.n	80026a8 <Data_Fliter+0x90>
					float tmp = ADC_Value_Buffer[j][l];
 8002660:	4937      	ldr	r1, [pc, #220]	; (8002740 <Data_Fliter+0x128>)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	005a      	lsls	r2, r3, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	607b      	str	r3, [r7, #4]
					ADC_Value_Buffer[j][l] = ADC_Value_Buffer[j+1][l];
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	4932      	ldr	r1, [pc, #200]	; (8002740 <Data_Fliter+0x128>)
 8002678:	005a      	lsls	r2, r3, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	482e      	ldr	r0, [pc, #184]	; (8002740 <Data_Fliter+0x128>)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	0059      	lsls	r1, r3, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	440b      	add	r3, r1
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4403      	add	r3, r0
 8002692:	601a      	str	r2, [r3, #0]
					ADC_Value_Buffer[j+1][l] = tmp;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3301      	adds	r3, #1
 8002698:	4929      	ldr	r1, [pc, #164]	; (8002740 <Data_Fliter+0x128>)
 800269a:	005a      	lsls	r2, r3, #1
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	601a      	str	r2, [r3, #0]
			for(int j=0; j<Sample_Num-i; j++) {
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	f1c3 03e9 	rsb	r3, r3, #233	; 0xe9
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	dbba      	blt.n	8002630 <Data_Fliter+0x18>
		for(int i=0; i<Sample_Num-1; i++) { // 冒泡排序
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	3301      	adds	r3, #1
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2be7      	cmp	r3, #231	; 0xe7
 80026c4:	ddb1      	ble.n	800262a <Data_Fliter+0x12>
	for(int l=0; l<Channel_Num; l++) {
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3301      	adds	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	dda8      	ble.n	8002624 <Data_Fliter+0xc>
				}
		  	}
		}
	}
//然后取排序后中间部分的值求和平均滤波
	for(int l=0; l<Channel_Num; l++) {
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	e029      	b.n	800272c <Data_Fliter+0x114>
		float Sum = 0;
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
		for(int i=Sample_Num/2-25; i<Sample_Num/2+25; i++) {	//取中间值算平均值
 80026de:	235b      	movs	r3, #91	; 0x5b
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	e011      	b.n	8002708 <Data_Fliter+0xf0>
			Sum += ADC_Value_Buffer[i][l];
 80026e4:	4916      	ldr	r1, [pc, #88]	; (8002740 <Data_Fliter+0x128>)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	005a      	lsls	r2, r3, #1
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80026fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fe:	edc7 7a03 	vstr	s15, [r7, #12]
		for(int i=Sample_Num/2-25; i<Sample_Num/2+25; i++) {	//取中间值算平均值
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3301      	adds	r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b8c      	cmp	r3, #140	; 0x8c
 800270c:	ddea      	ble.n	80026e4 <Data_Fliter+0xcc>
		}
		ADC_ValueAverage[l] = Sum/50;
 800270e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002712:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002744 <Data_Fliter+0x12c>
 8002716:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800271a:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <Data_Fliter+0x130>)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	edc3 7a00 	vstr	s15, [r3]
	for(int l=0; l<Channel_Num; l++) {
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	3301      	adds	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b01      	cmp	r3, #1
 8002730:	ddd2      	ble.n	80026d8 <Data_Fliter+0xc0>
	}
}
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000c44 	.word	0x20000c44
 8002744:	42480000 	.word	0x42480000
 8002748:	200004f4 	.word	0x200004f4

0800274c <HAL_TIM_PeriodElapsedCallback>:

uint32_t Times = 0, Times_Buffer = 0;

// 中断服务函数里面会自动调用这个回调函数  这个是定时器更新中断中处理的函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)	// 判断是定时器5发生中断
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d141      	bne.n	80027e2 <HAL_TIM_PeriodElapsedCallback+0x96>
  {
    if ((TIM5CH1_CAPTURE_STA & 0x80) == 0) // 还未成功捕获
 800275e:	4b26      	ldr	r3, [pc, #152]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b25b      	sxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	db3c      	blt.n	80027e2 <HAL_TIM_PeriodElapsedCallback+0x96>
    {
     // if (TIM5CH1_CAPTURE_STA & 0x40)		   // 捕获到高电平
      //{
        if ( (TIM5CH1_CAPTURE_STA & 0x3f) == 0x3f )		// 如果高电平太长  做溢出处理
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002770:	2b3f      	cmp	r3, #63	; 0x3f
 8002772:	d130      	bne.n	80027d6 <HAL_TIM_PeriodElapsedCallback+0x8a>
        {
        	Cycle = 0x3f;
 8002774:	4b21      	ldr	r3, [pc, #132]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002776:	223f      	movs	r2, #63	; 0x3f
 8002778:	601a      	str	r2, [r3, #0]
        	Cycle *= 0xffff;				// Total Overflow Time(总的溢出时间)
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002786:	6013      	str	r3, [r2, #0]
        	TIM5CH1_CAPTURE_STA = 0;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
        	DownEdgeFlag = 0;
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
        	__HAL_TIM_DISABLE(&htim2);
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	f241 1311 	movw	r3, #4369	; 0x1111
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10f      	bne.n	80027c4 <HAL_TIM_PeriodElapsedCallback+0x78>
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a1a      	ldr	r2, [r3, #32]
 80027aa:	f240 4344 	movw	r3, #1092	; 0x444
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_PeriodElapsedCallback+0x78>
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
        	__HAL_TIM_ENABLE(&htim2);
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e005      	b.n	80027e2 <HAL_TIM_PeriodElapsedCallback+0x96>
          //TIM5CH1_CAPTURE_STA |= 0x80;// 标记成功捕获了一次
          //TIM5CH1_CAPTURE_VAL = 0xffffffff;
        }
        else
        {
          TIM5CH1_CAPTURE_STA++;		// 若没有溢出, 就只让TIM5CH1_CAPTURE_STA自加就ok
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80027e0:	701a      	strb	r2, [r3, #0]
        }
      //}
    }
  }

  if(htim->Instance == TIM3) {
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a08      	ldr	r2, [pc, #32]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0xa4>
	  Motor_Contorl();
 80027ec:	f7fe ff9a 	bl	8001724 <Motor_Contorl>

	  //Times_Buffer = Times;
	  //Times = 0;
  }
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000229 	.word	0x20000229
 80027fc:	20000020 	.word	0x20000020
 8002800:	2000022a 	.word	0x2000022a
 8002804:	20000474 	.word	0x20000474
 8002808:	40000400 	.word	0x40000400

0800280c <HAL_TIM_IC_CaptureCallback>:

// 定时器输入捕获中断处理回调函数，该函数在 HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) 中会被调用


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ( (TIM5CH1_CAPTURE_STA & 0x80) == 0 )	// 还未成功捕获
 8002814:	4b57      	ldr	r3, [pc, #348]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x168>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	b25b      	sxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	f2c0 80a6 	blt.w	800296c <HAL_TIM_IC_CaptureCallback+0x160>
  {
    if (TIM5CH1_CAPTURE_STA & 0x40)			// 捕获到一个下降沿
 8002820:	4b54      	ldr	r3, [pc, #336]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x168>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d034      	beq.n	8002896 <HAL_TIM_IC_CaptureCallback+0x8a>
    {
      //TIM5CH1_CAPTURE_STA |= 0x80;		// 标记成功捕获到一次高电平脉宽
      TIM5CH1_CAPTURE_VAL = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);	// 获取当前的捕获值. 即CCRx2
 800282c:	2100      	movs	r1, #0
 800282e:	4852      	ldr	r0, [pc, #328]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002830:	f002 fe6e 	bl	8005510 <HAL_TIM_ReadCapturedValue>
 8002834:	4602      	mov	r2, r0
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_TIM_IC_CaptureCallback+0x170>)
 8002838:	601a      	str	r2, [r3, #0]

     // if (TIM5CH1_CAPTURE_STA & 0x80)   // 如果捕获完成
      	   // {
      Width = TIM5CH1_CAPTURE_STA & 0x3f;
 800283a:	4b4e      	ldr	r3, [pc, #312]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x168>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002842:	4a4f      	ldr	r2, [pc, #316]	; (8002980 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002844:	6013      	str	r3, [r2, #0]
      Width *= 0xffff;				// Total Overflow Time(总的溢出时间)
 8002846:	4b4e      	ldr	r3, [pc, #312]	; (8002980 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002852:	6013      	str	r3, [r2, #0]
      Width += TIM5CH1_CAPTURE_VAL + 3;    // Get Total High Level Time(获取总的高电平时长)
 8002854:	4b49      	ldr	r3, [pc, #292]	; (800297c <HAL_TIM_IC_CaptureCallback+0x170>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b49      	ldr	r3, [pc, #292]	; (8002980 <HAL_TIM_IC_CaptureCallback+0x174>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4413      	add	r3, r2
 800285e:	3303      	adds	r3, #3
 8002860:	4a47      	ldr	r2, [pc, #284]	; (8002980 <HAL_TIM_IC_CaptureCallback+0x174>)
 8002862:	6013      	str	r3, [r2, #0]
      	      //  printf("HIGH: %f ms\r\n", (float)temp/1000); // Print Total High Level Time(打印总的高电平时长)
      //TIM5CH1_CAPTURE_STA = 0;			    // Clear Capture State , Open The Next Capture(清除捕获状态，打开下一次捕获)
      	   //}
      TIM5CH1_CAPTURE_STA &= 0xbf;
 8002864:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x168>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x168>)
 8002870:	701a      	strb	r2, [r3, #0]
      DownEdgeFlag = 1;
 8002872:	4b44      	ldr	r3, [pc, #272]	; (8002984 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]


      TIM_RESET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1);						// 清除原来的设置
 8002878:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	4b3e      	ldr	r3, [pc, #248]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 020a 	bic.w	r2, r2, #10
 8002886:	621a      	str	r2, [r3, #32]
      TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);	// 配置TIM5通道1上升沿捕获
 8002888:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6a12      	ldr	r2, [r2, #32]
 8002892:	621a      	str	r2, [r3, #32]
    	}


    }
  }
}
 8002894:	e06a      	b.n	800296c <HAL_TIM_IC_CaptureCallback+0x160>
    	if(DownEdgeFlag == 1) {
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <HAL_TIM_IC_CaptureCallback+0x178>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d125      	bne.n	80028ea <HAL_TIM_IC_CaptureCallback+0xde>
    		TIM5CH1_CAPTURE_VAL = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800289e:	2100      	movs	r1, #0
 80028a0:	4835      	ldr	r0, [pc, #212]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80028a2:	f002 fe35 	bl	8005510 <HAL_TIM_ReadCapturedValue>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b34      	ldr	r3, [pc, #208]	; (800297c <HAL_TIM_IC_CaptureCallback+0x170>)
 80028aa:	601a      	str	r2, [r3, #0]
    		Cycle = TIM5CH1_CAPTURE_STA & 0x3f;
 80028ac:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x168>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b4:	4a34      	ldr	r2, [pc, #208]	; (8002988 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80028b6:	6013      	str	r3, [r2, #0]
    		Cycle *= 0xffff;				// Total Overflow Time(总的溢出时间)
 80028b8:	4b33      	ldr	r3, [pc, #204]	; (8002988 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4613      	mov	r3, r2
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	4a31      	ldr	r2, [pc, #196]	; (8002988 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80028c4:	6013      	str	r3, [r2, #0]
    		Cycle += TIM5CH1_CAPTURE_VAL + 3;    // Get Total High Level Time(获取总的高电平时长)
 80028c6:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_TIM_IC_CaptureCallback+0x170>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	3303      	adds	r3, #3
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80028d4:	6013      	str	r3, [r2, #0]
    		TIM5CH1_CAPTURE_STA = 0;
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x168>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
    		TIM5CH1_CAPTURE_VAL = 0;
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <HAL_TIM_IC_CaptureCallback+0x170>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
    		DownEdgeFlag = 0;
 80028e2:	4b28      	ldr	r3, [pc, #160]	; (8002984 <HAL_TIM_IC_CaptureCallback+0x178>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
}
 80028e8:	e040      	b.n	800296c <HAL_TIM_IC_CaptureCallback+0x160>
      TIM5CH1_CAPTURE_STA = 0;	// 清空自定义的状态寄存器
 80028ea:	4b22      	ldr	r3, [pc, #136]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x168>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
      TIM5CH1_CAPTURE_VAL = 0;	// 清空捕获值
 80028f0:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_TIM_IC_CaptureCallback+0x170>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
      TIM5CH1_CAPTURE_STA |= 0x40;// 标记捕获到了上升沿
 80028f6:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x168>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x168>)
 8002902:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_DISABLE(&htim2);	//关闭定时器5
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6a1a      	ldr	r2, [r3, #32]
 800290a:	f241 1311 	movw	r3, #4369	; 0x1111
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10f      	bne.n	8002934 <HAL_TIM_IC_CaptureCallback+0x128>
 8002914:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a1a      	ldr	r2, [r3, #32]
 800291a:	f240 4344 	movw	r3, #1092	; 0x444
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <HAL_TIM_IC_CaptureCallback+0x128>
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(&htim2,0);
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2200      	movs	r2, #0
 800293a:	625a      	str	r2, [r3, #36]	; 0x24
      TIM_RESET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1);   //一定要先清除原来的设置！！
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6a1a      	ldr	r2, [r3, #32]
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 020a 	bic.w	r2, r2, #10
 800294a:	621a      	str	r2, [r3, #32]
      TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_ICPOLARITY_FALLING);//定时器5通道1设置为下降沿捕获
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0202 	orr.w	r2, r2, #2
 800295a:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE(&htim2);//使能定时器5
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000229 	.word	0x20000229
 8002978:	20000474 	.word	0x20000474
 800297c:	2000138c 	.word	0x2000138c
 8002980:	2000022c 	.word	0x2000022c
 8002984:	2000022a 	.word	0x2000022a
 8002988:	20000020 	.word	0x20000020

0800298c <PID_Calc>:
float temp,dInput;
float error[20];


float PID_Calc(float Input,float setpoint)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	ed87 0a01 	vstr	s0, [r7, #4]
 8002996:	edc7 0a00 	vstr	s1, [r7]


	float Pid_Out = 0;
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
	static float Bias,Last_bias;
	Bias=setpoint-Input;                                  //计算偏差
 80029a0:	ed97 7a00 	vldr	s14, [r7]
 80029a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <PID_Calc+0x74>)
 80029ae:	edc3 7a00 	vstr	s15, [r3]
	Pid_Out=kp*(Bias-Last_bias)+ki*Bias;   //增量式PI控制器
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <PID_Calc+0x74>)
 80029b4:	ed93 7a00 	vldr	s14, [r3]
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <PID_Calc+0x78>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <PID_Calc+0x7c>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <PID_Calc+0x80>)
 80029ce:	edd3 6a00 	vldr	s13, [r3]
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <PID_Calc+0x74>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e0:	edc7 7a03 	vstr	s15, [r7, #12]
	Last_bias=Bias;	                                     //保存上一次偏差
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <PID_Calc+0x74>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <PID_Calc+0x78>)
 80029ea:	6013      	str	r3, [r2, #0]
	return Pid_Out;                                           //增量输出
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	ee07 3a90 	vmov	s15, r3
			left = 0;
	}
	
	return temp;
	*/
}
 80029f2:	eeb0 0a67 	vmov.f32	s0, s15
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	20000230 	.word	0x20000230
 8002a04:	20000234 	.word	0x20000234
 8002a08:	20001454 	.word	0x20001454
 8002a0c:	200013a4 	.word	0x200013a4

08002a10 <Set_PID_Parameter>:

void Set_PID_Parameter(float KP,float KI,float KD)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a1e:	ed87 1a01 	vstr	s2, [r7, #4]
    kp = KP;
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <Set_PID_Parameter+0x30>)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6013      	str	r3, [r2, #0]
    ki = KI;
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <Set_PID_Parameter+0x34>)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	6013      	str	r3, [r2, #0]
    kd = KD;
 8002a2e:	4a06      	ldr	r2, [pc, #24]	; (8002a48 <Set_PID_Parameter+0x38>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	20001454 	.word	0x20001454
 8002a44:	200013a4 	.word	0x200013a4
 8002a48:	20001394 	.word	0x20001394

08002a4c <Set_PID_Parameter1>:

	return temp1;
}

void Set_PID_Parameter1(float KP,float KI,float KD)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a56:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a5a:	ed87 1a01 	vstr	s2, [r7, #4]
    kp1 = KP;
 8002a5e:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <Set_PID_Parameter1+0x30>)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6013      	str	r3, [r2, #0]
    ki1 = KI;
 8002a64:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <Set_PID_Parameter1+0x34>)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6013      	str	r3, [r2, #0]
    kd1 = KD;
 8002a6a:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <Set_PID_Parameter1+0x38>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	200013a8 	.word	0x200013a8
 8002a80:	200013ac 	.word	0x200013ac
 8002a84:	20001400 	.word	0x20001400

08002a88 <Server_Init>:
uint8_t Rx_Line_Flag = 0;
uint8_t Wifi_Get_Command_Flag = 0;



void Server_Init(void) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8002a8c:	2032      	movs	r0, #50	; 0x32
 8002a8e:	f000 f9e1 	bl	8002e54 <HAL_Delay>
	printf("AT+RST\r\n");
 8002a92:	481a      	ldr	r0, [pc, #104]	; (8002afc <Server_Init+0x74>)
 8002a94:	f004 ff42 	bl	800791c <puts>
	HAL_Delay(300);
 8002a98:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002a9c:	f000 f9da 	bl	8002e54 <HAL_Delay>
	printf("AT+CWMODE=2\r\n");
 8002aa0:	4817      	ldr	r0, [pc, #92]	; (8002b00 <Server_Init+0x78>)
 8002aa2:	f004 ff3b 	bl	800791c <puts>
	HAL_Delay(100);
 8002aa6:	2064      	movs	r0, #100	; 0x64
 8002aa8:	f000 f9d4 	bl	8002e54 <HAL_Delay>
	printf("AT+CWSAP=\"ESP8266_HHHH\",\"12345678\",3,4\r\n");
 8002aac:	4815      	ldr	r0, [pc, #84]	; (8002b04 <Server_Init+0x7c>)
 8002aae:	f004 ff35 	bl	800791c <puts>

	HAL_Delay(100);
 8002ab2:	2064      	movs	r0, #100	; 0x64
 8002ab4:	f000 f9ce 	bl	8002e54 <HAL_Delay>
	printf("AT+RST\r\n");
 8002ab8:	4810      	ldr	r0, [pc, #64]	; (8002afc <Server_Init+0x74>)
 8002aba:	f004 ff2f 	bl	800791c <puts>
	HAL_Delay(300);
 8002abe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ac2:	f000 f9c7 	bl	8002e54 <HAL_Delay>
	printf("AT+CWMODE=2\r\n");
 8002ac6:	480e      	ldr	r0, [pc, #56]	; (8002b00 <Server_Init+0x78>)
 8002ac8:	f004 ff28 	bl	800791c <puts>
	HAL_Delay(100);
 8002acc:	2064      	movs	r0, #100	; 0x64
 8002ace:	f000 f9c1 	bl	8002e54 <HAL_Delay>
	printf("AT+CIPMUX=1\r\n");
 8002ad2:	480d      	ldr	r0, [pc, #52]	; (8002b08 <Server_Init+0x80>)
 8002ad4:	f004 ff22 	bl	800791c <puts>
	HAL_Delay(100);
 8002ad8:	2064      	movs	r0, #100	; 0x64
 8002ada:	f000 f9bb 	bl	8002e54 <HAL_Delay>
	printf("AT+CIPSERVER=1,8080\r\n");
 8002ade:	480b      	ldr	r0, [pc, #44]	; (8002b0c <Server_Init+0x84>)
 8002ae0:	f004 ff1c 	bl	800791c <puts>
	HAL_Delay(100);
 8002ae4:	2064      	movs	r0, #100	; 0x64
 8002ae6:	f000 f9b5 	bl	8002e54 <HAL_Delay>
	printf("AT+CIPSTO=0\r\n");
 8002aea:	4809      	ldr	r0, [pc, #36]	; (8002b10 <Server_Init+0x88>)
 8002aec:	f004 ff16 	bl	800791c <puts>
	HAL_Delay(100);
 8002af0:	2064      	movs	r0, #100	; 0x64
 8002af2:	f000 f9af 	bl	8002e54 <HAL_Delay>
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	08009a88 	.word	0x08009a88
 8002b00:	08009a90 	.word	0x08009a90
 8002b04:	08009aa0 	.word	0x08009aa0
 8002b08:	08009ac8 	.word	0x08009ac8
 8002b0c:	08009ad8 	.word	0x08009ad8
 8002b10:	08009af0 	.word	0x08009af0

08002b14 <Server_SentTo_Client>:

void Server_SentTo_Client(uint8_t *Str) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 8002b1c:	2032      	movs	r0, #50	; 0x32
 8002b1e:	f000 f999 	bl	8002e54 <HAL_Delay>
	printf("AT+CIPSEND=0,%d\r\n", Strlen(Str) + 2);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f818 	bl	8002b58 <Strlen>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	3302      	adds	r3, #2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4808      	ldr	r0, [pc, #32]	; (8002b50 <Server_SentTo_Client+0x3c>)
 8002b30:	f004 fe80 	bl	8007834 <iprintf>
	HAL_Delay(50);
 8002b34:	2032      	movs	r0, #50	; 0x32
 8002b36:	f000 f98d 	bl	8002e54 <HAL_Delay>
	printf("%s\r\n", Str);
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4805      	ldr	r0, [pc, #20]	; (8002b54 <Server_SentTo_Client+0x40>)
 8002b3e:	f004 fe79 	bl	8007834 <iprintf>
	HAL_Delay(50);
 8002b42:	2032      	movs	r0, #50	; 0x32
 8002b44:	f000 f986 	bl	8002e54 <HAL_Delay>
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	08009b00 	.word	0x08009b00
 8002b54:	08009b14 	.word	0x08009b14

08002b58 <Strlen>:

 uint8_t Strlen(uint8_t *s) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	 for(uint8_t i = 0; i < 256; i++) {
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <Strlen+0x1c>
			 return i;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	e003      	b.n	8002b7c <Strlen+0x24>
	 for(uint8_t i = 0; i < 256; i++) {
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	3301      	adds	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 8002b7a:	e7f3      	b.n	8002b64 <Strlen+0xc>
		 }
	 }
 }
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <Strcpy>:
 void Strcpy(uint8_t *s1, uint8_t *s2) {
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
	 uint8_t i;
	 for(i = 0; s2[i] != '\0'; i++) {
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e00a      	b.n	8002bae <Strcpy+0x26>
		 s1[i] = s2[i];
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	441a      	add	r2, r3
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	440b      	add	r3, r1
 8002ba4:	7812      	ldrb	r2, [r2, #0]
 8002ba6:	701a      	strb	r2, [r3, #0]
	 for(i = 0; s2[i] != '\0'; i++) {
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	3301      	adds	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ee      	bne.n	8002b98 <Strcpy+0x10>
	 }
	 s1[i] = '\0';
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
 }
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <Strcmp>:
uint8_t Strcmp(uint8_t *s1, uint8_t *s2) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
	uint8_t i;
		 for(i = 0; s2[i] != '\0'; i++) {
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e00e      	b.n	8002bfe <Strcmp+0x2e>
			 if(s1[i] != s2[i]) {
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	6839      	ldr	r1, [r7, #0]
 8002bec:	440b      	add	r3, r1
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <Strcmp+0x28>
				 return 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e011      	b.n	8002c1c <Strcmp+0x4c>
		 for(i = 0; s2[i] != '\0'; i++) {
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1ea      	bne.n	8002be0 <Strcmp+0x10>
			 }
		 }
		 if(s1[i] == '\0') {
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <Strcmp+0x4a>
			 return 1;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <Strcmp+0x4c>
		 }
		 return 0;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_UART_RxCpltCallback>:

//UART接收中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_UART_RxCpltCallback+0x88>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d134      	bne.n	8002ca6 <HAL_UART_RxCpltCallback+0x7e>
		if(Rx_Line_Flag == 0) {
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <HAL_UART_RxCpltCallback+0x8c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d12b      	bne.n	8002c9c <HAL_UART_RxCpltCallback+0x74>
			if(Uart1_Rx_Char == '\n') {
 8002c44:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <HAL_UART_RxCpltCallback+0x90>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b0a      	cmp	r3, #10
 8002c4a:	d11a      	bne.n	8002c82 <HAL_UART_RxCpltCallback+0x5a>
				Uart1_Rx_Buffer[Rx_Buffer_Size] = '\0';
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_UART_RxCpltCallback+0x94>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_UART_RxCpltCallback+0x98>)
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]
				//if(Rx_Buffer_Size >= 5) {
					Rx_Line_Flag = 1;
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <HAL_UART_RxCpltCallback+0x8c>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
				//}

				if(Rx_Buffer_Size == 1) {
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <HAL_UART_RxCpltCallback+0x94>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <HAL_UART_RxCpltCallback+0x44>
					Rx_Line_Flag = 0;
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_UART_RxCpltCallback+0x8c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
				}

				if(Rx_Buffer_Size == 0){
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_UART_RxCpltCallback+0x94>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <HAL_UART_RxCpltCallback+0x52>
					Rx_Line_Flag = 0;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <HAL_UART_RxCpltCallback+0x8c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
				}
				Rx_Buffer_Size = 0;
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_UART_RxCpltCallback+0x94>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e00c      	b.n	8002c9c <HAL_UART_RxCpltCallback+0x74>
			}else {
				Uart1_Rx_Buffer[Rx_Buffer_Size] = Uart1_Rx_Char;
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <HAL_UART_RxCpltCallback+0x94>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_UART_RxCpltCallback+0x90>)
 8002c8a:	7819      	ldrb	r1, [r3, #0]
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <HAL_UART_RxCpltCallback+0x98>)
 8002c8e:	5499      	strb	r1, [r3, r2]
				Rx_Buffer_Size++;
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_UART_RxCpltCallback+0x94>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	3301      	adds	r3, #1
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_UART_RxCpltCallback+0x94>)
 8002c9a:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	4906      	ldr	r1, [pc, #24]	; (8002cb8 <HAL_UART_RxCpltCallback+0x90>)
 8002ca0:	4803      	ldr	r0, [pc, #12]	; (8002cb0 <HAL_UART_RxCpltCallback+0x88>)
 8002ca2:	f003 fae8 	bl	8006276 <HAL_UART_Receive_IT>
	}
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	200004b4 	.word	0x200004b4
 8002cb4:	20000301 	.word	0x20000301
 8002cb8:	20001458 	.word	0x20001458
 8002cbc:	20000300 	.word	0x20000300
 8002cc0:	20000238 	.word	0x20000238

08002cc4 <Tcp_DataAccept>:

void Tcp_DataAccept(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0

	if(Wifi_Get_Command_Flag == 1) {
 8002cca:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <Tcp_DataAccept+0x98>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d104      	bne.n	8002cdc <Tcp_DataAccept+0x18>
			Tcp_DataDeal();
 8002cd2:	f7fe fdd1 	bl	8001878 <Tcp_DataDeal>
			Wifi_Get_Command_Flag = 0;
 8002cd6:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <Tcp_DataAccept+0x98>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
		  }
		  if(Rx_Line_Flag == 1) {
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <Tcp_DataAccept+0x9c>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d137      	bne.n	8002d54 <Tcp_DataAccept+0x90>
			  if(Wifi_Get_Command_Flag == 0) {
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <Tcp_DataAccept+0x98>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d130      	bne.n	8002d4e <Tcp_DataAccept+0x8a>
				  //Server_SentTo_Client(Uart1_Rx_Buffer);
				  Wifi_Command_Buffer[0] = Uart1_Rx_Buffer[0];
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <Tcp_DataAccept+0xa0>)
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <Tcp_DataAccept+0xa4>)
 8002cf2:	701a      	strb	r2, [r3, #0]
		  		  Wifi_Command_Buffer[1] = Uart1_Rx_Buffer[1];
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <Tcp_DataAccept+0xa0>)
 8002cf6:	785a      	ldrb	r2, [r3, #1]
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <Tcp_DataAccept+0xa4>)
 8002cfa:	705a      	strb	r2, [r3, #1]
		  		  Wifi_Command_Buffer[2] = Uart1_Rx_Buffer[2];
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <Tcp_DataAccept+0xa0>)
 8002cfe:	789a      	ldrb	r2, [r3, #2]
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <Tcp_DataAccept+0xa4>)
 8002d02:	709a      	strb	r2, [r3, #2]
		  		  Wifi_Command_Buffer[3] = Uart1_Rx_Buffer[3];
 8002d04:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <Tcp_DataAccept+0xa0>)
 8002d06:	78da      	ldrb	r2, [r3, #3]
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <Tcp_DataAccept+0xa4>)
 8002d0a:	70da      	strb	r2, [r3, #3]
		  		  Wifi_Command_Buffer[4] = '\0';
 8002d0c:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <Tcp_DataAccept+0xa4>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	711a      	strb	r2, [r3, #4]
		  		  if(Strcmp(Wifi_Command_Buffer, "+IPD") == 1) {
 8002d12:	4916      	ldr	r1, [pc, #88]	; (8002d6c <Tcp_DataAccept+0xa8>)
 8002d14:	4814      	ldr	r0, [pc, #80]	; (8002d68 <Tcp_DataAccept+0xa4>)
 8002d16:	f7ff ff5b 	bl	8002bd0 <Strcmp>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d116      	bne.n	8002d4e <Tcp_DataAccept+0x8a>
		  			  //Strcpy(Wifi_Command_Buffer, Uart1_Rx_Buffer);
		  			  Wifi_Get_Command_Flag = 1;
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <Tcp_DataAccept+0x98>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	701a      	strb	r2, [r3, #0]
		  			  for(uint8_t i = 0; ; i++) {
 8002d26:	2300      	movs	r3, #0
 8002d28:	71fb      	strb	r3, [r7, #7]
		  				  if(Uart1_Rx_Buffer[i] == ':') {
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <Tcp_DataAccept+0xa0>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	2b3a      	cmp	r3, #58	; 0x3a
 8002d32:	d108      	bne.n	8002d46 <Tcp_DataAccept+0x82>
		  					  Strcpy(Wifi_Command_Buffer, Uart1_Rx_Buffer + i + 1);
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	3301      	adds	r3, #1
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <Tcp_DataAccept+0xa0>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480a      	ldr	r0, [pc, #40]	; (8002d68 <Tcp_DataAccept+0xa4>)
 8002d40:	f7ff ff22 	bl	8002b88 <Strcpy>
		  					  break;
 8002d44:	e003      	b.n	8002d4e <Tcp_DataAccept+0x8a>
		  			  for(uint8_t i = 0; ; i++) {
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	71fb      	strb	r3, [r7, #7]
		  				  if(Uart1_Rx_Buffer[i] == ':') {
 8002d4c:	e7ed      	b.n	8002d2a <Tcp_DataAccept+0x66>
		  				  }
		  			  }
		  		  }
			  }
			  Rx_Line_Flag = 0;
 8002d4e:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <Tcp_DataAccept+0x9c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
		  }
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000302 	.word	0x20000302
 8002d60:	20000301 	.word	0x20000301
 8002d64:	20000238 	.word	0x20000238
 8002d68:	2000029c 	.word	0x2000029c
 8002d6c:	08009b1c 	.word	0x08009b1c

08002d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d74:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <HAL_Init+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <HAL_Init+0x40>)
 8002d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <HAL_Init+0x40>)
 8002d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <HAL_Init+0x40>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d98:	2003      	movs	r0, #3
 8002d9a:	f000 fd37 	bl	800380c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f000 f808 	bl	8002db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da4:	f7fe fe9e 	bl	8001ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023c00 	.word	0x40023c00

08002db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_InitTick+0x54>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_InitTick+0x58>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fd4f 	bl	8003876 <HAL_SYSTICK_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00e      	b.n	8002e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d80a      	bhi.n	8002dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de8:	2200      	movs	r2, #0
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f000 fd17 	bl	8003822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df4:	4a06      	ldr	r2, [pc, #24]	; (8002e10 <HAL_InitTick+0x5c>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	2000001c 	.word	0x2000001c
 8002e0c:	20000028 	.word	0x20000028
 8002e10:	20000024 	.word	0x20000024

08002e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_IncTick+0x20>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_IncTick+0x24>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <HAL_IncTick+0x24>)
 8002e26:	6013      	str	r3, [r2, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000028 	.word	0x20000028
 8002e38:	2000145c 	.word	0x2000145c

08002e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_GetTick+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	2000145c 	.word	0x2000145c

08002e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff ffee 	bl	8002e3c <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d005      	beq.n	8002e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_Delay+0x40>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e7a:	bf00      	nop
 8002e7c:	f7ff ffde 	bl	8002e3c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d8f7      	bhi.n	8002e7c <HAL_Delay+0x28>
  {
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000028 	.word	0x20000028

08002e98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e033      	b.n	8002f16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe f8a6 	bl	8001008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d118      	bne.n	8002f08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ede:	f023 0302 	bic.w	r3, r3, #2
 8002ee2:	f043 0202 	orr.w	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa40 	bl	8003370 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f023 0303 	bic.w	r3, r3, #3
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
 8002f06:	e001      	b.n	8002f0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_Start_DMA+0x1e>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e0cc      	b.n	80030d8 <HAL_ADC_Start_DMA+0x1b8>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d018      	beq.n	8002f86 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f64:	4b5e      	ldr	r3, [pc, #376]	; (80030e0 <HAL_ADC_Start_DMA+0x1c0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a5e      	ldr	r2, [pc, #376]	; (80030e4 <HAL_ADC_Start_DMA+0x1c4>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0c9a      	lsrs	r2, r3, #18
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f78:	e002      	b.n	8002f80 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f9      	bne.n	8002f7a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f040 80a0 	bne.w	80030d6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d106      	bne.n	8002fe4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f023 0206 	bic.w	r2, r3, #6
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
 8002fe2:	e002      	b.n	8002fea <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_ADC_Start_DMA+0x1c8>)
 8002ff4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	4a3c      	ldr	r2, [pc, #240]	; (80030ec <HAL_ADC_Start_DMA+0x1cc>)
 8002ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <HAL_ADC_Start_DMA+0x1d0>)
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	4a3a      	ldr	r2, [pc, #232]	; (80030f4 <HAL_ADC_Start_DMA+0x1d4>)
 800300c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003016:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003026:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003036:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	334c      	adds	r3, #76	; 0x4c
 8003042:	4619      	mov	r1, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f000 fcd0 	bl	80039ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2b00      	cmp	r3, #0
 8003056:	d12a      	bne.n	80030ae <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <HAL_ADC_Start_DMA+0x1d8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d015      	beq.n	800308e <HAL_ADC_Start_DMA+0x16e>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a25      	ldr	r2, [pc, #148]	; (80030fc <HAL_ADC_Start_DMA+0x1dc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d105      	bne.n	8003078 <HAL_ADC_Start_DMA+0x158>
 800306c:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <HAL_ADC_Start_DMA+0x1c8>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a20      	ldr	r2, [pc, #128]	; (8003100 <HAL_ADC_Start_DMA+0x1e0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d129      	bne.n	80030d6 <HAL_ADC_Start_DMA+0x1b6>
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_ADC_Start_DMA+0x1c8>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2b0f      	cmp	r3, #15
 800308c:	d823      	bhi.n	80030d6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d11c      	bne.n	80030d6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	e013      	b.n	80030d6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_ADC_Start_DMA+0x1d8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d10e      	bne.n	80030d6 <HAL_ADC_Start_DMA+0x1b6>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030d4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	2000001c 	.word	0x2000001c
 80030e4:	431bde83 	.word	0x431bde83
 80030e8:	40012300 	.word	0x40012300
 80030ec:	08003569 	.word	0x08003569
 80030f0:	08003623 	.word	0x08003623
 80030f4:	0800363f 	.word	0x0800363f
 80030f8:	40012000 	.word	0x40012000
 80030fc:	40012100 	.word	0x40012100
 8003100:	40012200 	.word	0x40012200

08003104 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x1c>
 8003144:	2302      	movs	r3, #2
 8003146:	e105      	b.n	8003354 <HAL_ADC_ConfigChannel+0x228>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b09      	cmp	r3, #9
 8003156:	d925      	bls.n	80031a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68d9      	ldr	r1, [r3, #12]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	3b1e      	subs	r3, #30
 800316e:	2207      	movs	r2, #7
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43da      	mvns	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	400a      	ands	r2, r1
 800317c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68d9      	ldr	r1, [r3, #12]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	4618      	mov	r0, r3
 8003190:	4603      	mov	r3, r0
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4403      	add	r3, r0
 8003196:	3b1e      	subs	r3, #30
 8003198:	409a      	lsls	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	e022      	b.n	80031ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6919      	ldr	r1, [r3, #16]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	2207      	movs	r2, #7
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	400a      	ands	r2, r1
 80031c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6919      	ldr	r1, [r3, #16]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4403      	add	r3, r0
 80031e0:	409a      	lsls	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d824      	bhi.n	800323c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	3b05      	subs	r3, #5
 8003204:	221f      	movs	r2, #31
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43da      	mvns	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	400a      	ands	r2, r1
 8003212:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	4618      	mov	r0, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	3b05      	subs	r3, #5
 800322e:	fa00 f203 	lsl.w	r2, r0, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
 800323a:	e04c      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b0c      	cmp	r3, #12
 8003242:	d824      	bhi.n	800328e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	3b23      	subs	r3, #35	; 0x23
 8003256:	221f      	movs	r2, #31
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43da      	mvns	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	400a      	ands	r2, r1
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	4618      	mov	r0, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	3b23      	subs	r3, #35	; 0x23
 8003280:	fa00 f203 	lsl.w	r2, r0, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
 800328c:	e023      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	3b41      	subs	r3, #65	; 0x41
 80032a0:	221f      	movs	r2, #31
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	400a      	ands	r2, r1
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	3b41      	subs	r3, #65	; 0x41
 80032ca:	fa00 f203 	lsl.w	r2, r0, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_ADC_ConfigChannel+0x234>)
 80032d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a21      	ldr	r2, [pc, #132]	; (8003364 <HAL_ADC_ConfigChannel+0x238>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d109      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x1cc>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b12      	cmp	r3, #18
 80032ea:	d105      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a19      	ldr	r2, [pc, #100]	; (8003364 <HAL_ADC_ConfigChannel+0x238>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d123      	bne.n	800334a <HAL_ADC_ConfigChannel+0x21e>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b10      	cmp	r3, #16
 8003308:	d003      	beq.n	8003312 <HAL_ADC_ConfigChannel+0x1e6>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b11      	cmp	r3, #17
 8003310:	d11b      	bne.n	800334a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b10      	cmp	r3, #16
 8003324:	d111      	bne.n	800334a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_ADC_ConfigChannel+0x23c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a10      	ldr	r2, [pc, #64]	; (800336c <HAL_ADC_ConfigChannel+0x240>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	0c9a      	lsrs	r2, r3, #18
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800333c:	e002      	b.n	8003344 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3b01      	subs	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f9      	bne.n	800333e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40012300 	.word	0x40012300
 8003364:	40012000 	.word	0x40012000
 8003368:	2000001c 	.word	0x2000001c
 800336c:	431bde83 	.word	0x431bde83

08003370 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003378:	4b79      	ldr	r3, [pc, #484]	; (8003560 <ADC_Init+0x1f0>)
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	021a      	lsls	r2, r3, #8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6899      	ldr	r1, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	4a58      	ldr	r2, [pc, #352]	; (8003564 <ADC_Init+0x1f4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d022      	beq.n	800344e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003416:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003438:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6899      	ldr	r1, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	e00f      	b.n	800346e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800345c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800346c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0202 	bic.w	r2, r2, #2
 800347c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6899      	ldr	r1, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7e1b      	ldrb	r3, [r3, #24]
 8003488:	005a      	lsls	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01b      	beq.n	80034d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	3b01      	subs	r3, #1
 80034c8:	035a      	lsls	r2, r3, #13
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e007      	b.n	80034e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	3b01      	subs	r3, #1
 8003500:	051a      	lsls	r2, r3, #20
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003526:	025a      	lsls	r2, r3, #9
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	029a      	lsls	r2, r3, #10
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	40012300 	.word	0x40012300
 8003564:	0f000001 	.word	0x0f000001

08003568 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800357e:	2b00      	cmp	r3, #0
 8003580:	d13c      	bne.n	80035fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d12b      	bne.n	80035f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d127      	bne.n	80035f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d006      	beq.n	80035c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d119      	bne.n	80035f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0220 	bic.w	r2, r2, #32
 80035ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d105      	bne.n	80035f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	f043 0201 	orr.w	r2, r3, #1
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7fe ffab 	bl	8002550 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035fa:	e00e      	b.n	800361a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f7ff fd85 	bl	8003118 <HAL_ADC_ErrorCallback>
}
 800360e:	e004      	b.n	800361a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	4798      	blx	r3
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7ff fd67 	bl	8003104 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2240      	movs	r2, #64	; 0x40
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f043 0204 	orr.w	r2, r3, #4
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff fd5a 	bl	8003118 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <__NVIC_SetPriorityGrouping+0x44>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003688:	4013      	ands	r3, r2
 800368a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800369e:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <__NVIC_SetPriorityGrouping+0x44>)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	60d3      	str	r3, [r2, #12]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <__NVIC_GetPriorityGrouping+0x18>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	0a1b      	lsrs	r3, r3, #8
 80036be:	f003 0307 	and.w	r3, r3, #7
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	db0b      	blt.n	80036fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	f003 021f 	and.w	r2, r3, #31
 80036e8:	4907      	ldr	r1, [pc, #28]	; (8003708 <__NVIC_EnableIRQ+0x38>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2001      	movs	r0, #1
 80036f2:	fa00 f202 	lsl.w	r2, r0, r2
 80036f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	e000e100 	.word	0xe000e100

0800370c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371c:	2b00      	cmp	r3, #0
 800371e:	db0a      	blt.n	8003736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	490c      	ldr	r1, [pc, #48]	; (8003758 <__NVIC_SetPriority+0x4c>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	440b      	add	r3, r1
 8003730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003734:	e00a      	b.n	800374c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <__NVIC_SetPriority+0x50>)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	3b04      	subs	r3, #4
 8003744:	0112      	lsls	r2, r2, #4
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	440b      	add	r3, r1
 800374a:	761a      	strb	r2, [r3, #24]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000e100 	.word	0xe000e100
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	; 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f1c3 0307 	rsb	r3, r3, #7
 800377a:	2b04      	cmp	r3, #4
 800377c:	bf28      	it	cs
 800377e:	2304      	movcs	r3, #4
 8003780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3304      	adds	r3, #4
 8003786:	2b06      	cmp	r3, #6
 8003788:	d902      	bls.n	8003790 <NVIC_EncodePriority+0x30>
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3b03      	subs	r3, #3
 800378e:	e000      	b.n	8003792 <NVIC_EncodePriority+0x32>
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	401a      	ands	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	43d9      	mvns	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	4313      	orrs	r3, r2
         );
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	; 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d8:	d301      	bcc.n	80037de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037da:	2301      	movs	r3, #1
 80037dc:	e00f      	b.n	80037fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <SysTick_Config+0x40>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e6:	210f      	movs	r1, #15
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f7ff ff8e 	bl	800370c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <SysTick_Config+0x40>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <SysTick_Config+0x40>)
 80037f8:	2207      	movs	r2, #7
 80037fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	e000e010 	.word	0xe000e010

0800380c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff29 	bl	800366c <__NVIC_SetPriorityGrouping>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003834:	f7ff ff3e 	bl	80036b4 <__NVIC_GetPriorityGrouping>
 8003838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff8e 	bl	8003760 <NVIC_EncodePriority>
 8003844:	4602      	mov	r2, r0
 8003846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff5d 	bl	800370c <__NVIC_SetPriority>
}
 8003852:	bf00      	nop
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	4603      	mov	r3, r0
 8003862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff31 	bl	80036d0 <__NVIC_EnableIRQ>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ffa2 	bl	80037c8 <SysTick_Config>
 8003884:	4603      	mov	r3, r0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800389c:	f7ff face 	bl	8002e3c <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e099      	b.n	80039e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038cc:	e00f      	b.n	80038ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ce:	f7ff fab5 	bl	8002e3c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d908      	bls.n	80038ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2203      	movs	r2, #3
 80038e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e078      	b.n	80039e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e8      	bne.n	80038ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <HAL_DMA_Init+0x158>)
 8003908:	4013      	ands	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800391a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	2b04      	cmp	r3, #4
 8003946:	d107      	bne.n	8003958 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	4313      	orrs	r3, r2
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	2b04      	cmp	r3, #4
 8003980:	d117      	bne.n	80039b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00e      	beq.n	80039b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fa91 	bl	8003ebc <DMA_CheckFifoParam>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2240      	movs	r2, #64	; 0x40
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039ae:	2301      	movs	r3, #1
 80039b0:	e016      	b.n	80039e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa48 	bl	8003e50 <DMA_CalcBaseAndBitshift>
 80039c0:	4603      	mov	r3, r0
 80039c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	223f      	movs	r2, #63	; 0x3f
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	f010803f 	.word	0xf010803f

080039ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_DMA_Start_IT+0x26>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e040      	b.n	8003a94 <HAL_DMA_Start_IT+0xa8>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d12f      	bne.n	8003a86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f9da 	bl	8003df4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	223f      	movs	r2, #63	; 0x3f
 8003a46:	409a      	lsls	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0216 	orr.w	r2, r2, #22
 8003a5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0208 	orr.w	r2, r2, #8
 8003a72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e005      	b.n	8003a92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d004      	beq.n	8003aba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e00c      	b.n	8003ad4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2205      	movs	r2, #5
 8003abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0201 	bic.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003aec:	4b92      	ldr	r3, [pc, #584]	; (8003d38 <HAL_DMA_IRQHandler+0x258>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a92      	ldr	r2, [pc, #584]	; (8003d3c <HAL_DMA_IRQHandler+0x25c>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0a9b      	lsrs	r3, r3, #10
 8003af8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01a      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0204 	bic.w	r2, r2, #4
 8003b32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	2208      	movs	r2, #8
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	f043 0201 	orr.w	r2, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	2201      	movs	r2, #1
 8003b52:	409a      	lsls	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d012      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	2201      	movs	r2, #1
 8003b70:	409a      	lsls	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	f043 0202 	orr.w	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	2204      	movs	r2, #4
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d012      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00b      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb0:	f043 0204 	orr.w	r2, r3, #4
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d043      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d03c      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	2210      	movs	r2, #16
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d018      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d108      	bne.n	8003c10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d024      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
 8003c0e:	e01f      	b.n	8003c50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01b      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	4798      	blx	r3
 8003c20:	e016      	b.n	8003c50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0208 	bic.w	r2, r2, #8
 8003c3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	2220      	movs	r2, #32
 8003c56:	409a      	lsls	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 808e 	beq.w	8003d7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8086 	beq.w	8003d7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	2220      	movs	r2, #32
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b05      	cmp	r3, #5
 8003c88:	d136      	bne.n	8003cf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0216 	bic.w	r2, r2, #22
 8003c98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d103      	bne.n	8003cba <HAL_DMA_IRQHandler+0x1da>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0208 	bic.w	r2, r2, #8
 8003cc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	223f      	movs	r2, #63	; 0x3f
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d07d      	beq.n	8003dea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
        }
        return;
 8003cf6:	e078      	b.n	8003dea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01c      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d108      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d030      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	4798      	blx	r3
 8003d24:	e02b      	b.n	8003d7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d027      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
 8003d36:	e022      	b.n	8003d7e <HAL_DMA_IRQHandler+0x29e>
 8003d38:	2000001c 	.word	0x2000001c
 8003d3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10f      	bne.n	8003d6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0210 	bic.w	r2, r2, #16
 8003d5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d032      	beq.n	8003dec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d022      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2205      	movs	r2, #5
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	3301      	adds	r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d307      	bcc.n	8003dc6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f2      	bne.n	8003daa <HAL_DMA_IRQHandler+0x2ca>
 8003dc4:	e000      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003dc6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
 8003de8:	e000      	b.n	8003dec <HAL_DMA_IRQHandler+0x30c>
        return;
 8003dea:	bf00      	nop
    }
  }
}
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop

08003df4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d108      	bne.n	8003e34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e32:	e007      	b.n	8003e44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]
}
 8003e44:	bf00      	nop
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	3b10      	subs	r3, #16
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <DMA_CalcBaseAndBitshift+0x64>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e6a:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <DMA_CalcBaseAndBitshift+0x68>)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d909      	bls.n	8003e92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	1d1a      	adds	r2, r3, #4
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e90:	e007      	b.n	8003ea2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e9a:	f023 0303 	bic.w	r3, r3, #3
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	aaaaaaab 	.word	0xaaaaaaab
 8003eb8:	08009b3c 	.word	0x08009b3c

08003ebc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11f      	bne.n	8003f16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d855      	bhi.n	8003f88 <DMA_CheckFifoParam+0xcc>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <DMA_CheckFifoParam+0x28>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003f07 	.word	0x08003f07
 8003eec:	08003ef5 	.word	0x08003ef5
 8003ef0:	08003f89 	.word	0x08003f89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d045      	beq.n	8003f8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f04:	e042      	b.n	8003f8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f0e:	d13f      	bne.n	8003f90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f14:	e03c      	b.n	8003f90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1e:	d121      	bne.n	8003f64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d836      	bhi.n	8003f94 <DMA_CheckFifoParam+0xd8>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <DMA_CheckFifoParam+0x70>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f43 	.word	0x08003f43
 8003f34:	08003f3d 	.word	0x08003f3d
 8003f38:	08003f55 	.word	0x08003f55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f40:	e02f      	b.n	8003fa2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d024      	beq.n	8003f98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f52:	e021      	b.n	8003f98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f5c:	d11e      	bne.n	8003f9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f62:	e01b      	b.n	8003f9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d902      	bls.n	8003f70 <DMA_CheckFifoParam+0xb4>
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d003      	beq.n	8003f76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f6e:	e018      	b.n	8003fa2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
      break;
 8003f74:	e015      	b.n	8003fa2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00e      	beq.n	8003fa0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
      break;
 8003f86:	e00b      	b.n	8003fa0 <DMA_CheckFifoParam+0xe4>
      break;
 8003f88:	bf00      	nop
 8003f8a:	e00a      	b.n	8003fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003f8c:	bf00      	nop
 8003f8e:	e008      	b.n	8003fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003f90:	bf00      	nop
 8003f92:	e006      	b.n	8003fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003f94:	bf00      	nop
 8003f96:	e004      	b.n	8003fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003f98:	bf00      	nop
 8003f9a:	e002      	b.n	8003fa2 <DMA_CheckFifoParam+0xe6>
      break;   
 8003f9c:	bf00      	nop
 8003f9e:	e000      	b.n	8003fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fa0:	bf00      	nop
    }
  } 
  
  return status; 
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e16b      	b.n	80042a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fcc:	2201      	movs	r2, #1
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	f040 815a 	bne.w	800429e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d00b      	beq.n	800400a <HAL_GPIO_Init+0x5a>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d007      	beq.n	800400a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ffe:	2b11      	cmp	r3, #17
 8004000:	d003      	beq.n	800400a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b12      	cmp	r3, #18
 8004008:	d130      	bne.n	800406c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	2203      	movs	r2, #3
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004040:	2201      	movs	r2, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 0201 	and.w	r2, r3, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	2203      	movs	r2, #3
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0xfc>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b12      	cmp	r3, #18
 80040aa:	d123      	bne.n	80040f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	08da      	lsrs	r2, r3, #3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3208      	adds	r2, #8
 80040b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	220f      	movs	r2, #15
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	08da      	lsrs	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3208      	adds	r2, #8
 80040ee:	69b9      	ldr	r1, [r7, #24]
 80040f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	2203      	movs	r2, #3
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0203 	and.w	r2, r3, #3
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80b4 	beq.w	800429e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	4b5f      	ldr	r3, [pc, #380]	; (80042b8 <HAL_GPIO_Init+0x308>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	4a5e      	ldr	r2, [pc, #376]	; (80042b8 <HAL_GPIO_Init+0x308>)
 8004140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004144:	6453      	str	r3, [r2, #68]	; 0x44
 8004146:	4b5c      	ldr	r3, [pc, #368]	; (80042b8 <HAL_GPIO_Init+0x308>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004152:	4a5a      	ldr	r2, [pc, #360]	; (80042bc <HAL_GPIO_Init+0x30c>)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	089b      	lsrs	r3, r3, #2
 8004158:	3302      	adds	r3, #2
 800415a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	220f      	movs	r2, #15
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a51      	ldr	r2, [pc, #324]	; (80042c0 <HAL_GPIO_Init+0x310>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d02b      	beq.n	80041d6 <HAL_GPIO_Init+0x226>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <HAL_GPIO_Init+0x314>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d025      	beq.n	80041d2 <HAL_GPIO_Init+0x222>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a4f      	ldr	r2, [pc, #316]	; (80042c8 <HAL_GPIO_Init+0x318>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01f      	beq.n	80041ce <HAL_GPIO_Init+0x21e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4e      	ldr	r2, [pc, #312]	; (80042cc <HAL_GPIO_Init+0x31c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d019      	beq.n	80041ca <HAL_GPIO_Init+0x21a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4d      	ldr	r2, [pc, #308]	; (80042d0 <HAL_GPIO_Init+0x320>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <HAL_GPIO_Init+0x216>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4c      	ldr	r2, [pc, #304]	; (80042d4 <HAL_GPIO_Init+0x324>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00d      	beq.n	80041c2 <HAL_GPIO_Init+0x212>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a4b      	ldr	r2, [pc, #300]	; (80042d8 <HAL_GPIO_Init+0x328>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <HAL_GPIO_Init+0x20e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <HAL_GPIO_Init+0x32c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <HAL_GPIO_Init+0x20a>
 80041b6:	2307      	movs	r3, #7
 80041b8:	e00e      	b.n	80041d8 <HAL_GPIO_Init+0x228>
 80041ba:	2308      	movs	r3, #8
 80041bc:	e00c      	b.n	80041d8 <HAL_GPIO_Init+0x228>
 80041be:	2306      	movs	r3, #6
 80041c0:	e00a      	b.n	80041d8 <HAL_GPIO_Init+0x228>
 80041c2:	2305      	movs	r3, #5
 80041c4:	e008      	b.n	80041d8 <HAL_GPIO_Init+0x228>
 80041c6:	2304      	movs	r3, #4
 80041c8:	e006      	b.n	80041d8 <HAL_GPIO_Init+0x228>
 80041ca:	2303      	movs	r3, #3
 80041cc:	e004      	b.n	80041d8 <HAL_GPIO_Init+0x228>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e002      	b.n	80041d8 <HAL_GPIO_Init+0x228>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_GPIO_Init+0x228>
 80041d6:	2300      	movs	r3, #0
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	f002 0203 	and.w	r2, r2, #3
 80041de:	0092      	lsls	r2, r2, #2
 80041e0:	4093      	lsls	r3, r2
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041e8:	4934      	ldr	r1, [pc, #208]	; (80042bc <HAL_GPIO_Init+0x30c>)
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	3302      	adds	r3, #2
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f6:	4b3a      	ldr	r3, [pc, #232]	; (80042e0 <HAL_GPIO_Init+0x330>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800421a:	4a31      	ldr	r2, [pc, #196]	; (80042e0 <HAL_GPIO_Init+0x330>)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004220:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <HAL_GPIO_Init+0x330>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004244:	4a26      	ldr	r2, [pc, #152]	; (80042e0 <HAL_GPIO_Init+0x330>)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800424a:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_GPIO_Init+0x330>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800426e:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <HAL_GPIO_Init+0x330>)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_GPIO_Init+0x330>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004298:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <HAL_GPIO_Init+0x330>)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3301      	adds	r3, #1
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	2b0f      	cmp	r3, #15
 80042a8:	f67f ae90 	bls.w	8003fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	3724      	adds	r7, #36	; 0x24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40013800 	.word	0x40013800
 80042c0:	40020000 	.word	0x40020000
 80042c4:	40020400 	.word	0x40020400
 80042c8:	40020800 	.word	0x40020800
 80042cc:	40020c00 	.word	0x40020c00
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40021400 	.word	0x40021400
 80042d8:	40021800 	.word	0x40021800
 80042dc:	40021c00 	.word	0x40021c00
 80042e0:	40013c00 	.word	0x40013c00

080042e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	887b      	ldrh	r3, [r7, #2]
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
 8004300:	e001      	b.n	8004306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
 8004320:	4613      	mov	r3, r2
 8004322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004324:	787b      	ldrb	r3, [r7, #1]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004330:	e003      	b.n	800433a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004332:	887b      	ldrh	r3, [r7, #2]
 8004334:	041a      	lsls	r2, r3, #16
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	619a      	str	r2, [r3, #24]
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e25b      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d075      	beq.n	8004452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004366:	4ba3      	ldr	r3, [pc, #652]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b04      	cmp	r3, #4
 8004370:	d00c      	beq.n	800438c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004372:	4ba0      	ldr	r3, [pc, #640]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437a:	2b08      	cmp	r3, #8
 800437c:	d112      	bne.n	80043a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800437e:	4b9d      	ldr	r3, [pc, #628]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438a:	d10b      	bne.n	80043a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	4b99      	ldr	r3, [pc, #612]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05b      	beq.n	8004450 <HAL_RCC_OscConfig+0x108>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d157      	bne.n	8004450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e236      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_OscConfig+0x74>
 80043ae:	4b91      	ldr	r3, [pc, #580]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a90      	ldr	r2, [pc, #576]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e01d      	b.n	80043f8 <HAL_RCC_OscConfig+0xb0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCC_OscConfig+0x98>
 80043c6:	4b8b      	ldr	r3, [pc, #556]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a8a      	ldr	r2, [pc, #552]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b88      	ldr	r3, [pc, #544]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a87      	ldr	r2, [pc, #540]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e00b      	b.n	80043f8 <HAL_RCC_OscConfig+0xb0>
 80043e0:	4b84      	ldr	r3, [pc, #528]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a83      	ldr	r2, [pc, #524]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ea:	6013      	str	r3, [r2, #0]
 80043ec:	4b81      	ldr	r3, [pc, #516]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a80      	ldr	r2, [pc, #512]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80043f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d013      	beq.n	8004428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fe fd1c 	bl	8002e3c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004408:	f7fe fd18 	bl	8002e3c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e1fb      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	4b76      	ldr	r3, [pc, #472]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0xc0>
 8004426:	e014      	b.n	8004452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fe fd08 	bl	8002e3c <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004430:	f7fe fd04 	bl	8002e3c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e1e7      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004442:	4b6c      	ldr	r3, [pc, #432]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0xe8>
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d063      	beq.n	8004526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800445e:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446a:	4b62      	ldr	r3, [pc, #392]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004472:	2b08      	cmp	r3, #8
 8004474:	d11c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004476:	4b5f      	ldr	r3, [pc, #380]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d116      	bne.n	80044b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004482:	4b5c      	ldr	r3, [pc, #368]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_RCC_OscConfig+0x152>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d001      	beq.n	800449a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e1bb      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449a:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4952      	ldr	r1, [pc, #328]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ae:	e03a      	b.n	8004526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b8:	4b4f      	ldr	r3, [pc, #316]	; (80045f8 <HAL_RCC_OscConfig+0x2b0>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fe fcbd 	bl	8002e3c <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c6:	f7fe fcb9 	bl	8002e3c <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e19c      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d8:	4b46      	ldr	r3, [pc, #280]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e4:	4b43      	ldr	r3, [pc, #268]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4940      	ldr	r1, [pc, #256]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	600b      	str	r3, [r1, #0]
 80044f8:	e015      	b.n	8004526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fa:	4b3f      	ldr	r3, [pc, #252]	; (80045f8 <HAL_RCC_OscConfig+0x2b0>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fe fc9c 	bl	8002e3c <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004508:	f7fe fc98 	bl	8002e3c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e17b      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451a:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d030      	beq.n	8004594 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453a:	4b30      	ldr	r3, [pc, #192]	; (80045fc <HAL_RCC_OscConfig+0x2b4>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fe fc7c 	bl	8002e3c <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004548:	f7fe fc78 	bl	8002e3c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e15b      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455a:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x200>
 8004566:	e015      	b.n	8004594 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCC_OscConfig+0x2b4>)
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456e:	f7fe fc65 	bl	8002e3c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004576:	f7fe fc61 	bl	8002e3c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e144      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 800458a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f0      	bne.n	8004576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80a0 	beq.w	80046e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4a0e      	ldr	r2, [pc, #56]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_OscConfig+0x2b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d121      	bne.n	8004622 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <HAL_RCC_OscConfig+0x2b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a07      	ldr	r2, [pc, #28]	; (8004600 <HAL_RCC_OscConfig+0x2b8>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ea:	f7fe fc27 	bl	8002e3c <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	e011      	b.n	8004616 <HAL_RCC_OscConfig+0x2ce>
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	42470000 	.word	0x42470000
 80045fc:	42470e80 	.word	0x42470e80
 8004600:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004604:	f7fe fc1a 	bl	8002e3c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e0fd      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004616:	4b81      	ldr	r3, [pc, #516]	; (800481c <HAL_RCC_OscConfig+0x4d4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d106      	bne.n	8004638 <HAL_RCC_OscConfig+0x2f0>
 800462a:	4b7d      	ldr	r3, [pc, #500]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a7c      	ldr	r2, [pc, #496]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
 8004636:	e01c      	b.n	8004672 <HAL_RCC_OscConfig+0x32a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b05      	cmp	r3, #5
 800463e:	d10c      	bne.n	800465a <HAL_RCC_OscConfig+0x312>
 8004640:	4b77      	ldr	r3, [pc, #476]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a76      	ldr	r2, [pc, #472]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 8004646:	f043 0304 	orr.w	r3, r3, #4
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
 800464c:	4b74      	ldr	r3, [pc, #464]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	4a73      	ldr	r2, [pc, #460]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6713      	str	r3, [r2, #112]	; 0x70
 8004658:	e00b      	b.n	8004672 <HAL_RCC_OscConfig+0x32a>
 800465a:	4b71      	ldr	r3, [pc, #452]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a70      	ldr	r2, [pc, #448]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
 8004666:	4b6e      	ldr	r3, [pc, #440]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a6d      	ldr	r2, [pc, #436]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d015      	beq.n	80046a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467a:	f7fe fbdf 	bl	8002e3c <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fe fbdb 	bl	8002e3c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0bc      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	4b61      	ldr	r3, [pc, #388]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ee      	beq.n	8004682 <HAL_RCC_OscConfig+0x33a>
 80046a4:	e014      	b.n	80046d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a6:	f7fe fbc9 	bl	8002e3c <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ae:	f7fe fbc5 	bl	8002e3c <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e0a6      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c4:	4b56      	ldr	r3, [pc, #344]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1ee      	bne.n	80046ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b52      	ldr	r3, [pc, #328]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	4a51      	ldr	r2, [pc, #324]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8092 	beq.w	8004810 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ec:	4b4c      	ldr	r3, [pc, #304]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d05c      	beq.n	80047b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d141      	bne.n	8004784 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004700:	4b48      	ldr	r3, [pc, #288]	; (8004824 <HAL_RCC_OscConfig+0x4dc>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fe fb99 	bl	8002e3c <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470e:	f7fe fb95 	bl	8002e3c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e078      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004720:	4b3f      	ldr	r3, [pc, #252]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	019b      	lsls	r3, r3, #6
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	3b01      	subs	r3, #1
 8004746:	041b      	lsls	r3, r3, #16
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	061b      	lsls	r3, r3, #24
 8004750:	4933      	ldr	r1, [pc, #204]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004756:	4b33      	ldr	r3, [pc, #204]	; (8004824 <HAL_RCC_OscConfig+0x4dc>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fe fb6e 	bl	8002e3c <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004764:	f7fe fb6a 	bl	8002e3c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e04d      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004776:	4b2a      	ldr	r3, [pc, #168]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x41c>
 8004782:	e045      	b.n	8004810 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004784:	4b27      	ldr	r3, [pc, #156]	; (8004824 <HAL_RCC_OscConfig+0x4dc>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fe fb57 	bl	8002e3c <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004792:	f7fe fb53 	bl	8002e3c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e036      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a4:	4b1e      	ldr	r3, [pc, #120]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x44a>
 80047b0:	e02e      	b.n	8004810 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e029      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047be:	4b18      	ldr	r3, [pc, #96]	; (8004820 <HAL_RCC_OscConfig+0x4d8>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d11c      	bne.n	800480c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d115      	bne.n	800480c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047e6:	4013      	ands	r3, r2
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d10d      	bne.n	800480c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d106      	bne.n	800480c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40007000 	.word	0x40007000
 8004820:	40023800 	.word	0x40023800
 8004824:	42470060 	.word	0x42470060

08004828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0cc      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800483c:	4b68      	ldr	r3, [pc, #416]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d90c      	bls.n	8004864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b63      	ldr	r3, [pc, #396]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0b8      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d020      	beq.n	80048b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800487c:	4b59      	ldr	r3, [pc, #356]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4a58      	ldr	r2, [pc, #352]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004894:	4b53      	ldr	r3, [pc, #332]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a52      	ldr	r2, [pc, #328]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800489e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048a0:	4b50      	ldr	r3, [pc, #320]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	494d      	ldr	r1, [pc, #308]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d044      	beq.n	8004948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	4b47      	ldr	r3, [pc, #284]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d119      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e07f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d003      	beq.n	80048e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e6:	4b3f      	ldr	r3, [pc, #252]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e06f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f6:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e067      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004906:	4b37      	ldr	r3, [pc, #220]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f023 0203 	bic.w	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4934      	ldr	r1, [pc, #208]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	4313      	orrs	r3, r2
 8004916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004918:	f7fe fa90 	bl	8002e3c <HAL_GetTick>
 800491c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	e00a      	b.n	8004936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004920:	f7fe fa8c 	bl	8002e3c <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	f241 3288 	movw	r2, #5000	; 0x1388
 800492e:	4293      	cmp	r3, r2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e04f      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004936:	4b2b      	ldr	r3, [pc, #172]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 020c 	and.w	r2, r3, #12
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	429a      	cmp	r2, r3
 8004946:	d1eb      	bne.n	8004920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004948:	4b25      	ldr	r3, [pc, #148]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d20c      	bcs.n	8004970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e032      	b.n	80049d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800497c:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4916      	ldr	r1, [pc, #88]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	490e      	ldr	r1, [pc, #56]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ae:	f000 f821 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 80049b2:	4601      	mov	r1, r0
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <HAL_RCC_ClockConfig+0x1c0>)
 80049c0:	5cd3      	ldrb	r3, [r2, r3]
 80049c2:	fa21 f303 	lsr.w	r3, r1, r3
 80049c6:	4a09      	ldr	r2, [pc, #36]	; (80049ec <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe f9f0 	bl	8002db4 <HAL_InitTick>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40023c00 	.word	0x40023c00
 80049e4:	40023800 	.word	0x40023800
 80049e8:	08009b24 	.word	0x08009b24
 80049ec:	2000001c 	.word	0x2000001c
 80049f0:	20000024 	.word	0x20000024

080049f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	2300      	movs	r3, #0
 8004a04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a0a:	4b63      	ldr	r3, [pc, #396]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d007      	beq.n	8004a26 <HAL_RCC_GetSysClockFreq+0x32>
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d008      	beq.n	8004a2c <HAL_RCC_GetSysClockFreq+0x38>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 80b4 	bne.w	8004b88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a20:	4b5e      	ldr	r3, [pc, #376]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a22:	60bb      	str	r3, [r7, #8]
       break;
 8004a24:	e0b3      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a26:	4b5e      	ldr	r3, [pc, #376]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a28:	60bb      	str	r3, [r7, #8]
      break;
 8004a2a:	e0b0      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a2c:	4b5a      	ldr	r3, [pc, #360]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a36:	4b58      	ldr	r3, [pc, #352]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04a      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a42:	4b55      	ldr	r3, [pc, #340]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	f04f 0400 	mov.w	r4, #0
 8004a4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	ea03 0501 	and.w	r5, r3, r1
 8004a58:	ea04 0602 	and.w	r6, r4, r2
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4632      	mov	r2, r6
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	f04f 0400 	mov.w	r4, #0
 8004a68:	0154      	lsls	r4, r2, #5
 8004a6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a6e:	014b      	lsls	r3, r1, #5
 8004a70:	4619      	mov	r1, r3
 8004a72:	4622      	mov	r2, r4
 8004a74:	1b49      	subs	r1, r1, r5
 8004a76:	eb62 0206 	sbc.w	r2, r2, r6
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	f04f 0400 	mov.w	r4, #0
 8004a82:	0194      	lsls	r4, r2, #6
 8004a84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a88:	018b      	lsls	r3, r1, #6
 8004a8a:	1a5b      	subs	r3, r3, r1
 8004a8c:	eb64 0402 	sbc.w	r4, r4, r2
 8004a90:	f04f 0100 	mov.w	r1, #0
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	00e2      	lsls	r2, r4, #3
 8004a9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a9e:	00d9      	lsls	r1, r3, #3
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4614      	mov	r4, r2
 8004aa4:	195b      	adds	r3, r3, r5
 8004aa6:	eb44 0406 	adc.w	r4, r4, r6
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	0262      	lsls	r2, r4, #9
 8004ab4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ab8:	0259      	lsls	r1, r3, #9
 8004aba:	460b      	mov	r3, r1
 8004abc:	4614      	mov	r4, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f04f 0400 	mov.w	r4, #0
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4623      	mov	r3, r4
 8004acc:	f7fc f8bc 	bl	8000c48 <__aeabi_uldivmod>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	e049      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad8:	4b2f      	ldr	r3, [pc, #188]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	099b      	lsrs	r3, r3, #6
 8004ade:	f04f 0400 	mov.w	r4, #0
 8004ae2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	ea03 0501 	and.w	r5, r3, r1
 8004aee:	ea04 0602 	and.w	r6, r4, r2
 8004af2:	4629      	mov	r1, r5
 8004af4:	4632      	mov	r2, r6
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	f04f 0400 	mov.w	r4, #0
 8004afe:	0154      	lsls	r4, r2, #5
 8004b00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b04:	014b      	lsls	r3, r1, #5
 8004b06:	4619      	mov	r1, r3
 8004b08:	4622      	mov	r2, r4
 8004b0a:	1b49      	subs	r1, r1, r5
 8004b0c:	eb62 0206 	sbc.w	r2, r2, r6
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	f04f 0400 	mov.w	r4, #0
 8004b18:	0194      	lsls	r4, r2, #6
 8004b1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b1e:	018b      	lsls	r3, r1, #6
 8004b20:	1a5b      	subs	r3, r3, r1
 8004b22:	eb64 0402 	sbc.w	r4, r4, r2
 8004b26:	f04f 0100 	mov.w	r1, #0
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	00e2      	lsls	r2, r4, #3
 8004b30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b34:	00d9      	lsls	r1, r3, #3
 8004b36:	460b      	mov	r3, r1
 8004b38:	4614      	mov	r4, r2
 8004b3a:	195b      	adds	r3, r3, r5
 8004b3c:	eb44 0406 	adc.w	r4, r4, r6
 8004b40:	f04f 0100 	mov.w	r1, #0
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	02a2      	lsls	r2, r4, #10
 8004b4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b4e:	0299      	lsls	r1, r3, #10
 8004b50:	460b      	mov	r3, r1
 8004b52:	4614      	mov	r4, r2
 8004b54:	4618      	mov	r0, r3
 8004b56:	4621      	mov	r1, r4
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f04f 0400 	mov.w	r4, #0
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4623      	mov	r3, r4
 8004b62:	f7fc f871 	bl	8000c48 <__aeabi_uldivmod>
 8004b66:	4603      	mov	r3, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	3301      	adds	r3, #1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	60bb      	str	r3, [r7, #8]
      break;
 8004b86:	e002      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b8a:	60bb      	str	r3, [r7, #8]
      break;
 8004b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	00f42400 	.word	0x00f42400
 8004ba0:	007a1200 	.word	0x007a1200

08004ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004baa:	681b      	ldr	r3, [r3, #0]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	2000001c 	.word	0x2000001c

08004bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bc0:	f7ff fff0 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bc4:	4601      	mov	r1, r0
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	0a9b      	lsrs	r3, r3, #10
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	4a03      	ldr	r2, [pc, #12]	; (8004be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bd2:	5cd3      	ldrb	r3, [r2, r3]
 8004bd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	08009b34 	.word	0x08009b34

08004be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004be8:	f7ff ffdc 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bec:	4601      	mov	r1, r0
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	0b5b      	lsrs	r3, r3, #13
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4a03      	ldr	r2, [pc, #12]	; (8004c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40023800 	.word	0x40023800
 8004c08:	08009b34 	.word	0x08009b34

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e01d      	b.n	8004c5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fd fabc 	bl	80021b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fcc2 	bl	80055d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0201 	orr.w	r2, r2, #1
 8004c78:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b06      	cmp	r3, #6
 8004c8a:	d007      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e01d      	b.n	8004cf8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f815 	bl	8004d00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f000 fc73 	bl	80055d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2201      	movs	r2, #1
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 f868 	bl	8005dfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <HAL_TIM_PWM_Start+0x74>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_TIM_PWM_Start+0x2c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <HAL_TIM_PWM_Start+0x78>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <HAL_TIM_PWM_Start+0x30>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <HAL_TIM_PWM_Start+0x32>
 8004d44:	2300      	movs	r3, #0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b06      	cmp	r3, #6
 8004d6a:	d007      	beq.n	8004d7c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40010400 	.word	0x40010400

08004d90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e01d      	b.n	8004dde <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f815 	bl	8004de6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f000 fc00 	bl	80055d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b0c      	cmp	r3, #12
 8004e0a:	d841      	bhi.n	8004e90 <HAL_TIM_IC_Start_IT+0x94>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <HAL_TIM_IC_Start_IT+0x18>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e49 	.word	0x08004e49
 8004e18:	08004e91 	.word	0x08004e91
 8004e1c:	08004e91 	.word	0x08004e91
 8004e20:	08004e91 	.word	0x08004e91
 8004e24:	08004e5b 	.word	0x08004e5b
 8004e28:	08004e91 	.word	0x08004e91
 8004e2c:	08004e91 	.word	0x08004e91
 8004e30:	08004e91 	.word	0x08004e91
 8004e34:	08004e6d 	.word	0x08004e6d
 8004e38:	08004e91 	.word	0x08004e91
 8004e3c:	08004e91 	.word	0x08004e91
 8004e40:	08004e91 	.word	0x08004e91
 8004e44:	08004e7f 	.word	0x08004e7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0202 	orr.w	r2, r2, #2
 8004e56:	60da      	str	r2, [r3, #12]
      break;
 8004e58:	e01b      	b.n	8004e92 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0204 	orr.w	r2, r2, #4
 8004e68:	60da      	str	r2, [r3, #12]
      break;
 8004e6a:	e012      	b.n	8004e92 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0208 	orr.w	r2, r2, #8
 8004e7a:	60da      	str	r2, [r3, #12]
      break;
 8004e7c:	e009      	b.n	8004e92 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0210 	orr.w	r2, r2, #16
 8004e8c:	60da      	str	r2, [r3, #12]
      break;
 8004e8e:	e000      	b.n	8004e92 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004e90:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2201      	movs	r2, #1
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 ffae 	bl	8005dfc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b06      	cmp	r3, #6
 8004eb0:	d007      	beq.n	8004ec2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d122      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d11b      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0202 	mvn.w	r2, #2
 8004ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fd fc7c 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fb3e 	bl	8005598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fb45 	bl	80055ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d122      	bne.n	8004f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d11b      	bne.n	8004f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0204 	mvn.w	r2, #4
 8004f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fd fc52 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 8004f68:	e005      	b.n	8004f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fb14 	bl	8005598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fb1b 	bl	80055ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d122      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d11b      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0208 	mvn.w	r2, #8
 8004fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fd fc28 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 faea 	bl	8005598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 faf1 	bl	80055ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d122      	bne.n	8005024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d11b      	bne.n	8005024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0210 	mvn.w	r2, #16
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fd fbfe 	bl	800280c <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fac0 	bl	8005598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fac7 	bl	80055ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d10e      	bne.n	8005050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b01      	cmp	r3, #1
 800503e:	d107      	bne.n	8005050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0201 	mvn.w	r2, #1
 8005048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fd fb7e 	bl	800274c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	d10e      	bne.n	800507c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005068:	2b80      	cmp	r3, #128	; 0x80
 800506a:	d107      	bne.n	800507c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 ffe8 	bl	800604c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d10e      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d107      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fa8c 	bl	80055c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d10e      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d107      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0220 	mvn.w	r2, #32
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 ffb2 	bl	8006038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e08a      	b.n	800520c <HAL_TIM_IC_ConfigChannel+0x130>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d11b      	bne.n	8005144 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f000 fcaa 	bl	8005a74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699a      	ldr	r2, [r3, #24]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 020c 	bic.w	r2, r2, #12
 800512e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6999      	ldr	r1, [r3, #24]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	619a      	str	r2, [r3, #24]
 8005142:	e05a      	b.n	80051fa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b04      	cmp	r3, #4
 8005148:	d11c      	bne.n	8005184 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	6819      	ldr	r1, [r3, #0]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f000 fd2e 	bl	8005bba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800516c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6999      	ldr	r1, [r3, #24]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	021a      	lsls	r2, r3, #8
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	619a      	str	r2, [r3, #24]
 8005182:	e03a      	b.n	80051fa <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b08      	cmp	r3, #8
 8005188:	d11b      	bne.n	80051c2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	6819      	ldr	r1, [r3, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f000 fd7b 	bl	8005c94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 020c 	bic.w	r2, r2, #12
 80051ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69d9      	ldr	r1, [r3, #28]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	61da      	str	r2, [r3, #28]
 80051c0:	e01b      	b.n	80051fa <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f000 fd9b 	bl	8005d0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69d9      	ldr	r1, [r3, #28]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	021a      	lsls	r2, r3, #8
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800522a:	2302      	movs	r3, #2
 800522c:	e0b4      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x184>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b0c      	cmp	r3, #12
 8005242:	f200 809f 	bhi.w	8005384 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005246:	a201      	add	r2, pc, #4	; (adr r2, 800524c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524c:	08005281 	.word	0x08005281
 8005250:	08005385 	.word	0x08005385
 8005254:	08005385 	.word	0x08005385
 8005258:	08005385 	.word	0x08005385
 800525c:	080052c1 	.word	0x080052c1
 8005260:	08005385 	.word	0x08005385
 8005264:	08005385 	.word	0x08005385
 8005268:	08005385 	.word	0x08005385
 800526c:	08005303 	.word	0x08005303
 8005270:	08005385 	.word	0x08005385
 8005274:	08005385 	.word	0x08005385
 8005278:	08005385 	.word	0x08005385
 800527c:	08005343 	.word	0x08005343
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fa44 	bl	8005714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0208 	orr.w	r2, r2, #8
 800529a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0204 	bic.w	r2, r2, #4
 80052aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6999      	ldr	r1, [r3, #24]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	619a      	str	r2, [r3, #24]
      break;
 80052be:	e062      	b.n	8005386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fa94 	bl	80057f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6999      	ldr	r1, [r3, #24]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	021a      	lsls	r2, r3, #8
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	619a      	str	r2, [r3, #24]
      break;
 8005300:	e041      	b.n	8005386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fae9 	bl	80058e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0208 	orr.w	r2, r2, #8
 800531c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0204 	bic.w	r2, r2, #4
 800532c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69d9      	ldr	r1, [r3, #28]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	61da      	str	r2, [r3, #28]
      break;
 8005340:	e021      	b.n	8005386 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fb3d 	bl	80059c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800535c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800536c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69d9      	ldr	r1, [r3, #28]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	021a      	lsls	r2, r3, #8
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	61da      	str	r2, [r3, #28]
      break;
 8005382:	e000      	b.n	8005386 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005384:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIM_ConfigClockSource+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e0a6      	b.n	8005506 <HAL_TIM_ConfigClockSource+0x166>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d067      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0x120>
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	d80b      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x6c>
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d073      	beq.n	80054e0 <HAL_TIM_ConfigClockSource+0x140>
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d802      	bhi.n	8005402 <HAL_TIM_ConfigClockSource+0x62>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d06f      	beq.n	80054e0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005400:	e078      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005402:	2b20      	cmp	r3, #32
 8005404:	d06c      	beq.n	80054e0 <HAL_TIM_ConfigClockSource+0x140>
 8005406:	2b30      	cmp	r3, #48	; 0x30
 8005408:	d06a      	beq.n	80054e0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800540a:	e073      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800540c:	2b70      	cmp	r3, #112	; 0x70
 800540e:	d00d      	beq.n	800542c <HAL_TIM_ConfigClockSource+0x8c>
 8005410:	2b70      	cmp	r3, #112	; 0x70
 8005412:	d804      	bhi.n	800541e <HAL_TIM_ConfigClockSource+0x7e>
 8005414:	2b50      	cmp	r3, #80	; 0x50
 8005416:	d033      	beq.n	8005480 <HAL_TIM_ConfigClockSource+0xe0>
 8005418:	2b60      	cmp	r3, #96	; 0x60
 800541a:	d041      	beq.n	80054a0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800541c:	e06a      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	d066      	beq.n	80054f2 <HAL_TIM_ConfigClockSource+0x152>
 8005424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005428:	d017      	beq.n	800545a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800542a:	e063      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6899      	ldr	r1, [r3, #8]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f000 fcbe 	bl	8005dbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800544e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	609a      	str	r2, [r3, #8]
      break;
 8005458:	e04c      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	6899      	ldr	r1, [r3, #8]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f000 fca7 	bl	8005dbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800547c:	609a      	str	r2, [r3, #8]
      break;
 800547e:	e039      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6859      	ldr	r1, [r3, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	461a      	mov	r2, r3
 800548e:	f000 fb65 	bl	8005b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2150      	movs	r1, #80	; 0x50
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fc74 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 800549e:	e029      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	6859      	ldr	r1, [r3, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	461a      	mov	r2, r3
 80054ae:	f000 fbc1 	bl	8005c34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2160      	movs	r1, #96	; 0x60
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 fc64 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 80054be:	e019      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6859      	ldr	r1, [r3, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	461a      	mov	r2, r3
 80054ce:	f000 fb45 	bl	8005b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2140      	movs	r1, #64	; 0x40
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fc54 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 80054de:	e009      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4619      	mov	r1, r3
 80054ea:	4610      	mov	r0, r2
 80054ec:	f000 fc4b 	bl	8005d86 <TIM_ITRx_SetConfig>
      break;
 80054f0:	e000      	b.n	80054f4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80054f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b0c      	cmp	r3, #12
 8005522:	d831      	bhi.n	8005588 <HAL_TIM_ReadCapturedValue+0x78>
 8005524:	a201      	add	r2, pc, #4	; (adr r2, 800552c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	08005561 	.word	0x08005561
 8005530:	08005589 	.word	0x08005589
 8005534:	08005589 	.word	0x08005589
 8005538:	08005589 	.word	0x08005589
 800553c:	0800556b 	.word	0x0800556b
 8005540:	08005589 	.word	0x08005589
 8005544:	08005589 	.word	0x08005589
 8005548:	08005589 	.word	0x08005589
 800554c:	08005575 	.word	0x08005575
 8005550:	08005589 	.word	0x08005589
 8005554:	08005589 	.word	0x08005589
 8005558:	08005589 	.word	0x08005589
 800555c:	0800557f 	.word	0x0800557f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	60fb      	str	r3, [r7, #12]

      break;
 8005568:	e00f      	b.n	800558a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	60fb      	str	r3, [r7, #12]

      break;
 8005572:	e00a      	b.n	800558a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557a:	60fb      	str	r3, [r7, #12]

      break;
 800557c:	e005      	b.n	800558a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	60fb      	str	r3, [r7, #12]

      break;
 8005586:	e000      	b.n	800558a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005588:	bf00      	nop
  }

  return tmpreg;
 800558a:	68fb      	ldr	r3, [r7, #12]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a40      	ldr	r2, [pc, #256]	; (80056e8 <TIM_Base_SetConfig+0x114>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f2:	d00f      	beq.n	8005614 <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a3d      	ldr	r2, [pc, #244]	; (80056ec <TIM_Base_SetConfig+0x118>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00b      	beq.n	8005614 <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a3c      	ldr	r2, [pc, #240]	; (80056f0 <TIM_Base_SetConfig+0x11c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d007      	beq.n	8005614 <TIM_Base_SetConfig+0x40>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a3b      	ldr	r2, [pc, #236]	; (80056f4 <TIM_Base_SetConfig+0x120>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_Base_SetConfig+0x40>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a3a      	ldr	r2, [pc, #232]	; (80056f8 <TIM_Base_SetConfig+0x124>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d108      	bne.n	8005626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2f      	ldr	r2, [pc, #188]	; (80056e8 <TIM_Base_SetConfig+0x114>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d02b      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005634:	d027      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2c      	ldr	r2, [pc, #176]	; (80056ec <TIM_Base_SetConfig+0x118>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d023      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <TIM_Base_SetConfig+0x11c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d01f      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <TIM_Base_SetConfig+0x120>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01b      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a29      	ldr	r2, [pc, #164]	; (80056f8 <TIM_Base_SetConfig+0x124>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d017      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a28      	ldr	r2, [pc, #160]	; (80056fc <TIM_Base_SetConfig+0x128>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a27      	ldr	r2, [pc, #156]	; (8005700 <TIM_Base_SetConfig+0x12c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00f      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a26      	ldr	r2, [pc, #152]	; (8005704 <TIM_Base_SetConfig+0x130>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00b      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a25      	ldr	r2, [pc, #148]	; (8005708 <TIM_Base_SetConfig+0x134>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d007      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a24      	ldr	r2, [pc, #144]	; (800570c <TIM_Base_SetConfig+0x138>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d003      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a23      	ldr	r2, [pc, #140]	; (8005710 <TIM_Base_SetConfig+0x13c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d108      	bne.n	8005698 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a0a      	ldr	r2, [pc, #40]	; (80056e8 <TIM_Base_SetConfig+0x114>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0xf8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a0c      	ldr	r2, [pc, #48]	; (80056f8 <TIM_Base_SetConfig+0x124>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d103      	bne.n	80056d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	615a      	str	r2, [r3, #20]
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40000c00 	.word	0x40000c00
 80056f8:	40010400 	.word	0x40010400
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800
 8005708:	40001800 	.word	0x40001800
 800570c:	40001c00 	.word	0x40001c00
 8005710:	40002000 	.word	0x40002000

08005714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f023 0201 	bic.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f023 0302 	bic.w	r3, r3, #2
 800575c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a20      	ldr	r2, [pc, #128]	; (80057ec <TIM_OC1_SetConfig+0xd8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_OC1_SetConfig+0x64>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <TIM_OC1_SetConfig+0xdc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d10c      	bne.n	8005792 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0308 	bic.w	r3, r3, #8
 800577e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 0304 	bic.w	r3, r3, #4
 8005790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a15      	ldr	r2, [pc, #84]	; (80057ec <TIM_OC1_SetConfig+0xd8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d003      	beq.n	80057a2 <TIM_OC1_SetConfig+0x8e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a14      	ldr	r2, [pc, #80]	; (80057f0 <TIM_OC1_SetConfig+0xdc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d111      	bne.n	80057c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	621a      	str	r2, [r3, #32]
}
 80057e0:	bf00      	nop
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40010400 	.word	0x40010400

080057f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0210 	bic.w	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f023 0320 	bic.w	r3, r3, #32
 800583e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <TIM_OC2_SetConfig+0xe4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_OC2_SetConfig+0x68>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a21      	ldr	r2, [pc, #132]	; (80058dc <TIM_OC2_SetConfig+0xe8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d10d      	bne.n	8005878 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005876:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <TIM_OC2_SetConfig+0xe4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_OC2_SetConfig+0x94>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a16      	ldr	r2, [pc, #88]	; (80058dc <TIM_OC2_SetConfig+0xe8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d113      	bne.n	80058b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800588e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005896:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	621a      	str	r2, [r3, #32]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40010400 	.word	0x40010400

080058e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a21      	ldr	r2, [pc, #132]	; (80059c0 <TIM_OC3_SetConfig+0xe0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d003      	beq.n	8005946 <TIM_OC3_SetConfig+0x66>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a20      	ldr	r2, [pc, #128]	; (80059c4 <TIM_OC3_SetConfig+0xe4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d10d      	bne.n	8005962 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800594c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <TIM_OC3_SetConfig+0xe0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d003      	beq.n	8005972 <TIM_OC3_SetConfig+0x92>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <TIM_OC3_SetConfig+0xe4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d113      	bne.n	800599a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40010400 	.word	0x40010400

080059c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	031b      	lsls	r3, r3, #12
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <TIM_OC4_SetConfig+0xa4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_OC4_SetConfig+0x68>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a11      	ldr	r2, [pc, #68]	; (8005a70 <TIM_OC4_SetConfig+0xa8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d109      	bne.n	8005a44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	40010400 	.word	0x40010400

08005a74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f023 0201 	bic.w	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <TIM_TI1_SetConfig+0xcc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01b      	beq.n	8005ada <TIM_TI1_SetConfig+0x66>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa8:	d017      	beq.n	8005ada <TIM_TI1_SetConfig+0x66>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a25      	ldr	r2, [pc, #148]	; (8005b44 <TIM_TI1_SetConfig+0xd0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <TIM_TI1_SetConfig+0x66>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4a24      	ldr	r2, [pc, #144]	; (8005b48 <TIM_TI1_SetConfig+0xd4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00f      	beq.n	8005ada <TIM_TI1_SetConfig+0x66>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a23      	ldr	r2, [pc, #140]	; (8005b4c <TIM_TI1_SetConfig+0xd8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <TIM_TI1_SetConfig+0x66>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <TIM_TI1_SetConfig+0xdc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <TIM_TI1_SetConfig+0x66>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a21      	ldr	r2, [pc, #132]	; (8005b54 <TIM_TI1_SetConfig+0xe0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <TIM_TI1_SetConfig+0x66>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4a20      	ldr	r2, [pc, #128]	; (8005b58 <TIM_TI1_SetConfig+0xe4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d101      	bne.n	8005ade <TIM_TI1_SetConfig+0x6a>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <TIM_TI1_SetConfig+0x6c>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d008      	beq.n	8005af6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e003      	b.n	8005afe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f023 030a 	bic.w	r3, r3, #10
 8005b18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f003 030a 	and.w	r3, r3, #10
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40010000 	.word	0x40010000
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40000800 	.word	0x40000800
 8005b4c:	40000c00 	.word	0x40000c00
 8005b50:	40010400 	.word	0x40010400
 8005b54:	40014000 	.word	0x40014000
 8005b58:	40001800 	.word	0x40001800

08005b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f023 0201 	bic.w	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	011b      	lsls	r3, r3, #4
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f023 030a 	bic.w	r3, r3, #10
 8005b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	621a      	str	r2, [r3, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b087      	sub	sp, #28
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f023 0210 	bic.w	r2, r3, #16
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	621a      	str	r2, [r3, #32]
}
 8005c28:	bf00      	nop
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f023 0210 	bic.w	r2, r3, #16
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	031b      	lsls	r3, r3, #12
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	621a      	str	r2, [r3, #32]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 0303 	bic.w	r3, r3, #3
 8005cc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ce4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	031b      	lsls	r3, r3, #12
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	031b      	lsls	r3, r3, #12
 8005d64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f043 0307 	orr.w	r3, r3, #7
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	609a      	str	r2, [r3, #8]
}
 8005db0:	bf00      	nop
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	021a      	lsls	r2, r3, #8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	609a      	str	r2, [r3, #8]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2201      	movs	r2, #1
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a1a      	ldr	r2, [r3, #32]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	401a      	ands	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1a      	ldr	r2, [r3, #32]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	fa01 f303 	lsl.w	r3, r1, r3
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	bf00      	nop
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2204      	movs	r2, #4
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 f901 	bl	8006060 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e6c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b06      	cmp	r3, #6
 8005e7e:	d007      	beq.n	8005e90 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d101      	bne.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	e05a      	b.n	8005f6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a21      	ldr	r2, [pc, #132]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d022      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d01d      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1d      	ldr	r2, [pc, #116]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d018      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a1a      	ldr	r2, [pc, #104]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00e      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a18      	ldr	r2, [pc, #96]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d009      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a17      	ldr	r2, [pc, #92]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d004      	beq.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d10c      	bne.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40010400 	.word	0x40010400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	40001800 	.word	0x40001800

08005f94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e03d      	b.n	800602c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	2204      	movs	r2, #4
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a1a      	ldr	r2, [r3, #32]
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	43db      	mvns	r3, r3
 8006082:	401a      	ands	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a1a      	ldr	r2, [r3, #32]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	fa01 f303 	lsl.w	r3, r1, r3
 8006098:	431a      	orrs	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e03f      	b.n	800613c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fc f9b1 	bl	8002438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2224      	movs	r2, #36	; 0x24
 80060da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fb96 	bl	8006820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006102:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695a      	ldr	r2, [r3, #20]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006112:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006122:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2220      	movs	r2, #32
 800612e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b20      	cmp	r3, #32
 8006162:	f040 8083 	bne.w	800626c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_UART_Transmit+0x2e>
 800616c:	88fb      	ldrh	r3, [r7, #6]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e07b      	b.n	800626e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_UART_Transmit+0x40>
 8006180:	2302      	movs	r3, #2
 8006182:	e074      	b.n	800626e <HAL_UART_Transmit+0x12a>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2221      	movs	r2, #33	; 0x21
 8006196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800619a:	f7fc fe4f 	bl	8002e3c <HAL_GetTick>
 800619e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	88fa      	ldrh	r2, [r7, #6]
 80061a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	88fa      	ldrh	r2, [r7, #6]
 80061aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80061b4:	e042      	b.n	800623c <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061cc:	d122      	bne.n	8006214 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2200      	movs	r2, #0
 80061d6:	2180      	movs	r1, #128	; 0x80
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f9b5 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e042      	b.n	800626e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061fa:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	3302      	adds	r3, #2
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	e017      	b.n	800623c <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	3301      	adds	r3, #1
 8006210:	60bb      	str	r3, [r7, #8]
 8006212:	e013      	b.n	800623c <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2200      	movs	r2, #0
 800621c:	2180      	movs	r1, #128	; 0x80
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 f992 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e01f      	b.n	800626e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	60ba      	str	r2, [r7, #8]
 8006234:	781a      	ldrb	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1b7      	bne.n	80061b6 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2200      	movs	r2, #0
 800624e:	2140      	movs	r1, #64	; 0x40
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f979 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e006      	b.n	800626e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006276:	b480      	push	{r7}
 8006278:	b085      	sub	sp, #20
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	4613      	mov	r3, r2
 8006282:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b20      	cmp	r3, #32
 800628e:	d140      	bne.n	8006312 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_UART_Receive_IT+0x26>
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e039      	b.n	8006314 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_UART_Receive_IT+0x38>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e032      	b.n	8006314 <HAL_UART_Receive_IT+0x9e>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	88fa      	ldrh	r2, [r7, #6]
 80062c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	88fa      	ldrh	r2, [r7, #6]
 80062c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2222      	movs	r2, #34	; 0x22
 80062d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ec:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695a      	ldr	r2, [r3, #20]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0201 	orr.w	r2, r2, #1
 80062fc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0220 	orr.w	r2, r2, #32
 800630c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	e000      	b.n	8006314 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006312:	2302      	movs	r3, #2
  }
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006340:	2300      	movs	r3, #0
 8006342:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006344:	2300      	movs	r3, #0
 8006346:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10d      	bne.n	8006372 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_UART_IRQHandler+0x52>
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f9d6 	bl	800671c <UART_Receive_IT>
      return;
 8006370:	e0d1      	b.n	8006516 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80b0 	beq.w	80064da <HAL_UART_IRQHandler+0x1ba>
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <HAL_UART_IRQHandler+0x70>
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80a5 	beq.w	80064da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_UART_IRQHandler+0x90>
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a8:	f043 0201 	orr.w	r2, r3, #1
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <HAL_UART_IRQHandler+0xb0>
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c8:	f043 0202 	orr.w	r2, r3, #2
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_UART_IRQHandler+0xd0>
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e8:	f043 0204 	orr.w	r2, r3, #4
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00f      	beq.n	800641a <HAL_UART_IRQHandler+0xfa>
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <HAL_UART_IRQHandler+0xee>
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006412:	f043 0208 	orr.w	r2, r3, #8
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d078      	beq.n	8006514 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	f003 0320 	and.w	r3, r3, #32
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <HAL_UART_IRQHandler+0x11c>
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f970 	bl	800671c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006446:	2b40      	cmp	r3, #64	; 0x40
 8006448:	bf0c      	ite	eq
 800644a:	2301      	moveq	r3, #1
 800644c:	2300      	movne	r3, #0
 800644e:	b2db      	uxtb	r3, r3
 8006450:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d102      	bne.n	8006464 <HAL_UART_IRQHandler+0x144>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d031      	beq.n	80064c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f8b9 	bl	80065dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d123      	bne.n	80064c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695a      	ldr	r2, [r3, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006486:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648c:	2b00      	cmp	r3, #0
 800648e:	d013      	beq.n	80064b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006494:	4a21      	ldr	r2, [pc, #132]	; (800651c <HAL_UART_IRQHandler+0x1fc>)
 8006496:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	4618      	mov	r0, r3
 800649e:	f7fd fafd 	bl	8003a9c <HAL_DMA_Abort_IT>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d016      	beq.n	80064d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064b2:	4610      	mov	r0, r2
 80064b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b6:	e00e      	b.n	80064d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f83b 	bl	8006534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064be:	e00a      	b.n	80064d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f837 	bl	8006534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c6:	e006      	b.n	80064d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f833 	bl	8006534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80064d4:	e01e      	b.n	8006514 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d6:	bf00      	nop
    return;
 80064d8:	e01c      	b.n	8006514 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d008      	beq.n	80064f6 <HAL_UART_IRQHandler+0x1d6>
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8a6 	bl	8006640 <UART_Transmit_IT>
    return;
 80064f4:	e00f      	b.n	8006516 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <HAL_UART_IRQHandler+0x1f6>
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8ee 	bl	80066ec <UART_EndTransmit_IT>
    return;
 8006510:	bf00      	nop
 8006512:	e000      	b.n	8006516 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006514:	bf00      	nop
  }
}
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	08006619 	.word	0x08006619

08006520 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006558:	e02c      	b.n	80065b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d028      	beq.n	80065b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <UART_WaitOnFlagUntilTimeout+0x30>
 8006568:	f7fc fc68 	bl	8002e3c <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	429a      	cmp	r2, r3
 8006576:	d21d      	bcs.n	80065b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006586:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695a      	ldr	r2, [r3, #20]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0201 	bic.w	r2, r2, #1
 8006596:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e00f      	b.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	4013      	ands	r3, r2
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	bf0c      	ite	eq
 80065c4:	2301      	moveq	r3, #1
 80065c6:	2300      	movne	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	461a      	mov	r2, r3
 80065cc:	79fb      	ldrb	r3, [r7, #7]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d0c3      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80065f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695a      	ldr	r2, [r3, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff ff7e 	bl	8006534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b21      	cmp	r3, #33	; 0x21
 8006652:	d144      	bne.n	80066de <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665c:	d11a      	bne.n	8006694 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006672:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d105      	bne.n	8006688 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	1c9a      	adds	r2, r3, #2
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]
 8006686:	e00e      	b.n	80066a6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	621a      	str	r2, [r3, #32]
 8006692:	e008      	b.n	80066a6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	1c59      	adds	r1, r3, #1
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6211      	str	r1, [r2, #32]
 800669e:	781a      	ldrb	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	4619      	mov	r1, r3
 80066b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10f      	bne.n	80066da <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	e000      	b.n	80066e0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80066de:	2302      	movs	r3, #2
  }
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006702:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff ff07 	bl	8006520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b22      	cmp	r3, #34	; 0x22
 800672e:	d171      	bne.n	8006814 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006738:	d123      	bne.n	8006782 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10e      	bne.n	8006766 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	b29b      	uxth	r3, r3
 8006750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	1c9a      	adds	r2, r3, #2
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	629a      	str	r2, [r3, #40]	; 0x28
 8006764:	e029      	b.n	80067ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	b29b      	uxth	r3, r3
 800676e:	b2db      	uxtb	r3, r3
 8006770:	b29a      	uxth	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	629a      	str	r2, [r3, #40]	; 0x28
 8006780:	e01b      	b.n	80067ba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6858      	ldr	r0, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	1c59      	adds	r1, r3, #1
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6291      	str	r1, [r2, #40]	; 0x28
 800679a:	b2c2      	uxtb	r2, r0
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	e00c      	b.n	80067ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	1c58      	adds	r0, r3, #1
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	6288      	str	r0, [r1, #40]	; 0x28
 80067b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	4619      	mov	r1, r3
 80067c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d120      	bne.n	8006810 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0220 	bic.w	r2, r2, #32
 80067dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695a      	ldr	r2, [r3, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fc fa0e 	bl	8002c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	e002      	b.n	8006816 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	e000      	b.n	8006816 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006814:	2302      	movs	r3, #2
  }
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006862:	f023 030c 	bic.w	r3, r3, #12
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6812      	ldr	r2, [r2, #0]
 800686a:	68f9      	ldr	r1, [r7, #12]
 800686c:	430b      	orrs	r3, r1
 800686e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688e:	f040 818b 	bne.w	8006ba8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4ac1      	ldr	r2, [pc, #772]	; (8006b9c <UART_SetConfig+0x37c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d005      	beq.n	80068a8 <UART_SetConfig+0x88>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4abf      	ldr	r2, [pc, #764]	; (8006ba0 <UART_SetConfig+0x380>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	f040 80bd 	bne.w	8006a22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068a8:	f7fe f99c 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
 80068ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	461d      	mov	r5, r3
 80068b2:	f04f 0600 	mov.w	r6, #0
 80068b6:	46a8      	mov	r8, r5
 80068b8:	46b1      	mov	r9, r6
 80068ba:	eb18 0308 	adds.w	r3, r8, r8
 80068be:	eb49 0409 	adc.w	r4, r9, r9
 80068c2:	4698      	mov	r8, r3
 80068c4:	46a1      	mov	r9, r4
 80068c6:	eb18 0805 	adds.w	r8, r8, r5
 80068ca:	eb49 0906 	adc.w	r9, r9, r6
 80068ce:	f04f 0100 	mov.w	r1, #0
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068e2:	4688      	mov	r8, r1
 80068e4:	4691      	mov	r9, r2
 80068e6:	eb18 0005 	adds.w	r0, r8, r5
 80068ea:	eb49 0106 	adc.w	r1, r9, r6
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	461d      	mov	r5, r3
 80068f4:	f04f 0600 	mov.w	r6, #0
 80068f8:	196b      	adds	r3, r5, r5
 80068fa:	eb46 0406 	adc.w	r4, r6, r6
 80068fe:	461a      	mov	r2, r3
 8006900:	4623      	mov	r3, r4
 8006902:	f7fa f9a1 	bl	8000c48 <__aeabi_uldivmod>
 8006906:	4603      	mov	r3, r0
 8006908:	460c      	mov	r4, r1
 800690a:	461a      	mov	r2, r3
 800690c:	4ba5      	ldr	r3, [pc, #660]	; (8006ba4 <UART_SetConfig+0x384>)
 800690e:	fba3 2302 	umull	r2, r3, r3, r2
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	461d      	mov	r5, r3
 800691c:	f04f 0600 	mov.w	r6, #0
 8006920:	46a9      	mov	r9, r5
 8006922:	46b2      	mov	sl, r6
 8006924:	eb19 0309 	adds.w	r3, r9, r9
 8006928:	eb4a 040a 	adc.w	r4, sl, sl
 800692c:	4699      	mov	r9, r3
 800692e:	46a2      	mov	sl, r4
 8006930:	eb19 0905 	adds.w	r9, r9, r5
 8006934:	eb4a 0a06 	adc.w	sl, sl, r6
 8006938:	f04f 0100 	mov.w	r1, #0
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006944:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006948:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800694c:	4689      	mov	r9, r1
 800694e:	4692      	mov	sl, r2
 8006950:	eb19 0005 	adds.w	r0, r9, r5
 8006954:	eb4a 0106 	adc.w	r1, sl, r6
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	461d      	mov	r5, r3
 800695e:	f04f 0600 	mov.w	r6, #0
 8006962:	196b      	adds	r3, r5, r5
 8006964:	eb46 0406 	adc.w	r4, r6, r6
 8006968:	461a      	mov	r2, r3
 800696a:	4623      	mov	r3, r4
 800696c:	f7fa f96c 	bl	8000c48 <__aeabi_uldivmod>
 8006970:	4603      	mov	r3, r0
 8006972:	460c      	mov	r4, r1
 8006974:	461a      	mov	r2, r3
 8006976:	4b8b      	ldr	r3, [pc, #556]	; (8006ba4 <UART_SetConfig+0x384>)
 8006978:	fba3 1302 	umull	r1, r3, r3, r2
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	2164      	movs	r1, #100	; 0x64
 8006980:	fb01 f303 	mul.w	r3, r1, r3
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	3332      	adds	r3, #50	; 0x32
 800698a:	4a86      	ldr	r2, [pc, #536]	; (8006ba4 <UART_SetConfig+0x384>)
 800698c:	fba2 2303 	umull	r2, r3, r2, r3
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006998:	4498      	add	r8, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	461d      	mov	r5, r3
 800699e:	f04f 0600 	mov.w	r6, #0
 80069a2:	46a9      	mov	r9, r5
 80069a4:	46b2      	mov	sl, r6
 80069a6:	eb19 0309 	adds.w	r3, r9, r9
 80069aa:	eb4a 040a 	adc.w	r4, sl, sl
 80069ae:	4699      	mov	r9, r3
 80069b0:	46a2      	mov	sl, r4
 80069b2:	eb19 0905 	adds.w	r9, r9, r5
 80069b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80069ba:	f04f 0100 	mov.w	r1, #0
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069ce:	4689      	mov	r9, r1
 80069d0:	4692      	mov	sl, r2
 80069d2:	eb19 0005 	adds.w	r0, r9, r5
 80069d6:	eb4a 0106 	adc.w	r1, sl, r6
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	461d      	mov	r5, r3
 80069e0:	f04f 0600 	mov.w	r6, #0
 80069e4:	196b      	adds	r3, r5, r5
 80069e6:	eb46 0406 	adc.w	r4, r6, r6
 80069ea:	461a      	mov	r2, r3
 80069ec:	4623      	mov	r3, r4
 80069ee:	f7fa f92b 	bl	8000c48 <__aeabi_uldivmod>
 80069f2:	4603      	mov	r3, r0
 80069f4:	460c      	mov	r4, r1
 80069f6:	461a      	mov	r2, r3
 80069f8:	4b6a      	ldr	r3, [pc, #424]	; (8006ba4 <UART_SetConfig+0x384>)
 80069fa:	fba3 1302 	umull	r1, r3, r3, r2
 80069fe:	095b      	lsrs	r3, r3, #5
 8006a00:	2164      	movs	r1, #100	; 0x64
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	3332      	adds	r3, #50	; 0x32
 8006a0c:	4a65      	ldr	r2, [pc, #404]	; (8006ba4 <UART_SetConfig+0x384>)
 8006a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	f003 0207 	and.w	r2, r3, #7
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4442      	add	r2, r8
 8006a1e:	609a      	str	r2, [r3, #8]
 8006a20:	e26f      	b.n	8006f02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a22:	f7fe f8cb 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8006a26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	461d      	mov	r5, r3
 8006a2c:	f04f 0600 	mov.w	r6, #0
 8006a30:	46a8      	mov	r8, r5
 8006a32:	46b1      	mov	r9, r6
 8006a34:	eb18 0308 	adds.w	r3, r8, r8
 8006a38:	eb49 0409 	adc.w	r4, r9, r9
 8006a3c:	4698      	mov	r8, r3
 8006a3e:	46a1      	mov	r9, r4
 8006a40:	eb18 0805 	adds.w	r8, r8, r5
 8006a44:	eb49 0906 	adc.w	r9, r9, r6
 8006a48:	f04f 0100 	mov.w	r1, #0
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a5c:	4688      	mov	r8, r1
 8006a5e:	4691      	mov	r9, r2
 8006a60:	eb18 0005 	adds.w	r0, r8, r5
 8006a64:	eb49 0106 	adc.w	r1, r9, r6
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	461d      	mov	r5, r3
 8006a6e:	f04f 0600 	mov.w	r6, #0
 8006a72:	196b      	adds	r3, r5, r5
 8006a74:	eb46 0406 	adc.w	r4, r6, r6
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	f7fa f8e4 	bl	8000c48 <__aeabi_uldivmod>
 8006a80:	4603      	mov	r3, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	461a      	mov	r2, r3
 8006a86:	4b47      	ldr	r3, [pc, #284]	; (8006ba4 <UART_SetConfig+0x384>)
 8006a88:	fba3 2302 	umull	r2, r3, r3, r2
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	461d      	mov	r5, r3
 8006a96:	f04f 0600 	mov.w	r6, #0
 8006a9a:	46a9      	mov	r9, r5
 8006a9c:	46b2      	mov	sl, r6
 8006a9e:	eb19 0309 	adds.w	r3, r9, r9
 8006aa2:	eb4a 040a 	adc.w	r4, sl, sl
 8006aa6:	4699      	mov	r9, r3
 8006aa8:	46a2      	mov	sl, r4
 8006aaa:	eb19 0905 	adds.w	r9, r9, r5
 8006aae:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ab2:	f04f 0100 	mov.w	r1, #0
 8006ab6:	f04f 0200 	mov.w	r2, #0
 8006aba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006abe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ac2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ac6:	4689      	mov	r9, r1
 8006ac8:	4692      	mov	sl, r2
 8006aca:	eb19 0005 	adds.w	r0, r9, r5
 8006ace:	eb4a 0106 	adc.w	r1, sl, r6
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	461d      	mov	r5, r3
 8006ad8:	f04f 0600 	mov.w	r6, #0
 8006adc:	196b      	adds	r3, r5, r5
 8006ade:	eb46 0406 	adc.w	r4, r6, r6
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	4623      	mov	r3, r4
 8006ae6:	f7fa f8af 	bl	8000c48 <__aeabi_uldivmod>
 8006aea:	4603      	mov	r3, r0
 8006aec:	460c      	mov	r4, r1
 8006aee:	461a      	mov	r2, r3
 8006af0:	4b2c      	ldr	r3, [pc, #176]	; (8006ba4 <UART_SetConfig+0x384>)
 8006af2:	fba3 1302 	umull	r1, r3, r3, r2
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	2164      	movs	r1, #100	; 0x64
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	3332      	adds	r3, #50	; 0x32
 8006b04:	4a27      	ldr	r2, [pc, #156]	; (8006ba4 <UART_SetConfig+0x384>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b12:	4498      	add	r8, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	461d      	mov	r5, r3
 8006b18:	f04f 0600 	mov.w	r6, #0
 8006b1c:	46a9      	mov	r9, r5
 8006b1e:	46b2      	mov	sl, r6
 8006b20:	eb19 0309 	adds.w	r3, r9, r9
 8006b24:	eb4a 040a 	adc.w	r4, sl, sl
 8006b28:	4699      	mov	r9, r3
 8006b2a:	46a2      	mov	sl, r4
 8006b2c:	eb19 0905 	adds.w	r9, r9, r5
 8006b30:	eb4a 0a06 	adc.w	sl, sl, r6
 8006b34:	f04f 0100 	mov.w	r1, #0
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b48:	4689      	mov	r9, r1
 8006b4a:	4692      	mov	sl, r2
 8006b4c:	eb19 0005 	adds.w	r0, r9, r5
 8006b50:	eb4a 0106 	adc.w	r1, sl, r6
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	461d      	mov	r5, r3
 8006b5a:	f04f 0600 	mov.w	r6, #0
 8006b5e:	196b      	adds	r3, r5, r5
 8006b60:	eb46 0406 	adc.w	r4, r6, r6
 8006b64:	461a      	mov	r2, r3
 8006b66:	4623      	mov	r3, r4
 8006b68:	f7fa f86e 	bl	8000c48 <__aeabi_uldivmod>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	461a      	mov	r2, r3
 8006b72:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <UART_SetConfig+0x384>)
 8006b74:	fba3 1302 	umull	r1, r3, r3, r2
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	2164      	movs	r1, #100	; 0x64
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	3332      	adds	r3, #50	; 0x32
 8006b86:	4a07      	ldr	r2, [pc, #28]	; (8006ba4 <UART_SetConfig+0x384>)
 8006b88:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	f003 0207 	and.w	r2, r3, #7
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4442      	add	r2, r8
 8006b98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006b9a:	e1b2      	b.n	8006f02 <UART_SetConfig+0x6e2>
 8006b9c:	40011000 	.word	0x40011000
 8006ba0:	40011400 	.word	0x40011400
 8006ba4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4ad7      	ldr	r2, [pc, #860]	; (8006f0c <UART_SetConfig+0x6ec>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d005      	beq.n	8006bbe <UART_SetConfig+0x39e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4ad6      	ldr	r2, [pc, #856]	; (8006f10 <UART_SetConfig+0x6f0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	f040 80d1 	bne.w	8006d60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bbe:	f7fe f811 	bl	8004be4 <HAL_RCC_GetPCLK2Freq>
 8006bc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	469a      	mov	sl, r3
 8006bc8:	f04f 0b00 	mov.w	fp, #0
 8006bcc:	46d0      	mov	r8, sl
 8006bce:	46d9      	mov	r9, fp
 8006bd0:	eb18 0308 	adds.w	r3, r8, r8
 8006bd4:	eb49 0409 	adc.w	r4, r9, r9
 8006bd8:	4698      	mov	r8, r3
 8006bda:	46a1      	mov	r9, r4
 8006bdc:	eb18 080a 	adds.w	r8, r8, sl
 8006be0:	eb49 090b 	adc.w	r9, r9, fp
 8006be4:	f04f 0100 	mov.w	r1, #0
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bf8:	4688      	mov	r8, r1
 8006bfa:	4691      	mov	r9, r2
 8006bfc:	eb1a 0508 	adds.w	r5, sl, r8
 8006c00:	eb4b 0609 	adc.w	r6, fp, r9
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	f04f 0400 	mov.w	r4, #0
 8006c16:	0094      	lsls	r4, r2, #2
 8006c18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c1c:	008b      	lsls	r3, r1, #2
 8006c1e:	461a      	mov	r2, r3
 8006c20:	4623      	mov	r3, r4
 8006c22:	4628      	mov	r0, r5
 8006c24:	4631      	mov	r1, r6
 8006c26:	f7fa f80f 	bl	8000c48 <__aeabi_uldivmod>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	461a      	mov	r2, r3
 8006c30:	4bb8      	ldr	r3, [pc, #736]	; (8006f14 <UART_SetConfig+0x6f4>)
 8006c32:	fba3 2302 	umull	r2, r3, r3, r2
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	469b      	mov	fp, r3
 8006c40:	f04f 0c00 	mov.w	ip, #0
 8006c44:	46d9      	mov	r9, fp
 8006c46:	46e2      	mov	sl, ip
 8006c48:	eb19 0309 	adds.w	r3, r9, r9
 8006c4c:	eb4a 040a 	adc.w	r4, sl, sl
 8006c50:	4699      	mov	r9, r3
 8006c52:	46a2      	mov	sl, r4
 8006c54:	eb19 090b 	adds.w	r9, r9, fp
 8006c58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c5c:	f04f 0100 	mov.w	r1, #0
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c70:	4689      	mov	r9, r1
 8006c72:	4692      	mov	sl, r2
 8006c74:	eb1b 0509 	adds.w	r5, fp, r9
 8006c78:	eb4c 060a 	adc.w	r6, ip, sl
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4619      	mov	r1, r3
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	f04f 0400 	mov.w	r4, #0
 8006c8e:	0094      	lsls	r4, r2, #2
 8006c90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c94:	008b      	lsls	r3, r1, #2
 8006c96:	461a      	mov	r2, r3
 8006c98:	4623      	mov	r3, r4
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	f7f9 ffd3 	bl	8000c48 <__aeabi_uldivmod>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	4b9a      	ldr	r3, [pc, #616]	; (8006f14 <UART_SetConfig+0x6f4>)
 8006caa:	fba3 1302 	umull	r1, r3, r3, r2
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	2164      	movs	r1, #100	; 0x64
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	3332      	adds	r3, #50	; 0x32
 8006cbc:	4a95      	ldr	r2, [pc, #596]	; (8006f14 <UART_SetConfig+0x6f4>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cc8:	4498      	add	r8, r3
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	469b      	mov	fp, r3
 8006cce:	f04f 0c00 	mov.w	ip, #0
 8006cd2:	46d9      	mov	r9, fp
 8006cd4:	46e2      	mov	sl, ip
 8006cd6:	eb19 0309 	adds.w	r3, r9, r9
 8006cda:	eb4a 040a 	adc.w	r4, sl, sl
 8006cde:	4699      	mov	r9, r3
 8006ce0:	46a2      	mov	sl, r4
 8006ce2:	eb19 090b 	adds.w	r9, r9, fp
 8006ce6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cea:	f04f 0100 	mov.w	r1, #0
 8006cee:	f04f 0200 	mov.w	r2, #0
 8006cf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cfe:	4689      	mov	r9, r1
 8006d00:	4692      	mov	sl, r2
 8006d02:	eb1b 0509 	adds.w	r5, fp, r9
 8006d06:	eb4c 060a 	adc.w	r6, ip, sl
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	f04f 0400 	mov.w	r4, #0
 8006d1c:	0094      	lsls	r4, r2, #2
 8006d1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d22:	008b      	lsls	r3, r1, #2
 8006d24:	461a      	mov	r2, r3
 8006d26:	4623      	mov	r3, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	f7f9 ff8c 	bl	8000c48 <__aeabi_uldivmod>
 8006d30:	4603      	mov	r3, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	461a      	mov	r2, r3
 8006d36:	4b77      	ldr	r3, [pc, #476]	; (8006f14 <UART_SetConfig+0x6f4>)
 8006d38:	fba3 1302 	umull	r1, r3, r3, r2
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	2164      	movs	r1, #100	; 0x64
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	3332      	adds	r3, #50	; 0x32
 8006d4a:	4a72      	ldr	r2, [pc, #456]	; (8006f14 <UART_SetConfig+0x6f4>)
 8006d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	f003 020f 	and.w	r2, r3, #15
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4442      	add	r2, r8
 8006d5c:	609a      	str	r2, [r3, #8]
 8006d5e:	e0d0      	b.n	8006f02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d60:	f7fd ff2c 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 8006d64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	469a      	mov	sl, r3
 8006d6a:	f04f 0b00 	mov.w	fp, #0
 8006d6e:	46d0      	mov	r8, sl
 8006d70:	46d9      	mov	r9, fp
 8006d72:	eb18 0308 	adds.w	r3, r8, r8
 8006d76:	eb49 0409 	adc.w	r4, r9, r9
 8006d7a:	4698      	mov	r8, r3
 8006d7c:	46a1      	mov	r9, r4
 8006d7e:	eb18 080a 	adds.w	r8, r8, sl
 8006d82:	eb49 090b 	adc.w	r9, r9, fp
 8006d86:	f04f 0100 	mov.w	r1, #0
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d9a:	4688      	mov	r8, r1
 8006d9c:	4691      	mov	r9, r2
 8006d9e:	eb1a 0508 	adds.w	r5, sl, r8
 8006da2:	eb4b 0609 	adc.w	r6, fp, r9
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	4619      	mov	r1, r3
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	f04f 0400 	mov.w	r4, #0
 8006db8:	0094      	lsls	r4, r2, #2
 8006dba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006dbe:	008b      	lsls	r3, r1, #2
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4623      	mov	r3, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	f7f9 ff3e 	bl	8000c48 <__aeabi_uldivmod>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4b50      	ldr	r3, [pc, #320]	; (8006f14 <UART_SetConfig+0x6f4>)
 8006dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	469b      	mov	fp, r3
 8006de2:	f04f 0c00 	mov.w	ip, #0
 8006de6:	46d9      	mov	r9, fp
 8006de8:	46e2      	mov	sl, ip
 8006dea:	eb19 0309 	adds.w	r3, r9, r9
 8006dee:	eb4a 040a 	adc.w	r4, sl, sl
 8006df2:	4699      	mov	r9, r3
 8006df4:	46a2      	mov	sl, r4
 8006df6:	eb19 090b 	adds.w	r9, r9, fp
 8006dfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006dfe:	f04f 0100 	mov.w	r1, #0
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e12:	4689      	mov	r9, r1
 8006e14:	4692      	mov	sl, r2
 8006e16:	eb1b 0509 	adds.w	r5, fp, r9
 8006e1a:	eb4c 060a 	adc.w	r6, ip, sl
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	4619      	mov	r1, r3
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	f04f 0400 	mov.w	r4, #0
 8006e30:	0094      	lsls	r4, r2, #2
 8006e32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006e36:	008b      	lsls	r3, r1, #2
 8006e38:	461a      	mov	r2, r3
 8006e3a:	4623      	mov	r3, r4
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	4631      	mov	r1, r6
 8006e40:	f7f9 ff02 	bl	8000c48 <__aeabi_uldivmod>
 8006e44:	4603      	mov	r3, r0
 8006e46:	460c      	mov	r4, r1
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4b32      	ldr	r3, [pc, #200]	; (8006f14 <UART_SetConfig+0x6f4>)
 8006e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e50:	095b      	lsrs	r3, r3, #5
 8006e52:	2164      	movs	r1, #100	; 0x64
 8006e54:	fb01 f303 	mul.w	r3, r1, r3
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	3332      	adds	r3, #50	; 0x32
 8006e5e:	4a2d      	ldr	r2, [pc, #180]	; (8006f14 <UART_SetConfig+0x6f4>)
 8006e60:	fba2 2303 	umull	r2, r3, r2, r3
 8006e64:	095b      	lsrs	r3, r3, #5
 8006e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e6a:	4498      	add	r8, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	469b      	mov	fp, r3
 8006e70:	f04f 0c00 	mov.w	ip, #0
 8006e74:	46d9      	mov	r9, fp
 8006e76:	46e2      	mov	sl, ip
 8006e78:	eb19 0309 	adds.w	r3, r9, r9
 8006e7c:	eb4a 040a 	adc.w	r4, sl, sl
 8006e80:	4699      	mov	r9, r3
 8006e82:	46a2      	mov	sl, r4
 8006e84:	eb19 090b 	adds.w	r9, r9, fp
 8006e88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006e8c:	f04f 0100 	mov.w	r1, #0
 8006e90:	f04f 0200 	mov.w	r2, #0
 8006e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ea0:	4689      	mov	r9, r1
 8006ea2:	4692      	mov	sl, r2
 8006ea4:	eb1b 0509 	adds.w	r5, fp, r9
 8006ea8:	eb4c 060a 	adc.w	r6, ip, sl
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f04f 0200 	mov.w	r2, #0
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	f04f 0400 	mov.w	r4, #0
 8006ebe:	0094      	lsls	r4, r2, #2
 8006ec0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ec4:	008b      	lsls	r3, r1, #2
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	4623      	mov	r3, r4
 8006eca:	4628      	mov	r0, r5
 8006ecc:	4631      	mov	r1, r6
 8006ece:	f7f9 febb 	bl	8000c48 <__aeabi_uldivmod>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4b0e      	ldr	r3, [pc, #56]	; (8006f14 <UART_SetConfig+0x6f4>)
 8006eda:	fba3 1302 	umull	r1, r3, r3, r2
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	2164      	movs	r1, #100	; 0x64
 8006ee2:	fb01 f303 	mul.w	r3, r1, r3
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	3332      	adds	r3, #50	; 0x32
 8006eec:	4a09      	ldr	r2, [pc, #36]	; (8006f14 <UART_SetConfig+0x6f4>)
 8006eee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	f003 020f 	and.w	r2, r3, #15
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4442      	add	r2, r8
 8006efe:	609a      	str	r2, [r3, #8]
}
 8006f00:	e7ff      	b.n	8006f02 <UART_SetConfig+0x6e2>
 8006f02:	bf00      	nop
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0c:	40011000 	.word	0x40011000
 8006f10:	40011400 	.word	0x40011400
 8006f14:	51eb851f 	.word	0x51eb851f

08006f18 <__errno>:
 8006f18:	4b01      	ldr	r3, [pc, #4]	; (8006f20 <__errno+0x8>)
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	2000002c 	.word	0x2000002c

08006f24 <__libc_init_array>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	4e0d      	ldr	r6, [pc, #52]	; (8006f5c <__libc_init_array+0x38>)
 8006f28:	4c0d      	ldr	r4, [pc, #52]	; (8006f60 <__libc_init_array+0x3c>)
 8006f2a:	1ba4      	subs	r4, r4, r6
 8006f2c:	10a4      	asrs	r4, r4, #2
 8006f2e:	2500      	movs	r5, #0
 8006f30:	42a5      	cmp	r5, r4
 8006f32:	d109      	bne.n	8006f48 <__libc_init_array+0x24>
 8006f34:	4e0b      	ldr	r6, [pc, #44]	; (8006f64 <__libc_init_array+0x40>)
 8006f36:	4c0c      	ldr	r4, [pc, #48]	; (8006f68 <__libc_init_array+0x44>)
 8006f38:	f002 fd66 	bl	8009a08 <_init>
 8006f3c:	1ba4      	subs	r4, r4, r6
 8006f3e:	10a4      	asrs	r4, r4, #2
 8006f40:	2500      	movs	r5, #0
 8006f42:	42a5      	cmp	r5, r4
 8006f44:	d105      	bne.n	8006f52 <__libc_init_array+0x2e>
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f4c:	4798      	blx	r3
 8006f4e:	3501      	adds	r5, #1
 8006f50:	e7ee      	b.n	8006f30 <__libc_init_array+0xc>
 8006f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f56:	4798      	blx	r3
 8006f58:	3501      	adds	r5, #1
 8006f5a:	e7f2      	b.n	8006f42 <__libc_init_array+0x1e>
 8006f5c:	08009e10 	.word	0x08009e10
 8006f60:	08009e10 	.word	0x08009e10
 8006f64:	08009e10 	.word	0x08009e10
 8006f68:	08009e14 	.word	0x08009e14

08006f6c <memset>:
 8006f6c:	4402      	add	r2, r0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d100      	bne.n	8006f76 <memset+0xa>
 8006f74:	4770      	bx	lr
 8006f76:	f803 1b01 	strb.w	r1, [r3], #1
 8006f7a:	e7f9      	b.n	8006f70 <memset+0x4>

08006f7c <__cvt>:
 8006f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	ec55 4b10 	vmov	r4, r5, d0
 8006f84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006f86:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f8a:	2d00      	cmp	r5, #0
 8006f8c:	460e      	mov	r6, r1
 8006f8e:	4691      	mov	r9, r2
 8006f90:	4619      	mov	r1, r3
 8006f92:	bfb8      	it	lt
 8006f94:	4622      	movlt	r2, r4
 8006f96:	462b      	mov	r3, r5
 8006f98:	f027 0720 	bic.w	r7, r7, #32
 8006f9c:	bfbb      	ittet	lt
 8006f9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fa2:	461d      	movlt	r5, r3
 8006fa4:	2300      	movge	r3, #0
 8006fa6:	232d      	movlt	r3, #45	; 0x2d
 8006fa8:	bfb8      	it	lt
 8006faa:	4614      	movlt	r4, r2
 8006fac:	2f46      	cmp	r7, #70	; 0x46
 8006fae:	700b      	strb	r3, [r1, #0]
 8006fb0:	d004      	beq.n	8006fbc <__cvt+0x40>
 8006fb2:	2f45      	cmp	r7, #69	; 0x45
 8006fb4:	d100      	bne.n	8006fb8 <__cvt+0x3c>
 8006fb6:	3601      	adds	r6, #1
 8006fb8:	2102      	movs	r1, #2
 8006fba:	e000      	b.n	8006fbe <__cvt+0x42>
 8006fbc:	2103      	movs	r1, #3
 8006fbe:	ab03      	add	r3, sp, #12
 8006fc0:	9301      	str	r3, [sp, #4]
 8006fc2:	ab02      	add	r3, sp, #8
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	4653      	mov	r3, sl
 8006fca:	ec45 4b10 	vmov	d0, r4, r5
 8006fce:	f000 fe1b 	bl	8007c08 <_dtoa_r>
 8006fd2:	2f47      	cmp	r7, #71	; 0x47
 8006fd4:	4680      	mov	r8, r0
 8006fd6:	d102      	bne.n	8006fde <__cvt+0x62>
 8006fd8:	f019 0f01 	tst.w	r9, #1
 8006fdc:	d026      	beq.n	800702c <__cvt+0xb0>
 8006fde:	2f46      	cmp	r7, #70	; 0x46
 8006fe0:	eb08 0906 	add.w	r9, r8, r6
 8006fe4:	d111      	bne.n	800700a <__cvt+0x8e>
 8006fe6:	f898 3000 	ldrb.w	r3, [r8]
 8006fea:	2b30      	cmp	r3, #48	; 0x30
 8006fec:	d10a      	bne.n	8007004 <__cvt+0x88>
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	f7f9 fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ffa:	b918      	cbnz	r0, 8007004 <__cvt+0x88>
 8006ffc:	f1c6 0601 	rsb	r6, r6, #1
 8007000:	f8ca 6000 	str.w	r6, [sl]
 8007004:	f8da 3000 	ldr.w	r3, [sl]
 8007008:	4499      	add	r9, r3
 800700a:	2200      	movs	r2, #0
 800700c:	2300      	movs	r3, #0
 800700e:	4620      	mov	r0, r4
 8007010:	4629      	mov	r1, r5
 8007012:	f7f9 fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 8007016:	b938      	cbnz	r0, 8007028 <__cvt+0xac>
 8007018:	2230      	movs	r2, #48	; 0x30
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	454b      	cmp	r3, r9
 800701e:	d205      	bcs.n	800702c <__cvt+0xb0>
 8007020:	1c59      	adds	r1, r3, #1
 8007022:	9103      	str	r1, [sp, #12]
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	e7f8      	b.n	800701a <__cvt+0x9e>
 8007028:	f8cd 900c 	str.w	r9, [sp, #12]
 800702c:	9b03      	ldr	r3, [sp, #12]
 800702e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007030:	eba3 0308 	sub.w	r3, r3, r8
 8007034:	4640      	mov	r0, r8
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	b004      	add	sp, #16
 800703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800703e <__exponent>:
 800703e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007040:	2900      	cmp	r1, #0
 8007042:	4604      	mov	r4, r0
 8007044:	bfba      	itte	lt
 8007046:	4249      	neglt	r1, r1
 8007048:	232d      	movlt	r3, #45	; 0x2d
 800704a:	232b      	movge	r3, #43	; 0x2b
 800704c:	2909      	cmp	r1, #9
 800704e:	f804 2b02 	strb.w	r2, [r4], #2
 8007052:	7043      	strb	r3, [r0, #1]
 8007054:	dd20      	ble.n	8007098 <__exponent+0x5a>
 8007056:	f10d 0307 	add.w	r3, sp, #7
 800705a:	461f      	mov	r7, r3
 800705c:	260a      	movs	r6, #10
 800705e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007062:	fb06 1115 	mls	r1, r6, r5, r1
 8007066:	3130      	adds	r1, #48	; 0x30
 8007068:	2d09      	cmp	r5, #9
 800706a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800706e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007072:	4629      	mov	r1, r5
 8007074:	dc09      	bgt.n	800708a <__exponent+0x4c>
 8007076:	3130      	adds	r1, #48	; 0x30
 8007078:	3b02      	subs	r3, #2
 800707a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800707e:	42bb      	cmp	r3, r7
 8007080:	4622      	mov	r2, r4
 8007082:	d304      	bcc.n	800708e <__exponent+0x50>
 8007084:	1a10      	subs	r0, r2, r0
 8007086:	b003      	add	sp, #12
 8007088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800708a:	4613      	mov	r3, r2
 800708c:	e7e7      	b.n	800705e <__exponent+0x20>
 800708e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007092:	f804 2b01 	strb.w	r2, [r4], #1
 8007096:	e7f2      	b.n	800707e <__exponent+0x40>
 8007098:	2330      	movs	r3, #48	; 0x30
 800709a:	4419      	add	r1, r3
 800709c:	7083      	strb	r3, [r0, #2]
 800709e:	1d02      	adds	r2, r0, #4
 80070a0:	70c1      	strb	r1, [r0, #3]
 80070a2:	e7ef      	b.n	8007084 <__exponent+0x46>

080070a4 <_printf_float>:
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	b08d      	sub	sp, #52	; 0x34
 80070aa:	460c      	mov	r4, r1
 80070ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80070b0:	4616      	mov	r6, r2
 80070b2:	461f      	mov	r7, r3
 80070b4:	4605      	mov	r5, r0
 80070b6:	f001 fcd9 	bl	8008a6c <_localeconv_r>
 80070ba:	6803      	ldr	r3, [r0, #0]
 80070bc:	9304      	str	r3, [sp, #16]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7f9 f886 	bl	80001d0 <strlen>
 80070c4:	2300      	movs	r3, #0
 80070c6:	930a      	str	r3, [sp, #40]	; 0x28
 80070c8:	f8d8 3000 	ldr.w	r3, [r8]
 80070cc:	9005      	str	r0, [sp, #20]
 80070ce:	3307      	adds	r3, #7
 80070d0:	f023 0307 	bic.w	r3, r3, #7
 80070d4:	f103 0208 	add.w	r2, r3, #8
 80070d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070dc:	f8d4 b000 	ldr.w	fp, [r4]
 80070e0:	f8c8 2000 	str.w	r2, [r8]
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070f4:	9307      	str	r3, [sp, #28]
 80070f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295
 80070fe:	4ba7      	ldr	r3, [pc, #668]	; (800739c <_printf_float+0x2f8>)
 8007100:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007104:	f7f9 fd12 	bl	8000b2c <__aeabi_dcmpun>
 8007108:	bb70      	cbnz	r0, 8007168 <_printf_float+0xc4>
 800710a:	f04f 32ff 	mov.w	r2, #4294967295
 800710e:	4ba3      	ldr	r3, [pc, #652]	; (800739c <_printf_float+0x2f8>)
 8007110:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007114:	f7f9 fcec 	bl	8000af0 <__aeabi_dcmple>
 8007118:	bb30      	cbnz	r0, 8007168 <_printf_float+0xc4>
 800711a:	2200      	movs	r2, #0
 800711c:	2300      	movs	r3, #0
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f7f9 fcdb 	bl	8000adc <__aeabi_dcmplt>
 8007126:	b110      	cbz	r0, 800712e <_printf_float+0x8a>
 8007128:	232d      	movs	r3, #45	; 0x2d
 800712a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800712e:	4a9c      	ldr	r2, [pc, #624]	; (80073a0 <_printf_float+0x2fc>)
 8007130:	4b9c      	ldr	r3, [pc, #624]	; (80073a4 <_printf_float+0x300>)
 8007132:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007136:	bf8c      	ite	hi
 8007138:	4690      	movhi	r8, r2
 800713a:	4698      	movls	r8, r3
 800713c:	2303      	movs	r3, #3
 800713e:	f02b 0204 	bic.w	r2, fp, #4
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	6022      	str	r2, [r4, #0]
 8007146:	f04f 0900 	mov.w	r9, #0
 800714a:	9700      	str	r7, [sp, #0]
 800714c:	4633      	mov	r3, r6
 800714e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007150:	4621      	mov	r1, r4
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f9e6 	bl	8007524 <_printf_common>
 8007158:	3001      	adds	r0, #1
 800715a:	f040 808d 	bne.w	8007278 <_printf_float+0x1d4>
 800715e:	f04f 30ff 	mov.w	r0, #4294967295
 8007162:	b00d      	add	sp, #52	; 0x34
 8007164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007168:	4642      	mov	r2, r8
 800716a:	464b      	mov	r3, r9
 800716c:	4640      	mov	r0, r8
 800716e:	4649      	mov	r1, r9
 8007170:	f7f9 fcdc 	bl	8000b2c <__aeabi_dcmpun>
 8007174:	b110      	cbz	r0, 800717c <_printf_float+0xd8>
 8007176:	4a8c      	ldr	r2, [pc, #560]	; (80073a8 <_printf_float+0x304>)
 8007178:	4b8c      	ldr	r3, [pc, #560]	; (80073ac <_printf_float+0x308>)
 800717a:	e7da      	b.n	8007132 <_printf_float+0x8e>
 800717c:	6861      	ldr	r1, [r4, #4]
 800717e:	1c4b      	adds	r3, r1, #1
 8007180:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007184:	a80a      	add	r0, sp, #40	; 0x28
 8007186:	d13e      	bne.n	8007206 <_printf_float+0x162>
 8007188:	2306      	movs	r3, #6
 800718a:	6063      	str	r3, [r4, #4]
 800718c:	2300      	movs	r3, #0
 800718e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007192:	ab09      	add	r3, sp, #36	; 0x24
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	ec49 8b10 	vmov	d0, r8, r9
 800719a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800719e:	6022      	str	r2, [r4, #0]
 80071a0:	f8cd a004 	str.w	sl, [sp, #4]
 80071a4:	6861      	ldr	r1, [r4, #4]
 80071a6:	4628      	mov	r0, r5
 80071a8:	f7ff fee8 	bl	8006f7c <__cvt>
 80071ac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80071b0:	2b47      	cmp	r3, #71	; 0x47
 80071b2:	4680      	mov	r8, r0
 80071b4:	d109      	bne.n	80071ca <_printf_float+0x126>
 80071b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b8:	1cd8      	adds	r0, r3, #3
 80071ba:	db02      	blt.n	80071c2 <_printf_float+0x11e>
 80071bc:	6862      	ldr	r2, [r4, #4]
 80071be:	4293      	cmp	r3, r2
 80071c0:	dd47      	ble.n	8007252 <_printf_float+0x1ae>
 80071c2:	f1aa 0a02 	sub.w	sl, sl, #2
 80071c6:	fa5f fa8a 	uxtb.w	sl, sl
 80071ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80071ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071d0:	d824      	bhi.n	800721c <_printf_float+0x178>
 80071d2:	3901      	subs	r1, #1
 80071d4:	4652      	mov	r2, sl
 80071d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071da:	9109      	str	r1, [sp, #36]	; 0x24
 80071dc:	f7ff ff2f 	bl	800703e <__exponent>
 80071e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071e2:	1813      	adds	r3, r2, r0
 80071e4:	2a01      	cmp	r2, #1
 80071e6:	4681      	mov	r9, r0
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	dc02      	bgt.n	80071f2 <_printf_float+0x14e>
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	07d1      	lsls	r1, r2, #31
 80071f0:	d501      	bpl.n	80071f6 <_printf_float+0x152>
 80071f2:	3301      	adds	r3, #1
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0a5      	beq.n	800714a <_printf_float+0xa6>
 80071fe:	232d      	movs	r3, #45	; 0x2d
 8007200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007204:	e7a1      	b.n	800714a <_printf_float+0xa6>
 8007206:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800720a:	f000 8177 	beq.w	80074fc <_printf_float+0x458>
 800720e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007212:	d1bb      	bne.n	800718c <_printf_float+0xe8>
 8007214:	2900      	cmp	r1, #0
 8007216:	d1b9      	bne.n	800718c <_printf_float+0xe8>
 8007218:	2301      	movs	r3, #1
 800721a:	e7b6      	b.n	800718a <_printf_float+0xe6>
 800721c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007220:	d119      	bne.n	8007256 <_printf_float+0x1b2>
 8007222:	2900      	cmp	r1, #0
 8007224:	6863      	ldr	r3, [r4, #4]
 8007226:	dd0c      	ble.n	8007242 <_printf_float+0x19e>
 8007228:	6121      	str	r1, [r4, #16]
 800722a:	b913      	cbnz	r3, 8007232 <_printf_float+0x18e>
 800722c:	6822      	ldr	r2, [r4, #0]
 800722e:	07d2      	lsls	r2, r2, #31
 8007230:	d502      	bpl.n	8007238 <_printf_float+0x194>
 8007232:	3301      	adds	r3, #1
 8007234:	440b      	add	r3, r1
 8007236:	6123      	str	r3, [r4, #16]
 8007238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723a:	65a3      	str	r3, [r4, #88]	; 0x58
 800723c:	f04f 0900 	mov.w	r9, #0
 8007240:	e7d9      	b.n	80071f6 <_printf_float+0x152>
 8007242:	b913      	cbnz	r3, 800724a <_printf_float+0x1a6>
 8007244:	6822      	ldr	r2, [r4, #0]
 8007246:	07d0      	lsls	r0, r2, #31
 8007248:	d501      	bpl.n	800724e <_printf_float+0x1aa>
 800724a:	3302      	adds	r3, #2
 800724c:	e7f3      	b.n	8007236 <_printf_float+0x192>
 800724e:	2301      	movs	r3, #1
 8007250:	e7f1      	b.n	8007236 <_printf_float+0x192>
 8007252:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007256:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800725a:	4293      	cmp	r3, r2
 800725c:	db05      	blt.n	800726a <_printf_float+0x1c6>
 800725e:	6822      	ldr	r2, [r4, #0]
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	07d1      	lsls	r1, r2, #31
 8007264:	d5e8      	bpl.n	8007238 <_printf_float+0x194>
 8007266:	3301      	adds	r3, #1
 8007268:	e7e5      	b.n	8007236 <_printf_float+0x192>
 800726a:	2b00      	cmp	r3, #0
 800726c:	bfd4      	ite	le
 800726e:	f1c3 0302 	rsble	r3, r3, #2
 8007272:	2301      	movgt	r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	e7de      	b.n	8007236 <_printf_float+0x192>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	055a      	lsls	r2, r3, #21
 800727c:	d407      	bmi.n	800728e <_printf_float+0x1ea>
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	4642      	mov	r2, r8
 8007282:	4631      	mov	r1, r6
 8007284:	4628      	mov	r0, r5
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	d12b      	bne.n	80072e4 <_printf_float+0x240>
 800728c:	e767      	b.n	800715e <_printf_float+0xba>
 800728e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007292:	f240 80dc 	bls.w	800744e <_printf_float+0x3aa>
 8007296:	2200      	movs	r2, #0
 8007298:	2300      	movs	r3, #0
 800729a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800729e:	f7f9 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d033      	beq.n	800730e <_printf_float+0x26a>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4a41      	ldr	r2, [pc, #260]	; (80073b0 <_printf_float+0x30c>)
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b8      	blx	r7
 80072b0:	3001      	adds	r0, #1
 80072b2:	f43f af54 	beq.w	800715e <_printf_float+0xba>
 80072b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072ba:	429a      	cmp	r2, r3
 80072bc:	db02      	blt.n	80072c4 <_printf_float+0x220>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	07d8      	lsls	r0, r3, #31
 80072c2:	d50f      	bpl.n	80072e4 <_printf_float+0x240>
 80072c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f af45 	beq.w	800715e <_printf_float+0xba>
 80072d4:	f04f 0800 	mov.w	r8, #0
 80072d8:	f104 091a 	add.w	r9, r4, #26
 80072dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072de:	3b01      	subs	r3, #1
 80072e0:	4543      	cmp	r3, r8
 80072e2:	dc09      	bgt.n	80072f8 <_printf_float+0x254>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	079b      	lsls	r3, r3, #30
 80072e8:	f100 8103 	bmi.w	80074f2 <_printf_float+0x44e>
 80072ec:	68e0      	ldr	r0, [r4, #12]
 80072ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072f0:	4298      	cmp	r0, r3
 80072f2:	bfb8      	it	lt
 80072f4:	4618      	movlt	r0, r3
 80072f6:	e734      	b.n	8007162 <_printf_float+0xbe>
 80072f8:	2301      	movs	r3, #1
 80072fa:	464a      	mov	r2, r9
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	47b8      	blx	r7
 8007302:	3001      	adds	r0, #1
 8007304:	f43f af2b 	beq.w	800715e <_printf_float+0xba>
 8007308:	f108 0801 	add.w	r8, r8, #1
 800730c:	e7e6      	b.n	80072dc <_printf_float+0x238>
 800730e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	dc2b      	bgt.n	800736c <_printf_float+0x2c8>
 8007314:	2301      	movs	r3, #1
 8007316:	4a26      	ldr	r2, [pc, #152]	; (80073b0 <_printf_float+0x30c>)
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f af1d 	beq.w	800715e <_printf_float+0xba>
 8007324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007326:	b923      	cbnz	r3, 8007332 <_printf_float+0x28e>
 8007328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732a:	b913      	cbnz	r3, 8007332 <_printf_float+0x28e>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	07d9      	lsls	r1, r3, #31
 8007330:	d5d8      	bpl.n	80072e4 <_printf_float+0x240>
 8007332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f af0e 	beq.w	800715e <_printf_float+0xba>
 8007342:	f04f 0900 	mov.w	r9, #0
 8007346:	f104 0a1a 	add.w	sl, r4, #26
 800734a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734c:	425b      	negs	r3, r3
 800734e:	454b      	cmp	r3, r9
 8007350:	dc01      	bgt.n	8007356 <_printf_float+0x2b2>
 8007352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007354:	e794      	b.n	8007280 <_printf_float+0x1dc>
 8007356:	2301      	movs	r3, #1
 8007358:	4652      	mov	r2, sl
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	f43f aefc 	beq.w	800715e <_printf_float+0xba>
 8007366:	f109 0901 	add.w	r9, r9, #1
 800736a:	e7ee      	b.n	800734a <_printf_float+0x2a6>
 800736c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007370:	429a      	cmp	r2, r3
 8007372:	bfa8      	it	ge
 8007374:	461a      	movge	r2, r3
 8007376:	2a00      	cmp	r2, #0
 8007378:	4691      	mov	r9, r2
 800737a:	dd07      	ble.n	800738c <_printf_float+0x2e8>
 800737c:	4613      	mov	r3, r2
 800737e:	4631      	mov	r1, r6
 8007380:	4642      	mov	r2, r8
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	f43f aee9 	beq.w	800715e <_printf_float+0xba>
 800738c:	f104 031a 	add.w	r3, r4, #26
 8007390:	f04f 0b00 	mov.w	fp, #0
 8007394:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007398:	9306      	str	r3, [sp, #24]
 800739a:	e015      	b.n	80073c8 <_printf_float+0x324>
 800739c:	7fefffff 	.word	0x7fefffff
 80073a0:	08009b4c 	.word	0x08009b4c
 80073a4:	08009b48 	.word	0x08009b48
 80073a8:	08009b54 	.word	0x08009b54
 80073ac:	08009b50 	.word	0x08009b50
 80073b0:	08009b58 	.word	0x08009b58
 80073b4:	2301      	movs	r3, #1
 80073b6:	9a06      	ldr	r2, [sp, #24]
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	f43f aecd 	beq.w	800715e <_printf_float+0xba>
 80073c4:	f10b 0b01 	add.w	fp, fp, #1
 80073c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80073cc:	ebaa 0309 	sub.w	r3, sl, r9
 80073d0:	455b      	cmp	r3, fp
 80073d2:	dcef      	bgt.n	80073b4 <_printf_float+0x310>
 80073d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073d8:	429a      	cmp	r2, r3
 80073da:	44d0      	add	r8, sl
 80073dc:	db15      	blt.n	800740a <_printf_float+0x366>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	07da      	lsls	r2, r3, #31
 80073e2:	d412      	bmi.n	800740a <_printf_float+0x366>
 80073e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073e8:	eba3 020a 	sub.w	r2, r3, sl
 80073ec:	eba3 0a01 	sub.w	sl, r3, r1
 80073f0:	4592      	cmp	sl, r2
 80073f2:	bfa8      	it	ge
 80073f4:	4692      	movge	sl, r2
 80073f6:	f1ba 0f00 	cmp.w	sl, #0
 80073fa:	dc0e      	bgt.n	800741a <_printf_float+0x376>
 80073fc:	f04f 0800 	mov.w	r8, #0
 8007400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007404:	f104 091a 	add.w	r9, r4, #26
 8007408:	e019      	b.n	800743e <_printf_float+0x39a>
 800740a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	d1e5      	bne.n	80073e4 <_printf_float+0x340>
 8007418:	e6a1      	b.n	800715e <_printf_float+0xba>
 800741a:	4653      	mov	r3, sl
 800741c:	4642      	mov	r2, r8
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	d1e9      	bne.n	80073fc <_printf_float+0x358>
 8007428:	e699      	b.n	800715e <_printf_float+0xba>
 800742a:	2301      	movs	r3, #1
 800742c:	464a      	mov	r2, r9
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f ae92 	beq.w	800715e <_printf_float+0xba>
 800743a:	f108 0801 	add.w	r8, r8, #1
 800743e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007442:	1a9b      	subs	r3, r3, r2
 8007444:	eba3 030a 	sub.w	r3, r3, sl
 8007448:	4543      	cmp	r3, r8
 800744a:	dcee      	bgt.n	800742a <_printf_float+0x386>
 800744c:	e74a      	b.n	80072e4 <_printf_float+0x240>
 800744e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007450:	2a01      	cmp	r2, #1
 8007452:	dc01      	bgt.n	8007458 <_printf_float+0x3b4>
 8007454:	07db      	lsls	r3, r3, #31
 8007456:	d53a      	bpl.n	80074ce <_printf_float+0x42a>
 8007458:	2301      	movs	r3, #1
 800745a:	4642      	mov	r2, r8
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	f43f ae7b 	beq.w	800715e <_printf_float+0xba>
 8007468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f108 0801 	add.w	r8, r8, #1
 8007478:	f43f ae71 	beq.w	800715e <_printf_float+0xba>
 800747c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747e:	2200      	movs	r2, #0
 8007480:	f103 3aff 	add.w	sl, r3, #4294967295
 8007484:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007488:	2300      	movs	r3, #0
 800748a:	f7f9 fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800748e:	b9c8      	cbnz	r0, 80074c4 <_printf_float+0x420>
 8007490:	4653      	mov	r3, sl
 8007492:	4642      	mov	r2, r8
 8007494:	4631      	mov	r1, r6
 8007496:	4628      	mov	r0, r5
 8007498:	47b8      	blx	r7
 800749a:	3001      	adds	r0, #1
 800749c:	d10e      	bne.n	80074bc <_printf_float+0x418>
 800749e:	e65e      	b.n	800715e <_printf_float+0xba>
 80074a0:	2301      	movs	r3, #1
 80074a2:	4652      	mov	r2, sl
 80074a4:	4631      	mov	r1, r6
 80074a6:	4628      	mov	r0, r5
 80074a8:	47b8      	blx	r7
 80074aa:	3001      	adds	r0, #1
 80074ac:	f43f ae57 	beq.w	800715e <_printf_float+0xba>
 80074b0:	f108 0801 	add.w	r8, r8, #1
 80074b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b6:	3b01      	subs	r3, #1
 80074b8:	4543      	cmp	r3, r8
 80074ba:	dcf1      	bgt.n	80074a0 <_printf_float+0x3fc>
 80074bc:	464b      	mov	r3, r9
 80074be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074c2:	e6de      	b.n	8007282 <_printf_float+0x1de>
 80074c4:	f04f 0800 	mov.w	r8, #0
 80074c8:	f104 0a1a 	add.w	sl, r4, #26
 80074cc:	e7f2      	b.n	80074b4 <_printf_float+0x410>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e7df      	b.n	8007492 <_printf_float+0x3ee>
 80074d2:	2301      	movs	r3, #1
 80074d4:	464a      	mov	r2, r9
 80074d6:	4631      	mov	r1, r6
 80074d8:	4628      	mov	r0, r5
 80074da:	47b8      	blx	r7
 80074dc:	3001      	adds	r0, #1
 80074de:	f43f ae3e 	beq.w	800715e <_printf_float+0xba>
 80074e2:	f108 0801 	add.w	r8, r8, #1
 80074e6:	68e3      	ldr	r3, [r4, #12]
 80074e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074ea:	1a9b      	subs	r3, r3, r2
 80074ec:	4543      	cmp	r3, r8
 80074ee:	dcf0      	bgt.n	80074d2 <_printf_float+0x42e>
 80074f0:	e6fc      	b.n	80072ec <_printf_float+0x248>
 80074f2:	f04f 0800 	mov.w	r8, #0
 80074f6:	f104 0919 	add.w	r9, r4, #25
 80074fa:	e7f4      	b.n	80074e6 <_printf_float+0x442>
 80074fc:	2900      	cmp	r1, #0
 80074fe:	f43f ae8b 	beq.w	8007218 <_printf_float+0x174>
 8007502:	2300      	movs	r3, #0
 8007504:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007508:	ab09      	add	r3, sp, #36	; 0x24
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	ec49 8b10 	vmov	d0, r8, r9
 8007510:	6022      	str	r2, [r4, #0]
 8007512:	f8cd a004 	str.w	sl, [sp, #4]
 8007516:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800751a:	4628      	mov	r0, r5
 800751c:	f7ff fd2e 	bl	8006f7c <__cvt>
 8007520:	4680      	mov	r8, r0
 8007522:	e648      	b.n	80071b6 <_printf_float+0x112>

08007524 <_printf_common>:
 8007524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007528:	4691      	mov	r9, r2
 800752a:	461f      	mov	r7, r3
 800752c:	688a      	ldr	r2, [r1, #8]
 800752e:	690b      	ldr	r3, [r1, #16]
 8007530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007534:	4293      	cmp	r3, r2
 8007536:	bfb8      	it	lt
 8007538:	4613      	movlt	r3, r2
 800753a:	f8c9 3000 	str.w	r3, [r9]
 800753e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007542:	4606      	mov	r6, r0
 8007544:	460c      	mov	r4, r1
 8007546:	b112      	cbz	r2, 800754e <_printf_common+0x2a>
 8007548:	3301      	adds	r3, #1
 800754a:	f8c9 3000 	str.w	r3, [r9]
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	0699      	lsls	r1, r3, #26
 8007552:	bf42      	ittt	mi
 8007554:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007558:	3302      	addmi	r3, #2
 800755a:	f8c9 3000 	strmi.w	r3, [r9]
 800755e:	6825      	ldr	r5, [r4, #0]
 8007560:	f015 0506 	ands.w	r5, r5, #6
 8007564:	d107      	bne.n	8007576 <_printf_common+0x52>
 8007566:	f104 0a19 	add.w	sl, r4, #25
 800756a:	68e3      	ldr	r3, [r4, #12]
 800756c:	f8d9 2000 	ldr.w	r2, [r9]
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	42ab      	cmp	r3, r5
 8007574:	dc28      	bgt.n	80075c8 <_printf_common+0xa4>
 8007576:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	3300      	adds	r3, #0
 800757e:	bf18      	it	ne
 8007580:	2301      	movne	r3, #1
 8007582:	0692      	lsls	r2, r2, #26
 8007584:	d42d      	bmi.n	80075e2 <_printf_common+0xbe>
 8007586:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800758a:	4639      	mov	r1, r7
 800758c:	4630      	mov	r0, r6
 800758e:	47c0      	blx	r8
 8007590:	3001      	adds	r0, #1
 8007592:	d020      	beq.n	80075d6 <_printf_common+0xb2>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	68e5      	ldr	r5, [r4, #12]
 8007598:	f8d9 2000 	ldr.w	r2, [r9]
 800759c:	f003 0306 	and.w	r3, r3, #6
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	bf08      	it	eq
 80075a4:	1aad      	subeq	r5, r5, r2
 80075a6:	68a3      	ldr	r3, [r4, #8]
 80075a8:	6922      	ldr	r2, [r4, #16]
 80075aa:	bf0c      	ite	eq
 80075ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075b0:	2500      	movne	r5, #0
 80075b2:	4293      	cmp	r3, r2
 80075b4:	bfc4      	itt	gt
 80075b6:	1a9b      	subgt	r3, r3, r2
 80075b8:	18ed      	addgt	r5, r5, r3
 80075ba:	f04f 0900 	mov.w	r9, #0
 80075be:	341a      	adds	r4, #26
 80075c0:	454d      	cmp	r5, r9
 80075c2:	d11a      	bne.n	80075fa <_printf_common+0xd6>
 80075c4:	2000      	movs	r0, #0
 80075c6:	e008      	b.n	80075da <_printf_common+0xb6>
 80075c8:	2301      	movs	r3, #1
 80075ca:	4652      	mov	r2, sl
 80075cc:	4639      	mov	r1, r7
 80075ce:	4630      	mov	r0, r6
 80075d0:	47c0      	blx	r8
 80075d2:	3001      	adds	r0, #1
 80075d4:	d103      	bne.n	80075de <_printf_common+0xba>
 80075d6:	f04f 30ff 	mov.w	r0, #4294967295
 80075da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075de:	3501      	adds	r5, #1
 80075e0:	e7c3      	b.n	800756a <_printf_common+0x46>
 80075e2:	18e1      	adds	r1, r4, r3
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	2030      	movs	r0, #48	; 0x30
 80075e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075ec:	4422      	add	r2, r4
 80075ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075f6:	3302      	adds	r3, #2
 80075f8:	e7c5      	b.n	8007586 <_printf_common+0x62>
 80075fa:	2301      	movs	r3, #1
 80075fc:	4622      	mov	r2, r4
 80075fe:	4639      	mov	r1, r7
 8007600:	4630      	mov	r0, r6
 8007602:	47c0      	blx	r8
 8007604:	3001      	adds	r0, #1
 8007606:	d0e6      	beq.n	80075d6 <_printf_common+0xb2>
 8007608:	f109 0901 	add.w	r9, r9, #1
 800760c:	e7d8      	b.n	80075c0 <_printf_common+0x9c>
	...

08007610 <_printf_i>:
 8007610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007614:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007618:	460c      	mov	r4, r1
 800761a:	7e09      	ldrb	r1, [r1, #24]
 800761c:	b085      	sub	sp, #20
 800761e:	296e      	cmp	r1, #110	; 0x6e
 8007620:	4617      	mov	r7, r2
 8007622:	4606      	mov	r6, r0
 8007624:	4698      	mov	r8, r3
 8007626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007628:	f000 80b3 	beq.w	8007792 <_printf_i+0x182>
 800762c:	d822      	bhi.n	8007674 <_printf_i+0x64>
 800762e:	2963      	cmp	r1, #99	; 0x63
 8007630:	d036      	beq.n	80076a0 <_printf_i+0x90>
 8007632:	d80a      	bhi.n	800764a <_printf_i+0x3a>
 8007634:	2900      	cmp	r1, #0
 8007636:	f000 80b9 	beq.w	80077ac <_printf_i+0x19c>
 800763a:	2958      	cmp	r1, #88	; 0x58
 800763c:	f000 8083 	beq.w	8007746 <_printf_i+0x136>
 8007640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007644:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007648:	e032      	b.n	80076b0 <_printf_i+0xa0>
 800764a:	2964      	cmp	r1, #100	; 0x64
 800764c:	d001      	beq.n	8007652 <_printf_i+0x42>
 800764e:	2969      	cmp	r1, #105	; 0x69
 8007650:	d1f6      	bne.n	8007640 <_printf_i+0x30>
 8007652:	6820      	ldr	r0, [r4, #0]
 8007654:	6813      	ldr	r3, [r2, #0]
 8007656:	0605      	lsls	r5, r0, #24
 8007658:	f103 0104 	add.w	r1, r3, #4
 800765c:	d52a      	bpl.n	80076b4 <_printf_i+0xa4>
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6011      	str	r1, [r2, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	da03      	bge.n	800766e <_printf_i+0x5e>
 8007666:	222d      	movs	r2, #45	; 0x2d
 8007668:	425b      	negs	r3, r3
 800766a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800766e:	486f      	ldr	r0, [pc, #444]	; (800782c <_printf_i+0x21c>)
 8007670:	220a      	movs	r2, #10
 8007672:	e039      	b.n	80076e8 <_printf_i+0xd8>
 8007674:	2973      	cmp	r1, #115	; 0x73
 8007676:	f000 809d 	beq.w	80077b4 <_printf_i+0x1a4>
 800767a:	d808      	bhi.n	800768e <_printf_i+0x7e>
 800767c:	296f      	cmp	r1, #111	; 0x6f
 800767e:	d020      	beq.n	80076c2 <_printf_i+0xb2>
 8007680:	2970      	cmp	r1, #112	; 0x70
 8007682:	d1dd      	bne.n	8007640 <_printf_i+0x30>
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	f043 0320 	orr.w	r3, r3, #32
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	e003      	b.n	8007696 <_printf_i+0x86>
 800768e:	2975      	cmp	r1, #117	; 0x75
 8007690:	d017      	beq.n	80076c2 <_printf_i+0xb2>
 8007692:	2978      	cmp	r1, #120	; 0x78
 8007694:	d1d4      	bne.n	8007640 <_printf_i+0x30>
 8007696:	2378      	movs	r3, #120	; 0x78
 8007698:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800769c:	4864      	ldr	r0, [pc, #400]	; (8007830 <_printf_i+0x220>)
 800769e:	e055      	b.n	800774c <_printf_i+0x13c>
 80076a0:	6813      	ldr	r3, [r2, #0]
 80076a2:	1d19      	adds	r1, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6011      	str	r1, [r2, #0]
 80076a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076b0:	2301      	movs	r3, #1
 80076b2:	e08c      	b.n	80077ce <_printf_i+0x1be>
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6011      	str	r1, [r2, #0]
 80076b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076bc:	bf18      	it	ne
 80076be:	b21b      	sxthne	r3, r3
 80076c0:	e7cf      	b.n	8007662 <_printf_i+0x52>
 80076c2:	6813      	ldr	r3, [r2, #0]
 80076c4:	6825      	ldr	r5, [r4, #0]
 80076c6:	1d18      	adds	r0, r3, #4
 80076c8:	6010      	str	r0, [r2, #0]
 80076ca:	0628      	lsls	r0, r5, #24
 80076cc:	d501      	bpl.n	80076d2 <_printf_i+0xc2>
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	e002      	b.n	80076d8 <_printf_i+0xc8>
 80076d2:	0668      	lsls	r0, r5, #25
 80076d4:	d5fb      	bpl.n	80076ce <_printf_i+0xbe>
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	4854      	ldr	r0, [pc, #336]	; (800782c <_printf_i+0x21c>)
 80076da:	296f      	cmp	r1, #111	; 0x6f
 80076dc:	bf14      	ite	ne
 80076de:	220a      	movne	r2, #10
 80076e0:	2208      	moveq	r2, #8
 80076e2:	2100      	movs	r1, #0
 80076e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076e8:	6865      	ldr	r5, [r4, #4]
 80076ea:	60a5      	str	r5, [r4, #8]
 80076ec:	2d00      	cmp	r5, #0
 80076ee:	f2c0 8095 	blt.w	800781c <_printf_i+0x20c>
 80076f2:	6821      	ldr	r1, [r4, #0]
 80076f4:	f021 0104 	bic.w	r1, r1, #4
 80076f8:	6021      	str	r1, [r4, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d13d      	bne.n	800777a <_printf_i+0x16a>
 80076fe:	2d00      	cmp	r5, #0
 8007700:	f040 808e 	bne.w	8007820 <_printf_i+0x210>
 8007704:	4665      	mov	r5, ip
 8007706:	2a08      	cmp	r2, #8
 8007708:	d10b      	bne.n	8007722 <_printf_i+0x112>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	07db      	lsls	r3, r3, #31
 800770e:	d508      	bpl.n	8007722 <_printf_i+0x112>
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	6862      	ldr	r2, [r4, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	bfde      	ittt	le
 8007718:	2330      	movle	r3, #48	; 0x30
 800771a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800771e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007722:	ebac 0305 	sub.w	r3, ip, r5
 8007726:	6123      	str	r3, [r4, #16]
 8007728:	f8cd 8000 	str.w	r8, [sp]
 800772c:	463b      	mov	r3, r7
 800772e:	aa03      	add	r2, sp, #12
 8007730:	4621      	mov	r1, r4
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff fef6 	bl	8007524 <_printf_common>
 8007738:	3001      	adds	r0, #1
 800773a:	d14d      	bne.n	80077d8 <_printf_i+0x1c8>
 800773c:	f04f 30ff 	mov.w	r0, #4294967295
 8007740:	b005      	add	sp, #20
 8007742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007746:	4839      	ldr	r0, [pc, #228]	; (800782c <_printf_i+0x21c>)
 8007748:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800774c:	6813      	ldr	r3, [r2, #0]
 800774e:	6821      	ldr	r1, [r4, #0]
 8007750:	1d1d      	adds	r5, r3, #4
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6015      	str	r5, [r2, #0]
 8007756:	060a      	lsls	r2, r1, #24
 8007758:	d50b      	bpl.n	8007772 <_printf_i+0x162>
 800775a:	07ca      	lsls	r2, r1, #31
 800775c:	bf44      	itt	mi
 800775e:	f041 0120 	orrmi.w	r1, r1, #32
 8007762:	6021      	strmi	r1, [r4, #0]
 8007764:	b91b      	cbnz	r3, 800776e <_printf_i+0x15e>
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	f022 0220 	bic.w	r2, r2, #32
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	2210      	movs	r2, #16
 8007770:	e7b7      	b.n	80076e2 <_printf_i+0xd2>
 8007772:	064d      	lsls	r5, r1, #25
 8007774:	bf48      	it	mi
 8007776:	b29b      	uxthmi	r3, r3
 8007778:	e7ef      	b.n	800775a <_printf_i+0x14a>
 800777a:	4665      	mov	r5, ip
 800777c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007780:	fb02 3311 	mls	r3, r2, r1, r3
 8007784:	5cc3      	ldrb	r3, [r0, r3]
 8007786:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800778a:	460b      	mov	r3, r1
 800778c:	2900      	cmp	r1, #0
 800778e:	d1f5      	bne.n	800777c <_printf_i+0x16c>
 8007790:	e7b9      	b.n	8007706 <_printf_i+0xf6>
 8007792:	6813      	ldr	r3, [r2, #0]
 8007794:	6825      	ldr	r5, [r4, #0]
 8007796:	6961      	ldr	r1, [r4, #20]
 8007798:	1d18      	adds	r0, r3, #4
 800779a:	6010      	str	r0, [r2, #0]
 800779c:	0628      	lsls	r0, r5, #24
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	d501      	bpl.n	80077a6 <_printf_i+0x196>
 80077a2:	6019      	str	r1, [r3, #0]
 80077a4:	e002      	b.n	80077ac <_printf_i+0x19c>
 80077a6:	066a      	lsls	r2, r5, #25
 80077a8:	d5fb      	bpl.n	80077a2 <_printf_i+0x192>
 80077aa:	8019      	strh	r1, [r3, #0]
 80077ac:	2300      	movs	r3, #0
 80077ae:	6123      	str	r3, [r4, #16]
 80077b0:	4665      	mov	r5, ip
 80077b2:	e7b9      	b.n	8007728 <_printf_i+0x118>
 80077b4:	6813      	ldr	r3, [r2, #0]
 80077b6:	1d19      	adds	r1, r3, #4
 80077b8:	6011      	str	r1, [r2, #0]
 80077ba:	681d      	ldr	r5, [r3, #0]
 80077bc:	6862      	ldr	r2, [r4, #4]
 80077be:	2100      	movs	r1, #0
 80077c0:	4628      	mov	r0, r5
 80077c2:	f7f8 fd0d 	bl	80001e0 <memchr>
 80077c6:	b108      	cbz	r0, 80077cc <_printf_i+0x1bc>
 80077c8:	1b40      	subs	r0, r0, r5
 80077ca:	6060      	str	r0, [r4, #4]
 80077cc:	6863      	ldr	r3, [r4, #4]
 80077ce:	6123      	str	r3, [r4, #16]
 80077d0:	2300      	movs	r3, #0
 80077d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d6:	e7a7      	b.n	8007728 <_printf_i+0x118>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	462a      	mov	r2, r5
 80077dc:	4639      	mov	r1, r7
 80077de:	4630      	mov	r0, r6
 80077e0:	47c0      	blx	r8
 80077e2:	3001      	adds	r0, #1
 80077e4:	d0aa      	beq.n	800773c <_printf_i+0x12c>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	079b      	lsls	r3, r3, #30
 80077ea:	d413      	bmi.n	8007814 <_printf_i+0x204>
 80077ec:	68e0      	ldr	r0, [r4, #12]
 80077ee:	9b03      	ldr	r3, [sp, #12]
 80077f0:	4298      	cmp	r0, r3
 80077f2:	bfb8      	it	lt
 80077f4:	4618      	movlt	r0, r3
 80077f6:	e7a3      	b.n	8007740 <_printf_i+0x130>
 80077f8:	2301      	movs	r3, #1
 80077fa:	464a      	mov	r2, r9
 80077fc:	4639      	mov	r1, r7
 80077fe:	4630      	mov	r0, r6
 8007800:	47c0      	blx	r8
 8007802:	3001      	adds	r0, #1
 8007804:	d09a      	beq.n	800773c <_printf_i+0x12c>
 8007806:	3501      	adds	r5, #1
 8007808:	68e3      	ldr	r3, [r4, #12]
 800780a:	9a03      	ldr	r2, [sp, #12]
 800780c:	1a9b      	subs	r3, r3, r2
 800780e:	42ab      	cmp	r3, r5
 8007810:	dcf2      	bgt.n	80077f8 <_printf_i+0x1e8>
 8007812:	e7eb      	b.n	80077ec <_printf_i+0x1dc>
 8007814:	2500      	movs	r5, #0
 8007816:	f104 0919 	add.w	r9, r4, #25
 800781a:	e7f5      	b.n	8007808 <_printf_i+0x1f8>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1ac      	bne.n	800777a <_printf_i+0x16a>
 8007820:	7803      	ldrb	r3, [r0, #0]
 8007822:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007826:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800782a:	e76c      	b.n	8007706 <_printf_i+0xf6>
 800782c:	08009b5a 	.word	0x08009b5a
 8007830:	08009b6b 	.word	0x08009b6b

08007834 <iprintf>:
 8007834:	b40f      	push	{r0, r1, r2, r3}
 8007836:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <iprintf+0x2c>)
 8007838:	b513      	push	{r0, r1, r4, lr}
 800783a:	681c      	ldr	r4, [r3, #0]
 800783c:	b124      	cbz	r4, 8007848 <iprintf+0x14>
 800783e:	69a3      	ldr	r3, [r4, #24]
 8007840:	b913      	cbnz	r3, 8007848 <iprintf+0x14>
 8007842:	4620      	mov	r0, r4
 8007844:	f001 f888 	bl	8008958 <__sinit>
 8007848:	ab05      	add	r3, sp, #20
 800784a:	9a04      	ldr	r2, [sp, #16]
 800784c:	68a1      	ldr	r1, [r4, #8]
 800784e:	9301      	str	r3, [sp, #4]
 8007850:	4620      	mov	r0, r4
 8007852:	f001 fe9d 	bl	8009590 <_vfiprintf_r>
 8007856:	b002      	add	sp, #8
 8007858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800785c:	b004      	add	sp, #16
 800785e:	4770      	bx	lr
 8007860:	2000002c 	.word	0x2000002c

08007864 <_puts_r>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	460e      	mov	r6, r1
 8007868:	4605      	mov	r5, r0
 800786a:	b118      	cbz	r0, 8007874 <_puts_r+0x10>
 800786c:	6983      	ldr	r3, [r0, #24]
 800786e:	b90b      	cbnz	r3, 8007874 <_puts_r+0x10>
 8007870:	f001 f872 	bl	8008958 <__sinit>
 8007874:	69ab      	ldr	r3, [r5, #24]
 8007876:	68ac      	ldr	r4, [r5, #8]
 8007878:	b913      	cbnz	r3, 8007880 <_puts_r+0x1c>
 800787a:	4628      	mov	r0, r5
 800787c:	f001 f86c 	bl	8008958 <__sinit>
 8007880:	4b23      	ldr	r3, [pc, #140]	; (8007910 <_puts_r+0xac>)
 8007882:	429c      	cmp	r4, r3
 8007884:	d117      	bne.n	80078b6 <_puts_r+0x52>
 8007886:	686c      	ldr	r4, [r5, #4]
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	071b      	lsls	r3, r3, #28
 800788c:	d51d      	bpl.n	80078ca <_puts_r+0x66>
 800788e:	6923      	ldr	r3, [r4, #16]
 8007890:	b1db      	cbz	r3, 80078ca <_puts_r+0x66>
 8007892:	3e01      	subs	r6, #1
 8007894:	68a3      	ldr	r3, [r4, #8]
 8007896:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800789a:	3b01      	subs	r3, #1
 800789c:	60a3      	str	r3, [r4, #8]
 800789e:	b9e9      	cbnz	r1, 80078dc <_puts_r+0x78>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	da2e      	bge.n	8007902 <_puts_r+0x9e>
 80078a4:	4622      	mov	r2, r4
 80078a6:	210a      	movs	r1, #10
 80078a8:	4628      	mov	r0, r5
 80078aa:	f000 f85f 	bl	800796c <__swbuf_r>
 80078ae:	3001      	adds	r0, #1
 80078b0:	d011      	beq.n	80078d6 <_puts_r+0x72>
 80078b2:	200a      	movs	r0, #10
 80078b4:	e011      	b.n	80078da <_puts_r+0x76>
 80078b6:	4b17      	ldr	r3, [pc, #92]	; (8007914 <_puts_r+0xb0>)
 80078b8:	429c      	cmp	r4, r3
 80078ba:	d101      	bne.n	80078c0 <_puts_r+0x5c>
 80078bc:	68ac      	ldr	r4, [r5, #8]
 80078be:	e7e3      	b.n	8007888 <_puts_r+0x24>
 80078c0:	4b15      	ldr	r3, [pc, #84]	; (8007918 <_puts_r+0xb4>)
 80078c2:	429c      	cmp	r4, r3
 80078c4:	bf08      	it	eq
 80078c6:	68ec      	ldreq	r4, [r5, #12]
 80078c8:	e7de      	b.n	8007888 <_puts_r+0x24>
 80078ca:	4621      	mov	r1, r4
 80078cc:	4628      	mov	r0, r5
 80078ce:	f000 f89f 	bl	8007a10 <__swsetup_r>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d0dd      	beq.n	8007892 <_puts_r+0x2e>
 80078d6:	f04f 30ff 	mov.w	r0, #4294967295
 80078da:	bd70      	pop	{r4, r5, r6, pc}
 80078dc:	2b00      	cmp	r3, #0
 80078de:	da04      	bge.n	80078ea <_puts_r+0x86>
 80078e0:	69a2      	ldr	r2, [r4, #24]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	dc06      	bgt.n	80078f4 <_puts_r+0x90>
 80078e6:	290a      	cmp	r1, #10
 80078e8:	d004      	beq.n	80078f4 <_puts_r+0x90>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	6022      	str	r2, [r4, #0]
 80078f0:	7019      	strb	r1, [r3, #0]
 80078f2:	e7cf      	b.n	8007894 <_puts_r+0x30>
 80078f4:	4622      	mov	r2, r4
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 f838 	bl	800796c <__swbuf_r>
 80078fc:	3001      	adds	r0, #1
 80078fe:	d1c9      	bne.n	8007894 <_puts_r+0x30>
 8007900:	e7e9      	b.n	80078d6 <_puts_r+0x72>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	200a      	movs	r0, #10
 8007906:	1c5a      	adds	r2, r3, #1
 8007908:	6022      	str	r2, [r4, #0]
 800790a:	7018      	strb	r0, [r3, #0]
 800790c:	e7e5      	b.n	80078da <_puts_r+0x76>
 800790e:	bf00      	nop
 8007910:	08009bac 	.word	0x08009bac
 8007914:	08009bcc 	.word	0x08009bcc
 8007918:	08009b8c 	.word	0x08009b8c

0800791c <puts>:
 800791c:	4b02      	ldr	r3, [pc, #8]	; (8007928 <puts+0xc>)
 800791e:	4601      	mov	r1, r0
 8007920:	6818      	ldr	r0, [r3, #0]
 8007922:	f7ff bf9f 	b.w	8007864 <_puts_r>
 8007926:	bf00      	nop
 8007928:	2000002c 	.word	0x2000002c

0800792c <siprintf>:
 800792c:	b40e      	push	{r1, r2, r3}
 800792e:	b500      	push	{lr}
 8007930:	b09c      	sub	sp, #112	; 0x70
 8007932:	ab1d      	add	r3, sp, #116	; 0x74
 8007934:	9002      	str	r0, [sp, #8]
 8007936:	9006      	str	r0, [sp, #24]
 8007938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800793c:	4809      	ldr	r0, [pc, #36]	; (8007964 <siprintf+0x38>)
 800793e:	9107      	str	r1, [sp, #28]
 8007940:	9104      	str	r1, [sp, #16]
 8007942:	4909      	ldr	r1, [pc, #36]	; (8007968 <siprintf+0x3c>)
 8007944:	f853 2b04 	ldr.w	r2, [r3], #4
 8007948:	9105      	str	r1, [sp, #20]
 800794a:	6800      	ldr	r0, [r0, #0]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	a902      	add	r1, sp, #8
 8007950:	f001 fcfc 	bl	800934c <_svfiprintf_r>
 8007954:	9b02      	ldr	r3, [sp, #8]
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	b01c      	add	sp, #112	; 0x70
 800795c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007960:	b003      	add	sp, #12
 8007962:	4770      	bx	lr
 8007964:	2000002c 	.word	0x2000002c
 8007968:	ffff0208 	.word	0xffff0208

0800796c <__swbuf_r>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	460e      	mov	r6, r1
 8007970:	4614      	mov	r4, r2
 8007972:	4605      	mov	r5, r0
 8007974:	b118      	cbz	r0, 800797e <__swbuf_r+0x12>
 8007976:	6983      	ldr	r3, [r0, #24]
 8007978:	b90b      	cbnz	r3, 800797e <__swbuf_r+0x12>
 800797a:	f000 ffed 	bl	8008958 <__sinit>
 800797e:	4b21      	ldr	r3, [pc, #132]	; (8007a04 <__swbuf_r+0x98>)
 8007980:	429c      	cmp	r4, r3
 8007982:	d12a      	bne.n	80079da <__swbuf_r+0x6e>
 8007984:	686c      	ldr	r4, [r5, #4]
 8007986:	69a3      	ldr	r3, [r4, #24]
 8007988:	60a3      	str	r3, [r4, #8]
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	071a      	lsls	r2, r3, #28
 800798e:	d52e      	bpl.n	80079ee <__swbuf_r+0x82>
 8007990:	6923      	ldr	r3, [r4, #16]
 8007992:	b363      	cbz	r3, 80079ee <__swbuf_r+0x82>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	6820      	ldr	r0, [r4, #0]
 8007998:	1ac0      	subs	r0, r0, r3
 800799a:	6963      	ldr	r3, [r4, #20]
 800799c:	b2f6      	uxtb	r6, r6
 800799e:	4283      	cmp	r3, r0
 80079a0:	4637      	mov	r7, r6
 80079a2:	dc04      	bgt.n	80079ae <__swbuf_r+0x42>
 80079a4:	4621      	mov	r1, r4
 80079a6:	4628      	mov	r0, r5
 80079a8:	f000 ff6c 	bl	8008884 <_fflush_r>
 80079ac:	bb28      	cbnz	r0, 80079fa <__swbuf_r+0x8e>
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	60a3      	str	r3, [r4, #8]
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	701e      	strb	r6, [r3, #0]
 80079bc:	6963      	ldr	r3, [r4, #20]
 80079be:	3001      	adds	r0, #1
 80079c0:	4283      	cmp	r3, r0
 80079c2:	d004      	beq.n	80079ce <__swbuf_r+0x62>
 80079c4:	89a3      	ldrh	r3, [r4, #12]
 80079c6:	07db      	lsls	r3, r3, #31
 80079c8:	d519      	bpl.n	80079fe <__swbuf_r+0x92>
 80079ca:	2e0a      	cmp	r6, #10
 80079cc:	d117      	bne.n	80079fe <__swbuf_r+0x92>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 ff57 	bl	8008884 <_fflush_r>
 80079d6:	b190      	cbz	r0, 80079fe <__swbuf_r+0x92>
 80079d8:	e00f      	b.n	80079fa <__swbuf_r+0x8e>
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <__swbuf_r+0x9c>)
 80079dc:	429c      	cmp	r4, r3
 80079de:	d101      	bne.n	80079e4 <__swbuf_r+0x78>
 80079e0:	68ac      	ldr	r4, [r5, #8]
 80079e2:	e7d0      	b.n	8007986 <__swbuf_r+0x1a>
 80079e4:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <__swbuf_r+0xa0>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	bf08      	it	eq
 80079ea:	68ec      	ldreq	r4, [r5, #12]
 80079ec:	e7cb      	b.n	8007986 <__swbuf_r+0x1a>
 80079ee:	4621      	mov	r1, r4
 80079f0:	4628      	mov	r0, r5
 80079f2:	f000 f80d 	bl	8007a10 <__swsetup_r>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0cc      	beq.n	8007994 <__swbuf_r+0x28>
 80079fa:	f04f 37ff 	mov.w	r7, #4294967295
 80079fe:	4638      	mov	r0, r7
 8007a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a02:	bf00      	nop
 8007a04:	08009bac 	.word	0x08009bac
 8007a08:	08009bcc 	.word	0x08009bcc
 8007a0c:	08009b8c 	.word	0x08009b8c

08007a10 <__swsetup_r>:
 8007a10:	4b32      	ldr	r3, [pc, #200]	; (8007adc <__swsetup_r+0xcc>)
 8007a12:	b570      	push	{r4, r5, r6, lr}
 8007a14:	681d      	ldr	r5, [r3, #0]
 8007a16:	4606      	mov	r6, r0
 8007a18:	460c      	mov	r4, r1
 8007a1a:	b125      	cbz	r5, 8007a26 <__swsetup_r+0x16>
 8007a1c:	69ab      	ldr	r3, [r5, #24]
 8007a1e:	b913      	cbnz	r3, 8007a26 <__swsetup_r+0x16>
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 ff99 	bl	8008958 <__sinit>
 8007a26:	4b2e      	ldr	r3, [pc, #184]	; (8007ae0 <__swsetup_r+0xd0>)
 8007a28:	429c      	cmp	r4, r3
 8007a2a:	d10f      	bne.n	8007a4c <__swsetup_r+0x3c>
 8007a2c:	686c      	ldr	r4, [r5, #4]
 8007a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	0715      	lsls	r5, r2, #28
 8007a36:	d42c      	bmi.n	8007a92 <__swsetup_r+0x82>
 8007a38:	06d0      	lsls	r0, r2, #27
 8007a3a:	d411      	bmi.n	8007a60 <__swsetup_r+0x50>
 8007a3c:	2209      	movs	r2, #9
 8007a3e:	6032      	str	r2, [r6, #0]
 8007a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4a:	e03e      	b.n	8007aca <__swsetup_r+0xba>
 8007a4c:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <__swsetup_r+0xd4>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <__swsetup_r+0x46>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7eb      	b.n	8007a2e <__swsetup_r+0x1e>
 8007a56:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <__swsetup_r+0xd8>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68ec      	ldreq	r4, [r5, #12]
 8007a5e:	e7e6      	b.n	8007a2e <__swsetup_r+0x1e>
 8007a60:	0751      	lsls	r1, r2, #29
 8007a62:	d512      	bpl.n	8007a8a <__swsetup_r+0x7a>
 8007a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a66:	b141      	cbz	r1, 8007a7a <__swsetup_r+0x6a>
 8007a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a6c:	4299      	cmp	r1, r3
 8007a6e:	d002      	beq.n	8007a76 <__swsetup_r+0x66>
 8007a70:	4630      	mov	r0, r6
 8007a72:	f001 fb69 	bl	8009148 <_free_r>
 8007a76:	2300      	movs	r3, #0
 8007a78:	6363      	str	r3, [r4, #52]	; 0x34
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	2300      	movs	r3, #0
 8007a84:	6063      	str	r3, [r4, #4]
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	f043 0308 	orr.w	r3, r3, #8
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	b94b      	cbnz	r3, 8007aaa <__swsetup_r+0x9a>
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa0:	d003      	beq.n	8007aaa <__swsetup_r+0x9a>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f001 f813 	bl	8008ad0 <__smakebuf_r>
 8007aaa:	89a2      	ldrh	r2, [r4, #12]
 8007aac:	f012 0301 	ands.w	r3, r2, #1
 8007ab0:	d00c      	beq.n	8007acc <__swsetup_r+0xbc>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60a3      	str	r3, [r4, #8]
 8007ab6:	6963      	ldr	r3, [r4, #20]
 8007ab8:	425b      	negs	r3, r3
 8007aba:	61a3      	str	r3, [r4, #24]
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	b953      	cbnz	r3, 8007ad6 <__swsetup_r+0xc6>
 8007ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ac8:	d1ba      	bne.n	8007a40 <__swsetup_r+0x30>
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	0792      	lsls	r2, r2, #30
 8007ace:	bf58      	it	pl
 8007ad0:	6963      	ldrpl	r3, [r4, #20]
 8007ad2:	60a3      	str	r3, [r4, #8]
 8007ad4:	e7f2      	b.n	8007abc <__swsetup_r+0xac>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e7f7      	b.n	8007aca <__swsetup_r+0xba>
 8007ada:	bf00      	nop
 8007adc:	2000002c 	.word	0x2000002c
 8007ae0:	08009bac 	.word	0x08009bac
 8007ae4:	08009bcc 	.word	0x08009bcc
 8007ae8:	08009b8c 	.word	0x08009b8c

08007aec <quorem>:
 8007aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	6903      	ldr	r3, [r0, #16]
 8007af2:	690c      	ldr	r4, [r1, #16]
 8007af4:	42a3      	cmp	r3, r4
 8007af6:	4680      	mov	r8, r0
 8007af8:	f2c0 8082 	blt.w	8007c00 <quorem+0x114>
 8007afc:	3c01      	subs	r4, #1
 8007afe:	f101 0714 	add.w	r7, r1, #20
 8007b02:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007b06:	f100 0614 	add.w	r6, r0, #20
 8007b0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007b0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007b12:	eb06 030c 	add.w	r3, r6, ip
 8007b16:	3501      	adds	r5, #1
 8007b18:	eb07 090c 	add.w	r9, r7, ip
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007b22:	b395      	cbz	r5, 8007b8a <quorem+0x9e>
 8007b24:	f04f 0a00 	mov.w	sl, #0
 8007b28:	4638      	mov	r0, r7
 8007b2a:	46b6      	mov	lr, r6
 8007b2c:	46d3      	mov	fp, sl
 8007b2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b32:	b293      	uxth	r3, r2
 8007b34:	fb05 a303 	mla	r3, r5, r3, sl
 8007b38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	ebab 0303 	sub.w	r3, fp, r3
 8007b42:	0c12      	lsrs	r2, r2, #16
 8007b44:	f8de b000 	ldr.w	fp, [lr]
 8007b48:	fb05 a202 	mla	r2, r5, r2, sl
 8007b4c:	fa13 f38b 	uxtah	r3, r3, fp
 8007b50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007b54:	fa1f fb82 	uxth.w	fp, r2
 8007b58:	f8de 2000 	ldr.w	r2, [lr]
 8007b5c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007b60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b6a:	4581      	cmp	r9, r0
 8007b6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007b70:	f84e 3b04 	str.w	r3, [lr], #4
 8007b74:	d2db      	bcs.n	8007b2e <quorem+0x42>
 8007b76:	f856 300c 	ldr.w	r3, [r6, ip]
 8007b7a:	b933      	cbnz	r3, 8007b8a <quorem+0x9e>
 8007b7c:	9b01      	ldr	r3, [sp, #4]
 8007b7e:	3b04      	subs	r3, #4
 8007b80:	429e      	cmp	r6, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	d330      	bcc.n	8007be8 <quorem+0xfc>
 8007b86:	f8c8 4010 	str.w	r4, [r8, #16]
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	f001 fa08 	bl	8008fa0 <__mcmp>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	db25      	blt.n	8007be0 <quorem+0xf4>
 8007b94:	3501      	adds	r5, #1
 8007b96:	4630      	mov	r0, r6
 8007b98:	f04f 0c00 	mov.w	ip, #0
 8007b9c:	f857 2b04 	ldr.w	r2, [r7], #4
 8007ba0:	f8d0 e000 	ldr.w	lr, [r0]
 8007ba4:	b293      	uxth	r3, r2
 8007ba6:	ebac 0303 	sub.w	r3, ip, r3
 8007baa:	0c12      	lsrs	r2, r2, #16
 8007bac:	fa13 f38e 	uxtah	r3, r3, lr
 8007bb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bbe:	45b9      	cmp	r9, r7
 8007bc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bc4:	f840 3b04 	str.w	r3, [r0], #4
 8007bc8:	d2e8      	bcs.n	8007b9c <quorem+0xb0>
 8007bca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007bce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007bd2:	b92a      	cbnz	r2, 8007be0 <quorem+0xf4>
 8007bd4:	3b04      	subs	r3, #4
 8007bd6:	429e      	cmp	r6, r3
 8007bd8:	461a      	mov	r2, r3
 8007bda:	d30b      	bcc.n	8007bf4 <quorem+0x108>
 8007bdc:	f8c8 4010 	str.w	r4, [r8, #16]
 8007be0:	4628      	mov	r0, r5
 8007be2:	b003      	add	sp, #12
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	3b04      	subs	r3, #4
 8007bec:	2a00      	cmp	r2, #0
 8007bee:	d1ca      	bne.n	8007b86 <quorem+0x9a>
 8007bf0:	3c01      	subs	r4, #1
 8007bf2:	e7c5      	b.n	8007b80 <quorem+0x94>
 8007bf4:	6812      	ldr	r2, [r2, #0]
 8007bf6:	3b04      	subs	r3, #4
 8007bf8:	2a00      	cmp	r2, #0
 8007bfa:	d1ef      	bne.n	8007bdc <quorem+0xf0>
 8007bfc:	3c01      	subs	r4, #1
 8007bfe:	e7ea      	b.n	8007bd6 <quorem+0xea>
 8007c00:	2000      	movs	r0, #0
 8007c02:	e7ee      	b.n	8007be2 <quorem+0xf6>
 8007c04:	0000      	movs	r0, r0
	...

08007c08 <_dtoa_r>:
 8007c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	ec57 6b10 	vmov	r6, r7, d0
 8007c10:	b097      	sub	sp, #92	; 0x5c
 8007c12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c14:	9106      	str	r1, [sp, #24]
 8007c16:	4604      	mov	r4, r0
 8007c18:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8007c1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c20:	e9cd 6700 	strd	r6, r7, [sp]
 8007c24:	b93d      	cbnz	r5, 8007c36 <_dtoa_r+0x2e>
 8007c26:	2010      	movs	r0, #16
 8007c28:	f000 ff92 	bl	8008b50 <malloc>
 8007c2c:	6260      	str	r0, [r4, #36]	; 0x24
 8007c2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c32:	6005      	str	r5, [r0, #0]
 8007c34:	60c5      	str	r5, [r0, #12]
 8007c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c38:	6819      	ldr	r1, [r3, #0]
 8007c3a:	b151      	cbz	r1, 8007c52 <_dtoa_r+0x4a>
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	604a      	str	r2, [r1, #4]
 8007c40:	2301      	movs	r3, #1
 8007c42:	4093      	lsls	r3, r2
 8007c44:	608b      	str	r3, [r1, #8]
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 ffc9 	bl	8008bde <_Bfree>
 8007c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	1e3b      	subs	r3, r7, #0
 8007c54:	bfbb      	ittet	lt
 8007c56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007c5a:	9301      	strlt	r3, [sp, #4]
 8007c5c:	2300      	movge	r3, #0
 8007c5e:	2201      	movlt	r2, #1
 8007c60:	bfac      	ite	ge
 8007c62:	f8c8 3000 	strge.w	r3, [r8]
 8007c66:	f8c8 2000 	strlt.w	r2, [r8]
 8007c6a:	4baf      	ldr	r3, [pc, #700]	; (8007f28 <_dtoa_r+0x320>)
 8007c6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007c70:	ea33 0308 	bics.w	r3, r3, r8
 8007c74:	d114      	bne.n	8007ca0 <_dtoa_r+0x98>
 8007c76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c78:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	9b00      	ldr	r3, [sp, #0]
 8007c80:	b923      	cbnz	r3, 8007c8c <_dtoa_r+0x84>
 8007c82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f000 8542 	beq.w	8008710 <_dtoa_r+0xb08>
 8007c8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007f3c <_dtoa_r+0x334>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 8544 	beq.w	8008720 <_dtoa_r+0xb18>
 8007c98:	f10b 0303 	add.w	r3, fp, #3
 8007c9c:	f000 bd3e 	b.w	800871c <_dtoa_r+0xb14>
 8007ca0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4639      	mov	r1, r7
 8007cac:	f7f8 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cb0:	4681      	mov	r9, r0
 8007cb2:	b168      	cbz	r0, 8007cd0 <_dtoa_r+0xc8>
 8007cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 8524 	beq.w	800870a <_dtoa_r+0xb02>
 8007cc2:	4b9a      	ldr	r3, [pc, #616]	; (8007f2c <_dtoa_r+0x324>)
 8007cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cc6:	f103 3bff 	add.w	fp, r3, #4294967295
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	f000 bd28 	b.w	8008720 <_dtoa_r+0xb18>
 8007cd0:	aa14      	add	r2, sp, #80	; 0x50
 8007cd2:	a915      	add	r1, sp, #84	; 0x54
 8007cd4:	ec47 6b10 	vmov	d0, r6, r7
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f001 f9d8 	bl	800908e <__d2b>
 8007cde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007ce2:	9004      	str	r0, [sp, #16]
 8007ce4:	2d00      	cmp	r5, #0
 8007ce6:	d07c      	beq.n	8007de2 <_dtoa_r+0x1da>
 8007ce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007cf0:	46b2      	mov	sl, r6
 8007cf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007cf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4b8b      	ldr	r3, [pc, #556]	; (8007f30 <_dtoa_r+0x328>)
 8007d02:	4650      	mov	r0, sl
 8007d04:	4659      	mov	r1, fp
 8007d06:	f7f8 fabf 	bl	8000288 <__aeabi_dsub>
 8007d0a:	a381      	add	r3, pc, #516	; (adr r3, 8007f10 <_dtoa_r+0x308>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f7f8 fc72 	bl	80005f8 <__aeabi_dmul>
 8007d14:	a380      	add	r3, pc, #512	; (adr r3, 8007f18 <_dtoa_r+0x310>)
 8007d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1a:	f7f8 fab7 	bl	800028c <__adddf3>
 8007d1e:	4606      	mov	r6, r0
 8007d20:	4628      	mov	r0, r5
 8007d22:	460f      	mov	r7, r1
 8007d24:	f7f8 fbfe 	bl	8000524 <__aeabi_i2d>
 8007d28:	a37d      	add	r3, pc, #500	; (adr r3, 8007f20 <_dtoa_r+0x318>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f7f8 fc63 	bl	80005f8 <__aeabi_dmul>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4630      	mov	r0, r6
 8007d38:	4639      	mov	r1, r7
 8007d3a:	f7f8 faa7 	bl	800028c <__adddf3>
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460f      	mov	r7, r1
 8007d42:	f7f8 ff09 	bl	8000b58 <__aeabi_d2iz>
 8007d46:	2200      	movs	r2, #0
 8007d48:	4682      	mov	sl, r0
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	4639      	mov	r1, r7
 8007d50:	f7f8 fec4 	bl	8000adc <__aeabi_dcmplt>
 8007d54:	b148      	cbz	r0, 8007d6a <_dtoa_r+0x162>
 8007d56:	4650      	mov	r0, sl
 8007d58:	f7f8 fbe4 	bl	8000524 <__aeabi_i2d>
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	463b      	mov	r3, r7
 8007d60:	f7f8 feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d64:	b908      	cbnz	r0, 8007d6a <_dtoa_r+0x162>
 8007d66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d6a:	f1ba 0f16 	cmp.w	sl, #22
 8007d6e:	d859      	bhi.n	8007e24 <_dtoa_r+0x21c>
 8007d70:	4970      	ldr	r1, [pc, #448]	; (8007f34 <_dtoa_r+0x32c>)
 8007d72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d7e:	f7f8 fecb 	bl	8000b18 <__aeabi_dcmpgt>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d050      	beq.n	8007e28 <_dtoa_r+0x220>
 8007d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d90:	1b5d      	subs	r5, r3, r5
 8007d92:	f1b5 0801 	subs.w	r8, r5, #1
 8007d96:	bf49      	itett	mi
 8007d98:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d9c:	2300      	movpl	r3, #0
 8007d9e:	9305      	strmi	r3, [sp, #20]
 8007da0:	f04f 0800 	movmi.w	r8, #0
 8007da4:	bf58      	it	pl
 8007da6:	9305      	strpl	r3, [sp, #20]
 8007da8:	f1ba 0f00 	cmp.w	sl, #0
 8007dac:	db3e      	blt.n	8007e2c <_dtoa_r+0x224>
 8007dae:	2300      	movs	r3, #0
 8007db0:	44d0      	add	r8, sl
 8007db2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007db6:	9307      	str	r3, [sp, #28]
 8007db8:	9b06      	ldr	r3, [sp, #24]
 8007dba:	2b09      	cmp	r3, #9
 8007dbc:	f200 8090 	bhi.w	8007ee0 <_dtoa_r+0x2d8>
 8007dc0:	2b05      	cmp	r3, #5
 8007dc2:	bfc4      	itt	gt
 8007dc4:	3b04      	subgt	r3, #4
 8007dc6:	9306      	strgt	r3, [sp, #24]
 8007dc8:	9b06      	ldr	r3, [sp, #24]
 8007dca:	f1a3 0302 	sub.w	r3, r3, #2
 8007dce:	bfcc      	ite	gt
 8007dd0:	2500      	movgt	r5, #0
 8007dd2:	2501      	movle	r5, #1
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	f200 808f 	bhi.w	8007ef8 <_dtoa_r+0x2f0>
 8007dda:	e8df f003 	tbb	[pc, r3]
 8007dde:	7f7d      	.short	0x7f7d
 8007de0:	7131      	.short	0x7131
 8007de2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007de6:	441d      	add	r5, r3
 8007de8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007dec:	2820      	cmp	r0, #32
 8007dee:	dd13      	ble.n	8007e18 <_dtoa_r+0x210>
 8007df0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007df4:	9b00      	ldr	r3, [sp, #0]
 8007df6:	fa08 f800 	lsl.w	r8, r8, r0
 8007dfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007dfe:	fa23 f000 	lsr.w	r0, r3, r0
 8007e02:	ea48 0000 	orr.w	r0, r8, r0
 8007e06:	f7f8 fb7d 	bl	8000504 <__aeabi_ui2d>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4682      	mov	sl, r0
 8007e0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007e12:	3d01      	subs	r5, #1
 8007e14:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e16:	e772      	b.n	8007cfe <_dtoa_r+0xf6>
 8007e18:	9b00      	ldr	r3, [sp, #0]
 8007e1a:	f1c0 0020 	rsb	r0, r0, #32
 8007e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e22:	e7f0      	b.n	8007e06 <_dtoa_r+0x1fe>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e7b1      	b.n	8007d8c <_dtoa_r+0x184>
 8007e28:	900f      	str	r0, [sp, #60]	; 0x3c
 8007e2a:	e7b0      	b.n	8007d8e <_dtoa_r+0x186>
 8007e2c:	9b05      	ldr	r3, [sp, #20]
 8007e2e:	eba3 030a 	sub.w	r3, r3, sl
 8007e32:	9305      	str	r3, [sp, #20]
 8007e34:	f1ca 0300 	rsb	r3, sl, #0
 8007e38:	9307      	str	r3, [sp, #28]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e3e:	e7bb      	b.n	8007db8 <_dtoa_r+0x1b0>
 8007e40:	2301      	movs	r3, #1
 8007e42:	930a      	str	r3, [sp, #40]	; 0x28
 8007e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd59      	ble.n	8007efe <_dtoa_r+0x2f6>
 8007e4a:	9302      	str	r3, [sp, #8]
 8007e4c:	4699      	mov	r9, r3
 8007e4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e50:	2200      	movs	r2, #0
 8007e52:	6072      	str	r2, [r6, #4]
 8007e54:	2204      	movs	r2, #4
 8007e56:	f102 0014 	add.w	r0, r2, #20
 8007e5a:	4298      	cmp	r0, r3
 8007e5c:	6871      	ldr	r1, [r6, #4]
 8007e5e:	d953      	bls.n	8007f08 <_dtoa_r+0x300>
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fe88 	bl	8008b76 <_Balloc>
 8007e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e68:	6030      	str	r0, [r6, #0]
 8007e6a:	f1b9 0f0e 	cmp.w	r9, #14
 8007e6e:	f8d3 b000 	ldr.w	fp, [r3]
 8007e72:	f200 80e6 	bhi.w	8008042 <_dtoa_r+0x43a>
 8007e76:	2d00      	cmp	r5, #0
 8007e78:	f000 80e3 	beq.w	8008042 <_dtoa_r+0x43a>
 8007e7c:	ed9d 7b00 	vldr	d7, [sp]
 8007e80:	f1ba 0f00 	cmp.w	sl, #0
 8007e84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007e88:	dd74      	ble.n	8007f74 <_dtoa_r+0x36c>
 8007e8a:	4a2a      	ldr	r2, [pc, #168]	; (8007f34 <_dtoa_r+0x32c>)
 8007e8c:	f00a 030f 	and.w	r3, sl, #15
 8007e90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e94:	ed93 7b00 	vldr	d7, [r3]
 8007e98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007e9c:	06f0      	lsls	r0, r6, #27
 8007e9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007ea2:	d565      	bpl.n	8007f70 <_dtoa_r+0x368>
 8007ea4:	4b24      	ldr	r3, [pc, #144]	; (8007f38 <_dtoa_r+0x330>)
 8007ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007eaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007eae:	f7f8 fccd 	bl	800084c <__aeabi_ddiv>
 8007eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8007eb6:	f006 060f 	and.w	r6, r6, #15
 8007eba:	2503      	movs	r5, #3
 8007ebc:	4f1e      	ldr	r7, [pc, #120]	; (8007f38 <_dtoa_r+0x330>)
 8007ebe:	e04c      	b.n	8007f5a <_dtoa_r+0x352>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec6:	4453      	add	r3, sl
 8007ec8:	f103 0901 	add.w	r9, r3, #1
 8007ecc:	9302      	str	r3, [sp, #8]
 8007ece:	464b      	mov	r3, r9
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	bfb8      	it	lt
 8007ed4:	2301      	movlt	r3, #1
 8007ed6:	e7ba      	b.n	8007e4e <_dtoa_r+0x246>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e7b2      	b.n	8007e42 <_dtoa_r+0x23a>
 8007edc:	2300      	movs	r3, #0
 8007ede:	e7f0      	b.n	8007ec2 <_dtoa_r+0x2ba>
 8007ee0:	2501      	movs	r5, #1
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	9306      	str	r3, [sp, #24]
 8007ee6:	950a      	str	r5, [sp, #40]	; 0x28
 8007ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eec:	9302      	str	r3, [sp, #8]
 8007eee:	4699      	mov	r9, r3
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2312      	movs	r3, #18
 8007ef4:	920b      	str	r2, [sp, #44]	; 0x2c
 8007ef6:	e7aa      	b.n	8007e4e <_dtoa_r+0x246>
 8007ef8:	2301      	movs	r3, #1
 8007efa:	930a      	str	r3, [sp, #40]	; 0x28
 8007efc:	e7f4      	b.n	8007ee8 <_dtoa_r+0x2e0>
 8007efe:	2301      	movs	r3, #1
 8007f00:	9302      	str	r3, [sp, #8]
 8007f02:	4699      	mov	r9, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	e7f5      	b.n	8007ef4 <_dtoa_r+0x2ec>
 8007f08:	3101      	adds	r1, #1
 8007f0a:	6071      	str	r1, [r6, #4]
 8007f0c:	0052      	lsls	r2, r2, #1
 8007f0e:	e7a2      	b.n	8007e56 <_dtoa_r+0x24e>
 8007f10:	636f4361 	.word	0x636f4361
 8007f14:	3fd287a7 	.word	0x3fd287a7
 8007f18:	8b60c8b3 	.word	0x8b60c8b3
 8007f1c:	3fc68a28 	.word	0x3fc68a28
 8007f20:	509f79fb 	.word	0x509f79fb
 8007f24:	3fd34413 	.word	0x3fd34413
 8007f28:	7ff00000 	.word	0x7ff00000
 8007f2c:	08009b59 	.word	0x08009b59
 8007f30:	3ff80000 	.word	0x3ff80000
 8007f34:	08009c18 	.word	0x08009c18
 8007f38:	08009bf0 	.word	0x08009bf0
 8007f3c:	08009b85 	.word	0x08009b85
 8007f40:	07f1      	lsls	r1, r6, #31
 8007f42:	d508      	bpl.n	8007f56 <_dtoa_r+0x34e>
 8007f44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f4c:	f7f8 fb54 	bl	80005f8 <__aeabi_dmul>
 8007f50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f54:	3501      	adds	r5, #1
 8007f56:	1076      	asrs	r6, r6, #1
 8007f58:	3708      	adds	r7, #8
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	d1f0      	bne.n	8007f40 <_dtoa_r+0x338>
 8007f5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f66:	f7f8 fc71 	bl	800084c <__aeabi_ddiv>
 8007f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8007f6e:	e01a      	b.n	8007fa6 <_dtoa_r+0x39e>
 8007f70:	2502      	movs	r5, #2
 8007f72:	e7a3      	b.n	8007ebc <_dtoa_r+0x2b4>
 8007f74:	f000 80a0 	beq.w	80080b8 <_dtoa_r+0x4b0>
 8007f78:	f1ca 0600 	rsb	r6, sl, #0
 8007f7c:	4b9f      	ldr	r3, [pc, #636]	; (80081fc <_dtoa_r+0x5f4>)
 8007f7e:	4fa0      	ldr	r7, [pc, #640]	; (8008200 <_dtoa_r+0x5f8>)
 8007f80:	f006 020f 	and.w	r2, r6, #15
 8007f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f90:	f7f8 fb32 	bl	80005f8 <__aeabi_dmul>
 8007f94:	e9cd 0100 	strd	r0, r1, [sp]
 8007f98:	1136      	asrs	r6, r6, #4
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	2502      	movs	r5, #2
 8007f9e:	2e00      	cmp	r6, #0
 8007fa0:	d17f      	bne.n	80080a2 <_dtoa_r+0x49a>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e1      	bne.n	8007f6a <_dtoa_r+0x362>
 8007fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 8087 	beq.w	80080bc <_dtoa_r+0x4b4>
 8007fae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	4b93      	ldr	r3, [pc, #588]	; (8008204 <_dtoa_r+0x5fc>)
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	4639      	mov	r1, r7
 8007fba:	f7f8 fd8f 	bl	8000adc <__aeabi_dcmplt>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d07c      	beq.n	80080bc <_dtoa_r+0x4b4>
 8007fc2:	f1b9 0f00 	cmp.w	r9, #0
 8007fc6:	d079      	beq.n	80080bc <_dtoa_r+0x4b4>
 8007fc8:	9b02      	ldr	r3, [sp, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	dd35      	ble.n	800803a <_dtoa_r+0x432>
 8007fce:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007fd2:	9308      	str	r3, [sp, #32]
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	4b8b      	ldr	r3, [pc, #556]	; (8008208 <_dtoa_r+0x600>)
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7f8 fb0c 	bl	80005f8 <__aeabi_dmul>
 8007fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8007fe4:	9f02      	ldr	r7, [sp, #8]
 8007fe6:	3501      	adds	r5, #1
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f7f8 fa9b 	bl	8000524 <__aeabi_i2d>
 8007fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ff2:	f7f8 fb01 	bl	80005f8 <__aeabi_dmul>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4b84      	ldr	r3, [pc, #528]	; (800820c <_dtoa_r+0x604>)
 8007ffa:	f7f8 f947 	bl	800028c <__adddf3>
 8007ffe:	4605      	mov	r5, r0
 8008000:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008004:	2f00      	cmp	r7, #0
 8008006:	d15d      	bne.n	80080c4 <_dtoa_r+0x4bc>
 8008008:	2200      	movs	r2, #0
 800800a:	4b81      	ldr	r3, [pc, #516]	; (8008210 <_dtoa_r+0x608>)
 800800c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008010:	f7f8 f93a 	bl	8000288 <__aeabi_dsub>
 8008014:	462a      	mov	r2, r5
 8008016:	4633      	mov	r3, r6
 8008018:	e9cd 0100 	strd	r0, r1, [sp]
 800801c:	f7f8 fd7c 	bl	8000b18 <__aeabi_dcmpgt>
 8008020:	2800      	cmp	r0, #0
 8008022:	f040 8288 	bne.w	8008536 <_dtoa_r+0x92e>
 8008026:	462a      	mov	r2, r5
 8008028:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800802c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008030:	f7f8 fd54 	bl	8000adc <__aeabi_dcmplt>
 8008034:	2800      	cmp	r0, #0
 8008036:	f040 827c 	bne.w	8008532 <_dtoa_r+0x92a>
 800803a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800803e:	e9cd 2300 	strd	r2, r3, [sp]
 8008042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008044:	2b00      	cmp	r3, #0
 8008046:	f2c0 8150 	blt.w	80082ea <_dtoa_r+0x6e2>
 800804a:	f1ba 0f0e 	cmp.w	sl, #14
 800804e:	f300 814c 	bgt.w	80082ea <_dtoa_r+0x6e2>
 8008052:	4b6a      	ldr	r3, [pc, #424]	; (80081fc <_dtoa_r+0x5f4>)
 8008054:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008058:	ed93 7b00 	vldr	d7, [r3]
 800805c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008064:	f280 80d8 	bge.w	8008218 <_dtoa_r+0x610>
 8008068:	f1b9 0f00 	cmp.w	r9, #0
 800806c:	f300 80d4 	bgt.w	8008218 <_dtoa_r+0x610>
 8008070:	f040 825e 	bne.w	8008530 <_dtoa_r+0x928>
 8008074:	2200      	movs	r2, #0
 8008076:	4b66      	ldr	r3, [pc, #408]	; (8008210 <_dtoa_r+0x608>)
 8008078:	ec51 0b17 	vmov	r0, r1, d7
 800807c:	f7f8 fabc 	bl	80005f8 <__aeabi_dmul>
 8008080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008084:	f7f8 fd3e 	bl	8000b04 <__aeabi_dcmpge>
 8008088:	464f      	mov	r7, r9
 800808a:	464e      	mov	r6, r9
 800808c:	2800      	cmp	r0, #0
 800808e:	f040 8234 	bne.w	80084fa <_dtoa_r+0x8f2>
 8008092:	2331      	movs	r3, #49	; 0x31
 8008094:	f10b 0501 	add.w	r5, fp, #1
 8008098:	f88b 3000 	strb.w	r3, [fp]
 800809c:	f10a 0a01 	add.w	sl, sl, #1
 80080a0:	e22f      	b.n	8008502 <_dtoa_r+0x8fa>
 80080a2:	07f2      	lsls	r2, r6, #31
 80080a4:	d505      	bpl.n	80080b2 <_dtoa_r+0x4aa>
 80080a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080aa:	f7f8 faa5 	bl	80005f8 <__aeabi_dmul>
 80080ae:	3501      	adds	r5, #1
 80080b0:	2301      	movs	r3, #1
 80080b2:	1076      	asrs	r6, r6, #1
 80080b4:	3708      	adds	r7, #8
 80080b6:	e772      	b.n	8007f9e <_dtoa_r+0x396>
 80080b8:	2502      	movs	r5, #2
 80080ba:	e774      	b.n	8007fa6 <_dtoa_r+0x39e>
 80080bc:	f8cd a020 	str.w	sl, [sp, #32]
 80080c0:	464f      	mov	r7, r9
 80080c2:	e791      	b.n	8007fe8 <_dtoa_r+0x3e0>
 80080c4:	4b4d      	ldr	r3, [pc, #308]	; (80081fc <_dtoa_r+0x5f4>)
 80080c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80080ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d047      	beq.n	8008164 <_dtoa_r+0x55c>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	2000      	movs	r0, #0
 80080da:	494e      	ldr	r1, [pc, #312]	; (8008214 <_dtoa_r+0x60c>)
 80080dc:	f7f8 fbb6 	bl	800084c <__aeabi_ddiv>
 80080e0:	462a      	mov	r2, r5
 80080e2:	4633      	mov	r3, r6
 80080e4:	f7f8 f8d0 	bl	8000288 <__aeabi_dsub>
 80080e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80080ec:	465d      	mov	r5, fp
 80080ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080f2:	f7f8 fd31 	bl	8000b58 <__aeabi_d2iz>
 80080f6:	4606      	mov	r6, r0
 80080f8:	f7f8 fa14 	bl	8000524 <__aeabi_i2d>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008104:	f7f8 f8c0 	bl	8000288 <__aeabi_dsub>
 8008108:	3630      	adds	r6, #48	; 0x30
 800810a:	f805 6b01 	strb.w	r6, [r5], #1
 800810e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008112:	e9cd 0100 	strd	r0, r1, [sp]
 8008116:	f7f8 fce1 	bl	8000adc <__aeabi_dcmplt>
 800811a:	2800      	cmp	r0, #0
 800811c:	d163      	bne.n	80081e6 <_dtoa_r+0x5de>
 800811e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008122:	2000      	movs	r0, #0
 8008124:	4937      	ldr	r1, [pc, #220]	; (8008204 <_dtoa_r+0x5fc>)
 8008126:	f7f8 f8af 	bl	8000288 <__aeabi_dsub>
 800812a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800812e:	f7f8 fcd5 	bl	8000adc <__aeabi_dcmplt>
 8008132:	2800      	cmp	r0, #0
 8008134:	f040 80b7 	bne.w	80082a6 <_dtoa_r+0x69e>
 8008138:	eba5 030b 	sub.w	r3, r5, fp
 800813c:	429f      	cmp	r7, r3
 800813e:	f77f af7c 	ble.w	800803a <_dtoa_r+0x432>
 8008142:	2200      	movs	r2, #0
 8008144:	4b30      	ldr	r3, [pc, #192]	; (8008208 <_dtoa_r+0x600>)
 8008146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800814a:	f7f8 fa55 	bl	80005f8 <__aeabi_dmul>
 800814e:	2200      	movs	r2, #0
 8008150:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008154:	4b2c      	ldr	r3, [pc, #176]	; (8008208 <_dtoa_r+0x600>)
 8008156:	e9dd 0100 	ldrd	r0, r1, [sp]
 800815a:	f7f8 fa4d 	bl	80005f8 <__aeabi_dmul>
 800815e:	e9cd 0100 	strd	r0, r1, [sp]
 8008162:	e7c4      	b.n	80080ee <_dtoa_r+0x4e6>
 8008164:	462a      	mov	r2, r5
 8008166:	4633      	mov	r3, r6
 8008168:	f7f8 fa46 	bl	80005f8 <__aeabi_dmul>
 800816c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008170:	eb0b 0507 	add.w	r5, fp, r7
 8008174:	465e      	mov	r6, fp
 8008176:	e9dd 0100 	ldrd	r0, r1, [sp]
 800817a:	f7f8 fced 	bl	8000b58 <__aeabi_d2iz>
 800817e:	4607      	mov	r7, r0
 8008180:	f7f8 f9d0 	bl	8000524 <__aeabi_i2d>
 8008184:	3730      	adds	r7, #48	; 0x30
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800818e:	f7f8 f87b 	bl	8000288 <__aeabi_dsub>
 8008192:	f806 7b01 	strb.w	r7, [r6], #1
 8008196:	42ae      	cmp	r6, r5
 8008198:	e9cd 0100 	strd	r0, r1, [sp]
 800819c:	f04f 0200 	mov.w	r2, #0
 80081a0:	d126      	bne.n	80081f0 <_dtoa_r+0x5e8>
 80081a2:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <_dtoa_r+0x60c>)
 80081a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081a8:	f7f8 f870 	bl	800028c <__adddf3>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081b4:	f7f8 fcb0 	bl	8000b18 <__aeabi_dcmpgt>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d174      	bne.n	80082a6 <_dtoa_r+0x69e>
 80081bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80081c0:	2000      	movs	r0, #0
 80081c2:	4914      	ldr	r1, [pc, #80]	; (8008214 <_dtoa_r+0x60c>)
 80081c4:	f7f8 f860 	bl	8000288 <__aeabi_dsub>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081d0:	f7f8 fc84 	bl	8000adc <__aeabi_dcmplt>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f43f af30 	beq.w	800803a <_dtoa_r+0x432>
 80081da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081de:	2b30      	cmp	r3, #48	; 0x30
 80081e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80081e4:	d002      	beq.n	80081ec <_dtoa_r+0x5e4>
 80081e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80081ea:	e04a      	b.n	8008282 <_dtoa_r+0x67a>
 80081ec:	4615      	mov	r5, r2
 80081ee:	e7f4      	b.n	80081da <_dtoa_r+0x5d2>
 80081f0:	4b05      	ldr	r3, [pc, #20]	; (8008208 <_dtoa_r+0x600>)
 80081f2:	f7f8 fa01 	bl	80005f8 <__aeabi_dmul>
 80081f6:	e9cd 0100 	strd	r0, r1, [sp]
 80081fa:	e7bc      	b.n	8008176 <_dtoa_r+0x56e>
 80081fc:	08009c18 	.word	0x08009c18
 8008200:	08009bf0 	.word	0x08009bf0
 8008204:	3ff00000 	.word	0x3ff00000
 8008208:	40240000 	.word	0x40240000
 800820c:	401c0000 	.word	0x401c0000
 8008210:	40140000 	.word	0x40140000
 8008214:	3fe00000 	.word	0x3fe00000
 8008218:	e9dd 6700 	ldrd	r6, r7, [sp]
 800821c:	465d      	mov	r5, fp
 800821e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008222:	4630      	mov	r0, r6
 8008224:	4639      	mov	r1, r7
 8008226:	f7f8 fb11 	bl	800084c <__aeabi_ddiv>
 800822a:	f7f8 fc95 	bl	8000b58 <__aeabi_d2iz>
 800822e:	4680      	mov	r8, r0
 8008230:	f7f8 f978 	bl	8000524 <__aeabi_i2d>
 8008234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008238:	f7f8 f9de 	bl	80005f8 <__aeabi_dmul>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4630      	mov	r0, r6
 8008242:	4639      	mov	r1, r7
 8008244:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008248:	f7f8 f81e 	bl	8000288 <__aeabi_dsub>
 800824c:	f805 6b01 	strb.w	r6, [r5], #1
 8008250:	eba5 060b 	sub.w	r6, r5, fp
 8008254:	45b1      	cmp	r9, r6
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	d139      	bne.n	80082d0 <_dtoa_r+0x6c8>
 800825c:	f7f8 f816 	bl	800028c <__adddf3>
 8008260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008264:	4606      	mov	r6, r0
 8008266:	460f      	mov	r7, r1
 8008268:	f7f8 fc56 	bl	8000b18 <__aeabi_dcmpgt>
 800826c:	b9c8      	cbnz	r0, 80082a2 <_dtoa_r+0x69a>
 800826e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008272:	4630      	mov	r0, r6
 8008274:	4639      	mov	r1, r7
 8008276:	f7f8 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800827a:	b110      	cbz	r0, 8008282 <_dtoa_r+0x67a>
 800827c:	f018 0f01 	tst.w	r8, #1
 8008280:	d10f      	bne.n	80082a2 <_dtoa_r+0x69a>
 8008282:	9904      	ldr	r1, [sp, #16]
 8008284:	4620      	mov	r0, r4
 8008286:	f000 fcaa 	bl	8008bde <_Bfree>
 800828a:	2300      	movs	r3, #0
 800828c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800828e:	702b      	strb	r3, [r5, #0]
 8008290:	f10a 0301 	add.w	r3, sl, #1
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 8241 	beq.w	8008720 <_dtoa_r+0xb18>
 800829e:	601d      	str	r5, [r3, #0]
 80082a0:	e23e      	b.n	8008720 <_dtoa_r+0xb18>
 80082a2:	f8cd a020 	str.w	sl, [sp, #32]
 80082a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082aa:	2a39      	cmp	r2, #57	; 0x39
 80082ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80082b0:	d108      	bne.n	80082c4 <_dtoa_r+0x6bc>
 80082b2:	459b      	cmp	fp, r3
 80082b4:	d10a      	bne.n	80082cc <_dtoa_r+0x6c4>
 80082b6:	9b08      	ldr	r3, [sp, #32]
 80082b8:	3301      	adds	r3, #1
 80082ba:	9308      	str	r3, [sp, #32]
 80082bc:	2330      	movs	r3, #48	; 0x30
 80082be:	f88b 3000 	strb.w	r3, [fp]
 80082c2:	465b      	mov	r3, fp
 80082c4:	781a      	ldrb	r2, [r3, #0]
 80082c6:	3201      	adds	r2, #1
 80082c8:	701a      	strb	r2, [r3, #0]
 80082ca:	e78c      	b.n	80081e6 <_dtoa_r+0x5de>
 80082cc:	461d      	mov	r5, r3
 80082ce:	e7ea      	b.n	80082a6 <_dtoa_r+0x69e>
 80082d0:	2200      	movs	r2, #0
 80082d2:	4b9b      	ldr	r3, [pc, #620]	; (8008540 <_dtoa_r+0x938>)
 80082d4:	f7f8 f990 	bl	80005f8 <__aeabi_dmul>
 80082d8:	2200      	movs	r2, #0
 80082da:	2300      	movs	r3, #0
 80082dc:	4606      	mov	r6, r0
 80082de:	460f      	mov	r7, r1
 80082e0:	f7f8 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d09a      	beq.n	800821e <_dtoa_r+0x616>
 80082e8:	e7cb      	b.n	8008282 <_dtoa_r+0x67a>
 80082ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ec:	2a00      	cmp	r2, #0
 80082ee:	f000 808b 	beq.w	8008408 <_dtoa_r+0x800>
 80082f2:	9a06      	ldr	r2, [sp, #24]
 80082f4:	2a01      	cmp	r2, #1
 80082f6:	dc6e      	bgt.n	80083d6 <_dtoa_r+0x7ce>
 80082f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	d067      	beq.n	80083ce <_dtoa_r+0x7c6>
 80082fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008302:	9f07      	ldr	r7, [sp, #28]
 8008304:	9d05      	ldr	r5, [sp, #20]
 8008306:	9a05      	ldr	r2, [sp, #20]
 8008308:	2101      	movs	r1, #1
 800830a:	441a      	add	r2, r3
 800830c:	4620      	mov	r0, r4
 800830e:	9205      	str	r2, [sp, #20]
 8008310:	4498      	add	r8, r3
 8008312:	f000 fd04 	bl	8008d1e <__i2b>
 8008316:	4606      	mov	r6, r0
 8008318:	2d00      	cmp	r5, #0
 800831a:	dd0c      	ble.n	8008336 <_dtoa_r+0x72e>
 800831c:	f1b8 0f00 	cmp.w	r8, #0
 8008320:	dd09      	ble.n	8008336 <_dtoa_r+0x72e>
 8008322:	4545      	cmp	r5, r8
 8008324:	9a05      	ldr	r2, [sp, #20]
 8008326:	462b      	mov	r3, r5
 8008328:	bfa8      	it	ge
 800832a:	4643      	movge	r3, r8
 800832c:	1ad2      	subs	r2, r2, r3
 800832e:	9205      	str	r2, [sp, #20]
 8008330:	1aed      	subs	r5, r5, r3
 8008332:	eba8 0803 	sub.w	r8, r8, r3
 8008336:	9b07      	ldr	r3, [sp, #28]
 8008338:	b1eb      	cbz	r3, 8008376 <_dtoa_r+0x76e>
 800833a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800833c:	2b00      	cmp	r3, #0
 800833e:	d067      	beq.n	8008410 <_dtoa_r+0x808>
 8008340:	b18f      	cbz	r7, 8008366 <_dtoa_r+0x75e>
 8008342:	4631      	mov	r1, r6
 8008344:	463a      	mov	r2, r7
 8008346:	4620      	mov	r0, r4
 8008348:	f000 fd88 	bl	8008e5c <__pow5mult>
 800834c:	9a04      	ldr	r2, [sp, #16]
 800834e:	4601      	mov	r1, r0
 8008350:	4606      	mov	r6, r0
 8008352:	4620      	mov	r0, r4
 8008354:	f000 fcec 	bl	8008d30 <__multiply>
 8008358:	9904      	ldr	r1, [sp, #16]
 800835a:	9008      	str	r0, [sp, #32]
 800835c:	4620      	mov	r0, r4
 800835e:	f000 fc3e 	bl	8008bde <_Bfree>
 8008362:	9b08      	ldr	r3, [sp, #32]
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	9b07      	ldr	r3, [sp, #28]
 8008368:	1bda      	subs	r2, r3, r7
 800836a:	d004      	beq.n	8008376 <_dtoa_r+0x76e>
 800836c:	9904      	ldr	r1, [sp, #16]
 800836e:	4620      	mov	r0, r4
 8008370:	f000 fd74 	bl	8008e5c <__pow5mult>
 8008374:	9004      	str	r0, [sp, #16]
 8008376:	2101      	movs	r1, #1
 8008378:	4620      	mov	r0, r4
 800837a:	f000 fcd0 	bl	8008d1e <__i2b>
 800837e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008380:	4607      	mov	r7, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 81d0 	beq.w	8008728 <_dtoa_r+0xb20>
 8008388:	461a      	mov	r2, r3
 800838a:	4601      	mov	r1, r0
 800838c:	4620      	mov	r0, r4
 800838e:	f000 fd65 	bl	8008e5c <__pow5mult>
 8008392:	9b06      	ldr	r3, [sp, #24]
 8008394:	2b01      	cmp	r3, #1
 8008396:	4607      	mov	r7, r0
 8008398:	dc40      	bgt.n	800841c <_dtoa_r+0x814>
 800839a:	9b00      	ldr	r3, [sp, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d139      	bne.n	8008414 <_dtoa_r+0x80c>
 80083a0:	9b01      	ldr	r3, [sp, #4]
 80083a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d136      	bne.n	8008418 <_dtoa_r+0x810>
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083b0:	0d1b      	lsrs	r3, r3, #20
 80083b2:	051b      	lsls	r3, r3, #20
 80083b4:	b12b      	cbz	r3, 80083c2 <_dtoa_r+0x7ba>
 80083b6:	9b05      	ldr	r3, [sp, #20]
 80083b8:	3301      	adds	r3, #1
 80083ba:	9305      	str	r3, [sp, #20]
 80083bc:	f108 0801 	add.w	r8, r8, #1
 80083c0:	2301      	movs	r3, #1
 80083c2:	9307      	str	r3, [sp, #28]
 80083c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d12a      	bne.n	8008420 <_dtoa_r+0x818>
 80083ca:	2001      	movs	r0, #1
 80083cc:	e030      	b.n	8008430 <_dtoa_r+0x828>
 80083ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083d4:	e795      	b.n	8008302 <_dtoa_r+0x6fa>
 80083d6:	9b07      	ldr	r3, [sp, #28]
 80083d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80083dc:	42bb      	cmp	r3, r7
 80083de:	bfbf      	itttt	lt
 80083e0:	9b07      	ldrlt	r3, [sp, #28]
 80083e2:	9707      	strlt	r7, [sp, #28]
 80083e4:	1afa      	sublt	r2, r7, r3
 80083e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80083e8:	bfbb      	ittet	lt
 80083ea:	189b      	addlt	r3, r3, r2
 80083ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80083ee:	1bdf      	subge	r7, r3, r7
 80083f0:	2700      	movlt	r7, #0
 80083f2:	f1b9 0f00 	cmp.w	r9, #0
 80083f6:	bfb5      	itete	lt
 80083f8:	9b05      	ldrlt	r3, [sp, #20]
 80083fa:	9d05      	ldrge	r5, [sp, #20]
 80083fc:	eba3 0509 	sublt.w	r5, r3, r9
 8008400:	464b      	movge	r3, r9
 8008402:	bfb8      	it	lt
 8008404:	2300      	movlt	r3, #0
 8008406:	e77e      	b.n	8008306 <_dtoa_r+0x6fe>
 8008408:	9f07      	ldr	r7, [sp, #28]
 800840a:	9d05      	ldr	r5, [sp, #20]
 800840c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800840e:	e783      	b.n	8008318 <_dtoa_r+0x710>
 8008410:	9a07      	ldr	r2, [sp, #28]
 8008412:	e7ab      	b.n	800836c <_dtoa_r+0x764>
 8008414:	2300      	movs	r3, #0
 8008416:	e7d4      	b.n	80083c2 <_dtoa_r+0x7ba>
 8008418:	9b00      	ldr	r3, [sp, #0]
 800841a:	e7d2      	b.n	80083c2 <_dtoa_r+0x7ba>
 800841c:	2300      	movs	r3, #0
 800841e:	9307      	str	r3, [sp, #28]
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008426:	6918      	ldr	r0, [r3, #16]
 8008428:	f000 fc2b 	bl	8008c82 <__hi0bits>
 800842c:	f1c0 0020 	rsb	r0, r0, #32
 8008430:	4440      	add	r0, r8
 8008432:	f010 001f 	ands.w	r0, r0, #31
 8008436:	d047      	beq.n	80084c8 <_dtoa_r+0x8c0>
 8008438:	f1c0 0320 	rsb	r3, r0, #32
 800843c:	2b04      	cmp	r3, #4
 800843e:	dd3b      	ble.n	80084b8 <_dtoa_r+0x8b0>
 8008440:	9b05      	ldr	r3, [sp, #20]
 8008442:	f1c0 001c 	rsb	r0, r0, #28
 8008446:	4403      	add	r3, r0
 8008448:	9305      	str	r3, [sp, #20]
 800844a:	4405      	add	r5, r0
 800844c:	4480      	add	r8, r0
 800844e:	9b05      	ldr	r3, [sp, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	dd05      	ble.n	8008460 <_dtoa_r+0x858>
 8008454:	461a      	mov	r2, r3
 8008456:	9904      	ldr	r1, [sp, #16]
 8008458:	4620      	mov	r0, r4
 800845a:	f000 fd4d 	bl	8008ef8 <__lshift>
 800845e:	9004      	str	r0, [sp, #16]
 8008460:	f1b8 0f00 	cmp.w	r8, #0
 8008464:	dd05      	ble.n	8008472 <_dtoa_r+0x86a>
 8008466:	4639      	mov	r1, r7
 8008468:	4642      	mov	r2, r8
 800846a:	4620      	mov	r0, r4
 800846c:	f000 fd44 	bl	8008ef8 <__lshift>
 8008470:	4607      	mov	r7, r0
 8008472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008474:	b353      	cbz	r3, 80084cc <_dtoa_r+0x8c4>
 8008476:	4639      	mov	r1, r7
 8008478:	9804      	ldr	r0, [sp, #16]
 800847a:	f000 fd91 	bl	8008fa0 <__mcmp>
 800847e:	2800      	cmp	r0, #0
 8008480:	da24      	bge.n	80084cc <_dtoa_r+0x8c4>
 8008482:	2300      	movs	r3, #0
 8008484:	220a      	movs	r2, #10
 8008486:	9904      	ldr	r1, [sp, #16]
 8008488:	4620      	mov	r0, r4
 800848a:	f000 fbbf 	bl	8008c0c <__multadd>
 800848e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008490:	9004      	str	r0, [sp, #16]
 8008492:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 814d 	beq.w	8008736 <_dtoa_r+0xb2e>
 800849c:	2300      	movs	r3, #0
 800849e:	4631      	mov	r1, r6
 80084a0:	220a      	movs	r2, #10
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 fbb2 	bl	8008c0c <__multadd>
 80084a8:	9b02      	ldr	r3, [sp, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	4606      	mov	r6, r0
 80084ae:	dc4f      	bgt.n	8008550 <_dtoa_r+0x948>
 80084b0:	9b06      	ldr	r3, [sp, #24]
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	dd4c      	ble.n	8008550 <_dtoa_r+0x948>
 80084b6:	e011      	b.n	80084dc <_dtoa_r+0x8d4>
 80084b8:	d0c9      	beq.n	800844e <_dtoa_r+0x846>
 80084ba:	9a05      	ldr	r2, [sp, #20]
 80084bc:	331c      	adds	r3, #28
 80084be:	441a      	add	r2, r3
 80084c0:	9205      	str	r2, [sp, #20]
 80084c2:	441d      	add	r5, r3
 80084c4:	4498      	add	r8, r3
 80084c6:	e7c2      	b.n	800844e <_dtoa_r+0x846>
 80084c8:	4603      	mov	r3, r0
 80084ca:	e7f6      	b.n	80084ba <_dtoa_r+0x8b2>
 80084cc:	f1b9 0f00 	cmp.w	r9, #0
 80084d0:	dc38      	bgt.n	8008544 <_dtoa_r+0x93c>
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	dd35      	ble.n	8008544 <_dtoa_r+0x93c>
 80084d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80084dc:	9b02      	ldr	r3, [sp, #8]
 80084de:	b963      	cbnz	r3, 80084fa <_dtoa_r+0x8f2>
 80084e0:	4639      	mov	r1, r7
 80084e2:	2205      	movs	r2, #5
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 fb91 	bl	8008c0c <__multadd>
 80084ea:	4601      	mov	r1, r0
 80084ec:	4607      	mov	r7, r0
 80084ee:	9804      	ldr	r0, [sp, #16]
 80084f0:	f000 fd56 	bl	8008fa0 <__mcmp>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f73f adcc 	bgt.w	8008092 <_dtoa_r+0x48a>
 80084fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fc:	465d      	mov	r5, fp
 80084fe:	ea6f 0a03 	mvn.w	sl, r3
 8008502:	f04f 0900 	mov.w	r9, #0
 8008506:	4639      	mov	r1, r7
 8008508:	4620      	mov	r0, r4
 800850a:	f000 fb68 	bl	8008bde <_Bfree>
 800850e:	2e00      	cmp	r6, #0
 8008510:	f43f aeb7 	beq.w	8008282 <_dtoa_r+0x67a>
 8008514:	f1b9 0f00 	cmp.w	r9, #0
 8008518:	d005      	beq.n	8008526 <_dtoa_r+0x91e>
 800851a:	45b1      	cmp	r9, r6
 800851c:	d003      	beq.n	8008526 <_dtoa_r+0x91e>
 800851e:	4649      	mov	r1, r9
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fb5c 	bl	8008bde <_Bfree>
 8008526:	4631      	mov	r1, r6
 8008528:	4620      	mov	r0, r4
 800852a:	f000 fb58 	bl	8008bde <_Bfree>
 800852e:	e6a8      	b.n	8008282 <_dtoa_r+0x67a>
 8008530:	2700      	movs	r7, #0
 8008532:	463e      	mov	r6, r7
 8008534:	e7e1      	b.n	80084fa <_dtoa_r+0x8f2>
 8008536:	f8dd a020 	ldr.w	sl, [sp, #32]
 800853a:	463e      	mov	r6, r7
 800853c:	e5a9      	b.n	8008092 <_dtoa_r+0x48a>
 800853e:	bf00      	nop
 8008540:	40240000 	.word	0x40240000
 8008544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008546:	f8cd 9008 	str.w	r9, [sp, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 80fa 	beq.w	8008744 <_dtoa_r+0xb3c>
 8008550:	2d00      	cmp	r5, #0
 8008552:	dd05      	ble.n	8008560 <_dtoa_r+0x958>
 8008554:	4631      	mov	r1, r6
 8008556:	462a      	mov	r2, r5
 8008558:	4620      	mov	r0, r4
 800855a:	f000 fccd 	bl	8008ef8 <__lshift>
 800855e:	4606      	mov	r6, r0
 8008560:	9b07      	ldr	r3, [sp, #28]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d04c      	beq.n	8008600 <_dtoa_r+0x9f8>
 8008566:	6871      	ldr	r1, [r6, #4]
 8008568:	4620      	mov	r0, r4
 800856a:	f000 fb04 	bl	8008b76 <_Balloc>
 800856e:	6932      	ldr	r2, [r6, #16]
 8008570:	3202      	adds	r2, #2
 8008572:	4605      	mov	r5, r0
 8008574:	0092      	lsls	r2, r2, #2
 8008576:	f106 010c 	add.w	r1, r6, #12
 800857a:	300c      	adds	r0, #12
 800857c:	f000 faf0 	bl	8008b60 <memcpy>
 8008580:	2201      	movs	r2, #1
 8008582:	4629      	mov	r1, r5
 8008584:	4620      	mov	r0, r4
 8008586:	f000 fcb7 	bl	8008ef8 <__lshift>
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	f8cd b014 	str.w	fp, [sp, #20]
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	46b1      	mov	r9, r6
 8008596:	9307      	str	r3, [sp, #28]
 8008598:	4606      	mov	r6, r0
 800859a:	4639      	mov	r1, r7
 800859c:	9804      	ldr	r0, [sp, #16]
 800859e:	f7ff faa5 	bl	8007aec <quorem>
 80085a2:	4649      	mov	r1, r9
 80085a4:	4605      	mov	r5, r0
 80085a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80085aa:	9804      	ldr	r0, [sp, #16]
 80085ac:	f000 fcf8 	bl	8008fa0 <__mcmp>
 80085b0:	4632      	mov	r2, r6
 80085b2:	9000      	str	r0, [sp, #0]
 80085b4:	4639      	mov	r1, r7
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 fd0c 	bl	8008fd4 <__mdiff>
 80085bc:	68c3      	ldr	r3, [r0, #12]
 80085be:	4602      	mov	r2, r0
 80085c0:	bb03      	cbnz	r3, 8008604 <_dtoa_r+0x9fc>
 80085c2:	4601      	mov	r1, r0
 80085c4:	9008      	str	r0, [sp, #32]
 80085c6:	9804      	ldr	r0, [sp, #16]
 80085c8:	f000 fcea 	bl	8008fa0 <__mcmp>
 80085cc:	9a08      	ldr	r2, [sp, #32]
 80085ce:	4603      	mov	r3, r0
 80085d0:	4611      	mov	r1, r2
 80085d2:	4620      	mov	r0, r4
 80085d4:	9308      	str	r3, [sp, #32]
 80085d6:	f000 fb02 	bl	8008bde <_Bfree>
 80085da:	9b08      	ldr	r3, [sp, #32]
 80085dc:	b9a3      	cbnz	r3, 8008608 <_dtoa_r+0xa00>
 80085de:	9a06      	ldr	r2, [sp, #24]
 80085e0:	b992      	cbnz	r2, 8008608 <_dtoa_r+0xa00>
 80085e2:	9a07      	ldr	r2, [sp, #28]
 80085e4:	b982      	cbnz	r2, 8008608 <_dtoa_r+0xa00>
 80085e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80085ea:	d029      	beq.n	8008640 <_dtoa_r+0xa38>
 80085ec:	9b00      	ldr	r3, [sp, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dd01      	ble.n	80085f6 <_dtoa_r+0x9ee>
 80085f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80085f6:	9b05      	ldr	r3, [sp, #20]
 80085f8:	1c5d      	adds	r5, r3, #1
 80085fa:	f883 8000 	strb.w	r8, [r3]
 80085fe:	e782      	b.n	8008506 <_dtoa_r+0x8fe>
 8008600:	4630      	mov	r0, r6
 8008602:	e7c2      	b.n	800858a <_dtoa_r+0x982>
 8008604:	2301      	movs	r3, #1
 8008606:	e7e3      	b.n	80085d0 <_dtoa_r+0x9c8>
 8008608:	9a00      	ldr	r2, [sp, #0]
 800860a:	2a00      	cmp	r2, #0
 800860c:	db04      	blt.n	8008618 <_dtoa_r+0xa10>
 800860e:	d125      	bne.n	800865c <_dtoa_r+0xa54>
 8008610:	9a06      	ldr	r2, [sp, #24]
 8008612:	bb1a      	cbnz	r2, 800865c <_dtoa_r+0xa54>
 8008614:	9a07      	ldr	r2, [sp, #28]
 8008616:	bb0a      	cbnz	r2, 800865c <_dtoa_r+0xa54>
 8008618:	2b00      	cmp	r3, #0
 800861a:	ddec      	ble.n	80085f6 <_dtoa_r+0x9ee>
 800861c:	2201      	movs	r2, #1
 800861e:	9904      	ldr	r1, [sp, #16]
 8008620:	4620      	mov	r0, r4
 8008622:	f000 fc69 	bl	8008ef8 <__lshift>
 8008626:	4639      	mov	r1, r7
 8008628:	9004      	str	r0, [sp, #16]
 800862a:	f000 fcb9 	bl	8008fa0 <__mcmp>
 800862e:	2800      	cmp	r0, #0
 8008630:	dc03      	bgt.n	800863a <_dtoa_r+0xa32>
 8008632:	d1e0      	bne.n	80085f6 <_dtoa_r+0x9ee>
 8008634:	f018 0f01 	tst.w	r8, #1
 8008638:	d0dd      	beq.n	80085f6 <_dtoa_r+0x9ee>
 800863a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800863e:	d1d8      	bne.n	80085f2 <_dtoa_r+0x9ea>
 8008640:	9b05      	ldr	r3, [sp, #20]
 8008642:	9a05      	ldr	r2, [sp, #20]
 8008644:	1c5d      	adds	r5, r3, #1
 8008646:	2339      	movs	r3, #57	; 0x39
 8008648:	7013      	strb	r3, [r2, #0]
 800864a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800864e:	2b39      	cmp	r3, #57	; 0x39
 8008650:	f105 32ff 	add.w	r2, r5, #4294967295
 8008654:	d04f      	beq.n	80086f6 <_dtoa_r+0xaee>
 8008656:	3301      	adds	r3, #1
 8008658:	7013      	strb	r3, [r2, #0]
 800865a:	e754      	b.n	8008506 <_dtoa_r+0x8fe>
 800865c:	9a05      	ldr	r2, [sp, #20]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f102 0501 	add.w	r5, r2, #1
 8008664:	dd06      	ble.n	8008674 <_dtoa_r+0xa6c>
 8008666:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800866a:	d0e9      	beq.n	8008640 <_dtoa_r+0xa38>
 800866c:	f108 0801 	add.w	r8, r8, #1
 8008670:	9b05      	ldr	r3, [sp, #20]
 8008672:	e7c2      	b.n	80085fa <_dtoa_r+0x9f2>
 8008674:	9a02      	ldr	r2, [sp, #8]
 8008676:	f805 8c01 	strb.w	r8, [r5, #-1]
 800867a:	eba5 030b 	sub.w	r3, r5, fp
 800867e:	4293      	cmp	r3, r2
 8008680:	d021      	beq.n	80086c6 <_dtoa_r+0xabe>
 8008682:	2300      	movs	r3, #0
 8008684:	220a      	movs	r2, #10
 8008686:	9904      	ldr	r1, [sp, #16]
 8008688:	4620      	mov	r0, r4
 800868a:	f000 fabf 	bl	8008c0c <__multadd>
 800868e:	45b1      	cmp	r9, r6
 8008690:	9004      	str	r0, [sp, #16]
 8008692:	f04f 0300 	mov.w	r3, #0
 8008696:	f04f 020a 	mov.w	r2, #10
 800869a:	4649      	mov	r1, r9
 800869c:	4620      	mov	r0, r4
 800869e:	d105      	bne.n	80086ac <_dtoa_r+0xaa4>
 80086a0:	f000 fab4 	bl	8008c0c <__multadd>
 80086a4:	4681      	mov	r9, r0
 80086a6:	4606      	mov	r6, r0
 80086a8:	9505      	str	r5, [sp, #20]
 80086aa:	e776      	b.n	800859a <_dtoa_r+0x992>
 80086ac:	f000 faae 	bl	8008c0c <__multadd>
 80086b0:	4631      	mov	r1, r6
 80086b2:	4681      	mov	r9, r0
 80086b4:	2300      	movs	r3, #0
 80086b6:	220a      	movs	r2, #10
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 faa7 	bl	8008c0c <__multadd>
 80086be:	4606      	mov	r6, r0
 80086c0:	e7f2      	b.n	80086a8 <_dtoa_r+0xaa0>
 80086c2:	f04f 0900 	mov.w	r9, #0
 80086c6:	2201      	movs	r2, #1
 80086c8:	9904      	ldr	r1, [sp, #16]
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 fc14 	bl	8008ef8 <__lshift>
 80086d0:	4639      	mov	r1, r7
 80086d2:	9004      	str	r0, [sp, #16]
 80086d4:	f000 fc64 	bl	8008fa0 <__mcmp>
 80086d8:	2800      	cmp	r0, #0
 80086da:	dcb6      	bgt.n	800864a <_dtoa_r+0xa42>
 80086dc:	d102      	bne.n	80086e4 <_dtoa_r+0xadc>
 80086de:	f018 0f01 	tst.w	r8, #1
 80086e2:	d1b2      	bne.n	800864a <_dtoa_r+0xa42>
 80086e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086e8:	2b30      	cmp	r3, #48	; 0x30
 80086ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80086ee:	f47f af0a 	bne.w	8008506 <_dtoa_r+0x8fe>
 80086f2:	4615      	mov	r5, r2
 80086f4:	e7f6      	b.n	80086e4 <_dtoa_r+0xadc>
 80086f6:	4593      	cmp	fp, r2
 80086f8:	d105      	bne.n	8008706 <_dtoa_r+0xafe>
 80086fa:	2331      	movs	r3, #49	; 0x31
 80086fc:	f10a 0a01 	add.w	sl, sl, #1
 8008700:	f88b 3000 	strb.w	r3, [fp]
 8008704:	e6ff      	b.n	8008506 <_dtoa_r+0x8fe>
 8008706:	4615      	mov	r5, r2
 8008708:	e79f      	b.n	800864a <_dtoa_r+0xa42>
 800870a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008770 <_dtoa_r+0xb68>
 800870e:	e007      	b.n	8008720 <_dtoa_r+0xb18>
 8008710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008712:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008774 <_dtoa_r+0xb6c>
 8008716:	b11b      	cbz	r3, 8008720 <_dtoa_r+0xb18>
 8008718:	f10b 0308 	add.w	r3, fp, #8
 800871c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800871e:	6013      	str	r3, [r2, #0]
 8008720:	4658      	mov	r0, fp
 8008722:	b017      	add	sp, #92	; 0x5c
 8008724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	9b06      	ldr	r3, [sp, #24]
 800872a:	2b01      	cmp	r3, #1
 800872c:	f77f ae35 	ble.w	800839a <_dtoa_r+0x792>
 8008730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008732:	9307      	str	r3, [sp, #28]
 8008734:	e649      	b.n	80083ca <_dtoa_r+0x7c2>
 8008736:	9b02      	ldr	r3, [sp, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	dc03      	bgt.n	8008744 <_dtoa_r+0xb3c>
 800873c:	9b06      	ldr	r3, [sp, #24]
 800873e:	2b02      	cmp	r3, #2
 8008740:	f73f aecc 	bgt.w	80084dc <_dtoa_r+0x8d4>
 8008744:	465d      	mov	r5, fp
 8008746:	4639      	mov	r1, r7
 8008748:	9804      	ldr	r0, [sp, #16]
 800874a:	f7ff f9cf 	bl	8007aec <quorem>
 800874e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008752:	f805 8b01 	strb.w	r8, [r5], #1
 8008756:	9a02      	ldr	r2, [sp, #8]
 8008758:	eba5 030b 	sub.w	r3, r5, fp
 800875c:	429a      	cmp	r2, r3
 800875e:	ddb0      	ble.n	80086c2 <_dtoa_r+0xaba>
 8008760:	2300      	movs	r3, #0
 8008762:	220a      	movs	r2, #10
 8008764:	9904      	ldr	r1, [sp, #16]
 8008766:	4620      	mov	r0, r4
 8008768:	f000 fa50 	bl	8008c0c <__multadd>
 800876c:	9004      	str	r0, [sp, #16]
 800876e:	e7ea      	b.n	8008746 <_dtoa_r+0xb3e>
 8008770:	08009b58 	.word	0x08009b58
 8008774:	08009b7c 	.word	0x08009b7c

08008778 <__sflush_r>:
 8008778:	898a      	ldrh	r2, [r1, #12]
 800877a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	4605      	mov	r5, r0
 8008780:	0710      	lsls	r0, r2, #28
 8008782:	460c      	mov	r4, r1
 8008784:	d458      	bmi.n	8008838 <__sflush_r+0xc0>
 8008786:	684b      	ldr	r3, [r1, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	dc05      	bgt.n	8008798 <__sflush_r+0x20>
 800878c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	dc02      	bgt.n	8008798 <__sflush_r+0x20>
 8008792:	2000      	movs	r0, #0
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800879a:	2e00      	cmp	r6, #0
 800879c:	d0f9      	beq.n	8008792 <__sflush_r+0x1a>
 800879e:	2300      	movs	r3, #0
 80087a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087a4:	682f      	ldr	r7, [r5, #0]
 80087a6:	6a21      	ldr	r1, [r4, #32]
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	d032      	beq.n	8008812 <__sflush_r+0x9a>
 80087ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	075a      	lsls	r2, r3, #29
 80087b2:	d505      	bpl.n	80087c0 <__sflush_r+0x48>
 80087b4:	6863      	ldr	r3, [r4, #4]
 80087b6:	1ac0      	subs	r0, r0, r3
 80087b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087ba:	b10b      	cbz	r3, 80087c0 <__sflush_r+0x48>
 80087bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087be:	1ac0      	subs	r0, r0, r3
 80087c0:	2300      	movs	r3, #0
 80087c2:	4602      	mov	r2, r0
 80087c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087c6:	6a21      	ldr	r1, [r4, #32]
 80087c8:	4628      	mov	r0, r5
 80087ca:	47b0      	blx	r6
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	d106      	bne.n	80087e0 <__sflush_r+0x68>
 80087d2:	6829      	ldr	r1, [r5, #0]
 80087d4:	291d      	cmp	r1, #29
 80087d6:	d848      	bhi.n	800886a <__sflush_r+0xf2>
 80087d8:	4a29      	ldr	r2, [pc, #164]	; (8008880 <__sflush_r+0x108>)
 80087da:	40ca      	lsrs	r2, r1
 80087dc:	07d6      	lsls	r6, r2, #31
 80087de:	d544      	bpl.n	800886a <__sflush_r+0xf2>
 80087e0:	2200      	movs	r2, #0
 80087e2:	6062      	str	r2, [r4, #4]
 80087e4:	04d9      	lsls	r1, r3, #19
 80087e6:	6922      	ldr	r2, [r4, #16]
 80087e8:	6022      	str	r2, [r4, #0]
 80087ea:	d504      	bpl.n	80087f6 <__sflush_r+0x7e>
 80087ec:	1c42      	adds	r2, r0, #1
 80087ee:	d101      	bne.n	80087f4 <__sflush_r+0x7c>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b903      	cbnz	r3, 80087f6 <__sflush_r+0x7e>
 80087f4:	6560      	str	r0, [r4, #84]	; 0x54
 80087f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087f8:	602f      	str	r7, [r5, #0]
 80087fa:	2900      	cmp	r1, #0
 80087fc:	d0c9      	beq.n	8008792 <__sflush_r+0x1a>
 80087fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008802:	4299      	cmp	r1, r3
 8008804:	d002      	beq.n	800880c <__sflush_r+0x94>
 8008806:	4628      	mov	r0, r5
 8008808:	f000 fc9e 	bl	8009148 <_free_r>
 800880c:	2000      	movs	r0, #0
 800880e:	6360      	str	r0, [r4, #52]	; 0x34
 8008810:	e7c0      	b.n	8008794 <__sflush_r+0x1c>
 8008812:	2301      	movs	r3, #1
 8008814:	4628      	mov	r0, r5
 8008816:	47b0      	blx	r6
 8008818:	1c41      	adds	r1, r0, #1
 800881a:	d1c8      	bne.n	80087ae <__sflush_r+0x36>
 800881c:	682b      	ldr	r3, [r5, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0c5      	beq.n	80087ae <__sflush_r+0x36>
 8008822:	2b1d      	cmp	r3, #29
 8008824:	d001      	beq.n	800882a <__sflush_r+0xb2>
 8008826:	2b16      	cmp	r3, #22
 8008828:	d101      	bne.n	800882e <__sflush_r+0xb6>
 800882a:	602f      	str	r7, [r5, #0]
 800882c:	e7b1      	b.n	8008792 <__sflush_r+0x1a>
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	e7ad      	b.n	8008794 <__sflush_r+0x1c>
 8008838:	690f      	ldr	r7, [r1, #16]
 800883a:	2f00      	cmp	r7, #0
 800883c:	d0a9      	beq.n	8008792 <__sflush_r+0x1a>
 800883e:	0793      	lsls	r3, r2, #30
 8008840:	680e      	ldr	r6, [r1, #0]
 8008842:	bf08      	it	eq
 8008844:	694b      	ldreq	r3, [r1, #20]
 8008846:	600f      	str	r7, [r1, #0]
 8008848:	bf18      	it	ne
 800884a:	2300      	movne	r3, #0
 800884c:	eba6 0807 	sub.w	r8, r6, r7
 8008850:	608b      	str	r3, [r1, #8]
 8008852:	f1b8 0f00 	cmp.w	r8, #0
 8008856:	dd9c      	ble.n	8008792 <__sflush_r+0x1a>
 8008858:	4643      	mov	r3, r8
 800885a:	463a      	mov	r2, r7
 800885c:	6a21      	ldr	r1, [r4, #32]
 800885e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008860:	4628      	mov	r0, r5
 8008862:	47b0      	blx	r6
 8008864:	2800      	cmp	r0, #0
 8008866:	dc06      	bgt.n	8008876 <__sflush_r+0xfe>
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	e78e      	b.n	8008794 <__sflush_r+0x1c>
 8008876:	4407      	add	r7, r0
 8008878:	eba8 0800 	sub.w	r8, r8, r0
 800887c:	e7e9      	b.n	8008852 <__sflush_r+0xda>
 800887e:	bf00      	nop
 8008880:	20400001 	.word	0x20400001

08008884 <_fflush_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	690b      	ldr	r3, [r1, #16]
 8008888:	4605      	mov	r5, r0
 800888a:	460c      	mov	r4, r1
 800888c:	b1db      	cbz	r3, 80088c6 <_fflush_r+0x42>
 800888e:	b118      	cbz	r0, 8008898 <_fflush_r+0x14>
 8008890:	6983      	ldr	r3, [r0, #24]
 8008892:	b90b      	cbnz	r3, 8008898 <_fflush_r+0x14>
 8008894:	f000 f860 	bl	8008958 <__sinit>
 8008898:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <_fflush_r+0x48>)
 800889a:	429c      	cmp	r4, r3
 800889c:	d109      	bne.n	80088b2 <_fflush_r+0x2e>
 800889e:	686c      	ldr	r4, [r5, #4]
 80088a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a4:	b17b      	cbz	r3, 80088c6 <_fflush_r+0x42>
 80088a6:	4621      	mov	r1, r4
 80088a8:	4628      	mov	r0, r5
 80088aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ae:	f7ff bf63 	b.w	8008778 <__sflush_r>
 80088b2:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <_fflush_r+0x4c>)
 80088b4:	429c      	cmp	r4, r3
 80088b6:	d101      	bne.n	80088bc <_fflush_r+0x38>
 80088b8:	68ac      	ldr	r4, [r5, #8]
 80088ba:	e7f1      	b.n	80088a0 <_fflush_r+0x1c>
 80088bc:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <_fflush_r+0x50>)
 80088be:	429c      	cmp	r4, r3
 80088c0:	bf08      	it	eq
 80088c2:	68ec      	ldreq	r4, [r5, #12]
 80088c4:	e7ec      	b.n	80088a0 <_fflush_r+0x1c>
 80088c6:	2000      	movs	r0, #0
 80088c8:	bd38      	pop	{r3, r4, r5, pc}
 80088ca:	bf00      	nop
 80088cc:	08009bac 	.word	0x08009bac
 80088d0:	08009bcc 	.word	0x08009bcc
 80088d4:	08009b8c 	.word	0x08009b8c

080088d8 <std>:
 80088d8:	2300      	movs	r3, #0
 80088da:	b510      	push	{r4, lr}
 80088dc:	4604      	mov	r4, r0
 80088de:	e9c0 3300 	strd	r3, r3, [r0]
 80088e2:	6083      	str	r3, [r0, #8]
 80088e4:	8181      	strh	r1, [r0, #12]
 80088e6:	6643      	str	r3, [r0, #100]	; 0x64
 80088e8:	81c2      	strh	r2, [r0, #14]
 80088ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088ee:	6183      	str	r3, [r0, #24]
 80088f0:	4619      	mov	r1, r3
 80088f2:	2208      	movs	r2, #8
 80088f4:	305c      	adds	r0, #92	; 0x5c
 80088f6:	f7fe fb39 	bl	8006f6c <memset>
 80088fa:	4b05      	ldr	r3, [pc, #20]	; (8008910 <std+0x38>)
 80088fc:	6263      	str	r3, [r4, #36]	; 0x24
 80088fe:	4b05      	ldr	r3, [pc, #20]	; (8008914 <std+0x3c>)
 8008900:	62a3      	str	r3, [r4, #40]	; 0x28
 8008902:	4b05      	ldr	r3, [pc, #20]	; (8008918 <std+0x40>)
 8008904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008906:	4b05      	ldr	r3, [pc, #20]	; (800891c <std+0x44>)
 8008908:	6224      	str	r4, [r4, #32]
 800890a:	6323      	str	r3, [r4, #48]	; 0x30
 800890c:	bd10      	pop	{r4, pc}
 800890e:	bf00      	nop
 8008910:	080097dd 	.word	0x080097dd
 8008914:	080097ff 	.word	0x080097ff
 8008918:	08009837 	.word	0x08009837
 800891c:	0800985b 	.word	0x0800985b

08008920 <_cleanup_r>:
 8008920:	4901      	ldr	r1, [pc, #4]	; (8008928 <_cleanup_r+0x8>)
 8008922:	f000 b885 	b.w	8008a30 <_fwalk_reent>
 8008926:	bf00      	nop
 8008928:	08008885 	.word	0x08008885

0800892c <__sfmoreglue>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	1e4a      	subs	r2, r1, #1
 8008930:	2568      	movs	r5, #104	; 0x68
 8008932:	4355      	muls	r5, r2
 8008934:	460e      	mov	r6, r1
 8008936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800893a:	f000 fc53 	bl	80091e4 <_malloc_r>
 800893e:	4604      	mov	r4, r0
 8008940:	b140      	cbz	r0, 8008954 <__sfmoreglue+0x28>
 8008942:	2100      	movs	r1, #0
 8008944:	e9c0 1600 	strd	r1, r6, [r0]
 8008948:	300c      	adds	r0, #12
 800894a:	60a0      	str	r0, [r4, #8]
 800894c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008950:	f7fe fb0c 	bl	8006f6c <memset>
 8008954:	4620      	mov	r0, r4
 8008956:	bd70      	pop	{r4, r5, r6, pc}

08008958 <__sinit>:
 8008958:	6983      	ldr	r3, [r0, #24]
 800895a:	b510      	push	{r4, lr}
 800895c:	4604      	mov	r4, r0
 800895e:	bb33      	cbnz	r3, 80089ae <__sinit+0x56>
 8008960:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008964:	6503      	str	r3, [r0, #80]	; 0x50
 8008966:	4b12      	ldr	r3, [pc, #72]	; (80089b0 <__sinit+0x58>)
 8008968:	4a12      	ldr	r2, [pc, #72]	; (80089b4 <__sinit+0x5c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6282      	str	r2, [r0, #40]	; 0x28
 800896e:	4298      	cmp	r0, r3
 8008970:	bf04      	itt	eq
 8008972:	2301      	moveq	r3, #1
 8008974:	6183      	streq	r3, [r0, #24]
 8008976:	f000 f81f 	bl	80089b8 <__sfp>
 800897a:	6060      	str	r0, [r4, #4]
 800897c:	4620      	mov	r0, r4
 800897e:	f000 f81b 	bl	80089b8 <__sfp>
 8008982:	60a0      	str	r0, [r4, #8]
 8008984:	4620      	mov	r0, r4
 8008986:	f000 f817 	bl	80089b8 <__sfp>
 800898a:	2200      	movs	r2, #0
 800898c:	60e0      	str	r0, [r4, #12]
 800898e:	2104      	movs	r1, #4
 8008990:	6860      	ldr	r0, [r4, #4]
 8008992:	f7ff ffa1 	bl	80088d8 <std>
 8008996:	2201      	movs	r2, #1
 8008998:	2109      	movs	r1, #9
 800899a:	68a0      	ldr	r0, [r4, #8]
 800899c:	f7ff ff9c 	bl	80088d8 <std>
 80089a0:	2202      	movs	r2, #2
 80089a2:	2112      	movs	r1, #18
 80089a4:	68e0      	ldr	r0, [r4, #12]
 80089a6:	f7ff ff97 	bl	80088d8 <std>
 80089aa:	2301      	movs	r3, #1
 80089ac:	61a3      	str	r3, [r4, #24]
 80089ae:	bd10      	pop	{r4, pc}
 80089b0:	08009b44 	.word	0x08009b44
 80089b4:	08008921 	.word	0x08008921

080089b8 <__sfp>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <__sfp+0x70>)
 80089bc:	681e      	ldr	r6, [r3, #0]
 80089be:	69b3      	ldr	r3, [r6, #24]
 80089c0:	4607      	mov	r7, r0
 80089c2:	b913      	cbnz	r3, 80089ca <__sfp+0x12>
 80089c4:	4630      	mov	r0, r6
 80089c6:	f7ff ffc7 	bl	8008958 <__sinit>
 80089ca:	3648      	adds	r6, #72	; 0x48
 80089cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	d503      	bpl.n	80089dc <__sfp+0x24>
 80089d4:	6833      	ldr	r3, [r6, #0]
 80089d6:	b133      	cbz	r3, 80089e6 <__sfp+0x2e>
 80089d8:	6836      	ldr	r6, [r6, #0]
 80089da:	e7f7      	b.n	80089cc <__sfp+0x14>
 80089dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089e0:	b16d      	cbz	r5, 80089fe <__sfp+0x46>
 80089e2:	3468      	adds	r4, #104	; 0x68
 80089e4:	e7f4      	b.n	80089d0 <__sfp+0x18>
 80089e6:	2104      	movs	r1, #4
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7ff ff9f 	bl	800892c <__sfmoreglue>
 80089ee:	6030      	str	r0, [r6, #0]
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d1f1      	bne.n	80089d8 <__sfp+0x20>
 80089f4:	230c      	movs	r3, #12
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	4604      	mov	r4, r0
 80089fa:	4620      	mov	r0, r4
 80089fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089fe:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <__sfp+0x74>)
 8008a00:	6665      	str	r5, [r4, #100]	; 0x64
 8008a02:	e9c4 5500 	strd	r5, r5, [r4]
 8008a06:	60a5      	str	r5, [r4, #8]
 8008a08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008a0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008a10:	2208      	movs	r2, #8
 8008a12:	4629      	mov	r1, r5
 8008a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a18:	f7fe faa8 	bl	8006f6c <memset>
 8008a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a24:	e7e9      	b.n	80089fa <__sfp+0x42>
 8008a26:	bf00      	nop
 8008a28:	08009b44 	.word	0x08009b44
 8008a2c:	ffff0001 	.word	0xffff0001

08008a30 <_fwalk_reent>:
 8008a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a34:	4680      	mov	r8, r0
 8008a36:	4689      	mov	r9, r1
 8008a38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	b914      	cbnz	r4, 8008a46 <_fwalk_reent+0x16>
 8008a40:	4630      	mov	r0, r6
 8008a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008a4a:	3f01      	subs	r7, #1
 8008a4c:	d501      	bpl.n	8008a52 <_fwalk_reent+0x22>
 8008a4e:	6824      	ldr	r4, [r4, #0]
 8008a50:	e7f5      	b.n	8008a3e <_fwalk_reent+0xe>
 8008a52:	89ab      	ldrh	r3, [r5, #12]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d907      	bls.n	8008a68 <_fwalk_reent+0x38>
 8008a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	d003      	beq.n	8008a68 <_fwalk_reent+0x38>
 8008a60:	4629      	mov	r1, r5
 8008a62:	4640      	mov	r0, r8
 8008a64:	47c8      	blx	r9
 8008a66:	4306      	orrs	r6, r0
 8008a68:	3568      	adds	r5, #104	; 0x68
 8008a6a:	e7ee      	b.n	8008a4a <_fwalk_reent+0x1a>

08008a6c <_localeconv_r>:
 8008a6c:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <_localeconv_r+0x14>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6a18      	ldr	r0, [r3, #32]
 8008a72:	4b04      	ldr	r3, [pc, #16]	; (8008a84 <_localeconv_r+0x18>)
 8008a74:	2800      	cmp	r0, #0
 8008a76:	bf08      	it	eq
 8008a78:	4618      	moveq	r0, r3
 8008a7a:	30f0      	adds	r0, #240	; 0xf0
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	2000002c 	.word	0x2000002c
 8008a84:	20000090 	.word	0x20000090

08008a88 <__swhatbuf_r>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	460e      	mov	r6, r1
 8008a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a90:	2900      	cmp	r1, #0
 8008a92:	b096      	sub	sp, #88	; 0x58
 8008a94:	4614      	mov	r4, r2
 8008a96:	461d      	mov	r5, r3
 8008a98:	da07      	bge.n	8008aaa <__swhatbuf_r+0x22>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	602b      	str	r3, [r5, #0]
 8008a9e:	89b3      	ldrh	r3, [r6, #12]
 8008aa0:	061a      	lsls	r2, r3, #24
 8008aa2:	d410      	bmi.n	8008ac6 <__swhatbuf_r+0x3e>
 8008aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aa8:	e00e      	b.n	8008ac8 <__swhatbuf_r+0x40>
 8008aaa:	466a      	mov	r2, sp
 8008aac:	f000 fefc 	bl	80098a8 <_fstat_r>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	dbf2      	blt.n	8008a9a <__swhatbuf_r+0x12>
 8008ab4:	9a01      	ldr	r2, [sp, #4]
 8008ab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008aba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008abe:	425a      	negs	r2, r3
 8008ac0:	415a      	adcs	r2, r3
 8008ac2:	602a      	str	r2, [r5, #0]
 8008ac4:	e7ee      	b.n	8008aa4 <__swhatbuf_r+0x1c>
 8008ac6:	2340      	movs	r3, #64	; 0x40
 8008ac8:	2000      	movs	r0, #0
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	b016      	add	sp, #88	; 0x58
 8008ace:	bd70      	pop	{r4, r5, r6, pc}

08008ad0 <__smakebuf_r>:
 8008ad0:	898b      	ldrh	r3, [r1, #12]
 8008ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ad4:	079d      	lsls	r5, r3, #30
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460c      	mov	r4, r1
 8008ada:	d507      	bpl.n	8008aec <__smakebuf_r+0x1c>
 8008adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	6123      	str	r3, [r4, #16]
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	6163      	str	r3, [r4, #20]
 8008ae8:	b002      	add	sp, #8
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	ab01      	add	r3, sp, #4
 8008aee:	466a      	mov	r2, sp
 8008af0:	f7ff ffca 	bl	8008a88 <__swhatbuf_r>
 8008af4:	9900      	ldr	r1, [sp, #0]
 8008af6:	4605      	mov	r5, r0
 8008af8:	4630      	mov	r0, r6
 8008afa:	f000 fb73 	bl	80091e4 <_malloc_r>
 8008afe:	b948      	cbnz	r0, 8008b14 <__smakebuf_r+0x44>
 8008b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b04:	059a      	lsls	r2, r3, #22
 8008b06:	d4ef      	bmi.n	8008ae8 <__smakebuf_r+0x18>
 8008b08:	f023 0303 	bic.w	r3, r3, #3
 8008b0c:	f043 0302 	orr.w	r3, r3, #2
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	e7e3      	b.n	8008adc <__smakebuf_r+0xc>
 8008b14:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <__smakebuf_r+0x7c>)
 8008b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	6020      	str	r0, [r4, #0]
 8008b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b20:	81a3      	strh	r3, [r4, #12]
 8008b22:	9b00      	ldr	r3, [sp, #0]
 8008b24:	6163      	str	r3, [r4, #20]
 8008b26:	9b01      	ldr	r3, [sp, #4]
 8008b28:	6120      	str	r0, [r4, #16]
 8008b2a:	b15b      	cbz	r3, 8008b44 <__smakebuf_r+0x74>
 8008b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b30:	4630      	mov	r0, r6
 8008b32:	f000 fecb 	bl	80098cc <_isatty_r>
 8008b36:	b128      	cbz	r0, 8008b44 <__smakebuf_r+0x74>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	f043 0301 	orr.w	r3, r3, #1
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	431d      	orrs	r5, r3
 8008b48:	81a5      	strh	r5, [r4, #12]
 8008b4a:	e7cd      	b.n	8008ae8 <__smakebuf_r+0x18>
 8008b4c:	08008921 	.word	0x08008921

08008b50 <malloc>:
 8008b50:	4b02      	ldr	r3, [pc, #8]	; (8008b5c <malloc+0xc>)
 8008b52:	4601      	mov	r1, r0
 8008b54:	6818      	ldr	r0, [r3, #0]
 8008b56:	f000 bb45 	b.w	80091e4 <_malloc_r>
 8008b5a:	bf00      	nop
 8008b5c:	2000002c 	.word	0x2000002c

08008b60 <memcpy>:
 8008b60:	b510      	push	{r4, lr}
 8008b62:	1e43      	subs	r3, r0, #1
 8008b64:	440a      	add	r2, r1
 8008b66:	4291      	cmp	r1, r2
 8008b68:	d100      	bne.n	8008b6c <memcpy+0xc>
 8008b6a:	bd10      	pop	{r4, pc}
 8008b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b74:	e7f7      	b.n	8008b66 <memcpy+0x6>

08008b76 <_Balloc>:
 8008b76:	b570      	push	{r4, r5, r6, lr}
 8008b78:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	460e      	mov	r6, r1
 8008b7e:	b93d      	cbnz	r5, 8008b90 <_Balloc+0x1a>
 8008b80:	2010      	movs	r0, #16
 8008b82:	f7ff ffe5 	bl	8008b50 <malloc>
 8008b86:	6260      	str	r0, [r4, #36]	; 0x24
 8008b88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b8c:	6005      	str	r5, [r0, #0]
 8008b8e:	60c5      	str	r5, [r0, #12]
 8008b90:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b92:	68eb      	ldr	r3, [r5, #12]
 8008b94:	b183      	cbz	r3, 8008bb8 <_Balloc+0x42>
 8008b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b9e:	b9b8      	cbnz	r0, 8008bd0 <_Balloc+0x5a>
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	fa01 f506 	lsl.w	r5, r1, r6
 8008ba6:	1d6a      	adds	r2, r5, #5
 8008ba8:	0092      	lsls	r2, r2, #2
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 fabe 	bl	800912c <_calloc_r>
 8008bb0:	b160      	cbz	r0, 8008bcc <_Balloc+0x56>
 8008bb2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008bb6:	e00e      	b.n	8008bd6 <_Balloc+0x60>
 8008bb8:	2221      	movs	r2, #33	; 0x21
 8008bba:	2104      	movs	r1, #4
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 fab5 	bl	800912c <_calloc_r>
 8008bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bc4:	60e8      	str	r0, [r5, #12]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e4      	bne.n	8008b96 <_Balloc+0x20>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	6802      	ldr	r2, [r0, #0]
 8008bd2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bdc:	e7f7      	b.n	8008bce <_Balloc+0x58>

08008bde <_Bfree>:
 8008bde:	b570      	push	{r4, r5, r6, lr}
 8008be0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008be2:	4606      	mov	r6, r0
 8008be4:	460d      	mov	r5, r1
 8008be6:	b93c      	cbnz	r4, 8008bf8 <_Bfree+0x1a>
 8008be8:	2010      	movs	r0, #16
 8008bea:	f7ff ffb1 	bl	8008b50 <malloc>
 8008bee:	6270      	str	r0, [r6, #36]	; 0x24
 8008bf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bf4:	6004      	str	r4, [r0, #0]
 8008bf6:	60c4      	str	r4, [r0, #12]
 8008bf8:	b13d      	cbz	r5, 8008c0a <_Bfree+0x2c>
 8008bfa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bfc:	686a      	ldr	r2, [r5, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c04:	6029      	str	r1, [r5, #0]
 8008c06:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}

08008c0c <__multadd>:
 8008c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c10:	690d      	ldr	r5, [r1, #16]
 8008c12:	461f      	mov	r7, r3
 8008c14:	4606      	mov	r6, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	f101 0c14 	add.w	ip, r1, #20
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f8dc 0000 	ldr.w	r0, [ip]
 8008c22:	b281      	uxth	r1, r0
 8008c24:	fb02 7101 	mla	r1, r2, r1, r7
 8008c28:	0c0f      	lsrs	r7, r1, #16
 8008c2a:	0c00      	lsrs	r0, r0, #16
 8008c2c:	fb02 7000 	mla	r0, r2, r0, r7
 8008c30:	b289      	uxth	r1, r1
 8008c32:	3301      	adds	r3, #1
 8008c34:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008c38:	429d      	cmp	r5, r3
 8008c3a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008c3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008c42:	dcec      	bgt.n	8008c1e <__multadd+0x12>
 8008c44:	b1d7      	cbz	r7, 8008c7c <__multadd+0x70>
 8008c46:	68a3      	ldr	r3, [r4, #8]
 8008c48:	42ab      	cmp	r3, r5
 8008c4a:	dc12      	bgt.n	8008c72 <__multadd+0x66>
 8008c4c:	6861      	ldr	r1, [r4, #4]
 8008c4e:	4630      	mov	r0, r6
 8008c50:	3101      	adds	r1, #1
 8008c52:	f7ff ff90 	bl	8008b76 <_Balloc>
 8008c56:	6922      	ldr	r2, [r4, #16]
 8008c58:	3202      	adds	r2, #2
 8008c5a:	f104 010c 	add.w	r1, r4, #12
 8008c5e:	4680      	mov	r8, r0
 8008c60:	0092      	lsls	r2, r2, #2
 8008c62:	300c      	adds	r0, #12
 8008c64:	f7ff ff7c 	bl	8008b60 <memcpy>
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7ff ffb7 	bl	8008bde <_Bfree>
 8008c70:	4644      	mov	r4, r8
 8008c72:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c76:	3501      	adds	r5, #1
 8008c78:	615f      	str	r7, [r3, #20]
 8008c7a:	6125      	str	r5, [r4, #16]
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c82 <__hi0bits>:
 8008c82:	0c02      	lsrs	r2, r0, #16
 8008c84:	0412      	lsls	r2, r2, #16
 8008c86:	4603      	mov	r3, r0
 8008c88:	b9b2      	cbnz	r2, 8008cb8 <__hi0bits+0x36>
 8008c8a:	0403      	lsls	r3, r0, #16
 8008c8c:	2010      	movs	r0, #16
 8008c8e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c92:	bf04      	itt	eq
 8008c94:	021b      	lsleq	r3, r3, #8
 8008c96:	3008      	addeq	r0, #8
 8008c98:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c9c:	bf04      	itt	eq
 8008c9e:	011b      	lsleq	r3, r3, #4
 8008ca0:	3004      	addeq	r0, #4
 8008ca2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008ca6:	bf04      	itt	eq
 8008ca8:	009b      	lsleq	r3, r3, #2
 8008caa:	3002      	addeq	r0, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	db06      	blt.n	8008cbe <__hi0bits+0x3c>
 8008cb0:	005b      	lsls	r3, r3, #1
 8008cb2:	d503      	bpl.n	8008cbc <__hi0bits+0x3a>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	4770      	bx	lr
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e7e8      	b.n	8008c8e <__hi0bits+0xc>
 8008cbc:	2020      	movs	r0, #32
 8008cbe:	4770      	bx	lr

08008cc0 <__lo0bits>:
 8008cc0:	6803      	ldr	r3, [r0, #0]
 8008cc2:	f013 0207 	ands.w	r2, r3, #7
 8008cc6:	4601      	mov	r1, r0
 8008cc8:	d00b      	beq.n	8008ce2 <__lo0bits+0x22>
 8008cca:	07da      	lsls	r2, r3, #31
 8008ccc:	d423      	bmi.n	8008d16 <__lo0bits+0x56>
 8008cce:	0798      	lsls	r0, r3, #30
 8008cd0:	bf49      	itett	mi
 8008cd2:	085b      	lsrmi	r3, r3, #1
 8008cd4:	089b      	lsrpl	r3, r3, #2
 8008cd6:	2001      	movmi	r0, #1
 8008cd8:	600b      	strmi	r3, [r1, #0]
 8008cda:	bf5c      	itt	pl
 8008cdc:	600b      	strpl	r3, [r1, #0]
 8008cde:	2002      	movpl	r0, #2
 8008ce0:	4770      	bx	lr
 8008ce2:	b298      	uxth	r0, r3
 8008ce4:	b9a8      	cbnz	r0, 8008d12 <__lo0bits+0x52>
 8008ce6:	0c1b      	lsrs	r3, r3, #16
 8008ce8:	2010      	movs	r0, #16
 8008cea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008cee:	bf04      	itt	eq
 8008cf0:	0a1b      	lsreq	r3, r3, #8
 8008cf2:	3008      	addeq	r0, #8
 8008cf4:	071a      	lsls	r2, r3, #28
 8008cf6:	bf04      	itt	eq
 8008cf8:	091b      	lsreq	r3, r3, #4
 8008cfa:	3004      	addeq	r0, #4
 8008cfc:	079a      	lsls	r2, r3, #30
 8008cfe:	bf04      	itt	eq
 8008d00:	089b      	lsreq	r3, r3, #2
 8008d02:	3002      	addeq	r0, #2
 8008d04:	07da      	lsls	r2, r3, #31
 8008d06:	d402      	bmi.n	8008d0e <__lo0bits+0x4e>
 8008d08:	085b      	lsrs	r3, r3, #1
 8008d0a:	d006      	beq.n	8008d1a <__lo0bits+0x5a>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	600b      	str	r3, [r1, #0]
 8008d10:	4770      	bx	lr
 8008d12:	4610      	mov	r0, r2
 8008d14:	e7e9      	b.n	8008cea <__lo0bits+0x2a>
 8008d16:	2000      	movs	r0, #0
 8008d18:	4770      	bx	lr
 8008d1a:	2020      	movs	r0, #32
 8008d1c:	4770      	bx	lr

08008d1e <__i2b>:
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	460c      	mov	r4, r1
 8008d22:	2101      	movs	r1, #1
 8008d24:	f7ff ff27 	bl	8008b76 <_Balloc>
 8008d28:	2201      	movs	r2, #1
 8008d2a:	6144      	str	r4, [r0, #20]
 8008d2c:	6102      	str	r2, [r0, #16]
 8008d2e:	bd10      	pop	{r4, pc}

08008d30 <__multiply>:
 8008d30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	4614      	mov	r4, r2
 8008d36:	690a      	ldr	r2, [r1, #16]
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	bfb8      	it	lt
 8008d3e:	460b      	movlt	r3, r1
 8008d40:	4688      	mov	r8, r1
 8008d42:	bfbc      	itt	lt
 8008d44:	46a0      	movlt	r8, r4
 8008d46:	461c      	movlt	r4, r3
 8008d48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d58:	eb07 0609 	add.w	r6, r7, r9
 8008d5c:	42b3      	cmp	r3, r6
 8008d5e:	bfb8      	it	lt
 8008d60:	3101      	addlt	r1, #1
 8008d62:	f7ff ff08 	bl	8008b76 <_Balloc>
 8008d66:	f100 0514 	add.w	r5, r0, #20
 8008d6a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008d6e:	462b      	mov	r3, r5
 8008d70:	2200      	movs	r2, #0
 8008d72:	4573      	cmp	r3, lr
 8008d74:	d316      	bcc.n	8008da4 <__multiply+0x74>
 8008d76:	f104 0214 	add.w	r2, r4, #20
 8008d7a:	f108 0114 	add.w	r1, r8, #20
 8008d7e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008d82:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	9b00      	ldr	r3, [sp, #0]
 8008d8a:	9201      	str	r2, [sp, #4]
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d80c      	bhi.n	8008daa <__multiply+0x7a>
 8008d90:	2e00      	cmp	r6, #0
 8008d92:	dd03      	ble.n	8008d9c <__multiply+0x6c>
 8008d94:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d05d      	beq.n	8008e58 <__multiply+0x128>
 8008d9c:	6106      	str	r6, [r0, #16]
 8008d9e:	b003      	add	sp, #12
 8008da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da4:	f843 2b04 	str.w	r2, [r3], #4
 8008da8:	e7e3      	b.n	8008d72 <__multiply+0x42>
 8008daa:	f8b2 b000 	ldrh.w	fp, [r2]
 8008dae:	f1bb 0f00 	cmp.w	fp, #0
 8008db2:	d023      	beq.n	8008dfc <__multiply+0xcc>
 8008db4:	4689      	mov	r9, r1
 8008db6:	46ac      	mov	ip, r5
 8008db8:	f04f 0800 	mov.w	r8, #0
 8008dbc:	f859 4b04 	ldr.w	r4, [r9], #4
 8008dc0:	f8dc a000 	ldr.w	sl, [ip]
 8008dc4:	b2a3      	uxth	r3, r4
 8008dc6:	fa1f fa8a 	uxth.w	sl, sl
 8008dca:	fb0b a303 	mla	r3, fp, r3, sl
 8008dce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008dd2:	f8dc 4000 	ldr.w	r4, [ip]
 8008dd6:	4443      	add	r3, r8
 8008dd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008ddc:	fb0b 840a 	mla	r4, fp, sl, r8
 8008de0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008de4:	46e2      	mov	sl, ip
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008dec:	454f      	cmp	r7, r9
 8008dee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008df2:	f84a 3b04 	str.w	r3, [sl], #4
 8008df6:	d82b      	bhi.n	8008e50 <__multiply+0x120>
 8008df8:	f8cc 8004 	str.w	r8, [ip, #4]
 8008dfc:	9b01      	ldr	r3, [sp, #4]
 8008dfe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008e02:	3204      	adds	r2, #4
 8008e04:	f1ba 0f00 	cmp.w	sl, #0
 8008e08:	d020      	beq.n	8008e4c <__multiply+0x11c>
 8008e0a:	682b      	ldr	r3, [r5, #0]
 8008e0c:	4689      	mov	r9, r1
 8008e0e:	46a8      	mov	r8, r5
 8008e10:	f04f 0b00 	mov.w	fp, #0
 8008e14:	f8b9 c000 	ldrh.w	ip, [r9]
 8008e18:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008e1c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008e20:	445c      	add	r4, fp
 8008e22:	46c4      	mov	ip, r8
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e2a:	f84c 3b04 	str.w	r3, [ip], #4
 8008e2e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e32:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	fb0a b303 	mla	r3, sl, r3, fp
 8008e3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008e40:	454f      	cmp	r7, r9
 8008e42:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008e46:	d805      	bhi.n	8008e54 <__multiply+0x124>
 8008e48:	f8c8 3004 	str.w	r3, [r8, #4]
 8008e4c:	3504      	adds	r5, #4
 8008e4e:	e79b      	b.n	8008d88 <__multiply+0x58>
 8008e50:	46d4      	mov	ip, sl
 8008e52:	e7b3      	b.n	8008dbc <__multiply+0x8c>
 8008e54:	46e0      	mov	r8, ip
 8008e56:	e7dd      	b.n	8008e14 <__multiply+0xe4>
 8008e58:	3e01      	subs	r6, #1
 8008e5a:	e799      	b.n	8008d90 <__multiply+0x60>

08008e5c <__pow5mult>:
 8008e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e60:	4615      	mov	r5, r2
 8008e62:	f012 0203 	ands.w	r2, r2, #3
 8008e66:	4606      	mov	r6, r0
 8008e68:	460f      	mov	r7, r1
 8008e6a:	d007      	beq.n	8008e7c <__pow5mult+0x20>
 8008e6c:	3a01      	subs	r2, #1
 8008e6e:	4c21      	ldr	r4, [pc, #132]	; (8008ef4 <__pow5mult+0x98>)
 8008e70:	2300      	movs	r3, #0
 8008e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e76:	f7ff fec9 	bl	8008c0c <__multadd>
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	10ad      	asrs	r5, r5, #2
 8008e7e:	d035      	beq.n	8008eec <__pow5mult+0x90>
 8008e80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e82:	b93c      	cbnz	r4, 8008e94 <__pow5mult+0x38>
 8008e84:	2010      	movs	r0, #16
 8008e86:	f7ff fe63 	bl	8008b50 <malloc>
 8008e8a:	6270      	str	r0, [r6, #36]	; 0x24
 8008e8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e90:	6004      	str	r4, [r0, #0]
 8008e92:	60c4      	str	r4, [r0, #12]
 8008e94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e9c:	b94c      	cbnz	r4, 8008eb2 <__pow5mult+0x56>
 8008e9e:	f240 2171 	movw	r1, #625	; 0x271
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f7ff ff3b 	bl	8008d1e <__i2b>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8008eae:	4604      	mov	r4, r0
 8008eb0:	6003      	str	r3, [r0, #0]
 8008eb2:	f04f 0800 	mov.w	r8, #0
 8008eb6:	07eb      	lsls	r3, r5, #31
 8008eb8:	d50a      	bpl.n	8008ed0 <__pow5mult+0x74>
 8008eba:	4639      	mov	r1, r7
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7ff ff36 	bl	8008d30 <__multiply>
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	4681      	mov	r9, r0
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff fe88 	bl	8008bde <_Bfree>
 8008ece:	464f      	mov	r7, r9
 8008ed0:	106d      	asrs	r5, r5, #1
 8008ed2:	d00b      	beq.n	8008eec <__pow5mult+0x90>
 8008ed4:	6820      	ldr	r0, [r4, #0]
 8008ed6:	b938      	cbnz	r0, 8008ee8 <__pow5mult+0x8c>
 8008ed8:	4622      	mov	r2, r4
 8008eda:	4621      	mov	r1, r4
 8008edc:	4630      	mov	r0, r6
 8008ede:	f7ff ff27 	bl	8008d30 <__multiply>
 8008ee2:	6020      	str	r0, [r4, #0]
 8008ee4:	f8c0 8000 	str.w	r8, [r0]
 8008ee8:	4604      	mov	r4, r0
 8008eea:	e7e4      	b.n	8008eb6 <__pow5mult+0x5a>
 8008eec:	4638      	mov	r0, r7
 8008eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef2:	bf00      	nop
 8008ef4:	08009ce0 	.word	0x08009ce0

08008ef8 <__lshift>:
 8008ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008efc:	460c      	mov	r4, r1
 8008efe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f02:	6923      	ldr	r3, [r4, #16]
 8008f04:	6849      	ldr	r1, [r1, #4]
 8008f06:	eb0a 0903 	add.w	r9, sl, r3
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	4616      	mov	r6, r2
 8008f10:	f109 0501 	add.w	r5, r9, #1
 8008f14:	42ab      	cmp	r3, r5
 8008f16:	db32      	blt.n	8008f7e <__lshift+0x86>
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f7ff fe2c 	bl	8008b76 <_Balloc>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4680      	mov	r8, r0
 8008f22:	f100 0114 	add.w	r1, r0, #20
 8008f26:	461a      	mov	r2, r3
 8008f28:	4553      	cmp	r3, sl
 8008f2a:	db2b      	blt.n	8008f84 <__lshift+0x8c>
 8008f2c:	6920      	ldr	r0, [r4, #16]
 8008f2e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f32:	f104 0314 	add.w	r3, r4, #20
 8008f36:	f016 021f 	ands.w	r2, r6, #31
 8008f3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f3e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f42:	d025      	beq.n	8008f90 <__lshift+0x98>
 8008f44:	f1c2 0e20 	rsb	lr, r2, #32
 8008f48:	2000      	movs	r0, #0
 8008f4a:	681e      	ldr	r6, [r3, #0]
 8008f4c:	468a      	mov	sl, r1
 8008f4e:	4096      	lsls	r6, r2
 8008f50:	4330      	orrs	r0, r6
 8008f52:	f84a 0b04 	str.w	r0, [sl], #4
 8008f56:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f5a:	459c      	cmp	ip, r3
 8008f5c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008f60:	d814      	bhi.n	8008f8c <__lshift+0x94>
 8008f62:	6048      	str	r0, [r1, #4]
 8008f64:	b108      	cbz	r0, 8008f6a <__lshift+0x72>
 8008f66:	f109 0502 	add.w	r5, r9, #2
 8008f6a:	3d01      	subs	r5, #1
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008f72:	4621      	mov	r1, r4
 8008f74:	f7ff fe33 	bl	8008bde <_Bfree>
 8008f78:	4640      	mov	r0, r8
 8008f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7e:	3101      	adds	r1, #1
 8008f80:	005b      	lsls	r3, r3, #1
 8008f82:	e7c7      	b.n	8008f14 <__lshift+0x1c>
 8008f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	e7cd      	b.n	8008f28 <__lshift+0x30>
 8008f8c:	4651      	mov	r1, sl
 8008f8e:	e7dc      	b.n	8008f4a <__lshift+0x52>
 8008f90:	3904      	subs	r1, #4
 8008f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f96:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f9a:	459c      	cmp	ip, r3
 8008f9c:	d8f9      	bhi.n	8008f92 <__lshift+0x9a>
 8008f9e:	e7e4      	b.n	8008f6a <__lshift+0x72>

08008fa0 <__mcmp>:
 8008fa0:	6903      	ldr	r3, [r0, #16]
 8008fa2:	690a      	ldr	r2, [r1, #16]
 8008fa4:	1a9b      	subs	r3, r3, r2
 8008fa6:	b530      	push	{r4, r5, lr}
 8008fa8:	d10c      	bne.n	8008fc4 <__mcmp+0x24>
 8008faa:	0092      	lsls	r2, r2, #2
 8008fac:	3014      	adds	r0, #20
 8008fae:	3114      	adds	r1, #20
 8008fb0:	1884      	adds	r4, r0, r2
 8008fb2:	4411      	add	r1, r2
 8008fb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fbc:	4295      	cmp	r5, r2
 8008fbe:	d003      	beq.n	8008fc8 <__mcmp+0x28>
 8008fc0:	d305      	bcc.n	8008fce <__mcmp+0x2e>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	bd30      	pop	{r4, r5, pc}
 8008fc8:	42a0      	cmp	r0, r4
 8008fca:	d3f3      	bcc.n	8008fb4 <__mcmp+0x14>
 8008fcc:	e7fa      	b.n	8008fc4 <__mcmp+0x24>
 8008fce:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd2:	e7f7      	b.n	8008fc4 <__mcmp+0x24>

08008fd4 <__mdiff>:
 8008fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd8:	460d      	mov	r5, r1
 8008fda:	4607      	mov	r7, r0
 8008fdc:	4611      	mov	r1, r2
 8008fde:	4628      	mov	r0, r5
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	f7ff ffdd 	bl	8008fa0 <__mcmp>
 8008fe6:	1e06      	subs	r6, r0, #0
 8008fe8:	d108      	bne.n	8008ffc <__mdiff+0x28>
 8008fea:	4631      	mov	r1, r6
 8008fec:	4638      	mov	r0, r7
 8008fee:	f7ff fdc2 	bl	8008b76 <_Balloc>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffc:	bfa4      	itt	ge
 8008ffe:	4623      	movge	r3, r4
 8009000:	462c      	movge	r4, r5
 8009002:	4638      	mov	r0, r7
 8009004:	6861      	ldr	r1, [r4, #4]
 8009006:	bfa6      	itte	ge
 8009008:	461d      	movge	r5, r3
 800900a:	2600      	movge	r6, #0
 800900c:	2601      	movlt	r6, #1
 800900e:	f7ff fdb2 	bl	8008b76 <_Balloc>
 8009012:	692b      	ldr	r3, [r5, #16]
 8009014:	60c6      	str	r6, [r0, #12]
 8009016:	6926      	ldr	r6, [r4, #16]
 8009018:	f105 0914 	add.w	r9, r5, #20
 800901c:	f104 0214 	add.w	r2, r4, #20
 8009020:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009024:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009028:	f100 0514 	add.w	r5, r0, #20
 800902c:	f04f 0e00 	mov.w	lr, #0
 8009030:	f852 ab04 	ldr.w	sl, [r2], #4
 8009034:	f859 4b04 	ldr.w	r4, [r9], #4
 8009038:	fa1e f18a 	uxtah	r1, lr, sl
 800903c:	b2a3      	uxth	r3, r4
 800903e:	1ac9      	subs	r1, r1, r3
 8009040:	0c23      	lsrs	r3, r4, #16
 8009042:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009046:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800904a:	b289      	uxth	r1, r1
 800904c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009050:	45c8      	cmp	r8, r9
 8009052:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009056:	4694      	mov	ip, r2
 8009058:	f845 3b04 	str.w	r3, [r5], #4
 800905c:	d8e8      	bhi.n	8009030 <__mdiff+0x5c>
 800905e:	45bc      	cmp	ip, r7
 8009060:	d304      	bcc.n	800906c <__mdiff+0x98>
 8009062:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009066:	b183      	cbz	r3, 800908a <__mdiff+0xb6>
 8009068:	6106      	str	r6, [r0, #16]
 800906a:	e7c5      	b.n	8008ff8 <__mdiff+0x24>
 800906c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009070:	fa1e f381 	uxtah	r3, lr, r1
 8009074:	141a      	asrs	r2, r3, #16
 8009076:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800907a:	b29b      	uxth	r3, r3
 800907c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009080:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009084:	f845 3b04 	str.w	r3, [r5], #4
 8009088:	e7e9      	b.n	800905e <__mdiff+0x8a>
 800908a:	3e01      	subs	r6, #1
 800908c:	e7e9      	b.n	8009062 <__mdiff+0x8e>

0800908e <__d2b>:
 800908e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009092:	460e      	mov	r6, r1
 8009094:	2101      	movs	r1, #1
 8009096:	ec59 8b10 	vmov	r8, r9, d0
 800909a:	4615      	mov	r5, r2
 800909c:	f7ff fd6b 	bl	8008b76 <_Balloc>
 80090a0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80090a4:	4607      	mov	r7, r0
 80090a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090aa:	bb34      	cbnz	r4, 80090fa <__d2b+0x6c>
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	f1b8 0300 	subs.w	r3, r8, #0
 80090b2:	d027      	beq.n	8009104 <__d2b+0x76>
 80090b4:	a802      	add	r0, sp, #8
 80090b6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80090ba:	f7ff fe01 	bl	8008cc0 <__lo0bits>
 80090be:	9900      	ldr	r1, [sp, #0]
 80090c0:	b1f0      	cbz	r0, 8009100 <__d2b+0x72>
 80090c2:	9a01      	ldr	r2, [sp, #4]
 80090c4:	f1c0 0320 	rsb	r3, r0, #32
 80090c8:	fa02 f303 	lsl.w	r3, r2, r3
 80090cc:	430b      	orrs	r3, r1
 80090ce:	40c2      	lsrs	r2, r0
 80090d0:	617b      	str	r3, [r7, #20]
 80090d2:	9201      	str	r2, [sp, #4]
 80090d4:	9b01      	ldr	r3, [sp, #4]
 80090d6:	61bb      	str	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bf14      	ite	ne
 80090dc:	2102      	movne	r1, #2
 80090de:	2101      	moveq	r1, #1
 80090e0:	6139      	str	r1, [r7, #16]
 80090e2:	b1c4      	cbz	r4, 8009116 <__d2b+0x88>
 80090e4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80090e8:	4404      	add	r4, r0
 80090ea:	6034      	str	r4, [r6, #0]
 80090ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090f0:	6028      	str	r0, [r5, #0]
 80090f2:	4638      	mov	r0, r7
 80090f4:	b003      	add	sp, #12
 80090f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090fe:	e7d5      	b.n	80090ac <__d2b+0x1e>
 8009100:	6179      	str	r1, [r7, #20]
 8009102:	e7e7      	b.n	80090d4 <__d2b+0x46>
 8009104:	a801      	add	r0, sp, #4
 8009106:	f7ff fddb 	bl	8008cc0 <__lo0bits>
 800910a:	9b01      	ldr	r3, [sp, #4]
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	2101      	movs	r1, #1
 8009110:	6139      	str	r1, [r7, #16]
 8009112:	3020      	adds	r0, #32
 8009114:	e7e5      	b.n	80090e2 <__d2b+0x54>
 8009116:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800911a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800911e:	6030      	str	r0, [r6, #0]
 8009120:	6918      	ldr	r0, [r3, #16]
 8009122:	f7ff fdae 	bl	8008c82 <__hi0bits>
 8009126:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800912a:	e7e1      	b.n	80090f0 <__d2b+0x62>

0800912c <_calloc_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	fb02 f401 	mul.w	r4, r2, r1
 8009132:	4621      	mov	r1, r4
 8009134:	f000 f856 	bl	80091e4 <_malloc_r>
 8009138:	4605      	mov	r5, r0
 800913a:	b118      	cbz	r0, 8009144 <_calloc_r+0x18>
 800913c:	4622      	mov	r2, r4
 800913e:	2100      	movs	r1, #0
 8009140:	f7fd ff14 	bl	8006f6c <memset>
 8009144:	4628      	mov	r0, r5
 8009146:	bd38      	pop	{r3, r4, r5, pc}

08009148 <_free_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	4605      	mov	r5, r0
 800914c:	2900      	cmp	r1, #0
 800914e:	d045      	beq.n	80091dc <_free_r+0x94>
 8009150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009154:	1f0c      	subs	r4, r1, #4
 8009156:	2b00      	cmp	r3, #0
 8009158:	bfb8      	it	lt
 800915a:	18e4      	addlt	r4, r4, r3
 800915c:	f000 fc03 	bl	8009966 <__malloc_lock>
 8009160:	4a1f      	ldr	r2, [pc, #124]	; (80091e0 <_free_r+0x98>)
 8009162:	6813      	ldr	r3, [r2, #0]
 8009164:	4610      	mov	r0, r2
 8009166:	b933      	cbnz	r3, 8009176 <_free_r+0x2e>
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	6014      	str	r4, [r2, #0]
 800916c:	4628      	mov	r0, r5
 800916e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009172:	f000 bbf9 	b.w	8009968 <__malloc_unlock>
 8009176:	42a3      	cmp	r3, r4
 8009178:	d90c      	bls.n	8009194 <_free_r+0x4c>
 800917a:	6821      	ldr	r1, [r4, #0]
 800917c:	1862      	adds	r2, r4, r1
 800917e:	4293      	cmp	r3, r2
 8009180:	bf04      	itt	eq
 8009182:	681a      	ldreq	r2, [r3, #0]
 8009184:	685b      	ldreq	r3, [r3, #4]
 8009186:	6063      	str	r3, [r4, #4]
 8009188:	bf04      	itt	eq
 800918a:	1852      	addeq	r2, r2, r1
 800918c:	6022      	streq	r2, [r4, #0]
 800918e:	6004      	str	r4, [r0, #0]
 8009190:	e7ec      	b.n	800916c <_free_r+0x24>
 8009192:	4613      	mov	r3, r2
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	b10a      	cbz	r2, 800919c <_free_r+0x54>
 8009198:	42a2      	cmp	r2, r4
 800919a:	d9fa      	bls.n	8009192 <_free_r+0x4a>
 800919c:	6819      	ldr	r1, [r3, #0]
 800919e:	1858      	adds	r0, r3, r1
 80091a0:	42a0      	cmp	r0, r4
 80091a2:	d10b      	bne.n	80091bc <_free_r+0x74>
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	4401      	add	r1, r0
 80091a8:	1858      	adds	r0, r3, r1
 80091aa:	4282      	cmp	r2, r0
 80091ac:	6019      	str	r1, [r3, #0]
 80091ae:	d1dd      	bne.n	800916c <_free_r+0x24>
 80091b0:	6810      	ldr	r0, [r2, #0]
 80091b2:	6852      	ldr	r2, [r2, #4]
 80091b4:	605a      	str	r2, [r3, #4]
 80091b6:	4401      	add	r1, r0
 80091b8:	6019      	str	r1, [r3, #0]
 80091ba:	e7d7      	b.n	800916c <_free_r+0x24>
 80091bc:	d902      	bls.n	80091c4 <_free_r+0x7c>
 80091be:	230c      	movs	r3, #12
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	e7d3      	b.n	800916c <_free_r+0x24>
 80091c4:	6820      	ldr	r0, [r4, #0]
 80091c6:	1821      	adds	r1, r4, r0
 80091c8:	428a      	cmp	r2, r1
 80091ca:	bf04      	itt	eq
 80091cc:	6811      	ldreq	r1, [r2, #0]
 80091ce:	6852      	ldreq	r2, [r2, #4]
 80091d0:	6062      	str	r2, [r4, #4]
 80091d2:	bf04      	itt	eq
 80091d4:	1809      	addeq	r1, r1, r0
 80091d6:	6021      	streq	r1, [r4, #0]
 80091d8:	605c      	str	r4, [r3, #4]
 80091da:	e7c7      	b.n	800916c <_free_r+0x24>
 80091dc:	bd38      	pop	{r3, r4, r5, pc}
 80091de:	bf00      	nop
 80091e0:	20000304 	.word	0x20000304

080091e4 <_malloc_r>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	1ccd      	adds	r5, r1, #3
 80091e8:	f025 0503 	bic.w	r5, r5, #3
 80091ec:	3508      	adds	r5, #8
 80091ee:	2d0c      	cmp	r5, #12
 80091f0:	bf38      	it	cc
 80091f2:	250c      	movcc	r5, #12
 80091f4:	2d00      	cmp	r5, #0
 80091f6:	4606      	mov	r6, r0
 80091f8:	db01      	blt.n	80091fe <_malloc_r+0x1a>
 80091fa:	42a9      	cmp	r1, r5
 80091fc:	d903      	bls.n	8009206 <_malloc_r+0x22>
 80091fe:	230c      	movs	r3, #12
 8009200:	6033      	str	r3, [r6, #0]
 8009202:	2000      	movs	r0, #0
 8009204:	bd70      	pop	{r4, r5, r6, pc}
 8009206:	f000 fbae 	bl	8009966 <__malloc_lock>
 800920a:	4a21      	ldr	r2, [pc, #132]	; (8009290 <_malloc_r+0xac>)
 800920c:	6814      	ldr	r4, [r2, #0]
 800920e:	4621      	mov	r1, r4
 8009210:	b991      	cbnz	r1, 8009238 <_malloc_r+0x54>
 8009212:	4c20      	ldr	r4, [pc, #128]	; (8009294 <_malloc_r+0xb0>)
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	b91b      	cbnz	r3, 8009220 <_malloc_r+0x3c>
 8009218:	4630      	mov	r0, r6
 800921a:	f000 facf 	bl	80097bc <_sbrk_r>
 800921e:	6020      	str	r0, [r4, #0]
 8009220:	4629      	mov	r1, r5
 8009222:	4630      	mov	r0, r6
 8009224:	f000 faca 	bl	80097bc <_sbrk_r>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d124      	bne.n	8009276 <_malloc_r+0x92>
 800922c:	230c      	movs	r3, #12
 800922e:	6033      	str	r3, [r6, #0]
 8009230:	4630      	mov	r0, r6
 8009232:	f000 fb99 	bl	8009968 <__malloc_unlock>
 8009236:	e7e4      	b.n	8009202 <_malloc_r+0x1e>
 8009238:	680b      	ldr	r3, [r1, #0]
 800923a:	1b5b      	subs	r3, r3, r5
 800923c:	d418      	bmi.n	8009270 <_malloc_r+0x8c>
 800923e:	2b0b      	cmp	r3, #11
 8009240:	d90f      	bls.n	8009262 <_malloc_r+0x7e>
 8009242:	600b      	str	r3, [r1, #0]
 8009244:	50cd      	str	r5, [r1, r3]
 8009246:	18cc      	adds	r4, r1, r3
 8009248:	4630      	mov	r0, r6
 800924a:	f000 fb8d 	bl	8009968 <__malloc_unlock>
 800924e:	f104 000b 	add.w	r0, r4, #11
 8009252:	1d23      	adds	r3, r4, #4
 8009254:	f020 0007 	bic.w	r0, r0, #7
 8009258:	1ac3      	subs	r3, r0, r3
 800925a:	d0d3      	beq.n	8009204 <_malloc_r+0x20>
 800925c:	425a      	negs	r2, r3
 800925e:	50e2      	str	r2, [r4, r3]
 8009260:	e7d0      	b.n	8009204 <_malloc_r+0x20>
 8009262:	428c      	cmp	r4, r1
 8009264:	684b      	ldr	r3, [r1, #4]
 8009266:	bf16      	itet	ne
 8009268:	6063      	strne	r3, [r4, #4]
 800926a:	6013      	streq	r3, [r2, #0]
 800926c:	460c      	movne	r4, r1
 800926e:	e7eb      	b.n	8009248 <_malloc_r+0x64>
 8009270:	460c      	mov	r4, r1
 8009272:	6849      	ldr	r1, [r1, #4]
 8009274:	e7cc      	b.n	8009210 <_malloc_r+0x2c>
 8009276:	1cc4      	adds	r4, r0, #3
 8009278:	f024 0403 	bic.w	r4, r4, #3
 800927c:	42a0      	cmp	r0, r4
 800927e:	d005      	beq.n	800928c <_malloc_r+0xa8>
 8009280:	1a21      	subs	r1, r4, r0
 8009282:	4630      	mov	r0, r6
 8009284:	f000 fa9a 	bl	80097bc <_sbrk_r>
 8009288:	3001      	adds	r0, #1
 800928a:	d0cf      	beq.n	800922c <_malloc_r+0x48>
 800928c:	6025      	str	r5, [r4, #0]
 800928e:	e7db      	b.n	8009248 <_malloc_r+0x64>
 8009290:	20000304 	.word	0x20000304
 8009294:	20000308 	.word	0x20000308

08009298 <__ssputs_r>:
 8009298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800929c:	688e      	ldr	r6, [r1, #8]
 800929e:	429e      	cmp	r6, r3
 80092a0:	4682      	mov	sl, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	4690      	mov	r8, r2
 80092a6:	4699      	mov	r9, r3
 80092a8:	d837      	bhi.n	800931a <__ssputs_r+0x82>
 80092aa:	898a      	ldrh	r2, [r1, #12]
 80092ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092b0:	d031      	beq.n	8009316 <__ssputs_r+0x7e>
 80092b2:	6825      	ldr	r5, [r4, #0]
 80092b4:	6909      	ldr	r1, [r1, #16]
 80092b6:	1a6f      	subs	r7, r5, r1
 80092b8:	6965      	ldr	r5, [r4, #20]
 80092ba:	2302      	movs	r3, #2
 80092bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80092c4:	f109 0301 	add.w	r3, r9, #1
 80092c8:	443b      	add	r3, r7
 80092ca:	429d      	cmp	r5, r3
 80092cc:	bf38      	it	cc
 80092ce:	461d      	movcc	r5, r3
 80092d0:	0553      	lsls	r3, r2, #21
 80092d2:	d530      	bpl.n	8009336 <__ssputs_r+0x9e>
 80092d4:	4629      	mov	r1, r5
 80092d6:	f7ff ff85 	bl	80091e4 <_malloc_r>
 80092da:	4606      	mov	r6, r0
 80092dc:	b950      	cbnz	r0, 80092f4 <__ssputs_r+0x5c>
 80092de:	230c      	movs	r3, #12
 80092e0:	f8ca 3000 	str.w	r3, [sl]
 80092e4:	89a3      	ldrh	r3, [r4, #12]
 80092e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ea:	81a3      	strh	r3, [r4, #12]
 80092ec:	f04f 30ff 	mov.w	r0, #4294967295
 80092f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f4:	463a      	mov	r2, r7
 80092f6:	6921      	ldr	r1, [r4, #16]
 80092f8:	f7ff fc32 	bl	8008b60 <memcpy>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	6126      	str	r6, [r4, #16]
 800930a:	6165      	str	r5, [r4, #20]
 800930c:	443e      	add	r6, r7
 800930e:	1bed      	subs	r5, r5, r7
 8009310:	6026      	str	r6, [r4, #0]
 8009312:	60a5      	str	r5, [r4, #8]
 8009314:	464e      	mov	r6, r9
 8009316:	454e      	cmp	r6, r9
 8009318:	d900      	bls.n	800931c <__ssputs_r+0x84>
 800931a:	464e      	mov	r6, r9
 800931c:	4632      	mov	r2, r6
 800931e:	4641      	mov	r1, r8
 8009320:	6820      	ldr	r0, [r4, #0]
 8009322:	f000 fb07 	bl	8009934 <memmove>
 8009326:	68a3      	ldr	r3, [r4, #8]
 8009328:	1b9b      	subs	r3, r3, r6
 800932a:	60a3      	str	r3, [r4, #8]
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	441e      	add	r6, r3
 8009330:	6026      	str	r6, [r4, #0]
 8009332:	2000      	movs	r0, #0
 8009334:	e7dc      	b.n	80092f0 <__ssputs_r+0x58>
 8009336:	462a      	mov	r2, r5
 8009338:	f000 fb17 	bl	800996a <_realloc_r>
 800933c:	4606      	mov	r6, r0
 800933e:	2800      	cmp	r0, #0
 8009340:	d1e2      	bne.n	8009308 <__ssputs_r+0x70>
 8009342:	6921      	ldr	r1, [r4, #16]
 8009344:	4650      	mov	r0, sl
 8009346:	f7ff feff 	bl	8009148 <_free_r>
 800934a:	e7c8      	b.n	80092de <__ssputs_r+0x46>

0800934c <_svfiprintf_r>:
 800934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	461d      	mov	r5, r3
 8009352:	898b      	ldrh	r3, [r1, #12]
 8009354:	061f      	lsls	r7, r3, #24
 8009356:	b09d      	sub	sp, #116	; 0x74
 8009358:	4680      	mov	r8, r0
 800935a:	460c      	mov	r4, r1
 800935c:	4616      	mov	r6, r2
 800935e:	d50f      	bpl.n	8009380 <_svfiprintf_r+0x34>
 8009360:	690b      	ldr	r3, [r1, #16]
 8009362:	b96b      	cbnz	r3, 8009380 <_svfiprintf_r+0x34>
 8009364:	2140      	movs	r1, #64	; 0x40
 8009366:	f7ff ff3d 	bl	80091e4 <_malloc_r>
 800936a:	6020      	str	r0, [r4, #0]
 800936c:	6120      	str	r0, [r4, #16]
 800936e:	b928      	cbnz	r0, 800937c <_svfiprintf_r+0x30>
 8009370:	230c      	movs	r3, #12
 8009372:	f8c8 3000 	str.w	r3, [r8]
 8009376:	f04f 30ff 	mov.w	r0, #4294967295
 800937a:	e0c8      	b.n	800950e <_svfiprintf_r+0x1c2>
 800937c:	2340      	movs	r3, #64	; 0x40
 800937e:	6163      	str	r3, [r4, #20]
 8009380:	2300      	movs	r3, #0
 8009382:	9309      	str	r3, [sp, #36]	; 0x24
 8009384:	2320      	movs	r3, #32
 8009386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800938a:	2330      	movs	r3, #48	; 0x30
 800938c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009390:	9503      	str	r5, [sp, #12]
 8009392:	f04f 0b01 	mov.w	fp, #1
 8009396:	4637      	mov	r7, r6
 8009398:	463d      	mov	r5, r7
 800939a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800939e:	b10b      	cbz	r3, 80093a4 <_svfiprintf_r+0x58>
 80093a0:	2b25      	cmp	r3, #37	; 0x25
 80093a2:	d13e      	bne.n	8009422 <_svfiprintf_r+0xd6>
 80093a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80093a8:	d00b      	beq.n	80093c2 <_svfiprintf_r+0x76>
 80093aa:	4653      	mov	r3, sl
 80093ac:	4632      	mov	r2, r6
 80093ae:	4621      	mov	r1, r4
 80093b0:	4640      	mov	r0, r8
 80093b2:	f7ff ff71 	bl	8009298 <__ssputs_r>
 80093b6:	3001      	adds	r0, #1
 80093b8:	f000 80a4 	beq.w	8009504 <_svfiprintf_r+0x1b8>
 80093bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093be:	4453      	add	r3, sl
 80093c0:	9309      	str	r3, [sp, #36]	; 0x24
 80093c2:	783b      	ldrb	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 809d 	beq.w	8009504 <_svfiprintf_r+0x1b8>
 80093ca:	2300      	movs	r3, #0
 80093cc:	f04f 32ff 	mov.w	r2, #4294967295
 80093d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	9307      	str	r3, [sp, #28]
 80093d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093dc:	931a      	str	r3, [sp, #104]	; 0x68
 80093de:	462f      	mov	r7, r5
 80093e0:	2205      	movs	r2, #5
 80093e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80093e6:	4850      	ldr	r0, [pc, #320]	; (8009528 <_svfiprintf_r+0x1dc>)
 80093e8:	f7f6 fefa 	bl	80001e0 <memchr>
 80093ec:	9b04      	ldr	r3, [sp, #16]
 80093ee:	b9d0      	cbnz	r0, 8009426 <_svfiprintf_r+0xda>
 80093f0:	06d9      	lsls	r1, r3, #27
 80093f2:	bf44      	itt	mi
 80093f4:	2220      	movmi	r2, #32
 80093f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80093fa:	071a      	lsls	r2, r3, #28
 80093fc:	bf44      	itt	mi
 80093fe:	222b      	movmi	r2, #43	; 0x2b
 8009400:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009404:	782a      	ldrb	r2, [r5, #0]
 8009406:	2a2a      	cmp	r2, #42	; 0x2a
 8009408:	d015      	beq.n	8009436 <_svfiprintf_r+0xea>
 800940a:	9a07      	ldr	r2, [sp, #28]
 800940c:	462f      	mov	r7, r5
 800940e:	2000      	movs	r0, #0
 8009410:	250a      	movs	r5, #10
 8009412:	4639      	mov	r1, r7
 8009414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009418:	3b30      	subs	r3, #48	; 0x30
 800941a:	2b09      	cmp	r3, #9
 800941c:	d94d      	bls.n	80094ba <_svfiprintf_r+0x16e>
 800941e:	b1b8      	cbz	r0, 8009450 <_svfiprintf_r+0x104>
 8009420:	e00f      	b.n	8009442 <_svfiprintf_r+0xf6>
 8009422:	462f      	mov	r7, r5
 8009424:	e7b8      	b.n	8009398 <_svfiprintf_r+0x4c>
 8009426:	4a40      	ldr	r2, [pc, #256]	; (8009528 <_svfiprintf_r+0x1dc>)
 8009428:	1a80      	subs	r0, r0, r2
 800942a:	fa0b f000 	lsl.w	r0, fp, r0
 800942e:	4318      	orrs	r0, r3
 8009430:	9004      	str	r0, [sp, #16]
 8009432:	463d      	mov	r5, r7
 8009434:	e7d3      	b.n	80093de <_svfiprintf_r+0x92>
 8009436:	9a03      	ldr	r2, [sp, #12]
 8009438:	1d11      	adds	r1, r2, #4
 800943a:	6812      	ldr	r2, [r2, #0]
 800943c:	9103      	str	r1, [sp, #12]
 800943e:	2a00      	cmp	r2, #0
 8009440:	db01      	blt.n	8009446 <_svfiprintf_r+0xfa>
 8009442:	9207      	str	r2, [sp, #28]
 8009444:	e004      	b.n	8009450 <_svfiprintf_r+0x104>
 8009446:	4252      	negs	r2, r2
 8009448:	f043 0302 	orr.w	r3, r3, #2
 800944c:	9207      	str	r2, [sp, #28]
 800944e:	9304      	str	r3, [sp, #16]
 8009450:	783b      	ldrb	r3, [r7, #0]
 8009452:	2b2e      	cmp	r3, #46	; 0x2e
 8009454:	d10c      	bne.n	8009470 <_svfiprintf_r+0x124>
 8009456:	787b      	ldrb	r3, [r7, #1]
 8009458:	2b2a      	cmp	r3, #42	; 0x2a
 800945a:	d133      	bne.n	80094c4 <_svfiprintf_r+0x178>
 800945c:	9b03      	ldr	r3, [sp, #12]
 800945e:	1d1a      	adds	r2, r3, #4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	9203      	str	r2, [sp, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	bfb8      	it	lt
 8009468:	f04f 33ff 	movlt.w	r3, #4294967295
 800946c:	3702      	adds	r7, #2
 800946e:	9305      	str	r3, [sp, #20]
 8009470:	4d2e      	ldr	r5, [pc, #184]	; (800952c <_svfiprintf_r+0x1e0>)
 8009472:	7839      	ldrb	r1, [r7, #0]
 8009474:	2203      	movs	r2, #3
 8009476:	4628      	mov	r0, r5
 8009478:	f7f6 feb2 	bl	80001e0 <memchr>
 800947c:	b138      	cbz	r0, 800948e <_svfiprintf_r+0x142>
 800947e:	2340      	movs	r3, #64	; 0x40
 8009480:	1b40      	subs	r0, r0, r5
 8009482:	fa03 f000 	lsl.w	r0, r3, r0
 8009486:	9b04      	ldr	r3, [sp, #16]
 8009488:	4303      	orrs	r3, r0
 800948a:	3701      	adds	r7, #1
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	7839      	ldrb	r1, [r7, #0]
 8009490:	4827      	ldr	r0, [pc, #156]	; (8009530 <_svfiprintf_r+0x1e4>)
 8009492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009496:	2206      	movs	r2, #6
 8009498:	1c7e      	adds	r6, r7, #1
 800949a:	f7f6 fea1 	bl	80001e0 <memchr>
 800949e:	2800      	cmp	r0, #0
 80094a0:	d038      	beq.n	8009514 <_svfiprintf_r+0x1c8>
 80094a2:	4b24      	ldr	r3, [pc, #144]	; (8009534 <_svfiprintf_r+0x1e8>)
 80094a4:	bb13      	cbnz	r3, 80094ec <_svfiprintf_r+0x1a0>
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	3307      	adds	r3, #7
 80094aa:	f023 0307 	bic.w	r3, r3, #7
 80094ae:	3308      	adds	r3, #8
 80094b0:	9303      	str	r3, [sp, #12]
 80094b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b4:	444b      	add	r3, r9
 80094b6:	9309      	str	r3, [sp, #36]	; 0x24
 80094b8:	e76d      	b.n	8009396 <_svfiprintf_r+0x4a>
 80094ba:	fb05 3202 	mla	r2, r5, r2, r3
 80094be:	2001      	movs	r0, #1
 80094c0:	460f      	mov	r7, r1
 80094c2:	e7a6      	b.n	8009412 <_svfiprintf_r+0xc6>
 80094c4:	2300      	movs	r3, #0
 80094c6:	3701      	adds	r7, #1
 80094c8:	9305      	str	r3, [sp, #20]
 80094ca:	4619      	mov	r1, r3
 80094cc:	250a      	movs	r5, #10
 80094ce:	4638      	mov	r0, r7
 80094d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094d4:	3a30      	subs	r2, #48	; 0x30
 80094d6:	2a09      	cmp	r2, #9
 80094d8:	d903      	bls.n	80094e2 <_svfiprintf_r+0x196>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0c8      	beq.n	8009470 <_svfiprintf_r+0x124>
 80094de:	9105      	str	r1, [sp, #20]
 80094e0:	e7c6      	b.n	8009470 <_svfiprintf_r+0x124>
 80094e2:	fb05 2101 	mla	r1, r5, r1, r2
 80094e6:	2301      	movs	r3, #1
 80094e8:	4607      	mov	r7, r0
 80094ea:	e7f0      	b.n	80094ce <_svfiprintf_r+0x182>
 80094ec:	ab03      	add	r3, sp, #12
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	4622      	mov	r2, r4
 80094f2:	4b11      	ldr	r3, [pc, #68]	; (8009538 <_svfiprintf_r+0x1ec>)
 80094f4:	a904      	add	r1, sp, #16
 80094f6:	4640      	mov	r0, r8
 80094f8:	f7fd fdd4 	bl	80070a4 <_printf_float>
 80094fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009500:	4681      	mov	r9, r0
 8009502:	d1d6      	bne.n	80094b2 <_svfiprintf_r+0x166>
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	065b      	lsls	r3, r3, #25
 8009508:	f53f af35 	bmi.w	8009376 <_svfiprintf_r+0x2a>
 800950c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800950e:	b01d      	add	sp, #116	; 0x74
 8009510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009514:	ab03      	add	r3, sp, #12
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	4622      	mov	r2, r4
 800951a:	4b07      	ldr	r3, [pc, #28]	; (8009538 <_svfiprintf_r+0x1ec>)
 800951c:	a904      	add	r1, sp, #16
 800951e:	4640      	mov	r0, r8
 8009520:	f7fe f876 	bl	8007610 <_printf_i>
 8009524:	e7ea      	b.n	80094fc <_svfiprintf_r+0x1b0>
 8009526:	bf00      	nop
 8009528:	08009cec 	.word	0x08009cec
 800952c:	08009cf2 	.word	0x08009cf2
 8009530:	08009cf6 	.word	0x08009cf6
 8009534:	080070a5 	.word	0x080070a5
 8009538:	08009299 	.word	0x08009299

0800953c <__sfputc_r>:
 800953c:	6893      	ldr	r3, [r2, #8]
 800953e:	3b01      	subs	r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	b410      	push	{r4}
 8009544:	6093      	str	r3, [r2, #8]
 8009546:	da08      	bge.n	800955a <__sfputc_r+0x1e>
 8009548:	6994      	ldr	r4, [r2, #24]
 800954a:	42a3      	cmp	r3, r4
 800954c:	db01      	blt.n	8009552 <__sfputc_r+0x16>
 800954e:	290a      	cmp	r1, #10
 8009550:	d103      	bne.n	800955a <__sfputc_r+0x1e>
 8009552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009556:	f7fe ba09 	b.w	800796c <__swbuf_r>
 800955a:	6813      	ldr	r3, [r2, #0]
 800955c:	1c58      	adds	r0, r3, #1
 800955e:	6010      	str	r0, [r2, #0]
 8009560:	7019      	strb	r1, [r3, #0]
 8009562:	4608      	mov	r0, r1
 8009564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009568:	4770      	bx	lr

0800956a <__sfputs_r>:
 800956a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956c:	4606      	mov	r6, r0
 800956e:	460f      	mov	r7, r1
 8009570:	4614      	mov	r4, r2
 8009572:	18d5      	adds	r5, r2, r3
 8009574:	42ac      	cmp	r4, r5
 8009576:	d101      	bne.n	800957c <__sfputs_r+0x12>
 8009578:	2000      	movs	r0, #0
 800957a:	e007      	b.n	800958c <__sfputs_r+0x22>
 800957c:	463a      	mov	r2, r7
 800957e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009582:	4630      	mov	r0, r6
 8009584:	f7ff ffda 	bl	800953c <__sfputc_r>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d1f3      	bne.n	8009574 <__sfputs_r+0xa>
 800958c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009590 <_vfiprintf_r>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	460c      	mov	r4, r1
 8009596:	b09d      	sub	sp, #116	; 0x74
 8009598:	4617      	mov	r7, r2
 800959a:	461d      	mov	r5, r3
 800959c:	4606      	mov	r6, r0
 800959e:	b118      	cbz	r0, 80095a8 <_vfiprintf_r+0x18>
 80095a0:	6983      	ldr	r3, [r0, #24]
 80095a2:	b90b      	cbnz	r3, 80095a8 <_vfiprintf_r+0x18>
 80095a4:	f7ff f9d8 	bl	8008958 <__sinit>
 80095a8:	4b7c      	ldr	r3, [pc, #496]	; (800979c <_vfiprintf_r+0x20c>)
 80095aa:	429c      	cmp	r4, r3
 80095ac:	d158      	bne.n	8009660 <_vfiprintf_r+0xd0>
 80095ae:	6874      	ldr	r4, [r6, #4]
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	0718      	lsls	r0, r3, #28
 80095b4:	d55e      	bpl.n	8009674 <_vfiprintf_r+0xe4>
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d05b      	beq.n	8009674 <_vfiprintf_r+0xe4>
 80095bc:	2300      	movs	r3, #0
 80095be:	9309      	str	r3, [sp, #36]	; 0x24
 80095c0:	2320      	movs	r3, #32
 80095c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095c6:	2330      	movs	r3, #48	; 0x30
 80095c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095cc:	9503      	str	r5, [sp, #12]
 80095ce:	f04f 0b01 	mov.w	fp, #1
 80095d2:	46b8      	mov	r8, r7
 80095d4:	4645      	mov	r5, r8
 80095d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80095da:	b10b      	cbz	r3, 80095e0 <_vfiprintf_r+0x50>
 80095dc:	2b25      	cmp	r3, #37	; 0x25
 80095de:	d154      	bne.n	800968a <_vfiprintf_r+0xfa>
 80095e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80095e4:	d00b      	beq.n	80095fe <_vfiprintf_r+0x6e>
 80095e6:	4653      	mov	r3, sl
 80095e8:	463a      	mov	r2, r7
 80095ea:	4621      	mov	r1, r4
 80095ec:	4630      	mov	r0, r6
 80095ee:	f7ff ffbc 	bl	800956a <__sfputs_r>
 80095f2:	3001      	adds	r0, #1
 80095f4:	f000 80c2 	beq.w	800977c <_vfiprintf_r+0x1ec>
 80095f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fa:	4453      	add	r3, sl
 80095fc:	9309      	str	r3, [sp, #36]	; 0x24
 80095fe:	f898 3000 	ldrb.w	r3, [r8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 80ba 	beq.w	800977c <_vfiprintf_r+0x1ec>
 8009608:	2300      	movs	r3, #0
 800960a:	f04f 32ff 	mov.w	r2, #4294967295
 800960e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009612:	9304      	str	r3, [sp, #16]
 8009614:	9307      	str	r3, [sp, #28]
 8009616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800961a:	931a      	str	r3, [sp, #104]	; 0x68
 800961c:	46a8      	mov	r8, r5
 800961e:	2205      	movs	r2, #5
 8009620:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009624:	485e      	ldr	r0, [pc, #376]	; (80097a0 <_vfiprintf_r+0x210>)
 8009626:	f7f6 fddb 	bl	80001e0 <memchr>
 800962a:	9b04      	ldr	r3, [sp, #16]
 800962c:	bb78      	cbnz	r0, 800968e <_vfiprintf_r+0xfe>
 800962e:	06d9      	lsls	r1, r3, #27
 8009630:	bf44      	itt	mi
 8009632:	2220      	movmi	r2, #32
 8009634:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009638:	071a      	lsls	r2, r3, #28
 800963a:	bf44      	itt	mi
 800963c:	222b      	movmi	r2, #43	; 0x2b
 800963e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009642:	782a      	ldrb	r2, [r5, #0]
 8009644:	2a2a      	cmp	r2, #42	; 0x2a
 8009646:	d02a      	beq.n	800969e <_vfiprintf_r+0x10e>
 8009648:	9a07      	ldr	r2, [sp, #28]
 800964a:	46a8      	mov	r8, r5
 800964c:	2000      	movs	r0, #0
 800964e:	250a      	movs	r5, #10
 8009650:	4641      	mov	r1, r8
 8009652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009656:	3b30      	subs	r3, #48	; 0x30
 8009658:	2b09      	cmp	r3, #9
 800965a:	d969      	bls.n	8009730 <_vfiprintf_r+0x1a0>
 800965c:	b360      	cbz	r0, 80096b8 <_vfiprintf_r+0x128>
 800965e:	e024      	b.n	80096aa <_vfiprintf_r+0x11a>
 8009660:	4b50      	ldr	r3, [pc, #320]	; (80097a4 <_vfiprintf_r+0x214>)
 8009662:	429c      	cmp	r4, r3
 8009664:	d101      	bne.n	800966a <_vfiprintf_r+0xda>
 8009666:	68b4      	ldr	r4, [r6, #8]
 8009668:	e7a2      	b.n	80095b0 <_vfiprintf_r+0x20>
 800966a:	4b4f      	ldr	r3, [pc, #316]	; (80097a8 <_vfiprintf_r+0x218>)
 800966c:	429c      	cmp	r4, r3
 800966e:	bf08      	it	eq
 8009670:	68f4      	ldreq	r4, [r6, #12]
 8009672:	e79d      	b.n	80095b0 <_vfiprintf_r+0x20>
 8009674:	4621      	mov	r1, r4
 8009676:	4630      	mov	r0, r6
 8009678:	f7fe f9ca 	bl	8007a10 <__swsetup_r>
 800967c:	2800      	cmp	r0, #0
 800967e:	d09d      	beq.n	80095bc <_vfiprintf_r+0x2c>
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	b01d      	add	sp, #116	; 0x74
 8009686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968a:	46a8      	mov	r8, r5
 800968c:	e7a2      	b.n	80095d4 <_vfiprintf_r+0x44>
 800968e:	4a44      	ldr	r2, [pc, #272]	; (80097a0 <_vfiprintf_r+0x210>)
 8009690:	1a80      	subs	r0, r0, r2
 8009692:	fa0b f000 	lsl.w	r0, fp, r0
 8009696:	4318      	orrs	r0, r3
 8009698:	9004      	str	r0, [sp, #16]
 800969a:	4645      	mov	r5, r8
 800969c:	e7be      	b.n	800961c <_vfiprintf_r+0x8c>
 800969e:	9a03      	ldr	r2, [sp, #12]
 80096a0:	1d11      	adds	r1, r2, #4
 80096a2:	6812      	ldr	r2, [r2, #0]
 80096a4:	9103      	str	r1, [sp, #12]
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	db01      	blt.n	80096ae <_vfiprintf_r+0x11e>
 80096aa:	9207      	str	r2, [sp, #28]
 80096ac:	e004      	b.n	80096b8 <_vfiprintf_r+0x128>
 80096ae:	4252      	negs	r2, r2
 80096b0:	f043 0302 	orr.w	r3, r3, #2
 80096b4:	9207      	str	r2, [sp, #28]
 80096b6:	9304      	str	r3, [sp, #16]
 80096b8:	f898 3000 	ldrb.w	r3, [r8]
 80096bc:	2b2e      	cmp	r3, #46	; 0x2e
 80096be:	d10e      	bne.n	80096de <_vfiprintf_r+0x14e>
 80096c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80096c4:	2b2a      	cmp	r3, #42	; 0x2a
 80096c6:	d138      	bne.n	800973a <_vfiprintf_r+0x1aa>
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	1d1a      	adds	r2, r3, #4
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	9203      	str	r2, [sp, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	bfb8      	it	lt
 80096d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80096d8:	f108 0802 	add.w	r8, r8, #2
 80096dc:	9305      	str	r3, [sp, #20]
 80096de:	4d33      	ldr	r5, [pc, #204]	; (80097ac <_vfiprintf_r+0x21c>)
 80096e0:	f898 1000 	ldrb.w	r1, [r8]
 80096e4:	2203      	movs	r2, #3
 80096e6:	4628      	mov	r0, r5
 80096e8:	f7f6 fd7a 	bl	80001e0 <memchr>
 80096ec:	b140      	cbz	r0, 8009700 <_vfiprintf_r+0x170>
 80096ee:	2340      	movs	r3, #64	; 0x40
 80096f0:	1b40      	subs	r0, r0, r5
 80096f2:	fa03 f000 	lsl.w	r0, r3, r0
 80096f6:	9b04      	ldr	r3, [sp, #16]
 80096f8:	4303      	orrs	r3, r0
 80096fa:	f108 0801 	add.w	r8, r8, #1
 80096fe:	9304      	str	r3, [sp, #16]
 8009700:	f898 1000 	ldrb.w	r1, [r8]
 8009704:	482a      	ldr	r0, [pc, #168]	; (80097b0 <_vfiprintf_r+0x220>)
 8009706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800970a:	2206      	movs	r2, #6
 800970c:	f108 0701 	add.w	r7, r8, #1
 8009710:	f7f6 fd66 	bl	80001e0 <memchr>
 8009714:	2800      	cmp	r0, #0
 8009716:	d037      	beq.n	8009788 <_vfiprintf_r+0x1f8>
 8009718:	4b26      	ldr	r3, [pc, #152]	; (80097b4 <_vfiprintf_r+0x224>)
 800971a:	bb1b      	cbnz	r3, 8009764 <_vfiprintf_r+0x1d4>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	3307      	adds	r3, #7
 8009720:	f023 0307 	bic.w	r3, r3, #7
 8009724:	3308      	adds	r3, #8
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972a:	444b      	add	r3, r9
 800972c:	9309      	str	r3, [sp, #36]	; 0x24
 800972e:	e750      	b.n	80095d2 <_vfiprintf_r+0x42>
 8009730:	fb05 3202 	mla	r2, r5, r2, r3
 8009734:	2001      	movs	r0, #1
 8009736:	4688      	mov	r8, r1
 8009738:	e78a      	b.n	8009650 <_vfiprintf_r+0xc0>
 800973a:	2300      	movs	r3, #0
 800973c:	f108 0801 	add.w	r8, r8, #1
 8009740:	9305      	str	r3, [sp, #20]
 8009742:	4619      	mov	r1, r3
 8009744:	250a      	movs	r5, #10
 8009746:	4640      	mov	r0, r8
 8009748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800974c:	3a30      	subs	r2, #48	; 0x30
 800974e:	2a09      	cmp	r2, #9
 8009750:	d903      	bls.n	800975a <_vfiprintf_r+0x1ca>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0c3      	beq.n	80096de <_vfiprintf_r+0x14e>
 8009756:	9105      	str	r1, [sp, #20]
 8009758:	e7c1      	b.n	80096de <_vfiprintf_r+0x14e>
 800975a:	fb05 2101 	mla	r1, r5, r1, r2
 800975e:	2301      	movs	r3, #1
 8009760:	4680      	mov	r8, r0
 8009762:	e7f0      	b.n	8009746 <_vfiprintf_r+0x1b6>
 8009764:	ab03      	add	r3, sp, #12
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	4622      	mov	r2, r4
 800976a:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <_vfiprintf_r+0x228>)
 800976c:	a904      	add	r1, sp, #16
 800976e:	4630      	mov	r0, r6
 8009770:	f7fd fc98 	bl	80070a4 <_printf_float>
 8009774:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009778:	4681      	mov	r9, r0
 800977a:	d1d5      	bne.n	8009728 <_vfiprintf_r+0x198>
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	065b      	lsls	r3, r3, #25
 8009780:	f53f af7e 	bmi.w	8009680 <_vfiprintf_r+0xf0>
 8009784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009786:	e77d      	b.n	8009684 <_vfiprintf_r+0xf4>
 8009788:	ab03      	add	r3, sp, #12
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	4622      	mov	r2, r4
 800978e:	4b0a      	ldr	r3, [pc, #40]	; (80097b8 <_vfiprintf_r+0x228>)
 8009790:	a904      	add	r1, sp, #16
 8009792:	4630      	mov	r0, r6
 8009794:	f7fd ff3c 	bl	8007610 <_printf_i>
 8009798:	e7ec      	b.n	8009774 <_vfiprintf_r+0x1e4>
 800979a:	bf00      	nop
 800979c:	08009bac 	.word	0x08009bac
 80097a0:	08009cec 	.word	0x08009cec
 80097a4:	08009bcc 	.word	0x08009bcc
 80097a8:	08009b8c 	.word	0x08009b8c
 80097ac:	08009cf2 	.word	0x08009cf2
 80097b0:	08009cf6 	.word	0x08009cf6
 80097b4:	080070a5 	.word	0x080070a5
 80097b8:	0800956b 	.word	0x0800956b

080097bc <_sbrk_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4c06      	ldr	r4, [pc, #24]	; (80097d8 <_sbrk_r+0x1c>)
 80097c0:	2300      	movs	r3, #0
 80097c2:	4605      	mov	r5, r0
 80097c4:	4608      	mov	r0, r1
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	f7f8 fa9a 	bl	8001d00 <_sbrk>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d102      	bne.n	80097d6 <_sbrk_r+0x1a>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	b103      	cbz	r3, 80097d6 <_sbrk_r+0x1a>
 80097d4:	602b      	str	r3, [r5, #0]
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
 80097d8:	20001460 	.word	0x20001460

080097dc <__sread>:
 80097dc:	b510      	push	{r4, lr}
 80097de:	460c      	mov	r4, r1
 80097e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e4:	f000 f8e8 	bl	80099b8 <_read_r>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	bfab      	itete	ge
 80097ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097ee:	89a3      	ldrhlt	r3, [r4, #12]
 80097f0:	181b      	addge	r3, r3, r0
 80097f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097f6:	bfac      	ite	ge
 80097f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80097fa:	81a3      	strhlt	r3, [r4, #12]
 80097fc:	bd10      	pop	{r4, pc}

080097fe <__swrite>:
 80097fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009802:	461f      	mov	r7, r3
 8009804:	898b      	ldrh	r3, [r1, #12]
 8009806:	05db      	lsls	r3, r3, #23
 8009808:	4605      	mov	r5, r0
 800980a:	460c      	mov	r4, r1
 800980c:	4616      	mov	r6, r2
 800980e:	d505      	bpl.n	800981c <__swrite+0x1e>
 8009810:	2302      	movs	r3, #2
 8009812:	2200      	movs	r2, #0
 8009814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009818:	f000 f868 	bl	80098ec <_lseek_r>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	4632      	mov	r2, r6
 800982a:	463b      	mov	r3, r7
 800982c:	4628      	mov	r0, r5
 800982e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009832:	f000 b817 	b.w	8009864 <_write_r>

08009836 <__sseek>:
 8009836:	b510      	push	{r4, lr}
 8009838:	460c      	mov	r4, r1
 800983a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983e:	f000 f855 	bl	80098ec <_lseek_r>
 8009842:	1c43      	adds	r3, r0, #1
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	bf15      	itete	ne
 8009848:	6560      	strne	r0, [r4, #84]	; 0x54
 800984a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800984e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009852:	81a3      	strheq	r3, [r4, #12]
 8009854:	bf18      	it	ne
 8009856:	81a3      	strhne	r3, [r4, #12]
 8009858:	bd10      	pop	{r4, pc}

0800985a <__sclose>:
 800985a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985e:	f000 b813 	b.w	8009888 <_close_r>
	...

08009864 <_write_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4c07      	ldr	r4, [pc, #28]	; (8009884 <_write_r+0x20>)
 8009868:	4605      	mov	r5, r0
 800986a:	4608      	mov	r0, r1
 800986c:	4611      	mov	r1, r2
 800986e:	2200      	movs	r2, #0
 8009870:	6022      	str	r2, [r4, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	f7f8 f9f3 	bl	8001c5e <_write>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_write_r+0x1e>
 800987c:	6823      	ldr	r3, [r4, #0]
 800987e:	b103      	cbz	r3, 8009882 <_write_r+0x1e>
 8009880:	602b      	str	r3, [r5, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20001460 	.word	0x20001460

08009888 <_close_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	4c06      	ldr	r4, [pc, #24]	; (80098a4 <_close_r+0x1c>)
 800988c:	2300      	movs	r3, #0
 800988e:	4605      	mov	r5, r0
 8009890:	4608      	mov	r0, r1
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	f7f8 f9ff 	bl	8001c96 <_close>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d102      	bne.n	80098a2 <_close_r+0x1a>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	b103      	cbz	r3, 80098a2 <_close_r+0x1a>
 80098a0:	602b      	str	r3, [r5, #0]
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	20001460 	.word	0x20001460

080098a8 <_fstat_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4c07      	ldr	r4, [pc, #28]	; (80098c8 <_fstat_r+0x20>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4605      	mov	r5, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	4611      	mov	r1, r2
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	f7f8 f9fa 	bl	8001cae <_fstat>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	d102      	bne.n	80098c4 <_fstat_r+0x1c>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	b103      	cbz	r3, 80098c4 <_fstat_r+0x1c>
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	bd38      	pop	{r3, r4, r5, pc}
 80098c6:	bf00      	nop
 80098c8:	20001460 	.word	0x20001460

080098cc <_isatty_r>:
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4c06      	ldr	r4, [pc, #24]	; (80098e8 <_isatty_r+0x1c>)
 80098d0:	2300      	movs	r3, #0
 80098d2:	4605      	mov	r5, r0
 80098d4:	4608      	mov	r0, r1
 80098d6:	6023      	str	r3, [r4, #0]
 80098d8:	f7f8 f9f9 	bl	8001cce <_isatty>
 80098dc:	1c43      	adds	r3, r0, #1
 80098de:	d102      	bne.n	80098e6 <_isatty_r+0x1a>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	b103      	cbz	r3, 80098e6 <_isatty_r+0x1a>
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	20001460 	.word	0x20001460

080098ec <_lseek_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4c07      	ldr	r4, [pc, #28]	; (800990c <_lseek_r+0x20>)
 80098f0:	4605      	mov	r5, r0
 80098f2:	4608      	mov	r0, r1
 80098f4:	4611      	mov	r1, r2
 80098f6:	2200      	movs	r2, #0
 80098f8:	6022      	str	r2, [r4, #0]
 80098fa:	461a      	mov	r2, r3
 80098fc:	f7f8 f9f2 	bl	8001ce4 <_lseek>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_lseek_r+0x1e>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	b103      	cbz	r3, 800990a <_lseek_r+0x1e>
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	20001460 	.word	0x20001460

08009910 <__ascii_mbtowc>:
 8009910:	b082      	sub	sp, #8
 8009912:	b901      	cbnz	r1, 8009916 <__ascii_mbtowc+0x6>
 8009914:	a901      	add	r1, sp, #4
 8009916:	b142      	cbz	r2, 800992a <__ascii_mbtowc+0x1a>
 8009918:	b14b      	cbz	r3, 800992e <__ascii_mbtowc+0x1e>
 800991a:	7813      	ldrb	r3, [r2, #0]
 800991c:	600b      	str	r3, [r1, #0]
 800991e:	7812      	ldrb	r2, [r2, #0]
 8009920:	1c10      	adds	r0, r2, #0
 8009922:	bf18      	it	ne
 8009924:	2001      	movne	r0, #1
 8009926:	b002      	add	sp, #8
 8009928:	4770      	bx	lr
 800992a:	4610      	mov	r0, r2
 800992c:	e7fb      	b.n	8009926 <__ascii_mbtowc+0x16>
 800992e:	f06f 0001 	mvn.w	r0, #1
 8009932:	e7f8      	b.n	8009926 <__ascii_mbtowc+0x16>

08009934 <memmove>:
 8009934:	4288      	cmp	r0, r1
 8009936:	b510      	push	{r4, lr}
 8009938:	eb01 0302 	add.w	r3, r1, r2
 800993c:	d807      	bhi.n	800994e <memmove+0x1a>
 800993e:	1e42      	subs	r2, r0, #1
 8009940:	4299      	cmp	r1, r3
 8009942:	d00a      	beq.n	800995a <memmove+0x26>
 8009944:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009948:	f802 4f01 	strb.w	r4, [r2, #1]!
 800994c:	e7f8      	b.n	8009940 <memmove+0xc>
 800994e:	4283      	cmp	r3, r0
 8009950:	d9f5      	bls.n	800993e <memmove+0xa>
 8009952:	1881      	adds	r1, r0, r2
 8009954:	1ad2      	subs	r2, r2, r3
 8009956:	42d3      	cmn	r3, r2
 8009958:	d100      	bne.n	800995c <memmove+0x28>
 800995a:	bd10      	pop	{r4, pc}
 800995c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009960:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009964:	e7f7      	b.n	8009956 <memmove+0x22>

08009966 <__malloc_lock>:
 8009966:	4770      	bx	lr

08009968 <__malloc_unlock>:
 8009968:	4770      	bx	lr

0800996a <_realloc_r>:
 800996a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996c:	4607      	mov	r7, r0
 800996e:	4614      	mov	r4, r2
 8009970:	460e      	mov	r6, r1
 8009972:	b921      	cbnz	r1, 800997e <_realloc_r+0x14>
 8009974:	4611      	mov	r1, r2
 8009976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800997a:	f7ff bc33 	b.w	80091e4 <_malloc_r>
 800997e:	b922      	cbnz	r2, 800998a <_realloc_r+0x20>
 8009980:	f7ff fbe2 	bl	8009148 <_free_r>
 8009984:	4625      	mov	r5, r4
 8009986:	4628      	mov	r0, r5
 8009988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800998a:	f000 f834 	bl	80099f6 <_malloc_usable_size_r>
 800998e:	42a0      	cmp	r0, r4
 8009990:	d20f      	bcs.n	80099b2 <_realloc_r+0x48>
 8009992:	4621      	mov	r1, r4
 8009994:	4638      	mov	r0, r7
 8009996:	f7ff fc25 	bl	80091e4 <_malloc_r>
 800999a:	4605      	mov	r5, r0
 800999c:	2800      	cmp	r0, #0
 800999e:	d0f2      	beq.n	8009986 <_realloc_r+0x1c>
 80099a0:	4631      	mov	r1, r6
 80099a2:	4622      	mov	r2, r4
 80099a4:	f7ff f8dc 	bl	8008b60 <memcpy>
 80099a8:	4631      	mov	r1, r6
 80099aa:	4638      	mov	r0, r7
 80099ac:	f7ff fbcc 	bl	8009148 <_free_r>
 80099b0:	e7e9      	b.n	8009986 <_realloc_r+0x1c>
 80099b2:	4635      	mov	r5, r6
 80099b4:	e7e7      	b.n	8009986 <_realloc_r+0x1c>
	...

080099b8 <_read_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4c07      	ldr	r4, [pc, #28]	; (80099d8 <_read_r+0x20>)
 80099bc:	4605      	mov	r5, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	6022      	str	r2, [r4, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7f8 f92c 	bl	8001c24 <_read>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_read_r+0x1e>
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_read_r+0x1e>
 80099d4:	602b      	str	r3, [r5, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	20001460 	.word	0x20001460

080099dc <__ascii_wctomb>:
 80099dc:	b149      	cbz	r1, 80099f2 <__ascii_wctomb+0x16>
 80099de:	2aff      	cmp	r2, #255	; 0xff
 80099e0:	bf85      	ittet	hi
 80099e2:	238a      	movhi	r3, #138	; 0x8a
 80099e4:	6003      	strhi	r3, [r0, #0]
 80099e6:	700a      	strbls	r2, [r1, #0]
 80099e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80099ec:	bf98      	it	ls
 80099ee:	2001      	movls	r0, #1
 80099f0:	4770      	bx	lr
 80099f2:	4608      	mov	r0, r1
 80099f4:	4770      	bx	lr

080099f6 <_malloc_usable_size_r>:
 80099f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fa:	1f18      	subs	r0, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	bfbc      	itt	lt
 8009a00:	580b      	ldrlt	r3, [r1, r0]
 8009a02:	18c0      	addlt	r0, r0, r3
 8009a04:	4770      	bx	lr
	...

08009a08 <_init>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	bf00      	nop
 8009a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0e:	bc08      	pop	{r3}
 8009a10:	469e      	mov	lr, r3
 8009a12:	4770      	bx	lr

08009a14 <_fini>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr
