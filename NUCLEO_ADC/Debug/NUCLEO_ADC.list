
NUCLEO_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800209c  0800209c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800209c  0800209c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800209c  0800209c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800209c  0800209c  0001209c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020a0  080020a0  000120a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000000c  080020b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080020b0  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059b1  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000171f  00000000  00000000  000259e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005e8  00000000  00000000  00027108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000500  00000000  00000000  000276f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013451  00000000  00000000  00027bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d10  00000000  00000000  0003b041  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000690bf  00000000  00000000  00041d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aae10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014e0  00000000  00000000  000aae8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002060 	.word	0x08002060

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002060 	.word	0x08002060

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800015c:	4b1f      	ldr	r3, [pc, #124]	; (80001dc <MX_ADC1_Init+0x90>)
 800015e:	4a20      	ldr	r2, [pc, #128]	; (80001e0 <MX_ADC1_Init+0x94>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b1e      	ldr	r3, [pc, #120]	; (80001dc <MX_ADC1_Init+0x90>)
 8000164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016a:	4b1c      	ldr	r3, [pc, #112]	; (80001dc <MX_ADC1_Init+0x90>)
 800016c:	2201      	movs	r2, #1
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b1a      	ldr	r3, [pc, #104]	; (80001dc <MX_ADC1_Init+0x90>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b19      	ldr	r3, [pc, #100]	; (80001dc <MX_ADC1_Init+0x90>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b17      	ldr	r3, [pc, #92]	; (80001dc <MX_ADC1_Init+0x90>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000184:	4b15      	ldr	r3, [pc, #84]	; (80001dc <MX_ADC1_Init+0x90>)
 8000186:	2202      	movs	r2, #2
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4814      	ldr	r0, [pc, #80]	; (80001dc <MX_ADC1_Init+0x90>)
 800018c:	f000 fa94 	bl	80006b8 <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 f967 	bl	8000468 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a2:	2300      	movs	r3, #0
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	480c      	ldr	r0, [pc, #48]	; (80001dc <MX_ADC1_Init+0x90>)
 80001ac:	f000 fc4c 	bl	8000a48 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 f957 	bl	8000468 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001ba:	2302      	movs	r3, #2
 80001bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	4619      	mov	r1, r3
 80001c2:	4806      	ldr	r0, [pc, #24]	; (80001dc <MX_ADC1_Init+0x90>)
 80001c4:	f000 fc40 	bl	8000a48 <HAL_ADC_ConfigChannel>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d001      	beq.n	80001d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80001ce:	f000 f94b 	bl	8000468 <Error_Handler>
  }

}
 80001d2:	bf00      	nop
 80001d4:	3710      	adds	r7, #16
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000028 	.word	0x20000028
 80001e0:	40012400 	.word	0x40012400

080001e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b088      	sub	sp, #32
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ec:	f107 0310 	add.w	r3, r7, #16
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a28      	ldr	r2, [pc, #160]	; (80002a0 <HAL_ADC_MspInit+0xbc>)
 8000200:	4293      	cmp	r3, r2
 8000202:	d149      	bne.n	8000298 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000204:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <HAL_ADC_MspInit+0xc0>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a26      	ldr	r2, [pc, #152]	; (80002a4 <HAL_ADC_MspInit+0xc0>)
 800020a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800020e:	6193      	str	r3, [r2, #24]
 8000210:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <HAL_ADC_MspInit+0xc0>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800021c:	4b21      	ldr	r3, [pc, #132]	; (80002a4 <HAL_ADC_MspInit+0xc0>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a20      	ldr	r2, [pc, #128]	; (80002a4 <HAL_ADC_MspInit+0xc0>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6193      	str	r3, [r2, #24]
 8000228:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <HAL_ADC_MspInit+0xc0>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	f003 0304 	and.w	r3, r3, #4
 8000230:	60bb      	str	r3, [r7, #8]
 8000232:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000234:	2301      	movs	r3, #1
 8000236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000238:	2303      	movs	r3, #3
 800023a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800023c:	f107 0310 	add.w	r3, r7, #16
 8000240:	4619      	mov	r1, r3
 8000242:	4819      	ldr	r0, [pc, #100]	; (80002a8 <HAL_ADC_MspInit+0xc4>)
 8000244:	f001 f8e6 	bl	8001414 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 800024a:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <HAL_ADC_MspInit+0xcc>)
 800024c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 8000250:	2200      	movs	r2, #0
 8000252:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 800025c:	2280      	movs	r2, #128	; 0x80
 800025e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 8000262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000266:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 800026a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800026e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 8000272:	2220      	movs	r2, #32
 8000274:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 8000278:	2200      	movs	r2, #0
 800027a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800027c:	480b      	ldr	r0, [pc, #44]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 800027e:	f000 fedb 	bl	8001038 <HAL_DMA_Init>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000288:	f000 f8ee 	bl	8000468 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 8000290:	621a      	str	r2, [r3, #32]
 8000292:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_ADC_MspInit+0xc8>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000298:	bf00      	nop
 800029a:	3720      	adds	r7, #32
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40012400 	.word	0x40012400
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010800 	.word	0x40010800
 80002ac:	20000058 	.word	0x20000058
 80002b0:	40020008 	.word	0x40020008

080002b4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <MX_DMA_Init+0x38>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <MX_DMA_Init+0x38>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6153      	str	r3, [r2, #20]
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_DMA_Init+0x38>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2100      	movs	r1, #0
 80002d6:	200b      	movs	r0, #11
 80002d8:	f000 fe77 	bl	8000fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80002dc:	200b      	movs	r0, #11
 80002de:	f000 fe90 	bl	8001002 <HAL_NVIC_EnableIRQ>

}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40021000 	.word	0x40021000

080002f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_GPIO_Init+0x40>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <MX_GPIO_Init+0x40>)
 80002fc:	f043 0310 	orr.w	r3, r3, #16
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <MX_GPIO_Init+0x40>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0310 	and.w	r3, r3, #16
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_GPIO_Init+0x40>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a07      	ldr	r2, [pc, #28]	; (8000330 <MX_GPIO_Init+0x40>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <MX_GPIO_Init+0x40>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0304 	and.w	r3, r3, #4
 8000322:	603b      	str	r3, [r7, #0]
 8000324:	683b      	ldr	r3, [r7, #0]

}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40021000 	.word	0x40021000

08000334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000338:	f000 f95c 	bl	80005f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033c:	f000 f810 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000340:	f7ff ffd6 	bl	80002f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000344:	f7ff ffb6 	bl	80002b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000348:	f7ff ff00 	bl	800014c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 100);
 800034c:	2264      	movs	r2, #100	; 0x64
 800034e:	4902      	ldr	r1, [pc, #8]	; (8000358 <main+0x24>)
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <main+0x28>)
 8000352:	f000 fa89 	bl	8000868 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000356:	e7fe      	b.n	8000356 <main+0x22>
 8000358:	200000a0 	.word	0x200000a0
 800035c:	20000028 	.word	0x20000028

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b094      	sub	sp, #80	; 0x50
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036a:	2228      	movs	r2, #40	; 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fe6e 	bl	8002050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	f107 0314 	add.w	r3, r7, #20
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000390:	2302      	movs	r3, #2
 8000392:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000394:	2301      	movs	r3, #1
 8000396:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000398:	2310      	movs	r3, #16
 800039a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039c:	2302      	movs	r3, #2
 800039e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003a0:	2300      	movs	r3, #0
 80003a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003a4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ae:	4618      	mov	r0, r3
 80003b0:	f001 f98a 	bl	80016c8 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003ba:	f000 f855 	bl	8000468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2302      	movs	r3, #2
 80003c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fbf4 	bl	8001bc8 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003e6:	f000 f83f 	bl	8000468 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003ea:	2302      	movs	r3, #2
 80003ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80003ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80003f2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4618      	mov	r0, r3
 80003f8:	f001 fd50 	bl	8001e9c <HAL_RCCEx_PeriphCLKConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000402:	f000 f831 	bl	8000468 <Error_Handler>
  }
}
 8000406:	bf00      	nop
 8000408:	3750      	adds	r7, #80	; 0x50
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	ADC_average = 0;
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <HAL_ADC_ConvCpltCallback+0x4c>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 100; i++) {
 800041e:	2300      	movs	r3, #0
 8000420:	73fb      	strb	r3, [r7, #15]
 8000422:	e00b      	b.n	800043c <HAL_ADC_ConvCpltCallback+0x2c>
		ADC_average += ADC_Value[i];
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <HAL_ADC_ConvCpltCallback+0x50>)
 8000428:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <HAL_ADC_ConvCpltCallback+0x4c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4413      	add	r3, r2
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000434:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < 100; i++) {
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	3301      	adds	r3, #1
 800043a:	73fb      	strb	r3, [r7, #15]
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	2b63      	cmp	r3, #99	; 0x63
 8000440:	d9f0      	bls.n	8000424 <HAL_ADC_ConvCpltCallback+0x14>
	}
	ADC_average /= 100;
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a07      	ldr	r2, [pc, #28]	; (8000464 <HAL_ADC_ConvCpltCallback+0x54>)
 8000448:	fba2 2303 	umull	r2, r3, r2, r3
 800044c:	095b      	lsrs	r3, r3, #5
 800044e:	4a03      	ldr	r2, [pc, #12]	; (800045c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000450:	6013      	str	r3, [r2, #0]

}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	2000009c 	.word	0x2000009c
 8000460:	200000a0 	.word	0x200000a0
 8000464:	51eb851f 	.word	0x51eb851f

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <HAL_MspInit+0x5c>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <HAL_MspInit+0x5c>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <HAL_MspInit+0x60>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <HAL_MspInit+0x60>)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010000 	.word	0x40010000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <HardFault_Handler+0x4>

080004ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <MemManage_Handler+0x4>

080004f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <BusFault_Handler+0x4>

080004f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <UsageFault_Handler+0x4>

080004fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000524:	f000 f8ac 	bl	8000680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <DMA1_Channel1_IRQHandler+0x10>)
 8000532:	f000 fe3b 	bl	80011ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000058 	.word	0x20000058

08000540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <SystemInit+0x5c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a14      	ldr	r2, [pc, #80]	; (800059c <SystemInit+0x5c>)
 800054a:	f043 0301 	orr.w	r3, r3, #1
 800054e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <SystemInit+0x5c>)
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	4911      	ldr	r1, [pc, #68]	; (800059c <SystemInit+0x5c>)
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <SystemInit+0x60>)
 8000558:	4013      	ands	r3, r2
 800055a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <SystemInit+0x5c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <SystemInit+0x5c>)
 8000562:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800056a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <SystemInit+0x5c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0a      	ldr	r2, [pc, #40]	; (800059c <SystemInit+0x5c>)
 8000572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000576:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <SystemInit+0x5c>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <SystemInit+0x5c>)
 800057e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000582:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <SystemInit+0x5c>)
 8000586:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800058a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <SystemInit+0x64>)
 800058e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000592:	609a      	str	r2, [r3, #8]
#endif 
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000
 80005a0:	f8ff0000 	.word	0xf8ff0000
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005aa:	e003      	b.n	80005b4 <LoopCopyDataInit>

080005ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005b2:	3104      	adds	r1, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005bc:	d3f6      	bcc.n	80005ac <CopyDataInit>
  ldr r2, =_sbss
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005c0:	e002      	b.n	80005c8 <LoopFillZerobss>

080005c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005c4:	f842 3b04 	str.w	r3, [r2], #4

080005c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005cc:	d3f9      	bcc.n	80005c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ce:	f7ff ffb7 	bl	8000540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005d2:	f001 fd19 	bl	8002008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d6:	f7ff fead 	bl	8000334 <main>
  bx lr
 80005da:	4770      	bx	lr
  ldr r3, =_sidata
 80005dc:	080020a4 	.word	0x080020a4
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80005e8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80005ec:	20000234 	.word	0x20000234

080005f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC1_2_IRQHandler>
	...

080005f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_Init+0x28>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a07      	ldr	r2, [pc, #28]	; (800061c <HAL_Init+0x28>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 fcd5 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 f808 	bl	8000620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000610:	f7ff ff30 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40022000 	.word	0x40022000

08000620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_InitTick+0x54>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_InitTick+0x58>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	fbb3 f3f1 	udiv	r3, r3, r1
 800063a:	fbb2 f3f3 	udiv	r3, r2, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fced 	bl	800101e <HAL_SYSTICK_Config>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	e00e      	b.n	800066c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b0f      	cmp	r3, #15
 8000652:	d80a      	bhi.n	800066a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000654:	2200      	movs	r2, #0
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	f04f 30ff 	mov.w	r0, #4294967295
 800065c:	f000 fcb5 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <HAL_InitTick+0x5c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000666:	2300      	movs	r3, #0
 8000668:	e000      	b.n	800066c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000000 	.word	0x20000000
 8000678:	20000008 	.word	0x20000008
 800067c:	20000004 	.word	0x20000004

08000680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_IncTick+0x1c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x20>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4413      	add	r3, r2
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <HAL_IncTick+0x20>)
 8000692:	6013      	str	r3, [r2, #0]
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	20000008 	.word	0x20000008
 80006a0:	20000230 	.word	0x20000230

080006a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return uwTick;
 80006a8:	4b02      	ldr	r3, [pc, #8]	; (80006b4 <HAL_GetTick+0x10>)
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000230 	.word	0x20000230

080006b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e0be      	b.n	8000858 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d109      	bne.n	80006fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff fd74 	bl	80001e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 faed 	bl	8000cdc <ADC_ConversionStop_Disable>
 8000702:	4603      	mov	r3, r0
 8000704:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	2b00      	cmp	r3, #0
 8000710:	f040 8099 	bne.w	8000846 <HAL_ADC_Init+0x18e>
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	2b00      	cmp	r3, #0
 8000718:	f040 8095 	bne.w	8000846 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000720:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000724:	f023 0302 	bic.w	r3, r3, #2
 8000728:	f043 0202 	orr.w	r2, r3, #2
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000738:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7b1b      	ldrb	r3, [r3, #12]
 800073e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000740:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	4313      	orrs	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000750:	d003      	beq.n	800075a <HAL_ADC_Init+0xa2>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d102      	bne.n	8000760 <HAL_ADC_Init+0xa8>
 800075a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075e:	e000      	b.n	8000762 <HAL_ADC_Init+0xaa>
 8000760:	2300      	movs	r3, #0
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	4313      	orrs	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7d1b      	ldrb	r3, [r3, #20]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d119      	bne.n	80007a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7b1b      	ldrb	r3, [r3, #12]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d109      	bne.n	800078c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	3b01      	subs	r3, #1
 800077e:	035a      	lsls	r2, r3, #13
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	4313      	orrs	r3, r2
 8000784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	e00b      	b.n	80007a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000790:	f043 0220 	orr.w	r2, r3, #32
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079c:	f043 0201 	orr.w	r2, r3, #1
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	689a      	ldr	r2, [r3, #8]
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <HAL_ADC_Init+0x1a8>)
 80007c0:	4013      	ands	r3, r2
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	430b      	orrs	r3, r1
 80007ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007d4:	d003      	beq.n	80007de <HAL_ADC_Init+0x126>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d104      	bne.n	80007e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	051b      	lsls	r3, r3, #20
 80007e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	430a      	orrs	r2, r1
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	689a      	ldr	r2, [r3, #8]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_ADC_Init+0x1ac>)
 8000804:	4013      	ands	r3, r2
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	429a      	cmp	r2, r3
 800080a:	d10b      	bne.n	8000824 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000816:	f023 0303 	bic.w	r3, r3, #3
 800081a:	f043 0201 	orr.w	r2, r3, #1
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000822:	e018      	b.n	8000856 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000828:	f023 0312 	bic.w	r3, r3, #18
 800082c:	f043 0210 	orr.w	r2, r3, #16
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000838:	f043 0201 	orr.w	r2, r3, #1
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000844:	e007      	b.n	8000856 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084a:	f043 0210 	orr.w	r2, r3, #16
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000856:	7dfb      	ldrb	r3, [r7, #23]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	ffe1f7fd 	.word	0xffe1f7fd
 8000864:	ff1f0efe 	.word	0xff1f0efe

08000868 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000874:	2300      	movs	r3, #0
 8000876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a64      	ldr	r2, [pc, #400]	; (8000a10 <HAL_ADC_Start_DMA+0x1a8>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d004      	beq.n	800088c <HAL_ADC_Start_DMA+0x24>
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a63      	ldr	r2, [pc, #396]	; (8000a14 <HAL_ADC_Start_DMA+0x1ac>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d106      	bne.n	800089a <HAL_ADC_Start_DMA+0x32>
 800088c:	4b60      	ldr	r3, [pc, #384]	; (8000a10 <HAL_ADC_Start_DMA+0x1a8>)
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000894:	2b00      	cmp	r3, #0
 8000896:	f040 80b3 	bne.w	8000a00 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d101      	bne.n	80008a8 <HAL_ADC_Start_DMA+0x40>
 80008a4:	2302      	movs	r3, #2
 80008a6:	e0ae      	b.n	8000a06 <HAL_ADC_Start_DMA+0x19e>
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2201      	movs	r2, #1
 80008ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f000 f9c1 	bl	8000c38 <ADC_Enable>
 80008b6:	4603      	mov	r3, r0
 80008b8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f040 809a 	bne.w	80009f6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008ca:	f023 0301 	bic.w	r3, r3, #1
 80008ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a4e      	ldr	r2, [pc, #312]	; (8000a14 <HAL_ADC_Start_DMA+0x1ac>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d105      	bne.n	80008ec <HAL_ADC_Start_DMA+0x84>
 80008e0:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <HAL_ADC_Start_DMA+0x1a8>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d115      	bne.n	8000918 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000902:	2b00      	cmp	r3, #0
 8000904:	d026      	beq.n	8000954 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800090e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000916:	e01d      	b.n	8000954 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a39      	ldr	r2, [pc, #228]	; (8000a10 <HAL_ADC_Start_DMA+0x1a8>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d004      	beq.n	8000938 <HAL_ADC_Start_DMA+0xd0>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a38      	ldr	r2, [pc, #224]	; (8000a14 <HAL_ADC_Start_DMA+0x1ac>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d10d      	bne.n	8000954 <HAL_ADC_Start_DMA+0xec>
 8000938:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <HAL_ADC_Start_DMA+0x1a8>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000940:	2b00      	cmp	r3, #0
 8000942:	d007      	beq.n	8000954 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000948:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800094c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800095c:	2b00      	cmp	r3, #0
 800095e:	d006      	beq.n	800096e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000964:	f023 0206 	bic.w	r2, r3, #6
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
 800096c:	e002      	b.n	8000974 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6a1b      	ldr	r3, [r3, #32]
 8000980:	4a25      	ldr	r2, [pc, #148]	; (8000a18 <HAL_ADC_Start_DMA+0x1b0>)
 8000982:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6a1b      	ldr	r3, [r3, #32]
 8000988:	4a24      	ldr	r2, [pc, #144]	; (8000a1c <HAL_ADC_Start_DMA+0x1b4>)
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6a1b      	ldr	r3, [r3, #32]
 8000990:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <HAL_ADC_Start_DMA+0x1b8>)
 8000992:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f06f 0202 	mvn.w	r2, #2
 800099c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	689a      	ldr	r2, [r3, #8]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009ac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6a18      	ldr	r0, [r3, #32]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	334c      	adds	r3, #76	; 0x4c
 80009b8:	4619      	mov	r1, r3
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f000 fb95 	bl	80010ec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80009cc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80009d0:	d108      	bne.n	80009e4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80009e0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80009e2:	e00f      	b.n	8000a04 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80009f2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80009f4:	e006      	b.n	8000a04 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80009fe:	e001      	b.n	8000a04 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40012400 	.word	0x40012400
 8000a14:	40012800 	.word	0x40012800
 8000a18:	08000d51 	.word	0x08000d51
 8000a1c:	08000dcd 	.word	0x08000dcd
 8000a20:	08000de9 	.word	0x08000de9

08000a24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr

08000a36 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d101      	bne.n	8000a68 <HAL_ADC_ConfigChannel+0x20>
 8000a64:	2302      	movs	r3, #2
 8000a66:	e0dc      	b.n	8000c22 <HAL_ADC_ConfigChannel+0x1da>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d81c      	bhi.n	8000ab2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	3b05      	subs	r3, #5
 8000a8a:	221f      	movs	r2, #31
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	4019      	ands	r1, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	3b05      	subs	r3, #5
 8000aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	635a      	str	r2, [r3, #52]	; 0x34
 8000ab0:	e03c      	b.n	8000b2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b0c      	cmp	r3, #12
 8000ab8:	d81c      	bhi.n	8000af4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	3b23      	subs	r3, #35	; 0x23
 8000acc:	221f      	movs	r2, #31
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4019      	ands	r1, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b23      	subs	r3, #35	; 0x23
 8000ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	631a      	str	r2, [r3, #48]	; 0x30
 8000af2:	e01b      	b.n	8000b2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	3b41      	subs	r3, #65	; 0x41
 8000b06:	221f      	movs	r2, #31
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4019      	ands	r1, r3
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3b41      	subs	r3, #65	; 0x41
 8000b20:	fa00 f203 	lsl.w	r2, r0, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b09      	cmp	r3, #9
 8000b32:	d91c      	bls.n	8000b6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68d9      	ldr	r1, [r3, #12]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	3b1e      	subs	r3, #30
 8000b46:	2207      	movs	r2, #7
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4019      	ands	r1, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	6898      	ldr	r0, [r3, #8]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	3b1e      	subs	r3, #30
 8000b60:	fa00 f203 	lsl.w	r2, r0, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	e019      	b.n	8000ba2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6919      	ldr	r1, [r3, #16]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	2207      	movs	r2, #7
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4019      	ands	r1, r3
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	6898      	ldr	r0, [r3, #8]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	fa00 f203 	lsl.w	r2, r0, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b10      	cmp	r3, #16
 8000ba8:	d003      	beq.n	8000bb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bae:	2b11      	cmp	r3, #17
 8000bb0:	d132      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_ADC_ConfigChannel+0x1e4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d125      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d126      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000bd8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	d11a      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_ADC_ConfigChannel+0x1e8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <HAL_ADC_ConfigChannel+0x1ec>)
 8000be8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bec:	0c9a      	lsrs	r2, r3, #18
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bf8:	e002      	b.n	8000c00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f9      	bne.n	8000bfa <HAL_ADC_ConfigChannel+0x1b2>
 8000c06:	e007      	b.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f043 0220 	orr.w	r2, r3, #32
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40012400 	.word	0x40012400
 8000c30:	20000000 	.word	0x20000000
 8000c34:	431bde83 	.word	0x431bde83

08000c38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d039      	beq.n	8000cca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f042 0201 	orr.w	r2, r2, #1
 8000c64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <ADC_Enable+0x9c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <ADC_Enable+0xa0>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	0c9b      	lsrs	r3, r3, #18
 8000c72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c74:	e002      	b.n	8000c7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f9      	bne.n	8000c76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c82:	f7ff fd0f 	bl	80006a4 <HAL_GetTick>
 8000c86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c88:	e018      	b.n	8000cbc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c8a:	f7ff fd0b 	bl	80006a4 <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d911      	bls.n	8000cbc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	f043 0210 	orr.w	r2, r3, #16
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	f043 0201 	orr.w	r2, r3, #1
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e007      	b.n	8000ccc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d1df      	bne.n	8000c8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	431bde83 	.word	0x431bde83

08000cdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d127      	bne.n	8000d46 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f022 0201 	bic.w	r2, r2, #1
 8000d04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d06:	f7ff fccd 	bl	80006a4 <HAL_GetTick>
 8000d0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d0c:	e014      	b.n	8000d38 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d0e:	f7ff fcc9 	bl	80006a4 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d90d      	bls.n	8000d38 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	f043 0210 	orr.w	r2, r3, #16
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	f043 0201 	orr.w	r2, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e007      	b.n	8000d48 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d0e3      	beq.n	8000d0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d127      	bne.n	8000dba <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d84:	d115      	bne.n	8000db2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d111      	bne.n	8000db2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d105      	bne.n	8000db2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000daa:	f043 0201 	orr.w	r2, r3, #1
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f7ff fb2c 	bl	8000410 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000db8:	e004      	b.n	8000dc4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	4798      	blx	r3
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f7ff fe22 	bl	8000a24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	f043 0204 	orr.w	r2, r3, #4
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff fe11 	bl	8000a36 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <__NVIC_EnableIRQ+0x34>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff90 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff2d 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff42 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff90 	bl	8000f0c <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5f 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff35 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa2 	bl	8000f70 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e043      	b.n	80010d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_DMA_Init+0xa8>)
 8001056:	4413      	add	r3, r2
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <HAL_DMA_Init+0xac>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	009a      	lsls	r2, r3, #2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <HAL_DMA_Init+0xb0>)
 800106a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2202      	movs	r2, #2
 8001070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001082:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001086:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	bffdfff8 	.word	0xbffdfff8
 80010e4:	cccccccd 	.word	0xcccccccd
 80010e8:	40020000 	.word	0x40020000

080010ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d101      	bne.n	800110c <HAL_DMA_Start_IT+0x20>
 8001108:	2302      	movs	r3, #2
 800110a:	e04a      	b.n	80011a2 <HAL_DMA_Start_IT+0xb6>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800111a:	2b01      	cmp	r3, #1
 800111c:	d13a      	bne.n	8001194 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2202      	movs	r2, #2
 8001122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0201 	bic.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 f938 	bl	80013b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 020e 	orr.w	r2, r2, #14
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e00f      	b.n	8001182 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0204 	bic.w	r2, r2, #4
 8001170:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 020a 	orr.w	r2, r2, #10
 8001180:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0201 	orr.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e005      	b.n	80011a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800119c:	2302      	movs	r3, #2
 800119e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	2204      	movs	r2, #4
 80011ca:	409a      	lsls	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d04f      	beq.n	8001274 <HAL_DMA_IRQHandler+0xc8>
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d04a      	beq.n	8001274 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0204 	bic.w	r2, r2, #4
 80011fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a66      	ldr	r2, [pc, #408]	; (800139c <HAL_DMA_IRQHandler+0x1f0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d029      	beq.n	800125a <HAL_DMA_IRQHandler+0xae>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a65      	ldr	r2, [pc, #404]	; (80013a0 <HAL_DMA_IRQHandler+0x1f4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d022      	beq.n	8001256 <HAL_DMA_IRQHandler+0xaa>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a63      	ldr	r2, [pc, #396]	; (80013a4 <HAL_DMA_IRQHandler+0x1f8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01a      	beq.n	8001250 <HAL_DMA_IRQHandler+0xa4>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a62      	ldr	r2, [pc, #392]	; (80013a8 <HAL_DMA_IRQHandler+0x1fc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d012      	beq.n	800124a <HAL_DMA_IRQHandler+0x9e>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a60      	ldr	r2, [pc, #384]	; (80013ac <HAL_DMA_IRQHandler+0x200>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00a      	beq.n	8001244 <HAL_DMA_IRQHandler+0x98>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a5f      	ldr	r2, [pc, #380]	; (80013b0 <HAL_DMA_IRQHandler+0x204>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d102      	bne.n	800123e <HAL_DMA_IRQHandler+0x92>
 8001238:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800123c:	e00e      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 800123e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001242:	e00b      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 8001244:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001248:	e008      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 800124a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800124e:	e005      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 8001250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001254:	e002      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 8001256:	2340      	movs	r3, #64	; 0x40
 8001258:	e000      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 800125a:	2304      	movs	r3, #4
 800125c:	4a55      	ldr	r2, [pc, #340]	; (80013b4 <HAL_DMA_IRQHandler+0x208>)
 800125e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 8094 	beq.w	8001392 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001272:	e08e      	b.n	8001392 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	2202      	movs	r2, #2
 800127a:	409a      	lsls	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d056      	beq.n	8001332 <HAL_DMA_IRQHandler+0x186>
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d051      	beq.n	8001332 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10b      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020a 	bic.w	r2, r2, #10
 80012aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a38      	ldr	r2, [pc, #224]	; (800139c <HAL_DMA_IRQHandler+0x1f0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d029      	beq.n	8001312 <HAL_DMA_IRQHandler+0x166>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a37      	ldr	r2, [pc, #220]	; (80013a0 <HAL_DMA_IRQHandler+0x1f4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d022      	beq.n	800130e <HAL_DMA_IRQHandler+0x162>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a35      	ldr	r2, [pc, #212]	; (80013a4 <HAL_DMA_IRQHandler+0x1f8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01a      	beq.n	8001308 <HAL_DMA_IRQHandler+0x15c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a34      	ldr	r2, [pc, #208]	; (80013a8 <HAL_DMA_IRQHandler+0x1fc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d012      	beq.n	8001302 <HAL_DMA_IRQHandler+0x156>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_DMA_IRQHandler+0x200>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00a      	beq.n	80012fc <HAL_DMA_IRQHandler+0x150>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a31      	ldr	r2, [pc, #196]	; (80013b0 <HAL_DMA_IRQHandler+0x204>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d102      	bne.n	80012f6 <HAL_DMA_IRQHandler+0x14a>
 80012f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012f4:	e00e      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 80012f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fa:	e00b      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 80012fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001300:	e008      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 8001302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001306:	e005      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 8001308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130c:	e002      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 800130e:	2320      	movs	r3, #32
 8001310:	e000      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 8001312:	2302      	movs	r3, #2
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <HAL_DMA_IRQHandler+0x208>)
 8001316:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	2b00      	cmp	r3, #0
 8001326:	d034      	beq.n	8001392 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001330:	e02f      	b.n	8001392 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	2208      	movs	r2, #8
 8001338:	409a      	lsls	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d028      	beq.n	8001394 <HAL_DMA_IRQHandler+0x1e8>
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d023      	beq.n	8001394 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 020e 	bic.w	r2, r2, #14
 800135a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
    }
  }
  return;
 8001392:	bf00      	nop
 8001394:	bf00      	nop
}
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40020008 	.word	0x40020008
 80013a0:	4002001c 	.word	0x4002001c
 80013a4:	40020030 	.word	0x40020030
 80013a8:	40020044 	.word	0x40020044
 80013ac:	40020058 	.word	0x40020058
 80013b0:	4002006c 	.word	0x4002006c
 80013b4:	40020000 	.word	0x40020000

080013b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ce:	2101      	movs	r1, #1
 80013d0:	fa01 f202 	lsl.w	r2, r1, r2
 80013d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d108      	bne.n	80013f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013f6:	e007      	b.n	8001408 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	60da      	str	r2, [r3, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b08b      	sub	sp, #44	; 0x2c
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	e127      	b.n	8001678 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001428:	2201      	movs	r2, #1
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8116 	bne.w	8001672 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b12      	cmp	r3, #18
 800144c:	d034      	beq.n	80014b8 <HAL_GPIO_Init+0xa4>
 800144e:	2b12      	cmp	r3, #18
 8001450:	d80d      	bhi.n	800146e <HAL_GPIO_Init+0x5a>
 8001452:	2b02      	cmp	r3, #2
 8001454:	d02b      	beq.n	80014ae <HAL_GPIO_Init+0x9a>
 8001456:	2b02      	cmp	r3, #2
 8001458:	d804      	bhi.n	8001464 <HAL_GPIO_Init+0x50>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d031      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 800145e:	2b01      	cmp	r3, #1
 8001460:	d01c      	beq.n	800149c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001462:	e048      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001464:	2b03      	cmp	r3, #3
 8001466:	d043      	beq.n	80014f0 <HAL_GPIO_Init+0xdc>
 8001468:	2b11      	cmp	r3, #17
 800146a:	d01b      	beq.n	80014a4 <HAL_GPIO_Init+0x90>
          break;
 800146c:	e043      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800146e:	4a89      	ldr	r2, [pc, #548]	; (8001694 <HAL_GPIO_Init+0x280>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d026      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 8001474:	4a87      	ldr	r2, [pc, #540]	; (8001694 <HAL_GPIO_Init+0x280>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d806      	bhi.n	8001488 <HAL_GPIO_Init+0x74>
 800147a:	4a87      	ldr	r2, [pc, #540]	; (8001698 <HAL_GPIO_Init+0x284>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d020      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 8001480:	4a86      	ldr	r2, [pc, #536]	; (800169c <HAL_GPIO_Init+0x288>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01d      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
          break;
 8001486:	e036      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001488:	4a85      	ldr	r2, [pc, #532]	; (80016a0 <HAL_GPIO_Init+0x28c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 800148e:	4a85      	ldr	r2, [pc, #532]	; (80016a4 <HAL_GPIO_Init+0x290>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d016      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 8001494:	4a84      	ldr	r2, [pc, #528]	; (80016a8 <HAL_GPIO_Init+0x294>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
          break;
 800149a:	e02c      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e028      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	3304      	adds	r3, #4
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e023      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	3308      	adds	r3, #8
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e01e      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	330c      	adds	r3, #12
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e019      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ca:	2304      	movs	r3, #4
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e012      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d8:	2308      	movs	r3, #8
 80014da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	611a      	str	r2, [r3, #16]
          break;
 80014e2:	e008      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e4:	2308      	movs	r3, #8
 80014e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	615a      	str	r2, [r3, #20]
          break;
 80014ee:	e002      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2bff      	cmp	r3, #255	; 0xff
 80014fa:	d801      	bhi.n	8001500 <HAL_GPIO_Init+0xec>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	e001      	b.n	8001504 <HAL_GPIO_Init+0xf0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3304      	adds	r3, #4
 8001504:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2bff      	cmp	r3, #255	; 0xff
 800150a:	d802      	bhi.n	8001512 <HAL_GPIO_Init+0xfe>
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x104>
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	3b08      	subs	r3, #8
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	210f      	movs	r1, #15
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	6a39      	ldr	r1, [r7, #32]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	431a      	orrs	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 8096 	beq.w	8001672 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001546:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_GPIO_Init+0x298>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a58      	ldr	r2, [pc, #352]	; (80016ac <HAL_GPIO_Init+0x298>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b56      	ldr	r3, [pc, #344]	; (80016ac <HAL_GPIO_Init+0x298>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800155e:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <HAL_GPIO_Init+0x29c>)
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4b      	ldr	r2, [pc, #300]	; (80016b4 <HAL_GPIO_Init+0x2a0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x19e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4a      	ldr	r2, [pc, #296]	; (80016b8 <HAL_GPIO_Init+0x2a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x19a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a49      	ldr	r2, [pc, #292]	; (80016bc <HAL_GPIO_Init+0x2a8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x196>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_GPIO_Init+0x2ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x192>
 80015a2:	2303      	movs	r3, #3
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015b2:	2300      	movs	r3, #0
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015c4:	493a      	ldr	r1, [pc, #232]	; (80016b0 <HAL_GPIO_Init+0x29c>)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015de:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4938      	ldr	r1, [pc, #224]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
 80015ea:	e006      	b.n	80015fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4933      	ldr	r1, [pc, #204]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	492e      	ldr	r1, [pc, #184]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	43db      	mvns	r3, r3
 800161c:	4929      	ldr	r1, [pc, #164]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800161e:	4013      	ands	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	4924      	ldr	r1, [pc, #144]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	43db      	mvns	r3, r3
 8001644:	491f      	ldr	r1, [pc, #124]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001646:	4013      	ands	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	491a      	ldr	r1, [pc, #104]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	60cb      	str	r3, [r1, #12]
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	43db      	mvns	r3, r3
 800166c:	4915      	ldr	r1, [pc, #84]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800166e:	4013      	ands	r3, r2
 8001670:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	3301      	adds	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	f47f aed0 	bne.w	8001428 <HAL_GPIO_Init+0x14>
  }
}
 8001688:	bf00      	nop
 800168a:	372c      	adds	r7, #44	; 0x2c
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	10210000 	.word	0x10210000
 8001698:	10110000 	.word	0x10110000
 800169c:	10120000 	.word	0x10120000
 80016a0:	10310000 	.word	0x10310000
 80016a4:	10320000 	.word	0x10320000
 80016a8:	10220000 	.word	0x10220000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	40010800 	.word	0x40010800
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40011400 	.word	0x40011400
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e26c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8087 	beq.w	80017f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e8:	4b92      	ldr	r3, [pc, #584]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d00c      	beq.n	800170e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016f4:	4b8f      	ldr	r3, [pc, #572]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d112      	bne.n	8001726 <HAL_RCC_OscConfig+0x5e>
 8001700:	4b8c      	ldr	r3, [pc, #560]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170c:	d10b      	bne.n	8001726 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170e:	4b89      	ldr	r3, [pc, #548]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d06c      	beq.n	80017f4 <HAL_RCC_OscConfig+0x12c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d168      	bne.n	80017f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e246      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x76>
 8001730:	4b80      	ldr	r3, [pc, #512]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a7f      	ldr	r2, [pc, #508]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e02e      	b.n	800179c <HAL_RCC_OscConfig+0xd4>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x98>
 8001746:	4b7b      	ldr	r3, [pc, #492]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a7a      	ldr	r2, [pc, #488]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800174c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b78      	ldr	r3, [pc, #480]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a77      	ldr	r2, [pc, #476]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e01d      	b.n	800179c <HAL_RCC_OscConfig+0xd4>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0xbc>
 800176a:	4b72      	ldr	r3, [pc, #456]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a71      	ldr	r2, [pc, #452]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b6f      	ldr	r3, [pc, #444]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a6e      	ldr	r2, [pc, #440]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0xd4>
 8001784:	4b6b      	ldr	r3, [pc, #428]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a6a      	ldr	r2, [pc, #424]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800178a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a67      	ldr	r2, [pc, #412]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d013      	beq.n	80017cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7fe ff7e 	bl	80006a4 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7fe ff7a 	bl	80006a4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1fa      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0xe4>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7fe ff6a 	bl	80006a4 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7fe ff66 	bl	80006a4 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1e6      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x10c>
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d063      	beq.n	80018ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001802:	4b4c      	ldr	r3, [pc, #304]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800180e:	4b49      	ldr	r3, [pc, #292]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d11c      	bne.n	8001854 <HAL_RCC_OscConfig+0x18c>
 800181a:	4b46      	ldr	r3, [pc, #280]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d116      	bne.n	8001854 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	4b43      	ldr	r3, [pc, #268]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_RCC_OscConfig+0x176>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e1ba      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4939      	ldr	r1, [pc, #228]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	e03a      	b.n	80018ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185c:	4b36      	ldr	r3, [pc, #216]	; (8001938 <HAL_RCC_OscConfig+0x270>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7fe ff1f 	bl	80006a4 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186a:	f7fe ff1b 	bl	80006a4 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e19b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4927      	ldr	r1, [pc, #156]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	e015      	b.n	80018ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x270>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7fe fefe 	bl	80006a4 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ac:	f7fe fefa 	bl	80006a4 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e17a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d03a      	beq.n	800194c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d019      	beq.n	8001912 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_RCC_OscConfig+0x274>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7fe fede 	bl	80006a4 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ec:	f7fe feda 	bl	80006a4 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e15a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800190a:	2001      	movs	r0, #1
 800190c:	f000 faa8 	bl	8001e60 <RCC_Delay>
 8001910:	e01c      	b.n	800194c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_RCC_OscConfig+0x274>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7fe fec4 	bl	80006a4 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191e:	e00f      	b.n	8001940 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7fe fec0 	bl	80006a4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d908      	bls.n	8001940 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e140      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	42420000 	.word	0x42420000
 800193c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001940:	4b9e      	ldr	r3, [pc, #632]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1e9      	bne.n	8001920 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a6 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195e:	4b97      	ldr	r3, [pc, #604]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10d      	bne.n	8001986 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	4b94      	ldr	r3, [pc, #592]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a93      	ldr	r2, [pc, #588]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001974:	61d3      	str	r3, [r2, #28]
 8001976:	4b91      	ldr	r3, [pc, #580]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001982:	2301      	movs	r3, #1
 8001984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001986:	4b8e      	ldr	r3, [pc, #568]	; (8001bc0 <HAL_RCC_OscConfig+0x4f8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d118      	bne.n	80019c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001992:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <HAL_RCC_OscConfig+0x4f8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a8a      	ldr	r2, [pc, #552]	; (8001bc0 <HAL_RCC_OscConfig+0x4f8>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199e:	f7fe fe81 	bl	80006a4 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a6:	f7fe fe7d 	bl	80006a4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	; 0x64
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0fd      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	4b81      	ldr	r3, [pc, #516]	; (8001bc0 <HAL_RCC_OscConfig+0x4f8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x312>
 80019cc:	4b7b      	ldr	r3, [pc, #492]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a7a      	ldr	r2, [pc, #488]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e02d      	b.n	8001a36 <HAL_RCC_OscConfig+0x36e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x334>
 80019e2:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a75      	ldr	r2, [pc, #468]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6213      	str	r3, [r2, #32]
 80019ee:	4b73      	ldr	r3, [pc, #460]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4a72      	ldr	r2, [pc, #456]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	f023 0304 	bic.w	r3, r3, #4
 80019f8:	6213      	str	r3, [r2, #32]
 80019fa:	e01c      	b.n	8001a36 <HAL_RCC_OscConfig+0x36e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d10c      	bne.n	8001a1e <HAL_RCC_OscConfig+0x356>
 8001a04:	4b6d      	ldr	r3, [pc, #436]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4a6c      	ldr	r2, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4a69      	ldr	r2, [pc, #420]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6213      	str	r3, [r2, #32]
 8001a1c:	e00b      	b.n	8001a36 <HAL_RCC_OscConfig+0x36e>
 8001a1e:	4b67      	ldr	r3, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a66      	ldr	r2, [pc, #408]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6213      	str	r3, [r2, #32]
 8001a2a:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	f023 0304 	bic.w	r3, r3, #4
 8001a34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d015      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3e:	f7fe fe31 	bl	80006a4 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7fe fe2d 	bl	80006a4 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0ab      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5c:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0ee      	beq.n	8001a46 <HAL_RCC_OscConfig+0x37e>
 8001a68:	e014      	b.n	8001a94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7fe fe1b 	bl	80006a4 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7fe fe17 	bl	80006a4 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e095      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a88:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ee      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d105      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9a:	4b48      	ldr	r3, [pc, #288]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a47      	ldr	r2, [pc, #284]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8081 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab0:	4b42      	ldr	r3, [pc, #264]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d061      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d146      	bne.n	8001b52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_OscConfig+0x4fc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7fe fdeb 	bl	80006a4 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7fe fde7 	bl	80006a4 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e067      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af8:	d108      	bne.n	8001b0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	492d      	ldr	r1, [pc, #180]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a19      	ldr	r1, [r3, #32]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	4927      	ldr	r1, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <HAL_RCC_OscConfig+0x4fc>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7fe fdbb 	bl	80006a4 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe fdb7 	bl	80006a4 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e037      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x46a>
 8001b50:	e02f      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <HAL_RCC_OscConfig+0x4fc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7fe fda4 	bl	80006a4 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7fe fda0 	bl	80006a4 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e020      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x498>
 8001b7e:	e018      	b.n	8001bb2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e013      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42420060 	.word	0x42420060

08001bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0d0      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d910      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b67      	ldr	r3, [pc, #412]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 0207 	bic.w	r2, r3, #7
 8001bf2:	4965      	ldr	r1, [pc, #404]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0b8      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c24:	4b59      	ldr	r3, [pc, #356]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a58      	ldr	r2, [pc, #352]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c3c:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c48:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	494d      	ldr	r1, [pc, #308]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d040      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d115      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e07f      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c86:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e073      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e06b      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4b39      	ldr	r3, [pc, #228]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 0203 	bic.w	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4936      	ldr	r1, [pc, #216]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb8:	f7fe fcf4 	bl	80006a4 <HAL_GetTick>
 8001cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7fe fcf0 	bl	80006a4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e053      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 020c 	and.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1eb      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d210      	bcs.n	8001d18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 0207 	bic.w	r2, r3, #7
 8001cfe:	4922      	ldr	r1, [pc, #136]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e032      	b.n	8001d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4916      	ldr	r1, [pc, #88]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	490e      	ldr	r1, [pc, #56]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d56:	f000 f821 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <HAL_RCC_ClockConfig+0x1c8>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d6e:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x1cc>)
 8001d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1d0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fc52 	bl	8000620 <HAL_InitTick>

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	0800208c 	.word	0x0800208c
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000004 	.word	0x20000004

08001d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d9c:	b490      	push	{r4, r7}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001da4:	1d3c      	adds	r4, r7, #4
 8001da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d002      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x40>
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0x46>
 8001dda:	e02d      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dde:	623b      	str	r3, [r7, #32]
      break;
 8001de0:	e02d      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	0c9b      	lsrs	r3, r3, #18
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dee:	4413      	add	r3, r2
 8001df0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001df4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	0c5b      	lsrs	r3, r3, #17
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e0e:	4413      	add	r3, r2
 8001e10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e1a:	fb02 f203 	mul.w	r2, r2, r3
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
 8001e26:	e004      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	623b      	str	r3, [r7, #32]
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e3a:	623b      	str	r3, [r7, #32]
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc90      	pop	{r4, r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	08002078 	.word	0x08002078
 8001e50:	08002088 	.word	0x08002088
 8001e54:	40021000 	.word	0x40021000
 8001e58:	007a1200 	.word	0x007a1200
 8001e5c:	003d0900 	.word	0x003d0900

08001e60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <RCC_Delay+0x34>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <RCC_Delay+0x38>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0a5b      	lsrs	r3, r3, #9
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e7c:	bf00      	nop
  }
  while (Delay --);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	60fa      	str	r2, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f9      	bne.n	8001e7c <RCC_Delay+0x1c>
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000000 	.word	0x20000000
 8001e98:	10624dd3 	.word	0x10624dd3

08001e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d07d      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	61d3      	str	r3, [r2, #28]
 8001ed4:	4b49      	ldr	r3, [pc, #292]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d118      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef0:	4b43      	ldr	r3, [pc, #268]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a42      	ldr	r2, [pc, #264]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efc:	f7fe fbd2 	bl	80006a4 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f02:	e008      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7fe fbce 	bl	80006a4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e06d      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f22:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d02e      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d027      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f4a:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f56:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d014      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe fb9d 	bl	80006a4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7fe fb99 	bl	80006a4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e036      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ee      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4917      	ldr	r1, [pc, #92]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	490b      	ldr	r1, [pc, #44]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	4904      	ldr	r1, [pc, #16]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007000 	.word	0x40007000
 8002004:	42420440 	.word	0x42420440

08002008 <__libc_init_array>:
 8002008:	b570      	push	{r4, r5, r6, lr}
 800200a:	2500      	movs	r5, #0
 800200c:	4e0c      	ldr	r6, [pc, #48]	; (8002040 <__libc_init_array+0x38>)
 800200e:	4c0d      	ldr	r4, [pc, #52]	; (8002044 <__libc_init_array+0x3c>)
 8002010:	1ba4      	subs	r4, r4, r6
 8002012:	10a4      	asrs	r4, r4, #2
 8002014:	42a5      	cmp	r5, r4
 8002016:	d109      	bne.n	800202c <__libc_init_array+0x24>
 8002018:	f000 f822 	bl	8002060 <_init>
 800201c:	2500      	movs	r5, #0
 800201e:	4e0a      	ldr	r6, [pc, #40]	; (8002048 <__libc_init_array+0x40>)
 8002020:	4c0a      	ldr	r4, [pc, #40]	; (800204c <__libc_init_array+0x44>)
 8002022:	1ba4      	subs	r4, r4, r6
 8002024:	10a4      	asrs	r4, r4, #2
 8002026:	42a5      	cmp	r5, r4
 8002028:	d105      	bne.n	8002036 <__libc_init_array+0x2e>
 800202a:	bd70      	pop	{r4, r5, r6, pc}
 800202c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002030:	4798      	blx	r3
 8002032:	3501      	adds	r5, #1
 8002034:	e7ee      	b.n	8002014 <__libc_init_array+0xc>
 8002036:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800203a:	4798      	blx	r3
 800203c:	3501      	adds	r5, #1
 800203e:	e7f2      	b.n	8002026 <__libc_init_array+0x1e>
 8002040:	0800209c 	.word	0x0800209c
 8002044:	0800209c 	.word	0x0800209c
 8002048:	0800209c 	.word	0x0800209c
 800204c:	080020a0 	.word	0x080020a0

08002050 <memset>:
 8002050:	4603      	mov	r3, r0
 8002052:	4402      	add	r2, r0
 8002054:	4293      	cmp	r3, r2
 8002056:	d100      	bne.n	800205a <memset+0xa>
 8002058:	4770      	bx	lr
 800205a:	f803 1b01 	strb.w	r1, [r3], #1
 800205e:	e7f9      	b.n	8002054 <memset+0x4>

08002060 <_init>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	bf00      	nop
 8002064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002066:	bc08      	pop	{r3}
 8002068:	469e      	mov	lr, r3
 800206a:	4770      	bx	lr

0800206c <_fini>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr
