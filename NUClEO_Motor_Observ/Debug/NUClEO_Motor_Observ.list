
NUClEO_Motor_Observ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e90  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf0  08007fa0  08007fa0  00017fa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b90  08008b90  00020c1c  2**0
                  CONTENTS
  4 .ARM          00000000  08008b90  08008b90  00020c1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b90  08008b90  00020c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b94  08008b94  00018b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c1c  20000000  08008b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000c1c  080097b4  00020c1c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e84  080097b4  00020e84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020c1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cff  00000000  00000000  00020c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a35  00000000  00000000  00032944  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00035380  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f40  00000000  00000000  00036408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ab9  00000000  00000000  00037348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dad2  00000000  00000000  0004de01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007582c  00000000  00000000  0005b8d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d10ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c4  00000000  00000000  000d117c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000c1c 	.word	0x20000c1c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007f88 	.word	0x08007f88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000c20 	.word	0x20000c20
 800014c:	08007f88 	.word	0x08007f88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a2c      	ldr	r2, [pc, #176]	; (80010fc <MX_GPIO_Init+0xcc>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <MX_GPIO_Init+0xcc>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a26      	ldr	r2, [pc, #152]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <MX_GPIO_Init+0xcc>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a20      	ldr	r2, [pc, #128]	; (80010fc <MX_GPIO_Init+0xcc>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_GPIO_Init+0xcc>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_GPIO_Init+0xcc>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2120      	movs	r1, #32
 80010a8:	4815      	ldr	r0, [pc, #84]	; (8001100 <MX_GPIO_Init+0xd0>)
 80010aa:	f001 fedf 	bl	8002e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_GPIO_Init+0xd4>)
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4619      	mov	r1, r3
 80010c2:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_GPIO_Init+0xd8>)
 80010c4:	f001 fd78 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c8:	2320      	movs	r3, #32
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <MX_GPIO_Init+0xd0>)
 80010e0:	f001 fd6a 	bl	8002bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2028      	movs	r0, #40	; 0x28
 80010ea:	f001 fcb8 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ee:	2028      	movs	r0, #40	; 0x28
 80010f0:	f001 fcd1 	bl	8002a96 <HAL_NVIC_EnableIRQ>

}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010800 	.word	0x40010800
 8001104:	10110000 	.word	0x10110000
 8001108:	40011000 	.word	0x40011000

0800110c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_I2C2_Init+0x50>)
 8001112:	4a13      	ldr	r2, [pc, #76]	; (8001160 <MX_I2C2_Init+0x54>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_I2C2_Init+0x50>)
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_I2C2_Init+0x58>)
 800111a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_I2C2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_I2C2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_I2C2_Init+0x50>)
 800112a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_I2C2_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_I2C2_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_I2C2_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_I2C2_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_I2C2_Init+0x50>)
 800114a:	f001 fec9 	bl	8002ee0 <HAL_I2C_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001154:	f000 f9d8 	bl	8001508 <Error_Handler>
  }

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000d1c 	.word	0x20000d1c
 8001160:	40005800 	.word	0x40005800
 8001164:	000186a0 	.word	0x000186a0

08001168 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a16      	ldr	r2, [pc, #88]	; (80011dc <HAL_I2C_MspInit+0x74>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d124      	bne.n	80011d2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a6:	2312      	movs	r3, #18
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <HAL_I2C_MspInit+0x7c>)
 80011b6:	f001 fcff 	bl	8002bb8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40005800 	.word	0x40005800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010c00 	.word	0x40010c00

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ec:	f001 fadc 	bl	80027a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f0:	f000 f813 	bl	800121a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f4:	f7ff ff1c 	bl	8001030 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011f8:	f000 fbb6 	bl	8001968 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80011fc:	f7ff ff86 	bl	800110c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001200:	f000 fb88 	bl	8001914 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001204:	f000 fad2 	bl	80017ac <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001208:	f000 fbd8 	bl	80019bc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  System_Init();
 800120c:	f000 f846 	bl	800129c <System_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 OledDisplay();
 8001210:	f000 f89c 	bl	800134c <OledDisplay>
	 Tcp_DataAccept();
 8001214:	f001 fa72 	bl	80026fc <Tcp_DataAccept>
	 OledDisplay();
 8001218:	e7fa      	b.n	8001210 <main+0x28>

0800121a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b090      	sub	sp, #64	; 0x40
 800121e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	2228      	movs	r2, #40	; 0x28
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f004 f961 	bl	80054f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001244:	2310      	movs	r3, #16
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800124c:	2300      	movs	r3, #0
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001250:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fa72 	bl	8003744 <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001266:	f000 f94f 	bl	8001508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	230f      	movs	r3, #15
 800126c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	2302      	movs	r3, #2
 8001270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2102      	movs	r1, #2
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fcdd 	bl	8003c44 <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001290:	f000 f93a 	bl	8001508 <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3740      	adds	r7, #64	; 0x40
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <System_Init>:

/* USER CODE BEGIN 4 */
void System_Init(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af02      	add	r7, sp, #8

	/*Oled init*/
	OLED_Init();
 80012a2:	f001 f85f 	bl	8002364 <OLED_Init>
	OLED_DrawBMP(0, 0, 128, 8, BMP2);
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <System_Init+0x98>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2308      	movs	r3, #8
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	2100      	movs	r1, #0
 80012b0:	2000      	movs	r0, #0
 80012b2:	f001 f80f 	bl	80022d4 <OLED_DrawBMP>
	OLED_ShowCHinese(10, 2, 21);
 80012b6:	2215      	movs	r2, #21
 80012b8:	2102      	movs	r1, #2
 80012ba:	200a      	movs	r0, #10
 80012bc:	f000 ffba 	bl	8002234 <OLED_ShowCHinese>
	OLED_ShowCHinese(30, 2, 22);
 80012c0:	2216      	movs	r2, #22
 80012c2:	2102      	movs	r1, #2
 80012c4:	201e      	movs	r0, #30
 80012c6:	f000 ffb5 	bl	8002234 <OLED_ShowCHinese>
	OLED_ShowChar(50, 2, ':', 16);
 80012ca:	2310      	movs	r3, #16
 80012cc:	223a      	movs	r2, #58	; 0x3a
 80012ce:	2102      	movs	r1, #2
 80012d0:	2032      	movs	r0, #50	; 0x32
 80012d2:	f000 fe53 	bl	8001f7c <OLED_ShowChar>
	OLED_ShowCHinese(10, 4, 23);
 80012d6:	2217      	movs	r2, #23
 80012d8:	2104      	movs	r1, #4
 80012da:	200a      	movs	r0, #10
 80012dc:	f000 ffaa 	bl	8002234 <OLED_ShowCHinese>
	OLED_ShowCHinese(30, 4, 24);
 80012e0:	2218      	movs	r2, #24
 80012e2:	2104      	movs	r1, #4
 80012e4:	201e      	movs	r0, #30
 80012e6:	f000 ffa5 	bl	8002234 <OLED_ShowCHinese>
	OLED_ShowChar(50, 4, ':', 16);
 80012ea:	2310      	movs	r3, #16
 80012ec:	223a      	movs	r2, #58	; 0x3a
 80012ee:	2104      	movs	r1, #4
 80012f0:	2032      	movs	r0, #50	; 0x32
 80012f2:	f000 fe43 	bl	8001f7c <OLED_ShowChar>

	/*Wifi init*/
	Server_Init();
 80012f6:	f001 f8ab 	bl	8002450 <Server_Init>
	HAL_Delay(500);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f001 fab5 	bl	800286c <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 8001302:	2201      	movs	r2, #1
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <System_Init+0x9c>)
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <System_Init+0xa0>)
 8001308:	f003 fd21 	bl	8004d4e <HAL_UART_Receive_IT>

	/*input cap Init*/
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800130c:	2100      	movs	r1, #0
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <System_Init+0xa4>)
 8001310:	f002 fe94 	bl	800403c <HAL_TIM_IC_Start_IT>
	__HAL_TIM_ENABLE_IT(&htim2,TIM_IT_UPDATE);
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <System_Init+0xa4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <System_Init+0xa4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	60da      	str	r2, [r3, #12]


	/*distance init*/
	HAL_UART_Receive_IT(&huart3,&Uart3_Rx_Char,1);
 8001324:	2201      	movs	r2, #1
 8001326:	4907      	ldr	r1, [pc, #28]	; (8001344 <System_Init+0xa8>)
 8001328:	4807      	ldr	r0, [pc, #28]	; (8001348 <System_Init+0xac>)
 800132a:	f003 fd10 	bl	8004d4e <HAL_UART_Receive_IT>
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000e76 	.word	0x20000e76
 800133c:	20000df0 	.word	0x20000df0
 8001340:	20000d70 	.word	0x20000d70
 8001344:	20000e77 	.word	0x20000e77
 8001348:	20000db0 	.word	0x20000db0

0800134c <OledDisplay>:

void OledDisplay(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	OLED_ShowFlort(60, 2, (float)2000 / 30 / Cycle, 16);
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <OledDisplay+0x50>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fc4d 	bl	8000bf4 <__aeabi_ui2f>
 800135a:	4603      	mov	r3, r0
 800135c:	4619      	mov	r1, r3
 800135e:	4810      	ldr	r0, [pc, #64]	; (80013a0 <OledDisplay+0x54>)
 8001360:	f7ff fd54 	bl	8000e0c <__aeabi_fdiv>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	2310      	movs	r3, #16
 800136a:	2102      	movs	r1, #2
 800136c:	203c      	movs	r0, #60	; 0x3c
 800136e:	f000 fe83 	bl	8002078 <OLED_ShowFlort>
	OLED_ShowFlort(60, 4, (float)(Distance - 40) / 10, 16);
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <OledDisplay+0x58>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	3b28      	subs	r3, #40	; 0x28
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fc3f 	bl	8000bfc <__aeabi_i2f>
 800137e:	4603      	mov	r3, r0
 8001380:	4909      	ldr	r1, [pc, #36]	; (80013a8 <OledDisplay+0x5c>)
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fd42 	bl	8000e0c <__aeabi_fdiv>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	2310      	movs	r3, #16
 800138e:	2104      	movs	r1, #4
 8001390:	203c      	movs	r0, #60	; 0x3c
 8001392:	f000 fe71 	bl	8002078 <OLED_ShowFlort>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000c40 	.word	0x20000c40
 80013a0:	42855555 	.word	0x42855555
 80013a4:	20000e74 	.word	0x20000e74
 80013a8:	41200000 	.word	0x41200000

080013ac <Tcp_DataDeal>:

void Tcp_DataDeal(void) {
 80013ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ae:	b091      	sub	sp, #68	; 0x44
 80013b0:	af02      	add	r7, sp, #8

	char Str[50] = {0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2232      	movs	r2, #50	; 0x32
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 f899 	bl	80054f0 <memset>
	if(Strcmp(Wifi_Command_Buffer, (uint8_t *)"Cycle\r")) {
 80013be:	4945      	ldr	r1, [pc, #276]	; (80014d4 <Tcp_DataDeal+0x128>)
 80013c0:	4845      	ldr	r0, [pc, #276]	; (80014d8 <Tcp_DataDeal+0x12c>)
 80013c2:	f001 f8d1 	bl	8002568 <Strcmp>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00c      	beq.n	80013e6 <Tcp_DataDeal+0x3a>
		sprintf(Str, "Cycle:%d", (int)Cycle);
 80013cc:	4b43      	ldr	r3, [pc, #268]	; (80014dc <Tcp_DataDeal+0x130>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4942      	ldr	r1, [pc, #264]	; (80014e0 <Tcp_DataDeal+0x134>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fd5e 	bl	8005e98 <siprintf>
		Server_SentTo_Client((uint8_t *)Str);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 f866 	bl	80024b0 <Server_SentTo_Client>
	} else {
		sprintf(Str, "Speed: %f r/s\r\nDistance: %f cm", (float)2000 / 30 / Cycle, (float)(Distance - 40) / 10);
		Server_SentTo_Client((uint8_t *)Str);
	}

}
 80013e4:	e071      	b.n	80014ca <Tcp_DataDeal+0x11e>
	} else if(Strcmp(Wifi_Command_Buffer, (uint8_t *)"Distance\r")) {
 80013e6:	493f      	ldr	r1, [pc, #252]	; (80014e4 <Tcp_DataDeal+0x138>)
 80013e8:	483b      	ldr	r0, [pc, #236]	; (80014d8 <Tcp_DataDeal+0x12c>)
 80013ea:	f001 f8bd 	bl	8002568 <Strcmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d01b      	beq.n	800142c <Tcp_DataDeal+0x80>
		sprintf(Str, "Distance: %f cm", (float)(Distance - 40) / 10);
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <Tcp_DataDeal+0x13c>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	3b28      	subs	r3, #40	; 0x28
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fbfe 	bl	8000bfc <__aeabi_i2f>
 8001400:	4603      	mov	r3, r0
 8001402:	493a      	ldr	r1, [pc, #232]	; (80014ec <Tcp_DataDeal+0x140>)
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fd01 	bl	8000e0c <__aeabi_fdiv>
 800140a:	4603      	mov	r3, r0
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f80b 	bl	8000428 <__aeabi_f2d>
 8001412:	4603      	mov	r3, r0
 8001414:	460c      	mov	r4, r1
 8001416:	1d38      	adds	r0, r7, #4
 8001418:	461a      	mov	r2, r3
 800141a:	4623      	mov	r3, r4
 800141c:	4934      	ldr	r1, [pc, #208]	; (80014f0 <Tcp_DataDeal+0x144>)
 800141e:	f004 fd3b 	bl	8005e98 <siprintf>
		Server_SentTo_Client((uint8_t *)Str);
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4618      	mov	r0, r3
 8001426:	f001 f843 	bl	80024b0 <Server_SentTo_Client>
}
 800142a:	e04e      	b.n	80014ca <Tcp_DataDeal+0x11e>
	} else if(Strcmp(Wifi_Command_Buffer, (uint8_t *)"Speed\r")) {
 800142c:	4931      	ldr	r1, [pc, #196]	; (80014f4 <Tcp_DataDeal+0x148>)
 800142e:	482a      	ldr	r0, [pc, #168]	; (80014d8 <Tcp_DataDeal+0x12c>)
 8001430:	f001 f89a 	bl	8002568 <Strcmp>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d01a      	beq.n	8001470 <Tcp_DataDeal+0xc4>
		sprintf(Str, "Speed: %f r/s", (float)2000 / Cycle);
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <Tcp_DataDeal+0x130>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fbd8 	bl	8000bf4 <__aeabi_ui2f>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	482b      	ldr	r0, [pc, #172]	; (80014f8 <Tcp_DataDeal+0x14c>)
 800144a:	f7ff fcdf 	bl	8000e0c <__aeabi_fdiv>
 800144e:	4603      	mov	r3, r0
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ffe9 	bl	8000428 <__aeabi_f2d>
 8001456:	4603      	mov	r3, r0
 8001458:	460c      	mov	r4, r1
 800145a:	1d38      	adds	r0, r7, #4
 800145c:	461a      	mov	r2, r3
 800145e:	4623      	mov	r3, r4
 8001460:	4926      	ldr	r1, [pc, #152]	; (80014fc <Tcp_DataDeal+0x150>)
 8001462:	f004 fd19 	bl	8005e98 <siprintf>
		Server_SentTo_Client((uint8_t *)Str);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4618      	mov	r0, r3
 800146a:	f001 f821 	bl	80024b0 <Server_SentTo_Client>
}
 800146e:	e02c      	b.n	80014ca <Tcp_DataDeal+0x11e>
		sprintf(Str, "Speed: %f r/s\r\nDistance: %f cm", (float)2000 / 30 / Cycle, (float)(Distance - 40) / 10);
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <Tcp_DataDeal+0x130>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fbbd 	bl	8000bf4 <__aeabi_ui2f>
 800147a:	4603      	mov	r3, r0
 800147c:	4619      	mov	r1, r3
 800147e:	4820      	ldr	r0, [pc, #128]	; (8001500 <Tcp_DataDeal+0x154>)
 8001480:	f7ff fcc4 	bl	8000e0c <__aeabi_fdiv>
 8001484:	4603      	mov	r3, r0
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe ffce 	bl	8000428 <__aeabi_f2d>
 800148c:	4605      	mov	r5, r0
 800148e:	460e      	mov	r6, r1
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <Tcp_DataDeal+0x13c>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	3b28      	subs	r3, #40	; 0x28
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fbb0 	bl	8000bfc <__aeabi_i2f>
 800149c:	4603      	mov	r3, r0
 800149e:	4913      	ldr	r1, [pc, #76]	; (80014ec <Tcp_DataDeal+0x140>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fcb3 	bl	8000e0c <__aeabi_fdiv>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7fe ffbd 	bl	8000428 <__aeabi_f2d>
 80014ae:	4603      	mov	r3, r0
 80014b0:	460c      	mov	r4, r1
 80014b2:	1d38      	adds	r0, r7, #4
 80014b4:	e9cd 3400 	strd	r3, r4, [sp]
 80014b8:	462a      	mov	r2, r5
 80014ba:	4633      	mov	r3, r6
 80014bc:	4911      	ldr	r1, [pc, #68]	; (8001504 <Tcp_DataDeal+0x158>)
 80014be:	f004 fceb 	bl	8005e98 <siprintf>
		Server_SentTo_Client((uint8_t *)Str);
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fff3 	bl	80024b0 <Server_SentTo_Client>
}
 80014ca:	bf00      	nop
 80014cc:	373c      	adds	r7, #60	; 0x3c
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	08007fa0 	.word	0x08007fa0
 80014d8:	20000cac 	.word	0x20000cac
 80014dc:	20000c40 	.word	0x20000c40
 80014e0:	08007fa8 	.word	0x08007fa8
 80014e4:	08007fb4 	.word	0x08007fb4
 80014e8:	20000e74 	.word	0x20000e74
 80014ec:	41200000 	.word	0x41200000
 80014f0:	08007fc0 	.word	0x08007fc0
 80014f4:	08007fd0 	.word	0x08007fd0
 80014f8:	44fa0000 	.word	0x44fa0000
 80014fc:	08007fd8 	.word	0x08007fd8
 8001500:	42855555 	.word	0x42855555
 8001504:	08007fe8 	.word	0x08007fe8

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_MspInit+0x5c>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <HAL_MspInit+0x5c>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_MspInit+0x5c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x5c>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x5c>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x5c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_MspInit+0x60>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_MspInit+0x60>)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <HardFault_Handler+0x4>

0800158a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <MemManage_Handler+0x4>

08001590 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <BusFault_Handler+0x4>

08001596 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <UsageFault_Handler+0x4>

0800159c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c4:	f001 f936 	bl	8002834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM2_IRQHandler+0x10>)
 80015d2:	f002 fd9b 	bl	800410c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000d70 	.word	0x20000d70

080015e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <USART1_IRQHandler+0x10>)
 80015e6:	f003 fc07 	bl	8004df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000df0 	.word	0x20000df0

080015f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <USART3_IRQHandler+0x10>)
 80015fa:	f003 fbfd 	bl	8004df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000db0 	.word	0x20000db0

08001608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800160c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001610:	f001 fc44 	bl	8002e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e00a      	b.n	8001640 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800162a:	f3af 8000 	nop.w
 800162e:	4601      	mov	r1, r0
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	b2ca      	uxtb	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbf0      	blt.n	800162a <_read+0x12>
	}

return len;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	e009      	b.n	8001678 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 faa7 	bl	8001bc0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf1      	blt.n	8001664 <_write+0x12>
	}
	return len;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_close>:

int _close(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	return -1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b0:	605a      	str	r2, [r3, #4]
	return 0;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <_isatty>:

int _isatty(int file)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	return 1;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
	return 0;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
	...

080016ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x50>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x16>
		heap_end = &end;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <_sbrk+0x50>)
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <_sbrk+0x54>)
 8001700:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <_sbrk+0x50>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <_sbrk+0x50>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	466a      	mov	r2, sp
 8001712:	4293      	cmp	r3, r2
 8001714:	d907      	bls.n	8001726 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001716:	f003 fec1 	bl	800549c <__errno>
 800171a:	4602      	mov	r2, r0
 800171c:	230c      	movs	r3, #12
 800171e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	e006      	b.n	8001734 <_sbrk+0x48>
	}

	heap_end += incr;
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <_sbrk+0x50>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a03      	ldr	r2, [pc, #12]	; (800173c <_sbrk+0x50>)
 8001730:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000c38 	.word	0x20000c38
 8001740:	20000e88 	.word	0x20000e88

08001744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <SystemInit+0x5c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <SystemInit+0x5c>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <SystemInit+0x5c>)
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4911      	ldr	r1, [pc, #68]	; (80017a0 <SystemInit+0x5c>)
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <SystemInit+0x60>)
 800175c:	4013      	ands	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <SystemInit+0x5c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <SystemInit+0x5c>)
 8001766:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <SystemInit+0x5c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SystemInit+0x5c>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <SystemInit+0x5c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <SystemInit+0x5c>)
 8001782:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001786:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SystemInit+0x5c>)
 800178a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800178e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SystemInit+0x64>)
 8001792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001796:	609a      	str	r2, [r3, #8]
#endif 
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000
 80017a4:	f8ff0000 	.word	0xf8ff0000
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017ca:	463b      	mov	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <MX_TIM2_Init+0xdc>)
 80017d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <MX_TIM2_Init+0xdc>)
 80017e0:	223f      	movs	r2, #63	; 0x3f
 80017e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <MX_TIM2_Init+0xdc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 80017ea:	4b27      	ldr	r3, [pc, #156]	; (8001888 <MX_TIM2_Init+0xdc>)
 80017ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <MX_TIM2_Init+0xdc>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <MX_TIM2_Init+0xdc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017fe:	4822      	ldr	r0, [pc, #136]	; (8001888 <MX_TIM2_Init+0xdc>)
 8001800:	f002 fbbc 	bl	8003f7c <HAL_TIM_Base_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800180a:	f7ff fe7d 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001812:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001814:	f107 0318 	add.w	r3, r7, #24
 8001818:	4619      	mov	r1, r3
 800181a:	481b      	ldr	r0, [pc, #108]	; (8001888 <MX_TIM2_Init+0xdc>)
 800181c:	f002 fe1a 	bl	8004454 <HAL_TIM_ConfigClockSource>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001826:	f7ff fe6f 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800182a:	4817      	ldr	r0, [pc, #92]	; (8001888 <MX_TIM2_Init+0xdc>)
 800182c:	f002 fbd1 	bl	8003fd2 <HAL_TIM_IC_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001836:	f7ff fe67 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800183a:	2320      	movs	r3, #32
 800183c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4619      	mov	r1, r3
 8001848:	480f      	ldr	r0, [pc, #60]	; (8001888 <MX_TIM2_Init+0xdc>)
 800184a:	f003 f944 	bl	8004ad6 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001854:	f7ff fe58 	bl	8001508 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001858:	2300      	movs	r3, #0
 800185a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800185c:	2301      	movs	r3, #1
 800185e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 3;
 8001864:	2303      	movs	r3, #3
 8001866:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001868:	463b      	mov	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <MX_TIM2_Init+0xdc>)
 8001870:	f002 fd54 	bl	800431c <HAL_TIM_IC_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800187a:	f7ff fe45 	bl	8001508 <Error_Handler>
  }

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000d70 	.word	0x20000d70

0800188c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0310 	add.w	r3, r7, #16
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018aa:	d12b      	bne.n	8001904 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_TIM_Base_MspInit+0x80>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	4a16      	ldr	r2, [pc, #88]	; (800190c <HAL_TIM_Base_MspInit+0x80>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	61d3      	str	r3, [r2, #28]
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_TIM_Base_MspInit+0x80>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_TIM_Base_MspInit+0x80>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_TIM_Base_MspInit+0x80>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_TIM_Base_MspInit+0x80>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018dc:	2301      	movs	r3, #1
 80018de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4619      	mov	r1, r3
 80018ee:	4808      	ldr	r0, [pc, #32]	; (8001910 <HAL_TIM_Base_MspInit+0x84>)
 80018f0:	f001 f962 	bl	8002bb8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	201c      	movs	r0, #28
 80018fa:	f001 f8b0 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018fe:	201c      	movs	r0, #28
 8001900:	f001 f8c9 	bl	8002a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	40010800 	.word	0x40010800

08001914 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <MX_USART1_UART_Init+0x50>)
 800191c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800194c:	f003 f919 	bl	8004b82 <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001956:	f7ff fdd7 	bl	8001508 <Error_Handler>
  }

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000df0 	.word	0x20000df0
 8001964:	40013800 	.word	0x40013800

08001968 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_USART2_UART_Init+0x4c>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <MX_USART2_UART_Init+0x50>)
 8001970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_USART2_UART_Init+0x4c>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_USART2_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_USART2_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_USART2_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_USART2_UART_Init+0x4c>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MX_USART2_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_USART2_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_USART2_UART_Init+0x4c>)
 80019a0:	f003 f8ef 	bl	8004b82 <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019aa:	f7ff fdad 	bl	8001508 <Error_Handler>
  }

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000e30 	.word	0x20000e30
 80019b8:	40004400 	.word	0x40004400

080019bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <MX_USART3_UART_Init+0x50>)
 80019c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019e2:	220c      	movs	r2, #12
 80019e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_USART3_UART_Init+0x4c>)
 80019f4:	f003 f8c5 	bl	8004b82 <HAL_UART_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019fe:	f7ff fd83 	bl	8001508 <Error_Handler>
  }

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000db0 	.word	0x20000db0
 8001a0c:	40004800 	.word	0x40004800

08001a10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ba4 <HAL_UART_MspInit+0x194>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d13a      	bne.n	8001aa6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a30:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a5c      	ldr	r2, [pc, #368]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	4b57      	ldr	r3, [pc, #348]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a56      	ldr	r2, [pc, #344]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b54      	ldr	r3, [pc, #336]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a72:	4619      	mov	r1, r3
 8001a74:	484d      	ldr	r0, [pc, #308]	; (8001bac <HAL_UART_MspInit+0x19c>)
 8001a76:	f001 f89f 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4847      	ldr	r0, [pc, #284]	; (8001bac <HAL_UART_MspInit+0x19c>)
 8001a90:	f001 f892 	bl	8002bb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2025      	movs	r0, #37	; 0x25
 8001a9a:	f000 ffe0 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a9e:	2025      	movs	r0, #37	; 0x25
 8001aa0:	f000 fff9 	bl	8002a96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001aa4:	e07a      	b.n	8001b9c <HAL_UART_MspInit+0x18c>
  else if(uartHandle->Instance==USART2)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a41      	ldr	r2, [pc, #260]	; (8001bb0 <HAL_UART_MspInit+0x1a0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d124      	bne.n	8001afa <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aba:	61d3      	str	r3, [r2, #28]
 8001abc:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a36      	ldr	r2, [pc, #216]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af0:	4619      	mov	r1, r3
 8001af2:	482e      	ldr	r0, [pc, #184]	; (8001bac <HAL_UART_MspInit+0x19c>)
 8001af4:	f001 f860 	bl	8002bb8 <HAL_GPIO_Init>
}
 8001af8:	e050      	b.n	8001b9c <HAL_UART_MspInit+0x18c>
  else if(uartHandle->Instance==USART3)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <HAL_UART_MspInit+0x1a4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d14b      	bne.n	8001b9c <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0e:	61d3      	str	r3, [r2, #28]
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <HAL_UART_MspInit+0x198>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b46:	4619      	mov	r1, r3
 8001b48:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <HAL_UART_MspInit+0x1a8>)
 8001b4a:	f001 f835 	bl	8002bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4815      	ldr	r0, [pc, #84]	; (8001bb8 <HAL_UART_MspInit+0x1a8>)
 8001b64:	f001 f828 	bl	8002bb8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_UART_MspInit+0x1ac>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b70:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
 8001b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b78:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b80:	f043 0310 	orr.w	r3, r3, #16
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
 8001b86:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <HAL_UART_MspInit+0x1ac>)
 8001b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8a:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2027      	movs	r0, #39	; 0x27
 8001b92:	f000 ff64 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b96:	2027      	movs	r0, #39	; 0x27
 8001b98:	f000 ff7d 	bl	8002a96 <HAL_NVIC_EnableIRQ>
}
 8001b9c:	bf00      	nop
 8001b9e:	3738      	adds	r7, #56	; 0x38
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010800 	.word	0x40010800
 8001bb0:	40004400 	.word	0x40004400
 8001bb4:	40004800 	.word	0x40004800
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001bc8:	1d39      	adds	r1, r7, #4
 8001bca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <__io_putchar+0x20>)
 8001bd2:	f003 f823 	bl	8004c1c <HAL_UART_Transmit>
  return ch;
 8001bd6:	687b      	ldr	r3, [r7, #4]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000df0 	.word	0x20000df0

08001be4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001be4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001be6:	e003      	b.n	8001bf0 <LoopCopyDataInit>

08001be8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bee:	3104      	adds	r1, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bf0:	480a      	ldr	r0, [pc, #40]	; (8001c1c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bf4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bf6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bf8:	d3f6      	bcc.n	8001be8 <CopyDataInit>
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bfc:	e002      	b.n	8001c04 <LoopFillZerobss>

08001bfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c00:	f842 3b04 	str.w	r3, [r2], #4

08001c04 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c08:	d3f9      	bcc.n	8001bfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c0a:	f7ff fd9b 	bl	8001744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f003 fc4b 	bl	80054a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c12:	f7ff fae9 	bl	80011e8 <main>
  bx lr
 8001c16:	4770      	bx	lr
  ldr r3, =_sidata
 8001c18:	08008b98 	.word	0x08008b98
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c20:	20000c1c 	.word	0x20000c1c
  ldr r2, =_sbss
 8001c24:	20000c1c 	.word	0x20000c1c
  ldr r3, = _ebss
 8001c28:	20000e84 	.word	0x20000e84

08001c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC1_2_IRQHandler>
	...

08001c30 <HAL_TIM_PeriodElapsedCallback>:

uint32_t Cycle = 0, Width = 0;

// 中断服务函数里面会自动调用这个回调函数  这个是定时器更新中断中处理的函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)	// 判断是定时器5发生中断
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c40:	d141      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x96>
  {
    if ((TIM5CH1_CAPTURE_STA & 0x80) == 0) // 还未成功捕获
 8001c42:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	db3c      	blt.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x96>
    {
     // if (TIM5CH1_CAPTURE_STA & 0x40)		   // 捕获到高电平
      //{
        if ( (TIM5CH1_CAPTURE_STA & 0x3f) == 0x3f )		// 如果高电平太长  做溢出处理
 8001c4c:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c54:	2b3f      	cmp	r3, #63	; 0x3f
 8001c56:	d130      	bne.n	8001cba <HAL_TIM_PeriodElapsedCallback+0x8a>
        {
        	Cycle = 0x3f;
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c5a:	223f      	movs	r2, #63	; 0x3f
 8001c5c:	601a      	str	r2, [r3, #0]
        	Cycle *= 0xffff;				// Total Overflow Time(总的溢出时间)
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4613      	mov	r3, r2
 8001c64:	041b      	lsls	r3, r3, #16
 8001c66:	1a9b      	subs	r3, r3, r2
 8001c68:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c6a:	6013      	str	r3, [r2, #0]
        	TIM5CH1_CAPTURE_STA = 0;
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
        	DownEdgeFlag = 0;
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
        	__HAL_TIM_DISABLE(&htim2);
 8001c78:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a1a      	ldr	r2, [r3, #32]
 8001c7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10f      	bne.n	8001ca8 <HAL_TIM_PeriodElapsedCallback+0x78>
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6a1a      	ldr	r2, [r3, #32]
 8001c8e:	f240 4344 	movw	r3, #1092	; 0x444
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d107      	bne.n	8001ca8 <HAL_TIM_PeriodElapsedCallback+0x78>
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
        	__HAL_TIM_ENABLE(&htim2);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
          TIM5CH1_CAPTURE_STA++;		// 若没有溢出, 就只让TIM5CH1_CAPTURE_STA自加就ok
        }
      //}
    }
  }
}
 8001cb8:	e005      	b.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x96>
          TIM5CH1_CAPTURE_STA++;		// 若没有溢出, 就只让TIM5CH1_CAPTURE_STA自加就ok
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001cc4:	701a      	strb	r2, [r3, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000c3c 	.word	0x20000c3c
 8001cd4:	20000c40 	.word	0x20000c40
 8001cd8:	20000c3d 	.word	0x20000c3d
 8001cdc:	20000d70 	.word	0x20000d70

08001ce0 <HAL_TIM_IC_CaptureCallback>:

// 定时器输入捕获中断处理回调函数，该函数在 HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) 中会被调用


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ( (TIM5CH1_CAPTURE_STA & 0x80) == 0 )	// 还未成功捕获
 8001ce8:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	b25b      	sxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f2c0 80a6 	blt.w	8001e40 <HAL_TIM_IC_CaptureCallback+0x160>
  {
    if (TIM5CH1_CAPTURE_STA & 0x40)			// 捕获到一个下降沿
 8001cf4:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d034      	beq.n	8001d6a <HAL_TIM_IC_CaptureCallback+0x8a>
    {
      //TIM5CH1_CAPTURE_STA |= 0x80;		// 标记成功捕获到一次高电平脉宽
      TIM5CH1_CAPTURE_VAL = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);	// 获取当前的捕获值. 即CCRx2
 8001d00:	2100      	movs	r1, #0
 8001d02:	4852      	ldr	r0, [pc, #328]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d04:	f002 fc5e 	bl	80045c4 <HAL_TIM_ReadCapturedValue>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b51      	ldr	r3, [pc, #324]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001d0c:	601a      	str	r2, [r3, #0]

     // if (TIM5CH1_CAPTURE_STA & 0x80)   // 如果捕获完成
      	   // {
      Width = TIM5CH1_CAPTURE_STA & 0x3f;
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d16:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001d18:	6013      	str	r3, [r2, #0]
      Width *= 0xffff;				// Total Overflow Time(总的溢出时间)
 8001d1a:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001d26:	6013      	str	r3, [r2, #0]
      Width += TIM5CH1_CAPTURE_VAL + 3;    // Get Total High Level Time(获取总的高电平时长)
 8001d28:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	3303      	adds	r3, #3
 8001d34:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001d36:	6013      	str	r3, [r2, #0]
      	      //  printf("HIGH: %f ms\r\n", (float)temp/1000); // Print Total High Level Time(打印总的高电平时长)
      //TIM5CH1_CAPTURE_STA = 0;			    // Clear Capture State , Open The Next Capture(清除捕获状态，打开下一次捕获)
      	   //}
      TIM5CH1_CAPTURE_STA &= 0xbf;
 8001d38:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001d44:	701a      	strb	r2, [r3, #0]
      DownEdgeFlag = 1;
 8001d46:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]


      TIM_RESET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1);						// 清除原来的设置
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a1a      	ldr	r2, [r3, #32]
 8001d52:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 020a 	bic.w	r2, r2, #10
 8001d5a:	621a      	str	r2, [r3, #32]
      TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);	// 配置TIM5通道1上升沿捕获
 8001d5c:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a12      	ldr	r2, [r2, #32]
 8001d66:	621a      	str	r2, [r3, #32]
    	}


    }
  }
}
 8001d68:	e06a      	b.n	8001e40 <HAL_TIM_IC_CaptureCallback+0x160>
    	if(DownEdgeFlag == 1) {
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d125      	bne.n	8001dbe <HAL_TIM_IC_CaptureCallback+0xde>
    		TIM5CH1_CAPTURE_VAL = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001d72:	2100      	movs	r1, #0
 8001d74:	4835      	ldr	r0, [pc, #212]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d76:	f002 fc25 	bl	80045c4 <HAL_TIM_ReadCapturedValue>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001d7e:	601a      	str	r2, [r3, #0]
    		Cycle = TIM5CH1_CAPTURE_STA & 0x3f;
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d88:	4a34      	ldr	r2, [pc, #208]	; (8001e5c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001d8a:	6013      	str	r3, [r2, #0]
    		Cycle *= 0xffff;				// Total Overflow Time(总的溢出时间)
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4613      	mov	r3, r2
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	4a31      	ldr	r2, [pc, #196]	; (8001e5c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001d98:	6013      	str	r3, [r2, #0]
    		Cycle += TIM5CH1_CAPTURE_VAL + 3;    // Get Total High Level Time(获取总的高电平时长)
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	3303      	adds	r3, #3
 8001da6:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001da8:	6013      	str	r3, [r2, #0]
    		TIM5CH1_CAPTURE_STA = 0;
 8001daa:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
    		TIM5CH1_CAPTURE_VAL = 0;
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
    		DownEdgeFlag = 0;
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
}
 8001dbc:	e040      	b.n	8001e40 <HAL_TIM_IC_CaptureCallback+0x160>
      TIM5CH1_CAPTURE_STA = 0;	// 清空自定义的状态寄存器
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
      TIM5CH1_CAPTURE_VAL = 0;	// 清空捕获值
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x170>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
      TIM5CH1_CAPTURE_STA |= 0x40;// 标记捕获到了上升沿
 8001dca:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001dd6:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_DISABLE(&htim2);	//关闭定时器5
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a1a      	ldr	r2, [r3, #32]
 8001dde:	f241 1311 	movw	r3, #4369	; 0x1111
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10f      	bne.n	8001e08 <HAL_TIM_IC_CaptureCallback+0x128>
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	f240 4344 	movw	r3, #1092	; 0x444
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IC_CaptureCallback+0x128>
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(&htim2,0);
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
      TIM_RESET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1);   //一定要先清除原来的设置！！
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a1a      	ldr	r2, [r3, #32]
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 020a 	bic.w	r2, r2, #10
 8001e1e:	621a      	str	r2, [r3, #32]
      TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_ICPOLARITY_FALLING);//定时器5通道1设置为下降沿捕获
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a1a      	ldr	r2, [r3, #32]
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0202 	orr.w	r2, r2, #2
 8001e2e:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE(&htim2);//使能定时器5
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000c3c 	.word	0x20000c3c
 8001e4c:	20000d70 	.word	0x20000d70
 8001e50:	20000e70 	.word	0x20000e70
 8001e54:	20000c44 	.word	0x20000c44
 8001e58:	20000c3d 	.word	0x20000c3d
 8001e5c:	20000c40 	.word	0x20000c40

08001e60 <Write_IIC_Cmddat>:

extern I2C_HandleTypeDef hi2c1;
extern I2C_HandleTypeDef hi2c2;

void Write_IIC_Cmddat(unsigned char IIC_Data,unsigned char cmddat)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af04      	add	r7, sp, #16
 8001e66:	4603      	mov	r3, r0
 8001e68:	460a      	mov	r2, r1
 8001e6a:	71fb      	strb	r3, [r7, #7]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef i = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
	i = HAL_I2C_Mem_Write(&hi2c2, oledaddress, cmddat, I2C_MEMADD_SIZE_8BIT, &IIC_Data, 1, 100);
 8001e74:	79bb      	ldrb	r3, [r7, #6]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2364      	movs	r3, #100	; 0x64
 8001e7a:	9302      	str	r3, [sp, #8]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	2178      	movs	r1, #120	; 0x78
 8001e88:	4805      	ldr	r0, [pc, #20]	; (8001ea0 <Write_IIC_Cmddat+0x40>)
 8001e8a:	f001 f951 	bl	8003130 <HAL_I2C_Mem_Write>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]
	i = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000d1c 	.word	0x20000d1c

08001ea4 <OLED_WR_Byte>:


void OLED_WR_Byte(unsigned char dat,unsigned char cmd)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460a      	mov	r2, r1
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71bb      	strb	r3, [r7, #6]
	if(cmd)
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <OLED_WR_Byte+0x22>
			{
		Write_IIC_Cmddat (dat, OLED_DAT_ADDRESS );
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	2140      	movs	r1, #64	; 0x40
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ffce 	bl	8001e60 <Write_IIC_Cmddat>
	else {
		Write_IIC_Cmddat (dat, OLED_CMD_ADDRESS);
		
	}
	
}
 8001ec4:	e004      	b.n	8001ed0 <OLED_WR_Byte+0x2c>
		Write_IIC_Cmddat (dat, OLED_CMD_ADDRESS);
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ffc8 	bl	8001e60 <Write_IIC_Cmddat>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <OLED_Set_Pos>:




	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	71bb      	strb	r3, [r7, #6]
 8001ee8:	79bb      	ldrb	r3, [r7, #6]
 8001eea:	3b50      	subs	r3, #80	; 0x50
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ffd7 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f043 0310 	orr.w	r3, r3, #16
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ffcd 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f),OLED_CMD); 
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ffc5 	bl	8001ea4 <OLED_WR_Byte>
}   	  
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
	unsigned char i,n;
	for(i=0;i<8;i++)  
 8001f28:	2300      	movs	r3, #0
 8001f2a:	71fb      	strb	r3, [r7, #7]
 8001f2c:	e01f      	b.n	8001f6e <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	3b50      	subs	r3, #80	; 0x50
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ffb4 	bl	8001ea4 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff ffb0 	bl	8001ea4 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 8001f44:	2100      	movs	r1, #0
 8001f46:	2010      	movs	r0, #16
 8001f48:	f7ff ffac 	bl	8001ea4 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	71bb      	strb	r3, [r7, #6]
 8001f50:	e006      	b.n	8001f60 <OLED_Clear+0x3e>
 8001f52:	2101      	movs	r1, #1
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff ffa5 	bl	8001ea4 <OLED_WR_Byte>
 8001f5a:	79bb      	ldrb	r3, [r7, #6]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	71bb      	strb	r3, [r7, #6]
 8001f60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	daf4      	bge.n	8001f52 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2b07      	cmp	r3, #7
 8001f72:	d9dc      	bls.n	8001f2e <OLED_Clear+0xc>
	} //������ʾ
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,������ʾ;1,������ʾ				 
//size:ѡ������ 16/12 
void OLED_ShowChar(unsigned char x,unsigned char y,unsigned char chr,unsigned char Char_Size)
{      	
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4604      	mov	r4, r0
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	71fb      	strb	r3, [r7, #7]
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71bb      	strb	r3, [r7, #6]
 8001f92:	460b      	mov	r3, r1
 8001f94:	717b      	strb	r3, [r7, #5]
 8001f96:	4613      	mov	r3, r2
 8001f98:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73bb      	strb	r3, [r7, #14]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 8001fa2:	797b      	ldrb	r3, [r7, #5]
 8001fa4:	3b20      	subs	r3, #32
 8001fa6:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da04      	bge.n	8001fba <OLED_ShowChar+0x3e>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71fb      	strb	r3, [r7, #7]
 8001fb4:	79bb      	ldrb	r3, [r7, #6]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 8001fba:	793b      	ldrb	r3, [r7, #4]
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d135      	bne.n	800202c <OLED_ShowChar+0xb0>
			{
			OLED_Set_Pos(x,y);	
 8001fc0:	79ba      	ldrb	r2, [r7, #6]
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff86 	bl	8001ed8 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e00c      	b.n	8001fec <OLED_ShowChar+0x70>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8001fd2:	7bbb      	ldrb	r3, [r7, #14]
 8001fd4:	011a      	lsls	r2, r3, #4
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <OLED_ShowChar+0xf4>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5f 	bl	8001ea4 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	d9ef      	bls.n	8001fd2 <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 8001ff2:	79bb      	ldrb	r3, [r7, #6]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff6b 	bl	8001ed8 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e00d      	b.n	8002024 <OLED_ShowChar+0xa8>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	011a      	lsls	r2, r3, #4
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	4413      	add	r3, r2
 8002010:	3308      	adds	r3, #8
 8002012:	4a17      	ldr	r2, [pc, #92]	; (8002070 <OLED_ShowChar+0xf4>)
 8002014:	5cd3      	ldrb	r3, [r2, r3]
 8002016:	2101      	movs	r1, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff43 	bl	8001ea4 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	3301      	adds	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b07      	cmp	r3, #7
 8002028:	d9ee      	bls.n	8002008 <OLED_ShowChar+0x8c>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 800202a:	e01c      	b.n	8002066 <OLED_ShowChar+0xea>
				OLED_Set_Pos(x,y);
 800202c:	79ba      	ldrb	r2, [r7, #6]
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff50 	bl	8001ed8 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e010      	b.n	8002060 <OLED_ShowChar+0xe4>
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 800203e:	7bba      	ldrb	r2, [r7, #14]
 8002040:	7bf9      	ldrb	r1, [r7, #15]
 8002042:	480c      	ldr	r0, [pc, #48]	; (8002074 <OLED_ShowChar+0xf8>)
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4403      	add	r3, r0
 800204e:	440b      	add	r3, r1
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2101      	movs	r1, #1
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff25 	bl	8001ea4 <OLED_WR_Byte>
				for(i=0;i<6;i++)
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	3301      	adds	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	2b05      	cmp	r3, #5
 8002064:	d9eb      	bls.n	800203e <OLED_ShowChar+0xc2>
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	bf00      	nop
 8002070:	080082e0 	.word	0x080082e0
 8002074:	080080b8 	.word	0x080080b8

08002078 <OLED_ShowFlort>:




void OLED_ShowFlort(unsigned char x,unsigned char y,float Da,unsigned char Char_Size)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	603a      	str	r2, [r7, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
 8002086:	460b      	mov	r3, r1
 8002088:	71bb      	strb	r3, [r7, #6]
 800208a:	4613      	mov	r3, r2
 800208c:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
	char chr[10]={0};
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	811a      	strh	r2, [r3, #8]


		if(Da<10)		//防止十位变化成个位小数点前移，导致小数点后两位产生一个不变的不可控制数字
 800209e:	4961      	ldr	r1, [pc, #388]	; (8002224 <OLED_ShowFlort+0x1ac>)
 80020a0:	6838      	ldr	r0, [r7, #0]
 80020a2:	f7fe ff9d 	bl	8000fe0 <__aeabi_fcmplt>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d036      	beq.n	800211a <OLED_ShowFlort+0xa2>
	{
		  sprintf(chr, "%0.3f",Da);
 80020ac:	6838      	ldr	r0, [r7, #0]
 80020ae:	f7fe f9bb 	bl	8000428 <__aeabi_f2d>
 80020b2:	4603      	mov	r3, r0
 80020b4:	460c      	mov	r4, r1
 80020b6:	f107 000c 	add.w	r0, r7, #12
 80020ba:	461a      	mov	r2, r3
 80020bc:	4623      	mov	r3, r4
 80020be:	495a      	ldr	r1, [pc, #360]	; (8002228 <OLED_ShowFlort+0x1b0>)
 80020c0:	f003 feea 	bl	8005e98 <siprintf>
			OLED_ShowChar(x,y,' ',Char_Size);
 80020c4:	797b      	ldrb	r3, [r7, #5]
 80020c6:	79b9      	ldrb	r1, [r7, #6]
 80020c8:	79f8      	ldrb	r0, [r7, #7]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f7ff ff56 	bl	8001f7c <OLED_ShowChar>
					while (chr[j]!='\0')
 80020d0:	e01a      	b.n	8002108 <OLED_ShowFlort+0x90>
			{
				OLED_ShowChar(x+8,y,chr[j],Char_Size);
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	3308      	adds	r3, #8
 80020d6:	b2d8      	uxtb	r0, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	f107 0218 	add.w	r2, r7, #24
 80020de:	4413      	add	r3, r2
 80020e0:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80020e4:	797b      	ldrb	r3, [r7, #5]
 80020e6:	79b9      	ldrb	r1, [r7, #6]
 80020e8:	f7ff ff48 	bl	8001f7c <OLED_ShowChar>
					x+=8;
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	3308      	adds	r3, #8
 80020f0:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b78      	cmp	r3, #120	; 0x78
 80020f6:	d904      	bls.n	8002102 <OLED_ShowFlort+0x8a>
 80020f8:	2300      	movs	r3, #0
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	79bb      	ldrb	r3, [r7, #6]
 80020fe:	3302      	adds	r3, #2
 8002100:	71bb      	strb	r3, [r7, #6]
					j++;
 8002102:	7dfb      	ldrb	r3, [r7, #23]
 8002104:	3301      	adds	r3, #1
 8002106:	75fb      	strb	r3, [r7, #23]
					while (chr[j]!='\0')
 8002108:	7dfb      	ldrb	r3, [r7, #23]
 800210a:	f107 0218 	add.w	r2, r7, #24
 800210e:	4413      	add	r3, r2
 8002110:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1dc      	bne.n	80020d2 <OLED_ShowFlort+0x5a>
					j++;
			}

	}

}
 8002118:	e080      	b.n	800221c <OLED_ShowFlort+0x1a4>
		if ((Da>10)&(100>Da))
 800211a:	2301      	movs	r3, #1
 800211c:	461c      	mov	r4, r3
 800211e:	4941      	ldr	r1, [pc, #260]	; (8002224 <OLED_ShowFlort+0x1ac>)
 8002120:	6838      	ldr	r0, [r7, #0]
 8002122:	f7fe ff7b 	bl	800101c <__aeabi_fcmpgt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <OLED_ShowFlort+0xb8>
 800212c:	2300      	movs	r3, #0
 800212e:	461c      	mov	r4, r3
 8002130:	b2e4      	uxtb	r4, r4
 8002132:	2301      	movs	r3, #1
 8002134:	461d      	mov	r5, r3
 8002136:	493d      	ldr	r1, [pc, #244]	; (800222c <OLED_ShowFlort+0x1b4>)
 8002138:	6838      	ldr	r0, [r7, #0]
 800213a:	f7fe ff51 	bl	8000fe0 <__aeabi_fcmplt>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <OLED_ShowFlort+0xd0>
 8002144:	2300      	movs	r3, #0
 8002146:	461d      	mov	r5, r3
 8002148:	b2eb      	uxtb	r3, r5
 800214a:	4023      	ands	r3, r4
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d02e      	beq.n	80021b0 <OLED_ShowFlort+0x138>
		sprintf(chr, "%0.3f",Da);
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f7fe f968 	bl	8000428 <__aeabi_f2d>
 8002158:	4603      	mov	r3, r0
 800215a:	460c      	mov	r4, r1
 800215c:	f107 000c 	add.w	r0, r7, #12
 8002160:	461a      	mov	r2, r3
 8002162:	4623      	mov	r3, r4
 8002164:	4930      	ldr	r1, [pc, #192]	; (8002228 <OLED_ShowFlort+0x1b0>)
 8002166:	f003 fe97 	bl	8005e98 <siprintf>
			while (chr[j]!='\0')
 800216a:	e018      	b.n	800219e <OLED_ShowFlort+0x126>
			{		OLED_ShowChar(x,y,chr[j],Char_Size);
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	f107 0218 	add.w	r2, r7, #24
 8002172:	4413      	add	r3, r2
 8002174:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002178:	797b      	ldrb	r3, [r7, #5]
 800217a:	79b9      	ldrb	r1, [r7, #6]
 800217c:	79f8      	ldrb	r0, [r7, #7]
 800217e:	f7ff fefd 	bl	8001f7c <OLED_ShowChar>
					x+=8;
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	3308      	adds	r3, #8
 8002186:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	2b78      	cmp	r3, #120	; 0x78
 800218c:	d904      	bls.n	8002198 <OLED_ShowFlort+0x120>
 800218e:	2300      	movs	r3, #0
 8002190:	71fb      	strb	r3, [r7, #7]
 8002192:	79bb      	ldrb	r3, [r7, #6]
 8002194:	3302      	adds	r3, #2
 8002196:	71bb      	strb	r3, [r7, #6]
					j++;
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	3301      	adds	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
			while (chr[j]!='\0')
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	f107 0218 	add.w	r2, r7, #24
 80021a4:	4413      	add	r3, r2
 80021a6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1de      	bne.n	800216c <OLED_ShowFlort+0xf4>
}
 80021ae:	e035      	b.n	800221c <OLED_ShowFlort+0x1a4>
		if (Da>100)
 80021b0:	491e      	ldr	r1, [pc, #120]	; (800222c <OLED_ShowFlort+0x1b4>)
 80021b2:	6838      	ldr	r0, [r7, #0]
 80021b4:	f7fe ff32 	bl	800101c <__aeabi_fcmpgt>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d100      	bne.n	80021c0 <OLED_ShowFlort+0x148>
}
 80021be:	e02d      	b.n	800221c <OLED_ShowFlort+0x1a4>
			sprintf(chr, "%0.2f",Da);
 80021c0:	6838      	ldr	r0, [r7, #0]
 80021c2:	f7fe f931 	bl	8000428 <__aeabi_f2d>
 80021c6:	4603      	mov	r3, r0
 80021c8:	460c      	mov	r4, r1
 80021ca:	f107 000c 	add.w	r0, r7, #12
 80021ce:	461a      	mov	r2, r3
 80021d0:	4623      	mov	r3, r4
 80021d2:	4917      	ldr	r1, [pc, #92]	; (8002230 <OLED_ShowFlort+0x1b8>)
 80021d4:	f003 fe60 	bl	8005e98 <siprintf>
			while (chr[j]!='\0')
 80021d8:	e018      	b.n	800220c <OLED_ShowFlort+0x194>
			{		OLED_ShowChar(x,y,chr[j],Char_Size);
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	f107 0218 	add.w	r2, r7, #24
 80021e0:	4413      	add	r3, r2
 80021e2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80021e6:	797b      	ldrb	r3, [r7, #5]
 80021e8:	79b9      	ldrb	r1, [r7, #6]
 80021ea:	79f8      	ldrb	r0, [r7, #7]
 80021ec:	f7ff fec6 	bl	8001f7c <OLED_ShowChar>
					x+=8;
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	3308      	adds	r3, #8
 80021f4:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b78      	cmp	r3, #120	; 0x78
 80021fa:	d904      	bls.n	8002206 <OLED_ShowFlort+0x18e>
 80021fc:	2300      	movs	r3, #0
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	79bb      	ldrb	r3, [r7, #6]
 8002202:	3302      	adds	r3, #2
 8002204:	71bb      	strb	r3, [r7, #6]
					j++;
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	3301      	adds	r3, #1
 800220a:	75fb      	strb	r3, [r7, #23]
			while (chr[j]!='\0')
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	f107 0218 	add.w	r2, r7, #24
 8002212:	4413      	add	r3, r2
 8002214:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1de      	bne.n	80021da <OLED_ShowFlort+0x162>
}
 800221c:	bf00      	nop
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bdb0      	pop	{r4, r5, r7, pc}
 8002224:	41200000 	.word	0x41200000
 8002228:	08008008 	.word	0x08008008
 800222c:	42c80000 	.word	0x42c80000
 8002230:	08008010 	.word	0x08008010

08002234 <OLED_ShowCHinese>:

void OLED_ShowCHinese(unsigned char x,unsigned char y,unsigned char no)
{      			    
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	460b      	mov	r3, r1
 8002240:	71bb      	strb	r3, [r7, #6]
 8002242:	4613      	mov	r3, r2
 8002244:	717b      	strb	r3, [r7, #5]
	unsigned char t,adder=0;
 8002246:	2300      	movs	r3, #0
 8002248:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Pos(x,y);	
 800224a:	79ba      	ldrb	r2, [r7, #6]
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fe41 	bl	8001ed8 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8002256:	2300      	movs	r3, #0
 8002258:	73fb      	strb	r3, [r7, #15]
 800225a:	e011      	b.n	8002280 <OLED_ShowCHinese+0x4c>
		{
				OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 800225c:	797b      	ldrb	r3, [r7, #5]
 800225e:	005a      	lsls	r2, r3, #1
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	491b      	ldr	r1, [pc, #108]	; (80022d0 <OLED_ShowCHinese+0x9c>)
 8002264:	0152      	lsls	r2, r2, #5
 8002266:	440a      	add	r2, r1
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fe18 	bl	8001ea4 <OLED_WR_Byte>
				adder+=1;
 8002274:	7bbb      	ldrb	r3, [r7, #14]
 8002276:	3301      	adds	r3, #1
 8002278:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	3301      	adds	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	d9ea      	bls.n	800225c <OLED_ShowCHinese+0x28>
     }	
		OLED_Set_Pos(x,y+1);	
 8002286:	79bb      	ldrb	r3, [r7, #6]
 8002288:	3301      	adds	r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fe21 	bl	8001ed8 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	e012      	b.n	80022c2 <OLED_ShowCHinese+0x8e>
			{	
				OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 800229c:	797b      	ldrb	r3, [r7, #5]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	490a      	ldr	r1, [pc, #40]	; (80022d0 <OLED_ShowCHinese+0x9c>)
 80022a6:	0152      	lsls	r2, r2, #5
 80022a8:	440a      	add	r2, r1
 80022aa:	4413      	add	r3, r2
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fdf7 	bl	8001ea4 <OLED_WR_Byte>
				adder+=1;
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	3301      	adds	r3, #1
 80022ba:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	3301      	adds	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d9e9      	bls.n	800229c <OLED_ShowCHinese+0x68>
      }					
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000404 	.word	0x20000404

080022d4 <OLED_DrawBMP>:
/***********������������ʾ��ʾBMPͼƬ128��64��ʼ������(x,y),x�ķ�Χ0��127��yΪҳ�ķ�Χ0��7*****************/
void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[])
{ 	
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4604      	mov	r4, r0
 80022dc:	4608      	mov	r0, r1
 80022de:	4611      	mov	r1, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	4623      	mov	r3, r4
 80022e4:	71fb      	strb	r3, [r7, #7]
 80022e6:	4603      	mov	r3, r0
 80022e8:	71bb      	strb	r3, [r7, #6]
 80022ea:	460b      	mov	r3, r1
 80022ec:	717b      	strb	r3, [r7, #5]
 80022ee:	4613      	mov	r3, r2
 80022f0:	713b      	strb	r3, [r7, #4]
 unsigned int j=0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 unsigned char x,y;
  
  if(y1%8==0) y=y1/8;      
 80022f6:	793b      	ldrb	r3, [r7, #4]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <OLED_DrawBMP+0x36>
 8002302:	793b      	ldrb	r3, [r7, #4]
 8002304:	08db      	lsrs	r3, r3, #3
 8002306:	72bb      	strb	r3, [r7, #10]
 8002308:	e004      	b.n	8002314 <OLED_DrawBMP+0x40>
  else y=y1/8+1;
 800230a:	793b      	ldrb	r3, [r7, #4]
 800230c:	08db      	lsrs	r3, r3, #3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 8002314:	79bb      	ldrb	r3, [r7, #6]
 8002316:	72bb      	strb	r3, [r7, #10]
 8002318:	e01c      	b.n	8002354 <OLED_DrawBMP+0x80>
	{
		OLED_Set_Pos(x0,y);
 800231a:	7aba      	ldrb	r2, [r7, #10]
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fdd9 	bl	8001ed8 <OLED_Set_Pos>
    for(x=x0;x<x1;x++)
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	72fb      	strb	r3, [r7, #11]
 800232a:	e00c      	b.n	8002346 <OLED_DrawBMP+0x72>
	    {      
	    	OLED_WR_Byte(BMP[j++],OLED_DATA);	    	
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	60fa      	str	r2, [r7, #12]
 8002332:	6a3a      	ldr	r2, [r7, #32]
 8002334:	4413      	add	r3, r2
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2101      	movs	r1, #1
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fdb2 	bl	8001ea4 <OLED_WR_Byte>
    for(x=x0;x<x1;x++)
 8002340:	7afb      	ldrb	r3, [r7, #11]
 8002342:	3301      	adds	r3, #1
 8002344:	72fb      	strb	r3, [r7, #11]
 8002346:	7afa      	ldrb	r2, [r7, #11]
 8002348:	797b      	ldrb	r3, [r7, #5]
 800234a:	429a      	cmp	r2, r3
 800234c:	d3ee      	bcc.n	800232c <OLED_DrawBMP+0x58>
	for(y=y0;y<y1;y++)
 800234e:	7abb      	ldrb	r3, [r7, #10]
 8002350:	3301      	adds	r3, #1
 8002352:	72bb      	strb	r3, [r7, #10]
 8002354:	7aba      	ldrb	r2, [r7, #10]
 8002356:	793b      	ldrb	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	d3de      	bcc.n	800231a <OLED_DrawBMP+0x46>
	    }
	}
} 
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <OLED_Init>:

//��ʼ��SSD1306					    
void OLED_Init(void)
{ 	
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0

	HAL_Delay (100);					//看别人延时这么长时间
 8002368:	2064      	movs	r0, #100	; 0x64
 800236a:	f000 fa7f 	bl	800286c <HAL_Delay>
	OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 800236e:	2100      	movs	r1, #0
 8002370:	20ae      	movs	r0, #174	; 0xae
 8002372:	f7ff fd97 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8002376:	2100      	movs	r1, #0
 8002378:	2000      	movs	r0, #0
 800237a:	f7ff fd93 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 800237e:	2100      	movs	r1, #0
 8002380:	2010      	movs	r0, #16
 8002382:	f7ff fd8f 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 8002386:	2100      	movs	r1, #0
 8002388:	2040      	movs	r0, #64	; 0x40
 800238a:	f7ff fd8b 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 800238e:	2100      	movs	r1, #0
 8002390:	20b0      	movs	r0, #176	; 0xb0
 8002392:	f7ff fd87 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); // contract control
 8002396:	2100      	movs	r1, #0
 8002398:	2081      	movs	r0, #129	; 0x81
 800239a:	f7ff fd83 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 800239e:	2100      	movs	r1, #0
 80023a0:	20ff      	movs	r0, #255	; 0xff
 80023a2:	f7ff fd7f 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 80023a6:	2100      	movs	r1, #0
 80023a8:	20a1      	movs	r0, #161	; 0xa1
 80023aa:	f7ff fd7b 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 80023ae:	2100      	movs	r1, #0
 80023b0:	20a6      	movs	r0, #166	; 0xa6
 80023b2:	f7ff fd77 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 80023b6:	2100      	movs	r1, #0
 80023b8:	20a8      	movs	r0, #168	; 0xa8
 80023ba:	f7ff fd73 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 80023be:	2100      	movs	r1, #0
 80023c0:	203f      	movs	r0, #63	; 0x3f
 80023c2:	f7ff fd6f 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 80023c6:	2100      	movs	r1, #0
 80023c8:	20c8      	movs	r0, #200	; 0xc8
 80023ca:	f7ff fd6b 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 80023ce:	2100      	movs	r1, #0
 80023d0:	20d3      	movs	r0, #211	; 0xd3
 80023d2:	f7ff fd67 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//
 80023d6:	2100      	movs	r1, #0
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff fd63 	bl	8001ea4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 80023de:	2100      	movs	r1, #0
 80023e0:	20d5      	movs	r0, #213	; 0xd5
 80023e2:	f7ff fd5f 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//
 80023e6:	2100      	movs	r1, #0
 80023e8:	2080      	movs	r0, #128	; 0x80
 80023ea:	f7ff fd5b 	bl	8001ea4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 80023ee:	2100      	movs	r1, #0
 80023f0:	20d8      	movs	r0, #216	; 0xd8
 80023f2:	f7ff fd57 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x05,OLED_CMD);//
 80023f6:	2100      	movs	r1, #0
 80023f8:	2005      	movs	r0, #5
 80023fa:	f7ff fd53 	bl	8001ea4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 80023fe:	2100      	movs	r1, #0
 8002400:	20d9      	movs	r0, #217	; 0xd9
 8002402:	f7ff fd4f 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//
 8002406:	2100      	movs	r1, #0
 8002408:	20f1      	movs	r0, #241	; 0xf1
 800240a:	f7ff fd4b 	bl	8001ea4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 800240e:	2100      	movs	r1, #0
 8002410:	20da      	movs	r0, #218	; 0xda
 8002412:	f7ff fd47 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);//
 8002416:	2100      	movs	r1, #0
 8002418:	2012      	movs	r0, #18
 800241a:	f7ff fd43 	bl	8001ea4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 800241e:	2100      	movs	r1, #0
 8002420:	20db      	movs	r0, #219	; 0xdb
 8002422:	f7ff fd3f 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//
 8002426:	2100      	movs	r1, #0
 8002428:	2030      	movs	r0, #48	; 0x30
 800242a:	f7ff fd3b 	bl	8001ea4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 800242e:	2100      	movs	r1, #0
 8002430:	208d      	movs	r0, #141	; 0x8d
 8002432:	f7ff fd37 	bl	8001ea4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//
 8002436:	2100      	movs	r1, #0
 8002438:	2014      	movs	r0, #20
 800243a:	f7ff fd33 	bl	8001ea4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 800243e:	2100      	movs	r1, #0
 8002440:	20af      	movs	r0, #175	; 0xaf
 8002442:	f7ff fd2f 	bl	8001ea4 <OLED_WR_Byte>


	OLED_Clear();
 8002446:	f7ff fd6c 	bl	8001f22 <OLED_Clear>
}  
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <Server_Init>:
uint8_t Uart3_Rx_Char;
uint8_t Get_Data_Flag = 0;
uint16_t Distance_Buffer;


void Server_Init(void) {
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8002454:	2032      	movs	r0, #50	; 0x32
 8002456:	f000 fa09 	bl	800286c <HAL_Delay>
	printf("AT+RST\r\n");
 800245a:	4810      	ldr	r0, [pc, #64]	; (800249c <Server_Init+0x4c>)
 800245c:	f003 fd14 	bl	8005e88 <puts>
	HAL_Delay(300);
 8002460:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002464:	f000 fa02 	bl	800286c <HAL_Delay>
	printf("AT+CWMODE=2\r\n");
 8002468:	480d      	ldr	r0, [pc, #52]	; (80024a0 <Server_Init+0x50>)
 800246a:	f003 fd0d 	bl	8005e88 <puts>
	HAL_Delay(100);
 800246e:	2064      	movs	r0, #100	; 0x64
 8002470:	f000 f9fc 	bl	800286c <HAL_Delay>
	printf("AT+CIPMUX=1\r\n");
 8002474:	480b      	ldr	r0, [pc, #44]	; (80024a4 <Server_Init+0x54>)
 8002476:	f003 fd07 	bl	8005e88 <puts>
	HAL_Delay(100);
 800247a:	2064      	movs	r0, #100	; 0x64
 800247c:	f000 f9f6 	bl	800286c <HAL_Delay>
	printf("AT+CIPSERVER=1,8080\r\n");
 8002480:	4809      	ldr	r0, [pc, #36]	; (80024a8 <Server_Init+0x58>)
 8002482:	f003 fd01 	bl	8005e88 <puts>
	HAL_Delay(100);
 8002486:	2064      	movs	r0, #100	; 0x64
 8002488:	f000 f9f0 	bl	800286c <HAL_Delay>
	printf("AT+CIPSTO=0\r\n");
 800248c:	4807      	ldr	r0, [pc, #28]	; (80024ac <Server_Init+0x5c>)
 800248e:	f003 fcfb 	bl	8005e88 <puts>
	HAL_Delay(100);
 8002492:	2064      	movs	r0, #100	; 0x64
 8002494:	f000 f9ea 	bl	800286c <HAL_Delay>
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	08008018 	.word	0x08008018
 80024a0:	08008020 	.word	0x08008020
 80024a4:	08008030 	.word	0x08008030
 80024a8:	08008040 	.word	0x08008040
 80024ac:	08008058 	.word	0x08008058

080024b0 <Server_SentTo_Client>:

void Server_SentTo_Client(uint8_t *Str) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 80024b8:	2032      	movs	r0, #50	; 0x32
 80024ba:	f000 f9d7 	bl	800286c <HAL_Delay>
	printf("AT+CIPSEND=0,%d\r\n", Strlen(Str) + 2);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f818 	bl	80024f4 <Strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	3302      	adds	r3, #2
 80024c8:	4619      	mov	r1, r3
 80024ca:	4808      	ldr	r0, [pc, #32]	; (80024ec <Server_SentTo_Client+0x3c>)
 80024cc:	f003 fc68 	bl	8005da0 <iprintf>
	HAL_Delay(50);
 80024d0:	2032      	movs	r0, #50	; 0x32
 80024d2:	f000 f9cb 	bl	800286c <HAL_Delay>
	printf("%s\r\n", Str);
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4805      	ldr	r0, [pc, #20]	; (80024f0 <Server_SentTo_Client+0x40>)
 80024da:	f003 fc61 	bl	8005da0 <iprintf>
	HAL_Delay(50);
 80024de:	2032      	movs	r0, #50	; 0x32
 80024e0:	f000 f9c4 	bl	800286c <HAL_Delay>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	08008068 	.word	0x08008068
 80024f0:	0800807c 	.word	0x0800807c

080024f4 <Strlen>:

 uint8_t Strlen(uint8_t *s) {
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	 for(uint8_t i = 0; i < 256; i++) {
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <Strlen+0x1c>
			 return i;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	e003      	b.n	8002518 <Strlen+0x24>
	 for(uint8_t i = 0; i < 256; i++) {
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	3301      	adds	r3, #1
 8002514:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 8002516:	e7f3      	b.n	8002500 <Strlen+0xc>
		 }
	 }
 }
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <Strcpy>:
 void Strcpy(uint8_t *s1, uint8_t *s2) {
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
	 uint8_t i;
	 for(i = 0; s2[i] != '\0'; i++) {
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e00a      	b.n	8002548 <Strcpy+0x26>
		 s1[i] = s2[i];
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	441a      	add	r2, r3
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	440b      	add	r3, r1
 800253e:	7812      	ldrb	r2, [r2, #0]
 8002540:	701a      	strb	r2, [r3, #0]
	 for(i = 0; s2[i] != '\0'; i++) {
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	3301      	adds	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	4413      	add	r3, r2
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ee      	bne.n	8002532 <Strcpy+0x10>
	 }
	 s1[i] = '\0';
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
 }
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <Strcmp>:
uint8_t Strcmp(uint8_t *s1, uint8_t *s2) {
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
	uint8_t i;
		 for(i = 0; s2[i] != '\0'; i++) {
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
 8002576:	e00e      	b.n	8002596 <Strcmp+0x2e>
			 if(s1[i] != s2[i]) {
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	440b      	add	r3, r1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <Strcmp+0x28>
				 return 0;
 800258c:	2300      	movs	r3, #0
 800258e:	e011      	b.n	80025b4 <Strcmp+0x4c>
		 for(i = 0; s2[i] != '\0'; i++) {
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	3301      	adds	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	4413      	add	r3, r2
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ea      	bne.n	8002578 <Strcmp+0x10>
			 }
		 }
		 if(s1[i] == '\0') {
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <Strcmp+0x4a>
			 return 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <Strcmp+0x4c>
		 }
		 return 0;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_UART_RxCpltCallback>:

//UART接收中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <HAL_UART_RxCpltCallback+0x110>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d134      	bne.n	800263e <HAL_UART_RxCpltCallback+0x7e>
		if(Rx_Line_Flag == 0) {
 80025d4:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_UART_RxCpltCallback+0x114>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d12b      	bne.n	8002634 <HAL_UART_RxCpltCallback+0x74>
			if(Uart1_Rx_Char == '\n') {
 80025dc:	4b3e      	ldr	r3, [pc, #248]	; (80026d8 <HAL_UART_RxCpltCallback+0x118>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b0a      	cmp	r3, #10
 80025e2:	d11a      	bne.n	800261a <HAL_UART_RxCpltCallback+0x5a>
				Uart1_Rx_Buffer[Rx_Buffer_Size] = '\0';
 80025e4:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_UART_RxCpltCallback+0x11c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b3d      	ldr	r3, [pc, #244]	; (80026e0 <HAL_UART_RxCpltCallback+0x120>)
 80025ec:	2100      	movs	r1, #0
 80025ee:	5499      	strb	r1, [r3, r2]
				//if(Rx_Buffer_Size >= 5) {
					Rx_Line_Flag = 1;
 80025f0:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <HAL_UART_RxCpltCallback+0x114>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]

					if(Rx_Buffer_Size == 1) {
 80025f6:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_UART_RxCpltCallback+0x11c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d102      	bne.n	8002604 <HAL_UART_RxCpltCallback+0x44>
						Rx_Line_Flag = 0;
 80025fe:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_UART_RxCpltCallback+0x114>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
					}

				//}
				if(Rx_Buffer_Size == 0){
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_UART_RxCpltCallback+0x11c>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d102      	bne.n	8002612 <HAL_UART_RxCpltCallback+0x52>
					Rx_Line_Flag = 0;
 800260c:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_UART_RxCpltCallback+0x114>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
				}
				Rx_Buffer_Size = 0;
 8002612:	4b32      	ldr	r3, [pc, #200]	; (80026dc <HAL_UART_RxCpltCallback+0x11c>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e00c      	b.n	8002634 <HAL_UART_RxCpltCallback+0x74>
			}else {
				Uart1_Rx_Buffer[Rx_Buffer_Size] = Uart1_Rx_Char;
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <HAL_UART_RxCpltCallback+0x11c>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_UART_RxCpltCallback+0x118>)
 8002622:	7819      	ldrb	r1, [r3, #0]
 8002624:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <HAL_UART_RxCpltCallback+0x120>)
 8002626:	5499      	strb	r1, [r3, r2]
				Rx_Buffer_Size++;
 8002628:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <HAL_UART_RxCpltCallback+0x11c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	3301      	adds	r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_UART_RxCpltCallback+0x11c>)
 8002632:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 8002634:	2201      	movs	r2, #1
 8002636:	4928      	ldr	r1, [pc, #160]	; (80026d8 <HAL_UART_RxCpltCallback+0x118>)
 8002638:	4825      	ldr	r0, [pc, #148]	; (80026d0 <HAL_UART_RxCpltCallback+0x110>)
 800263a:	f002 fb88 	bl	8004d4e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == huart3.Instance) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_UART_RxCpltCallback+0x124>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d13e      	bne.n	80026c8 <HAL_UART_RxCpltCallback+0x108>
		if(Uart3_Rx_Char == 'd') {
 800264a:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_UART_RxCpltCallback+0x128>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d105      	bne.n	800265e <HAL_UART_RxCpltCallback+0x9e>
			Distance_Buffer = 0;
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_UART_RxCpltCallback+0x12c>)
 8002654:	2200      	movs	r2, #0
 8002656:	801a      	strh	r2, [r3, #0]
			Get_Data_Flag = 1;
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_UART_RxCpltCallback+0x130>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
		}
		if(Get_Data_Flag == 1) {
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_UART_RxCpltCallback+0x130>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d12b      	bne.n	80026be <HAL_UART_RxCpltCallback+0xfe>
			if(Uart3_Rx_Char >= '0' && Uart3_Rx_Char <= '9') {
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_UART_RxCpltCallback+0x128>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b2f      	cmp	r3, #47	; 0x2f
 800266c:	d917      	bls.n	800269e <HAL_UART_RxCpltCallback+0xde>
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_UART_RxCpltCallback+0x128>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b39      	cmp	r3, #57	; 0x39
 8002674:	d813      	bhi.n	800269e <HAL_UART_RxCpltCallback+0xde>
				Distance_Buffer += Uart3_Rx_Char - '0';
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <HAL_UART_RxCpltCallback+0x128>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b29a      	uxth	r2, r3
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_UART_RxCpltCallback+0x12c>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	4413      	add	r3, r2
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b30      	subs	r3, #48	; 0x30
 8002686:	b29a      	uxth	r2, r3
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_UART_RxCpltCallback+0x12c>)
 800268a:	801a      	strh	r2, [r3, #0]
				Distance_Buffer *= 10;
 800268c:	4b17      	ldr	r3, [pc, #92]	; (80026ec <HAL_UART_RxCpltCallback+0x12c>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4413      	add	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <HAL_UART_RxCpltCallback+0x12c>)
 800269c:	801a      	strh	r2, [r3, #0]
			}
			if(Uart3_Rx_Char == 'm') {
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_UART_RxCpltCallback+0x128>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b6d      	cmp	r3, #109	; 0x6d
 80026a4:	d10b      	bne.n	80026be <HAL_UART_RxCpltCallback+0xfe>
				Distance =  Distance_Buffer / 10;
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_UART_RxCpltCallback+0x12c>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <HAL_UART_RxCpltCallback+0x134>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_UART_RxCpltCallback+0x138>)
 80026b6:	801a      	strh	r2, [r3, #0]
				Get_Data_Flag = 0;
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_UART_RxCpltCallback+0x130>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart3,&Uart3_Rx_Char,1);
 80026be:	2201      	movs	r2, #1
 80026c0:	4909      	ldr	r1, [pc, #36]	; (80026e8 <HAL_UART_RxCpltCallback+0x128>)
 80026c2:	4808      	ldr	r0, [pc, #32]	; (80026e4 <HAL_UART_RxCpltCallback+0x124>)
 80026c4:	f002 fb43 	bl	8004d4e <HAL_UART_Receive_IT>
	}
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000df0 	.word	0x20000df0
 80026d4:	20000d11 	.word	0x20000d11
 80026d8:	20000e76 	.word	0x20000e76
 80026dc:	20000d10 	.word	0x20000d10
 80026e0:	20000c48 	.word	0x20000c48
 80026e4:	20000db0 	.word	0x20000db0
 80026e8:	20000e77 	.word	0x20000e77
 80026ec:	20000e78 	.word	0x20000e78
 80026f0:	20000d13 	.word	0x20000d13
 80026f4:	cccccccd 	.word	0xcccccccd
 80026f8:	20000e74 	.word	0x20000e74

080026fc <Tcp_DataAccept>:

void Tcp_DataAccept(void) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0

	if(Wifi_Get_Command_Flag == 1) {
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <Tcp_DataAccept+0x98>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d104      	bne.n	8002714 <Tcp_DataAccept+0x18>
			Tcp_DataDeal();
 800270a:	f7fe fe4f 	bl	80013ac <Tcp_DataDeal>
			Wifi_Get_Command_Flag = 0;
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <Tcp_DataAccept+0x98>)
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
		  }
		  if(Rx_Line_Flag == 1) {
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <Tcp_DataAccept+0x9c>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d137      	bne.n	800278c <Tcp_DataAccept+0x90>
			  if(Wifi_Get_Command_Flag == 0) {
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <Tcp_DataAccept+0x98>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d130      	bne.n	8002786 <Tcp_DataAccept+0x8a>
				  //Server_SentTo_Client(Uart1_Rx_Buffer);
				  Wifi_Command_Buffer[0] = Uart1_Rx_Buffer[0];
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <Tcp_DataAccept+0xa0>)
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <Tcp_DataAccept+0xa4>)
 800272a:	701a      	strb	r2, [r3, #0]
		  		  Wifi_Command_Buffer[1] = Uart1_Rx_Buffer[1];
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <Tcp_DataAccept+0xa0>)
 800272e:	785a      	ldrb	r2, [r3, #1]
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <Tcp_DataAccept+0xa4>)
 8002732:	705a      	strb	r2, [r3, #1]
		  		  Wifi_Command_Buffer[2] = Uart1_Rx_Buffer[2];
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <Tcp_DataAccept+0xa0>)
 8002736:	789a      	ldrb	r2, [r3, #2]
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <Tcp_DataAccept+0xa4>)
 800273a:	709a      	strb	r2, [r3, #2]
		  		  Wifi_Command_Buffer[3] = Uart1_Rx_Buffer[3];
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <Tcp_DataAccept+0xa0>)
 800273e:	78da      	ldrb	r2, [r3, #3]
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <Tcp_DataAccept+0xa4>)
 8002742:	70da      	strb	r2, [r3, #3]
		  		  Wifi_Command_Buffer[4] = '\0';
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <Tcp_DataAccept+0xa4>)
 8002746:	2200      	movs	r2, #0
 8002748:	711a      	strb	r2, [r3, #4]
		  		  if(Strcmp(Wifi_Command_Buffer, "+IPD") == 1) {
 800274a:	4916      	ldr	r1, [pc, #88]	; (80027a4 <Tcp_DataAccept+0xa8>)
 800274c:	4814      	ldr	r0, [pc, #80]	; (80027a0 <Tcp_DataAccept+0xa4>)
 800274e:	f7ff ff0b 	bl	8002568 <Strcmp>
 8002752:	4603      	mov	r3, r0
 8002754:	2b01      	cmp	r3, #1
 8002756:	d116      	bne.n	8002786 <Tcp_DataAccept+0x8a>
		  			  //Strcpy(Wifi_Command_Buffer, Uart1_Rx_Buffer);
		  			  Wifi_Get_Command_Flag = 1;
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <Tcp_DataAccept+0x98>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
		  			  for(uint8_t i = 0; ; i++) {
 800275e:	2300      	movs	r3, #0
 8002760:	71fb      	strb	r3, [r7, #7]
		  				  if(Uart1_Rx_Buffer[i] == ':') {
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4a0d      	ldr	r2, [pc, #52]	; (800279c <Tcp_DataAccept+0xa0>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	2b3a      	cmp	r3, #58	; 0x3a
 800276a:	d108      	bne.n	800277e <Tcp_DataAccept+0x82>
		  					  Strcpy(Wifi_Command_Buffer, Uart1_Rx_Buffer + i + 1);
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	3301      	adds	r3, #1
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <Tcp_DataAccept+0xa0>)
 8002772:	4413      	add	r3, r2
 8002774:	4619      	mov	r1, r3
 8002776:	480a      	ldr	r0, [pc, #40]	; (80027a0 <Tcp_DataAccept+0xa4>)
 8002778:	f7ff fed3 	bl	8002522 <Strcpy>
		  					  break;
 800277c:	e003      	b.n	8002786 <Tcp_DataAccept+0x8a>
		  			  for(uint8_t i = 0; ; i++) {
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	3301      	adds	r3, #1
 8002782:	71fb      	strb	r3, [r7, #7]
		  				  if(Uart1_Rx_Buffer[i] == ':') {
 8002784:	e7ed      	b.n	8002762 <Tcp_DataAccept+0x66>
		  				  }
		  			  }
		  		  }
			  }
			  Rx_Line_Flag = 0;
 8002786:	4b04      	ldr	r3, [pc, #16]	; (8002798 <Tcp_DataAccept+0x9c>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
		  }
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000d12 	.word	0x20000d12
 8002798:	20000d11 	.word	0x20000d11
 800279c:	20000c48 	.word	0x20000c48
 80027a0:	20000cac 	.word	0x20000cac
 80027a4:	08008084 	.word	0x08008084

080027a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <HAL_Init+0x28>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <HAL_Init+0x28>)
 80027b2:	f043 0310 	orr.w	r3, r3, #16
 80027b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b8:	2003      	movs	r0, #3
 80027ba:	f000 f945 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f808 	bl	80027d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c4:	f7fe fea6 	bl	8001514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40022000 	.word	0x40022000

080027d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_InitTick+0x54>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <HAL_InitTick+0x58>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4619      	mov	r1, r3
 80027e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f95d 	bl	8002ab2 <HAL_SYSTICK_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e00e      	b.n	8002820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b0f      	cmp	r3, #15
 8002806:	d80a      	bhi.n	800281e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002808:	2200      	movs	r2, #0
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f000 f925 	bl	8002a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002814:	4a06      	ldr	r2, [pc, #24]	; (8002830 <HAL_InitTick+0x5c>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000400 	.word	0x20000400
 800282c:	20000a48 	.word	0x20000a48
 8002830:	20000a44 	.word	0x20000a44

08002834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_IncTick+0x1c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_IncTick+0x20>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_IncTick+0x20>)
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	20000a48 	.word	0x20000a48
 8002854:	20000e7c 	.word	0x20000e7c

08002858 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b02      	ldr	r3, [pc, #8]	; (8002868 <HAL_GetTick+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000e7c 	.word	0x20000e7c

0800286c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff fff0 	bl	8002858 <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d005      	beq.n	8002892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_Delay+0x40>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002892:	bf00      	nop
 8002894:	f7ff ffe0 	bl	8002858 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d8f7      	bhi.n	8002894 <HAL_Delay+0x28>
  {
  }
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000a48 	.word	0x20000a48

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60d3      	str	r3, [r2, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4906      	ldr	r1, [pc, #24]	; (8002948 <__NVIC_EnableIRQ+0x34>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	e000e100 	.word	0xe000e100

0800294c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	; (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <__NVIC_SetPriority+0x50>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f1c3 0307 	rsb	r3, r3, #7
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf28      	it	cs
 80029be:	2304      	movcs	r3, #4
 80029c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d902      	bls.n	80029d0 <NVIC_EncodePriority+0x30>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	e000      	b.n	80029d2 <NVIC_EncodePriority+0x32>
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	4313      	orrs	r3, r2
         );
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a14:	d301      	bcc.n	8002a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <SysTick_Config+0x40>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a22:	210f      	movs	r1, #15
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	f7ff ff90 	bl	800294c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <SysTick_Config+0x40>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a32:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <SysTick_Config+0x40>)
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	e000e010 	.word	0xe000e010

08002a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff2d 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a70:	f7ff ff42 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff ff90 	bl	80029a0 <NVIC_EncodePriority>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff5f 	bl	800294c <__NVIC_SetPriority>
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff35 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ffa2 	bl	8002a04 <SysTick_Config>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d005      	beq.n	8002aee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	e051      	b.n	8002b92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 020e 	bic.w	r2, r2, #14
 8002afc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_DMA_Abort_IT+0xd0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d029      	beq.n	8002b6c <HAL_DMA_Abort_IT+0xa0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <HAL_DMA_Abort_IT+0xd4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d022      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x9c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_DMA_Abort_IT+0xd8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d01a      	beq.n	8002b62 <HAL_DMA_Abort_IT+0x96>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <HAL_DMA_Abort_IT+0xdc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d012      	beq.n	8002b5c <HAL_DMA_Abort_IT+0x90>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <HAL_DMA_Abort_IT+0xe0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00a      	beq.n	8002b56 <HAL_DMA_Abort_IT+0x8a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <HAL_DMA_Abort_IT+0xe4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d102      	bne.n	8002b50 <HAL_DMA_Abort_IT+0x84>
 8002b4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b4e:	e00e      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b54:	e00b      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5a:	e008      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b60:	e005      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b66:	e002      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b68:	2310      	movs	r3, #16
 8002b6a:	e000      	b.n	8002b6e <HAL_DMA_Abort_IT+0xa2>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	4a11      	ldr	r2, [pc, #68]	; (8002bb4 <HAL_DMA_Abort_IT+0xe8>)
 8002b70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
    } 
  }
  return status;
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40020008 	.word	0x40020008
 8002ba0:	4002001c 	.word	0x4002001c
 8002ba4:	40020030 	.word	0x40020030
 8002ba8:	40020044 	.word	0x40020044
 8002bac:	40020058 	.word	0x40020058
 8002bb0:	4002006c 	.word	0x4002006c
 8002bb4:	40020000 	.word	0x40020000

08002bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b08b      	sub	sp, #44	; 0x2c
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bca:	e127      	b.n	8002e1c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	f040 8116 	bne.w	8002e16 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d034      	beq.n	8002c5c <HAL_GPIO_Init+0xa4>
 8002bf2:	2b12      	cmp	r3, #18
 8002bf4:	d80d      	bhi.n	8002c12 <HAL_GPIO_Init+0x5a>
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d02b      	beq.n	8002c52 <HAL_GPIO_Init+0x9a>
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d804      	bhi.n	8002c08 <HAL_GPIO_Init+0x50>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d031      	beq.n	8002c66 <HAL_GPIO_Init+0xae>
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d01c      	beq.n	8002c40 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c06:	e048      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d043      	beq.n	8002c94 <HAL_GPIO_Init+0xdc>
 8002c0c:	2b11      	cmp	r3, #17
 8002c0e:	d01b      	beq.n	8002c48 <HAL_GPIO_Init+0x90>
          break;
 8002c10:	e043      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c12:	4a89      	ldr	r2, [pc, #548]	; (8002e38 <HAL_GPIO_Init+0x280>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d026      	beq.n	8002c66 <HAL_GPIO_Init+0xae>
 8002c18:	4a87      	ldr	r2, [pc, #540]	; (8002e38 <HAL_GPIO_Init+0x280>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d806      	bhi.n	8002c2c <HAL_GPIO_Init+0x74>
 8002c1e:	4a87      	ldr	r2, [pc, #540]	; (8002e3c <HAL_GPIO_Init+0x284>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d020      	beq.n	8002c66 <HAL_GPIO_Init+0xae>
 8002c24:	4a86      	ldr	r2, [pc, #536]	; (8002e40 <HAL_GPIO_Init+0x288>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d01d      	beq.n	8002c66 <HAL_GPIO_Init+0xae>
          break;
 8002c2a:	e036      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c2c:	4a85      	ldr	r2, [pc, #532]	; (8002e44 <HAL_GPIO_Init+0x28c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d019      	beq.n	8002c66 <HAL_GPIO_Init+0xae>
 8002c32:	4a85      	ldr	r2, [pc, #532]	; (8002e48 <HAL_GPIO_Init+0x290>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d016      	beq.n	8002c66 <HAL_GPIO_Init+0xae>
 8002c38:	4a84      	ldr	r2, [pc, #528]	; (8002e4c <HAL_GPIO_Init+0x294>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0xae>
          break;
 8002c3e:	e02c      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	623b      	str	r3, [r7, #32]
          break;
 8002c46:	e028      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	623b      	str	r3, [r7, #32]
          break;
 8002c50:	e023      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	3308      	adds	r3, #8
 8002c58:	623b      	str	r3, [r7, #32]
          break;
 8002c5a:	e01e      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	330c      	adds	r3, #12
 8002c62:	623b      	str	r3, [r7, #32]
          break;
 8002c64:	e019      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c6e:	2304      	movs	r3, #4
 8002c70:	623b      	str	r3, [r7, #32]
          break;
 8002c72:	e012      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d105      	bne.n	8002c88 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	611a      	str	r2, [r3, #16]
          break;
 8002c86:	e008      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c88:	2308      	movs	r3, #8
 8002c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	615a      	str	r2, [r3, #20]
          break;
 8002c92:	e002      	b.n	8002c9a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c94:	2300      	movs	r3, #0
 8002c96:	623b      	str	r3, [r7, #32]
          break;
 8002c98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2bff      	cmp	r3, #255	; 0xff
 8002c9e:	d801      	bhi.n	8002ca4 <HAL_GPIO_Init+0xec>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	e001      	b.n	8002ca8 <HAL_GPIO_Init+0xf0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2bff      	cmp	r3, #255	; 0xff
 8002cae:	d802      	bhi.n	8002cb6 <HAL_GPIO_Init+0xfe>
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	e002      	b.n	8002cbc <HAL_GPIO_Init+0x104>
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	3b08      	subs	r3, #8
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	210f      	movs	r1, #15
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	401a      	ands	r2, r3
 8002cce:	6a39      	ldr	r1, [r7, #32]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8096 	beq.w	8002e16 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cea:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <HAL_GPIO_Init+0x298>)
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <HAL_GPIO_Init+0x298>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6193      	str	r3, [r2, #24]
 8002cf6:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <HAL_GPIO_Init+0x298>)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d02:	4a54      	ldr	r2, [pc, #336]	; (8002e54 <HAL_GPIO_Init+0x29c>)
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4b      	ldr	r2, [pc, #300]	; (8002e58 <HAL_GPIO_Init+0x2a0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0x19e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4a      	ldr	r2, [pc, #296]	; (8002e5c <HAL_GPIO_Init+0x2a4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_GPIO_Init+0x19a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a49      	ldr	r2, [pc, #292]	; (8002e60 <HAL_GPIO_Init+0x2a8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0x196>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a48      	ldr	r2, [pc, #288]	; (8002e64 <HAL_GPIO_Init+0x2ac>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_GPIO_Init+0x192>
 8002d46:	2303      	movs	r3, #3
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x1a0>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	e004      	b.n	8002d58 <HAL_GPIO_Init+0x1a0>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e002      	b.n	8002d58 <HAL_GPIO_Init+0x1a0>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_GPIO_Init+0x1a0>
 8002d56:	2300      	movs	r3, #0
 8002d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5a:	f002 0203 	and.w	r2, r2, #3
 8002d5e:	0092      	lsls	r2, r2, #2
 8002d60:	4093      	lsls	r3, r2
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d68:	493a      	ldr	r1, [pc, #232]	; (8002e54 <HAL_GPIO_Init+0x29c>)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	089b      	lsrs	r3, r3, #2
 8002d6e:	3302      	adds	r3, #2
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d82:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4938      	ldr	r1, [pc, #224]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
 8002d8e:	e006      	b.n	8002d9e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d90:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	4933      	ldr	r1, [pc, #204]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002daa:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	492e      	ldr	r1, [pc, #184]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
 8002db6:	e006      	b.n	8002dc6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002db8:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	4929      	ldr	r1, [pc, #164]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	4924      	ldr	r1, [pc, #144]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
 8002dde:	e006      	b.n	8002dee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002de0:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	491f      	ldr	r1, [pc, #124]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	491a      	ldr	r1, [pc, #104]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60cb      	str	r3, [r1, #12]
 8002e06:	e006      	b.n	8002e16 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	4915      	ldr	r1, [pc, #84]	; (8002e68 <HAL_GPIO_Init+0x2b0>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	3301      	adds	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f47f aed0 	bne.w	8002bcc <HAL_GPIO_Init+0x14>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	372c      	adds	r7, #44	; 0x2c
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	10210000 	.word	0x10210000
 8002e3c:	10110000 	.word	0x10110000
 8002e40:	10120000 	.word	0x10120000
 8002e44:	10310000 	.word	0x10310000
 8002e48:	10320000 	.word	0x10320000
 8002e4c:	10220000 	.word	0x10220000
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40010800 	.word	0x40010800
 8002e5c:	40010c00 	.word	0x40010c00
 8002e60:	40011000 	.word	0x40011000
 8002e64:	40011400 	.word	0x40011400
 8002e68:	40010400 	.word	0x40010400

08002e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e7c:	787b      	ldrb	r3, [r7, #1]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e88:	e003      	b.n	8002e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	041a      	lsls	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	611a      	str	r2, [r3, #16]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eb2:	4a05      	ldr	r2, [pc, #20]	; (8002ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f806 	bl	8002ecc <HAL_GPIO_EXTI_Callback>
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40010400 	.word	0x40010400

08002ecc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e10f      	b.n	8003112 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe f92e 	bl	8001168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f24:	f000 ffe4 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 8002f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a7b      	ldr	r2, [pc, #492]	; (800311c <HAL_I2C_Init+0x23c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d807      	bhi.n	8002f44 <HAL_I2C_Init+0x64>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a7a      	ldr	r2, [pc, #488]	; (8003120 <HAL_I2C_Init+0x240>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	bf94      	ite	ls
 8002f3c:	2301      	movls	r3, #1
 8002f3e:	2300      	movhi	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e006      	b.n	8002f52 <HAL_I2C_Init+0x72>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_I2C_Init+0x244>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	bf94      	ite	ls
 8002f4c:	2301      	movls	r3, #1
 8002f4e:	2300      	movhi	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e0db      	b.n	8003112 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a72      	ldr	r2, [pc, #456]	; (8003128 <HAL_I2C_Init+0x248>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	0c9b      	lsrs	r3, r3, #18
 8002f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a64      	ldr	r2, [pc, #400]	; (800311c <HAL_I2C_Init+0x23c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d802      	bhi.n	8002f94 <HAL_I2C_Init+0xb4>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3301      	adds	r3, #1
 8002f92:	e009      	b.n	8002fa8 <HAL_I2C_Init+0xc8>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	4a63      	ldr	r2, [pc, #396]	; (800312c <HAL_I2C_Init+0x24c>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4956      	ldr	r1, [pc, #344]	; (800311c <HAL_I2C_Init+0x23c>)
 8002fc4:	428b      	cmp	r3, r1
 8002fc6:	d80d      	bhi.n	8002fe4 <HAL_I2C_Init+0x104>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e59      	subs	r1, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	bf38      	it	cc
 8002fe0:	2304      	movcc	r3, #4
 8002fe2:	e04f      	b.n	8003084 <HAL_I2C_Init+0x1a4>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d111      	bne.n	8003010 <HAL_I2C_Init+0x130>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e58      	subs	r0, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	440b      	add	r3, r1
 8002ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffe:	3301      	adds	r3, #1
 8003000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e012      	b.n	8003036 <HAL_I2C_Init+0x156>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e58      	subs	r0, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	0099      	lsls	r1, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	fbb0 f3f3 	udiv	r3, r0, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_Init+0x15e>
 800303a:	2301      	movs	r3, #1
 800303c:	e022      	b.n	8003084 <HAL_I2C_Init+0x1a4>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10e      	bne.n	8003064 <HAL_I2C_Init+0x184>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1e58      	subs	r0, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6859      	ldr	r1, [r3, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	440b      	add	r3, r1
 8003054:	fbb0 f3f3 	udiv	r3, r0, r3
 8003058:	3301      	adds	r3, #1
 800305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003062:	e00f      	b.n	8003084 <HAL_I2C_Init+0x1a4>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1e58      	subs	r0, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	0099      	lsls	r1, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	fbb0 f3f3 	udiv	r3, r0, r3
 800307a:	3301      	adds	r3, #1
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	6809      	ldr	r1, [r1, #0]
 8003088:	4313      	orrs	r3, r2
 800308a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6911      	ldr	r1, [r2, #16]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68d2      	ldr	r2, [r2, #12]
 80030be:	4311      	orrs	r1, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	000186a0 	.word	0x000186a0
 8003120:	001e847f 	.word	0x001e847f
 8003124:	003d08ff 	.word	0x003d08ff
 8003128:	431bde83 	.word	0x431bde83
 800312c:	10624dd3 	.word	0x10624dd3

08003130 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	4608      	mov	r0, r1
 800313a:	4611      	mov	r1, r2
 800313c:	461a      	mov	r2, r3
 800313e:	4603      	mov	r3, r0
 8003140:	817b      	strh	r3, [r7, #10]
 8003142:	460b      	mov	r3, r1
 8003144:	813b      	strh	r3, [r7, #8]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800314a:	f7ff fb85 	bl	8002858 <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b20      	cmp	r3, #32
 800315a:	f040 80d9 	bne.w	8003310 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2319      	movs	r3, #25
 8003164:	2201      	movs	r2, #1
 8003166:	496d      	ldr	r1, [pc, #436]	; (800331c <HAL_I2C_Mem_Write+0x1ec>)
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f965 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
 8003176:	e0cc      	b.n	8003312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_I2C_Mem_Write+0x56>
 8003182:	2302      	movs	r3, #2
 8003184:	e0c5      	b.n	8003312 <HAL_I2C_Mem_Write+0x1e2>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d007      	beq.n	80031ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2221      	movs	r2, #33	; 0x21
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2240      	movs	r2, #64	; 0x40
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4a4d      	ldr	r2, [pc, #308]	; (8003320 <HAL_I2C_Mem_Write+0x1f0>)
 80031ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ee:	88f8      	ldrh	r0, [r7, #6]
 80031f0:	893a      	ldrh	r2, [r7, #8]
 80031f2:	8979      	ldrh	r1, [r7, #10]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	4603      	mov	r3, r0
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f890 	bl	8003324 <I2C_RequestMemoryWrite>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d052      	beq.n	80032b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e081      	b.n	8003312 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f9e6 	bl	80035e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00d      	beq.n	800323a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2b04      	cmp	r3, #4
 8003224:	d107      	bne.n	8003236 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e06b      	b.n	8003312 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b04      	cmp	r3, #4
 8003276:	d11b      	bne.n	80032b0 <HAL_I2C_Mem_Write+0x180>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	d017      	beq.n	80032b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1aa      	bne.n	800320e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f9d2 	bl	8003666 <I2C_WaitOnBTFFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00d      	beq.n	80032e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d107      	bne.n	80032e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e016      	b.n	8003312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	00100002 	.word	0x00100002
 8003320:	ffff0000 	.word	0xffff0000

08003324 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	4608      	mov	r0, r1
 800332e:	4611      	mov	r1, r2
 8003330:	461a      	mov	r2, r3
 8003332:	4603      	mov	r3, r0
 8003334:	817b      	strh	r3, [r7, #10]
 8003336:	460b      	mov	r3, r1
 8003338:	813b      	strh	r3, [r7, #8]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	2200      	movs	r2, #0
 8003356:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f86c 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e05f      	b.n	800342a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003378:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	6a3a      	ldr	r2, [r7, #32]
 800337e:	492d      	ldr	r1, [pc, #180]	; (8003434 <I2C_RequestMemoryWrite+0x110>)
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f8b0 	bl	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e04c      	b.n	800342a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	6a39      	ldr	r1, [r7, #32]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f91a 	bl	80035e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d107      	bne.n	80033ce <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e02b      	b.n	800342a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033d8:	893b      	ldrh	r3, [r7, #8]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	611a      	str	r2, [r3, #16]
 80033e2:	e021      	b.n	8003428 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	6a39      	ldr	r1, [r7, #32]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f8f4 	bl	80035e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b04      	cmp	r3, #4
 8003408:	d107      	bne.n	800341a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003418:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e005      	b.n	800342a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800341e:	893b      	ldrh	r3, [r7, #8]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	00010002 	.word	0x00010002

08003438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	e025      	b.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d021      	beq.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7ff fa01 	bl	8002858 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d116      	bne.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f043 0220 	orr.w	r2, r3, #32
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e023      	b.n	80034de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b01      	cmp	r3, #1
 800349e:	d10d      	bne.n	80034bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4013      	ands	r3, r2
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	e00c      	b.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4013      	ands	r3, r2
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d0b6      	beq.n	800344a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f4:	e051      	b.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003504:	d123      	bne.n	800354e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003514:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800351e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f043 0204 	orr.w	r2, r3, #4
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e046      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d021      	beq.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003556:	f7ff f97f 	bl	8002858 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d302      	bcc.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d116      	bne.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f043 0220 	orr.w	r2, r3, #32
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e020      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10c      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e00b      	b.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	43da      	mvns	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d18d      	bne.n	80034f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f0:	e02d      	b.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f878 	bl	80036e8 <I2C_IsAcknowledgeFailed>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e02d      	b.n	800365e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d021      	beq.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7ff f925 	bl	8002858 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d116      	bne.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f043 0220 	orr.w	r2, r3, #32
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e007      	b.n	800365e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b80      	cmp	r3, #128	; 0x80
 800365a:	d1ca      	bne.n	80035f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003672:	e02d      	b.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f837 	bl	80036e8 <I2C_IsAcknowledgeFailed>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e02d      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	d021      	beq.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368c:	f7ff f8e4 	bl	8002858 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	d302      	bcc.n	80036a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e007      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d1ca      	bne.n	8003674 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fe:	d11b      	bne.n	8003738 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003708:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	f043 0204 	orr.w	r2, r3, #4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e26c      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8087 	beq.w	8003872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003764:	4b92      	ldr	r3, [pc, #584]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b04      	cmp	r3, #4
 800376e:	d00c      	beq.n	800378a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003770:	4b8f      	ldr	r3, [pc, #572]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d112      	bne.n	80037a2 <HAL_RCC_OscConfig+0x5e>
 800377c:	4b8c      	ldr	r3, [pc, #560]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d10b      	bne.n	80037a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378a:	4b89      	ldr	r3, [pc, #548]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d06c      	beq.n	8003870 <HAL_RCC_OscConfig+0x12c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d168      	bne.n	8003870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e246      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x76>
 80037ac:	4b80      	ldr	r3, [pc, #512]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a7f      	ldr	r2, [pc, #508]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e02e      	b.n	8003818 <HAL_RCC_OscConfig+0xd4>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x98>
 80037c2:	4b7b      	ldr	r3, [pc, #492]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7a      	ldr	r2, [pc, #488]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b78      	ldr	r3, [pc, #480]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a77      	ldr	r2, [pc, #476]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e01d      	b.n	8003818 <HAL_RCC_OscConfig+0xd4>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0xbc>
 80037e6:	4b72      	ldr	r3, [pc, #456]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a71      	ldr	r2, [pc, #452]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b6f      	ldr	r3, [pc, #444]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6e      	ldr	r2, [pc, #440]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0xd4>
 8003800:	4b6b      	ldr	r3, [pc, #428]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6a      	ldr	r2, [pc, #424]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a67      	ldr	r2, [pc, #412]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7ff f81a 	bl	8002858 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003828:	f7ff f816 	bl	8002858 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e1fa      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	4b5d      	ldr	r3, [pc, #372]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0xe4>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7ff f806 	bl	8002858 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7ff f802 	bl	8002858 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1e6      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	4b53      	ldr	r3, [pc, #332]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x10c>
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d063      	beq.n	8003946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800387e:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800388a:	4b49      	ldr	r3, [pc, #292]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b08      	cmp	r3, #8
 8003894:	d11c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x18c>
 8003896:	4b46      	ldr	r3, [pc, #280]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d116      	bne.n	80038d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_RCC_OscConfig+0x176>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d001      	beq.n	80038ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e1ba      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ba:	4b3d      	ldr	r3, [pc, #244]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4939      	ldr	r1, [pc, #228]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	e03a      	b.n	8003946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d020      	beq.n	800391a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d8:	4b36      	ldr	r3, [pc, #216]	; (80039b4 <HAL_RCC_OscConfig+0x270>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038de:	f7fe ffbb 	bl	8002858 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e6:	f7fe ffb7 	bl	8002858 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e19b      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f8:	4b2d      	ldr	r3, [pc, #180]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4927      	ldr	r1, [pc, #156]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 8003914:	4313      	orrs	r3, r2
 8003916:	600b      	str	r3, [r1, #0]
 8003918:	e015      	b.n	8003946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <HAL_RCC_OscConfig+0x270>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe ff9a 	bl	8002858 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003928:	f7fe ff96 	bl	8002858 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e17a      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393a:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d03a      	beq.n	80039c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d019      	beq.n	800398e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800395a:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <HAL_RCC_OscConfig+0x274>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003960:	f7fe ff7a 	bl	8002858 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003968:	f7fe ff76 	bl	8002858 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e15a      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_RCC_OscConfig+0x26c>)
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003986:	2001      	movs	r0, #1
 8003988:	f000 fada 	bl	8003f40 <RCC_Delay>
 800398c:	e01c      	b.n	80039c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <HAL_RCC_OscConfig+0x274>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003994:	f7fe ff60 	bl	8002858 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399a:	e00f      	b.n	80039bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399c:	f7fe ff5c 	bl	8002858 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d908      	bls.n	80039bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e140      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	42420000 	.word	0x42420000
 80039b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	4b9e      	ldr	r3, [pc, #632]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e9      	bne.n	800399c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80a6 	beq.w	8003b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039da:	4b97      	ldr	r3, [pc, #604]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10d      	bne.n	8003a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	4b94      	ldr	r3, [pc, #592]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	4a93      	ldr	r2, [pc, #588]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 80039ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f0:	61d3      	str	r3, [r2, #28]
 80039f2:	4b91      	ldr	r3, [pc, #580]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b8e      	ldr	r3, [pc, #568]	; (8003c3c <HAL_RCC_OscConfig+0x4f8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d118      	bne.n	8003a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a0e:	4b8b      	ldr	r3, [pc, #556]	; (8003c3c <HAL_RCC_OscConfig+0x4f8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a8a      	ldr	r2, [pc, #552]	; (8003c3c <HAL_RCC_OscConfig+0x4f8>)
 8003a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1a:	f7fe ff1d 	bl	8002858 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a22:	f7fe ff19 	bl	8002858 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b64      	cmp	r3, #100	; 0x64
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0fd      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	4b81      	ldr	r3, [pc, #516]	; (8003c3c <HAL_RCC_OscConfig+0x4f8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d106      	bne.n	8003a56 <HAL_RCC_OscConfig+0x312>
 8003a48:	4b7b      	ldr	r3, [pc, #492]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4a7a      	ldr	r2, [pc, #488]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6213      	str	r3, [r2, #32]
 8003a54:	e02d      	b.n	8003ab2 <HAL_RCC_OscConfig+0x36e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x334>
 8003a5e:	4b76      	ldr	r3, [pc, #472]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4a75      	ldr	r2, [pc, #468]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6213      	str	r3, [r2, #32]
 8003a6a:	4b73      	ldr	r3, [pc, #460]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a72      	ldr	r2, [pc, #456]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	6213      	str	r3, [r2, #32]
 8003a76:	e01c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x36e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d10c      	bne.n	8003a9a <HAL_RCC_OscConfig+0x356>
 8003a80:	4b6d      	ldr	r3, [pc, #436]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4a6c      	ldr	r2, [pc, #432]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a86:	f043 0304 	orr.w	r3, r3, #4
 8003a8a:	6213      	str	r3, [r2, #32]
 8003a8c:	4b6a      	ldr	r3, [pc, #424]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4a69      	ldr	r2, [pc, #420]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6213      	str	r3, [r2, #32]
 8003a98:	e00b      	b.n	8003ab2 <HAL_RCC_OscConfig+0x36e>
 8003a9a:	4b67      	ldr	r3, [pc, #412]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4a66      	ldr	r2, [pc, #408]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	6213      	str	r3, [r2, #32]
 8003aa6:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4a63      	ldr	r2, [pc, #396]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003aac:	f023 0304 	bic.w	r3, r3, #4
 8003ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d015      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fecd 	bl	8002858 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fe fec9 	bl	8002858 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e0ab      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad8:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ee      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x37e>
 8003ae4:	e014      	b.n	8003b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae6:	f7fe feb7 	bl	8002858 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aee:	f7fe feb3 	bl	8002858 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e095      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b04:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ee      	bne.n	8003aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d105      	bne.n	8003b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b16:	4b48      	ldr	r3, [pc, #288]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4a47      	ldr	r2, [pc, #284]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8081 	beq.w	8003c2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b2c:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d061      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d146      	bne.n	8003bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b40:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <HAL_RCC_OscConfig+0x4fc>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7fe fe87 	bl	8002858 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fe fe83 	bl	8002858 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e067      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b60:	4b35      	ldr	r3, [pc, #212]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d108      	bne.n	8003b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b76:	4b30      	ldr	r3, [pc, #192]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	492d      	ldr	r1, [pc, #180]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a19      	ldr	r1, [r3, #32]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	4927      	ldr	r1, [pc, #156]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba0:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <HAL_RCC_OscConfig+0x4fc>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fe fe57 	bl	8002858 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bae:	f7fe fe53 	bl	8002858 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e037      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x46a>
 8003bcc:	e02f      	b.n	8003c2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bce:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <HAL_RCC_OscConfig+0x4fc>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fe40 	bl	8002858 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fe fe3c 	bl	8002858 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e020      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x498>
 8003bfa:	e018      	b.n	8003c2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e013      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCC_OscConfig+0x4f4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d106      	bne.n	8003c2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	42420060 	.word	0x42420060

08003c44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0d0      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d910      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b67      	ldr	r3, [pc, #412]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 0207 	bic.w	r2, r3, #7
 8003c6e:	4965      	ldr	r1, [pc, #404]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0b8      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca0:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a58      	ldr	r2, [pc, #352]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003caa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cb8:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4a52      	ldr	r2, [pc, #328]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	494d      	ldr	r1, [pc, #308]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d040      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cea:	4b47      	ldr	r3, [pc, #284]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d115      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e07f      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d02:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e073      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e06b      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d22:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f023 0203 	bic.w	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4936      	ldr	r1, [pc, #216]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d34:	f7fe fd90 	bl	8002858 <HAL_GetTick>
 8003d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	e00a      	b.n	8003d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d3c:	f7fe fd8c 	bl	8002858 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e053      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 020c 	and.w	r2, r3, #12
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d1eb      	bne.n	8003d3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d210      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b24      	ldr	r3, [pc, #144]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 0207 	bic.w	r2, r3, #7
 8003d7a:	4922      	ldr	r1, [pc, #136]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b20      	ldr	r3, [pc, #128]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e032      	b.n	8003dfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4916      	ldr	r1, [pc, #88]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d009      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	490e      	ldr	r1, [pc, #56]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dd2:	f000 f821 	bl	8003e18 <HAL_RCC_GetSysClockFreq>
 8003dd6:	4601      	mov	r1, r0
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <HAL_RCC_ClockConfig+0x1c8>)
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
 8003de6:	fa21 f303 	lsr.w	r3, r1, r3
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <HAL_RCC_ClockConfig+0x1cc>)
 8003dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_RCC_ClockConfig+0x1d0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe fcee 	bl	80027d4 <HAL_InitTick>

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40022000 	.word	0x40022000
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	080080a0 	.word	0x080080a0
 8003e10:	20000400 	.word	0x20000400
 8003e14:	20000a44 	.word	0x20000a44

08003e18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e18:	b490      	push	{r4, r7}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e20:	1d3c      	adds	r4, r7, #4
 8003e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e28:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e42:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x40>
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x46>
 8003e56:	e02d      	b.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e5a:	623b      	str	r3, [r7, #32]
      break;
 8003e5c:	e02d      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	0c9b      	lsrs	r3, r3, #18
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	0c5b      	lsrs	r3, r3, #17
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e96:	fb02 f203 	mul.w	r2, r2, r3
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e004      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	4a0c      	ldr	r2, [pc, #48]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ea8:	fb02 f303 	mul.w	r3, r2, r3
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	623b      	str	r3, [r7, #32]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003eb4:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003eb6:	623b      	str	r3, [r7, #32]
      break;
 8003eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eba:	6a3b      	ldr	r3, [r7, #32]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3728      	adds	r7, #40	; 0x28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc90      	pop	{r4, r7}
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	0800808c 	.word	0x0800808c
 8003ecc:	0800809c 	.word	0x0800809c
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	007a1200 	.word	0x007a1200
 8003ed8:	003d0900 	.word	0x003d0900

08003edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee0:	4b02      	ldr	r3, [pc, #8]	; (8003eec <HAL_RCC_GetHCLKFreq+0x10>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	20000400 	.word	0x20000400

08003ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ef4:	f7ff fff2 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 8003ef8:	4601      	mov	r1, r0
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4a03      	ldr	r2, [pc, #12]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f06:	5cd3      	ldrb	r3, [r2, r3]
 8003f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	080080b0 	.word	0x080080b0

08003f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f1c:	f7ff ffde 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 8003f20:	4601      	mov	r1, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	0adb      	lsrs	r3, r3, #11
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4a03      	ldr	r2, [pc, #12]	; (8003f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	080080b0 	.word	0x080080b0

08003f40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <RCC_Delay+0x34>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <RCC_Delay+0x38>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0a5b      	lsrs	r3, r3, #9
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f5c:	bf00      	nop
  }
  while (Delay --);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1e5a      	subs	r2, r3, #1
 8003f62:	60fa      	str	r2, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f9      	bne.n	8003f5c <RCC_Delay+0x1c>
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000400 	.word	0x20000400
 8003f78:	10624dd3 	.word	0x10624dd3

08003f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e01d      	b.n	8003fca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd fc72 	bl	800188c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 fb62 	bl	8004684 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e01d      	b.n	8004020 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f815 	bl	8004028 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f000 fb37 	bl	8004684 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
	...

0800403c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d841      	bhi.n	80040d0 <HAL_TIM_IC_Start_IT+0x94>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <HAL_TIM_IC_Start_IT+0x18>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004089 	.word	0x08004089
 8004058:	080040d1 	.word	0x080040d1
 800405c:	080040d1 	.word	0x080040d1
 8004060:	080040d1 	.word	0x080040d1
 8004064:	0800409b 	.word	0x0800409b
 8004068:	080040d1 	.word	0x080040d1
 800406c:	080040d1 	.word	0x080040d1
 8004070:	080040d1 	.word	0x080040d1
 8004074:	080040ad 	.word	0x080040ad
 8004078:	080040d1 	.word	0x080040d1
 800407c:	080040d1 	.word	0x080040d1
 8004080:	080040d1 	.word	0x080040d1
 8004084:	080040bf 	.word	0x080040bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0202 	orr.w	r2, r2, #2
 8004096:	60da      	str	r2, [r3, #12]
      break;
 8004098:	e01b      	b.n	80040d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0204 	orr.w	r2, r2, #4
 80040a8:	60da      	str	r2, [r3, #12]
      break;
 80040aa:	e012      	b.n	80040d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	60da      	str	r2, [r3, #12]
      break;
 80040bc:	e009      	b.n	80040d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0210 	orr.w	r2, r2, #16
 80040cc:	60da      	str	r2, [r3, #12]
      break;
 80040ce:	e000      	b.n	80040d2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80040d0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2201      	movs	r2, #1
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fcd7 	bl	8004a8e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d007      	beq.n	8004102 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0201 	orr.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b02      	cmp	r3, #2
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0202 	mvn.w	r2, #2
 8004138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd fdc6 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa78 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fa7e 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d122      	bne.n	80041bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b04      	cmp	r3, #4
 8004182:	d11b      	bne.n	80041bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0204 	mvn.w	r2, #4
 800418c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fd fd9c 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa4e 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa54 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d122      	bne.n	8004210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d11b      	bne.n	8004210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0208 	mvn.w	r2, #8
 80041e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2204      	movs	r2, #4
 80041e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fd fd72 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 80041fc:	e005      	b.n	800420a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa24 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fa2a 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b10      	cmp	r3, #16
 800421c:	d122      	bne.n	8004264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b10      	cmp	r3, #16
 800422a:	d11b      	bne.n	8004264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0210 	mvn.w	r2, #16
 8004234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2208      	movs	r2, #8
 800423a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fd fd48 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8004250:	e005      	b.n	800425e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9fa 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fa00 	bl	800465e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d10e      	bne.n	8004290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d107      	bne.n	8004290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0201 	mvn.w	r2, #1
 8004288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd fcd0 	bl	8001c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d10e      	bne.n	80042bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d107      	bne.n	80042bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fc5a 	bl	8004b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d10e      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d107      	bne.n	80042e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f9c4 	bl	8004670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d10e      	bne.n	8004314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d107      	bne.n	8004314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0220 	mvn.w	r2, #32
 800430c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fc25 	bl	8004b5e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004332:	2302      	movs	r3, #2
 8004334:	e08a      	b.n	800444c <HAL_TIM_IC_ConfigChannel+0x130>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d11b      	bne.n	8004384 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f000 f9f4 	bl	8004748 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 020c 	bic.w	r2, r2, #12
 800436e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6999      	ldr	r1, [r3, #24]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	619a      	str	r2, [r3, #24]
 8004382:	e05a      	b.n	800443a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d11c      	bne.n	80043c4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	6819      	ldr	r1, [r3, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f000 fa5d 	bl	8004858 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6999      	ldr	r1, [r3, #24]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	021a      	lsls	r2, r3, #8
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	619a      	str	r2, [r3, #24]
 80043c2:	e03a      	b.n	800443a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d11b      	bne.n	8004402 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f000 faa8 	bl	800492e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 020c 	bic.w	r2, r2, #12
 80043ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69d9      	ldr	r1, [r3, #28]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	61da      	str	r2, [r3, #28]
 8004400:	e01b      	b.n	800443a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6819      	ldr	r1, [r3, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f000 fac7 	bl	80049a4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004424:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69d9      	ldr	r1, [r3, #28]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	021a      	lsls	r2, r3, #8
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_TIM_ConfigClockSource+0x18>
 8004468:	2302      	movs	r3, #2
 800446a:	e0a6      	b.n	80045ba <HAL_TIM_ConfigClockSource+0x166>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800448a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004492:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d067      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x120>
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d80b      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x6c>
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d073      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x140>
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d802      	bhi.n	80044b6 <HAL_TIM_ConfigClockSource+0x62>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d06f      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80044b4:	e078      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d06c      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x140>
 80044ba:	2b30      	cmp	r3, #48	; 0x30
 80044bc:	d06a      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044be:	e073      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044c0:	2b70      	cmp	r3, #112	; 0x70
 80044c2:	d00d      	beq.n	80044e0 <HAL_TIM_ConfigClockSource+0x8c>
 80044c4:	2b70      	cmp	r3, #112	; 0x70
 80044c6:	d804      	bhi.n	80044d2 <HAL_TIM_ConfigClockSource+0x7e>
 80044c8:	2b50      	cmp	r3, #80	; 0x50
 80044ca:	d033      	beq.n	8004534 <HAL_TIM_ConfigClockSource+0xe0>
 80044cc:	2b60      	cmp	r3, #96	; 0x60
 80044ce:	d041      	beq.n	8004554 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044d0:	e06a      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d6:	d066      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0x152>
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044dc:	d017      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044de:	e063      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	6899      	ldr	r1, [r3, #8]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f000 faae 	bl	8004a50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004502:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	609a      	str	r2, [r3, #8]
      break;
 800450c:	e04c      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6899      	ldr	r1, [r3, #8]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f000 fa97 	bl	8004a50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004530:	609a      	str	r2, [r3, #8]
      break;
 8004532:	e039      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	461a      	mov	r2, r3
 8004542:	f000 f95b 	bl	80047fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2150      	movs	r1, #80	; 0x50
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fa65 	bl	8004a1c <TIM_ITRx_SetConfig>
      break;
 8004552:	e029      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	461a      	mov	r2, r3
 8004562:	f000 f9b5 	bl	80048d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2160      	movs	r1, #96	; 0x60
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fa55 	bl	8004a1c <TIM_ITRx_SetConfig>
      break;
 8004572:	e019      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	461a      	mov	r2, r3
 8004582:	f000 f93b 	bl	80047fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2140      	movs	r1, #64	; 0x40
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fa45 	bl	8004a1c <TIM_ITRx_SetConfig>
      break;
 8004592:	e009      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f000 fa3c 	bl	8004a1c <TIM_ITRx_SetConfig>
      break;
 80045a4:	e000      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80045a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	d831      	bhi.n	800463c <HAL_TIM_ReadCapturedValue+0x78>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004615 	.word	0x08004615
 80045e4:	0800463d 	.word	0x0800463d
 80045e8:	0800463d 	.word	0x0800463d
 80045ec:	0800463d 	.word	0x0800463d
 80045f0:	0800461f 	.word	0x0800461f
 80045f4:	0800463d 	.word	0x0800463d
 80045f8:	0800463d 	.word	0x0800463d
 80045fc:	0800463d 	.word	0x0800463d
 8004600:	08004629 	.word	0x08004629
 8004604:	0800463d 	.word	0x0800463d
 8004608:	0800463d 	.word	0x0800463d
 800460c:	0800463d 	.word	0x0800463d
 8004610:	08004633 	.word	0x08004633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461a:	60fb      	str	r3, [r7, #12]

      break;
 800461c:	e00f      	b.n	800463e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	60fb      	str	r3, [r7, #12]

      break;
 8004626:	e00a      	b.n	800463e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	60fb      	str	r3, [r7, #12]

      break;
 8004630:	e005      	b.n	800463e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	60fb      	str	r3, [r7, #12]

      break;
 800463a:	e000      	b.n	800463e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800463c:	bf00      	nop
  }

  return tmpreg;
 800463e:	68fb      	ldr	r3, [r7, #12]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop

0800464c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
	...

08004684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a29      	ldr	r2, [pc, #164]	; (800473c <TIM_Base_SetConfig+0xb8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00b      	beq.n	80046b4 <TIM_Base_SetConfig+0x30>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a2:	d007      	beq.n	80046b4 <TIM_Base_SetConfig+0x30>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a26      	ldr	r2, [pc, #152]	; (8004740 <TIM_Base_SetConfig+0xbc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_Base_SetConfig+0x30>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a25      	ldr	r2, [pc, #148]	; (8004744 <TIM_Base_SetConfig+0xc0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1c      	ldr	r2, [pc, #112]	; (800473c <TIM_Base_SetConfig+0xb8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <TIM_Base_SetConfig+0x62>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d007      	beq.n	80046e6 <TIM_Base_SetConfig+0x62>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a19      	ldr	r2, [pc, #100]	; (8004740 <TIM_Base_SetConfig+0xbc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <TIM_Base_SetConfig+0x62>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a18      	ldr	r2, [pc, #96]	; (8004744 <TIM_Base_SetConfig+0xc0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d108      	bne.n	80046f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a07      	ldr	r2, [pc, #28]	; (800473c <TIM_Base_SetConfig+0xb8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d103      	bne.n	800472c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	615a      	str	r2, [r3, #20]
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800

08004748 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <TIM_TI1_SetConfig+0xa8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00b      	beq.n	800478e <TIM_TI1_SetConfig+0x46>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477c:	d007      	beq.n	800478e <TIM_TI1_SetConfig+0x46>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <TIM_TI1_SetConfig+0xac>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_TI1_SetConfig+0x46>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a1b      	ldr	r2, [pc, #108]	; (80047f8 <TIM_TI1_SetConfig+0xb0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <TIM_TI1_SetConfig+0x4a>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <TIM_TI1_SetConfig+0x4c>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e003      	b.n	80047b2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f023 030a 	bic.w	r3, r3, #10
 80047cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f003 030a 	and.w	r3, r3, #10
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800

080047fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f023 0201 	bic.w	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 030a 	bic.w	r3, r3, #10
 8004838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004858:	b480      	push	{r7}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0210 	bic.w	r2, r3, #16
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004896:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	031b      	lsls	r3, r3, #12
 800489c:	b29b      	uxth	r3, r3
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	f023 0210 	bic.w	r2, r3, #16
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	031b      	lsls	r3, r3, #12
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800490c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	621a      	str	r2, [r3, #32]
}
 8004924:	bf00      	nop
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800492e:	b480      	push	{r7}
 8004930:	b087      	sub	sp, #28
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
 800493a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f023 0303 	bic.w	r3, r3, #3
 800495a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800496a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	b2db      	uxtb	r3, r3
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800497e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	031b      	lsls	r3, r3, #12
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	031b      	lsls	r3, r3, #12
 80049fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f043 0307 	orr.w	r3, r3, #7
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	609a      	str	r2, [r3, #8]
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	021a      	lsls	r2, r3, #8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	609a      	str	r2, [r3, #8]
}
 8004a84:	bf00      	nop
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b087      	sub	sp, #28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1a      	ldr	r2, [r3, #32]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	401a      	ands	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1a      	ldr	r2, [r3, #32]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	621a      	str	r2, [r3, #32]
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e032      	b.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b26:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr

08004b82 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e03f      	b.n	8004c14 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d106      	bne.n	8004bae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fc ff31 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2224      	movs	r2, #36	; 0x24
 8004bb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fb8e 	bl	80052e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	f040 8083 	bne.w	8004d44 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <HAL_UART_Transmit+0x2e>
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e07b      	b.n	8004d46 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_UART_Transmit+0x40>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e074      	b.n	8004d46 <HAL_UART_Transmit+0x12a>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2221      	movs	r2, #33	; 0x21
 8004c6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004c72:	f7fd fdf1 	bl	8002858 <HAL_GetTick>
 8004c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c84:	e042      	b.n	8004d0c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d122      	bne.n	8004ce4 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2180      	movs	r1, #128	; 0x80
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f9b3 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e046      	b.n	8004d46 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cca:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d103      	bne.n	8004cdc <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	e017      	b.n	8004d0c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	e013      	b.n	8004d0c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2200      	movs	r2, #0
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f990 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e023      	b.n	8004d46 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	60ba      	str	r2, [r7, #8]
 8004d04:	781a      	ldrb	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1b7      	bne.n	8004c86 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2140      	movs	r1, #64	; 0x40
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f977 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e00a      	b.n	8004d46 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	e000      	b.n	8004d46 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004d44:	2302      	movs	r3, #2
  }
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d140      	bne.n	8004dea <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_UART_Receive_IT+0x26>
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e039      	b.n	8004dec <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_UART_Receive_IT+0x38>
 8004d82:	2302      	movs	r3, #2
 8004d84:	e032      	b.n	8004dec <HAL_UART_Receive_IT+0x9e>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	88fa      	ldrh	r2, [r7, #6]
 8004d98:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	88fa      	ldrh	r2, [r7, #6]
 8004d9e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2222      	movs	r2, #34	; 0x22
 8004daa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0220 	orr.w	r2, r2, #32
 8004de4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
  }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
	...

08004df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10d      	bne.n	8004e4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_UART_IRQHandler+0x52>
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9ce 	bl	80051e4 <UART_Receive_IT>
      return;
 8004e48:	e0cc      	b.n	8004fe4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80ab 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x1b0>
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d105      	bne.n	8004e68 <HAL_UART_IRQHandler+0x70>
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80a0 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_UART_IRQHandler+0x90>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e80:	f043 0201 	orr.w	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_UART_IRQHandler+0xb0>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea0:	f043 0202 	orr.w	r2, r3, #2
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_UART_IRQHandler+0xd0>
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	f043 0204 	orr.w	r2, r3, #4
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_UART_IRQHandler+0xf0>
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee0:	f043 0208 	orr.w	r2, r3, #8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d078      	beq.n	8004fe2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <HAL_UART_IRQHandler+0x112>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f96d 	bl	80051e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf14      	ite	ne
 8004f18:	2301      	movne	r3, #1
 8004f1a:	2300      	moveq	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <HAL_UART_IRQHandler+0x13a>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d031      	beq.n	8004f96 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8b8 	bl	80050a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d023      	beq.n	8004f8e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d013      	beq.n	8004f86 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f62:	4a22      	ldr	r2, [pc, #136]	; (8004fec <HAL_UART_IRQHandler+0x1f4>)
 8004f64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd fdae 	bl	8002acc <HAL_DMA_Abort_IT>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f80:	4610      	mov	r0, r2
 8004f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e00e      	b.n	8004fa4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f83b 	bl	8005002 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	e00a      	b.n	8004fa4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f837 	bl	8005002 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	e006      	b.n	8004fa4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f833 	bl	8005002 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004fa2:	e01e      	b.n	8004fe2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	bf00      	nop
    return;
 8004fa6:	e01c      	b.n	8004fe2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d008      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x1cc>
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f8a4 	bl	800510a <UART_Transmit_IT>
    return;
 8004fc2:	e00f      	b.n	8004fe4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x1ec>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f8eb 	bl	80051b4 <UART_EndTransmit_IT>
    return;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004fe2:	bf00      	nop
  }
}
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	080050e3 	.word	0x080050e3

08004ff0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr

08005002 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	4613      	mov	r3, r2
 8005022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005024:	e02c      	b.n	8005080 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d028      	beq.n	8005080 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <UART_WaitOnFlagUntilTimeout+0x30>
 8005034:	f7fd fc10 	bl	8002858 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	429a      	cmp	r2, r3
 8005042:	d21d      	bcs.n	8005080 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005052:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e00f      	b.n	80050a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	429a      	cmp	r2, r3
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	429a      	cmp	r2, r3
 800509c:	d0c3      	beq.n	8005026 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050be:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0201 	bic.w	r2, r2, #1
 80050ce:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff ff80 	bl	8005002 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b21      	cmp	r3, #33	; 0x21
 800511c:	d144      	bne.n	80051a8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	d11a      	bne.n	800515e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800513c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d105      	bne.n	8005152 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	621a      	str	r2, [r3, #32]
 8005150:	e00e      	b.n	8005170 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	621a      	str	r2, [r3, #32]
 800515c:	e008      	b.n	8005170 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6211      	str	r1, [r2, #32]
 8005168:	781a      	ldrb	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29b      	uxth	r3, r3
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4619      	mov	r1, r3
 800517e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10f      	bne.n	80051a4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005192:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	e000      	b.n	80051aa <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80051a8:	2302      	movs	r3, #2
  }
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr

080051b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff ff0b 	bl	8004ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b22      	cmp	r3, #34	; 0x22
 80051f6:	d171      	bne.n	80052dc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005200:	d123      	bne.n	800524a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10e      	bne.n	800522e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	1c9a      	adds	r2, r3, #2
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
 800522c:	e029      	b.n	8005282 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	b29b      	uxth	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	629a      	str	r2, [r3, #40]	; 0x28
 8005248:	e01b      	b.n	8005282 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6858      	ldr	r0, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	1c59      	adds	r1, r3, #1
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6291      	str	r1, [r2, #40]	; 0x28
 8005262:	b2c2      	uxtb	r2, r0
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e00c      	b.n	8005282 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	b2da      	uxtb	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	1c58      	adds	r0, r3, #1
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	6288      	str	r0, [r1, #40]	; 0x28
 800527a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005286:	b29b      	uxth	r3, r3
 8005288:	3b01      	subs	r3, #1
 800528a:	b29b      	uxth	r3, r3
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4619      	mov	r1, r3
 8005290:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005292:	2b00      	cmp	r3, #0
 8005294:	d120      	bne.n	80052d8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0220 	bic.w	r2, r2, #32
 80052a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fd f976 	bl	80025c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e002      	b.n	80052de <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005322:	f023 030c 	bic.w	r3, r3, #12
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	430b      	orrs	r3, r1
 800532e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a52      	ldr	r2, [pc, #328]	; (8005494 <UART_SetConfig+0x1ac>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d14e      	bne.n	80053ee <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005350:	f7fe fde2 	bl	8003f18 <HAL_RCC_GetPCLK2Freq>
 8005354:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009a      	lsls	r2, r3, #2
 8005360:	441a      	add	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	4a4a      	ldr	r2, [pc, #296]	; (8005498 <UART_SetConfig+0x1b0>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	0119      	lsls	r1, r3, #4
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009a      	lsls	r2, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	fbb2 f2f3 	udiv	r2, r2, r3
 800538c:	4b42      	ldr	r3, [pc, #264]	; (8005498 <UART_SetConfig+0x1b0>)
 800538e:	fba3 0302 	umull	r0, r3, r3, r2
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2064      	movs	r0, #100	; 0x64
 8005396:	fb00 f303 	mul.w	r3, r0, r3
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	3332      	adds	r3, #50	; 0x32
 80053a0:	4a3d      	ldr	r2, [pc, #244]	; (8005498 <UART_SetConfig+0x1b0>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ac:	4419      	add	r1, r3
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009a      	lsls	r2, r3, #2
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c4:	4b34      	ldr	r3, [pc, #208]	; (8005498 <UART_SetConfig+0x1b0>)
 80053c6:	fba3 0302 	umull	r0, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	2064      	movs	r0, #100	; 0x64
 80053ce:	fb00 f303 	mul.w	r3, r0, r3
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	3332      	adds	r3, #50	; 0x32
 80053d8:	4a2f      	ldr	r2, [pc, #188]	; (8005498 <UART_SetConfig+0x1b0>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f003 020f 	and.w	r2, r3, #15
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	440a      	add	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80053ec:	e04d      	b.n	800548a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80053ee:	f7fe fd7f 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 80053f2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009a      	lsls	r2, r3, #2
 80053fe:	441a      	add	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	fbb2 f3f3 	udiv	r3, r2, r3
 800540a:	4a23      	ldr	r2, [pc, #140]	; (8005498 <UART_SetConfig+0x1b0>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	0119      	lsls	r1, r3, #4
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009a      	lsls	r2, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	fbb2 f2f3 	udiv	r2, r2, r3
 800542a:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <UART_SetConfig+0x1b0>)
 800542c:	fba3 0302 	umull	r0, r3, r3, r2
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	2064      	movs	r0, #100	; 0x64
 8005434:	fb00 f303 	mul.w	r3, r0, r3
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	3332      	adds	r3, #50	; 0x32
 800543e:	4a16      	ldr	r2, [pc, #88]	; (8005498 <UART_SetConfig+0x1b0>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800544a:	4419      	add	r1, r3
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009a      	lsls	r2, r3, #2
 8005456:	441a      	add	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <UART_SetConfig+0x1b0>)
 8005464:	fba3 0302 	umull	r0, r3, r3, r2
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	2064      	movs	r0, #100	; 0x64
 800546c:	fb00 f303 	mul.w	r3, r0, r3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	3332      	adds	r3, #50	; 0x32
 8005476:	4a08      	ldr	r2, [pc, #32]	; (8005498 <UART_SetConfig+0x1b0>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	f003 020f 	and.w	r2, r3, #15
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	440a      	add	r2, r1
 8005488:	609a      	str	r2, [r3, #8]
}
 800548a:	bf00      	nop
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40013800 	.word	0x40013800
 8005498:	51eb851f 	.word	0x51eb851f

0800549c <__errno>:
 800549c:	4b01      	ldr	r3, [pc, #4]	; (80054a4 <__errno+0x8>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000a4c 	.word	0x20000a4c

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	2500      	movs	r5, #0
 80054ac:	4e0c      	ldr	r6, [pc, #48]	; (80054e0 <__libc_init_array+0x38>)
 80054ae:	4c0d      	ldr	r4, [pc, #52]	; (80054e4 <__libc_init_array+0x3c>)
 80054b0:	1ba4      	subs	r4, r4, r6
 80054b2:	10a4      	asrs	r4, r4, #2
 80054b4:	42a5      	cmp	r5, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	f002 fd66 	bl	8007f88 <_init>
 80054bc:	2500      	movs	r5, #0
 80054be:	4e0a      	ldr	r6, [pc, #40]	; (80054e8 <__libc_init_array+0x40>)
 80054c0:	4c0a      	ldr	r4, [pc, #40]	; (80054ec <__libc_init_array+0x44>)
 80054c2:	1ba4      	subs	r4, r4, r6
 80054c4:	10a4      	asrs	r4, r4, #2
 80054c6:	42a5      	cmp	r5, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054d0:	4798      	blx	r3
 80054d2:	3501      	adds	r5, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054da:	4798      	blx	r3
 80054dc:	3501      	adds	r5, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	08008b90 	.word	0x08008b90
 80054e4:	08008b90 	.word	0x08008b90
 80054e8:	08008b90 	.word	0x08008b90
 80054ec:	08008b94 	.word	0x08008b94

080054f0 <memset>:
 80054f0:	4603      	mov	r3, r0
 80054f2:	4402      	add	r2, r0
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d100      	bne.n	80054fa <memset+0xa>
 80054f8:	4770      	bx	lr
 80054fa:	f803 1b01 	strb.w	r1, [r3], #1
 80054fe:	e7f9      	b.n	80054f4 <memset+0x4>

08005500 <__cvt>:
 8005500:	2b00      	cmp	r3, #0
 8005502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005506:	461e      	mov	r6, r3
 8005508:	bfbb      	ittet	lt
 800550a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800550e:	461e      	movlt	r6, r3
 8005510:	2300      	movge	r3, #0
 8005512:	232d      	movlt	r3, #45	; 0x2d
 8005514:	b088      	sub	sp, #32
 8005516:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005518:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800551c:	f027 0720 	bic.w	r7, r7, #32
 8005520:	2f46      	cmp	r7, #70	; 0x46
 8005522:	4614      	mov	r4, r2
 8005524:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005526:	700b      	strb	r3, [r1, #0]
 8005528:	d004      	beq.n	8005534 <__cvt+0x34>
 800552a:	2f45      	cmp	r7, #69	; 0x45
 800552c:	d100      	bne.n	8005530 <__cvt+0x30>
 800552e:	3501      	adds	r5, #1
 8005530:	2302      	movs	r3, #2
 8005532:	e000      	b.n	8005536 <__cvt+0x36>
 8005534:	2303      	movs	r3, #3
 8005536:	aa07      	add	r2, sp, #28
 8005538:	9204      	str	r2, [sp, #16]
 800553a:	aa06      	add	r2, sp, #24
 800553c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005540:	e9cd 3500 	strd	r3, r5, [sp]
 8005544:	4622      	mov	r2, r4
 8005546:	4633      	mov	r3, r6
 8005548:	f000 fe16 	bl	8006178 <_dtoa_r>
 800554c:	2f47      	cmp	r7, #71	; 0x47
 800554e:	4680      	mov	r8, r0
 8005550:	d102      	bne.n	8005558 <__cvt+0x58>
 8005552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005554:	07db      	lsls	r3, r3, #31
 8005556:	d526      	bpl.n	80055a6 <__cvt+0xa6>
 8005558:	2f46      	cmp	r7, #70	; 0x46
 800555a:	eb08 0905 	add.w	r9, r8, r5
 800555e:	d111      	bne.n	8005584 <__cvt+0x84>
 8005560:	f898 3000 	ldrb.w	r3, [r8]
 8005564:	2b30      	cmp	r3, #48	; 0x30
 8005566:	d10a      	bne.n	800557e <__cvt+0x7e>
 8005568:	2200      	movs	r2, #0
 800556a:	2300      	movs	r3, #0
 800556c:	4620      	mov	r0, r4
 800556e:	4631      	mov	r1, r6
 8005570:	f7fb fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8005574:	b918      	cbnz	r0, 800557e <__cvt+0x7e>
 8005576:	f1c5 0501 	rsb	r5, r5, #1
 800557a:	f8ca 5000 	str.w	r5, [sl]
 800557e:	f8da 3000 	ldr.w	r3, [sl]
 8005582:	4499      	add	r9, r3
 8005584:	2200      	movs	r2, #0
 8005586:	2300      	movs	r3, #0
 8005588:	4620      	mov	r0, r4
 800558a:	4631      	mov	r1, r6
 800558c:	f7fb fa0c 	bl	80009a8 <__aeabi_dcmpeq>
 8005590:	b938      	cbnz	r0, 80055a2 <__cvt+0xa2>
 8005592:	2230      	movs	r2, #48	; 0x30
 8005594:	9b07      	ldr	r3, [sp, #28]
 8005596:	454b      	cmp	r3, r9
 8005598:	d205      	bcs.n	80055a6 <__cvt+0xa6>
 800559a:	1c59      	adds	r1, r3, #1
 800559c:	9107      	str	r1, [sp, #28]
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e7f8      	b.n	8005594 <__cvt+0x94>
 80055a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80055a6:	4640      	mov	r0, r8
 80055a8:	9b07      	ldr	r3, [sp, #28]
 80055aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80055ac:	eba3 0308 	sub.w	r3, r3, r8
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	b008      	add	sp, #32
 80055b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080055b8 <__exponent>:
 80055b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ba:	2900      	cmp	r1, #0
 80055bc:	bfb4      	ite	lt
 80055be:	232d      	movlt	r3, #45	; 0x2d
 80055c0:	232b      	movge	r3, #43	; 0x2b
 80055c2:	4604      	mov	r4, r0
 80055c4:	bfb8      	it	lt
 80055c6:	4249      	neglt	r1, r1
 80055c8:	2909      	cmp	r1, #9
 80055ca:	f804 2b02 	strb.w	r2, [r4], #2
 80055ce:	7043      	strb	r3, [r0, #1]
 80055d0:	dd21      	ble.n	8005616 <__exponent+0x5e>
 80055d2:	f10d 0307 	add.w	r3, sp, #7
 80055d6:	461f      	mov	r7, r3
 80055d8:	260a      	movs	r6, #10
 80055da:	fb91 f5f6 	sdiv	r5, r1, r6
 80055de:	fb06 1115 	mls	r1, r6, r5, r1
 80055e2:	2d09      	cmp	r5, #9
 80055e4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80055e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055ec:	f103 32ff 	add.w	r2, r3, #4294967295
 80055f0:	4629      	mov	r1, r5
 80055f2:	dc09      	bgt.n	8005608 <__exponent+0x50>
 80055f4:	3130      	adds	r1, #48	; 0x30
 80055f6:	3b02      	subs	r3, #2
 80055f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80055fc:	42bb      	cmp	r3, r7
 80055fe:	4622      	mov	r2, r4
 8005600:	d304      	bcc.n	800560c <__exponent+0x54>
 8005602:	1a10      	subs	r0, r2, r0
 8005604:	b003      	add	sp, #12
 8005606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005608:	4613      	mov	r3, r2
 800560a:	e7e6      	b.n	80055da <__exponent+0x22>
 800560c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005610:	f804 2b01 	strb.w	r2, [r4], #1
 8005614:	e7f2      	b.n	80055fc <__exponent+0x44>
 8005616:	2330      	movs	r3, #48	; 0x30
 8005618:	4419      	add	r1, r3
 800561a:	7083      	strb	r3, [r0, #2]
 800561c:	1d02      	adds	r2, r0, #4
 800561e:	70c1      	strb	r1, [r0, #3]
 8005620:	e7ef      	b.n	8005602 <__exponent+0x4a>
	...

08005624 <_printf_float>:
 8005624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005628:	b091      	sub	sp, #68	; 0x44
 800562a:	460c      	mov	r4, r1
 800562c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800562e:	4693      	mov	fp, r2
 8005630:	461e      	mov	r6, r3
 8005632:	4605      	mov	r5, r0
 8005634:	f001 fcce 	bl	8006fd4 <_localeconv_r>
 8005638:	6803      	ldr	r3, [r0, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	9309      	str	r3, [sp, #36]	; 0x24
 800563e:	f7fa fd87 	bl	8000150 <strlen>
 8005642:	2300      	movs	r3, #0
 8005644:	930e      	str	r3, [sp, #56]	; 0x38
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	900a      	str	r0, [sp, #40]	; 0x28
 800564a:	3307      	adds	r3, #7
 800564c:	f023 0307 	bic.w	r3, r3, #7
 8005650:	f103 0208 	add.w	r2, r3, #8
 8005654:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005658:	f8d4 a000 	ldr.w	sl, [r4]
 800565c:	603a      	str	r2, [r7, #0]
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005666:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800566a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800566e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005670:	f04f 32ff 	mov.w	r2, #4294967295
 8005674:	4ba6      	ldr	r3, [pc, #664]	; (8005910 <_printf_float+0x2ec>)
 8005676:	4638      	mov	r0, r7
 8005678:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800567a:	f7fb f9c7 	bl	8000a0c <__aeabi_dcmpun>
 800567e:	bb68      	cbnz	r0, 80056dc <_printf_float+0xb8>
 8005680:	f04f 32ff 	mov.w	r2, #4294967295
 8005684:	4ba2      	ldr	r3, [pc, #648]	; (8005910 <_printf_float+0x2ec>)
 8005686:	4638      	mov	r0, r7
 8005688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800568a:	f7fb f9a1 	bl	80009d0 <__aeabi_dcmple>
 800568e:	bb28      	cbnz	r0, 80056dc <_printf_float+0xb8>
 8005690:	2200      	movs	r2, #0
 8005692:	2300      	movs	r3, #0
 8005694:	4638      	mov	r0, r7
 8005696:	4649      	mov	r1, r9
 8005698:	f7fb f990 	bl	80009bc <__aeabi_dcmplt>
 800569c:	b110      	cbz	r0, 80056a4 <_printf_float+0x80>
 800569e:	232d      	movs	r3, #45	; 0x2d
 80056a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056a4:	4f9b      	ldr	r7, [pc, #620]	; (8005914 <_printf_float+0x2f0>)
 80056a6:	4b9c      	ldr	r3, [pc, #624]	; (8005918 <_printf_float+0x2f4>)
 80056a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056ac:	bf98      	it	ls
 80056ae:	461f      	movls	r7, r3
 80056b0:	2303      	movs	r3, #3
 80056b2:	f04f 0900 	mov.w	r9, #0
 80056b6:	6123      	str	r3, [r4, #16]
 80056b8:	f02a 0304 	bic.w	r3, sl, #4
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	9600      	str	r6, [sp, #0]
 80056c0:	465b      	mov	r3, fp
 80056c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80056c4:	4621      	mov	r1, r4
 80056c6:	4628      	mov	r0, r5
 80056c8:	f000 f9e2 	bl	8005a90 <_printf_common>
 80056cc:	3001      	adds	r0, #1
 80056ce:	f040 8090 	bne.w	80057f2 <_printf_float+0x1ce>
 80056d2:	f04f 30ff 	mov.w	r0, #4294967295
 80056d6:	b011      	add	sp, #68	; 0x44
 80056d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056dc:	463a      	mov	r2, r7
 80056de:	464b      	mov	r3, r9
 80056e0:	4638      	mov	r0, r7
 80056e2:	4649      	mov	r1, r9
 80056e4:	f7fb f992 	bl	8000a0c <__aeabi_dcmpun>
 80056e8:	b110      	cbz	r0, 80056f0 <_printf_float+0xcc>
 80056ea:	4f8c      	ldr	r7, [pc, #560]	; (800591c <_printf_float+0x2f8>)
 80056ec:	4b8c      	ldr	r3, [pc, #560]	; (8005920 <_printf_float+0x2fc>)
 80056ee:	e7db      	b.n	80056a8 <_printf_float+0x84>
 80056f0:	6863      	ldr	r3, [r4, #4]
 80056f2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	a80d      	add	r0, sp, #52	; 0x34
 80056fa:	a90e      	add	r1, sp, #56	; 0x38
 80056fc:	d140      	bne.n	8005780 <_printf_float+0x15c>
 80056fe:	2306      	movs	r3, #6
 8005700:	6063      	str	r3, [r4, #4]
 8005702:	f04f 0c00 	mov.w	ip, #0
 8005706:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800570a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800570e:	6863      	ldr	r3, [r4, #4]
 8005710:	6022      	str	r2, [r4, #0]
 8005712:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	463a      	mov	r2, r7
 800571a:	464b      	mov	r3, r9
 800571c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005720:	4628      	mov	r0, r5
 8005722:	f7ff feed 	bl	8005500 <__cvt>
 8005726:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800572a:	2b47      	cmp	r3, #71	; 0x47
 800572c:	4607      	mov	r7, r0
 800572e:	d109      	bne.n	8005744 <_printf_float+0x120>
 8005730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005732:	1cd8      	adds	r0, r3, #3
 8005734:	db02      	blt.n	800573c <_printf_float+0x118>
 8005736:	6862      	ldr	r2, [r4, #4]
 8005738:	4293      	cmp	r3, r2
 800573a:	dd47      	ble.n	80057cc <_printf_float+0x1a8>
 800573c:	f1a8 0802 	sub.w	r8, r8, #2
 8005740:	fa5f f888 	uxtb.w	r8, r8
 8005744:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005748:	990d      	ldr	r1, [sp, #52]	; 0x34
 800574a:	d824      	bhi.n	8005796 <_printf_float+0x172>
 800574c:	3901      	subs	r1, #1
 800574e:	4642      	mov	r2, r8
 8005750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005754:	910d      	str	r1, [sp, #52]	; 0x34
 8005756:	f7ff ff2f 	bl	80055b8 <__exponent>
 800575a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800575c:	4681      	mov	r9, r0
 800575e:	1813      	adds	r3, r2, r0
 8005760:	2a01      	cmp	r2, #1
 8005762:	6123      	str	r3, [r4, #16]
 8005764:	dc02      	bgt.n	800576c <_printf_float+0x148>
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	07d1      	lsls	r1, r2, #31
 800576a:	d501      	bpl.n	8005770 <_printf_float+0x14c>
 800576c:	3301      	adds	r3, #1
 800576e:	6123      	str	r3, [r4, #16]
 8005770:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0a2      	beq.n	80056be <_printf_float+0x9a>
 8005778:	232d      	movs	r3, #45	; 0x2d
 800577a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800577e:	e79e      	b.n	80056be <_printf_float+0x9a>
 8005780:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005784:	f000 816e 	beq.w	8005a64 <_printf_float+0x440>
 8005788:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800578c:	d1b9      	bne.n	8005702 <_printf_float+0xde>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1b7      	bne.n	8005702 <_printf_float+0xde>
 8005792:	2301      	movs	r3, #1
 8005794:	e7b4      	b.n	8005700 <_printf_float+0xdc>
 8005796:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800579a:	d119      	bne.n	80057d0 <_printf_float+0x1ac>
 800579c:	2900      	cmp	r1, #0
 800579e:	6863      	ldr	r3, [r4, #4]
 80057a0:	dd0c      	ble.n	80057bc <_printf_float+0x198>
 80057a2:	6121      	str	r1, [r4, #16]
 80057a4:	b913      	cbnz	r3, 80057ac <_printf_float+0x188>
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	07d2      	lsls	r2, r2, #31
 80057aa:	d502      	bpl.n	80057b2 <_printf_float+0x18e>
 80057ac:	3301      	adds	r3, #1
 80057ae:	440b      	add	r3, r1
 80057b0:	6123      	str	r3, [r4, #16]
 80057b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057b4:	f04f 0900 	mov.w	r9, #0
 80057b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80057ba:	e7d9      	b.n	8005770 <_printf_float+0x14c>
 80057bc:	b913      	cbnz	r3, 80057c4 <_printf_float+0x1a0>
 80057be:	6822      	ldr	r2, [r4, #0]
 80057c0:	07d0      	lsls	r0, r2, #31
 80057c2:	d501      	bpl.n	80057c8 <_printf_float+0x1a4>
 80057c4:	3302      	adds	r3, #2
 80057c6:	e7f3      	b.n	80057b0 <_printf_float+0x18c>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e7f1      	b.n	80057b0 <_printf_float+0x18c>
 80057cc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80057d0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80057d4:	4293      	cmp	r3, r2
 80057d6:	db05      	blt.n	80057e4 <_printf_float+0x1c0>
 80057d8:	6822      	ldr	r2, [r4, #0]
 80057da:	6123      	str	r3, [r4, #16]
 80057dc:	07d1      	lsls	r1, r2, #31
 80057de:	d5e8      	bpl.n	80057b2 <_printf_float+0x18e>
 80057e0:	3301      	adds	r3, #1
 80057e2:	e7e5      	b.n	80057b0 <_printf_float+0x18c>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bfcc      	ite	gt
 80057e8:	2301      	movgt	r3, #1
 80057ea:	f1c3 0302 	rsble	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	e7de      	b.n	80057b0 <_printf_float+0x18c>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	055a      	lsls	r2, r3, #21
 80057f6:	d407      	bmi.n	8005808 <_printf_float+0x1e4>
 80057f8:	6923      	ldr	r3, [r4, #16]
 80057fa:	463a      	mov	r2, r7
 80057fc:	4659      	mov	r1, fp
 80057fe:	4628      	mov	r0, r5
 8005800:	47b0      	blx	r6
 8005802:	3001      	adds	r0, #1
 8005804:	d129      	bne.n	800585a <_printf_float+0x236>
 8005806:	e764      	b.n	80056d2 <_printf_float+0xae>
 8005808:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800580c:	f240 80d7 	bls.w	80059be <_printf_float+0x39a>
 8005810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005814:	2200      	movs	r2, #0
 8005816:	2300      	movs	r3, #0
 8005818:	f7fb f8c6 	bl	80009a8 <__aeabi_dcmpeq>
 800581c:	b388      	cbz	r0, 8005882 <_printf_float+0x25e>
 800581e:	2301      	movs	r3, #1
 8005820:	4a40      	ldr	r2, [pc, #256]	; (8005924 <_printf_float+0x300>)
 8005822:	4659      	mov	r1, fp
 8005824:	4628      	mov	r0, r5
 8005826:	47b0      	blx	r6
 8005828:	3001      	adds	r0, #1
 800582a:	f43f af52 	beq.w	80056d2 <_printf_float+0xae>
 800582e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005832:	429a      	cmp	r2, r3
 8005834:	db02      	blt.n	800583c <_printf_float+0x218>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	07d8      	lsls	r0, r3, #31
 800583a:	d50e      	bpl.n	800585a <_printf_float+0x236>
 800583c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005840:	4659      	mov	r1, fp
 8005842:	4628      	mov	r0, r5
 8005844:	47b0      	blx	r6
 8005846:	3001      	adds	r0, #1
 8005848:	f43f af43 	beq.w	80056d2 <_printf_float+0xae>
 800584c:	2700      	movs	r7, #0
 800584e:	f104 081a 	add.w	r8, r4, #26
 8005852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005854:	3b01      	subs	r3, #1
 8005856:	42bb      	cmp	r3, r7
 8005858:	dc09      	bgt.n	800586e <_printf_float+0x24a>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	079f      	lsls	r7, r3, #30
 800585e:	f100 80fd 	bmi.w	8005a5c <_printf_float+0x438>
 8005862:	68e0      	ldr	r0, [r4, #12]
 8005864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005866:	4298      	cmp	r0, r3
 8005868:	bfb8      	it	lt
 800586a:	4618      	movlt	r0, r3
 800586c:	e733      	b.n	80056d6 <_printf_float+0xb2>
 800586e:	2301      	movs	r3, #1
 8005870:	4642      	mov	r2, r8
 8005872:	4659      	mov	r1, fp
 8005874:	4628      	mov	r0, r5
 8005876:	47b0      	blx	r6
 8005878:	3001      	adds	r0, #1
 800587a:	f43f af2a 	beq.w	80056d2 <_printf_float+0xae>
 800587e:	3701      	adds	r7, #1
 8005880:	e7e7      	b.n	8005852 <_printf_float+0x22e>
 8005882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005884:	2b00      	cmp	r3, #0
 8005886:	dc2b      	bgt.n	80058e0 <_printf_float+0x2bc>
 8005888:	2301      	movs	r3, #1
 800588a:	4a26      	ldr	r2, [pc, #152]	; (8005924 <_printf_float+0x300>)
 800588c:	4659      	mov	r1, fp
 800588e:	4628      	mov	r0, r5
 8005890:	47b0      	blx	r6
 8005892:	3001      	adds	r0, #1
 8005894:	f43f af1d 	beq.w	80056d2 <_printf_float+0xae>
 8005898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800589a:	b923      	cbnz	r3, 80058a6 <_printf_float+0x282>
 800589c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800589e:	b913      	cbnz	r3, 80058a6 <_printf_float+0x282>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	07d9      	lsls	r1, r3, #31
 80058a4:	d5d9      	bpl.n	800585a <_printf_float+0x236>
 80058a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058aa:	4659      	mov	r1, fp
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b0      	blx	r6
 80058b0:	3001      	adds	r0, #1
 80058b2:	f43f af0e 	beq.w	80056d2 <_printf_float+0xae>
 80058b6:	f04f 0800 	mov.w	r8, #0
 80058ba:	f104 091a 	add.w	r9, r4, #26
 80058be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058c0:	425b      	negs	r3, r3
 80058c2:	4543      	cmp	r3, r8
 80058c4:	dc01      	bgt.n	80058ca <_printf_float+0x2a6>
 80058c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058c8:	e797      	b.n	80057fa <_printf_float+0x1d6>
 80058ca:	2301      	movs	r3, #1
 80058cc:	464a      	mov	r2, r9
 80058ce:	4659      	mov	r1, fp
 80058d0:	4628      	mov	r0, r5
 80058d2:	47b0      	blx	r6
 80058d4:	3001      	adds	r0, #1
 80058d6:	f43f aefc 	beq.w	80056d2 <_printf_float+0xae>
 80058da:	f108 0801 	add.w	r8, r8, #1
 80058de:	e7ee      	b.n	80058be <_printf_float+0x29a>
 80058e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058e4:	429a      	cmp	r2, r3
 80058e6:	bfa8      	it	ge
 80058e8:	461a      	movge	r2, r3
 80058ea:	2a00      	cmp	r2, #0
 80058ec:	4690      	mov	r8, r2
 80058ee:	dd07      	ble.n	8005900 <_printf_float+0x2dc>
 80058f0:	4613      	mov	r3, r2
 80058f2:	4659      	mov	r1, fp
 80058f4:	463a      	mov	r2, r7
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b0      	blx	r6
 80058fa:	3001      	adds	r0, #1
 80058fc:	f43f aee9 	beq.w	80056d2 <_printf_float+0xae>
 8005900:	f104 031a 	add.w	r3, r4, #26
 8005904:	f04f 0a00 	mov.w	sl, #0
 8005908:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800590c:	930b      	str	r3, [sp, #44]	; 0x2c
 800590e:	e015      	b.n	800593c <_printf_float+0x318>
 8005910:	7fefffff 	.word	0x7fefffff
 8005914:	080088d8 	.word	0x080088d8
 8005918:	080088d4 	.word	0x080088d4
 800591c:	080088e0 	.word	0x080088e0
 8005920:	080088dc 	.word	0x080088dc
 8005924:	080088e4 	.word	0x080088e4
 8005928:	2301      	movs	r3, #1
 800592a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800592c:	4659      	mov	r1, fp
 800592e:	4628      	mov	r0, r5
 8005930:	47b0      	blx	r6
 8005932:	3001      	adds	r0, #1
 8005934:	f43f aecd 	beq.w	80056d2 <_printf_float+0xae>
 8005938:	f10a 0a01 	add.w	sl, sl, #1
 800593c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005940:	eba9 0308 	sub.w	r3, r9, r8
 8005944:	4553      	cmp	r3, sl
 8005946:	dcef      	bgt.n	8005928 <_printf_float+0x304>
 8005948:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800594c:	429a      	cmp	r2, r3
 800594e:	444f      	add	r7, r9
 8005950:	db14      	blt.n	800597c <_printf_float+0x358>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	07da      	lsls	r2, r3, #31
 8005956:	d411      	bmi.n	800597c <_printf_float+0x358>
 8005958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800595a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800595c:	eba3 0209 	sub.w	r2, r3, r9
 8005960:	eba3 0901 	sub.w	r9, r3, r1
 8005964:	4591      	cmp	r9, r2
 8005966:	bfa8      	it	ge
 8005968:	4691      	movge	r9, r2
 800596a:	f1b9 0f00 	cmp.w	r9, #0
 800596e:	dc0d      	bgt.n	800598c <_printf_float+0x368>
 8005970:	2700      	movs	r7, #0
 8005972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005976:	f104 081a 	add.w	r8, r4, #26
 800597a:	e018      	b.n	80059ae <_printf_float+0x38a>
 800597c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005980:	4659      	mov	r1, fp
 8005982:	4628      	mov	r0, r5
 8005984:	47b0      	blx	r6
 8005986:	3001      	adds	r0, #1
 8005988:	d1e6      	bne.n	8005958 <_printf_float+0x334>
 800598a:	e6a2      	b.n	80056d2 <_printf_float+0xae>
 800598c:	464b      	mov	r3, r9
 800598e:	463a      	mov	r2, r7
 8005990:	4659      	mov	r1, fp
 8005992:	4628      	mov	r0, r5
 8005994:	47b0      	blx	r6
 8005996:	3001      	adds	r0, #1
 8005998:	d1ea      	bne.n	8005970 <_printf_float+0x34c>
 800599a:	e69a      	b.n	80056d2 <_printf_float+0xae>
 800599c:	2301      	movs	r3, #1
 800599e:	4642      	mov	r2, r8
 80059a0:	4659      	mov	r1, fp
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b0      	blx	r6
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f ae93 	beq.w	80056d2 <_printf_float+0xae>
 80059ac:	3701      	adds	r7, #1
 80059ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059b2:	1a9b      	subs	r3, r3, r2
 80059b4:	eba3 0309 	sub.w	r3, r3, r9
 80059b8:	42bb      	cmp	r3, r7
 80059ba:	dcef      	bgt.n	800599c <_printf_float+0x378>
 80059bc:	e74d      	b.n	800585a <_printf_float+0x236>
 80059be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059c0:	2a01      	cmp	r2, #1
 80059c2:	dc01      	bgt.n	80059c8 <_printf_float+0x3a4>
 80059c4:	07db      	lsls	r3, r3, #31
 80059c6:	d538      	bpl.n	8005a3a <_printf_float+0x416>
 80059c8:	2301      	movs	r3, #1
 80059ca:	463a      	mov	r2, r7
 80059cc:	4659      	mov	r1, fp
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b0      	blx	r6
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f ae7d 	beq.w	80056d2 <_printf_float+0xae>
 80059d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059dc:	4659      	mov	r1, fp
 80059de:	4628      	mov	r0, r5
 80059e0:	47b0      	blx	r6
 80059e2:	3001      	adds	r0, #1
 80059e4:	f107 0701 	add.w	r7, r7, #1
 80059e8:	f43f ae73 	beq.w	80056d2 <_printf_float+0xae>
 80059ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059f2:	2200      	movs	r2, #0
 80059f4:	f103 38ff 	add.w	r8, r3, #4294967295
 80059f8:	2300      	movs	r3, #0
 80059fa:	f7fa ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80059fe:	b9c0      	cbnz	r0, 8005a32 <_printf_float+0x40e>
 8005a00:	4643      	mov	r3, r8
 8005a02:	463a      	mov	r2, r7
 8005a04:	4659      	mov	r1, fp
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b0      	blx	r6
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d10d      	bne.n	8005a2a <_printf_float+0x406>
 8005a0e:	e660      	b.n	80056d2 <_printf_float+0xae>
 8005a10:	2301      	movs	r3, #1
 8005a12:	4642      	mov	r2, r8
 8005a14:	4659      	mov	r1, fp
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b0      	blx	r6
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	f43f ae59 	beq.w	80056d2 <_printf_float+0xae>
 8005a20:	3701      	adds	r7, #1
 8005a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a24:	3b01      	subs	r3, #1
 8005a26:	42bb      	cmp	r3, r7
 8005a28:	dcf2      	bgt.n	8005a10 <_printf_float+0x3ec>
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a30:	e6e4      	b.n	80057fc <_printf_float+0x1d8>
 8005a32:	2700      	movs	r7, #0
 8005a34:	f104 081a 	add.w	r8, r4, #26
 8005a38:	e7f3      	b.n	8005a22 <_printf_float+0x3fe>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e7e1      	b.n	8005a02 <_printf_float+0x3de>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4642      	mov	r2, r8
 8005a42:	4659      	mov	r1, fp
 8005a44:	4628      	mov	r0, r5
 8005a46:	47b0      	blx	r6
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f43f ae42 	beq.w	80056d2 <_printf_float+0xae>
 8005a4e:	3701      	adds	r7, #1
 8005a50:	68e3      	ldr	r3, [r4, #12]
 8005a52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	42bb      	cmp	r3, r7
 8005a58:	dcf1      	bgt.n	8005a3e <_printf_float+0x41a>
 8005a5a:	e702      	b.n	8005862 <_printf_float+0x23e>
 8005a5c:	2700      	movs	r7, #0
 8005a5e:	f104 0819 	add.w	r8, r4, #25
 8005a62:	e7f5      	b.n	8005a50 <_printf_float+0x42c>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f43f ae94 	beq.w	8005792 <_printf_float+0x16e>
 8005a6a:	f04f 0c00 	mov.w	ip, #0
 8005a6e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005a72:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005a76:	6022      	str	r2, [r4, #0]
 8005a78:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005a7c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	463a      	mov	r2, r7
 8005a84:	464b      	mov	r3, r9
 8005a86:	4628      	mov	r0, r5
 8005a88:	f7ff fd3a 	bl	8005500 <__cvt>
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	e64f      	b.n	8005730 <_printf_float+0x10c>

08005a90 <_printf_common>:
 8005a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a94:	4691      	mov	r9, r2
 8005a96:	461f      	mov	r7, r3
 8005a98:	688a      	ldr	r2, [r1, #8]
 8005a9a:	690b      	ldr	r3, [r1, #16]
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	bfb8      	it	lt
 8005aa2:	4613      	movlt	r3, r2
 8005aa4:	f8c9 3000 	str.w	r3, [r9]
 8005aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aac:	460c      	mov	r4, r1
 8005aae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ab2:	b112      	cbz	r2, 8005aba <_printf_common+0x2a>
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	f8c9 3000 	str.w	r3, [r9]
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	0699      	lsls	r1, r3, #26
 8005abe:	bf42      	ittt	mi
 8005ac0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ac4:	3302      	addmi	r3, #2
 8005ac6:	f8c9 3000 	strmi.w	r3, [r9]
 8005aca:	6825      	ldr	r5, [r4, #0]
 8005acc:	f015 0506 	ands.w	r5, r5, #6
 8005ad0:	d107      	bne.n	8005ae2 <_printf_common+0x52>
 8005ad2:	f104 0a19 	add.w	sl, r4, #25
 8005ad6:	68e3      	ldr	r3, [r4, #12]
 8005ad8:	f8d9 2000 	ldr.w	r2, [r9]
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	42ab      	cmp	r3, r5
 8005ae0:	dc29      	bgt.n	8005b36 <_printf_common+0xa6>
 8005ae2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	3300      	adds	r3, #0
 8005aea:	bf18      	it	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	0692      	lsls	r2, r2, #26
 8005af0:	d42e      	bmi.n	8005b50 <_printf_common+0xc0>
 8005af2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af6:	4639      	mov	r1, r7
 8005af8:	4630      	mov	r0, r6
 8005afa:	47c0      	blx	r8
 8005afc:	3001      	adds	r0, #1
 8005afe:	d021      	beq.n	8005b44 <_printf_common+0xb4>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	68e5      	ldr	r5, [r4, #12]
 8005b04:	f003 0306 	and.w	r3, r3, #6
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	bf18      	it	ne
 8005b0c:	2500      	movne	r5, #0
 8005b0e:	f8d9 2000 	ldr.w	r2, [r9]
 8005b12:	f04f 0900 	mov.w	r9, #0
 8005b16:	bf08      	it	eq
 8005b18:	1aad      	subeq	r5, r5, r2
 8005b1a:	68a3      	ldr	r3, [r4, #8]
 8005b1c:	6922      	ldr	r2, [r4, #16]
 8005b1e:	bf08      	it	eq
 8005b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b24:	4293      	cmp	r3, r2
 8005b26:	bfc4      	itt	gt
 8005b28:	1a9b      	subgt	r3, r3, r2
 8005b2a:	18ed      	addgt	r5, r5, r3
 8005b2c:	341a      	adds	r4, #26
 8005b2e:	454d      	cmp	r5, r9
 8005b30:	d11a      	bne.n	8005b68 <_printf_common+0xd8>
 8005b32:	2000      	movs	r0, #0
 8005b34:	e008      	b.n	8005b48 <_printf_common+0xb8>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4652      	mov	r2, sl
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	47c0      	blx	r8
 8005b40:	3001      	adds	r0, #1
 8005b42:	d103      	bne.n	8005b4c <_printf_common+0xbc>
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295
 8005b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4c:	3501      	adds	r5, #1
 8005b4e:	e7c2      	b.n	8005ad6 <_printf_common+0x46>
 8005b50:	2030      	movs	r0, #48	; 0x30
 8005b52:	18e1      	adds	r1, r4, r3
 8005b54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b5e:	4422      	add	r2, r4
 8005b60:	3302      	adds	r3, #2
 8005b62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b66:	e7c4      	b.n	8005af2 <_printf_common+0x62>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	4639      	mov	r1, r7
 8005b6e:	4630      	mov	r0, r6
 8005b70:	47c0      	blx	r8
 8005b72:	3001      	adds	r0, #1
 8005b74:	d0e6      	beq.n	8005b44 <_printf_common+0xb4>
 8005b76:	f109 0901 	add.w	r9, r9, #1
 8005b7a:	e7d8      	b.n	8005b2e <_printf_common+0x9e>

08005b7c <_printf_i>:
 8005b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b84:	460c      	mov	r4, r1
 8005b86:	7e09      	ldrb	r1, [r1, #24]
 8005b88:	b085      	sub	sp, #20
 8005b8a:	296e      	cmp	r1, #110	; 0x6e
 8005b8c:	4617      	mov	r7, r2
 8005b8e:	4606      	mov	r6, r0
 8005b90:	4698      	mov	r8, r3
 8005b92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b94:	f000 80b3 	beq.w	8005cfe <_printf_i+0x182>
 8005b98:	d822      	bhi.n	8005be0 <_printf_i+0x64>
 8005b9a:	2963      	cmp	r1, #99	; 0x63
 8005b9c:	d036      	beq.n	8005c0c <_printf_i+0x90>
 8005b9e:	d80a      	bhi.n	8005bb6 <_printf_i+0x3a>
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	f000 80b9 	beq.w	8005d18 <_printf_i+0x19c>
 8005ba6:	2958      	cmp	r1, #88	; 0x58
 8005ba8:	f000 8083 	beq.w	8005cb2 <_printf_i+0x136>
 8005bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005bb4:	e032      	b.n	8005c1c <_printf_i+0xa0>
 8005bb6:	2964      	cmp	r1, #100	; 0x64
 8005bb8:	d001      	beq.n	8005bbe <_printf_i+0x42>
 8005bba:	2969      	cmp	r1, #105	; 0x69
 8005bbc:	d1f6      	bne.n	8005bac <_printf_i+0x30>
 8005bbe:	6820      	ldr	r0, [r4, #0]
 8005bc0:	6813      	ldr	r3, [r2, #0]
 8005bc2:	0605      	lsls	r5, r0, #24
 8005bc4:	f103 0104 	add.w	r1, r3, #4
 8005bc8:	d52a      	bpl.n	8005c20 <_printf_i+0xa4>
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6011      	str	r1, [r2, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	da03      	bge.n	8005bda <_printf_i+0x5e>
 8005bd2:	222d      	movs	r2, #45	; 0x2d
 8005bd4:	425b      	negs	r3, r3
 8005bd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005bda:	486f      	ldr	r0, [pc, #444]	; (8005d98 <_printf_i+0x21c>)
 8005bdc:	220a      	movs	r2, #10
 8005bde:	e039      	b.n	8005c54 <_printf_i+0xd8>
 8005be0:	2973      	cmp	r1, #115	; 0x73
 8005be2:	f000 809d 	beq.w	8005d20 <_printf_i+0x1a4>
 8005be6:	d808      	bhi.n	8005bfa <_printf_i+0x7e>
 8005be8:	296f      	cmp	r1, #111	; 0x6f
 8005bea:	d020      	beq.n	8005c2e <_printf_i+0xb2>
 8005bec:	2970      	cmp	r1, #112	; 0x70
 8005bee:	d1dd      	bne.n	8005bac <_printf_i+0x30>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	f043 0320 	orr.w	r3, r3, #32
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	e003      	b.n	8005c02 <_printf_i+0x86>
 8005bfa:	2975      	cmp	r1, #117	; 0x75
 8005bfc:	d017      	beq.n	8005c2e <_printf_i+0xb2>
 8005bfe:	2978      	cmp	r1, #120	; 0x78
 8005c00:	d1d4      	bne.n	8005bac <_printf_i+0x30>
 8005c02:	2378      	movs	r3, #120	; 0x78
 8005c04:	4865      	ldr	r0, [pc, #404]	; (8005d9c <_printf_i+0x220>)
 8005c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c0a:	e055      	b.n	8005cb8 <_printf_i+0x13c>
 8005c0c:	6813      	ldr	r3, [r2, #0]
 8005c0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c12:	1d19      	adds	r1, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6011      	str	r1, [r2, #0]
 8005c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e08c      	b.n	8005d3a <_printf_i+0x1be>
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c26:	6011      	str	r1, [r2, #0]
 8005c28:	bf18      	it	ne
 8005c2a:	b21b      	sxthne	r3, r3
 8005c2c:	e7cf      	b.n	8005bce <_printf_i+0x52>
 8005c2e:	6813      	ldr	r3, [r2, #0]
 8005c30:	6825      	ldr	r5, [r4, #0]
 8005c32:	1d18      	adds	r0, r3, #4
 8005c34:	6010      	str	r0, [r2, #0]
 8005c36:	0628      	lsls	r0, r5, #24
 8005c38:	d501      	bpl.n	8005c3e <_printf_i+0xc2>
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	e002      	b.n	8005c44 <_printf_i+0xc8>
 8005c3e:	0668      	lsls	r0, r5, #25
 8005c40:	d5fb      	bpl.n	8005c3a <_printf_i+0xbe>
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	296f      	cmp	r1, #111	; 0x6f
 8005c46:	bf14      	ite	ne
 8005c48:	220a      	movne	r2, #10
 8005c4a:	2208      	moveq	r2, #8
 8005c4c:	4852      	ldr	r0, [pc, #328]	; (8005d98 <_printf_i+0x21c>)
 8005c4e:	2100      	movs	r1, #0
 8005c50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c54:	6865      	ldr	r5, [r4, #4]
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	60a5      	str	r5, [r4, #8]
 8005c5a:	f2c0 8095 	blt.w	8005d88 <_printf_i+0x20c>
 8005c5e:	6821      	ldr	r1, [r4, #0]
 8005c60:	f021 0104 	bic.w	r1, r1, #4
 8005c64:	6021      	str	r1, [r4, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d13d      	bne.n	8005ce6 <_printf_i+0x16a>
 8005c6a:	2d00      	cmp	r5, #0
 8005c6c:	f040 808e 	bne.w	8005d8c <_printf_i+0x210>
 8005c70:	4665      	mov	r5, ip
 8005c72:	2a08      	cmp	r2, #8
 8005c74:	d10b      	bne.n	8005c8e <_printf_i+0x112>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	07db      	lsls	r3, r3, #31
 8005c7a:	d508      	bpl.n	8005c8e <_printf_i+0x112>
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	6862      	ldr	r2, [r4, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	bfde      	ittt	le
 8005c84:	2330      	movle	r3, #48	; 0x30
 8005c86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c8e:	ebac 0305 	sub.w	r3, ip, r5
 8005c92:	6123      	str	r3, [r4, #16]
 8005c94:	f8cd 8000 	str.w	r8, [sp]
 8005c98:	463b      	mov	r3, r7
 8005c9a:	aa03      	add	r2, sp, #12
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f7ff fef6 	bl	8005a90 <_printf_common>
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d14d      	bne.n	8005d44 <_printf_i+0x1c8>
 8005ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cac:	b005      	add	sp, #20
 8005cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cb2:	4839      	ldr	r0, [pc, #228]	; (8005d98 <_printf_i+0x21c>)
 8005cb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005cb8:	6813      	ldr	r3, [r2, #0]
 8005cba:	6821      	ldr	r1, [r4, #0]
 8005cbc:	1d1d      	adds	r5, r3, #4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6015      	str	r5, [r2, #0]
 8005cc2:	060a      	lsls	r2, r1, #24
 8005cc4:	d50b      	bpl.n	8005cde <_printf_i+0x162>
 8005cc6:	07ca      	lsls	r2, r1, #31
 8005cc8:	bf44      	itt	mi
 8005cca:	f041 0120 	orrmi.w	r1, r1, #32
 8005cce:	6021      	strmi	r1, [r4, #0]
 8005cd0:	b91b      	cbnz	r3, 8005cda <_printf_i+0x15e>
 8005cd2:	6822      	ldr	r2, [r4, #0]
 8005cd4:	f022 0220 	bic.w	r2, r2, #32
 8005cd8:	6022      	str	r2, [r4, #0]
 8005cda:	2210      	movs	r2, #16
 8005cdc:	e7b7      	b.n	8005c4e <_printf_i+0xd2>
 8005cde:	064d      	lsls	r5, r1, #25
 8005ce0:	bf48      	it	mi
 8005ce2:	b29b      	uxthmi	r3, r3
 8005ce4:	e7ef      	b.n	8005cc6 <_printf_i+0x14a>
 8005ce6:	4665      	mov	r5, ip
 8005ce8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cec:	fb02 3311 	mls	r3, r2, r1, r3
 8005cf0:	5cc3      	ldrb	r3, [r0, r3]
 8005cf2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	d1f5      	bne.n	8005ce8 <_printf_i+0x16c>
 8005cfc:	e7b9      	b.n	8005c72 <_printf_i+0xf6>
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	6825      	ldr	r5, [r4, #0]
 8005d02:	1d18      	adds	r0, r3, #4
 8005d04:	6961      	ldr	r1, [r4, #20]
 8005d06:	6010      	str	r0, [r2, #0]
 8005d08:	0628      	lsls	r0, r5, #24
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	d501      	bpl.n	8005d12 <_printf_i+0x196>
 8005d0e:	6019      	str	r1, [r3, #0]
 8005d10:	e002      	b.n	8005d18 <_printf_i+0x19c>
 8005d12:	066a      	lsls	r2, r5, #25
 8005d14:	d5fb      	bpl.n	8005d0e <_printf_i+0x192>
 8005d16:	8019      	strh	r1, [r3, #0]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4665      	mov	r5, ip
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	e7b9      	b.n	8005c94 <_printf_i+0x118>
 8005d20:	6813      	ldr	r3, [r2, #0]
 8005d22:	1d19      	adds	r1, r3, #4
 8005d24:	6011      	str	r1, [r2, #0]
 8005d26:	681d      	ldr	r5, [r3, #0]
 8005d28:	6862      	ldr	r2, [r4, #4]
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f001 f9cb 	bl	80070c8 <memchr>
 8005d32:	b108      	cbz	r0, 8005d38 <_printf_i+0x1bc>
 8005d34:	1b40      	subs	r0, r0, r5
 8005d36:	6060      	str	r0, [r4, #4]
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	6123      	str	r3, [r4, #16]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d42:	e7a7      	b.n	8005c94 <_printf_i+0x118>
 8005d44:	6923      	ldr	r3, [r4, #16]
 8005d46:	462a      	mov	r2, r5
 8005d48:	4639      	mov	r1, r7
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	47c0      	blx	r8
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0aa      	beq.n	8005ca8 <_printf_i+0x12c>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	079b      	lsls	r3, r3, #30
 8005d56:	d413      	bmi.n	8005d80 <_printf_i+0x204>
 8005d58:	68e0      	ldr	r0, [r4, #12]
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	4298      	cmp	r0, r3
 8005d5e:	bfb8      	it	lt
 8005d60:	4618      	movlt	r0, r3
 8005d62:	e7a3      	b.n	8005cac <_printf_i+0x130>
 8005d64:	2301      	movs	r3, #1
 8005d66:	464a      	mov	r2, r9
 8005d68:	4639      	mov	r1, r7
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	47c0      	blx	r8
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d09a      	beq.n	8005ca8 <_printf_i+0x12c>
 8005d72:	3501      	adds	r5, #1
 8005d74:	68e3      	ldr	r3, [r4, #12]
 8005d76:	9a03      	ldr	r2, [sp, #12]
 8005d78:	1a9b      	subs	r3, r3, r2
 8005d7a:	42ab      	cmp	r3, r5
 8005d7c:	dcf2      	bgt.n	8005d64 <_printf_i+0x1e8>
 8005d7e:	e7eb      	b.n	8005d58 <_printf_i+0x1dc>
 8005d80:	2500      	movs	r5, #0
 8005d82:	f104 0919 	add.w	r9, r4, #25
 8005d86:	e7f5      	b.n	8005d74 <_printf_i+0x1f8>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ac      	bne.n	8005ce6 <_printf_i+0x16a>
 8005d8c:	7803      	ldrb	r3, [r0, #0]
 8005d8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d96:	e76c      	b.n	8005c72 <_printf_i+0xf6>
 8005d98:	080088e6 	.word	0x080088e6
 8005d9c:	080088f7 	.word	0x080088f7

08005da0 <iprintf>:
 8005da0:	b40f      	push	{r0, r1, r2, r3}
 8005da2:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <iprintf+0x2c>)
 8005da4:	b513      	push	{r0, r1, r4, lr}
 8005da6:	681c      	ldr	r4, [r3, #0]
 8005da8:	b124      	cbz	r4, 8005db4 <iprintf+0x14>
 8005daa:	69a3      	ldr	r3, [r4, #24]
 8005dac:	b913      	cbnz	r3, 8005db4 <iprintf+0x14>
 8005dae:	4620      	mov	r0, r4
 8005db0:	f001 f886 	bl	8006ec0 <__sinit>
 8005db4:	ab05      	add	r3, sp, #20
 8005db6:	9a04      	ldr	r2, [sp, #16]
 8005db8:	68a1      	ldr	r1, [r4, #8]
 8005dba:	4620      	mov	r0, r4
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	f001 fea7 	bl	8007b10 <_vfiprintf_r>
 8005dc2:	b002      	add	sp, #8
 8005dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc8:	b004      	add	sp, #16
 8005dca:	4770      	bx	lr
 8005dcc:	20000a4c 	.word	0x20000a4c

08005dd0 <_puts_r>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	460e      	mov	r6, r1
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	b118      	cbz	r0, 8005de0 <_puts_r+0x10>
 8005dd8:	6983      	ldr	r3, [r0, #24]
 8005dda:	b90b      	cbnz	r3, 8005de0 <_puts_r+0x10>
 8005ddc:	f001 f870 	bl	8006ec0 <__sinit>
 8005de0:	69ab      	ldr	r3, [r5, #24]
 8005de2:	68ac      	ldr	r4, [r5, #8]
 8005de4:	b913      	cbnz	r3, 8005dec <_puts_r+0x1c>
 8005de6:	4628      	mov	r0, r5
 8005de8:	f001 f86a 	bl	8006ec0 <__sinit>
 8005dec:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <_puts_r+0xac>)
 8005dee:	429c      	cmp	r4, r3
 8005df0:	d117      	bne.n	8005e22 <_puts_r+0x52>
 8005df2:	686c      	ldr	r4, [r5, #4]
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	071b      	lsls	r3, r3, #28
 8005df8:	d51d      	bpl.n	8005e36 <_puts_r+0x66>
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	b1db      	cbz	r3, 8005e36 <_puts_r+0x66>
 8005dfe:	3e01      	subs	r6, #1
 8005e00:	68a3      	ldr	r3, [r4, #8]
 8005e02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e06:	3b01      	subs	r3, #1
 8005e08:	60a3      	str	r3, [r4, #8]
 8005e0a:	b9e9      	cbnz	r1, 8005e48 <_puts_r+0x78>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	da2e      	bge.n	8005e6e <_puts_r+0x9e>
 8005e10:	4622      	mov	r2, r4
 8005e12:	210a      	movs	r1, #10
 8005e14:	4628      	mov	r0, r5
 8005e16:	f000 f85f 	bl	8005ed8 <__swbuf_r>
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d011      	beq.n	8005e42 <_puts_r+0x72>
 8005e1e:	200a      	movs	r0, #10
 8005e20:	e011      	b.n	8005e46 <_puts_r+0x76>
 8005e22:	4b17      	ldr	r3, [pc, #92]	; (8005e80 <_puts_r+0xb0>)
 8005e24:	429c      	cmp	r4, r3
 8005e26:	d101      	bne.n	8005e2c <_puts_r+0x5c>
 8005e28:	68ac      	ldr	r4, [r5, #8]
 8005e2a:	e7e3      	b.n	8005df4 <_puts_r+0x24>
 8005e2c:	4b15      	ldr	r3, [pc, #84]	; (8005e84 <_puts_r+0xb4>)
 8005e2e:	429c      	cmp	r4, r3
 8005e30:	bf08      	it	eq
 8005e32:	68ec      	ldreq	r4, [r5, #12]
 8005e34:	e7de      	b.n	8005df4 <_puts_r+0x24>
 8005e36:	4621      	mov	r1, r4
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f000 f89f 	bl	8005f7c <__swsetup_r>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d0dd      	beq.n	8005dfe <_puts_r+0x2e>
 8005e42:	f04f 30ff 	mov.w	r0, #4294967295
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	da04      	bge.n	8005e56 <_puts_r+0x86>
 8005e4c:	69a2      	ldr	r2, [r4, #24]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	dc06      	bgt.n	8005e60 <_puts_r+0x90>
 8005e52:	290a      	cmp	r1, #10
 8005e54:	d004      	beq.n	8005e60 <_puts_r+0x90>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	6022      	str	r2, [r4, #0]
 8005e5c:	7019      	strb	r1, [r3, #0]
 8005e5e:	e7cf      	b.n	8005e00 <_puts_r+0x30>
 8005e60:	4622      	mov	r2, r4
 8005e62:	4628      	mov	r0, r5
 8005e64:	f000 f838 	bl	8005ed8 <__swbuf_r>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d1c9      	bne.n	8005e00 <_puts_r+0x30>
 8005e6c:	e7e9      	b.n	8005e42 <_puts_r+0x72>
 8005e6e:	200a      	movs	r0, #10
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	6022      	str	r2, [r4, #0]
 8005e76:	7018      	strb	r0, [r3, #0]
 8005e78:	e7e5      	b.n	8005e46 <_puts_r+0x76>
 8005e7a:	bf00      	nop
 8005e7c:	08008938 	.word	0x08008938
 8005e80:	08008958 	.word	0x08008958
 8005e84:	08008918 	.word	0x08008918

08005e88 <puts>:
 8005e88:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <puts+0xc>)
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	f7ff bf9f 	b.w	8005dd0 <_puts_r>
 8005e92:	bf00      	nop
 8005e94:	20000a4c 	.word	0x20000a4c

08005e98 <siprintf>:
 8005e98:	b40e      	push	{r1, r2, r3}
 8005e9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e9e:	b500      	push	{lr}
 8005ea0:	b09c      	sub	sp, #112	; 0x70
 8005ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ea4:	9002      	str	r0, [sp, #8]
 8005ea6:	9006      	str	r0, [sp, #24]
 8005ea8:	9107      	str	r1, [sp, #28]
 8005eaa:	9104      	str	r1, [sp, #16]
 8005eac:	4808      	ldr	r0, [pc, #32]	; (8005ed0 <siprintf+0x38>)
 8005eae:	4909      	ldr	r1, [pc, #36]	; (8005ed4 <siprintf+0x3c>)
 8005eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eb4:	9105      	str	r1, [sp, #20]
 8005eb6:	6800      	ldr	r0, [r0, #0]
 8005eb8:	a902      	add	r1, sp, #8
 8005eba:	9301      	str	r3, [sp, #4]
 8005ebc:	f001 fd08 	bl	80078d0 <_svfiprintf_r>
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	9b02      	ldr	r3, [sp, #8]
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	b01c      	add	sp, #112	; 0x70
 8005ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ecc:	b003      	add	sp, #12
 8005ece:	4770      	bx	lr
 8005ed0:	20000a4c 	.word	0x20000a4c
 8005ed4:	ffff0208 	.word	0xffff0208

08005ed8 <__swbuf_r>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	460e      	mov	r6, r1
 8005edc:	4614      	mov	r4, r2
 8005ede:	4605      	mov	r5, r0
 8005ee0:	b118      	cbz	r0, 8005eea <__swbuf_r+0x12>
 8005ee2:	6983      	ldr	r3, [r0, #24]
 8005ee4:	b90b      	cbnz	r3, 8005eea <__swbuf_r+0x12>
 8005ee6:	f000 ffeb 	bl	8006ec0 <__sinit>
 8005eea:	4b21      	ldr	r3, [pc, #132]	; (8005f70 <__swbuf_r+0x98>)
 8005eec:	429c      	cmp	r4, r3
 8005eee:	d12a      	bne.n	8005f46 <__swbuf_r+0x6e>
 8005ef0:	686c      	ldr	r4, [r5, #4]
 8005ef2:	69a3      	ldr	r3, [r4, #24]
 8005ef4:	60a3      	str	r3, [r4, #8]
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	071a      	lsls	r2, r3, #28
 8005efa:	d52e      	bpl.n	8005f5a <__swbuf_r+0x82>
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	b363      	cbz	r3, 8005f5a <__swbuf_r+0x82>
 8005f00:	6923      	ldr	r3, [r4, #16]
 8005f02:	6820      	ldr	r0, [r4, #0]
 8005f04:	b2f6      	uxtb	r6, r6
 8005f06:	1ac0      	subs	r0, r0, r3
 8005f08:	6963      	ldr	r3, [r4, #20]
 8005f0a:	4637      	mov	r7, r6
 8005f0c:	4283      	cmp	r3, r0
 8005f0e:	dc04      	bgt.n	8005f1a <__swbuf_r+0x42>
 8005f10:	4621      	mov	r1, r4
 8005f12:	4628      	mov	r0, r5
 8005f14:	f000 ff6a 	bl	8006dec <_fflush_r>
 8005f18:	bb28      	cbnz	r0, 8005f66 <__swbuf_r+0x8e>
 8005f1a:	68a3      	ldr	r3, [r4, #8]
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	60a3      	str	r3, [r4, #8]
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	6022      	str	r2, [r4, #0]
 8005f28:	701e      	strb	r6, [r3, #0]
 8005f2a:	6963      	ldr	r3, [r4, #20]
 8005f2c:	4283      	cmp	r3, r0
 8005f2e:	d004      	beq.n	8005f3a <__swbuf_r+0x62>
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	07db      	lsls	r3, r3, #31
 8005f34:	d519      	bpl.n	8005f6a <__swbuf_r+0x92>
 8005f36:	2e0a      	cmp	r6, #10
 8005f38:	d117      	bne.n	8005f6a <__swbuf_r+0x92>
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 ff55 	bl	8006dec <_fflush_r>
 8005f42:	b190      	cbz	r0, 8005f6a <__swbuf_r+0x92>
 8005f44:	e00f      	b.n	8005f66 <__swbuf_r+0x8e>
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <__swbuf_r+0x9c>)
 8005f48:	429c      	cmp	r4, r3
 8005f4a:	d101      	bne.n	8005f50 <__swbuf_r+0x78>
 8005f4c:	68ac      	ldr	r4, [r5, #8]
 8005f4e:	e7d0      	b.n	8005ef2 <__swbuf_r+0x1a>
 8005f50:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <__swbuf_r+0xa0>)
 8005f52:	429c      	cmp	r4, r3
 8005f54:	bf08      	it	eq
 8005f56:	68ec      	ldreq	r4, [r5, #12]
 8005f58:	e7cb      	b.n	8005ef2 <__swbuf_r+0x1a>
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f000 f80d 	bl	8005f7c <__swsetup_r>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d0cc      	beq.n	8005f00 <__swbuf_r+0x28>
 8005f66:	f04f 37ff 	mov.w	r7, #4294967295
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	08008938 	.word	0x08008938
 8005f74:	08008958 	.word	0x08008958
 8005f78:	08008918 	.word	0x08008918

08005f7c <__swsetup_r>:
 8005f7c:	4b32      	ldr	r3, [pc, #200]	; (8006048 <__swsetup_r+0xcc>)
 8005f7e:	b570      	push	{r4, r5, r6, lr}
 8005f80:	681d      	ldr	r5, [r3, #0]
 8005f82:	4606      	mov	r6, r0
 8005f84:	460c      	mov	r4, r1
 8005f86:	b125      	cbz	r5, 8005f92 <__swsetup_r+0x16>
 8005f88:	69ab      	ldr	r3, [r5, #24]
 8005f8a:	b913      	cbnz	r3, 8005f92 <__swsetup_r+0x16>
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 ff97 	bl	8006ec0 <__sinit>
 8005f92:	4b2e      	ldr	r3, [pc, #184]	; (800604c <__swsetup_r+0xd0>)
 8005f94:	429c      	cmp	r4, r3
 8005f96:	d10f      	bne.n	8005fb8 <__swsetup_r+0x3c>
 8005f98:	686c      	ldr	r4, [r5, #4]
 8005f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	0715      	lsls	r5, r2, #28
 8005fa2:	d42c      	bmi.n	8005ffe <__swsetup_r+0x82>
 8005fa4:	06d0      	lsls	r0, r2, #27
 8005fa6:	d411      	bmi.n	8005fcc <__swsetup_r+0x50>
 8005fa8:	2209      	movs	r2, #9
 8005faa:	6032      	str	r2, [r6, #0]
 8005fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fb0:	81a3      	strh	r3, [r4, #12]
 8005fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb6:	e03e      	b.n	8006036 <__swsetup_r+0xba>
 8005fb8:	4b25      	ldr	r3, [pc, #148]	; (8006050 <__swsetup_r+0xd4>)
 8005fba:	429c      	cmp	r4, r3
 8005fbc:	d101      	bne.n	8005fc2 <__swsetup_r+0x46>
 8005fbe:	68ac      	ldr	r4, [r5, #8]
 8005fc0:	e7eb      	b.n	8005f9a <__swsetup_r+0x1e>
 8005fc2:	4b24      	ldr	r3, [pc, #144]	; (8006054 <__swsetup_r+0xd8>)
 8005fc4:	429c      	cmp	r4, r3
 8005fc6:	bf08      	it	eq
 8005fc8:	68ec      	ldreq	r4, [r5, #12]
 8005fca:	e7e6      	b.n	8005f9a <__swsetup_r+0x1e>
 8005fcc:	0751      	lsls	r1, r2, #29
 8005fce:	d512      	bpl.n	8005ff6 <__swsetup_r+0x7a>
 8005fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fd2:	b141      	cbz	r1, 8005fe6 <__swsetup_r+0x6a>
 8005fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fd8:	4299      	cmp	r1, r3
 8005fda:	d002      	beq.n	8005fe2 <__swsetup_r+0x66>
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f001 fb77 	bl	80076d0 <_free_r>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fe6:	89a3      	ldrh	r3, [r4, #12]
 8005fe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fec:	81a3      	strh	r3, [r4, #12]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	6923      	ldr	r3, [r4, #16]
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	f043 0308 	orr.w	r3, r3, #8
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	6923      	ldr	r3, [r4, #16]
 8006000:	b94b      	cbnz	r3, 8006016 <__swsetup_r+0x9a>
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800600c:	d003      	beq.n	8006016 <__swsetup_r+0x9a>
 800600e:	4621      	mov	r1, r4
 8006010:	4630      	mov	r0, r6
 8006012:	f001 f811 	bl	8007038 <__smakebuf_r>
 8006016:	89a2      	ldrh	r2, [r4, #12]
 8006018:	f012 0301 	ands.w	r3, r2, #1
 800601c:	d00c      	beq.n	8006038 <__swsetup_r+0xbc>
 800601e:	2300      	movs	r3, #0
 8006020:	60a3      	str	r3, [r4, #8]
 8006022:	6963      	ldr	r3, [r4, #20]
 8006024:	425b      	negs	r3, r3
 8006026:	61a3      	str	r3, [r4, #24]
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	b953      	cbnz	r3, 8006042 <__swsetup_r+0xc6>
 800602c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006030:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006034:	d1ba      	bne.n	8005fac <__swsetup_r+0x30>
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	0792      	lsls	r2, r2, #30
 800603a:	bf58      	it	pl
 800603c:	6963      	ldrpl	r3, [r4, #20]
 800603e:	60a3      	str	r3, [r4, #8]
 8006040:	e7f2      	b.n	8006028 <__swsetup_r+0xac>
 8006042:	2000      	movs	r0, #0
 8006044:	e7f7      	b.n	8006036 <__swsetup_r+0xba>
 8006046:	bf00      	nop
 8006048:	20000a4c 	.word	0x20000a4c
 800604c:	08008938 	.word	0x08008938
 8006050:	08008958 	.word	0x08008958
 8006054:	08008918 	.word	0x08008918

08006058 <quorem>:
 8006058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	6903      	ldr	r3, [r0, #16]
 800605e:	690c      	ldr	r4, [r1, #16]
 8006060:	4680      	mov	r8, r0
 8006062:	42a3      	cmp	r3, r4
 8006064:	f2c0 8084 	blt.w	8006170 <quorem+0x118>
 8006068:	3c01      	subs	r4, #1
 800606a:	f101 0714 	add.w	r7, r1, #20
 800606e:	f100 0614 	add.w	r6, r0, #20
 8006072:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006076:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800607a:	3501      	adds	r5, #1
 800607c:	fbb0 f5f5 	udiv	r5, r0, r5
 8006080:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006084:	eb06 030c 	add.w	r3, r6, ip
 8006088:	eb07 090c 	add.w	r9, r7, ip
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	b39d      	cbz	r5, 80060f8 <quorem+0xa0>
 8006090:	f04f 0a00 	mov.w	sl, #0
 8006094:	4638      	mov	r0, r7
 8006096:	46b6      	mov	lr, r6
 8006098:	46d3      	mov	fp, sl
 800609a:	f850 2b04 	ldr.w	r2, [r0], #4
 800609e:	b293      	uxth	r3, r2
 80060a0:	fb05 a303 	mla	r3, r5, r3, sl
 80060a4:	0c12      	lsrs	r2, r2, #16
 80060a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060aa:	fb05 a202 	mla	r2, r5, r2, sl
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	ebab 0303 	sub.w	r3, fp, r3
 80060b4:	f8de b000 	ldr.w	fp, [lr]
 80060b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80060bc:	fa1f fb8b 	uxth.w	fp, fp
 80060c0:	445b      	add	r3, fp
 80060c2:	fa1f fb82 	uxth.w	fp, r2
 80060c6:	f8de 2000 	ldr.w	r2, [lr]
 80060ca:	4581      	cmp	r9, r0
 80060cc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80060d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060da:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80060de:	f84e 3b04 	str.w	r3, [lr], #4
 80060e2:	d2da      	bcs.n	800609a <quorem+0x42>
 80060e4:	f856 300c 	ldr.w	r3, [r6, ip]
 80060e8:	b933      	cbnz	r3, 80060f8 <quorem+0xa0>
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	3b04      	subs	r3, #4
 80060ee:	429e      	cmp	r6, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	d331      	bcc.n	8006158 <quorem+0x100>
 80060f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80060f8:	4640      	mov	r0, r8
 80060fa:	f001 fa13 	bl	8007524 <__mcmp>
 80060fe:	2800      	cmp	r0, #0
 8006100:	db26      	blt.n	8006150 <quorem+0xf8>
 8006102:	4630      	mov	r0, r6
 8006104:	f04f 0c00 	mov.w	ip, #0
 8006108:	3501      	adds	r5, #1
 800610a:	f857 1b04 	ldr.w	r1, [r7], #4
 800610e:	f8d0 e000 	ldr.w	lr, [r0]
 8006112:	b28b      	uxth	r3, r1
 8006114:	ebac 0303 	sub.w	r3, ip, r3
 8006118:	fa1f f28e 	uxth.w	r2, lr
 800611c:	4413      	add	r3, r2
 800611e:	0c0a      	lsrs	r2, r1, #16
 8006120:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006124:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800612e:	45b9      	cmp	r9, r7
 8006130:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006134:	f840 3b04 	str.w	r3, [r0], #4
 8006138:	d2e7      	bcs.n	800610a <quorem+0xb2>
 800613a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800613e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006142:	b92a      	cbnz	r2, 8006150 <quorem+0xf8>
 8006144:	3b04      	subs	r3, #4
 8006146:	429e      	cmp	r6, r3
 8006148:	461a      	mov	r2, r3
 800614a:	d30b      	bcc.n	8006164 <quorem+0x10c>
 800614c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006150:	4628      	mov	r0, r5
 8006152:	b003      	add	sp, #12
 8006154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	3b04      	subs	r3, #4
 800615c:	2a00      	cmp	r2, #0
 800615e:	d1c9      	bne.n	80060f4 <quorem+0x9c>
 8006160:	3c01      	subs	r4, #1
 8006162:	e7c4      	b.n	80060ee <quorem+0x96>
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	3b04      	subs	r3, #4
 8006168:	2a00      	cmp	r2, #0
 800616a:	d1ef      	bne.n	800614c <quorem+0xf4>
 800616c:	3c01      	subs	r4, #1
 800616e:	e7ea      	b.n	8006146 <quorem+0xee>
 8006170:	2000      	movs	r0, #0
 8006172:	e7ee      	b.n	8006152 <quorem+0xfa>
 8006174:	0000      	movs	r0, r0
	...

08006178 <_dtoa_r>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	4616      	mov	r6, r2
 800617e:	461f      	mov	r7, r3
 8006180:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006182:	b095      	sub	sp, #84	; 0x54
 8006184:	4604      	mov	r4, r0
 8006186:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800618a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800618e:	b93d      	cbnz	r5, 80061a0 <_dtoa_r+0x28>
 8006190:	2010      	movs	r0, #16
 8006192:	f000 ff91 	bl	80070b8 <malloc>
 8006196:	6260      	str	r0, [r4, #36]	; 0x24
 8006198:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800619c:	6005      	str	r5, [r0, #0]
 800619e:	60c5      	str	r5, [r0, #12]
 80061a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a2:	6819      	ldr	r1, [r3, #0]
 80061a4:	b151      	cbz	r1, 80061bc <_dtoa_r+0x44>
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	2301      	movs	r3, #1
 80061aa:	4093      	lsls	r3, r2
 80061ac:	604a      	str	r2, [r1, #4]
 80061ae:	608b      	str	r3, [r1, #8]
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 ffd6 	bl	8007162 <_Bfree>
 80061b6:	2200      	movs	r2, #0
 80061b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	1e3b      	subs	r3, r7, #0
 80061be:	bfaf      	iteee	ge
 80061c0:	2300      	movge	r3, #0
 80061c2:	2201      	movlt	r2, #1
 80061c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061c8:	9303      	strlt	r3, [sp, #12]
 80061ca:	bfac      	ite	ge
 80061cc:	f8c8 3000 	strge.w	r3, [r8]
 80061d0:	f8c8 2000 	strlt.w	r2, [r8]
 80061d4:	4bae      	ldr	r3, [pc, #696]	; (8006490 <_dtoa_r+0x318>)
 80061d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80061da:	ea33 0308 	bics.w	r3, r3, r8
 80061de:	d11b      	bne.n	8006218 <_dtoa_r+0xa0>
 80061e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80061e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	9b02      	ldr	r3, [sp, #8]
 80061ea:	b923      	cbnz	r3, 80061f6 <_dtoa_r+0x7e>
 80061ec:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80061f0:	2800      	cmp	r0, #0
 80061f2:	f000 8545 	beq.w	8006c80 <_dtoa_r+0xb08>
 80061f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061f8:	b953      	cbnz	r3, 8006210 <_dtoa_r+0x98>
 80061fa:	4ba6      	ldr	r3, [pc, #664]	; (8006494 <_dtoa_r+0x31c>)
 80061fc:	e021      	b.n	8006242 <_dtoa_r+0xca>
 80061fe:	4ba6      	ldr	r3, [pc, #664]	; (8006498 <_dtoa_r+0x320>)
 8006200:	9306      	str	r3, [sp, #24]
 8006202:	3308      	adds	r3, #8
 8006204:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	9806      	ldr	r0, [sp, #24]
 800620a:	b015      	add	sp, #84	; 0x54
 800620c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006210:	4ba0      	ldr	r3, [pc, #640]	; (8006494 <_dtoa_r+0x31c>)
 8006212:	9306      	str	r3, [sp, #24]
 8006214:	3303      	adds	r3, #3
 8006216:	e7f5      	b.n	8006204 <_dtoa_r+0x8c>
 8006218:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800621c:	2200      	movs	r2, #0
 800621e:	2300      	movs	r3, #0
 8006220:	4630      	mov	r0, r6
 8006222:	4639      	mov	r1, r7
 8006224:	f7fa fbc0 	bl	80009a8 <__aeabi_dcmpeq>
 8006228:	4682      	mov	sl, r0
 800622a:	b160      	cbz	r0, 8006246 <_dtoa_r+0xce>
 800622c:	2301      	movs	r3, #1
 800622e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8520 	beq.w	8006c7a <_dtoa_r+0xb02>
 800623a:	4b98      	ldr	r3, [pc, #608]	; (800649c <_dtoa_r+0x324>)
 800623c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	3b01      	subs	r3, #1
 8006242:	9306      	str	r3, [sp, #24]
 8006244:	e7e0      	b.n	8006208 <_dtoa_r+0x90>
 8006246:	ab12      	add	r3, sp, #72	; 0x48
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	ab13      	add	r3, sp, #76	; 0x4c
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	4632      	mov	r2, r6
 8006250:	463b      	mov	r3, r7
 8006252:	4620      	mov	r0, r4
 8006254:	f001 f9de 	bl	8007614 <__d2b>
 8006258:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800625c:	4683      	mov	fp, r0
 800625e:	2d00      	cmp	r5, #0
 8006260:	d07d      	beq.n	800635e <_dtoa_r+0x1e6>
 8006262:	46b0      	mov	r8, r6
 8006264:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006268:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800626c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006270:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006274:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006278:	2200      	movs	r2, #0
 800627a:	4b89      	ldr	r3, [pc, #548]	; (80064a0 <_dtoa_r+0x328>)
 800627c:	4640      	mov	r0, r8
 800627e:	4649      	mov	r1, r9
 8006280:	f7f9 ff72 	bl	8000168 <__aeabi_dsub>
 8006284:	a37c      	add	r3, pc, #496	; (adr r3, 8006478 <_dtoa_r+0x300>)
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	f7fa f925 	bl	80004d8 <__aeabi_dmul>
 800628e:	a37c      	add	r3, pc, #496	; (adr r3, 8006480 <_dtoa_r+0x308>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f7f9 ff6a 	bl	800016c <__adddf3>
 8006298:	4606      	mov	r6, r0
 800629a:	4628      	mov	r0, r5
 800629c:	460f      	mov	r7, r1
 800629e:	f7fa f8b1 	bl	8000404 <__aeabi_i2d>
 80062a2:	a379      	add	r3, pc, #484	; (adr r3, 8006488 <_dtoa_r+0x310>)
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f7fa f916 	bl	80004d8 <__aeabi_dmul>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4630      	mov	r0, r6
 80062b2:	4639      	mov	r1, r7
 80062b4:	f7f9 ff5a 	bl	800016c <__adddf3>
 80062b8:	4606      	mov	r6, r0
 80062ba:	460f      	mov	r7, r1
 80062bc:	f7fa fbbc 	bl	8000a38 <__aeabi_d2iz>
 80062c0:	2200      	movs	r2, #0
 80062c2:	4682      	mov	sl, r0
 80062c4:	2300      	movs	r3, #0
 80062c6:	4630      	mov	r0, r6
 80062c8:	4639      	mov	r1, r7
 80062ca:	f7fa fb77 	bl	80009bc <__aeabi_dcmplt>
 80062ce:	b148      	cbz	r0, 80062e4 <_dtoa_r+0x16c>
 80062d0:	4650      	mov	r0, sl
 80062d2:	f7fa f897 	bl	8000404 <__aeabi_i2d>
 80062d6:	4632      	mov	r2, r6
 80062d8:	463b      	mov	r3, r7
 80062da:	f7fa fb65 	bl	80009a8 <__aeabi_dcmpeq>
 80062de:	b908      	cbnz	r0, 80062e4 <_dtoa_r+0x16c>
 80062e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062e4:	f1ba 0f16 	cmp.w	sl, #22
 80062e8:	d85a      	bhi.n	80063a0 <_dtoa_r+0x228>
 80062ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062ee:	496d      	ldr	r1, [pc, #436]	; (80064a4 <_dtoa_r+0x32c>)
 80062f0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80062f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062f8:	f7fa fb7e 	bl	80009f8 <__aeabi_dcmpgt>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d051      	beq.n	80063a4 <_dtoa_r+0x22c>
 8006300:	2300      	movs	r3, #0
 8006302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006306:	930d      	str	r3, [sp, #52]	; 0x34
 8006308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800630a:	1b5d      	subs	r5, r3, r5
 800630c:	1e6b      	subs	r3, r5, #1
 800630e:	9307      	str	r3, [sp, #28]
 8006310:	bf43      	ittte	mi
 8006312:	2300      	movmi	r3, #0
 8006314:	f1c5 0901 	rsbmi	r9, r5, #1
 8006318:	9307      	strmi	r3, [sp, #28]
 800631a:	f04f 0900 	movpl.w	r9, #0
 800631e:	f1ba 0f00 	cmp.w	sl, #0
 8006322:	db41      	blt.n	80063a8 <_dtoa_r+0x230>
 8006324:	9b07      	ldr	r3, [sp, #28]
 8006326:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800632a:	4453      	add	r3, sl
 800632c:	9307      	str	r3, [sp, #28]
 800632e:	2300      	movs	r3, #0
 8006330:	9308      	str	r3, [sp, #32]
 8006332:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006334:	2b09      	cmp	r3, #9
 8006336:	f200 808f 	bhi.w	8006458 <_dtoa_r+0x2e0>
 800633a:	2b05      	cmp	r3, #5
 800633c:	bfc4      	itt	gt
 800633e:	3b04      	subgt	r3, #4
 8006340:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006342:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006344:	bfc8      	it	gt
 8006346:	2500      	movgt	r5, #0
 8006348:	f1a3 0302 	sub.w	r3, r3, #2
 800634c:	bfd8      	it	le
 800634e:	2501      	movle	r5, #1
 8006350:	2b03      	cmp	r3, #3
 8006352:	f200 808d 	bhi.w	8006470 <_dtoa_r+0x2f8>
 8006356:	e8df f003 	tbb	[pc, r3]
 800635a:	7d7b      	.short	0x7d7b
 800635c:	6f2f      	.short	0x6f2f
 800635e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006362:	441d      	add	r5, r3
 8006364:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006368:	2820      	cmp	r0, #32
 800636a:	dd13      	ble.n	8006394 <_dtoa_r+0x21c>
 800636c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006370:	9b02      	ldr	r3, [sp, #8]
 8006372:	fa08 f800 	lsl.w	r8, r8, r0
 8006376:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800637a:	fa23 f000 	lsr.w	r0, r3, r0
 800637e:	ea48 0000 	orr.w	r0, r8, r0
 8006382:	f7fa f82f 	bl	80003e4 <__aeabi_ui2d>
 8006386:	2301      	movs	r3, #1
 8006388:	4680      	mov	r8, r0
 800638a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800638e:	3d01      	subs	r5, #1
 8006390:	9310      	str	r3, [sp, #64]	; 0x40
 8006392:	e771      	b.n	8006278 <_dtoa_r+0x100>
 8006394:	9b02      	ldr	r3, [sp, #8]
 8006396:	f1c0 0020 	rsb	r0, r0, #32
 800639a:	fa03 f000 	lsl.w	r0, r3, r0
 800639e:	e7f0      	b.n	8006382 <_dtoa_r+0x20a>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e7b0      	b.n	8006306 <_dtoa_r+0x18e>
 80063a4:	900d      	str	r0, [sp, #52]	; 0x34
 80063a6:	e7af      	b.n	8006308 <_dtoa_r+0x190>
 80063a8:	f1ca 0300 	rsb	r3, sl, #0
 80063ac:	9308      	str	r3, [sp, #32]
 80063ae:	2300      	movs	r3, #0
 80063b0:	eba9 090a 	sub.w	r9, r9, sl
 80063b4:	930c      	str	r3, [sp, #48]	; 0x30
 80063b6:	e7bc      	b.n	8006332 <_dtoa_r+0x1ba>
 80063b8:	2301      	movs	r3, #1
 80063ba:	9309      	str	r3, [sp, #36]	; 0x24
 80063bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	dd74      	ble.n	80064ac <_dtoa_r+0x334>
 80063c2:	4698      	mov	r8, r3
 80063c4:	9304      	str	r3, [sp, #16]
 80063c6:	2200      	movs	r2, #0
 80063c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063ca:	6072      	str	r2, [r6, #4]
 80063cc:	2204      	movs	r2, #4
 80063ce:	f102 0014 	add.w	r0, r2, #20
 80063d2:	4298      	cmp	r0, r3
 80063d4:	6871      	ldr	r1, [r6, #4]
 80063d6:	d96e      	bls.n	80064b6 <_dtoa_r+0x33e>
 80063d8:	4620      	mov	r0, r4
 80063da:	f000 fe8e 	bl	80070fa <_Balloc>
 80063de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e0:	6030      	str	r0, [r6, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f1b8 0f0e 	cmp.w	r8, #14
 80063e8:	9306      	str	r3, [sp, #24]
 80063ea:	f200 80ed 	bhi.w	80065c8 <_dtoa_r+0x450>
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	f000 80ea 	beq.w	80065c8 <_dtoa_r+0x450>
 80063f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063f8:	f1ba 0f00 	cmp.w	sl, #0
 80063fc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006400:	dd77      	ble.n	80064f2 <_dtoa_r+0x37a>
 8006402:	4a28      	ldr	r2, [pc, #160]	; (80064a4 <_dtoa_r+0x32c>)
 8006404:	f00a 030f 	and.w	r3, sl, #15
 8006408:	ea4f 162a 	mov.w	r6, sl, asr #4
 800640c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006410:	06f0      	lsls	r0, r6, #27
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800641a:	d568      	bpl.n	80064ee <_dtoa_r+0x376>
 800641c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006420:	4b21      	ldr	r3, [pc, #132]	; (80064a8 <_dtoa_r+0x330>)
 8006422:	2503      	movs	r5, #3
 8006424:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006428:	f7fa f980 	bl	800072c <__aeabi_ddiv>
 800642c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006430:	f006 060f 	and.w	r6, r6, #15
 8006434:	4f1c      	ldr	r7, [pc, #112]	; (80064a8 <_dtoa_r+0x330>)
 8006436:	e04f      	b.n	80064d8 <_dtoa_r+0x360>
 8006438:	2301      	movs	r3, #1
 800643a:	9309      	str	r3, [sp, #36]	; 0x24
 800643c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800643e:	4453      	add	r3, sl
 8006440:	f103 0801 	add.w	r8, r3, #1
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	4643      	mov	r3, r8
 8006448:	2b01      	cmp	r3, #1
 800644a:	bfb8      	it	lt
 800644c:	2301      	movlt	r3, #1
 800644e:	e7ba      	b.n	80063c6 <_dtoa_r+0x24e>
 8006450:	2300      	movs	r3, #0
 8006452:	e7b2      	b.n	80063ba <_dtoa_r+0x242>
 8006454:	2300      	movs	r3, #0
 8006456:	e7f0      	b.n	800643a <_dtoa_r+0x2c2>
 8006458:	2501      	movs	r5, #1
 800645a:	2300      	movs	r3, #0
 800645c:	9509      	str	r5, [sp, #36]	; 0x24
 800645e:	931e      	str	r3, [sp, #120]	; 0x78
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	2200      	movs	r2, #0
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	4698      	mov	r8, r3
 800646a:	2312      	movs	r3, #18
 800646c:	921f      	str	r2, [sp, #124]	; 0x7c
 800646e:	e7aa      	b.n	80063c6 <_dtoa_r+0x24e>
 8006470:	2301      	movs	r3, #1
 8006472:	9309      	str	r3, [sp, #36]	; 0x24
 8006474:	e7f4      	b.n	8006460 <_dtoa_r+0x2e8>
 8006476:	bf00      	nop
 8006478:	636f4361 	.word	0x636f4361
 800647c:	3fd287a7 	.word	0x3fd287a7
 8006480:	8b60c8b3 	.word	0x8b60c8b3
 8006484:	3fc68a28 	.word	0x3fc68a28
 8006488:	509f79fb 	.word	0x509f79fb
 800648c:	3fd34413 	.word	0x3fd34413
 8006490:	7ff00000 	.word	0x7ff00000
 8006494:	08008911 	.word	0x08008911
 8006498:	08008908 	.word	0x08008908
 800649c:	080088e5 	.word	0x080088e5
 80064a0:	3ff80000 	.word	0x3ff80000
 80064a4:	080089a0 	.word	0x080089a0
 80064a8:	08008978 	.word	0x08008978
 80064ac:	2301      	movs	r3, #1
 80064ae:	9304      	str	r3, [sp, #16]
 80064b0:	4698      	mov	r8, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	e7da      	b.n	800646c <_dtoa_r+0x2f4>
 80064b6:	3101      	adds	r1, #1
 80064b8:	6071      	str	r1, [r6, #4]
 80064ba:	0052      	lsls	r2, r2, #1
 80064bc:	e787      	b.n	80063ce <_dtoa_r+0x256>
 80064be:	07f1      	lsls	r1, r6, #31
 80064c0:	d508      	bpl.n	80064d4 <_dtoa_r+0x35c>
 80064c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ca:	f7fa f805 	bl	80004d8 <__aeabi_dmul>
 80064ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064d2:	3501      	adds	r5, #1
 80064d4:	1076      	asrs	r6, r6, #1
 80064d6:	3708      	adds	r7, #8
 80064d8:	2e00      	cmp	r6, #0
 80064da:	d1f0      	bne.n	80064be <_dtoa_r+0x346>
 80064dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80064e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e4:	f7fa f922 	bl	800072c <__aeabi_ddiv>
 80064e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ec:	e01b      	b.n	8006526 <_dtoa_r+0x3ae>
 80064ee:	2502      	movs	r5, #2
 80064f0:	e7a0      	b.n	8006434 <_dtoa_r+0x2bc>
 80064f2:	f000 80a4 	beq.w	800663e <_dtoa_r+0x4c6>
 80064f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80064fa:	f1ca 0600 	rsb	r6, sl, #0
 80064fe:	4ba0      	ldr	r3, [pc, #640]	; (8006780 <_dtoa_r+0x608>)
 8006500:	f006 020f 	and.w	r2, r6, #15
 8006504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7f9 ffe4 	bl	80004d8 <__aeabi_dmul>
 8006510:	2502      	movs	r5, #2
 8006512:	2300      	movs	r3, #0
 8006514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006518:	4f9a      	ldr	r7, [pc, #616]	; (8006784 <_dtoa_r+0x60c>)
 800651a:	1136      	asrs	r6, r6, #4
 800651c:	2e00      	cmp	r6, #0
 800651e:	f040 8083 	bne.w	8006628 <_dtoa_r+0x4b0>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e0      	bne.n	80064e8 <_dtoa_r+0x370>
 8006526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 808a 	beq.w	8006642 <_dtoa_r+0x4ca>
 800652e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006532:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006536:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800653a:	2200      	movs	r2, #0
 800653c:	4b92      	ldr	r3, [pc, #584]	; (8006788 <_dtoa_r+0x610>)
 800653e:	f7fa fa3d 	bl	80009bc <__aeabi_dcmplt>
 8006542:	2800      	cmp	r0, #0
 8006544:	d07d      	beq.n	8006642 <_dtoa_r+0x4ca>
 8006546:	f1b8 0f00 	cmp.w	r8, #0
 800654a:	d07a      	beq.n	8006642 <_dtoa_r+0x4ca>
 800654c:	9b04      	ldr	r3, [sp, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	dd36      	ble.n	80065c0 <_dtoa_r+0x448>
 8006552:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006556:	2200      	movs	r2, #0
 8006558:	4b8c      	ldr	r3, [pc, #560]	; (800678c <_dtoa_r+0x614>)
 800655a:	f7f9 ffbd 	bl	80004d8 <__aeabi_dmul>
 800655e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006562:	9e04      	ldr	r6, [sp, #16]
 8006564:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006568:	3501      	adds	r5, #1
 800656a:	4628      	mov	r0, r5
 800656c:	f7f9 ff4a 	bl	8000404 <__aeabi_i2d>
 8006570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006574:	f7f9 ffb0 	bl	80004d8 <__aeabi_dmul>
 8006578:	2200      	movs	r2, #0
 800657a:	4b85      	ldr	r3, [pc, #532]	; (8006790 <_dtoa_r+0x618>)
 800657c:	f7f9 fdf6 	bl	800016c <__adddf3>
 8006580:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006584:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006588:	950b      	str	r5, [sp, #44]	; 0x2c
 800658a:	2e00      	cmp	r6, #0
 800658c:	d15c      	bne.n	8006648 <_dtoa_r+0x4d0>
 800658e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	4b7f      	ldr	r3, [pc, #508]	; (8006794 <_dtoa_r+0x61c>)
 8006596:	f7f9 fde7 	bl	8000168 <__aeabi_dsub>
 800659a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800659c:	462b      	mov	r3, r5
 800659e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a2:	f7fa fa29 	bl	80009f8 <__aeabi_dcmpgt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f040 8281 	bne.w	8006aae <_dtoa_r+0x936>
 80065ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065b2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80065b6:	f7fa fa01 	bl	80009bc <__aeabi_dcmplt>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	f040 8275 	bne.w	8006aaa <_dtoa_r+0x932>
 80065c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80065c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f2c0 814b 	blt.w	8006866 <_dtoa_r+0x6ee>
 80065d0:	f1ba 0f0e 	cmp.w	sl, #14
 80065d4:	f300 8147 	bgt.w	8006866 <_dtoa_r+0x6ee>
 80065d8:	4b69      	ldr	r3, [pc, #420]	; (8006780 <_dtoa_r+0x608>)
 80065da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f280 80d7 	bge.w	800679c <_dtoa_r+0x624>
 80065ee:	f1b8 0f00 	cmp.w	r8, #0
 80065f2:	f300 80d3 	bgt.w	800679c <_dtoa_r+0x624>
 80065f6:	f040 8257 	bne.w	8006aa8 <_dtoa_r+0x930>
 80065fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065fe:	2200      	movs	r2, #0
 8006600:	4b64      	ldr	r3, [pc, #400]	; (8006794 <_dtoa_r+0x61c>)
 8006602:	f7f9 ff69 	bl	80004d8 <__aeabi_dmul>
 8006606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800660a:	f7fa f9eb 	bl	80009e4 <__aeabi_dcmpge>
 800660e:	4646      	mov	r6, r8
 8006610:	4647      	mov	r7, r8
 8006612:	2800      	cmp	r0, #0
 8006614:	f040 822d 	bne.w	8006a72 <_dtoa_r+0x8fa>
 8006618:	9b06      	ldr	r3, [sp, #24]
 800661a:	9a06      	ldr	r2, [sp, #24]
 800661c:	1c5d      	adds	r5, r3, #1
 800661e:	2331      	movs	r3, #49	; 0x31
 8006620:	f10a 0a01 	add.w	sl, sl, #1
 8006624:	7013      	strb	r3, [r2, #0]
 8006626:	e228      	b.n	8006a7a <_dtoa_r+0x902>
 8006628:	07f2      	lsls	r2, r6, #31
 800662a:	d505      	bpl.n	8006638 <_dtoa_r+0x4c0>
 800662c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006630:	f7f9 ff52 	bl	80004d8 <__aeabi_dmul>
 8006634:	2301      	movs	r3, #1
 8006636:	3501      	adds	r5, #1
 8006638:	1076      	asrs	r6, r6, #1
 800663a:	3708      	adds	r7, #8
 800663c:	e76e      	b.n	800651c <_dtoa_r+0x3a4>
 800663e:	2502      	movs	r5, #2
 8006640:	e771      	b.n	8006526 <_dtoa_r+0x3ae>
 8006642:	4657      	mov	r7, sl
 8006644:	4646      	mov	r6, r8
 8006646:	e790      	b.n	800656a <_dtoa_r+0x3f2>
 8006648:	4b4d      	ldr	r3, [pc, #308]	; (8006780 <_dtoa_r+0x608>)
 800664a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800664e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	d048      	beq.n	80066ea <_dtoa_r+0x572>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	2000      	movs	r0, #0
 800665e:	494e      	ldr	r1, [pc, #312]	; (8006798 <_dtoa_r+0x620>)
 8006660:	f7fa f864 	bl	800072c <__aeabi_ddiv>
 8006664:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006668:	f7f9 fd7e 	bl	8000168 <__aeabi_dsub>
 800666c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006670:	9d06      	ldr	r5, [sp, #24]
 8006672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006676:	f7fa f9df 	bl	8000a38 <__aeabi_d2iz>
 800667a:	9011      	str	r0, [sp, #68]	; 0x44
 800667c:	f7f9 fec2 	bl	8000404 <__aeabi_i2d>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006688:	f7f9 fd6e 	bl	8000168 <__aeabi_dsub>
 800668c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800668e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006692:	3330      	adds	r3, #48	; 0x30
 8006694:	f805 3b01 	strb.w	r3, [r5], #1
 8006698:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800669c:	f7fa f98e 	bl	80009bc <__aeabi_dcmplt>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d163      	bne.n	800676c <_dtoa_r+0x5f4>
 80066a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066a8:	2000      	movs	r0, #0
 80066aa:	4937      	ldr	r1, [pc, #220]	; (8006788 <_dtoa_r+0x610>)
 80066ac:	f7f9 fd5c 	bl	8000168 <__aeabi_dsub>
 80066b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066b4:	f7fa f982 	bl	80009bc <__aeabi_dcmplt>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	f040 80b5 	bne.w	8006828 <_dtoa_r+0x6b0>
 80066be:	9b06      	ldr	r3, [sp, #24]
 80066c0:	1aeb      	subs	r3, r5, r3
 80066c2:	429e      	cmp	r6, r3
 80066c4:	f77f af7c 	ble.w	80065c0 <_dtoa_r+0x448>
 80066c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066cc:	2200      	movs	r2, #0
 80066ce:	4b2f      	ldr	r3, [pc, #188]	; (800678c <_dtoa_r+0x614>)
 80066d0:	f7f9 ff02 	bl	80004d8 <__aeabi_dmul>
 80066d4:	2200      	movs	r2, #0
 80066d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066de:	4b2b      	ldr	r3, [pc, #172]	; (800678c <_dtoa_r+0x614>)
 80066e0:	f7f9 fefa 	bl	80004d8 <__aeabi_dmul>
 80066e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e8:	e7c3      	b.n	8006672 <_dtoa_r+0x4fa>
 80066ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066ee:	f7f9 fef3 	bl	80004d8 <__aeabi_dmul>
 80066f2:	9b06      	ldr	r3, [sp, #24]
 80066f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066f8:	199d      	adds	r5, r3, r6
 80066fa:	461e      	mov	r6, r3
 80066fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006700:	f7fa f99a 	bl	8000a38 <__aeabi_d2iz>
 8006704:	9011      	str	r0, [sp, #68]	; 0x44
 8006706:	f7f9 fe7d 	bl	8000404 <__aeabi_i2d>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006712:	f7f9 fd29 	bl	8000168 <__aeabi_dsub>
 8006716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800671c:	3330      	adds	r3, #48	; 0x30
 800671e:	f806 3b01 	strb.w	r3, [r6], #1
 8006722:	42ae      	cmp	r6, r5
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	d124      	bne.n	8006774 <_dtoa_r+0x5fc>
 800672a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800672e:	4b1a      	ldr	r3, [pc, #104]	; (8006798 <_dtoa_r+0x620>)
 8006730:	f7f9 fd1c 	bl	800016c <__adddf3>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800673c:	f7fa f95c 	bl	80009f8 <__aeabi_dcmpgt>
 8006740:	2800      	cmp	r0, #0
 8006742:	d171      	bne.n	8006828 <_dtoa_r+0x6b0>
 8006744:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006748:	2000      	movs	r0, #0
 800674a:	4913      	ldr	r1, [pc, #76]	; (8006798 <_dtoa_r+0x620>)
 800674c:	f7f9 fd0c 	bl	8000168 <__aeabi_dsub>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006758:	f7fa f930 	bl	80009bc <__aeabi_dcmplt>
 800675c:	2800      	cmp	r0, #0
 800675e:	f43f af2f 	beq.w	80065c0 <_dtoa_r+0x448>
 8006762:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006766:	1e6a      	subs	r2, r5, #1
 8006768:	2b30      	cmp	r3, #48	; 0x30
 800676a:	d001      	beq.n	8006770 <_dtoa_r+0x5f8>
 800676c:	46ba      	mov	sl, r7
 800676e:	e04a      	b.n	8006806 <_dtoa_r+0x68e>
 8006770:	4615      	mov	r5, r2
 8006772:	e7f6      	b.n	8006762 <_dtoa_r+0x5ea>
 8006774:	4b05      	ldr	r3, [pc, #20]	; (800678c <_dtoa_r+0x614>)
 8006776:	f7f9 feaf 	bl	80004d8 <__aeabi_dmul>
 800677a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800677e:	e7bd      	b.n	80066fc <_dtoa_r+0x584>
 8006780:	080089a0 	.word	0x080089a0
 8006784:	08008978 	.word	0x08008978
 8006788:	3ff00000 	.word	0x3ff00000
 800678c:	40240000 	.word	0x40240000
 8006790:	401c0000 	.word	0x401c0000
 8006794:	40140000 	.word	0x40140000
 8006798:	3fe00000 	.word	0x3fe00000
 800679c:	9d06      	ldr	r5, [sp, #24]
 800679e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a6:	4630      	mov	r0, r6
 80067a8:	4639      	mov	r1, r7
 80067aa:	f7f9 ffbf 	bl	800072c <__aeabi_ddiv>
 80067ae:	f7fa f943 	bl	8000a38 <__aeabi_d2iz>
 80067b2:	4681      	mov	r9, r0
 80067b4:	f7f9 fe26 	bl	8000404 <__aeabi_i2d>
 80067b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067bc:	f7f9 fe8c 	bl	80004d8 <__aeabi_dmul>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4630      	mov	r0, r6
 80067c6:	4639      	mov	r1, r7
 80067c8:	f7f9 fcce 	bl	8000168 <__aeabi_dsub>
 80067cc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80067d0:	f805 6b01 	strb.w	r6, [r5], #1
 80067d4:	9e06      	ldr	r6, [sp, #24]
 80067d6:	4602      	mov	r2, r0
 80067d8:	1bae      	subs	r6, r5, r6
 80067da:	45b0      	cmp	r8, r6
 80067dc:	460b      	mov	r3, r1
 80067de:	d135      	bne.n	800684c <_dtoa_r+0x6d4>
 80067e0:	f7f9 fcc4 	bl	800016c <__adddf3>
 80067e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067e8:	4606      	mov	r6, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	f7fa f904 	bl	80009f8 <__aeabi_dcmpgt>
 80067f0:	b9c8      	cbnz	r0, 8006826 <_dtoa_r+0x6ae>
 80067f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7fa f8d5 	bl	80009a8 <__aeabi_dcmpeq>
 80067fe:	b110      	cbz	r0, 8006806 <_dtoa_r+0x68e>
 8006800:	f019 0f01 	tst.w	r9, #1
 8006804:	d10f      	bne.n	8006826 <_dtoa_r+0x6ae>
 8006806:	4659      	mov	r1, fp
 8006808:	4620      	mov	r0, r4
 800680a:	f000 fcaa 	bl	8007162 <_Bfree>
 800680e:	2300      	movs	r3, #0
 8006810:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006812:	702b      	strb	r3, [r5, #0]
 8006814:	f10a 0301 	add.w	r3, sl, #1
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800681c:	2b00      	cmp	r3, #0
 800681e:	f43f acf3 	beq.w	8006208 <_dtoa_r+0x90>
 8006822:	601d      	str	r5, [r3, #0]
 8006824:	e4f0      	b.n	8006208 <_dtoa_r+0x90>
 8006826:	4657      	mov	r7, sl
 8006828:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800682c:	1e6b      	subs	r3, r5, #1
 800682e:	2a39      	cmp	r2, #57	; 0x39
 8006830:	d106      	bne.n	8006840 <_dtoa_r+0x6c8>
 8006832:	9a06      	ldr	r2, [sp, #24]
 8006834:	429a      	cmp	r2, r3
 8006836:	d107      	bne.n	8006848 <_dtoa_r+0x6d0>
 8006838:	2330      	movs	r3, #48	; 0x30
 800683a:	7013      	strb	r3, [r2, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	3701      	adds	r7, #1
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	3201      	adds	r2, #1
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	e791      	b.n	800676c <_dtoa_r+0x5f4>
 8006848:	461d      	mov	r5, r3
 800684a:	e7ed      	b.n	8006828 <_dtoa_r+0x6b0>
 800684c:	2200      	movs	r2, #0
 800684e:	4b99      	ldr	r3, [pc, #612]	; (8006ab4 <_dtoa_r+0x93c>)
 8006850:	f7f9 fe42 	bl	80004d8 <__aeabi_dmul>
 8006854:	2200      	movs	r2, #0
 8006856:	2300      	movs	r3, #0
 8006858:	4606      	mov	r6, r0
 800685a:	460f      	mov	r7, r1
 800685c:	f7fa f8a4 	bl	80009a8 <__aeabi_dcmpeq>
 8006860:	2800      	cmp	r0, #0
 8006862:	d09e      	beq.n	80067a2 <_dtoa_r+0x62a>
 8006864:	e7cf      	b.n	8006806 <_dtoa_r+0x68e>
 8006866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006868:	2a00      	cmp	r2, #0
 800686a:	f000 8088 	beq.w	800697e <_dtoa_r+0x806>
 800686e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006870:	2a01      	cmp	r2, #1
 8006872:	dc6d      	bgt.n	8006950 <_dtoa_r+0x7d8>
 8006874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006876:	2a00      	cmp	r2, #0
 8006878:	d066      	beq.n	8006948 <_dtoa_r+0x7d0>
 800687a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800687e:	464d      	mov	r5, r9
 8006880:	9e08      	ldr	r6, [sp, #32]
 8006882:	9a07      	ldr	r2, [sp, #28]
 8006884:	2101      	movs	r1, #1
 8006886:	441a      	add	r2, r3
 8006888:	4620      	mov	r0, r4
 800688a:	4499      	add	r9, r3
 800688c:	9207      	str	r2, [sp, #28]
 800688e:	f000 fd08 	bl	80072a2 <__i2b>
 8006892:	4607      	mov	r7, r0
 8006894:	2d00      	cmp	r5, #0
 8006896:	dd0b      	ble.n	80068b0 <_dtoa_r+0x738>
 8006898:	9b07      	ldr	r3, [sp, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	dd08      	ble.n	80068b0 <_dtoa_r+0x738>
 800689e:	42ab      	cmp	r3, r5
 80068a0:	bfa8      	it	ge
 80068a2:	462b      	movge	r3, r5
 80068a4:	9a07      	ldr	r2, [sp, #28]
 80068a6:	eba9 0903 	sub.w	r9, r9, r3
 80068aa:	1aed      	subs	r5, r5, r3
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	9307      	str	r3, [sp, #28]
 80068b0:	9b08      	ldr	r3, [sp, #32]
 80068b2:	b1eb      	cbz	r3, 80068f0 <_dtoa_r+0x778>
 80068b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d065      	beq.n	8006986 <_dtoa_r+0x80e>
 80068ba:	b18e      	cbz	r6, 80068e0 <_dtoa_r+0x768>
 80068bc:	4639      	mov	r1, r7
 80068be:	4632      	mov	r2, r6
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 fd8d 	bl	80073e0 <__pow5mult>
 80068c6:	465a      	mov	r2, fp
 80068c8:	4601      	mov	r1, r0
 80068ca:	4607      	mov	r7, r0
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 fcf1 	bl	80072b4 <__multiply>
 80068d2:	4659      	mov	r1, fp
 80068d4:	900a      	str	r0, [sp, #40]	; 0x28
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 fc43 	bl	8007162 <_Bfree>
 80068dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068de:	469b      	mov	fp, r3
 80068e0:	9b08      	ldr	r3, [sp, #32]
 80068e2:	1b9a      	subs	r2, r3, r6
 80068e4:	d004      	beq.n	80068f0 <_dtoa_r+0x778>
 80068e6:	4659      	mov	r1, fp
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fd79 	bl	80073e0 <__pow5mult>
 80068ee:	4683      	mov	fp, r0
 80068f0:	2101      	movs	r1, #1
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fcd5 	bl	80072a2 <__i2b>
 80068f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068fa:	4606      	mov	r6, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 81c6 	beq.w	8006c8e <_dtoa_r+0xb16>
 8006902:	461a      	mov	r2, r3
 8006904:	4601      	mov	r1, r0
 8006906:	4620      	mov	r0, r4
 8006908:	f000 fd6a 	bl	80073e0 <__pow5mult>
 800690c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800690e:	4606      	mov	r6, r0
 8006910:	2b01      	cmp	r3, #1
 8006912:	dc3e      	bgt.n	8006992 <_dtoa_r+0x81a>
 8006914:	9b02      	ldr	r3, [sp, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d137      	bne.n	800698a <_dtoa_r+0x812>
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006920:	2b00      	cmp	r3, #0
 8006922:	d134      	bne.n	800698e <_dtoa_r+0x816>
 8006924:	9b03      	ldr	r3, [sp, #12]
 8006926:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800692a:	0d1b      	lsrs	r3, r3, #20
 800692c:	051b      	lsls	r3, r3, #20
 800692e:	b12b      	cbz	r3, 800693c <_dtoa_r+0x7c4>
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	f109 0901 	add.w	r9, r9, #1
 8006936:	3301      	adds	r3, #1
 8006938:	9307      	str	r3, [sp, #28]
 800693a:	2301      	movs	r3, #1
 800693c:	9308      	str	r3, [sp, #32]
 800693e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006940:	2b00      	cmp	r3, #0
 8006942:	d128      	bne.n	8006996 <_dtoa_r+0x81e>
 8006944:	2001      	movs	r0, #1
 8006946:	e02e      	b.n	80069a6 <_dtoa_r+0x82e>
 8006948:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800694a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800694e:	e796      	b.n	800687e <_dtoa_r+0x706>
 8006950:	9b08      	ldr	r3, [sp, #32]
 8006952:	f108 36ff 	add.w	r6, r8, #4294967295
 8006956:	42b3      	cmp	r3, r6
 8006958:	bfb7      	itett	lt
 800695a:	9b08      	ldrlt	r3, [sp, #32]
 800695c:	1b9e      	subge	r6, r3, r6
 800695e:	1af2      	sublt	r2, r6, r3
 8006960:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006962:	bfbf      	itttt	lt
 8006964:	9608      	strlt	r6, [sp, #32]
 8006966:	189b      	addlt	r3, r3, r2
 8006968:	930c      	strlt	r3, [sp, #48]	; 0x30
 800696a:	2600      	movlt	r6, #0
 800696c:	f1b8 0f00 	cmp.w	r8, #0
 8006970:	bfb9      	ittee	lt
 8006972:	eba9 0508 	sublt.w	r5, r9, r8
 8006976:	2300      	movlt	r3, #0
 8006978:	464d      	movge	r5, r9
 800697a:	4643      	movge	r3, r8
 800697c:	e781      	b.n	8006882 <_dtoa_r+0x70a>
 800697e:	9e08      	ldr	r6, [sp, #32]
 8006980:	464d      	mov	r5, r9
 8006982:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006984:	e786      	b.n	8006894 <_dtoa_r+0x71c>
 8006986:	9a08      	ldr	r2, [sp, #32]
 8006988:	e7ad      	b.n	80068e6 <_dtoa_r+0x76e>
 800698a:	2300      	movs	r3, #0
 800698c:	e7d6      	b.n	800693c <_dtoa_r+0x7c4>
 800698e:	9b02      	ldr	r3, [sp, #8]
 8006990:	e7d4      	b.n	800693c <_dtoa_r+0x7c4>
 8006992:	2300      	movs	r3, #0
 8006994:	9308      	str	r3, [sp, #32]
 8006996:	6933      	ldr	r3, [r6, #16]
 8006998:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800699c:	6918      	ldr	r0, [r3, #16]
 800699e:	f000 fc32 	bl	8007206 <__hi0bits>
 80069a2:	f1c0 0020 	rsb	r0, r0, #32
 80069a6:	9b07      	ldr	r3, [sp, #28]
 80069a8:	4418      	add	r0, r3
 80069aa:	f010 001f 	ands.w	r0, r0, #31
 80069ae:	d047      	beq.n	8006a40 <_dtoa_r+0x8c8>
 80069b0:	f1c0 0320 	rsb	r3, r0, #32
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	dd3b      	ble.n	8006a30 <_dtoa_r+0x8b8>
 80069b8:	9b07      	ldr	r3, [sp, #28]
 80069ba:	f1c0 001c 	rsb	r0, r0, #28
 80069be:	4481      	add	r9, r0
 80069c0:	4405      	add	r5, r0
 80069c2:	4403      	add	r3, r0
 80069c4:	9307      	str	r3, [sp, #28]
 80069c6:	f1b9 0f00 	cmp.w	r9, #0
 80069ca:	dd05      	ble.n	80069d8 <_dtoa_r+0x860>
 80069cc:	4659      	mov	r1, fp
 80069ce:	464a      	mov	r2, r9
 80069d0:	4620      	mov	r0, r4
 80069d2:	f000 fd53 	bl	800747c <__lshift>
 80069d6:	4683      	mov	fp, r0
 80069d8:	9b07      	ldr	r3, [sp, #28]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	dd05      	ble.n	80069ea <_dtoa_r+0x872>
 80069de:	4631      	mov	r1, r6
 80069e0:	461a      	mov	r2, r3
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 fd4a 	bl	800747c <__lshift>
 80069e8:	4606      	mov	r6, r0
 80069ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ec:	b353      	cbz	r3, 8006a44 <_dtoa_r+0x8cc>
 80069ee:	4631      	mov	r1, r6
 80069f0:	4658      	mov	r0, fp
 80069f2:	f000 fd97 	bl	8007524 <__mcmp>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	da24      	bge.n	8006a44 <_dtoa_r+0x8cc>
 80069fa:	2300      	movs	r3, #0
 80069fc:	4659      	mov	r1, fp
 80069fe:	220a      	movs	r2, #10
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fbc5 	bl	8007190 <__multadd>
 8006a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a0c:	4683      	mov	fp, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 8144 	beq.w	8006c9c <_dtoa_r+0xb24>
 8006a14:	2300      	movs	r3, #0
 8006a16:	4639      	mov	r1, r7
 8006a18:	220a      	movs	r2, #10
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 fbb8 	bl	8007190 <__multadd>
 8006a20:	9b04      	ldr	r3, [sp, #16]
 8006a22:	4607      	mov	r7, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	dc4d      	bgt.n	8006ac4 <_dtoa_r+0x94c>
 8006a28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	dd4a      	ble.n	8006ac4 <_dtoa_r+0x94c>
 8006a2e:	e011      	b.n	8006a54 <_dtoa_r+0x8dc>
 8006a30:	d0c9      	beq.n	80069c6 <_dtoa_r+0x84e>
 8006a32:	9a07      	ldr	r2, [sp, #28]
 8006a34:	331c      	adds	r3, #28
 8006a36:	441a      	add	r2, r3
 8006a38:	4499      	add	r9, r3
 8006a3a:	441d      	add	r5, r3
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	e7c1      	b.n	80069c4 <_dtoa_r+0x84c>
 8006a40:	4603      	mov	r3, r0
 8006a42:	e7f6      	b.n	8006a32 <_dtoa_r+0x8ba>
 8006a44:	f1b8 0f00 	cmp.w	r8, #0
 8006a48:	dc36      	bgt.n	8006ab8 <_dtoa_r+0x940>
 8006a4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	dd33      	ble.n	8006ab8 <_dtoa_r+0x940>
 8006a50:	f8cd 8010 	str.w	r8, [sp, #16]
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	b963      	cbnz	r3, 8006a72 <_dtoa_r+0x8fa>
 8006a58:	4631      	mov	r1, r6
 8006a5a:	2205      	movs	r2, #5
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f000 fb97 	bl	8007190 <__multadd>
 8006a62:	4601      	mov	r1, r0
 8006a64:	4606      	mov	r6, r0
 8006a66:	4658      	mov	r0, fp
 8006a68:	f000 fd5c 	bl	8007524 <__mcmp>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f73f add3 	bgt.w	8006618 <_dtoa_r+0x4a0>
 8006a72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a74:	9d06      	ldr	r5, [sp, #24]
 8006a76:	ea6f 0a03 	mvn.w	sl, r3
 8006a7a:	f04f 0900 	mov.w	r9, #0
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 fb6e 	bl	8007162 <_Bfree>
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	f43f aebd 	beq.w	8006806 <_dtoa_r+0x68e>
 8006a8c:	f1b9 0f00 	cmp.w	r9, #0
 8006a90:	d005      	beq.n	8006a9e <_dtoa_r+0x926>
 8006a92:	45b9      	cmp	r9, r7
 8006a94:	d003      	beq.n	8006a9e <_dtoa_r+0x926>
 8006a96:	4649      	mov	r1, r9
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 fb62 	bl	8007162 <_Bfree>
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f000 fb5e 	bl	8007162 <_Bfree>
 8006aa6:	e6ae      	b.n	8006806 <_dtoa_r+0x68e>
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	4637      	mov	r7, r6
 8006aac:	e7e1      	b.n	8006a72 <_dtoa_r+0x8fa>
 8006aae:	46ba      	mov	sl, r7
 8006ab0:	4637      	mov	r7, r6
 8006ab2:	e5b1      	b.n	8006618 <_dtoa_r+0x4a0>
 8006ab4:	40240000 	.word	0x40240000
 8006ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aba:	f8cd 8010 	str.w	r8, [sp, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 80f3 	beq.w	8006caa <_dtoa_r+0xb32>
 8006ac4:	2d00      	cmp	r5, #0
 8006ac6:	dd05      	ble.n	8006ad4 <_dtoa_r+0x95c>
 8006ac8:	4639      	mov	r1, r7
 8006aca:	462a      	mov	r2, r5
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 fcd5 	bl	800747c <__lshift>
 8006ad2:	4607      	mov	r7, r0
 8006ad4:	9b08      	ldr	r3, [sp, #32]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d04c      	beq.n	8006b74 <_dtoa_r+0x9fc>
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	4620      	mov	r0, r4
 8006ade:	f000 fb0c 	bl	80070fa <_Balloc>
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	f107 010c 	add.w	r1, r7, #12
 8006aea:	3202      	adds	r2, #2
 8006aec:	0092      	lsls	r2, r2, #2
 8006aee:	300c      	adds	r0, #12
 8006af0:	f000 faf8 	bl	80070e4 <memcpy>
 8006af4:	2201      	movs	r2, #1
 8006af6:	4629      	mov	r1, r5
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 fcbf 	bl	800747c <__lshift>
 8006afe:	46b9      	mov	r9, r7
 8006b00:	4607      	mov	r7, r0
 8006b02:	9b06      	ldr	r3, [sp, #24]
 8006b04:	9307      	str	r3, [sp, #28]
 8006b06:	9b02      	ldr	r3, [sp, #8]
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	9308      	str	r3, [sp, #32]
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4658      	mov	r0, fp
 8006b12:	f7ff faa1 	bl	8006058 <quorem>
 8006b16:	4649      	mov	r1, r9
 8006b18:	4605      	mov	r5, r0
 8006b1a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b1e:	4658      	mov	r0, fp
 8006b20:	f000 fd00 	bl	8007524 <__mcmp>
 8006b24:	463a      	mov	r2, r7
 8006b26:	9002      	str	r0, [sp, #8]
 8006b28:	4631      	mov	r1, r6
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 fd14 	bl	8007558 <__mdiff>
 8006b30:	68c3      	ldr	r3, [r0, #12]
 8006b32:	4602      	mov	r2, r0
 8006b34:	bb03      	cbnz	r3, 8006b78 <_dtoa_r+0xa00>
 8006b36:	4601      	mov	r1, r0
 8006b38:	9009      	str	r0, [sp, #36]	; 0x24
 8006b3a:	4658      	mov	r0, fp
 8006b3c:	f000 fcf2 	bl	8007524 <__mcmp>
 8006b40:	4603      	mov	r3, r0
 8006b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b44:	4611      	mov	r1, r2
 8006b46:	4620      	mov	r0, r4
 8006b48:	9309      	str	r3, [sp, #36]	; 0x24
 8006b4a:	f000 fb0a 	bl	8007162 <_Bfree>
 8006b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b50:	b9a3      	cbnz	r3, 8006b7c <_dtoa_r+0xa04>
 8006b52:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b54:	b992      	cbnz	r2, 8006b7c <_dtoa_r+0xa04>
 8006b56:	9a08      	ldr	r2, [sp, #32]
 8006b58:	b982      	cbnz	r2, 8006b7c <_dtoa_r+0xa04>
 8006b5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b5e:	d029      	beq.n	8006bb4 <_dtoa_r+0xa3c>
 8006b60:	9b02      	ldr	r3, [sp, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dd01      	ble.n	8006b6a <_dtoa_r+0x9f2>
 8006b66:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006b6a:	9b07      	ldr	r3, [sp, #28]
 8006b6c:	1c5d      	adds	r5, r3, #1
 8006b6e:	f883 8000 	strb.w	r8, [r3]
 8006b72:	e784      	b.n	8006a7e <_dtoa_r+0x906>
 8006b74:	4638      	mov	r0, r7
 8006b76:	e7c2      	b.n	8006afe <_dtoa_r+0x986>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e7e3      	b.n	8006b44 <_dtoa_r+0x9cc>
 8006b7c:	9a02      	ldr	r2, [sp, #8]
 8006b7e:	2a00      	cmp	r2, #0
 8006b80:	db04      	blt.n	8006b8c <_dtoa_r+0xa14>
 8006b82:	d123      	bne.n	8006bcc <_dtoa_r+0xa54>
 8006b84:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b86:	bb0a      	cbnz	r2, 8006bcc <_dtoa_r+0xa54>
 8006b88:	9a08      	ldr	r2, [sp, #32]
 8006b8a:	b9fa      	cbnz	r2, 8006bcc <_dtoa_r+0xa54>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	ddec      	ble.n	8006b6a <_dtoa_r+0x9f2>
 8006b90:	4659      	mov	r1, fp
 8006b92:	2201      	movs	r2, #1
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 fc71 	bl	800747c <__lshift>
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	4683      	mov	fp, r0
 8006b9e:	f000 fcc1 	bl	8007524 <__mcmp>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	dc03      	bgt.n	8006bae <_dtoa_r+0xa36>
 8006ba6:	d1e0      	bne.n	8006b6a <_dtoa_r+0x9f2>
 8006ba8:	f018 0f01 	tst.w	r8, #1
 8006bac:	d0dd      	beq.n	8006b6a <_dtoa_r+0x9f2>
 8006bae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bb2:	d1d8      	bne.n	8006b66 <_dtoa_r+0x9ee>
 8006bb4:	9b07      	ldr	r3, [sp, #28]
 8006bb6:	9a07      	ldr	r2, [sp, #28]
 8006bb8:	1c5d      	adds	r5, r3, #1
 8006bba:	2339      	movs	r3, #57	; 0x39
 8006bbc:	7013      	strb	r3, [r2, #0]
 8006bbe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bc2:	1e6a      	subs	r2, r5, #1
 8006bc4:	2b39      	cmp	r3, #57	; 0x39
 8006bc6:	d04d      	beq.n	8006c64 <_dtoa_r+0xaec>
 8006bc8:	3301      	adds	r3, #1
 8006bca:	e052      	b.n	8006c72 <_dtoa_r+0xafa>
 8006bcc:	9a07      	ldr	r2, [sp, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f102 0501 	add.w	r5, r2, #1
 8006bd4:	dd06      	ble.n	8006be4 <_dtoa_r+0xa6c>
 8006bd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bda:	d0eb      	beq.n	8006bb4 <_dtoa_r+0xa3c>
 8006bdc:	f108 0801 	add.w	r8, r8, #1
 8006be0:	9b07      	ldr	r3, [sp, #28]
 8006be2:	e7c4      	b.n	8006b6e <_dtoa_r+0x9f6>
 8006be4:	9b06      	ldr	r3, [sp, #24]
 8006be6:	9a04      	ldr	r2, [sp, #16]
 8006be8:	1aeb      	subs	r3, r5, r3
 8006bea:	4293      	cmp	r3, r2
 8006bec:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006bf0:	d021      	beq.n	8006c36 <_dtoa_r+0xabe>
 8006bf2:	4659      	mov	r1, fp
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	220a      	movs	r2, #10
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f000 fac9 	bl	8007190 <__multadd>
 8006bfe:	45b9      	cmp	r9, r7
 8006c00:	4683      	mov	fp, r0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	f04f 020a 	mov.w	r2, #10
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	d105      	bne.n	8006c1c <_dtoa_r+0xaa4>
 8006c10:	f000 fabe 	bl	8007190 <__multadd>
 8006c14:	4681      	mov	r9, r0
 8006c16:	4607      	mov	r7, r0
 8006c18:	9507      	str	r5, [sp, #28]
 8006c1a:	e778      	b.n	8006b0e <_dtoa_r+0x996>
 8006c1c:	f000 fab8 	bl	8007190 <__multadd>
 8006c20:	4639      	mov	r1, r7
 8006c22:	4681      	mov	r9, r0
 8006c24:	2300      	movs	r3, #0
 8006c26:	220a      	movs	r2, #10
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 fab1 	bl	8007190 <__multadd>
 8006c2e:	4607      	mov	r7, r0
 8006c30:	e7f2      	b.n	8006c18 <_dtoa_r+0xaa0>
 8006c32:	f04f 0900 	mov.w	r9, #0
 8006c36:	4659      	mov	r1, fp
 8006c38:	2201      	movs	r2, #1
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fc1e 	bl	800747c <__lshift>
 8006c40:	4631      	mov	r1, r6
 8006c42:	4683      	mov	fp, r0
 8006c44:	f000 fc6e 	bl	8007524 <__mcmp>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	dcb8      	bgt.n	8006bbe <_dtoa_r+0xa46>
 8006c4c:	d102      	bne.n	8006c54 <_dtoa_r+0xadc>
 8006c4e:	f018 0f01 	tst.w	r8, #1
 8006c52:	d1b4      	bne.n	8006bbe <_dtoa_r+0xa46>
 8006c54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c58:	1e6a      	subs	r2, r5, #1
 8006c5a:	2b30      	cmp	r3, #48	; 0x30
 8006c5c:	f47f af0f 	bne.w	8006a7e <_dtoa_r+0x906>
 8006c60:	4615      	mov	r5, r2
 8006c62:	e7f7      	b.n	8006c54 <_dtoa_r+0xadc>
 8006c64:	9b06      	ldr	r3, [sp, #24]
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d105      	bne.n	8006c76 <_dtoa_r+0xafe>
 8006c6a:	2331      	movs	r3, #49	; 0x31
 8006c6c:	9a06      	ldr	r2, [sp, #24]
 8006c6e:	f10a 0a01 	add.w	sl, sl, #1
 8006c72:	7013      	strb	r3, [r2, #0]
 8006c74:	e703      	b.n	8006a7e <_dtoa_r+0x906>
 8006c76:	4615      	mov	r5, r2
 8006c78:	e7a1      	b.n	8006bbe <_dtoa_r+0xa46>
 8006c7a:	4b17      	ldr	r3, [pc, #92]	; (8006cd8 <_dtoa_r+0xb60>)
 8006c7c:	f7ff bae1 	b.w	8006242 <_dtoa_r+0xca>
 8006c80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f47f aabb 	bne.w	80061fe <_dtoa_r+0x86>
 8006c88:	4b14      	ldr	r3, [pc, #80]	; (8006cdc <_dtoa_r+0xb64>)
 8006c8a:	f7ff bada 	b.w	8006242 <_dtoa_r+0xca>
 8006c8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	f77f ae3f 	ble.w	8006914 <_dtoa_r+0x79c>
 8006c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c98:	9308      	str	r3, [sp, #32]
 8006c9a:	e653      	b.n	8006944 <_dtoa_r+0x7cc>
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	dc03      	bgt.n	8006caa <_dtoa_r+0xb32>
 8006ca2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	f73f aed5 	bgt.w	8006a54 <_dtoa_r+0x8dc>
 8006caa:	9d06      	ldr	r5, [sp, #24]
 8006cac:	4631      	mov	r1, r6
 8006cae:	4658      	mov	r0, fp
 8006cb0:	f7ff f9d2 	bl	8006058 <quorem>
 8006cb4:	9b06      	ldr	r3, [sp, #24]
 8006cb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006cba:	f805 8b01 	strb.w	r8, [r5], #1
 8006cbe:	9a04      	ldr	r2, [sp, #16]
 8006cc0:	1aeb      	subs	r3, r5, r3
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	ddb5      	ble.n	8006c32 <_dtoa_r+0xaba>
 8006cc6:	4659      	mov	r1, fp
 8006cc8:	2300      	movs	r3, #0
 8006cca:	220a      	movs	r2, #10
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 fa5f 	bl	8007190 <__multadd>
 8006cd2:	4683      	mov	fp, r0
 8006cd4:	e7ea      	b.n	8006cac <_dtoa_r+0xb34>
 8006cd6:	bf00      	nop
 8006cd8:	080088e4 	.word	0x080088e4
 8006cdc:	08008908 	.word	0x08008908

08006ce0 <__sflush_r>:
 8006ce0:	898a      	ldrh	r2, [r1, #12]
 8006ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	0710      	lsls	r0, r2, #28
 8006cea:	460c      	mov	r4, r1
 8006cec:	d458      	bmi.n	8006da0 <__sflush_r+0xc0>
 8006cee:	684b      	ldr	r3, [r1, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dc05      	bgt.n	8006d00 <__sflush_r+0x20>
 8006cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	dc02      	bgt.n	8006d00 <__sflush_r+0x20>
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d02:	2e00      	cmp	r6, #0
 8006d04:	d0f9      	beq.n	8006cfa <__sflush_r+0x1a>
 8006d06:	2300      	movs	r3, #0
 8006d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d0c:	682f      	ldr	r7, [r5, #0]
 8006d0e:	6a21      	ldr	r1, [r4, #32]
 8006d10:	602b      	str	r3, [r5, #0]
 8006d12:	d032      	beq.n	8006d7a <__sflush_r+0x9a>
 8006d14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d16:	89a3      	ldrh	r3, [r4, #12]
 8006d18:	075a      	lsls	r2, r3, #29
 8006d1a:	d505      	bpl.n	8006d28 <__sflush_r+0x48>
 8006d1c:	6863      	ldr	r3, [r4, #4]
 8006d1e:	1ac0      	subs	r0, r0, r3
 8006d20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d22:	b10b      	cbz	r3, 8006d28 <__sflush_r+0x48>
 8006d24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d26:	1ac0      	subs	r0, r0, r3
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d2e:	6a21      	ldr	r1, [r4, #32]
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b0      	blx	r6
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	d106      	bne.n	8006d48 <__sflush_r+0x68>
 8006d3a:	6829      	ldr	r1, [r5, #0]
 8006d3c:	291d      	cmp	r1, #29
 8006d3e:	d848      	bhi.n	8006dd2 <__sflush_r+0xf2>
 8006d40:	4a29      	ldr	r2, [pc, #164]	; (8006de8 <__sflush_r+0x108>)
 8006d42:	40ca      	lsrs	r2, r1
 8006d44:	07d6      	lsls	r6, r2, #31
 8006d46:	d544      	bpl.n	8006dd2 <__sflush_r+0xf2>
 8006d48:	2200      	movs	r2, #0
 8006d4a:	6062      	str	r2, [r4, #4]
 8006d4c:	6922      	ldr	r2, [r4, #16]
 8006d4e:	04d9      	lsls	r1, r3, #19
 8006d50:	6022      	str	r2, [r4, #0]
 8006d52:	d504      	bpl.n	8006d5e <__sflush_r+0x7e>
 8006d54:	1c42      	adds	r2, r0, #1
 8006d56:	d101      	bne.n	8006d5c <__sflush_r+0x7c>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b903      	cbnz	r3, 8006d5e <__sflush_r+0x7e>
 8006d5c:	6560      	str	r0, [r4, #84]	; 0x54
 8006d5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d60:	602f      	str	r7, [r5, #0]
 8006d62:	2900      	cmp	r1, #0
 8006d64:	d0c9      	beq.n	8006cfa <__sflush_r+0x1a>
 8006d66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d6a:	4299      	cmp	r1, r3
 8006d6c:	d002      	beq.n	8006d74 <__sflush_r+0x94>
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f000 fcae 	bl	80076d0 <_free_r>
 8006d74:	2000      	movs	r0, #0
 8006d76:	6360      	str	r0, [r4, #52]	; 0x34
 8006d78:	e7c0      	b.n	8006cfc <__sflush_r+0x1c>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	47b0      	blx	r6
 8006d80:	1c41      	adds	r1, r0, #1
 8006d82:	d1c8      	bne.n	8006d16 <__sflush_r+0x36>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0c5      	beq.n	8006d16 <__sflush_r+0x36>
 8006d8a:	2b1d      	cmp	r3, #29
 8006d8c:	d001      	beq.n	8006d92 <__sflush_r+0xb2>
 8006d8e:	2b16      	cmp	r3, #22
 8006d90:	d101      	bne.n	8006d96 <__sflush_r+0xb6>
 8006d92:	602f      	str	r7, [r5, #0]
 8006d94:	e7b1      	b.n	8006cfa <__sflush_r+0x1a>
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9c:	81a3      	strh	r3, [r4, #12]
 8006d9e:	e7ad      	b.n	8006cfc <__sflush_r+0x1c>
 8006da0:	690f      	ldr	r7, [r1, #16]
 8006da2:	2f00      	cmp	r7, #0
 8006da4:	d0a9      	beq.n	8006cfa <__sflush_r+0x1a>
 8006da6:	0793      	lsls	r3, r2, #30
 8006da8:	bf18      	it	ne
 8006daa:	2300      	movne	r3, #0
 8006dac:	680e      	ldr	r6, [r1, #0]
 8006dae:	bf08      	it	eq
 8006db0:	694b      	ldreq	r3, [r1, #20]
 8006db2:	eba6 0807 	sub.w	r8, r6, r7
 8006db6:	600f      	str	r7, [r1, #0]
 8006db8:	608b      	str	r3, [r1, #8]
 8006dba:	f1b8 0f00 	cmp.w	r8, #0
 8006dbe:	dd9c      	ble.n	8006cfa <__sflush_r+0x1a>
 8006dc0:	4643      	mov	r3, r8
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	6a21      	ldr	r1, [r4, #32]
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dca:	47b0      	blx	r6
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	dc06      	bgt.n	8006dde <__sflush_r+0xfe>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ddc:	e78e      	b.n	8006cfc <__sflush_r+0x1c>
 8006dde:	4407      	add	r7, r0
 8006de0:	eba8 0800 	sub.w	r8, r8, r0
 8006de4:	e7e9      	b.n	8006dba <__sflush_r+0xda>
 8006de6:	bf00      	nop
 8006de8:	20400001 	.word	0x20400001

08006dec <_fflush_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	690b      	ldr	r3, [r1, #16]
 8006df0:	4605      	mov	r5, r0
 8006df2:	460c      	mov	r4, r1
 8006df4:	b1db      	cbz	r3, 8006e2e <_fflush_r+0x42>
 8006df6:	b118      	cbz	r0, 8006e00 <_fflush_r+0x14>
 8006df8:	6983      	ldr	r3, [r0, #24]
 8006dfa:	b90b      	cbnz	r3, 8006e00 <_fflush_r+0x14>
 8006dfc:	f000 f860 	bl	8006ec0 <__sinit>
 8006e00:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <_fflush_r+0x48>)
 8006e02:	429c      	cmp	r4, r3
 8006e04:	d109      	bne.n	8006e1a <_fflush_r+0x2e>
 8006e06:	686c      	ldr	r4, [r5, #4]
 8006e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0c:	b17b      	cbz	r3, 8006e2e <_fflush_r+0x42>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e16:	f7ff bf63 	b.w	8006ce0 <__sflush_r>
 8006e1a:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <_fflush_r+0x4c>)
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	d101      	bne.n	8006e24 <_fflush_r+0x38>
 8006e20:	68ac      	ldr	r4, [r5, #8]
 8006e22:	e7f1      	b.n	8006e08 <_fflush_r+0x1c>
 8006e24:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <_fflush_r+0x50>)
 8006e26:	429c      	cmp	r4, r3
 8006e28:	bf08      	it	eq
 8006e2a:	68ec      	ldreq	r4, [r5, #12]
 8006e2c:	e7ec      	b.n	8006e08 <_fflush_r+0x1c>
 8006e2e:	2000      	movs	r0, #0
 8006e30:	bd38      	pop	{r3, r4, r5, pc}
 8006e32:	bf00      	nop
 8006e34:	08008938 	.word	0x08008938
 8006e38:	08008958 	.word	0x08008958
 8006e3c:	08008918 	.word	0x08008918

08006e40 <std>:
 8006e40:	2300      	movs	r3, #0
 8006e42:	b510      	push	{r4, lr}
 8006e44:	4604      	mov	r4, r0
 8006e46:	e9c0 3300 	strd	r3, r3, [r0]
 8006e4a:	6083      	str	r3, [r0, #8]
 8006e4c:	8181      	strh	r1, [r0, #12]
 8006e4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006e50:	81c2      	strh	r2, [r0, #14]
 8006e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e56:	6183      	str	r3, [r0, #24]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	2208      	movs	r2, #8
 8006e5c:	305c      	adds	r0, #92	; 0x5c
 8006e5e:	f7fe fb47 	bl	80054f0 <memset>
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <std+0x38>)
 8006e64:	6224      	str	r4, [r4, #32]
 8006e66:	6263      	str	r3, [r4, #36]	; 0x24
 8006e68:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <std+0x3c>)
 8006e6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e6c:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <std+0x40>)
 8006e6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e70:	4b04      	ldr	r3, [pc, #16]	; (8006e84 <std+0x44>)
 8006e72:	6323      	str	r3, [r4, #48]	; 0x30
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	bf00      	nop
 8006e78:	08007d5d 	.word	0x08007d5d
 8006e7c:	08007d7f 	.word	0x08007d7f
 8006e80:	08007db7 	.word	0x08007db7
 8006e84:	08007ddb 	.word	0x08007ddb

08006e88 <_cleanup_r>:
 8006e88:	4901      	ldr	r1, [pc, #4]	; (8006e90 <_cleanup_r+0x8>)
 8006e8a:	f000 b885 	b.w	8006f98 <_fwalk_reent>
 8006e8e:	bf00      	nop
 8006e90:	08006ded 	.word	0x08006ded

08006e94 <__sfmoreglue>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	2568      	movs	r5, #104	; 0x68
 8006e98:	1e4a      	subs	r2, r1, #1
 8006e9a:	4355      	muls	r5, r2
 8006e9c:	460e      	mov	r6, r1
 8006e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ea2:	f000 fc61 	bl	8007768 <_malloc_r>
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	b140      	cbz	r0, 8006ebc <__sfmoreglue+0x28>
 8006eaa:	2100      	movs	r1, #0
 8006eac:	e9c0 1600 	strd	r1, r6, [r0]
 8006eb0:	300c      	adds	r0, #12
 8006eb2:	60a0      	str	r0, [r4, #8]
 8006eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006eb8:	f7fe fb1a 	bl	80054f0 <memset>
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}

08006ec0 <__sinit>:
 8006ec0:	6983      	ldr	r3, [r0, #24]
 8006ec2:	b510      	push	{r4, lr}
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	bb33      	cbnz	r3, 8006f16 <__sinit+0x56>
 8006ec8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006ecc:	6503      	str	r3, [r0, #80]	; 0x50
 8006ece:	4b12      	ldr	r3, [pc, #72]	; (8006f18 <__sinit+0x58>)
 8006ed0:	4a12      	ldr	r2, [pc, #72]	; (8006f1c <__sinit+0x5c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6282      	str	r2, [r0, #40]	; 0x28
 8006ed6:	4298      	cmp	r0, r3
 8006ed8:	bf04      	itt	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	6183      	streq	r3, [r0, #24]
 8006ede:	f000 f81f 	bl	8006f20 <__sfp>
 8006ee2:	6060      	str	r0, [r4, #4]
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 f81b 	bl	8006f20 <__sfp>
 8006eea:	60a0      	str	r0, [r4, #8]
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 f817 	bl	8006f20 <__sfp>
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	60e0      	str	r0, [r4, #12]
 8006ef6:	2104      	movs	r1, #4
 8006ef8:	6860      	ldr	r0, [r4, #4]
 8006efa:	f7ff ffa1 	bl	8006e40 <std>
 8006efe:	2201      	movs	r2, #1
 8006f00:	2109      	movs	r1, #9
 8006f02:	68a0      	ldr	r0, [r4, #8]
 8006f04:	f7ff ff9c 	bl	8006e40 <std>
 8006f08:	2202      	movs	r2, #2
 8006f0a:	2112      	movs	r1, #18
 8006f0c:	68e0      	ldr	r0, [r4, #12]
 8006f0e:	f7ff ff97 	bl	8006e40 <std>
 8006f12:	2301      	movs	r3, #1
 8006f14:	61a3      	str	r3, [r4, #24]
 8006f16:	bd10      	pop	{r4, pc}
 8006f18:	080088d0 	.word	0x080088d0
 8006f1c:	08006e89 	.word	0x08006e89

08006f20 <__sfp>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	4b1b      	ldr	r3, [pc, #108]	; (8006f90 <__sfp+0x70>)
 8006f24:	4607      	mov	r7, r0
 8006f26:	681e      	ldr	r6, [r3, #0]
 8006f28:	69b3      	ldr	r3, [r6, #24]
 8006f2a:	b913      	cbnz	r3, 8006f32 <__sfp+0x12>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff ffc7 	bl	8006ec0 <__sinit>
 8006f32:	3648      	adds	r6, #72	; 0x48
 8006f34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	d503      	bpl.n	8006f44 <__sfp+0x24>
 8006f3c:	6833      	ldr	r3, [r6, #0]
 8006f3e:	b133      	cbz	r3, 8006f4e <__sfp+0x2e>
 8006f40:	6836      	ldr	r6, [r6, #0]
 8006f42:	e7f7      	b.n	8006f34 <__sfp+0x14>
 8006f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f48:	b16d      	cbz	r5, 8006f66 <__sfp+0x46>
 8006f4a:	3468      	adds	r4, #104	; 0x68
 8006f4c:	e7f4      	b.n	8006f38 <__sfp+0x18>
 8006f4e:	2104      	movs	r1, #4
 8006f50:	4638      	mov	r0, r7
 8006f52:	f7ff ff9f 	bl	8006e94 <__sfmoreglue>
 8006f56:	6030      	str	r0, [r6, #0]
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d1f1      	bne.n	8006f40 <__sfp+0x20>
 8006f5c:	230c      	movs	r3, #12
 8006f5e:	4604      	mov	r4, r0
 8006f60:	603b      	str	r3, [r7, #0]
 8006f62:	4620      	mov	r0, r4
 8006f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <__sfp+0x74>)
 8006f68:	6665      	str	r5, [r4, #100]	; 0x64
 8006f6a:	e9c4 5500 	strd	r5, r5, [r4]
 8006f6e:	60a5      	str	r5, [r4, #8]
 8006f70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006f74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006f78:	2208      	movs	r2, #8
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f80:	f7fe fab6 	bl	80054f0 <memset>
 8006f84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f8c:	e7e9      	b.n	8006f62 <__sfp+0x42>
 8006f8e:	bf00      	nop
 8006f90:	080088d0 	.word	0x080088d0
 8006f94:	ffff0001 	.word	0xffff0001

08006f98 <_fwalk_reent>:
 8006f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	4689      	mov	r9, r1
 8006fa0:	2600      	movs	r6, #0
 8006fa2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fa6:	b914      	cbnz	r4, 8006fae <_fwalk_reent+0x16>
 8006fa8:	4630      	mov	r0, r6
 8006faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006fb2:	3f01      	subs	r7, #1
 8006fb4:	d501      	bpl.n	8006fba <_fwalk_reent+0x22>
 8006fb6:	6824      	ldr	r4, [r4, #0]
 8006fb8:	e7f5      	b.n	8006fa6 <_fwalk_reent+0xe>
 8006fba:	89ab      	ldrh	r3, [r5, #12]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d907      	bls.n	8006fd0 <_fwalk_reent+0x38>
 8006fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	d003      	beq.n	8006fd0 <_fwalk_reent+0x38>
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4640      	mov	r0, r8
 8006fcc:	47c8      	blx	r9
 8006fce:	4306      	orrs	r6, r0
 8006fd0:	3568      	adds	r5, #104	; 0x68
 8006fd2:	e7ee      	b.n	8006fb2 <_fwalk_reent+0x1a>

08006fd4 <_localeconv_r>:
 8006fd4:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <_localeconv_r+0x14>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6a18      	ldr	r0, [r3, #32]
 8006fda:	4b04      	ldr	r3, [pc, #16]	; (8006fec <_localeconv_r+0x18>)
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	bf08      	it	eq
 8006fe0:	4618      	moveq	r0, r3
 8006fe2:	30f0      	adds	r0, #240	; 0xf0
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	20000a4c 	.word	0x20000a4c
 8006fec:	20000ab0 	.word	0x20000ab0

08006ff0 <__swhatbuf_r>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	460e      	mov	r6, r1
 8006ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff8:	b096      	sub	sp, #88	; 0x58
 8006ffa:	2900      	cmp	r1, #0
 8006ffc:	4614      	mov	r4, r2
 8006ffe:	461d      	mov	r5, r3
 8007000:	da07      	bge.n	8007012 <__swhatbuf_r+0x22>
 8007002:	2300      	movs	r3, #0
 8007004:	602b      	str	r3, [r5, #0]
 8007006:	89b3      	ldrh	r3, [r6, #12]
 8007008:	061a      	lsls	r2, r3, #24
 800700a:	d410      	bmi.n	800702e <__swhatbuf_r+0x3e>
 800700c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007010:	e00e      	b.n	8007030 <__swhatbuf_r+0x40>
 8007012:	466a      	mov	r2, sp
 8007014:	f000 ff08 	bl	8007e28 <_fstat_r>
 8007018:	2800      	cmp	r0, #0
 800701a:	dbf2      	blt.n	8007002 <__swhatbuf_r+0x12>
 800701c:	9a01      	ldr	r2, [sp, #4]
 800701e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007022:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007026:	425a      	negs	r2, r3
 8007028:	415a      	adcs	r2, r3
 800702a:	602a      	str	r2, [r5, #0]
 800702c:	e7ee      	b.n	800700c <__swhatbuf_r+0x1c>
 800702e:	2340      	movs	r3, #64	; 0x40
 8007030:	2000      	movs	r0, #0
 8007032:	6023      	str	r3, [r4, #0]
 8007034:	b016      	add	sp, #88	; 0x58
 8007036:	bd70      	pop	{r4, r5, r6, pc}

08007038 <__smakebuf_r>:
 8007038:	898b      	ldrh	r3, [r1, #12]
 800703a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800703c:	079d      	lsls	r5, r3, #30
 800703e:	4606      	mov	r6, r0
 8007040:	460c      	mov	r4, r1
 8007042:	d507      	bpl.n	8007054 <__smakebuf_r+0x1c>
 8007044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	6123      	str	r3, [r4, #16]
 800704c:	2301      	movs	r3, #1
 800704e:	6163      	str	r3, [r4, #20]
 8007050:	b002      	add	sp, #8
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	ab01      	add	r3, sp, #4
 8007056:	466a      	mov	r2, sp
 8007058:	f7ff ffca 	bl	8006ff0 <__swhatbuf_r>
 800705c:	9900      	ldr	r1, [sp, #0]
 800705e:	4605      	mov	r5, r0
 8007060:	4630      	mov	r0, r6
 8007062:	f000 fb81 	bl	8007768 <_malloc_r>
 8007066:	b948      	cbnz	r0, 800707c <__smakebuf_r+0x44>
 8007068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706c:	059a      	lsls	r2, r3, #22
 800706e:	d4ef      	bmi.n	8007050 <__smakebuf_r+0x18>
 8007070:	f023 0303 	bic.w	r3, r3, #3
 8007074:	f043 0302 	orr.w	r3, r3, #2
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	e7e3      	b.n	8007044 <__smakebuf_r+0xc>
 800707c:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <__smakebuf_r+0x7c>)
 800707e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	6020      	str	r0, [r4, #0]
 8007084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007088:	81a3      	strh	r3, [r4, #12]
 800708a:	9b00      	ldr	r3, [sp, #0]
 800708c:	6120      	str	r0, [r4, #16]
 800708e:	6163      	str	r3, [r4, #20]
 8007090:	9b01      	ldr	r3, [sp, #4]
 8007092:	b15b      	cbz	r3, 80070ac <__smakebuf_r+0x74>
 8007094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007098:	4630      	mov	r0, r6
 800709a:	f000 fed7 	bl	8007e4c <_isatty_r>
 800709e:	b128      	cbz	r0, 80070ac <__smakebuf_r+0x74>
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	f043 0301 	orr.w	r3, r3, #1
 80070aa:	81a3      	strh	r3, [r4, #12]
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	431d      	orrs	r5, r3
 80070b0:	81a5      	strh	r5, [r4, #12]
 80070b2:	e7cd      	b.n	8007050 <__smakebuf_r+0x18>
 80070b4:	08006e89 	.word	0x08006e89

080070b8 <malloc>:
 80070b8:	4b02      	ldr	r3, [pc, #8]	; (80070c4 <malloc+0xc>)
 80070ba:	4601      	mov	r1, r0
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	f000 bb53 	b.w	8007768 <_malloc_r>
 80070c2:	bf00      	nop
 80070c4:	20000a4c 	.word	0x20000a4c

080070c8 <memchr>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	b2c9      	uxtb	r1, r1
 80070cc:	4402      	add	r2, r0
 80070ce:	4290      	cmp	r0, r2
 80070d0:	4603      	mov	r3, r0
 80070d2:	d101      	bne.n	80070d8 <memchr+0x10>
 80070d4:	2300      	movs	r3, #0
 80070d6:	e003      	b.n	80070e0 <memchr+0x18>
 80070d8:	781c      	ldrb	r4, [r3, #0]
 80070da:	3001      	adds	r0, #1
 80070dc:	428c      	cmp	r4, r1
 80070de:	d1f6      	bne.n	80070ce <memchr+0x6>
 80070e0:	4618      	mov	r0, r3
 80070e2:	bd10      	pop	{r4, pc}

080070e4 <memcpy>:
 80070e4:	b510      	push	{r4, lr}
 80070e6:	1e43      	subs	r3, r0, #1
 80070e8:	440a      	add	r2, r1
 80070ea:	4291      	cmp	r1, r2
 80070ec:	d100      	bne.n	80070f0 <memcpy+0xc>
 80070ee:	bd10      	pop	{r4, pc}
 80070f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070f8:	e7f7      	b.n	80070ea <memcpy+0x6>

080070fa <_Balloc>:
 80070fa:	b570      	push	{r4, r5, r6, lr}
 80070fc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070fe:	4604      	mov	r4, r0
 8007100:	460e      	mov	r6, r1
 8007102:	b93d      	cbnz	r5, 8007114 <_Balloc+0x1a>
 8007104:	2010      	movs	r0, #16
 8007106:	f7ff ffd7 	bl	80070b8 <malloc>
 800710a:	6260      	str	r0, [r4, #36]	; 0x24
 800710c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007110:	6005      	str	r5, [r0, #0]
 8007112:	60c5      	str	r5, [r0, #12]
 8007114:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007116:	68eb      	ldr	r3, [r5, #12]
 8007118:	b183      	cbz	r3, 800713c <_Balloc+0x42>
 800711a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007122:	b9b8      	cbnz	r0, 8007154 <_Balloc+0x5a>
 8007124:	2101      	movs	r1, #1
 8007126:	fa01 f506 	lsl.w	r5, r1, r6
 800712a:	1d6a      	adds	r2, r5, #5
 800712c:	0092      	lsls	r2, r2, #2
 800712e:	4620      	mov	r0, r4
 8007130:	f000 fabf 	bl	80076b2 <_calloc_r>
 8007134:	b160      	cbz	r0, 8007150 <_Balloc+0x56>
 8007136:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800713a:	e00e      	b.n	800715a <_Balloc+0x60>
 800713c:	2221      	movs	r2, #33	; 0x21
 800713e:	2104      	movs	r1, #4
 8007140:	4620      	mov	r0, r4
 8007142:	f000 fab6 	bl	80076b2 <_calloc_r>
 8007146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007148:	60e8      	str	r0, [r5, #12]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e4      	bne.n	800711a <_Balloc+0x20>
 8007150:	2000      	movs	r0, #0
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	6802      	ldr	r2, [r0, #0]
 8007156:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800715a:	2300      	movs	r3, #0
 800715c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007160:	e7f7      	b.n	8007152 <_Balloc+0x58>

08007162 <_Bfree>:
 8007162:	b570      	push	{r4, r5, r6, lr}
 8007164:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007166:	4606      	mov	r6, r0
 8007168:	460d      	mov	r5, r1
 800716a:	b93c      	cbnz	r4, 800717c <_Bfree+0x1a>
 800716c:	2010      	movs	r0, #16
 800716e:	f7ff ffa3 	bl	80070b8 <malloc>
 8007172:	6270      	str	r0, [r6, #36]	; 0x24
 8007174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007178:	6004      	str	r4, [r0, #0]
 800717a:	60c4      	str	r4, [r0, #12]
 800717c:	b13d      	cbz	r5, 800718e <_Bfree+0x2c>
 800717e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007180:	686a      	ldr	r2, [r5, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007188:	6029      	str	r1, [r5, #0]
 800718a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800718e:	bd70      	pop	{r4, r5, r6, pc}

08007190 <__multadd>:
 8007190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007194:	461f      	mov	r7, r3
 8007196:	4606      	mov	r6, r0
 8007198:	460c      	mov	r4, r1
 800719a:	2300      	movs	r3, #0
 800719c:	690d      	ldr	r5, [r1, #16]
 800719e:	f101 0c14 	add.w	ip, r1, #20
 80071a2:	f8dc 0000 	ldr.w	r0, [ip]
 80071a6:	3301      	adds	r3, #1
 80071a8:	b281      	uxth	r1, r0
 80071aa:	fb02 7101 	mla	r1, r2, r1, r7
 80071ae:	0c00      	lsrs	r0, r0, #16
 80071b0:	0c0f      	lsrs	r7, r1, #16
 80071b2:	fb02 7000 	mla	r0, r2, r0, r7
 80071b6:	b289      	uxth	r1, r1
 80071b8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80071bc:	429d      	cmp	r5, r3
 80071be:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80071c2:	f84c 1b04 	str.w	r1, [ip], #4
 80071c6:	dcec      	bgt.n	80071a2 <__multadd+0x12>
 80071c8:	b1d7      	cbz	r7, 8007200 <__multadd+0x70>
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	42ab      	cmp	r3, r5
 80071ce:	dc12      	bgt.n	80071f6 <__multadd+0x66>
 80071d0:	6861      	ldr	r1, [r4, #4]
 80071d2:	4630      	mov	r0, r6
 80071d4:	3101      	adds	r1, #1
 80071d6:	f7ff ff90 	bl	80070fa <_Balloc>
 80071da:	4680      	mov	r8, r0
 80071dc:	6922      	ldr	r2, [r4, #16]
 80071de:	f104 010c 	add.w	r1, r4, #12
 80071e2:	3202      	adds	r2, #2
 80071e4:	0092      	lsls	r2, r2, #2
 80071e6:	300c      	adds	r0, #12
 80071e8:	f7ff ff7c 	bl	80070e4 <memcpy>
 80071ec:	4621      	mov	r1, r4
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7ff ffb7 	bl	8007162 <_Bfree>
 80071f4:	4644      	mov	r4, r8
 80071f6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071fa:	3501      	adds	r5, #1
 80071fc:	615f      	str	r7, [r3, #20]
 80071fe:	6125      	str	r5, [r4, #16]
 8007200:	4620      	mov	r0, r4
 8007202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007206 <__hi0bits>:
 8007206:	0c02      	lsrs	r2, r0, #16
 8007208:	0412      	lsls	r2, r2, #16
 800720a:	4603      	mov	r3, r0
 800720c:	b9b2      	cbnz	r2, 800723c <__hi0bits+0x36>
 800720e:	0403      	lsls	r3, r0, #16
 8007210:	2010      	movs	r0, #16
 8007212:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007216:	bf04      	itt	eq
 8007218:	021b      	lsleq	r3, r3, #8
 800721a:	3008      	addeq	r0, #8
 800721c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007220:	bf04      	itt	eq
 8007222:	011b      	lsleq	r3, r3, #4
 8007224:	3004      	addeq	r0, #4
 8007226:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800722a:	bf04      	itt	eq
 800722c:	009b      	lsleq	r3, r3, #2
 800722e:	3002      	addeq	r0, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	db06      	blt.n	8007242 <__hi0bits+0x3c>
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	d503      	bpl.n	8007240 <__hi0bits+0x3a>
 8007238:	3001      	adds	r0, #1
 800723a:	4770      	bx	lr
 800723c:	2000      	movs	r0, #0
 800723e:	e7e8      	b.n	8007212 <__hi0bits+0xc>
 8007240:	2020      	movs	r0, #32
 8007242:	4770      	bx	lr

08007244 <__lo0bits>:
 8007244:	6803      	ldr	r3, [r0, #0]
 8007246:	4601      	mov	r1, r0
 8007248:	f013 0207 	ands.w	r2, r3, #7
 800724c:	d00b      	beq.n	8007266 <__lo0bits+0x22>
 800724e:	07da      	lsls	r2, r3, #31
 8007250:	d423      	bmi.n	800729a <__lo0bits+0x56>
 8007252:	0798      	lsls	r0, r3, #30
 8007254:	bf49      	itett	mi
 8007256:	085b      	lsrmi	r3, r3, #1
 8007258:	089b      	lsrpl	r3, r3, #2
 800725a:	2001      	movmi	r0, #1
 800725c:	600b      	strmi	r3, [r1, #0]
 800725e:	bf5c      	itt	pl
 8007260:	600b      	strpl	r3, [r1, #0]
 8007262:	2002      	movpl	r0, #2
 8007264:	4770      	bx	lr
 8007266:	b298      	uxth	r0, r3
 8007268:	b9a8      	cbnz	r0, 8007296 <__lo0bits+0x52>
 800726a:	2010      	movs	r0, #16
 800726c:	0c1b      	lsrs	r3, r3, #16
 800726e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007272:	bf04      	itt	eq
 8007274:	0a1b      	lsreq	r3, r3, #8
 8007276:	3008      	addeq	r0, #8
 8007278:	071a      	lsls	r2, r3, #28
 800727a:	bf04      	itt	eq
 800727c:	091b      	lsreq	r3, r3, #4
 800727e:	3004      	addeq	r0, #4
 8007280:	079a      	lsls	r2, r3, #30
 8007282:	bf04      	itt	eq
 8007284:	089b      	lsreq	r3, r3, #2
 8007286:	3002      	addeq	r0, #2
 8007288:	07da      	lsls	r2, r3, #31
 800728a:	d402      	bmi.n	8007292 <__lo0bits+0x4e>
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	d006      	beq.n	800729e <__lo0bits+0x5a>
 8007290:	3001      	adds	r0, #1
 8007292:	600b      	str	r3, [r1, #0]
 8007294:	4770      	bx	lr
 8007296:	4610      	mov	r0, r2
 8007298:	e7e9      	b.n	800726e <__lo0bits+0x2a>
 800729a:	2000      	movs	r0, #0
 800729c:	4770      	bx	lr
 800729e:	2020      	movs	r0, #32
 80072a0:	4770      	bx	lr

080072a2 <__i2b>:
 80072a2:	b510      	push	{r4, lr}
 80072a4:	460c      	mov	r4, r1
 80072a6:	2101      	movs	r1, #1
 80072a8:	f7ff ff27 	bl	80070fa <_Balloc>
 80072ac:	2201      	movs	r2, #1
 80072ae:	6144      	str	r4, [r0, #20]
 80072b0:	6102      	str	r2, [r0, #16]
 80072b2:	bd10      	pop	{r4, pc}

080072b4 <__multiply>:
 80072b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	4614      	mov	r4, r2
 80072ba:	690a      	ldr	r2, [r1, #16]
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	4688      	mov	r8, r1
 80072c0:	429a      	cmp	r2, r3
 80072c2:	bfbe      	ittt	lt
 80072c4:	460b      	movlt	r3, r1
 80072c6:	46a0      	movlt	r8, r4
 80072c8:	461c      	movlt	r4, r3
 80072ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072da:	eb07 0609 	add.w	r6, r7, r9
 80072de:	42b3      	cmp	r3, r6
 80072e0:	bfb8      	it	lt
 80072e2:	3101      	addlt	r1, #1
 80072e4:	f7ff ff09 	bl	80070fa <_Balloc>
 80072e8:	f100 0514 	add.w	r5, r0, #20
 80072ec:	462b      	mov	r3, r5
 80072ee:	2200      	movs	r2, #0
 80072f0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80072f4:	4573      	cmp	r3, lr
 80072f6:	d316      	bcc.n	8007326 <__multiply+0x72>
 80072f8:	f104 0214 	add.w	r2, r4, #20
 80072fc:	f108 0114 	add.w	r1, r8, #20
 8007300:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007304:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	9b00      	ldr	r3, [sp, #0]
 800730c:	9201      	str	r2, [sp, #4]
 800730e:	4293      	cmp	r3, r2
 8007310:	d80c      	bhi.n	800732c <__multiply+0x78>
 8007312:	2e00      	cmp	r6, #0
 8007314:	dd03      	ble.n	800731e <__multiply+0x6a>
 8007316:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800731a:	2b00      	cmp	r3, #0
 800731c:	d05d      	beq.n	80073da <__multiply+0x126>
 800731e:	6106      	str	r6, [r0, #16]
 8007320:	b003      	add	sp, #12
 8007322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007326:	f843 2b04 	str.w	r2, [r3], #4
 800732a:	e7e3      	b.n	80072f4 <__multiply+0x40>
 800732c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007330:	f1bb 0f00 	cmp.w	fp, #0
 8007334:	d023      	beq.n	800737e <__multiply+0xca>
 8007336:	4689      	mov	r9, r1
 8007338:	46ac      	mov	ip, r5
 800733a:	f04f 0800 	mov.w	r8, #0
 800733e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007342:	f8dc a000 	ldr.w	sl, [ip]
 8007346:	b2a3      	uxth	r3, r4
 8007348:	fa1f fa8a 	uxth.w	sl, sl
 800734c:	fb0b a303 	mla	r3, fp, r3, sl
 8007350:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007354:	f8dc 4000 	ldr.w	r4, [ip]
 8007358:	4443      	add	r3, r8
 800735a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800735e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007362:	46e2      	mov	sl, ip
 8007364:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007368:	b29b      	uxth	r3, r3
 800736a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800736e:	454f      	cmp	r7, r9
 8007370:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007374:	f84a 3b04 	str.w	r3, [sl], #4
 8007378:	d82b      	bhi.n	80073d2 <__multiply+0x11e>
 800737a:	f8cc 8004 	str.w	r8, [ip, #4]
 800737e:	9b01      	ldr	r3, [sp, #4]
 8007380:	3204      	adds	r2, #4
 8007382:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007386:	f1ba 0f00 	cmp.w	sl, #0
 800738a:	d020      	beq.n	80073ce <__multiply+0x11a>
 800738c:	4689      	mov	r9, r1
 800738e:	46a8      	mov	r8, r5
 8007390:	f04f 0b00 	mov.w	fp, #0
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	f8b9 c000 	ldrh.w	ip, [r9]
 800739a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	fb0a 440c 	mla	r4, sl, ip, r4
 80073a4:	46c4      	mov	ip, r8
 80073a6:	445c      	add	r4, fp
 80073a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80073ac:	f84c 3b04 	str.w	r3, [ip], #4
 80073b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80073b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80073b8:	0c1b      	lsrs	r3, r3, #16
 80073ba:	fb0a b303 	mla	r3, sl, r3, fp
 80073be:	454f      	cmp	r7, r9
 80073c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80073c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80073c8:	d805      	bhi.n	80073d6 <__multiply+0x122>
 80073ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80073ce:	3504      	adds	r5, #4
 80073d0:	e79b      	b.n	800730a <__multiply+0x56>
 80073d2:	46d4      	mov	ip, sl
 80073d4:	e7b3      	b.n	800733e <__multiply+0x8a>
 80073d6:	46e0      	mov	r8, ip
 80073d8:	e7dd      	b.n	8007396 <__multiply+0xe2>
 80073da:	3e01      	subs	r6, #1
 80073dc:	e799      	b.n	8007312 <__multiply+0x5e>
	...

080073e0 <__pow5mult>:
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	4615      	mov	r5, r2
 80073e6:	f012 0203 	ands.w	r2, r2, #3
 80073ea:	4606      	mov	r6, r0
 80073ec:	460f      	mov	r7, r1
 80073ee:	d007      	beq.n	8007400 <__pow5mult+0x20>
 80073f0:	4c21      	ldr	r4, [pc, #132]	; (8007478 <__pow5mult+0x98>)
 80073f2:	3a01      	subs	r2, #1
 80073f4:	2300      	movs	r3, #0
 80073f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073fa:	f7ff fec9 	bl	8007190 <__multadd>
 80073fe:	4607      	mov	r7, r0
 8007400:	10ad      	asrs	r5, r5, #2
 8007402:	d035      	beq.n	8007470 <__pow5mult+0x90>
 8007404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007406:	b93c      	cbnz	r4, 8007418 <__pow5mult+0x38>
 8007408:	2010      	movs	r0, #16
 800740a:	f7ff fe55 	bl	80070b8 <malloc>
 800740e:	6270      	str	r0, [r6, #36]	; 0x24
 8007410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007414:	6004      	str	r4, [r0, #0]
 8007416:	60c4      	str	r4, [r0, #12]
 8007418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800741c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007420:	b94c      	cbnz	r4, 8007436 <__pow5mult+0x56>
 8007422:	f240 2171 	movw	r1, #625	; 0x271
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ff3b 	bl	80072a2 <__i2b>
 800742c:	2300      	movs	r3, #0
 800742e:	4604      	mov	r4, r0
 8007430:	f8c8 0008 	str.w	r0, [r8, #8]
 8007434:	6003      	str	r3, [r0, #0]
 8007436:	f04f 0800 	mov.w	r8, #0
 800743a:	07eb      	lsls	r3, r5, #31
 800743c:	d50a      	bpl.n	8007454 <__pow5mult+0x74>
 800743e:	4639      	mov	r1, r7
 8007440:	4622      	mov	r2, r4
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ff36 	bl	80072b4 <__multiply>
 8007448:	4681      	mov	r9, r0
 800744a:	4639      	mov	r1, r7
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff fe88 	bl	8007162 <_Bfree>
 8007452:	464f      	mov	r7, r9
 8007454:	106d      	asrs	r5, r5, #1
 8007456:	d00b      	beq.n	8007470 <__pow5mult+0x90>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	b938      	cbnz	r0, 800746c <__pow5mult+0x8c>
 800745c:	4622      	mov	r2, r4
 800745e:	4621      	mov	r1, r4
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff ff27 	bl	80072b4 <__multiply>
 8007466:	6020      	str	r0, [r4, #0]
 8007468:	f8c0 8000 	str.w	r8, [r0]
 800746c:	4604      	mov	r4, r0
 800746e:	e7e4      	b.n	800743a <__pow5mult+0x5a>
 8007470:	4638      	mov	r0, r7
 8007472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007476:	bf00      	nop
 8007478:	08008a68 	.word	0x08008a68

0800747c <__lshift>:
 800747c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007480:	460c      	mov	r4, r1
 8007482:	4607      	mov	r7, r0
 8007484:	4616      	mov	r6, r2
 8007486:	6923      	ldr	r3, [r4, #16]
 8007488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800748c:	eb0a 0903 	add.w	r9, sl, r3
 8007490:	6849      	ldr	r1, [r1, #4]
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	f109 0501 	add.w	r5, r9, #1
 8007498:	42ab      	cmp	r3, r5
 800749a:	db32      	blt.n	8007502 <__lshift+0x86>
 800749c:	4638      	mov	r0, r7
 800749e:	f7ff fe2c 	bl	80070fa <_Balloc>
 80074a2:	2300      	movs	r3, #0
 80074a4:	4680      	mov	r8, r0
 80074a6:	461a      	mov	r2, r3
 80074a8:	f100 0114 	add.w	r1, r0, #20
 80074ac:	4553      	cmp	r3, sl
 80074ae:	db2b      	blt.n	8007508 <__lshift+0x8c>
 80074b0:	6920      	ldr	r0, [r4, #16]
 80074b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074b6:	f104 0314 	add.w	r3, r4, #20
 80074ba:	f016 021f 	ands.w	r2, r6, #31
 80074be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074c6:	d025      	beq.n	8007514 <__lshift+0x98>
 80074c8:	2000      	movs	r0, #0
 80074ca:	f1c2 0e20 	rsb	lr, r2, #32
 80074ce:	468a      	mov	sl, r1
 80074d0:	681e      	ldr	r6, [r3, #0]
 80074d2:	4096      	lsls	r6, r2
 80074d4:	4330      	orrs	r0, r6
 80074d6:	f84a 0b04 	str.w	r0, [sl], #4
 80074da:	f853 0b04 	ldr.w	r0, [r3], #4
 80074de:	459c      	cmp	ip, r3
 80074e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80074e4:	d814      	bhi.n	8007510 <__lshift+0x94>
 80074e6:	6048      	str	r0, [r1, #4]
 80074e8:	b108      	cbz	r0, 80074ee <__lshift+0x72>
 80074ea:	f109 0502 	add.w	r5, r9, #2
 80074ee:	3d01      	subs	r5, #1
 80074f0:	4638      	mov	r0, r7
 80074f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80074f6:	4621      	mov	r1, r4
 80074f8:	f7ff fe33 	bl	8007162 <_Bfree>
 80074fc:	4640      	mov	r0, r8
 80074fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007502:	3101      	adds	r1, #1
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	e7c7      	b.n	8007498 <__lshift+0x1c>
 8007508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800750c:	3301      	adds	r3, #1
 800750e:	e7cd      	b.n	80074ac <__lshift+0x30>
 8007510:	4651      	mov	r1, sl
 8007512:	e7dc      	b.n	80074ce <__lshift+0x52>
 8007514:	3904      	subs	r1, #4
 8007516:	f853 2b04 	ldr.w	r2, [r3], #4
 800751a:	459c      	cmp	ip, r3
 800751c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007520:	d8f9      	bhi.n	8007516 <__lshift+0x9a>
 8007522:	e7e4      	b.n	80074ee <__lshift+0x72>

08007524 <__mcmp>:
 8007524:	6903      	ldr	r3, [r0, #16]
 8007526:	690a      	ldr	r2, [r1, #16]
 8007528:	b530      	push	{r4, r5, lr}
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	d10c      	bne.n	8007548 <__mcmp+0x24>
 800752e:	0092      	lsls	r2, r2, #2
 8007530:	3014      	adds	r0, #20
 8007532:	3114      	adds	r1, #20
 8007534:	1884      	adds	r4, r0, r2
 8007536:	4411      	add	r1, r2
 8007538:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800753c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007540:	4295      	cmp	r5, r2
 8007542:	d003      	beq.n	800754c <__mcmp+0x28>
 8007544:	d305      	bcc.n	8007552 <__mcmp+0x2e>
 8007546:	2301      	movs	r3, #1
 8007548:	4618      	mov	r0, r3
 800754a:	bd30      	pop	{r4, r5, pc}
 800754c:	42a0      	cmp	r0, r4
 800754e:	d3f3      	bcc.n	8007538 <__mcmp+0x14>
 8007550:	e7fa      	b.n	8007548 <__mcmp+0x24>
 8007552:	f04f 33ff 	mov.w	r3, #4294967295
 8007556:	e7f7      	b.n	8007548 <__mcmp+0x24>

08007558 <__mdiff>:
 8007558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	460d      	mov	r5, r1
 800755e:	4607      	mov	r7, r0
 8007560:	4611      	mov	r1, r2
 8007562:	4628      	mov	r0, r5
 8007564:	4614      	mov	r4, r2
 8007566:	f7ff ffdd 	bl	8007524 <__mcmp>
 800756a:	1e06      	subs	r6, r0, #0
 800756c:	d108      	bne.n	8007580 <__mdiff+0x28>
 800756e:	4631      	mov	r1, r6
 8007570:	4638      	mov	r0, r7
 8007572:	f7ff fdc2 	bl	80070fa <_Balloc>
 8007576:	2301      	movs	r3, #1
 8007578:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800757c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007580:	bfa4      	itt	ge
 8007582:	4623      	movge	r3, r4
 8007584:	462c      	movge	r4, r5
 8007586:	4638      	mov	r0, r7
 8007588:	6861      	ldr	r1, [r4, #4]
 800758a:	bfa6      	itte	ge
 800758c:	461d      	movge	r5, r3
 800758e:	2600      	movge	r6, #0
 8007590:	2601      	movlt	r6, #1
 8007592:	f7ff fdb2 	bl	80070fa <_Balloc>
 8007596:	f04f 0e00 	mov.w	lr, #0
 800759a:	60c6      	str	r6, [r0, #12]
 800759c:	692b      	ldr	r3, [r5, #16]
 800759e:	6926      	ldr	r6, [r4, #16]
 80075a0:	f104 0214 	add.w	r2, r4, #20
 80075a4:	f105 0914 	add.w	r9, r5, #20
 80075a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80075ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80075b0:	f100 0114 	add.w	r1, r0, #20
 80075b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80075b8:	f859 5b04 	ldr.w	r5, [r9], #4
 80075bc:	fa1f f38a 	uxth.w	r3, sl
 80075c0:	4473      	add	r3, lr
 80075c2:	b2ac      	uxth	r4, r5
 80075c4:	1b1b      	subs	r3, r3, r4
 80075c6:	0c2c      	lsrs	r4, r5, #16
 80075c8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80075cc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80075d6:	45c8      	cmp	r8, r9
 80075d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80075dc:	4694      	mov	ip, r2
 80075de:	f841 4b04 	str.w	r4, [r1], #4
 80075e2:	d8e7      	bhi.n	80075b4 <__mdiff+0x5c>
 80075e4:	45bc      	cmp	ip, r7
 80075e6:	d304      	bcc.n	80075f2 <__mdiff+0x9a>
 80075e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80075ec:	b183      	cbz	r3, 8007610 <__mdiff+0xb8>
 80075ee:	6106      	str	r6, [r0, #16]
 80075f0:	e7c4      	b.n	800757c <__mdiff+0x24>
 80075f2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80075f6:	b2a2      	uxth	r2, r4
 80075f8:	4472      	add	r2, lr
 80075fa:	1413      	asrs	r3, r2, #16
 80075fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007600:	b292      	uxth	r2, r2
 8007602:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007606:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800760a:	f841 2b04 	str.w	r2, [r1], #4
 800760e:	e7e9      	b.n	80075e4 <__mdiff+0x8c>
 8007610:	3e01      	subs	r6, #1
 8007612:	e7e9      	b.n	80075e8 <__mdiff+0x90>

08007614 <__d2b>:
 8007614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007618:	461c      	mov	r4, r3
 800761a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800761e:	2101      	movs	r1, #1
 8007620:	4690      	mov	r8, r2
 8007622:	f7ff fd6a 	bl	80070fa <_Balloc>
 8007626:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800762a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800762e:	4607      	mov	r7, r0
 8007630:	bb34      	cbnz	r4, 8007680 <__d2b+0x6c>
 8007632:	9201      	str	r2, [sp, #4]
 8007634:	f1b8 0200 	subs.w	r2, r8, #0
 8007638:	d027      	beq.n	800768a <__d2b+0x76>
 800763a:	a802      	add	r0, sp, #8
 800763c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007640:	f7ff fe00 	bl	8007244 <__lo0bits>
 8007644:	9900      	ldr	r1, [sp, #0]
 8007646:	b1f0      	cbz	r0, 8007686 <__d2b+0x72>
 8007648:	9a01      	ldr	r2, [sp, #4]
 800764a:	f1c0 0320 	rsb	r3, r0, #32
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	430b      	orrs	r3, r1
 8007654:	40c2      	lsrs	r2, r0
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	9201      	str	r2, [sp, #4]
 800765a:	9b01      	ldr	r3, [sp, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	bf14      	ite	ne
 8007660:	2102      	movne	r1, #2
 8007662:	2101      	moveq	r1, #1
 8007664:	61bb      	str	r3, [r7, #24]
 8007666:	6139      	str	r1, [r7, #16]
 8007668:	b1c4      	cbz	r4, 800769c <__d2b+0x88>
 800766a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800766e:	4404      	add	r4, r0
 8007670:	6034      	str	r4, [r6, #0]
 8007672:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007676:	6028      	str	r0, [r5, #0]
 8007678:	4638      	mov	r0, r7
 800767a:	b002      	add	sp, #8
 800767c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007680:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007684:	e7d5      	b.n	8007632 <__d2b+0x1e>
 8007686:	6179      	str	r1, [r7, #20]
 8007688:	e7e7      	b.n	800765a <__d2b+0x46>
 800768a:	a801      	add	r0, sp, #4
 800768c:	f7ff fdda 	bl	8007244 <__lo0bits>
 8007690:	2101      	movs	r1, #1
 8007692:	9b01      	ldr	r3, [sp, #4]
 8007694:	6139      	str	r1, [r7, #16]
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	3020      	adds	r0, #32
 800769a:	e7e5      	b.n	8007668 <__d2b+0x54>
 800769c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076a0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80076a4:	6030      	str	r0, [r6, #0]
 80076a6:	6918      	ldr	r0, [r3, #16]
 80076a8:	f7ff fdad 	bl	8007206 <__hi0bits>
 80076ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80076b0:	e7e1      	b.n	8007676 <__d2b+0x62>

080076b2 <_calloc_r>:
 80076b2:	b538      	push	{r3, r4, r5, lr}
 80076b4:	fb02 f401 	mul.w	r4, r2, r1
 80076b8:	4621      	mov	r1, r4
 80076ba:	f000 f855 	bl	8007768 <_malloc_r>
 80076be:	4605      	mov	r5, r0
 80076c0:	b118      	cbz	r0, 80076ca <_calloc_r+0x18>
 80076c2:	4622      	mov	r2, r4
 80076c4:	2100      	movs	r1, #0
 80076c6:	f7fd ff13 	bl	80054f0 <memset>
 80076ca:	4628      	mov	r0, r5
 80076cc:	bd38      	pop	{r3, r4, r5, pc}
	...

080076d0 <_free_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4605      	mov	r5, r0
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d043      	beq.n	8007760 <_free_r+0x90>
 80076d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076dc:	1f0c      	subs	r4, r1, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfb8      	it	lt
 80076e2:	18e4      	addlt	r4, r4, r3
 80076e4:	f000 fbff 	bl	8007ee6 <__malloc_lock>
 80076e8:	4a1e      	ldr	r2, [pc, #120]	; (8007764 <_free_r+0x94>)
 80076ea:	6813      	ldr	r3, [r2, #0]
 80076ec:	4610      	mov	r0, r2
 80076ee:	b933      	cbnz	r3, 80076fe <_free_r+0x2e>
 80076f0:	6063      	str	r3, [r4, #4]
 80076f2:	6014      	str	r4, [r2, #0]
 80076f4:	4628      	mov	r0, r5
 80076f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076fa:	f000 bbf5 	b.w	8007ee8 <__malloc_unlock>
 80076fe:	42a3      	cmp	r3, r4
 8007700:	d90b      	bls.n	800771a <_free_r+0x4a>
 8007702:	6821      	ldr	r1, [r4, #0]
 8007704:	1862      	adds	r2, r4, r1
 8007706:	4293      	cmp	r3, r2
 8007708:	bf01      	itttt	eq
 800770a:	681a      	ldreq	r2, [r3, #0]
 800770c:	685b      	ldreq	r3, [r3, #4]
 800770e:	1852      	addeq	r2, r2, r1
 8007710:	6022      	streq	r2, [r4, #0]
 8007712:	6063      	str	r3, [r4, #4]
 8007714:	6004      	str	r4, [r0, #0]
 8007716:	e7ed      	b.n	80076f4 <_free_r+0x24>
 8007718:	4613      	mov	r3, r2
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	b10a      	cbz	r2, 8007722 <_free_r+0x52>
 800771e:	42a2      	cmp	r2, r4
 8007720:	d9fa      	bls.n	8007718 <_free_r+0x48>
 8007722:	6819      	ldr	r1, [r3, #0]
 8007724:	1858      	adds	r0, r3, r1
 8007726:	42a0      	cmp	r0, r4
 8007728:	d10b      	bne.n	8007742 <_free_r+0x72>
 800772a:	6820      	ldr	r0, [r4, #0]
 800772c:	4401      	add	r1, r0
 800772e:	1858      	adds	r0, r3, r1
 8007730:	4282      	cmp	r2, r0
 8007732:	6019      	str	r1, [r3, #0]
 8007734:	d1de      	bne.n	80076f4 <_free_r+0x24>
 8007736:	6810      	ldr	r0, [r2, #0]
 8007738:	6852      	ldr	r2, [r2, #4]
 800773a:	4401      	add	r1, r0
 800773c:	6019      	str	r1, [r3, #0]
 800773e:	605a      	str	r2, [r3, #4]
 8007740:	e7d8      	b.n	80076f4 <_free_r+0x24>
 8007742:	d902      	bls.n	800774a <_free_r+0x7a>
 8007744:	230c      	movs	r3, #12
 8007746:	602b      	str	r3, [r5, #0]
 8007748:	e7d4      	b.n	80076f4 <_free_r+0x24>
 800774a:	6820      	ldr	r0, [r4, #0]
 800774c:	1821      	adds	r1, r4, r0
 800774e:	428a      	cmp	r2, r1
 8007750:	bf01      	itttt	eq
 8007752:	6811      	ldreq	r1, [r2, #0]
 8007754:	6852      	ldreq	r2, [r2, #4]
 8007756:	1809      	addeq	r1, r1, r0
 8007758:	6021      	streq	r1, [r4, #0]
 800775a:	6062      	str	r2, [r4, #4]
 800775c:	605c      	str	r4, [r3, #4]
 800775e:	e7c9      	b.n	80076f4 <_free_r+0x24>
 8007760:	bd38      	pop	{r3, r4, r5, pc}
 8007762:	bf00      	nop
 8007764:	20000d14 	.word	0x20000d14

08007768 <_malloc_r>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	1ccd      	adds	r5, r1, #3
 800776c:	f025 0503 	bic.w	r5, r5, #3
 8007770:	3508      	adds	r5, #8
 8007772:	2d0c      	cmp	r5, #12
 8007774:	bf38      	it	cc
 8007776:	250c      	movcc	r5, #12
 8007778:	2d00      	cmp	r5, #0
 800777a:	4606      	mov	r6, r0
 800777c:	db01      	blt.n	8007782 <_malloc_r+0x1a>
 800777e:	42a9      	cmp	r1, r5
 8007780:	d903      	bls.n	800778a <_malloc_r+0x22>
 8007782:	230c      	movs	r3, #12
 8007784:	6033      	str	r3, [r6, #0]
 8007786:	2000      	movs	r0, #0
 8007788:	bd70      	pop	{r4, r5, r6, pc}
 800778a:	f000 fbac 	bl	8007ee6 <__malloc_lock>
 800778e:	4a21      	ldr	r2, [pc, #132]	; (8007814 <_malloc_r+0xac>)
 8007790:	6814      	ldr	r4, [r2, #0]
 8007792:	4621      	mov	r1, r4
 8007794:	b991      	cbnz	r1, 80077bc <_malloc_r+0x54>
 8007796:	4c20      	ldr	r4, [pc, #128]	; (8007818 <_malloc_r+0xb0>)
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	b91b      	cbnz	r3, 80077a4 <_malloc_r+0x3c>
 800779c:	4630      	mov	r0, r6
 800779e:	f000 facd 	bl	8007d3c <_sbrk_r>
 80077a2:	6020      	str	r0, [r4, #0]
 80077a4:	4629      	mov	r1, r5
 80077a6:	4630      	mov	r0, r6
 80077a8:	f000 fac8 	bl	8007d3c <_sbrk_r>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d124      	bne.n	80077fa <_malloc_r+0x92>
 80077b0:	230c      	movs	r3, #12
 80077b2:	4630      	mov	r0, r6
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	f000 fb97 	bl	8007ee8 <__malloc_unlock>
 80077ba:	e7e4      	b.n	8007786 <_malloc_r+0x1e>
 80077bc:	680b      	ldr	r3, [r1, #0]
 80077be:	1b5b      	subs	r3, r3, r5
 80077c0:	d418      	bmi.n	80077f4 <_malloc_r+0x8c>
 80077c2:	2b0b      	cmp	r3, #11
 80077c4:	d90f      	bls.n	80077e6 <_malloc_r+0x7e>
 80077c6:	600b      	str	r3, [r1, #0]
 80077c8:	18cc      	adds	r4, r1, r3
 80077ca:	50cd      	str	r5, [r1, r3]
 80077cc:	4630      	mov	r0, r6
 80077ce:	f000 fb8b 	bl	8007ee8 <__malloc_unlock>
 80077d2:	f104 000b 	add.w	r0, r4, #11
 80077d6:	1d23      	adds	r3, r4, #4
 80077d8:	f020 0007 	bic.w	r0, r0, #7
 80077dc:	1ac3      	subs	r3, r0, r3
 80077de:	d0d3      	beq.n	8007788 <_malloc_r+0x20>
 80077e0:	425a      	negs	r2, r3
 80077e2:	50e2      	str	r2, [r4, r3]
 80077e4:	e7d0      	b.n	8007788 <_malloc_r+0x20>
 80077e6:	684b      	ldr	r3, [r1, #4]
 80077e8:	428c      	cmp	r4, r1
 80077ea:	bf16      	itet	ne
 80077ec:	6063      	strne	r3, [r4, #4]
 80077ee:	6013      	streq	r3, [r2, #0]
 80077f0:	460c      	movne	r4, r1
 80077f2:	e7eb      	b.n	80077cc <_malloc_r+0x64>
 80077f4:	460c      	mov	r4, r1
 80077f6:	6849      	ldr	r1, [r1, #4]
 80077f8:	e7cc      	b.n	8007794 <_malloc_r+0x2c>
 80077fa:	1cc4      	adds	r4, r0, #3
 80077fc:	f024 0403 	bic.w	r4, r4, #3
 8007800:	42a0      	cmp	r0, r4
 8007802:	d005      	beq.n	8007810 <_malloc_r+0xa8>
 8007804:	1a21      	subs	r1, r4, r0
 8007806:	4630      	mov	r0, r6
 8007808:	f000 fa98 	bl	8007d3c <_sbrk_r>
 800780c:	3001      	adds	r0, #1
 800780e:	d0cf      	beq.n	80077b0 <_malloc_r+0x48>
 8007810:	6025      	str	r5, [r4, #0]
 8007812:	e7db      	b.n	80077cc <_malloc_r+0x64>
 8007814:	20000d14 	.word	0x20000d14
 8007818:	20000d18 	.word	0x20000d18

0800781c <__ssputs_r>:
 800781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	688e      	ldr	r6, [r1, #8]
 8007822:	4682      	mov	sl, r0
 8007824:	429e      	cmp	r6, r3
 8007826:	460c      	mov	r4, r1
 8007828:	4690      	mov	r8, r2
 800782a:	4699      	mov	r9, r3
 800782c:	d837      	bhi.n	800789e <__ssputs_r+0x82>
 800782e:	898a      	ldrh	r2, [r1, #12]
 8007830:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007834:	d031      	beq.n	800789a <__ssputs_r+0x7e>
 8007836:	2302      	movs	r3, #2
 8007838:	6825      	ldr	r5, [r4, #0]
 800783a:	6909      	ldr	r1, [r1, #16]
 800783c:	1a6f      	subs	r7, r5, r1
 800783e:	6965      	ldr	r5, [r4, #20]
 8007840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007844:	fb95 f5f3 	sdiv	r5, r5, r3
 8007848:	f109 0301 	add.w	r3, r9, #1
 800784c:	443b      	add	r3, r7
 800784e:	429d      	cmp	r5, r3
 8007850:	bf38      	it	cc
 8007852:	461d      	movcc	r5, r3
 8007854:	0553      	lsls	r3, r2, #21
 8007856:	d530      	bpl.n	80078ba <__ssputs_r+0x9e>
 8007858:	4629      	mov	r1, r5
 800785a:	f7ff ff85 	bl	8007768 <_malloc_r>
 800785e:	4606      	mov	r6, r0
 8007860:	b950      	cbnz	r0, 8007878 <__ssputs_r+0x5c>
 8007862:	230c      	movs	r3, #12
 8007864:	f04f 30ff 	mov.w	r0, #4294967295
 8007868:	f8ca 3000 	str.w	r3, [sl]
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007872:	81a3      	strh	r3, [r4, #12]
 8007874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007878:	463a      	mov	r2, r7
 800787a:	6921      	ldr	r1, [r4, #16]
 800787c:	f7ff fc32 	bl	80070e4 <memcpy>
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788a:	81a3      	strh	r3, [r4, #12]
 800788c:	6126      	str	r6, [r4, #16]
 800788e:	443e      	add	r6, r7
 8007890:	6026      	str	r6, [r4, #0]
 8007892:	464e      	mov	r6, r9
 8007894:	6165      	str	r5, [r4, #20]
 8007896:	1bed      	subs	r5, r5, r7
 8007898:	60a5      	str	r5, [r4, #8]
 800789a:	454e      	cmp	r6, r9
 800789c:	d900      	bls.n	80078a0 <__ssputs_r+0x84>
 800789e:	464e      	mov	r6, r9
 80078a0:	4632      	mov	r2, r6
 80078a2:	4641      	mov	r1, r8
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	f000 fb05 	bl	8007eb4 <memmove>
 80078aa:	68a3      	ldr	r3, [r4, #8]
 80078ac:	2000      	movs	r0, #0
 80078ae:	1b9b      	subs	r3, r3, r6
 80078b0:	60a3      	str	r3, [r4, #8]
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	441e      	add	r6, r3
 80078b6:	6026      	str	r6, [r4, #0]
 80078b8:	e7dc      	b.n	8007874 <__ssputs_r+0x58>
 80078ba:	462a      	mov	r2, r5
 80078bc:	f000 fb15 	bl	8007eea <_realloc_r>
 80078c0:	4606      	mov	r6, r0
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d1e2      	bne.n	800788c <__ssputs_r+0x70>
 80078c6:	6921      	ldr	r1, [r4, #16]
 80078c8:	4650      	mov	r0, sl
 80078ca:	f7ff ff01 	bl	80076d0 <_free_r>
 80078ce:	e7c8      	b.n	8007862 <__ssputs_r+0x46>

080078d0 <_svfiprintf_r>:
 80078d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	461d      	mov	r5, r3
 80078d6:	898b      	ldrh	r3, [r1, #12]
 80078d8:	b09d      	sub	sp, #116	; 0x74
 80078da:	061f      	lsls	r7, r3, #24
 80078dc:	4680      	mov	r8, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	4616      	mov	r6, r2
 80078e2:	d50f      	bpl.n	8007904 <_svfiprintf_r+0x34>
 80078e4:	690b      	ldr	r3, [r1, #16]
 80078e6:	b96b      	cbnz	r3, 8007904 <_svfiprintf_r+0x34>
 80078e8:	2140      	movs	r1, #64	; 0x40
 80078ea:	f7ff ff3d 	bl	8007768 <_malloc_r>
 80078ee:	6020      	str	r0, [r4, #0]
 80078f0:	6120      	str	r0, [r4, #16]
 80078f2:	b928      	cbnz	r0, 8007900 <_svfiprintf_r+0x30>
 80078f4:	230c      	movs	r3, #12
 80078f6:	f8c8 3000 	str.w	r3, [r8]
 80078fa:	f04f 30ff 	mov.w	r0, #4294967295
 80078fe:	e0c8      	b.n	8007a92 <_svfiprintf_r+0x1c2>
 8007900:	2340      	movs	r3, #64	; 0x40
 8007902:	6163      	str	r3, [r4, #20]
 8007904:	2300      	movs	r3, #0
 8007906:	9309      	str	r3, [sp, #36]	; 0x24
 8007908:	2320      	movs	r3, #32
 800790a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800790e:	2330      	movs	r3, #48	; 0x30
 8007910:	f04f 0b01 	mov.w	fp, #1
 8007914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007918:	9503      	str	r5, [sp, #12]
 800791a:	4637      	mov	r7, r6
 800791c:	463d      	mov	r5, r7
 800791e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007922:	b10b      	cbz	r3, 8007928 <_svfiprintf_r+0x58>
 8007924:	2b25      	cmp	r3, #37	; 0x25
 8007926:	d13e      	bne.n	80079a6 <_svfiprintf_r+0xd6>
 8007928:	ebb7 0a06 	subs.w	sl, r7, r6
 800792c:	d00b      	beq.n	8007946 <_svfiprintf_r+0x76>
 800792e:	4653      	mov	r3, sl
 8007930:	4632      	mov	r2, r6
 8007932:	4621      	mov	r1, r4
 8007934:	4640      	mov	r0, r8
 8007936:	f7ff ff71 	bl	800781c <__ssputs_r>
 800793a:	3001      	adds	r0, #1
 800793c:	f000 80a4 	beq.w	8007a88 <_svfiprintf_r+0x1b8>
 8007940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007942:	4453      	add	r3, sl
 8007944:	9309      	str	r3, [sp, #36]	; 0x24
 8007946:	783b      	ldrb	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 809d 	beq.w	8007a88 <_svfiprintf_r+0x1b8>
 800794e:	2300      	movs	r3, #0
 8007950:	f04f 32ff 	mov.w	r2, #4294967295
 8007954:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	9307      	str	r3, [sp, #28]
 800795c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007960:	931a      	str	r3, [sp, #104]	; 0x68
 8007962:	462f      	mov	r7, r5
 8007964:	2205      	movs	r2, #5
 8007966:	f817 1b01 	ldrb.w	r1, [r7], #1
 800796a:	4850      	ldr	r0, [pc, #320]	; (8007aac <_svfiprintf_r+0x1dc>)
 800796c:	f7ff fbac 	bl	80070c8 <memchr>
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	b9d0      	cbnz	r0, 80079aa <_svfiprintf_r+0xda>
 8007974:	06d9      	lsls	r1, r3, #27
 8007976:	bf44      	itt	mi
 8007978:	2220      	movmi	r2, #32
 800797a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800797e:	071a      	lsls	r2, r3, #28
 8007980:	bf44      	itt	mi
 8007982:	222b      	movmi	r2, #43	; 0x2b
 8007984:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007988:	782a      	ldrb	r2, [r5, #0]
 800798a:	2a2a      	cmp	r2, #42	; 0x2a
 800798c:	d015      	beq.n	80079ba <_svfiprintf_r+0xea>
 800798e:	462f      	mov	r7, r5
 8007990:	2000      	movs	r0, #0
 8007992:	250a      	movs	r5, #10
 8007994:	9a07      	ldr	r2, [sp, #28]
 8007996:	4639      	mov	r1, r7
 8007998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800799c:	3b30      	subs	r3, #48	; 0x30
 800799e:	2b09      	cmp	r3, #9
 80079a0:	d94d      	bls.n	8007a3e <_svfiprintf_r+0x16e>
 80079a2:	b1b8      	cbz	r0, 80079d4 <_svfiprintf_r+0x104>
 80079a4:	e00f      	b.n	80079c6 <_svfiprintf_r+0xf6>
 80079a6:	462f      	mov	r7, r5
 80079a8:	e7b8      	b.n	800791c <_svfiprintf_r+0x4c>
 80079aa:	4a40      	ldr	r2, [pc, #256]	; (8007aac <_svfiprintf_r+0x1dc>)
 80079ac:	463d      	mov	r5, r7
 80079ae:	1a80      	subs	r0, r0, r2
 80079b0:	fa0b f000 	lsl.w	r0, fp, r0
 80079b4:	4318      	orrs	r0, r3
 80079b6:	9004      	str	r0, [sp, #16]
 80079b8:	e7d3      	b.n	8007962 <_svfiprintf_r+0x92>
 80079ba:	9a03      	ldr	r2, [sp, #12]
 80079bc:	1d11      	adds	r1, r2, #4
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	9103      	str	r1, [sp, #12]
 80079c2:	2a00      	cmp	r2, #0
 80079c4:	db01      	blt.n	80079ca <_svfiprintf_r+0xfa>
 80079c6:	9207      	str	r2, [sp, #28]
 80079c8:	e004      	b.n	80079d4 <_svfiprintf_r+0x104>
 80079ca:	4252      	negs	r2, r2
 80079cc:	f043 0302 	orr.w	r3, r3, #2
 80079d0:	9207      	str	r2, [sp, #28]
 80079d2:	9304      	str	r3, [sp, #16]
 80079d4:	783b      	ldrb	r3, [r7, #0]
 80079d6:	2b2e      	cmp	r3, #46	; 0x2e
 80079d8:	d10c      	bne.n	80079f4 <_svfiprintf_r+0x124>
 80079da:	787b      	ldrb	r3, [r7, #1]
 80079dc:	2b2a      	cmp	r3, #42	; 0x2a
 80079de:	d133      	bne.n	8007a48 <_svfiprintf_r+0x178>
 80079e0:	9b03      	ldr	r3, [sp, #12]
 80079e2:	3702      	adds	r7, #2
 80079e4:	1d1a      	adds	r2, r3, #4
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	9203      	str	r2, [sp, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bfb8      	it	lt
 80079ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	4d2e      	ldr	r5, [pc, #184]	; (8007ab0 <_svfiprintf_r+0x1e0>)
 80079f6:	2203      	movs	r2, #3
 80079f8:	7839      	ldrb	r1, [r7, #0]
 80079fa:	4628      	mov	r0, r5
 80079fc:	f7ff fb64 	bl	80070c8 <memchr>
 8007a00:	b138      	cbz	r0, 8007a12 <_svfiprintf_r+0x142>
 8007a02:	2340      	movs	r3, #64	; 0x40
 8007a04:	1b40      	subs	r0, r0, r5
 8007a06:	fa03 f000 	lsl.w	r0, r3, r0
 8007a0a:	9b04      	ldr	r3, [sp, #16]
 8007a0c:	3701      	adds	r7, #1
 8007a0e:	4303      	orrs	r3, r0
 8007a10:	9304      	str	r3, [sp, #16]
 8007a12:	7839      	ldrb	r1, [r7, #0]
 8007a14:	2206      	movs	r2, #6
 8007a16:	4827      	ldr	r0, [pc, #156]	; (8007ab4 <_svfiprintf_r+0x1e4>)
 8007a18:	1c7e      	adds	r6, r7, #1
 8007a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a1e:	f7ff fb53 	bl	80070c8 <memchr>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d038      	beq.n	8007a98 <_svfiprintf_r+0x1c8>
 8007a26:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <_svfiprintf_r+0x1e8>)
 8007a28:	bb13      	cbnz	r3, 8007a70 <_svfiprintf_r+0x1a0>
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	3307      	adds	r3, #7
 8007a2e:	f023 0307 	bic.w	r3, r3, #7
 8007a32:	3308      	adds	r3, #8
 8007a34:	9303      	str	r3, [sp, #12]
 8007a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a38:	444b      	add	r3, r9
 8007a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3c:	e76d      	b.n	800791a <_svfiprintf_r+0x4a>
 8007a3e:	fb05 3202 	mla	r2, r5, r2, r3
 8007a42:	2001      	movs	r0, #1
 8007a44:	460f      	mov	r7, r1
 8007a46:	e7a6      	b.n	8007996 <_svfiprintf_r+0xc6>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	250a      	movs	r5, #10
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	3701      	adds	r7, #1
 8007a50:	9305      	str	r3, [sp, #20]
 8007a52:	4638      	mov	r0, r7
 8007a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a58:	3a30      	subs	r2, #48	; 0x30
 8007a5a:	2a09      	cmp	r2, #9
 8007a5c:	d903      	bls.n	8007a66 <_svfiprintf_r+0x196>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0c8      	beq.n	80079f4 <_svfiprintf_r+0x124>
 8007a62:	9105      	str	r1, [sp, #20]
 8007a64:	e7c6      	b.n	80079f4 <_svfiprintf_r+0x124>
 8007a66:	fb05 2101 	mla	r1, r5, r1, r2
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4607      	mov	r7, r0
 8007a6e:	e7f0      	b.n	8007a52 <_svfiprintf_r+0x182>
 8007a70:	ab03      	add	r3, sp, #12
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4622      	mov	r2, r4
 8007a76:	4b11      	ldr	r3, [pc, #68]	; (8007abc <_svfiprintf_r+0x1ec>)
 8007a78:	a904      	add	r1, sp, #16
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	f7fd fdd2 	bl	8005624 <_printf_float>
 8007a80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a84:	4681      	mov	r9, r0
 8007a86:	d1d6      	bne.n	8007a36 <_svfiprintf_r+0x166>
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	065b      	lsls	r3, r3, #25
 8007a8c:	f53f af35 	bmi.w	80078fa <_svfiprintf_r+0x2a>
 8007a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a92:	b01d      	add	sp, #116	; 0x74
 8007a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a98:	ab03      	add	r3, sp, #12
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4b07      	ldr	r3, [pc, #28]	; (8007abc <_svfiprintf_r+0x1ec>)
 8007aa0:	a904      	add	r1, sp, #16
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	f7fe f86a 	bl	8005b7c <_printf_i>
 8007aa8:	e7ea      	b.n	8007a80 <_svfiprintf_r+0x1b0>
 8007aaa:	bf00      	nop
 8007aac:	08008a74 	.word	0x08008a74
 8007ab0:	08008a7a 	.word	0x08008a7a
 8007ab4:	08008a7e 	.word	0x08008a7e
 8007ab8:	08005625 	.word	0x08005625
 8007abc:	0800781d 	.word	0x0800781d

08007ac0 <__sfputc_r>:
 8007ac0:	6893      	ldr	r3, [r2, #8]
 8007ac2:	b410      	push	{r4}
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	6093      	str	r3, [r2, #8]
 8007aca:	da07      	bge.n	8007adc <__sfputc_r+0x1c>
 8007acc:	6994      	ldr	r4, [r2, #24]
 8007ace:	42a3      	cmp	r3, r4
 8007ad0:	db01      	blt.n	8007ad6 <__sfputc_r+0x16>
 8007ad2:	290a      	cmp	r1, #10
 8007ad4:	d102      	bne.n	8007adc <__sfputc_r+0x1c>
 8007ad6:	bc10      	pop	{r4}
 8007ad8:	f7fe b9fe 	b.w	8005ed8 <__swbuf_r>
 8007adc:	6813      	ldr	r3, [r2, #0]
 8007ade:	1c58      	adds	r0, r3, #1
 8007ae0:	6010      	str	r0, [r2, #0]
 8007ae2:	7019      	strb	r1, [r3, #0]
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	bc10      	pop	{r4}
 8007ae8:	4770      	bx	lr

08007aea <__sfputs_r>:
 8007aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aec:	4606      	mov	r6, r0
 8007aee:	460f      	mov	r7, r1
 8007af0:	4614      	mov	r4, r2
 8007af2:	18d5      	adds	r5, r2, r3
 8007af4:	42ac      	cmp	r4, r5
 8007af6:	d101      	bne.n	8007afc <__sfputs_r+0x12>
 8007af8:	2000      	movs	r0, #0
 8007afa:	e007      	b.n	8007b0c <__sfputs_r+0x22>
 8007afc:	463a      	mov	r2, r7
 8007afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7ff ffdc 	bl	8007ac0 <__sfputc_r>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d1f3      	bne.n	8007af4 <__sfputs_r+0xa>
 8007b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b10 <_vfiprintf_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	460c      	mov	r4, r1
 8007b16:	b09d      	sub	sp, #116	; 0x74
 8007b18:	4617      	mov	r7, r2
 8007b1a:	461d      	mov	r5, r3
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	b118      	cbz	r0, 8007b28 <_vfiprintf_r+0x18>
 8007b20:	6983      	ldr	r3, [r0, #24]
 8007b22:	b90b      	cbnz	r3, 8007b28 <_vfiprintf_r+0x18>
 8007b24:	f7ff f9cc 	bl	8006ec0 <__sinit>
 8007b28:	4b7c      	ldr	r3, [pc, #496]	; (8007d1c <_vfiprintf_r+0x20c>)
 8007b2a:	429c      	cmp	r4, r3
 8007b2c:	d158      	bne.n	8007be0 <_vfiprintf_r+0xd0>
 8007b2e:	6874      	ldr	r4, [r6, #4]
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	0718      	lsls	r0, r3, #28
 8007b34:	d55e      	bpl.n	8007bf4 <_vfiprintf_r+0xe4>
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d05b      	beq.n	8007bf4 <_vfiprintf_r+0xe4>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b40:	2320      	movs	r3, #32
 8007b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b46:	2330      	movs	r3, #48	; 0x30
 8007b48:	f04f 0b01 	mov.w	fp, #1
 8007b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b50:	9503      	str	r5, [sp, #12]
 8007b52:	46b8      	mov	r8, r7
 8007b54:	4645      	mov	r5, r8
 8007b56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b5a:	b10b      	cbz	r3, 8007b60 <_vfiprintf_r+0x50>
 8007b5c:	2b25      	cmp	r3, #37	; 0x25
 8007b5e:	d154      	bne.n	8007c0a <_vfiprintf_r+0xfa>
 8007b60:	ebb8 0a07 	subs.w	sl, r8, r7
 8007b64:	d00b      	beq.n	8007b7e <_vfiprintf_r+0x6e>
 8007b66:	4653      	mov	r3, sl
 8007b68:	463a      	mov	r2, r7
 8007b6a:	4621      	mov	r1, r4
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff ffbc 	bl	8007aea <__sfputs_r>
 8007b72:	3001      	adds	r0, #1
 8007b74:	f000 80c2 	beq.w	8007cfc <_vfiprintf_r+0x1ec>
 8007b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7a:	4453      	add	r3, sl
 8007b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7e:	f898 3000 	ldrb.w	r3, [r8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80ba 	beq.w	8007cfc <_vfiprintf_r+0x1ec>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b92:	9304      	str	r3, [sp, #16]
 8007b94:	9307      	str	r3, [sp, #28]
 8007b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007b9c:	46a8      	mov	r8, r5
 8007b9e:	2205      	movs	r2, #5
 8007ba0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007ba4:	485e      	ldr	r0, [pc, #376]	; (8007d20 <_vfiprintf_r+0x210>)
 8007ba6:	f7ff fa8f 	bl	80070c8 <memchr>
 8007baa:	9b04      	ldr	r3, [sp, #16]
 8007bac:	bb78      	cbnz	r0, 8007c0e <_vfiprintf_r+0xfe>
 8007bae:	06d9      	lsls	r1, r3, #27
 8007bb0:	bf44      	itt	mi
 8007bb2:	2220      	movmi	r2, #32
 8007bb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007bb8:	071a      	lsls	r2, r3, #28
 8007bba:	bf44      	itt	mi
 8007bbc:	222b      	movmi	r2, #43	; 0x2b
 8007bbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007bc2:	782a      	ldrb	r2, [r5, #0]
 8007bc4:	2a2a      	cmp	r2, #42	; 0x2a
 8007bc6:	d02a      	beq.n	8007c1e <_vfiprintf_r+0x10e>
 8007bc8:	46a8      	mov	r8, r5
 8007bca:	2000      	movs	r0, #0
 8007bcc:	250a      	movs	r5, #10
 8007bce:	9a07      	ldr	r2, [sp, #28]
 8007bd0:	4641      	mov	r1, r8
 8007bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bd6:	3b30      	subs	r3, #48	; 0x30
 8007bd8:	2b09      	cmp	r3, #9
 8007bda:	d969      	bls.n	8007cb0 <_vfiprintf_r+0x1a0>
 8007bdc:	b360      	cbz	r0, 8007c38 <_vfiprintf_r+0x128>
 8007bde:	e024      	b.n	8007c2a <_vfiprintf_r+0x11a>
 8007be0:	4b50      	ldr	r3, [pc, #320]	; (8007d24 <_vfiprintf_r+0x214>)
 8007be2:	429c      	cmp	r4, r3
 8007be4:	d101      	bne.n	8007bea <_vfiprintf_r+0xda>
 8007be6:	68b4      	ldr	r4, [r6, #8]
 8007be8:	e7a2      	b.n	8007b30 <_vfiprintf_r+0x20>
 8007bea:	4b4f      	ldr	r3, [pc, #316]	; (8007d28 <_vfiprintf_r+0x218>)
 8007bec:	429c      	cmp	r4, r3
 8007bee:	bf08      	it	eq
 8007bf0:	68f4      	ldreq	r4, [r6, #12]
 8007bf2:	e79d      	b.n	8007b30 <_vfiprintf_r+0x20>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f7fe f9c0 	bl	8005f7c <__swsetup_r>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	d09d      	beq.n	8007b3c <_vfiprintf_r+0x2c>
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	b01d      	add	sp, #116	; 0x74
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	46a8      	mov	r8, r5
 8007c0c:	e7a2      	b.n	8007b54 <_vfiprintf_r+0x44>
 8007c0e:	4a44      	ldr	r2, [pc, #272]	; (8007d20 <_vfiprintf_r+0x210>)
 8007c10:	4645      	mov	r5, r8
 8007c12:	1a80      	subs	r0, r0, r2
 8007c14:	fa0b f000 	lsl.w	r0, fp, r0
 8007c18:	4318      	orrs	r0, r3
 8007c1a:	9004      	str	r0, [sp, #16]
 8007c1c:	e7be      	b.n	8007b9c <_vfiprintf_r+0x8c>
 8007c1e:	9a03      	ldr	r2, [sp, #12]
 8007c20:	1d11      	adds	r1, r2, #4
 8007c22:	6812      	ldr	r2, [r2, #0]
 8007c24:	9103      	str	r1, [sp, #12]
 8007c26:	2a00      	cmp	r2, #0
 8007c28:	db01      	blt.n	8007c2e <_vfiprintf_r+0x11e>
 8007c2a:	9207      	str	r2, [sp, #28]
 8007c2c:	e004      	b.n	8007c38 <_vfiprintf_r+0x128>
 8007c2e:	4252      	negs	r2, r2
 8007c30:	f043 0302 	orr.w	r3, r3, #2
 8007c34:	9207      	str	r2, [sp, #28]
 8007c36:	9304      	str	r3, [sp, #16]
 8007c38:	f898 3000 	ldrb.w	r3, [r8]
 8007c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8007c3e:	d10e      	bne.n	8007c5e <_vfiprintf_r+0x14e>
 8007c40:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c44:	2b2a      	cmp	r3, #42	; 0x2a
 8007c46:	d138      	bne.n	8007cba <_vfiprintf_r+0x1aa>
 8007c48:	9b03      	ldr	r3, [sp, #12]
 8007c4a:	f108 0802 	add.w	r8, r8, #2
 8007c4e:	1d1a      	adds	r2, r3, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	9203      	str	r2, [sp, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bfb8      	it	lt
 8007c58:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c5c:	9305      	str	r3, [sp, #20]
 8007c5e:	4d33      	ldr	r5, [pc, #204]	; (8007d2c <_vfiprintf_r+0x21c>)
 8007c60:	2203      	movs	r2, #3
 8007c62:	f898 1000 	ldrb.w	r1, [r8]
 8007c66:	4628      	mov	r0, r5
 8007c68:	f7ff fa2e 	bl	80070c8 <memchr>
 8007c6c:	b140      	cbz	r0, 8007c80 <_vfiprintf_r+0x170>
 8007c6e:	2340      	movs	r3, #64	; 0x40
 8007c70:	1b40      	subs	r0, r0, r5
 8007c72:	fa03 f000 	lsl.w	r0, r3, r0
 8007c76:	9b04      	ldr	r3, [sp, #16]
 8007c78:	f108 0801 	add.w	r8, r8, #1
 8007c7c:	4303      	orrs	r3, r0
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	f898 1000 	ldrb.w	r1, [r8]
 8007c84:	2206      	movs	r2, #6
 8007c86:	482a      	ldr	r0, [pc, #168]	; (8007d30 <_vfiprintf_r+0x220>)
 8007c88:	f108 0701 	add.w	r7, r8, #1
 8007c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c90:	f7ff fa1a 	bl	80070c8 <memchr>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d037      	beq.n	8007d08 <_vfiprintf_r+0x1f8>
 8007c98:	4b26      	ldr	r3, [pc, #152]	; (8007d34 <_vfiprintf_r+0x224>)
 8007c9a:	bb1b      	cbnz	r3, 8007ce4 <_vfiprintf_r+0x1d4>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	3307      	adds	r3, #7
 8007ca0:	f023 0307 	bic.w	r3, r3, #7
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	9303      	str	r3, [sp, #12]
 8007ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007caa:	444b      	add	r3, r9
 8007cac:	9309      	str	r3, [sp, #36]	; 0x24
 8007cae:	e750      	b.n	8007b52 <_vfiprintf_r+0x42>
 8007cb0:	fb05 3202 	mla	r2, r5, r2, r3
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	4688      	mov	r8, r1
 8007cb8:	e78a      	b.n	8007bd0 <_vfiprintf_r+0xc0>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	250a      	movs	r5, #10
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	f108 0801 	add.w	r8, r8, #1
 8007cc4:	9305      	str	r3, [sp, #20]
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ccc:	3a30      	subs	r2, #48	; 0x30
 8007cce:	2a09      	cmp	r2, #9
 8007cd0:	d903      	bls.n	8007cda <_vfiprintf_r+0x1ca>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0c3      	beq.n	8007c5e <_vfiprintf_r+0x14e>
 8007cd6:	9105      	str	r1, [sp, #20]
 8007cd8:	e7c1      	b.n	8007c5e <_vfiprintf_r+0x14e>
 8007cda:	fb05 2101 	mla	r1, r5, r1, r2
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4680      	mov	r8, r0
 8007ce2:	e7f0      	b.n	8007cc6 <_vfiprintf_r+0x1b6>
 8007ce4:	ab03      	add	r3, sp, #12
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4622      	mov	r2, r4
 8007cea:	4b13      	ldr	r3, [pc, #76]	; (8007d38 <_vfiprintf_r+0x228>)
 8007cec:	a904      	add	r1, sp, #16
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f7fd fc98 	bl	8005624 <_printf_float>
 8007cf4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007cf8:	4681      	mov	r9, r0
 8007cfa:	d1d5      	bne.n	8007ca8 <_vfiprintf_r+0x198>
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	065b      	lsls	r3, r3, #25
 8007d00:	f53f af7e 	bmi.w	8007c00 <_vfiprintf_r+0xf0>
 8007d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d06:	e77d      	b.n	8007c04 <_vfiprintf_r+0xf4>
 8007d08:	ab03      	add	r3, sp, #12
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	4622      	mov	r2, r4
 8007d0e:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <_vfiprintf_r+0x228>)
 8007d10:	a904      	add	r1, sp, #16
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7fd ff32 	bl	8005b7c <_printf_i>
 8007d18:	e7ec      	b.n	8007cf4 <_vfiprintf_r+0x1e4>
 8007d1a:	bf00      	nop
 8007d1c:	08008938 	.word	0x08008938
 8007d20:	08008a74 	.word	0x08008a74
 8007d24:	08008958 	.word	0x08008958
 8007d28:	08008918 	.word	0x08008918
 8007d2c:	08008a7a 	.word	0x08008a7a
 8007d30:	08008a7e 	.word	0x08008a7e
 8007d34:	08005625 	.word	0x08005625
 8007d38:	08007aeb 	.word	0x08007aeb

08007d3c <_sbrk_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	2300      	movs	r3, #0
 8007d40:	4c05      	ldr	r4, [pc, #20]	; (8007d58 <_sbrk_r+0x1c>)
 8007d42:	4605      	mov	r5, r0
 8007d44:	4608      	mov	r0, r1
 8007d46:	6023      	str	r3, [r4, #0]
 8007d48:	f7f9 fcd0 	bl	80016ec <_sbrk>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_sbrk_r+0x1a>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_sbrk_r+0x1a>
 8007d54:	602b      	str	r3, [r5, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20000e80 	.word	0x20000e80

08007d5c <__sread>:
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	460c      	mov	r4, r1
 8007d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d64:	f000 f8e8 	bl	8007f38 <_read_r>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	bfab      	itete	ge
 8007d6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d70:	181b      	addge	r3, r3, r0
 8007d72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d76:	bfac      	ite	ge
 8007d78:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d7a:	81a3      	strhlt	r3, [r4, #12]
 8007d7c:	bd10      	pop	{r4, pc}

08007d7e <__swrite>:
 8007d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d82:	461f      	mov	r7, r3
 8007d84:	898b      	ldrh	r3, [r1, #12]
 8007d86:	4605      	mov	r5, r0
 8007d88:	05db      	lsls	r3, r3, #23
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	4616      	mov	r6, r2
 8007d8e:	d505      	bpl.n	8007d9c <__swrite+0x1e>
 8007d90:	2302      	movs	r3, #2
 8007d92:	2200      	movs	r2, #0
 8007d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d98:	f000 f868 	bl	8007e6c <_lseek_r>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	4632      	mov	r2, r6
 8007da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007daa:	463b      	mov	r3, r7
 8007dac:	4628      	mov	r0, r5
 8007dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007db2:	f000 b817 	b.w	8007de4 <_write_r>

08007db6 <__sseek>:
 8007db6:	b510      	push	{r4, lr}
 8007db8:	460c      	mov	r4, r1
 8007dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dbe:	f000 f855 	bl	8007e6c <_lseek_r>
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	bf15      	itete	ne
 8007dc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dd2:	81a3      	strheq	r3, [r4, #12]
 8007dd4:	bf18      	it	ne
 8007dd6:	81a3      	strhne	r3, [r4, #12]
 8007dd8:	bd10      	pop	{r4, pc}

08007dda <__sclose>:
 8007dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dde:	f000 b813 	b.w	8007e08 <_close_r>
	...

08007de4 <_write_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4605      	mov	r5, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	4611      	mov	r1, r2
 8007dec:	2200      	movs	r2, #0
 8007dee:	4c05      	ldr	r4, [pc, #20]	; (8007e04 <_write_r+0x20>)
 8007df0:	6022      	str	r2, [r4, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f7f9 fc2d 	bl	8001652 <_write>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_write_r+0x1e>
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_write_r+0x1e>
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	20000e80 	.word	0x20000e80

08007e08 <_close_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4c05      	ldr	r4, [pc, #20]	; (8007e24 <_close_r+0x1c>)
 8007e0e:	4605      	mov	r5, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	f7f9 fc39 	bl	800168a <_close>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d102      	bne.n	8007e22 <_close_r+0x1a>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	b103      	cbz	r3, 8007e22 <_close_r+0x1a>
 8007e20:	602b      	str	r3, [r5, #0]
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	20000e80 	.word	0x20000e80

08007e28 <_fstat_r>:
 8007e28:	b538      	push	{r3, r4, r5, lr}
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4c06      	ldr	r4, [pc, #24]	; (8007e48 <_fstat_r+0x20>)
 8007e2e:	4605      	mov	r5, r0
 8007e30:	4608      	mov	r0, r1
 8007e32:	4611      	mov	r1, r2
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	f7f9 fc33 	bl	80016a0 <_fstat>
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	d102      	bne.n	8007e44 <_fstat_r+0x1c>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	b103      	cbz	r3, 8007e44 <_fstat_r+0x1c>
 8007e42:	602b      	str	r3, [r5, #0]
 8007e44:	bd38      	pop	{r3, r4, r5, pc}
 8007e46:	bf00      	nop
 8007e48:	20000e80 	.word	0x20000e80

08007e4c <_isatty_r>:
 8007e4c:	b538      	push	{r3, r4, r5, lr}
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4c05      	ldr	r4, [pc, #20]	; (8007e68 <_isatty_r+0x1c>)
 8007e52:	4605      	mov	r5, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	6023      	str	r3, [r4, #0]
 8007e58:	f7f9 fc31 	bl	80016be <_isatty>
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	d102      	bne.n	8007e66 <_isatty_r+0x1a>
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	b103      	cbz	r3, 8007e66 <_isatty_r+0x1a>
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	20000e80 	.word	0x20000e80

08007e6c <_lseek_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4605      	mov	r5, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	2200      	movs	r2, #0
 8007e76:	4c05      	ldr	r4, [pc, #20]	; (8007e8c <_lseek_r+0x20>)
 8007e78:	6022      	str	r2, [r4, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f7f9 fc29 	bl	80016d2 <_lseek>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_lseek_r+0x1e>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_lseek_r+0x1e>
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	20000e80 	.word	0x20000e80

08007e90 <__ascii_mbtowc>:
 8007e90:	b082      	sub	sp, #8
 8007e92:	b901      	cbnz	r1, 8007e96 <__ascii_mbtowc+0x6>
 8007e94:	a901      	add	r1, sp, #4
 8007e96:	b142      	cbz	r2, 8007eaa <__ascii_mbtowc+0x1a>
 8007e98:	b14b      	cbz	r3, 8007eae <__ascii_mbtowc+0x1e>
 8007e9a:	7813      	ldrb	r3, [r2, #0]
 8007e9c:	600b      	str	r3, [r1, #0]
 8007e9e:	7812      	ldrb	r2, [r2, #0]
 8007ea0:	1c10      	adds	r0, r2, #0
 8007ea2:	bf18      	it	ne
 8007ea4:	2001      	movne	r0, #1
 8007ea6:	b002      	add	sp, #8
 8007ea8:	4770      	bx	lr
 8007eaa:	4610      	mov	r0, r2
 8007eac:	e7fb      	b.n	8007ea6 <__ascii_mbtowc+0x16>
 8007eae:	f06f 0001 	mvn.w	r0, #1
 8007eb2:	e7f8      	b.n	8007ea6 <__ascii_mbtowc+0x16>

08007eb4 <memmove>:
 8007eb4:	4288      	cmp	r0, r1
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	eb01 0302 	add.w	r3, r1, r2
 8007ebc:	d807      	bhi.n	8007ece <memmove+0x1a>
 8007ebe:	1e42      	subs	r2, r0, #1
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	d00a      	beq.n	8007eda <memmove+0x26>
 8007ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ec8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ecc:	e7f8      	b.n	8007ec0 <memmove+0xc>
 8007ece:	4283      	cmp	r3, r0
 8007ed0:	d9f5      	bls.n	8007ebe <memmove+0xa>
 8007ed2:	1881      	adds	r1, r0, r2
 8007ed4:	1ad2      	subs	r2, r2, r3
 8007ed6:	42d3      	cmn	r3, r2
 8007ed8:	d100      	bne.n	8007edc <memmove+0x28>
 8007eda:	bd10      	pop	{r4, pc}
 8007edc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ee0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ee4:	e7f7      	b.n	8007ed6 <memmove+0x22>

08007ee6 <__malloc_lock>:
 8007ee6:	4770      	bx	lr

08007ee8 <__malloc_unlock>:
 8007ee8:	4770      	bx	lr

08007eea <_realloc_r>:
 8007eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eec:	4607      	mov	r7, r0
 8007eee:	4614      	mov	r4, r2
 8007ef0:	460e      	mov	r6, r1
 8007ef2:	b921      	cbnz	r1, 8007efe <_realloc_r+0x14>
 8007ef4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ef8:	4611      	mov	r1, r2
 8007efa:	f7ff bc35 	b.w	8007768 <_malloc_r>
 8007efe:	b922      	cbnz	r2, 8007f0a <_realloc_r+0x20>
 8007f00:	f7ff fbe6 	bl	80076d0 <_free_r>
 8007f04:	4625      	mov	r5, r4
 8007f06:	4628      	mov	r0, r5
 8007f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f0a:	f000 f834 	bl	8007f76 <_malloc_usable_size_r>
 8007f0e:	42a0      	cmp	r0, r4
 8007f10:	d20f      	bcs.n	8007f32 <_realloc_r+0x48>
 8007f12:	4621      	mov	r1, r4
 8007f14:	4638      	mov	r0, r7
 8007f16:	f7ff fc27 	bl	8007768 <_malloc_r>
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d0f2      	beq.n	8007f06 <_realloc_r+0x1c>
 8007f20:	4631      	mov	r1, r6
 8007f22:	4622      	mov	r2, r4
 8007f24:	f7ff f8de 	bl	80070e4 <memcpy>
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f7ff fbd0 	bl	80076d0 <_free_r>
 8007f30:	e7e9      	b.n	8007f06 <_realloc_r+0x1c>
 8007f32:	4635      	mov	r5, r6
 8007f34:	e7e7      	b.n	8007f06 <_realloc_r+0x1c>
	...

08007f38 <_read_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	4611      	mov	r1, r2
 8007f40:	2200      	movs	r2, #0
 8007f42:	4c05      	ldr	r4, [pc, #20]	; (8007f58 <_read_r+0x20>)
 8007f44:	6022      	str	r2, [r4, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f7f9 fb66 	bl	8001618 <_read>
 8007f4c:	1c43      	adds	r3, r0, #1
 8007f4e:	d102      	bne.n	8007f56 <_read_r+0x1e>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	b103      	cbz	r3, 8007f56 <_read_r+0x1e>
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	20000e80 	.word	0x20000e80

08007f5c <__ascii_wctomb>:
 8007f5c:	b149      	cbz	r1, 8007f72 <__ascii_wctomb+0x16>
 8007f5e:	2aff      	cmp	r2, #255	; 0xff
 8007f60:	bf8b      	itete	hi
 8007f62:	238a      	movhi	r3, #138	; 0x8a
 8007f64:	700a      	strbls	r2, [r1, #0]
 8007f66:	6003      	strhi	r3, [r0, #0]
 8007f68:	2001      	movls	r0, #1
 8007f6a:	bf88      	it	hi
 8007f6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f70:	4770      	bx	lr
 8007f72:	4608      	mov	r0, r1
 8007f74:	4770      	bx	lr

08007f76 <_malloc_usable_size_r>:
 8007f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f7a:	1f18      	subs	r0, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	bfbc      	itt	lt
 8007f80:	580b      	ldrlt	r3, [r1, r0]
 8007f82:	18c0      	addlt	r0, r0, r3
 8007f84:	4770      	bx	lr
	...

08007f88 <_init>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	bf00      	nop
 8007f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8e:	bc08      	pop	{r3}
 8007f90:	469e      	mov	lr, r3
 8007f92:	4770      	bx	lr

08007f94 <_fini>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	bf00      	nop
 8007f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9a:	bc08      	pop	{r3}
 8007f9c:	469e      	mov	lr, r3
 8007f9e:	4770      	bx	lr
