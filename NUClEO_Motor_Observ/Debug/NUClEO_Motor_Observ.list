
NUClEO_Motor_Observ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eb8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c20  08007fc8  08007fc8  00017fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008be8  08008be8  00020c1c  2**0
                  CONTENTS
  4 .ARM          00000000  08008be8  08008be8  00020c1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008be8  08008be8  00020c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c1c  20000000  08008bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000c1c  0800980c  00020c1c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e84  0800980c  00020e84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020c1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ddc  00000000  00000000  00020c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002aa3  00000000  00000000  00032a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f50  00000000  00000000  00036560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ab9  00000000  00000000  000374b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db7c  00000000  00000000  0004df69  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075852  00000000  00000000  0005bae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005514  00000000  00000000  000d13b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000c1c 	.word	0x20000c1c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007fb0 	.word	0x08007fb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000c20 	.word	0x20000c20
 800014c:	08007fb0 	.word	0x08007fb0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a2c      	ldr	r2, [pc, #176]	; (80010fc <MX_GPIO_Init+0xcc>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <MX_GPIO_Init+0xcc>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a26      	ldr	r2, [pc, #152]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <MX_GPIO_Init+0xcc>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a20      	ldr	r2, [pc, #128]	; (80010fc <MX_GPIO_Init+0xcc>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_GPIO_Init+0xcc>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <MX_GPIO_Init+0xcc>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_GPIO_Init+0xcc>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2120      	movs	r1, #32
 80010a8:	4815      	ldr	r0, [pc, #84]	; (8001100 <MX_GPIO_Init+0xd0>)
 80010aa:	f001 fef3 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_GPIO_Init+0xd4>)
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4619      	mov	r1, r3
 80010c2:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_GPIO_Init+0xd8>)
 80010c4:	f001 fd8c 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c8:	2320      	movs	r3, #32
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <MX_GPIO_Init+0xd0>)
 80010e0:	f001 fd7e 	bl	8002be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2028      	movs	r0, #40	; 0x28
 80010ea:	f001 fccc 	bl	8002a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ee:	2028      	movs	r0, #40	; 0x28
 80010f0:	f001 fce5 	bl	8002abe <HAL_NVIC_EnableIRQ>

}
 80010f4:	bf00      	nop
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010800 	.word	0x40010800
 8001104:	10110000 	.word	0x10110000
 8001108:	40011000 	.word	0x40011000

0800110c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_I2C2_Init+0x50>)
 8001112:	4a13      	ldr	r2, [pc, #76]	; (8001160 <MX_I2C2_Init+0x54>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_I2C2_Init+0x50>)
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_I2C2_Init+0x58>)
 800111a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_I2C2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_I2C2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_I2C2_Init+0x50>)
 800112a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800112e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_I2C2_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_I2C2_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_I2C2_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_I2C2_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_I2C2_Init+0x50>)
 800114a:	f001 fedd 	bl	8002f08 <HAL_I2C_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001154:	f000 f9d6 	bl	8001504 <Error_Handler>
  }

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000d1c 	.word	0x20000d1c
 8001160:	40005800 	.word	0x40005800
 8001164:	000186a0 	.word	0x000186a0

08001168 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a16      	ldr	r2, [pc, #88]	; (80011dc <HAL_I2C_MspInit+0x74>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d124      	bne.n	80011d2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a6:	2312      	movs	r3, #18
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <HAL_I2C_MspInit+0x7c>)
 80011b6:	f001 fd13 	bl	8002be0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 80011c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c4:	61d3      	str	r3, [r2, #28]
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_I2C_MspInit+0x78>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	3720      	adds	r7, #32
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40005800 	.word	0x40005800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010c00 	.word	0x40010c00

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ec:	f001 faf0 	bl	80027d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f0:	f000 f813 	bl	800121a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f4:	f7ff ff1c 	bl	8001030 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011f8:	f000 fbb4 	bl	8001964 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80011fc:	f7ff ff86 	bl	800110c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001200:	f000 fb86 	bl	8001910 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001204:	f000 fad0 	bl	80017a8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001208:	f000 fbd6 	bl	80019b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  System_Init();
 800120c:	f000 f846 	bl	800129c <System_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 OledDisplay();
 8001210:	f000 f89c 	bl	800134c <OledDisplay>
	 Tcp_DataAccept();
 8001214:	f001 fa86 	bl	8002724 <Tcp_DataAccept>
	 OledDisplay();
 8001218:	e7fa      	b.n	8001210 <main+0x28>

0800121a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b090      	sub	sp, #64	; 0x40
 800121e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	2228      	movs	r2, #40	; 0x28
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f004 f975 	bl	8005518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	2301      	movs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001244:	2310      	movs	r3, #16
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001248:	2302      	movs	r3, #2
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800124c:	2300      	movs	r3, #0
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001250:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fa86 	bl	800376c <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001266:	f000 f94d 	bl	8001504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	230f      	movs	r3, #15
 800126c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	2302      	movs	r3, #2
 8001270:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2102      	movs	r1, #2
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fcf1 	bl	8003c6c <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001290:	f000 f938 	bl	8001504 <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3740      	adds	r7, #64	; 0x40
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <System_Init>:

/* USER CODE BEGIN 4 */
void System_Init(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af02      	add	r7, sp, #8

	/*Oled init*/
	OLED_Init();
 80012a2:	f001 f85d 	bl	8002360 <OLED_Init>
	OLED_DrawBMP(0, 0, 128, 8, BMP2);
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <System_Init+0x98>)
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2308      	movs	r3, #8
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	2100      	movs	r1, #0
 80012b0:	2000      	movs	r0, #0
 80012b2:	f001 f80d 	bl	80022d0 <OLED_DrawBMP>
	OLED_ShowCHinese(10, 2, 21);
 80012b6:	2215      	movs	r2, #21
 80012b8:	2102      	movs	r1, #2
 80012ba:	200a      	movs	r0, #10
 80012bc:	f000 ffb8 	bl	8002230 <OLED_ShowCHinese>
	OLED_ShowCHinese(30, 2, 22);
 80012c0:	2216      	movs	r2, #22
 80012c2:	2102      	movs	r1, #2
 80012c4:	201e      	movs	r0, #30
 80012c6:	f000 ffb3 	bl	8002230 <OLED_ShowCHinese>
	OLED_ShowChar(50, 2, ':', 16);
 80012ca:	2310      	movs	r3, #16
 80012cc:	223a      	movs	r2, #58	; 0x3a
 80012ce:	2102      	movs	r1, #2
 80012d0:	2032      	movs	r0, #50	; 0x32
 80012d2:	f000 fe51 	bl	8001f78 <OLED_ShowChar>
	OLED_ShowCHinese(10, 4, 23);
 80012d6:	2217      	movs	r2, #23
 80012d8:	2104      	movs	r1, #4
 80012da:	200a      	movs	r0, #10
 80012dc:	f000 ffa8 	bl	8002230 <OLED_ShowCHinese>
	OLED_ShowCHinese(30, 4, 24);
 80012e0:	2218      	movs	r2, #24
 80012e2:	2104      	movs	r1, #4
 80012e4:	201e      	movs	r0, #30
 80012e6:	f000 ffa3 	bl	8002230 <OLED_ShowCHinese>
	OLED_ShowChar(50, 4, ':', 16);
 80012ea:	2310      	movs	r3, #16
 80012ec:	223a      	movs	r2, #58	; 0x3a
 80012ee:	2104      	movs	r1, #4
 80012f0:	2032      	movs	r0, #50	; 0x32
 80012f2:	f000 fe41 	bl	8001f78 <OLED_ShowChar>

	/*Wifi init*/
	Server_Init();
 80012f6:	f001 f8a9 	bl	800244c <Server_Init>
	HAL_Delay(500);
 80012fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012fe:	f001 fac9 	bl	8002894 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 8001302:	2201      	movs	r2, #1
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <System_Init+0x9c>)
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <System_Init+0xa0>)
 8001308:	f003 fd35 	bl	8004d76 <HAL_UART_Receive_IT>

	/*input cap Init*/
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800130c:	2100      	movs	r1, #0
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <System_Init+0xa4>)
 8001310:	f002 fea8 	bl	8004064 <HAL_TIM_IC_Start_IT>
	__HAL_TIM_ENABLE_IT(&htim2,TIM_IT_UPDATE);
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <System_Init+0xa4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <System_Init+0xa4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	60da      	str	r2, [r3, #12]


	/*distance init*/
	HAL_UART_Receive_IT(&huart3,&Uart3_Rx_Char,1);
 8001324:	2201      	movs	r2, #1
 8001326:	4907      	ldr	r1, [pc, #28]	; (8001344 <System_Init+0xa8>)
 8001328:	4807      	ldr	r0, [pc, #28]	; (8001348 <System_Init+0xac>)
 800132a:	f003 fd24 	bl	8004d76 <HAL_UART_Receive_IT>
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000e76 	.word	0x20000e76
 800133c:	20000df0 	.word	0x20000df0
 8001340:	20000d70 	.word	0x20000d70
 8001344:	20000e77 	.word	0x20000e77
 8001348:	20000db0 	.word	0x20000db0

0800134c <OledDisplay>:

void OledDisplay(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	OLED_ShowFlort(60, 2, (float)2000 / 30 / Cycle, 16);
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <OledDisplay+0x4c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fc4d 	bl	8000bf4 <__aeabi_ui2f>
 800135a:	4603      	mov	r3, r0
 800135c:	4619      	mov	r1, r3
 800135e:	480f      	ldr	r0, [pc, #60]	; (800139c <OledDisplay+0x50>)
 8001360:	f7ff fd54 	bl	8000e0c <__aeabi_fdiv>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	2310      	movs	r3, #16
 800136a:	2102      	movs	r1, #2
 800136c:	203c      	movs	r0, #60	; 0x3c
 800136e:	f000 fe81 	bl	8002074 <OLED_ShowFlort>
	OLED_ShowFlort(60, 4, (float)(Distance) / 10, 16);
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <OledDisplay+0x54>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fc3c 	bl	8000bf4 <__aeabi_ui2f>
 800137c:	4603      	mov	r3, r0
 800137e:	4909      	ldr	r1, [pc, #36]	; (80013a4 <OledDisplay+0x58>)
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fd43 	bl	8000e0c <__aeabi_fdiv>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	2310      	movs	r3, #16
 800138c:	2104      	movs	r1, #4
 800138e:	203c      	movs	r0, #60	; 0x3c
 8001390:	f000 fe70 	bl	8002074 <OLED_ShowFlort>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000c40 	.word	0x20000c40
 800139c:	42855555 	.word	0x42855555
 80013a0:	20000e74 	.word	0x20000e74
 80013a4:	41200000 	.word	0x41200000

080013a8 <Tcp_DataDeal>:

void Tcp_DataDeal(void) {
 80013a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013aa:	b091      	sub	sp, #68	; 0x44
 80013ac:	af02      	add	r7, sp, #8

	char Str[50] = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2232      	movs	r2, #50	; 0x32
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 f8af 	bl	8005518 <memset>
	if(Strcmp(Wifi_Command_Buffer, (uint8_t *)"Cycle\r")) {
 80013ba:	4945      	ldr	r1, [pc, #276]	; (80014d0 <Tcp_DataDeal+0x128>)
 80013bc:	4845      	ldr	r0, [pc, #276]	; (80014d4 <Tcp_DataDeal+0x12c>)
 80013be:	f001 f8e7 	bl	8002590 <Strcmp>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00c      	beq.n	80013e2 <Tcp_DataDeal+0x3a>
		sprintf(Str, "Cycle:%d", (int)Cycle);
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <Tcp_DataDeal+0x130>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4942      	ldr	r1, [pc, #264]	; (80014dc <Tcp_DataDeal+0x134>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 fd74 	bl	8005ec0 <siprintf>
		Server_SentTo_Client((uint8_t *)Str);
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 f87c 	bl	80024d8 <Server_SentTo_Client>
	} else {
		sprintf(Str, "Speed: %f r/s\r\nDistance: %f cm", (float)2000 / 30 / Cycle, (float)(Distance - 40) / 10);
		Server_SentTo_Client((uint8_t *)Str);
	}

}
 80013e0:	e071      	b.n	80014c6 <Tcp_DataDeal+0x11e>
	} else if(Strcmp(Wifi_Command_Buffer, (uint8_t *)"Distance\r")) {
 80013e2:	493f      	ldr	r1, [pc, #252]	; (80014e0 <Tcp_DataDeal+0x138>)
 80013e4:	483b      	ldr	r0, [pc, #236]	; (80014d4 <Tcp_DataDeal+0x12c>)
 80013e6:	f001 f8d3 	bl	8002590 <Strcmp>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01b      	beq.n	8001428 <Tcp_DataDeal+0x80>
		sprintf(Str, "Distance: %f cm", (float)(Distance - 40) / 10);
 80013f0:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <Tcp_DataDeal+0x13c>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	3b28      	subs	r3, #40	; 0x28
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fc00 	bl	8000bfc <__aeabi_i2f>
 80013fc:	4603      	mov	r3, r0
 80013fe:	493a      	ldr	r1, [pc, #232]	; (80014e8 <Tcp_DataDeal+0x140>)
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fd03 	bl	8000e0c <__aeabi_fdiv>
 8001406:	4603      	mov	r3, r0
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f80d 	bl	8000428 <__aeabi_f2d>
 800140e:	4603      	mov	r3, r0
 8001410:	460c      	mov	r4, r1
 8001412:	1d38      	adds	r0, r7, #4
 8001414:	461a      	mov	r2, r3
 8001416:	4623      	mov	r3, r4
 8001418:	4934      	ldr	r1, [pc, #208]	; (80014ec <Tcp_DataDeal+0x144>)
 800141a:	f004 fd51 	bl	8005ec0 <siprintf>
		Server_SentTo_Client((uint8_t *)Str);
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4618      	mov	r0, r3
 8001422:	f001 f859 	bl	80024d8 <Server_SentTo_Client>
}
 8001426:	e04e      	b.n	80014c6 <Tcp_DataDeal+0x11e>
	} else if(Strcmp(Wifi_Command_Buffer, (uint8_t *)"Speed\r")) {
 8001428:	4931      	ldr	r1, [pc, #196]	; (80014f0 <Tcp_DataDeal+0x148>)
 800142a:	482a      	ldr	r0, [pc, #168]	; (80014d4 <Tcp_DataDeal+0x12c>)
 800142c:	f001 f8b0 	bl	8002590 <Strcmp>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01a      	beq.n	800146c <Tcp_DataDeal+0xc4>
		sprintf(Str, "Speed: %f r/s", (float)2000 / Cycle);
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <Tcp_DataDeal+0x130>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fbda 	bl	8000bf4 <__aeabi_ui2f>
 8001440:	4603      	mov	r3, r0
 8001442:	4619      	mov	r1, r3
 8001444:	482b      	ldr	r0, [pc, #172]	; (80014f4 <Tcp_DataDeal+0x14c>)
 8001446:	f7ff fce1 	bl	8000e0c <__aeabi_fdiv>
 800144a:	4603      	mov	r3, r0
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe ffeb 	bl	8000428 <__aeabi_f2d>
 8001452:	4603      	mov	r3, r0
 8001454:	460c      	mov	r4, r1
 8001456:	1d38      	adds	r0, r7, #4
 8001458:	461a      	mov	r2, r3
 800145a:	4623      	mov	r3, r4
 800145c:	4926      	ldr	r1, [pc, #152]	; (80014f8 <Tcp_DataDeal+0x150>)
 800145e:	f004 fd2f 	bl	8005ec0 <siprintf>
		Server_SentTo_Client((uint8_t *)Str);
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4618      	mov	r0, r3
 8001466:	f001 f837 	bl	80024d8 <Server_SentTo_Client>
}
 800146a:	e02c      	b.n	80014c6 <Tcp_DataDeal+0x11e>
		sprintf(Str, "Speed: %f r/s\r\nDistance: %f cm", (float)2000 / 30 / Cycle, (float)(Distance - 40) / 10);
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <Tcp_DataDeal+0x130>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fbbf 	bl	8000bf4 <__aeabi_ui2f>
 8001476:	4603      	mov	r3, r0
 8001478:	4619      	mov	r1, r3
 800147a:	4820      	ldr	r0, [pc, #128]	; (80014fc <Tcp_DataDeal+0x154>)
 800147c:	f7ff fcc6 	bl	8000e0c <__aeabi_fdiv>
 8001480:	4603      	mov	r3, r0
 8001482:	4618      	mov	r0, r3
 8001484:	f7fe ffd0 	bl	8000428 <__aeabi_f2d>
 8001488:	4605      	mov	r5, r0
 800148a:	460e      	mov	r6, r1
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <Tcp_DataDeal+0x13c>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	3b28      	subs	r3, #40	; 0x28
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fbb2 	bl	8000bfc <__aeabi_i2f>
 8001498:	4603      	mov	r3, r0
 800149a:	4913      	ldr	r1, [pc, #76]	; (80014e8 <Tcp_DataDeal+0x140>)
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fcb5 	bl	8000e0c <__aeabi_fdiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe ffbf 	bl	8000428 <__aeabi_f2d>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	1d38      	adds	r0, r7, #4
 80014b0:	e9cd 3400 	strd	r3, r4, [sp]
 80014b4:	462a      	mov	r2, r5
 80014b6:	4633      	mov	r3, r6
 80014b8:	4911      	ldr	r1, [pc, #68]	; (8001500 <Tcp_DataDeal+0x158>)
 80014ba:	f004 fd01 	bl	8005ec0 <siprintf>
		Server_SentTo_Client((uint8_t *)Str);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 f809 	bl	80024d8 <Server_SentTo_Client>
}
 80014c6:	bf00      	nop
 80014c8:	373c      	adds	r7, #60	; 0x3c
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08007fc8 	.word	0x08007fc8
 80014d4:	20000cac 	.word	0x20000cac
 80014d8:	20000c40 	.word	0x20000c40
 80014dc:	08007fd0 	.word	0x08007fd0
 80014e0:	08007fdc 	.word	0x08007fdc
 80014e4:	20000e74 	.word	0x20000e74
 80014e8:	41200000 	.word	0x41200000
 80014ec:	08007fe8 	.word	0x08007fe8
 80014f0:	08007ff8 	.word	0x08007ff8
 80014f4:	44fa0000 	.word	0x44fa0000
 80014f8:	08008000 	.word	0x08008000
 80014fc:	42855555 	.word	0x42855555
 8001500:	08008010 	.word	0x08008010

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_MspInit+0x5c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_MspInit+0x5c>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_MspInit+0x5c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_MspInit+0x5c>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_MspInit+0x60>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_MspInit+0x60>)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <HardFault_Handler+0x4>

08001586 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <MemManage_Handler+0x4>

0800158c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <BusFault_Handler+0x4>

08001592 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <UsageFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f001 f94c 	bl	800285c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <TIM2_IRQHandler+0x10>)
 80015ce:	f002 fdb1 	bl	8004134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000d70 	.word	0x20000d70

080015dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART1_IRQHandler+0x10>)
 80015e2:	f003 fc1d 	bl	8004e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000df0 	.word	0x20000df0

080015f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <USART3_IRQHandler+0x10>)
 80015f6:	f003 fc13 	bl	8004e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000db0 	.word	0x20000db0

08001604 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001608:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800160c:	f001 fc5a 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e00a      	b.n	800163c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001626:	f3af 8000 	nop.w
 800162a:	4601      	mov	r1, r0
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	b2ca      	uxtb	r2, r1
 8001634:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbf0      	blt.n	8001626 <_read+0x12>
	}

return len;
 8001644:	687b      	ldr	r3, [r7, #4]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e009      	b.n	8001674 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	60ba      	str	r2, [r7, #8]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 faa7 	bl	8001bbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf1      	blt.n	8001660 <_write+0x12>
	}
	return len;
 800167c:	687b      	ldr	r3, [r7, #4]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_close>:

int _close(int file)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
	return -1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ac:	605a      	str	r2, [r3, #4]
	return 0;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
	return 0;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
	...

080016e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <_sbrk+0x50>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <_sbrk+0x16>
		heap_end = &end;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <_sbrk+0x50>)
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <_sbrk+0x54>)
 80016fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <_sbrk+0x50>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <_sbrk+0x50>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	466a      	mov	r2, sp
 800170e:	4293      	cmp	r3, r2
 8001710:	d907      	bls.n	8001722 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001712:	f003 fed7 	bl	80054c4 <__errno>
 8001716:	4602      	mov	r2, r0
 8001718:	230c      	movs	r3, #12
 800171a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	e006      	b.n	8001730 <_sbrk+0x48>
	}

	heap_end += incr;
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <_sbrk+0x50>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	4a03      	ldr	r2, [pc, #12]	; (8001738 <_sbrk+0x50>)
 800172c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000c38 	.word	0x20000c38
 800173c:	20000e88 	.word	0x20000e88

08001740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <SystemInit+0x5c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <SystemInit+0x5c>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <SystemInit+0x5c>)
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4911      	ldr	r1, [pc, #68]	; (800179c <SystemInit+0x5c>)
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <SystemInit+0x60>)
 8001758:	4013      	ands	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <SystemInit+0x5c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0e      	ldr	r2, [pc, #56]	; (800179c <SystemInit+0x5c>)
 8001762:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <SystemInit+0x5c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	; (800179c <SystemInit+0x5c>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <SystemInit+0x5c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <SystemInit+0x5c>)
 800177e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001782:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <SystemInit+0x5c>)
 8001786:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800178a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SystemInit+0x64>)
 800178e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001792:	609a      	str	r2, [r3, #8]
#endif 
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	f8ff0000 	.word	0xf8ff0000
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0318 	add.w	r3, r7, #24
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017c6:	463b      	mov	r3, r7
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <MX_TIM2_Init+0xdc>)
 80017d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <MX_TIM2_Init+0xdc>)
 80017dc:	223f      	movs	r2, #63	; 0x3f
 80017de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <MX_TIM2_Init+0xdc>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <MX_TIM2_Init+0xdc>)
 80017e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <MX_TIM2_Init+0xdc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_TIM2_Init+0xdc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017fa:	4822      	ldr	r0, [pc, #136]	; (8001884 <MX_TIM2_Init+0xdc>)
 80017fc:	f002 fbd2 	bl	8003fa4 <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001806:	f7ff fe7d 	bl	8001504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	4619      	mov	r1, r3
 8001816:	481b      	ldr	r0, [pc, #108]	; (8001884 <MX_TIM2_Init+0xdc>)
 8001818:	f002 fe30 	bl	800447c <HAL_TIM_ConfigClockSource>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001822:	f7ff fe6f 	bl	8001504 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001826:	4817      	ldr	r0, [pc, #92]	; (8001884 <MX_TIM2_Init+0xdc>)
 8001828:	f002 fbe7 	bl	8003ffa <HAL_TIM_IC_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001832:	f7ff fe67 	bl	8001504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001836:	2320      	movs	r3, #32
 8001838:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	4619      	mov	r1, r3
 8001844:	480f      	ldr	r0, [pc, #60]	; (8001884 <MX_TIM2_Init+0xdc>)
 8001846:	f003 f95a 	bl	8004afe <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001850:	f7ff fe58 	bl	8001504 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001854:	2300      	movs	r3, #0
 8001856:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001858:	2301      	movs	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 3;
 8001860:	2303      	movs	r3, #3
 8001862:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	2200      	movs	r2, #0
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <MX_TIM2_Init+0xdc>)
 800186c:	f002 fd6a 	bl	8004344 <HAL_TIM_IC_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001876:	f7ff fe45 	bl	8001504 <Error_Handler>
  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000d70 	.word	0x20000d70

08001888 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a6:	d12b      	bne.n	8001900 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <HAL_TIM_Base_MspInit+0x80>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <HAL_TIM_Base_MspInit+0x80>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	61d3      	str	r3, [r2, #28]
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_TIM_Base_MspInit+0x80>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_TIM_Base_MspInit+0x80>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_TIM_Base_MspInit+0x80>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_TIM_Base_MspInit+0x80>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d8:	2301      	movs	r3, #1
 80018da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	4619      	mov	r1, r3
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <HAL_TIM_Base_MspInit+0x84>)
 80018ec:	f001 f978 	bl	8002be0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2100      	movs	r1, #0
 80018f4:	201c      	movs	r0, #28
 80018f6:	f001 f8c6 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018fa:	201c      	movs	r0, #28
 80018fc:	f001 f8df 	bl	8002abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001900:	bf00      	nop
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	40010800 	.word	0x40010800

08001910 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <MX_USART1_UART_Init+0x50>)
 8001918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800191c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001948:	f003 f92f 	bl	8004baa <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001952:	f7ff fdd7 	bl	8001504 <Error_Handler>
  }

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000df0 	.word	0x20000df0
 8001960:	40013800 	.word	0x40013800

08001964 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART2_UART_Init+0x4c>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <MX_USART2_UART_Init+0x50>)
 800196c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_USART2_UART_Init+0x4c>)
 8001970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART2_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART2_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART2_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART2_UART_Init+0x4c>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART2_UART_Init+0x4c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART2_UART_Init+0x4c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART2_UART_Init+0x4c>)
 800199c:	f003 f905 	bl	8004baa <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019a6:	f7ff fdad 	bl	8001504 <Error_Handler>
  }

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000e30 	.word	0x20000e30
 80019b4:	40004400 	.word	0x40004400

080019b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <MX_USART3_UART_Init+0x50>)
 80019c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019de:	220c      	movs	r2, #12
 80019e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_USART3_UART_Init+0x4c>)
 80019f0:	f003 f8db 	bl	8004baa <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019fa:	f7ff fd83 	bl	8001504 <Error_Handler>
  }

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000db0 	.word	0x20000db0
 8001a08:	40004800 	.word	0x40004800

08001a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5e      	ldr	r2, [pc, #376]	; (8001ba0 <HAL_UART_MspInit+0x194>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d13a      	bne.n	8001aa2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a5c      	ldr	r2, [pc, #368]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b5a      	ldr	r3, [pc, #360]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a56      	ldr	r2, [pc, #344]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b54      	ldr	r3, [pc, #336]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	4619      	mov	r1, r3
 8001a70:	484d      	ldr	r0, [pc, #308]	; (8001ba8 <HAL_UART_MspInit+0x19c>)
 8001a72:	f001 f8b5 	bl	8002be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4847      	ldr	r0, [pc, #284]	; (8001ba8 <HAL_UART_MspInit+0x19c>)
 8001a8c:	f001 f8a8 	bl	8002be0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2025      	movs	r0, #37	; 0x25
 8001a96:	f000 fff6 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a9a:	2025      	movs	r0, #37	; 0x25
 8001a9c:	f001 f80f 	bl	8002abe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001aa0:	e07a      	b.n	8001b98 <HAL_UART_MspInit+0x18c>
  else if(uartHandle->Instance==USART2)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a41      	ldr	r2, [pc, #260]	; (8001bac <HAL_UART_MspInit+0x1a0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d124      	bne.n	8001af6 <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aac:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	4a3c      	ldr	r2, [pc, #240]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab6:	61d3      	str	r3, [r2, #28]
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a36      	ldr	r2, [pc, #216]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001adc:	230c      	movs	r3, #12
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aec:	4619      	mov	r1, r3
 8001aee:	482e      	ldr	r0, [pc, #184]	; (8001ba8 <HAL_UART_MspInit+0x19c>)
 8001af0:	f001 f876 	bl	8002be0 <HAL_GPIO_Init>
}
 8001af4:	e050      	b.n	8001b98 <HAL_UART_MspInit+0x18c>
  else if(uartHandle->Instance==USART3)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2d      	ldr	r2, [pc, #180]	; (8001bb0 <HAL_UART_MspInit+0x1a4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d14b      	bne.n	8001b98 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0a:	61d3      	str	r3, [r2, #28]
 8001b0c:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HAL_UART_MspInit+0x198>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	4619      	mov	r1, r3
 8001b44:	481b      	ldr	r0, [pc, #108]	; (8001bb4 <HAL_UART_MspInit+0x1a8>)
 8001b46:	f001 f84b 	bl	8002be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4815      	ldr	r0, [pc, #84]	; (8001bb4 <HAL_UART_MspInit+0x1a8>)
 8001b60:	f001 f83e 	bl	8002be0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_UART_MspInit+0x1ac>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34
 8001b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
 8001b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b74:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7c:	f043 0310 	orr.w	r3, r3, #16
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
 8001b82:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <HAL_UART_MspInit+0x1ac>)
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2027      	movs	r0, #39	; 0x27
 8001b8e:	f000 ff7a 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b92:	2027      	movs	r0, #39	; 0x27
 8001b94:	f000 ff93 	bl	8002abe <HAL_NVIC_EnableIRQ>
}
 8001b98:	bf00      	nop
 8001b9a:	3738      	adds	r7, #56	; 0x38
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40004400 	.word	0x40004400
 8001bb0:	40004800 	.word	0x40004800
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	40010000 	.word	0x40010000

08001bbc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001bc4:	1d39      	adds	r1, r7, #4
 8001bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <__io_putchar+0x20>)
 8001bce:	f003 f839 	bl	8004c44 <HAL_UART_Transmit>
  return ch;
 8001bd2:	687b      	ldr	r3, [r7, #4]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000df0 	.word	0x20000df0

08001be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001be0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001be2:	e003      	b.n	8001bec <LoopCopyDataInit>

08001be4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001be6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001be8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bea:	3104      	adds	r1, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bec:	480a      	ldr	r0, [pc, #40]	; (8001c18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bf0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bf2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bf4:	d3f6      	bcc.n	8001be4 <CopyDataInit>
  ldr r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bf8:	e002      	b.n	8001c00 <LoopFillZerobss>

08001bfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bfc:	f842 3b04 	str.w	r3, [r2], #4

08001c00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c04:	d3f9      	bcc.n	8001bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c06:	f7ff fd9b 	bl	8001740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f003 fc61 	bl	80054d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c0e:	f7ff faeb 	bl	80011e8 <main>
  bx lr
 8001c12:	4770      	bx	lr
  ldr r3, =_sidata
 8001c14:	08008bf0 	.word	0x08008bf0
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c1c:	20000c1c 	.word	0x20000c1c
  ldr r2, =_sbss
 8001c20:	20000c1c 	.word	0x20000c1c
  ldr r3, = _ebss
 8001c24:	20000e84 	.word	0x20000e84

08001c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC1_2_IRQHandler>
	...

08001c2c <HAL_TIM_PeriodElapsedCallback>:

uint32_t Cycle = 0, Width = 0;

// 中断服务函数里面会自动调用这个回调函数  这个是定时器更新中断中处理的函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)	// 判断是定时器5发生中断
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3c:	d141      	bne.n	8001cc2 <HAL_TIM_PeriodElapsedCallback+0x96>
  {
    if ((TIM5CH1_CAPTURE_STA & 0x80) == 0) // 还未成功捕获
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db3c      	blt.n	8001cc2 <HAL_TIM_PeriodElapsedCallback+0x96>
    {
     // if (TIM5CH1_CAPTURE_STA & 0x40)		   // 捕获到高电平
      //{
        if ( (TIM5CH1_CAPTURE_STA & 0x3f) == 0x3f )		// 如果高电平太长  做溢出处理
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c50:	2b3f      	cmp	r3, #63	; 0x3f
 8001c52:	d130      	bne.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0x8a>
        {
        	Cycle = 0x3f;
 8001c54:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c56:	223f      	movs	r2, #63	; 0x3f
 8001c58:	601a      	str	r2, [r3, #0]
        	Cycle *= 0xffff;				// Total Overflow Time(总的溢出时间)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c66:	6013      	str	r3, [r2, #0]
        	TIM5CH1_CAPTURE_STA = 0;
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
        	DownEdgeFlag = 0;
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
        	__HAL_TIM_DISABLE(&htim2);
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6a1a      	ldr	r2, [r3, #32]
 8001c7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10f      	bne.n	8001ca4 <HAL_TIM_PeriodElapsedCallback+0x78>
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6a1a      	ldr	r2, [r3, #32]
 8001c8a:	f240 4344 	movw	r3, #1092	; 0x444
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_TIM_PeriodElapsedCallback+0x78>
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
        	__HAL_TIM_ENABLE(&htim2);
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
          TIM5CH1_CAPTURE_STA++;		// 若没有溢出, 就只让TIM5CH1_CAPTURE_STA自加就ok
        }
      //}
    }
  }
}
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_PeriodElapsedCallback+0x96>
          TIM5CH1_CAPTURE_STA++;		// 若没有溢出, 就只让TIM5CH1_CAPTURE_STA自加就ok
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001cc0:	701a      	strb	r2, [r3, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000c3c 	.word	0x20000c3c
 8001cd0:	20000c40 	.word	0x20000c40
 8001cd4:	20000c3d 	.word	0x20000c3d
 8001cd8:	20000d70 	.word	0x20000d70

08001cdc <HAL_TIM_IC_CaptureCallback>:

// 定时器输入捕获中断处理回调函数，该函数在 HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) 中会被调用


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ( (TIM5CH1_CAPTURE_STA & 0x80) == 0 )	// 还未成功捕获
 8001ce4:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b25b      	sxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f2c0 80a6 	blt.w	8001e3c <HAL_TIM_IC_CaptureCallback+0x160>
  {
    if (TIM5CH1_CAPTURE_STA & 0x40)			// 捕获到一个下降沿
 8001cf0:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d034      	beq.n	8001d66 <HAL_TIM_IC_CaptureCallback+0x8a>
    {
      //TIM5CH1_CAPTURE_STA |= 0x80;		// 标记成功捕获到一次高电平脉宽
      TIM5CH1_CAPTURE_VAL = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);	// 获取当前的捕获值. 即CCRx2
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4852      	ldr	r0, [pc, #328]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d00:	f002 fc74 	bl	80045ec <HAL_TIM_ReadCapturedValue>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b51      	ldr	r3, [pc, #324]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001d08:	601a      	str	r2, [r3, #0]

     // if (TIM5CH1_CAPTURE_STA & 0x80)   // 如果捕获完成
      	   // {
      Width = TIM5CH1_CAPTURE_STA & 0x3f;
 8001d0a:	4b4e      	ldr	r3, [pc, #312]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d12:	4a4f      	ldr	r2, [pc, #316]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001d14:	6013      	str	r3, [r2, #0]
      Width *= 0xffff;				// Total Overflow Time(总的溢出时间)
 8001d16:	4b4e      	ldr	r3, [pc, #312]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	4a4b      	ldr	r2, [pc, #300]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001d22:	6013      	str	r3, [r2, #0]
      Width += TIM5CH1_CAPTURE_VAL + 3;    // Get Total High Level Time(获取总的高电平时长)
 8001d24:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3303      	adds	r3, #3
 8001d30:	4a47      	ldr	r2, [pc, #284]	; (8001e50 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001d32:	6013      	str	r3, [r2, #0]
      	      //  printf("HIGH: %f ms\r\n", (float)temp/1000); // Print Total High Level Time(打印总的高电平时长)
      //TIM5CH1_CAPTURE_STA = 0;			    // Clear Capture State , Open The Next Capture(清除捕获状态，打开下一次捕获)
      	   //}
      TIM5CH1_CAPTURE_STA &= 0xbf;
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001d40:	701a      	strb	r2, [r3, #0]
      DownEdgeFlag = 1;
 8001d42:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]


      TIM_RESET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1);						// 清除原来的设置
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6a1a      	ldr	r2, [r3, #32]
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 020a 	bic.w	r2, r2, #10
 8001d56:	621a      	str	r2, [r3, #32]
      TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);	// 配置TIM5通道1上升沿捕获
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a12      	ldr	r2, [r2, #32]
 8001d62:	621a      	str	r2, [r3, #32]
    	}


    }
  }
}
 8001d64:	e06a      	b.n	8001e3c <HAL_TIM_IC_CaptureCallback+0x160>
    	if(DownEdgeFlag == 1) {
 8001d66:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d125      	bne.n	8001dba <HAL_TIM_IC_CaptureCallback+0xde>
    		TIM5CH1_CAPTURE_VAL = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4835      	ldr	r0, [pc, #212]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001d72:	f002 fc3b 	bl	80045ec <HAL_TIM_ReadCapturedValue>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001d7a:	601a      	str	r2, [r3, #0]
    		Cycle = TIM5CH1_CAPTURE_STA & 0x3f;
 8001d7c:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d84:	4a34      	ldr	r2, [pc, #208]	; (8001e58 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001d86:	6013      	str	r3, [r2, #0]
    		Cycle *= 0xffff;				// Total Overflow Time(总的溢出时间)
 8001d88:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	041b      	lsls	r3, r3, #16
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	4a31      	ldr	r2, [pc, #196]	; (8001e58 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001d94:	6013      	str	r3, [r2, #0]
    		Cycle += TIM5CH1_CAPTURE_VAL + 3;    // Get Total High Level Time(获取总的高电平时长)
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4413      	add	r3, r2
 8001da0:	3303      	adds	r3, #3
 8001da2:	4a2d      	ldr	r2, [pc, #180]	; (8001e58 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001da4:	6013      	str	r3, [r2, #0]
    		TIM5CH1_CAPTURE_STA = 0;
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
    		TIM5CH1_CAPTURE_VAL = 0;
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
    		DownEdgeFlag = 0;
 8001db2:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
}
 8001db8:	e040      	b.n	8001e3c <HAL_TIM_IC_CaptureCallback+0x160>
      TIM5CH1_CAPTURE_STA = 0;	// 清空自定义的状态寄存器
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
      TIM5CH1_CAPTURE_VAL = 0;	// 清空捕获值
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_TIM_IC_CaptureCallback+0x170>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
      TIM5CH1_CAPTURE_STA |= 0x40;// 标记捕获到了上升沿
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001dd2:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_DISABLE(&htim2);	//关闭定时器5
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6a1a      	ldr	r2, [r3, #32]
 8001dda:	f241 1311 	movw	r3, #4369	; 0x1111
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10f      	bne.n	8001e04 <HAL_TIM_IC_CaptureCallback+0x128>
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6a1a      	ldr	r2, [r3, #32]
 8001dea:	f240 4344 	movw	r3, #1092	; 0x444
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_TIM_IC_CaptureCallback+0x128>
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COUNTER(&htim2,0);
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
      TIM_RESET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1);   //一定要先清除原来的设置！！
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6a1a      	ldr	r2, [r3, #32]
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 020a 	bic.w	r2, r2, #10
 8001e1a:	621a      	str	r2, [r3, #32]
      TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_ICPOLARITY_FALLING);//定时器5通道1设置为下降沿捕获
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a1a      	ldr	r2, [r3, #32]
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0202 	orr.w	r2, r2, #2
 8001e2a:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE(&htim2);//使能定时器5
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000c3c 	.word	0x20000c3c
 8001e48:	20000d70 	.word	0x20000d70
 8001e4c:	20000e70 	.word	0x20000e70
 8001e50:	20000c44 	.word	0x20000c44
 8001e54:	20000c3d 	.word	0x20000c3d
 8001e58:	20000c40 	.word	0x20000c40

08001e5c <Write_IIC_Cmddat>:

extern I2C_HandleTypeDef hi2c1;
extern I2C_HandleTypeDef hi2c2;

void Write_IIC_Cmddat(unsigned char IIC_Data,unsigned char cmddat)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af04      	add	r7, sp, #16
 8001e62:	4603      	mov	r3, r0
 8001e64:	460a      	mov	r2, r1
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef i = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
	i = HAL_I2C_Mem_Write(&hi2c2, oledaddress, cmddat, I2C_MEMADD_SIZE_8BIT, &IIC_Data, 1, 100);
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	2364      	movs	r3, #100	; 0x64
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	2301      	movs	r3, #1
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	2178      	movs	r1, #120	; 0x78
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <Write_IIC_Cmddat+0x40>)
 8001e86:	f001 f967 	bl	8003158 <HAL_I2C_Mem_Write>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
	i = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000d1c 	.word	0x20000d1c

08001ea0 <OLED_WR_Byte>:


void OLED_WR_Byte(unsigned char dat,unsigned char cmd)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	71fb      	strb	r3, [r7, #7]
 8001eac:	4613      	mov	r3, r2
 8001eae:	71bb      	strb	r3, [r7, #6]
	if(cmd)
 8001eb0:	79bb      	ldrb	r3, [r7, #6]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <OLED_WR_Byte+0x22>
			{
		Write_IIC_Cmddat (dat, OLED_DAT_ADDRESS );
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2140      	movs	r1, #64	; 0x40
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ffce 	bl	8001e5c <Write_IIC_Cmddat>
	else {
		Write_IIC_Cmddat (dat, OLED_CMD_ADDRESS);
		
	}
	
}
 8001ec0:	e004      	b.n	8001ecc <OLED_WR_Byte+0x2c>
		Write_IIC_Cmddat (dat, OLED_CMD_ADDRESS);
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ffc8 	bl	8001e5c <Write_IIC_Cmddat>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <OLED_Set_Pos>:




	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	460a      	mov	r2, r1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71bb      	strb	r3, [r7, #6]
 8001ee4:	79bb      	ldrb	r3, [r7, #6]
 8001ee6:	3b50      	subs	r3, #80	; 0x50
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ffd7 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0310 	orr.w	r3, r3, #16
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ffcd 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f),OLED_CMD); 
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ffc5 	bl	8001ea0 <OLED_WR_Byte>
}   	  
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)  
{  
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
	unsigned char i,n;
	for(i=0;i<8;i++)  
 8001f24:	2300      	movs	r3, #0
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	e01f      	b.n	8001f6a <OLED_Clear+0x4c>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //����ҳ��ַ��0~7��
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	3b50      	subs	r3, #80	; 0x50
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ffb4 	bl	8001ea0 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //������ʾλ�á��е͵�ַ
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff ffb0 	bl	8001ea0 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //������ʾλ�á��иߵ�ַ   
 8001f40:	2100      	movs	r1, #0
 8001f42:	2010      	movs	r0, #16
 8001f44:	f7ff ffac 	bl	8001ea0 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8001f48:	2300      	movs	r3, #0
 8001f4a:	71bb      	strb	r3, [r7, #6]
 8001f4c:	e006      	b.n	8001f5c <OLED_Clear+0x3e>
 8001f4e:	2101      	movs	r1, #1
 8001f50:	2000      	movs	r0, #0
 8001f52:	f7ff ffa5 	bl	8001ea0 <OLED_WR_Byte>
 8001f56:	79bb      	ldrb	r3, [r7, #6]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	71bb      	strb	r3, [r7, #6]
 8001f5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	daf4      	bge.n	8001f4e <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	3301      	adds	r3, #1
 8001f68:	71fb      	strb	r3, [r7, #7]
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	2b07      	cmp	r3, #7
 8001f6e:	d9dc      	bls.n	8001f2a <OLED_Clear+0xc>
	} //������ʾ
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,������ʾ;1,������ʾ				 
//size:ѡ������ 16/12 
void OLED_ShowChar(unsigned char x,unsigned char y,unsigned char chr,unsigned char Char_Size)
{      	
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4604      	mov	r4, r0
 8001f80:	4608      	mov	r0, r1
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4623      	mov	r3, r4
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71bb      	strb	r3, [r7, #6]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	717b      	strb	r3, [r7, #5]
 8001f92:	4613      	mov	r3, r2
 8001f94:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 8001f96:	2300      	movs	r3, #0
 8001f98:	73bb      	strb	r3, [r7, #14]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//�õ�ƫ�ƺ��ֵ			
 8001f9e:	797b      	ldrb	r3, [r7, #5]
 8001fa0:	3b20      	subs	r3, #32
 8001fa2:	73bb      	strb	r3, [r7, #14]
		if(x>Max_Column-1){x=0;y=y+2;}
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	da04      	bge.n	8001fb6 <OLED_ShowChar+0x3e>
 8001fac:	2300      	movs	r3, #0
 8001fae:	71fb      	strb	r3, [r7, #7]
 8001fb0:	79bb      	ldrb	r3, [r7, #6]
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 8001fb6:	793b      	ldrb	r3, [r7, #4]
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d135      	bne.n	8002028 <OLED_ShowChar+0xb0>
			{
			OLED_Set_Pos(x,y);	
 8001fbc:	79ba      	ldrb	r2, [r7, #6]
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff86 	bl	8001ed4 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e00c      	b.n	8001fe8 <OLED_ShowChar+0x70>
			OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
 8001fce:	7bbb      	ldrb	r3, [r7, #14]
 8001fd0:	011a      	lsls	r2, r3, #4
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a25      	ldr	r2, [pc, #148]	; (800206c <OLED_ShowChar+0xf4>)
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	2101      	movs	r1, #1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff5f 	bl	8001ea0 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	2b07      	cmp	r3, #7
 8001fec:	d9ef      	bls.n	8001fce <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 8001fee:	79bb      	ldrb	r3, [r7, #6]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff6b 	bl	8001ed4 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e00d      	b.n	8002020 <OLED_ShowChar+0xa8>
			OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
 8002004:	7bbb      	ldrb	r3, [r7, #14]
 8002006:	011a      	lsls	r2, r3, #4
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	4413      	add	r3, r2
 800200c:	3308      	adds	r3, #8
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <OLED_ShowChar+0xf4>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	2101      	movs	r1, #1
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff43 	bl	8001ea0 <OLED_WR_Byte>
			for(i=0;i<8;i++)
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	3301      	adds	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b07      	cmp	r3, #7
 8002024:	d9ee      	bls.n	8002004 <OLED_ShowChar+0x8c>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
				
			}
}
 8002026:	e01c      	b.n	8002062 <OLED_ShowChar+0xea>
				OLED_Set_Pos(x,y);
 8002028:	79ba      	ldrb	r2, [r7, #6]
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff50 	bl	8001ed4 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e010      	b.n	800205c <OLED_ShowChar+0xe4>
				OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 800203a:	7bba      	ldrb	r2, [r7, #14]
 800203c:	7bf9      	ldrb	r1, [r7, #15]
 800203e:	480c      	ldr	r0, [pc, #48]	; (8002070 <OLED_ShowChar+0xf8>)
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4403      	add	r3, r0
 800204a:	440b      	add	r3, r1
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2101      	movs	r1, #1
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff25 	bl	8001ea0 <OLED_WR_Byte>
				for(i=0;i<6;i++)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	3301      	adds	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d9eb      	bls.n	800203a <OLED_ShowChar+0xc2>
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	08008334 	.word	0x08008334
 8002070:	0800810c 	.word	0x0800810c

08002074 <OLED_ShowFlort>:




void OLED_ShowFlort(unsigned char x,unsigned char y,float Da,unsigned char Char_Size)
{
 8002074:	b5b0      	push	{r4, r5, r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	603a      	str	r2, [r7, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	460b      	mov	r3, r1
 8002084:	71bb      	strb	r3, [r7, #6]
 8002086:	4613      	mov	r3, r2
 8002088:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
	char chr[10]={0};
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	811a      	strh	r2, [r3, #8]


		if(Da<10)		//防止十位变化成个位小数点前移，导致小数点后两位产生一个不变的不可控制数字
 800209a:	4961      	ldr	r1, [pc, #388]	; (8002220 <OLED_ShowFlort+0x1ac>)
 800209c:	6838      	ldr	r0, [r7, #0]
 800209e:	f7fe ff9f 	bl	8000fe0 <__aeabi_fcmplt>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d036      	beq.n	8002116 <OLED_ShowFlort+0xa2>
	{
		  sprintf(chr, "%0.3f",Da);
 80020a8:	6838      	ldr	r0, [r7, #0]
 80020aa:	f7fe f9bd 	bl	8000428 <__aeabi_f2d>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	f107 000c 	add.w	r0, r7, #12
 80020b6:	461a      	mov	r2, r3
 80020b8:	4623      	mov	r3, r4
 80020ba:	495a      	ldr	r1, [pc, #360]	; (8002224 <OLED_ShowFlort+0x1b0>)
 80020bc:	f003 ff00 	bl	8005ec0 <siprintf>
			OLED_ShowChar(x,y,' ',Char_Size);
 80020c0:	797b      	ldrb	r3, [r7, #5]
 80020c2:	79b9      	ldrb	r1, [r7, #6]
 80020c4:	79f8      	ldrb	r0, [r7, #7]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f7ff ff56 	bl	8001f78 <OLED_ShowChar>
					while (chr[j]!='\0')
 80020cc:	e01a      	b.n	8002104 <OLED_ShowFlort+0x90>
			{
				OLED_ShowChar(x+8,y,chr[j],Char_Size);
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	3308      	adds	r3, #8
 80020d2:	b2d8      	uxtb	r0, r3
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	f107 0218 	add.w	r2, r7, #24
 80020da:	4413      	add	r3, r2
 80020dc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80020e0:	797b      	ldrb	r3, [r7, #5]
 80020e2:	79b9      	ldrb	r1, [r7, #6]
 80020e4:	f7ff ff48 	bl	8001f78 <OLED_ShowChar>
					x+=8;
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	3308      	adds	r3, #8
 80020ec:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b78      	cmp	r3, #120	; 0x78
 80020f2:	d904      	bls.n	80020fe <OLED_ShowFlort+0x8a>
 80020f4:	2300      	movs	r3, #0
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	79bb      	ldrb	r3, [r7, #6]
 80020fa:	3302      	adds	r3, #2
 80020fc:	71bb      	strb	r3, [r7, #6]
					j++;
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
 8002100:	3301      	adds	r3, #1
 8002102:	75fb      	strb	r3, [r7, #23]
					while (chr[j]!='\0')
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	f107 0218 	add.w	r2, r7, #24
 800210a:	4413      	add	r3, r2
 800210c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1dc      	bne.n	80020ce <OLED_ShowFlort+0x5a>
					j++;
			}

	}

}
 8002114:	e080      	b.n	8002218 <OLED_ShowFlort+0x1a4>
		if ((Da>10)&(100>Da))
 8002116:	2301      	movs	r3, #1
 8002118:	461c      	mov	r4, r3
 800211a:	4941      	ldr	r1, [pc, #260]	; (8002220 <OLED_ShowFlort+0x1ac>)
 800211c:	6838      	ldr	r0, [r7, #0]
 800211e:	f7fe ff7d 	bl	800101c <__aeabi_fcmpgt>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <OLED_ShowFlort+0xb8>
 8002128:	2300      	movs	r3, #0
 800212a:	461c      	mov	r4, r3
 800212c:	b2e4      	uxtb	r4, r4
 800212e:	2301      	movs	r3, #1
 8002130:	461d      	mov	r5, r3
 8002132:	493d      	ldr	r1, [pc, #244]	; (8002228 <OLED_ShowFlort+0x1b4>)
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f7fe ff53 	bl	8000fe0 <__aeabi_fcmplt>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <OLED_ShowFlort+0xd0>
 8002140:	2300      	movs	r3, #0
 8002142:	461d      	mov	r5, r3
 8002144:	b2eb      	uxtb	r3, r5
 8002146:	4023      	ands	r3, r4
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d02e      	beq.n	80021ac <OLED_ShowFlort+0x138>
		sprintf(chr, "%0.3f",Da);
 800214e:	6838      	ldr	r0, [r7, #0]
 8002150:	f7fe f96a 	bl	8000428 <__aeabi_f2d>
 8002154:	4603      	mov	r3, r0
 8002156:	460c      	mov	r4, r1
 8002158:	f107 000c 	add.w	r0, r7, #12
 800215c:	461a      	mov	r2, r3
 800215e:	4623      	mov	r3, r4
 8002160:	4930      	ldr	r1, [pc, #192]	; (8002224 <OLED_ShowFlort+0x1b0>)
 8002162:	f003 fead 	bl	8005ec0 <siprintf>
			while (chr[j]!='\0')
 8002166:	e018      	b.n	800219a <OLED_ShowFlort+0x126>
			{		OLED_ShowChar(x,y,chr[j],Char_Size);
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	f107 0218 	add.w	r2, r7, #24
 800216e:	4413      	add	r3, r2
 8002170:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002174:	797b      	ldrb	r3, [r7, #5]
 8002176:	79b9      	ldrb	r1, [r7, #6]
 8002178:	79f8      	ldrb	r0, [r7, #7]
 800217a:	f7ff fefd 	bl	8001f78 <OLED_ShowChar>
					x+=8;
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	3308      	adds	r3, #8
 8002182:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	2b78      	cmp	r3, #120	; 0x78
 8002188:	d904      	bls.n	8002194 <OLED_ShowFlort+0x120>
 800218a:	2300      	movs	r3, #0
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	79bb      	ldrb	r3, [r7, #6]
 8002190:	3302      	adds	r3, #2
 8002192:	71bb      	strb	r3, [r7, #6]
					j++;
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	3301      	adds	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
			while (chr[j]!='\0')
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	f107 0218 	add.w	r2, r7, #24
 80021a0:	4413      	add	r3, r2
 80021a2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1de      	bne.n	8002168 <OLED_ShowFlort+0xf4>
}
 80021aa:	e035      	b.n	8002218 <OLED_ShowFlort+0x1a4>
		if (Da>100)
 80021ac:	491e      	ldr	r1, [pc, #120]	; (8002228 <OLED_ShowFlort+0x1b4>)
 80021ae:	6838      	ldr	r0, [r7, #0]
 80021b0:	f7fe ff34 	bl	800101c <__aeabi_fcmpgt>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d100      	bne.n	80021bc <OLED_ShowFlort+0x148>
}
 80021ba:	e02d      	b.n	8002218 <OLED_ShowFlort+0x1a4>
			sprintf(chr, "%0.2f",Da);
 80021bc:	6838      	ldr	r0, [r7, #0]
 80021be:	f7fe f933 	bl	8000428 <__aeabi_f2d>
 80021c2:	4603      	mov	r3, r0
 80021c4:	460c      	mov	r4, r1
 80021c6:	f107 000c 	add.w	r0, r7, #12
 80021ca:	461a      	mov	r2, r3
 80021cc:	4623      	mov	r3, r4
 80021ce:	4917      	ldr	r1, [pc, #92]	; (800222c <OLED_ShowFlort+0x1b8>)
 80021d0:	f003 fe76 	bl	8005ec0 <siprintf>
			while (chr[j]!='\0')
 80021d4:	e018      	b.n	8002208 <OLED_ShowFlort+0x194>
			{		OLED_ShowChar(x,y,chr[j],Char_Size);
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	f107 0218 	add.w	r2, r7, #24
 80021dc:	4413      	add	r3, r2
 80021de:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80021e2:	797b      	ldrb	r3, [r7, #5]
 80021e4:	79b9      	ldrb	r1, [r7, #6]
 80021e6:	79f8      	ldrb	r0, [r7, #7]
 80021e8:	f7ff fec6 	bl	8001f78 <OLED_ShowChar>
					x+=8;
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	3308      	adds	r3, #8
 80021f0:	71fb      	strb	r3, [r7, #7]
				if(x>120){x=0;y+=2;}
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	2b78      	cmp	r3, #120	; 0x78
 80021f6:	d904      	bls.n	8002202 <OLED_ShowFlort+0x18e>
 80021f8:	2300      	movs	r3, #0
 80021fa:	71fb      	strb	r3, [r7, #7]
 80021fc:	79bb      	ldrb	r3, [r7, #6]
 80021fe:	3302      	adds	r3, #2
 8002200:	71bb      	strb	r3, [r7, #6]
					j++;
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	3301      	adds	r3, #1
 8002206:	75fb      	strb	r3, [r7, #23]
			while (chr[j]!='\0')
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	f107 0218 	add.w	r2, r7, #24
 800220e:	4413      	add	r3, r2
 8002210:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1de      	bne.n	80021d6 <OLED_ShowFlort+0x162>
}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bdb0      	pop	{r4, r5, r7, pc}
 8002220:	41200000 	.word	0x41200000
 8002224:	08008030 	.word	0x08008030
 8002228:	42c80000 	.word	0x42c80000
 800222c:	08008038 	.word	0x08008038

08002230 <OLED_ShowCHinese>:
	}

}

void OLED_ShowCHinese(unsigned char x,unsigned char y,unsigned char no)
{      			    
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	460b      	mov	r3, r1
 800223c:	71bb      	strb	r3, [r7, #6]
 800223e:	4613      	mov	r3, r2
 8002240:	717b      	strb	r3, [r7, #5]
	unsigned char t,adder=0;
 8002242:	2300      	movs	r3, #0
 8002244:	73bb      	strb	r3, [r7, #14]
	OLED_Set_Pos(x,y);	
 8002246:	79ba      	ldrb	r2, [r7, #6]
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fe41 	bl	8001ed4 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	e011      	b.n	800227c <OLED_ShowCHinese+0x4c>
		{
				OLED_WR_Byte(Hzk[2*no][t],OLED_DATA);
 8002258:	797b      	ldrb	r3, [r7, #5]
 800225a:	005a      	lsls	r2, r3, #1
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	491b      	ldr	r1, [pc, #108]	; (80022cc <OLED_ShowCHinese+0x9c>)
 8002260:	0152      	lsls	r2, r2, #5
 8002262:	440a      	add	r2, r1
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fe18 	bl	8001ea0 <OLED_WR_Byte>
				adder+=1;
 8002270:	7bbb      	ldrb	r3, [r7, #14]
 8002272:	3301      	adds	r3, #1
 8002274:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	3301      	adds	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	d9ea      	bls.n	8002258 <OLED_ShowCHinese+0x28>
     }	
		OLED_Set_Pos(x,y+1);	
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	3301      	adds	r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fe21 	bl	8001ed4 <OLED_Set_Pos>
    for(t=0;t<16;t++)
 8002292:	2300      	movs	r3, #0
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	e012      	b.n	80022be <OLED_ShowCHinese+0x8e>
			{	
				OLED_WR_Byte(Hzk[2*no+1][t],OLED_DATA);
 8002298:	797b      	ldrb	r3, [r7, #5]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	490a      	ldr	r1, [pc, #40]	; (80022cc <OLED_ShowCHinese+0x9c>)
 80022a2:	0152      	lsls	r2, r2, #5
 80022a4:	440a      	add	r2, r1
 80022a6:	4413      	add	r3, r2
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fdf7 	bl	8001ea0 <OLED_WR_Byte>
				adder+=1;
 80022b2:	7bbb      	ldrb	r3, [r7, #14]
 80022b4:	3301      	adds	r3, #1
 80022b6:	73bb      	strb	r3, [r7, #14]
    for(t=0;t<16;t++)
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	3301      	adds	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d9e9      	bls.n	8002298 <OLED_ShowCHinese+0x68>
      }					
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000404 	.word	0x20000404

080022d0 <OLED_DrawBMP>:
/***********������������ʾ��ʾBMPͼƬ128��64��ʼ������(x,y),x�ķ�Χ0��127��yΪҳ�ķ�Χ0��7*****************/
void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[])
{ 	
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4604      	mov	r4, r0
 80022d8:	4608      	mov	r0, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	461a      	mov	r2, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	4603      	mov	r3, r0
 80022e4:	71bb      	strb	r3, [r7, #6]
 80022e6:	460b      	mov	r3, r1
 80022e8:	717b      	strb	r3, [r7, #5]
 80022ea:	4613      	mov	r3, r2
 80022ec:	713b      	strb	r3, [r7, #4]
 unsigned int j=0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 unsigned char x,y;
  
  if(y1%8==0) y=y1/8;      
 80022f2:	793b      	ldrb	r3, [r7, #4]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <OLED_DrawBMP+0x36>
 80022fe:	793b      	ldrb	r3, [r7, #4]
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	72bb      	strb	r3, [r7, #10]
 8002304:	e004      	b.n	8002310 <OLED_DrawBMP+0x40>
  else y=y1/8+1;
 8002306:	793b      	ldrb	r3, [r7, #4]
 8002308:	08db      	lsrs	r3, r3, #3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	3301      	adds	r3, #1
 800230e:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<y1;y++)
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	72bb      	strb	r3, [r7, #10]
 8002314:	e01c      	b.n	8002350 <OLED_DrawBMP+0x80>
	{
		OLED_Set_Pos(x0,y);
 8002316:	7aba      	ldrb	r2, [r7, #10]
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fdd9 	bl	8001ed4 <OLED_Set_Pos>
    for(x=x0;x<x1;x++)
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	72fb      	strb	r3, [r7, #11]
 8002326:	e00c      	b.n	8002342 <OLED_DrawBMP+0x72>
	    {      
	    	OLED_WR_Byte(BMP[j++],OLED_DATA);	    	
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	60fa      	str	r2, [r7, #12]
 800232e:	6a3a      	ldr	r2, [r7, #32]
 8002330:	4413      	add	r3, r2
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2101      	movs	r1, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fdb2 	bl	8001ea0 <OLED_WR_Byte>
    for(x=x0;x<x1;x++)
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	3301      	adds	r3, #1
 8002340:	72fb      	strb	r3, [r7, #11]
 8002342:	7afa      	ldrb	r2, [r7, #11]
 8002344:	797b      	ldrb	r3, [r7, #5]
 8002346:	429a      	cmp	r2, r3
 8002348:	d3ee      	bcc.n	8002328 <OLED_DrawBMP+0x58>
	for(y=y0;y<y1;y++)
 800234a:	7abb      	ldrb	r3, [r7, #10]
 800234c:	3301      	adds	r3, #1
 800234e:	72bb      	strb	r3, [r7, #10]
 8002350:	7aba      	ldrb	r2, [r7, #10]
 8002352:	793b      	ldrb	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3de      	bcc.n	8002316 <OLED_DrawBMP+0x46>
	    }
	}
} 
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bd90      	pop	{r4, r7, pc}

08002360 <OLED_Init>:

//��ʼ��SSD1306					    
void OLED_Init(void)
{ 	
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0

	HAL_Delay (100);					//看别人延时这么长时间
 8002364:	2064      	movs	r0, #100	; 0x64
 8002366:	f000 fa95 	bl	8002894 <HAL_Delay>
	OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 800236a:	2100      	movs	r1, #0
 800236c:	20ae      	movs	r0, #174	; 0xae
 800236e:	f7ff fd97 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 8002372:	2100      	movs	r1, #0
 8002374:	2000      	movs	r0, #0
 8002376:	f7ff fd93 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 800237a:	2100      	movs	r1, #0
 800237c:	2010      	movs	r0, #16
 800237e:	f7ff fd8f 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 8002382:	2100      	movs	r1, #0
 8002384:	2040      	movs	r0, #64	; 0x40
 8002386:	f7ff fd8b 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 800238a:	2100      	movs	r1, #0
 800238c:	20b0      	movs	r0, #176	; 0xb0
 800238e:	f7ff fd87 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD); // contract control
 8002392:	2100      	movs	r1, #0
 8002394:	2081      	movs	r0, #129	; 0x81
 8002396:	f7ff fd83 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 800239a:	2100      	movs	r1, #0
 800239c:	20ff      	movs	r0, #255	; 0xff
 800239e:	f7ff fd7f 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 80023a2:	2100      	movs	r1, #0
 80023a4:	20a1      	movs	r0, #161	; 0xa1
 80023a6:	f7ff fd7b 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 80023aa:	2100      	movs	r1, #0
 80023ac:	20a6      	movs	r0, #166	; 0xa6
 80023ae:	f7ff fd77 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 80023b2:	2100      	movs	r1, #0
 80023b4:	20a8      	movs	r0, #168	; 0xa8
 80023b6:	f7ff fd73 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 80023ba:	2100      	movs	r1, #0
 80023bc:	203f      	movs	r0, #63	; 0x3f
 80023be:	f7ff fd6f 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 80023c2:	2100      	movs	r1, #0
 80023c4:	20c8      	movs	r0, #200	; 0xc8
 80023c6:	f7ff fd6b 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 80023ca:	2100      	movs	r1, #0
 80023cc:	20d3      	movs	r0, #211	; 0xd3
 80023ce:	f7ff fd67 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//
 80023d2:	2100      	movs	r1, #0
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff fd63 	bl	8001ea0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 80023da:	2100      	movs	r1, #0
 80023dc:	20d5      	movs	r0, #213	; 0xd5
 80023de:	f7ff fd5f 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//
 80023e2:	2100      	movs	r1, #0
 80023e4:	2080      	movs	r0, #128	; 0x80
 80023e6:	f7ff fd5b 	bl	8001ea0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 80023ea:	2100      	movs	r1, #0
 80023ec:	20d8      	movs	r0, #216	; 0xd8
 80023ee:	f7ff fd57 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x05,OLED_CMD);//
 80023f2:	2100      	movs	r1, #0
 80023f4:	2005      	movs	r0, #5
 80023f6:	f7ff fd53 	bl	8001ea0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 80023fa:	2100      	movs	r1, #0
 80023fc:	20d9      	movs	r0, #217	; 0xd9
 80023fe:	f7ff fd4f 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//
 8002402:	2100      	movs	r1, #0
 8002404:	20f1      	movs	r0, #241	; 0xf1
 8002406:	f7ff fd4b 	bl	8001ea0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 800240a:	2100      	movs	r1, #0
 800240c:	20da      	movs	r0, #218	; 0xda
 800240e:	f7ff fd47 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);//
 8002412:	2100      	movs	r1, #0
 8002414:	2012      	movs	r0, #18
 8002416:	f7ff fd43 	bl	8001ea0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 800241a:	2100      	movs	r1, #0
 800241c:	20db      	movs	r0, #219	; 0xdb
 800241e:	f7ff fd3f 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//
 8002422:	2100      	movs	r1, #0
 8002424:	2030      	movs	r0, #48	; 0x30
 8002426:	f7ff fd3b 	bl	8001ea0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 800242a:	2100      	movs	r1, #0
 800242c:	208d      	movs	r0, #141	; 0x8d
 800242e:	f7ff fd37 	bl	8001ea0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//
 8002432:	2100      	movs	r1, #0
 8002434:	2014      	movs	r0, #20
 8002436:	f7ff fd33 	bl	8001ea0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 800243a:	2100      	movs	r1, #0
 800243c:	20af      	movs	r0, #175	; 0xaf
 800243e:	f7ff fd2f 	bl	8001ea0 <OLED_WR_Byte>


	OLED_Clear();
 8002442:	f7ff fd6c 	bl	8001f1e <OLED_Clear>
}  
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <Server_Init>:
uint8_t Uart3_Rx_Char;
uint8_t Get_Data_Flag = 0;
uint16_t Distance_Buffer;


void Server_Init(void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8002450:	2032      	movs	r0, #50	; 0x32
 8002452:	f000 fa1f 	bl	8002894 <HAL_Delay>
	printf("AT+RST\r\n");
 8002456:	481a      	ldr	r0, [pc, #104]	; (80024c0 <Server_Init+0x74>)
 8002458:	f003 fd2a 	bl	8005eb0 <puts>
	HAL_Delay(300);
 800245c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002460:	f000 fa18 	bl	8002894 <HAL_Delay>
	printf("AT+CWMODE=2\r\n");
 8002464:	4817      	ldr	r0, [pc, #92]	; (80024c4 <Server_Init+0x78>)
 8002466:	f003 fd23 	bl	8005eb0 <puts>
	HAL_Delay(100);
 800246a:	2064      	movs	r0, #100	; 0x64
 800246c:	f000 fa12 	bl	8002894 <HAL_Delay>
	printf("AT+CWSAP=\"ESP8266_Observe\",\"12345678\",3,4\r\n");
 8002470:	4815      	ldr	r0, [pc, #84]	; (80024c8 <Server_Init+0x7c>)
 8002472:	f003 fd1d 	bl	8005eb0 <puts>

	HAL_Delay(100);
 8002476:	2064      	movs	r0, #100	; 0x64
 8002478:	f000 fa0c 	bl	8002894 <HAL_Delay>
	printf("AT+RST\r\n");
 800247c:	4810      	ldr	r0, [pc, #64]	; (80024c0 <Server_Init+0x74>)
 800247e:	f003 fd17 	bl	8005eb0 <puts>
	HAL_Delay(300);
 8002482:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002486:	f000 fa05 	bl	8002894 <HAL_Delay>
	printf("AT+CWMODE=2\r\n");
 800248a:	480e      	ldr	r0, [pc, #56]	; (80024c4 <Server_Init+0x78>)
 800248c:	f003 fd10 	bl	8005eb0 <puts>
	HAL_Delay(100);
 8002490:	2064      	movs	r0, #100	; 0x64
 8002492:	f000 f9ff 	bl	8002894 <HAL_Delay>
	printf("AT+CIPMUX=1\r\n");
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <Server_Init+0x80>)
 8002498:	f003 fd0a 	bl	8005eb0 <puts>
	HAL_Delay(100);
 800249c:	2064      	movs	r0, #100	; 0x64
 800249e:	f000 f9f9 	bl	8002894 <HAL_Delay>
	printf("AT+CIPSERVER=1,8080\r\n");
 80024a2:	480b      	ldr	r0, [pc, #44]	; (80024d0 <Server_Init+0x84>)
 80024a4:	f003 fd04 	bl	8005eb0 <puts>
	HAL_Delay(100);
 80024a8:	2064      	movs	r0, #100	; 0x64
 80024aa:	f000 f9f3 	bl	8002894 <HAL_Delay>
	printf("AT+CIPSTO=0\r\n");
 80024ae:	4809      	ldr	r0, [pc, #36]	; (80024d4 <Server_Init+0x88>)
 80024b0:	f003 fcfe 	bl	8005eb0 <puts>
	HAL_Delay(100);
 80024b4:	2064      	movs	r0, #100	; 0x64
 80024b6:	f000 f9ed 	bl	8002894 <HAL_Delay>
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	08008040 	.word	0x08008040
 80024c4:	08008048 	.word	0x08008048
 80024c8:	08008058 	.word	0x08008058
 80024cc:	08008084 	.word	0x08008084
 80024d0:	08008094 	.word	0x08008094
 80024d4:	080080ac 	.word	0x080080ac

080024d8 <Server_SentTo_Client>:

void Server_SentTo_Client(uint8_t *Str) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 80024e0:	2032      	movs	r0, #50	; 0x32
 80024e2:	f000 f9d7 	bl	8002894 <HAL_Delay>
	printf("AT+CIPSEND=0,%d\r\n", Strlen(Str) + 2);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f818 	bl	800251c <Strlen>
 80024ec:	4603      	mov	r3, r0
 80024ee:	3302      	adds	r3, #2
 80024f0:	4619      	mov	r1, r3
 80024f2:	4808      	ldr	r0, [pc, #32]	; (8002514 <Server_SentTo_Client+0x3c>)
 80024f4:	f003 fc68 	bl	8005dc8 <iprintf>
	HAL_Delay(50);
 80024f8:	2032      	movs	r0, #50	; 0x32
 80024fa:	f000 f9cb 	bl	8002894 <HAL_Delay>
	printf("%s\r\n", Str);
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4805      	ldr	r0, [pc, #20]	; (8002518 <Server_SentTo_Client+0x40>)
 8002502:	f003 fc61 	bl	8005dc8 <iprintf>
	HAL_Delay(50);
 8002506:	2032      	movs	r0, #50	; 0x32
 8002508:	f000 f9c4 	bl	8002894 <HAL_Delay>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	080080bc 	.word	0x080080bc
 8002518:	080080d0 	.word	0x080080d0

0800251c <Strlen>:

 uint8_t Strlen(uint8_t *s) {
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	 for(uint8_t i = 0; i < 256; i++) {
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <Strlen+0x1c>
			 return i;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	e003      	b.n	8002540 <Strlen+0x24>
	 for(uint8_t i = 0; i < 256; i++) {
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
		 if(s[i] == '\0') {
 800253e:	e7f3      	b.n	8002528 <Strlen+0xc>
		 }
	 }
 }
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <Strcpy>:
 void Strcpy(uint8_t *s1, uint8_t *s2) {
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
	 uint8_t i;
	 for(i = 0; s2[i] != '\0'; i++) {
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e00a      	b.n	8002570 <Strcpy+0x26>
		 s1[i] = s2[i];
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	441a      	add	r2, r3
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	440b      	add	r3, r1
 8002566:	7812      	ldrb	r2, [r2, #0]
 8002568:	701a      	strb	r2, [r3, #0]
	 for(i = 0; s2[i] != '\0'; i++) {
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	3301      	adds	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	4413      	add	r3, r2
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ee      	bne.n	800255a <Strcpy+0x10>
	 }
	 s1[i] = '\0';
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
 }
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <Strcmp>:
uint8_t Strcmp(uint8_t *s1, uint8_t *s2) {
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
	uint8_t i;
		 for(i = 0; s2[i] != '\0'; i++) {
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e00e      	b.n	80025be <Strcmp+0x2e>
			 if(s1[i] != s2[i]) {
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	6839      	ldr	r1, [r7, #0]
 80025ac:	440b      	add	r3, r1
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <Strcmp+0x28>
				 return 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e011      	b.n	80025dc <Strcmp+0x4c>
		 for(i = 0; s2[i] != '\0'; i++) {
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	3301      	adds	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ea      	bne.n	80025a0 <Strcmp+0x10>
			 }
		 }
		 if(s1[i] == '\0') {
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <Strcmp+0x4a>
			 return 1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <Strcmp+0x4c>
		 }
		 return 0;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_UART_RxCpltCallback>:

//UART接收中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance) {
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <HAL_UART_RxCpltCallback+0x110>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d134      	bne.n	8002666 <HAL_UART_RxCpltCallback+0x7e>
		if(Rx_Line_Flag == 0) {
 80025fc:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_UART_RxCpltCallback+0x114>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d12b      	bne.n	800265c <HAL_UART_RxCpltCallback+0x74>
			if(Uart1_Rx_Char == '\n') {
 8002604:	4b3e      	ldr	r3, [pc, #248]	; (8002700 <HAL_UART_RxCpltCallback+0x118>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b0a      	cmp	r3, #10
 800260a:	d11a      	bne.n	8002642 <HAL_UART_RxCpltCallback+0x5a>
				Uart1_Rx_Buffer[Rx_Buffer_Size] = '\0';
 800260c:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_UART_RxCpltCallback+0x11c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_UART_RxCpltCallback+0x120>)
 8002614:	2100      	movs	r1, #0
 8002616:	5499      	strb	r1, [r3, r2]
				//if(Rx_Buffer_Size >= 5) {
					Rx_Line_Flag = 1;
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_UART_RxCpltCallback+0x114>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]

					if(Rx_Buffer_Size == 1) {
 800261e:	4b39      	ldr	r3, [pc, #228]	; (8002704 <HAL_UART_RxCpltCallback+0x11c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_UART_RxCpltCallback+0x44>
						Rx_Line_Flag = 0;
 8002626:	4b35      	ldr	r3, [pc, #212]	; (80026fc <HAL_UART_RxCpltCallback+0x114>)
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
					}

				//}
				if(Rx_Buffer_Size == 0){
 800262c:	4b35      	ldr	r3, [pc, #212]	; (8002704 <HAL_UART_RxCpltCallback+0x11c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <HAL_UART_RxCpltCallback+0x52>
					Rx_Line_Flag = 0;
 8002634:	4b31      	ldr	r3, [pc, #196]	; (80026fc <HAL_UART_RxCpltCallback+0x114>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
				}
				Rx_Buffer_Size = 0;
 800263a:	4b32      	ldr	r3, [pc, #200]	; (8002704 <HAL_UART_RxCpltCallback+0x11c>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e00c      	b.n	800265c <HAL_UART_RxCpltCallback+0x74>
			}else {
				Uart1_Rx_Buffer[Rx_Buffer_Size] = Uart1_Rx_Char;
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_UART_RxCpltCallback+0x11c>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <HAL_UART_RxCpltCallback+0x118>)
 800264a:	7819      	ldrb	r1, [r3, #0]
 800264c:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <HAL_UART_RxCpltCallback+0x120>)
 800264e:	5499      	strb	r1, [r3, r2]
				Rx_Buffer_Size++;
 8002650:	4b2c      	ldr	r3, [pc, #176]	; (8002704 <HAL_UART_RxCpltCallback+0x11c>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <HAL_UART_RxCpltCallback+0x11c>)
 800265a:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 800265c:	2201      	movs	r2, #1
 800265e:	4928      	ldr	r1, [pc, #160]	; (8002700 <HAL_UART_RxCpltCallback+0x118>)
 8002660:	4825      	ldr	r0, [pc, #148]	; (80026f8 <HAL_UART_RxCpltCallback+0x110>)
 8002662:	f002 fb88 	bl	8004d76 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == huart3.Instance) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_UART_RxCpltCallback+0x124>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d13e      	bne.n	80026f0 <HAL_UART_RxCpltCallback+0x108>
		if(Uart3_Rx_Char == 'd') {
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_UART_RxCpltCallback+0x128>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d105      	bne.n	8002686 <HAL_UART_RxCpltCallback+0x9e>
			Distance_Buffer = 0;
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_UART_RxCpltCallback+0x12c>)
 800267c:	2200      	movs	r2, #0
 800267e:	801a      	strh	r2, [r3, #0]
			Get_Data_Flag = 1;
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <HAL_UART_RxCpltCallback+0x130>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
		}
		if(Get_Data_Flag == 1) {
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_UART_RxCpltCallback+0x130>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d12b      	bne.n	80026e6 <HAL_UART_RxCpltCallback+0xfe>
			if(Uart3_Rx_Char >= '0' && Uart3_Rx_Char <= '9') {
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_UART_RxCpltCallback+0x128>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b2f      	cmp	r3, #47	; 0x2f
 8002694:	d917      	bls.n	80026c6 <HAL_UART_RxCpltCallback+0xde>
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_UART_RxCpltCallback+0x128>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b39      	cmp	r3, #57	; 0x39
 800269c:	d813      	bhi.n	80026c6 <HAL_UART_RxCpltCallback+0xde>
				Distance_Buffer += Uart3_Rx_Char - '0';
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_UART_RxCpltCallback+0x128>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_UART_RxCpltCallback+0x12c>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b30      	subs	r3, #48	; 0x30
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_UART_RxCpltCallback+0x12c>)
 80026b2:	801a      	strh	r2, [r3, #0]
				Distance_Buffer *= 10;
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_UART_RxCpltCallback+0x12c>)
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	0092      	lsls	r2, r2, #2
 80026bc:	4413      	add	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_UART_RxCpltCallback+0x12c>)
 80026c4:	801a      	strh	r2, [r3, #0]
			}
			if(Uart3_Rx_Char == 'm') {
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_UART_RxCpltCallback+0x128>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b6d      	cmp	r3, #109	; 0x6d
 80026cc:	d10b      	bne.n	80026e6 <HAL_UART_RxCpltCallback+0xfe>
				Distance =  Distance_Buffer / 10;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_UART_RxCpltCallback+0x12c>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <HAL_UART_RxCpltCallback+0x134>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	08db      	lsrs	r3, r3, #3
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_UART_RxCpltCallback+0x138>)
 80026de:	801a      	strh	r2, [r3, #0]
				Get_Data_Flag = 0;
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_UART_RxCpltCallback+0x130>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart3,&Uart3_Rx_Char,1);
 80026e6:	2201      	movs	r2, #1
 80026e8:	4909      	ldr	r1, [pc, #36]	; (8002710 <HAL_UART_RxCpltCallback+0x128>)
 80026ea:	4808      	ldr	r0, [pc, #32]	; (800270c <HAL_UART_RxCpltCallback+0x124>)
 80026ec:	f002 fb43 	bl	8004d76 <HAL_UART_Receive_IT>
	}
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000df0 	.word	0x20000df0
 80026fc:	20000d11 	.word	0x20000d11
 8002700:	20000e76 	.word	0x20000e76
 8002704:	20000d10 	.word	0x20000d10
 8002708:	20000c48 	.word	0x20000c48
 800270c:	20000db0 	.word	0x20000db0
 8002710:	20000e77 	.word	0x20000e77
 8002714:	20000e78 	.word	0x20000e78
 8002718:	20000d13 	.word	0x20000d13
 800271c:	cccccccd 	.word	0xcccccccd
 8002720:	20000e74 	.word	0x20000e74

08002724 <Tcp_DataAccept>:

void Tcp_DataAccept(void) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0

	if(Wifi_Get_Command_Flag == 1) {
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <Tcp_DataAccept+0x98>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d104      	bne.n	800273c <Tcp_DataAccept+0x18>
			Tcp_DataDeal();
 8002732:	f7fe fe39 	bl	80013a8 <Tcp_DataDeal>
			Wifi_Get_Command_Flag = 0;
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <Tcp_DataAccept+0x98>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
		  }
		  if(Rx_Line_Flag == 1) {
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <Tcp_DataAccept+0x9c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d137      	bne.n	80027b4 <Tcp_DataAccept+0x90>
			  if(Wifi_Get_Command_Flag == 0) {
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <Tcp_DataAccept+0x98>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d130      	bne.n	80027ae <Tcp_DataAccept+0x8a>
				  //Server_SentTo_Client(Uart1_Rx_Buffer);
				  Wifi_Command_Buffer[0] = Uart1_Rx_Buffer[0];
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <Tcp_DataAccept+0xa0>)
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <Tcp_DataAccept+0xa4>)
 8002752:	701a      	strb	r2, [r3, #0]
		  		  Wifi_Command_Buffer[1] = Uart1_Rx_Buffer[1];
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <Tcp_DataAccept+0xa0>)
 8002756:	785a      	ldrb	r2, [r3, #1]
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <Tcp_DataAccept+0xa4>)
 800275a:	705a      	strb	r2, [r3, #1]
		  		  Wifi_Command_Buffer[2] = Uart1_Rx_Buffer[2];
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <Tcp_DataAccept+0xa0>)
 800275e:	789a      	ldrb	r2, [r3, #2]
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <Tcp_DataAccept+0xa4>)
 8002762:	709a      	strb	r2, [r3, #2]
		  		  Wifi_Command_Buffer[3] = Uart1_Rx_Buffer[3];
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <Tcp_DataAccept+0xa0>)
 8002766:	78da      	ldrb	r2, [r3, #3]
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <Tcp_DataAccept+0xa4>)
 800276a:	70da      	strb	r2, [r3, #3]
		  		  Wifi_Command_Buffer[4] = '\0';
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <Tcp_DataAccept+0xa4>)
 800276e:	2200      	movs	r2, #0
 8002770:	711a      	strb	r2, [r3, #4]
		  		  if(Strcmp(Wifi_Command_Buffer, "+IPD") == 1) {
 8002772:	4916      	ldr	r1, [pc, #88]	; (80027cc <Tcp_DataAccept+0xa8>)
 8002774:	4814      	ldr	r0, [pc, #80]	; (80027c8 <Tcp_DataAccept+0xa4>)
 8002776:	f7ff ff0b 	bl	8002590 <Strcmp>
 800277a:	4603      	mov	r3, r0
 800277c:	2b01      	cmp	r3, #1
 800277e:	d116      	bne.n	80027ae <Tcp_DataAccept+0x8a>
		  			  //Strcpy(Wifi_Command_Buffer, Uart1_Rx_Buffer);
		  			  Wifi_Get_Command_Flag = 1;
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <Tcp_DataAccept+0x98>)
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
		  			  for(uint8_t i = 0; ; i++) {
 8002786:	2300      	movs	r3, #0
 8002788:	71fb      	strb	r3, [r7, #7]
		  				  if(Uart1_Rx_Buffer[i] == ':') {
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <Tcp_DataAccept+0xa0>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	2b3a      	cmp	r3, #58	; 0x3a
 8002792:	d108      	bne.n	80027a6 <Tcp_DataAccept+0x82>
		  					  Strcpy(Wifi_Command_Buffer, Uart1_Rx_Buffer + i + 1);
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	3301      	adds	r3, #1
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <Tcp_DataAccept+0xa0>)
 800279a:	4413      	add	r3, r2
 800279c:	4619      	mov	r1, r3
 800279e:	480a      	ldr	r0, [pc, #40]	; (80027c8 <Tcp_DataAccept+0xa4>)
 80027a0:	f7ff fed3 	bl	800254a <Strcpy>
		  					  break;
 80027a4:	e003      	b.n	80027ae <Tcp_DataAccept+0x8a>
		  			  for(uint8_t i = 0; ; i++) {
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	3301      	adds	r3, #1
 80027aa:	71fb      	strb	r3, [r7, #7]
		  				  if(Uart1_Rx_Buffer[i] == ':') {
 80027ac:	e7ed      	b.n	800278a <Tcp_DataAccept+0x66>
		  				  }
		  			  }
		  		  }
			  }
			  Rx_Line_Flag = 0;
 80027ae:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <Tcp_DataAccept+0x9c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
		  }
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000d12 	.word	0x20000d12
 80027c0:	20000d11 	.word	0x20000d11
 80027c4:	20000c48 	.word	0x20000c48
 80027c8:	20000cac 	.word	0x20000cac
 80027cc:	080080d8 	.word	0x080080d8

080027d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_Init+0x28>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <HAL_Init+0x28>)
 80027da:	f043 0310 	orr.w	r3, r3, #16
 80027de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e0:	2003      	movs	r0, #3
 80027e2:	f000 f945 	bl	8002a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f000 f808 	bl	80027fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ec:	f7fe fe90 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40022000 	.word	0x40022000

080027fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_InitTick+0x54>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_InitTick+0x58>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002812:	fbb3 f3f1 	udiv	r3, r3, r1
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f95d 	bl	8002ada <HAL_SYSTICK_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00e      	b.n	8002848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d80a      	bhi.n	8002846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f000 f925 	bl	8002a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800283c:	4a06      	ldr	r2, [pc, #24]	; (8002858 <HAL_InitTick+0x5c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000400 	.word	0x20000400
 8002854:	20000a48 	.word	0x20000a48
 8002858:	20000a44 	.word	0x20000a44

0800285c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_IncTick+0x1c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_IncTick+0x20>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a03      	ldr	r2, [pc, #12]	; (800287c <HAL_IncTick+0x20>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	20000a48 	.word	0x20000a48
 800287c:	20000e7c 	.word	0x20000e7c

08002880 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return uwTick;
 8002884:	4b02      	ldr	r3, [pc, #8]	; (8002890 <HAL_GetTick+0x10>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	20000e7c 	.word	0x20000e7c

08002894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff fff0 	bl	8002880 <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d005      	beq.n	80028ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_Delay+0x40>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ba:	bf00      	nop
 80028bc:	f7ff ffe0 	bl	8002880 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d8f7      	bhi.n	80028bc <HAL_Delay+0x28>
  {
  }
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000a48 	.word	0x20000a48

080028d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f4:	4013      	ands	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290a:	4a04      	ldr	r2, [pc, #16]	; (800291c <__NVIC_SetPriorityGrouping+0x44>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60d3      	str	r3, [r2, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <__NVIC_GetPriorityGrouping+0x18>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0307 	and.w	r3, r3, #7
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4906      	ldr	r1, [pc, #24]	; (8002970 <__NVIC_EnableIRQ+0x34>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	; (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a3c:	d301      	bcc.n	8002a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00f      	b.n	8002a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a42:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <SysTick_Config+0x40>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f7ff ff90 	bl	8002974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <SysTick_Config+0x40>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5a:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <SysTick_Config+0x40>)
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	e000e010 	.word	0xe000e010

08002a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff2d 	bl	80028d8 <__NVIC_SetPriorityGrouping>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a98:	f7ff ff42 	bl	8002920 <__NVIC_GetPriorityGrouping>
 8002a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f7ff ff90 	bl	80029c8 <NVIC_EncodePriority>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff5f 	bl	8002974 <__NVIC_SetPriority>
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff35 	bl	800293c <__NVIC_EnableIRQ>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ffa2 	bl	8002a2c <SysTick_Config>
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d005      	beq.n	8002b16 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e051      	b.n	8002bba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 020e 	bic.w	r2, r2, #14
 8002b24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <HAL_DMA_Abort_IT+0xd0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d029      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xa0>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <HAL_DMA_Abort_IT+0xd4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d022      	beq.n	8002b90 <HAL_DMA_Abort_IT+0x9c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_DMA_Abort_IT+0xd8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d01a      	beq.n	8002b8a <HAL_DMA_Abort_IT+0x96>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <HAL_DMA_Abort_IT+0xdc>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d012      	beq.n	8002b84 <HAL_DMA_Abort_IT+0x90>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_DMA_Abort_IT+0xe0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00a      	beq.n	8002b7e <HAL_DMA_Abort_IT+0x8a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1a      	ldr	r2, [pc, #104]	; (8002bd8 <HAL_DMA_Abort_IT+0xe4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d102      	bne.n	8002b78 <HAL_DMA_Abort_IT+0x84>
 8002b72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b76:	e00e      	b.n	8002b96 <HAL_DMA_Abort_IT+0xa2>
 8002b78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b7c:	e00b      	b.n	8002b96 <HAL_DMA_Abort_IT+0xa2>
 8002b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b82:	e008      	b.n	8002b96 <HAL_DMA_Abort_IT+0xa2>
 8002b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b88:	e005      	b.n	8002b96 <HAL_DMA_Abort_IT+0xa2>
 8002b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b8e:	e002      	b.n	8002b96 <HAL_DMA_Abort_IT+0xa2>
 8002b90:	2310      	movs	r3, #16
 8002b92:	e000      	b.n	8002b96 <HAL_DMA_Abort_IT+0xa2>
 8002b94:	2301      	movs	r3, #1
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <HAL_DMA_Abort_IT+0xe8>)
 8002b98:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
    } 
  }
  return status;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40020008 	.word	0x40020008
 8002bc8:	4002001c 	.word	0x4002001c
 8002bcc:	40020030 	.word	0x40020030
 8002bd0:	40020044 	.word	0x40020044
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	4002006c 	.word	0x4002006c
 8002bdc:	40020000 	.word	0x40020000

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b08b      	sub	sp, #44	; 0x2c
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf2:	e127      	b.n	8002e44 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f040 8116 	bne.w	8002e3e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b12      	cmp	r3, #18
 8002c18:	d034      	beq.n	8002c84 <HAL_GPIO_Init+0xa4>
 8002c1a:	2b12      	cmp	r3, #18
 8002c1c:	d80d      	bhi.n	8002c3a <HAL_GPIO_Init+0x5a>
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d02b      	beq.n	8002c7a <HAL_GPIO_Init+0x9a>
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d804      	bhi.n	8002c30 <HAL_GPIO_Init+0x50>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d031      	beq.n	8002c8e <HAL_GPIO_Init+0xae>
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d01c      	beq.n	8002c68 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c2e:	e048      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d043      	beq.n	8002cbc <HAL_GPIO_Init+0xdc>
 8002c34:	2b11      	cmp	r3, #17
 8002c36:	d01b      	beq.n	8002c70 <HAL_GPIO_Init+0x90>
          break;
 8002c38:	e043      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c3a:	4a89      	ldr	r2, [pc, #548]	; (8002e60 <HAL_GPIO_Init+0x280>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d026      	beq.n	8002c8e <HAL_GPIO_Init+0xae>
 8002c40:	4a87      	ldr	r2, [pc, #540]	; (8002e60 <HAL_GPIO_Init+0x280>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d806      	bhi.n	8002c54 <HAL_GPIO_Init+0x74>
 8002c46:	4a87      	ldr	r2, [pc, #540]	; (8002e64 <HAL_GPIO_Init+0x284>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d020      	beq.n	8002c8e <HAL_GPIO_Init+0xae>
 8002c4c:	4a86      	ldr	r2, [pc, #536]	; (8002e68 <HAL_GPIO_Init+0x288>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01d      	beq.n	8002c8e <HAL_GPIO_Init+0xae>
          break;
 8002c52:	e036      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c54:	4a85      	ldr	r2, [pc, #532]	; (8002e6c <HAL_GPIO_Init+0x28c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0xae>
 8002c5a:	4a85      	ldr	r2, [pc, #532]	; (8002e70 <HAL_GPIO_Init+0x290>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d016      	beq.n	8002c8e <HAL_GPIO_Init+0xae>
 8002c60:	4a84      	ldr	r2, [pc, #528]	; (8002e74 <HAL_GPIO_Init+0x294>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0xae>
          break;
 8002c66:	e02c      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	623b      	str	r3, [r7, #32]
          break;
 8002c6e:	e028      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	3304      	adds	r3, #4
 8002c76:	623b      	str	r3, [r7, #32]
          break;
 8002c78:	e023      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	3308      	adds	r3, #8
 8002c80:	623b      	str	r3, [r7, #32]
          break;
 8002c82:	e01e      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	623b      	str	r3, [r7, #32]
          break;
 8002c8c:	e019      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c96:	2304      	movs	r3, #4
 8002c98:	623b      	str	r3, [r7, #32]
          break;
 8002c9a:	e012      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	611a      	str	r2, [r3, #16]
          break;
 8002cae:	e008      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	615a      	str	r2, [r3, #20]
          break;
 8002cba:	e002      	b.n	8002cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]
          break;
 8002cc0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2bff      	cmp	r3, #255	; 0xff
 8002cc6:	d801      	bhi.n	8002ccc <HAL_GPIO_Init+0xec>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	e001      	b.n	8002cd0 <HAL_GPIO_Init+0xf0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2bff      	cmp	r3, #255	; 0xff
 8002cd6:	d802      	bhi.n	8002cde <HAL_GPIO_Init+0xfe>
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	e002      	b.n	8002ce4 <HAL_GPIO_Init+0x104>
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	3b08      	subs	r3, #8
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	210f      	movs	r1, #15
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	6a39      	ldr	r1, [r7, #32]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8096 	beq.w	8002e3e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d12:	4b59      	ldr	r3, [pc, #356]	; (8002e78 <HAL_GPIO_Init+0x298>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	4a58      	ldr	r2, [pc, #352]	; (8002e78 <HAL_GPIO_Init+0x298>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6193      	str	r3, [r2, #24]
 8002d1e:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <HAL_GPIO_Init+0x298>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d2a:	4a54      	ldr	r2, [pc, #336]	; (8002e7c <HAL_GPIO_Init+0x29c>)
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	089b      	lsrs	r3, r3, #2
 8002d30:	3302      	adds	r3, #2
 8002d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d36:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	220f      	movs	r2, #15
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4b      	ldr	r2, [pc, #300]	; (8002e80 <HAL_GPIO_Init+0x2a0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_GPIO_Init+0x19e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4a      	ldr	r2, [pc, #296]	; (8002e84 <HAL_GPIO_Init+0x2a4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00d      	beq.n	8002d7a <HAL_GPIO_Init+0x19a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a49      	ldr	r2, [pc, #292]	; (8002e88 <HAL_GPIO_Init+0x2a8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <HAL_GPIO_Init+0x196>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a48      	ldr	r2, [pc, #288]	; (8002e8c <HAL_GPIO_Init+0x2ac>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_GPIO_Init+0x192>
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e006      	b.n	8002d80 <HAL_GPIO_Init+0x1a0>
 8002d72:	2304      	movs	r3, #4
 8002d74:	e004      	b.n	8002d80 <HAL_GPIO_Init+0x1a0>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e002      	b.n	8002d80 <HAL_GPIO_Init+0x1a0>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_GPIO_Init+0x1a0>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d82:	f002 0203 	and.w	r2, r2, #3
 8002d86:	0092      	lsls	r2, r2, #2
 8002d88:	4093      	lsls	r3, r2
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d90:	493a      	ldr	r1, [pc, #232]	; (8002e7c <HAL_GPIO_Init+0x29c>)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	3302      	adds	r3, #2
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002daa:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4938      	ldr	r1, [pc, #224]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
 8002db6:	e006      	b.n	8002dc6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	4933      	ldr	r1, [pc, #204]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	492e      	ldr	r1, [pc, #184]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]
 8002dde:	e006      	b.n	8002dee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002de0:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	4929      	ldr	r1, [pc, #164]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dfa:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	4924      	ldr	r1, [pc, #144]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
 8002e06:	e006      	b.n	8002e16 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e08:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	491f      	ldr	r1, [pc, #124]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e22:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	491a      	ldr	r1, [pc, #104]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60cb      	str	r3, [r1, #12]
 8002e2e:	e006      	b.n	8002e3e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e30:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	4915      	ldr	r1, [pc, #84]	; (8002e90 <HAL_GPIO_Init+0x2b0>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	3301      	adds	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f47f aed0 	bne.w	8002bf4 <HAL_GPIO_Init+0x14>
  }
}
 8002e54:	bf00      	nop
 8002e56:	372c      	adds	r7, #44	; 0x2c
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	10210000 	.word	0x10210000
 8002e64:	10110000 	.word	0x10110000
 8002e68:	10120000 	.word	0x10120000
 8002e6c:	10310000 	.word	0x10310000
 8002e70:	10320000 	.word	0x10320000
 8002e74:	10220000 	.word	0x10220000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40010800 	.word	0x40010800
 8002e84:	40010c00 	.word	0x40010c00
 8002e88:	40011000 	.word	0x40011000
 8002e8c:	40011400 	.word	0x40011400
 8002e90:	40010400 	.word	0x40010400

08002e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ea4:	787b      	ldrb	r3, [r7, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eb0:	e003      	b.n	8002eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	041a      	lsls	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	611a      	str	r2, [r3, #16]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eda:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f806 	bl	8002ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e10f      	b.n	800313a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe f91a 	bl	8001168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	; 0x24
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f4c:	f000 ffe4 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 8002f50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4a7b      	ldr	r2, [pc, #492]	; (8003144 <HAL_I2C_Init+0x23c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d807      	bhi.n	8002f6c <HAL_I2C_Init+0x64>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a7a      	ldr	r2, [pc, #488]	; (8003148 <HAL_I2C_Init+0x240>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bf94      	ite	ls
 8002f64:	2301      	movls	r3, #1
 8002f66:	2300      	movhi	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e006      	b.n	8002f7a <HAL_I2C_Init+0x72>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a77      	ldr	r2, [pc, #476]	; (800314c <HAL_I2C_Init+0x244>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bf94      	ite	ls
 8002f74:	2301      	movls	r3, #1
 8002f76:	2300      	movhi	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0db      	b.n	800313a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4a72      	ldr	r2, [pc, #456]	; (8003150 <HAL_I2C_Init+0x248>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0c9b      	lsrs	r3, r3, #18
 8002f8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a64      	ldr	r2, [pc, #400]	; (8003144 <HAL_I2C_Init+0x23c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d802      	bhi.n	8002fbc <HAL_I2C_Init+0xb4>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	e009      	b.n	8002fd0 <HAL_I2C_Init+0xc8>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	4a63      	ldr	r2, [pc, #396]	; (8003154 <HAL_I2C_Init+0x24c>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	099b      	lsrs	r3, r3, #6
 8002fce:	3301      	adds	r3, #1
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fe2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	4956      	ldr	r1, [pc, #344]	; (8003144 <HAL_I2C_Init+0x23c>)
 8002fec:	428b      	cmp	r3, r1
 8002fee:	d80d      	bhi.n	800300c <HAL_I2C_Init+0x104>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e59      	subs	r1, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ffe:	3301      	adds	r3, #1
 8003000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003004:	2b04      	cmp	r3, #4
 8003006:	bf38      	it	cc
 8003008:	2304      	movcc	r3, #4
 800300a:	e04f      	b.n	80030ac <HAL_I2C_Init+0x1a4>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <HAL_I2C_Init+0x130>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	440b      	add	r3, r1
 8003022:	fbb0 f3f3 	udiv	r3, r0, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e012      	b.n	800305e <HAL_I2C_Init+0x156>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	0099      	lsls	r1, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Init+0x15e>
 8003062:	2301      	movs	r3, #1
 8003064:	e022      	b.n	80030ac <HAL_I2C_Init+0x1a4>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10e      	bne.n	800308c <HAL_I2C_Init+0x184>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e58      	subs	r0, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6859      	ldr	r1, [r3, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	440b      	add	r3, r1
 800307c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003080:	3301      	adds	r3, #1
 8003082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800308a:	e00f      	b.n	80030ac <HAL_I2C_Init+0x1a4>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	0099      	lsls	r1, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a2:	3301      	adds	r3, #1
 80030a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	6809      	ldr	r1, [r1, #0]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6911      	ldr	r1, [r2, #16]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68d2      	ldr	r2, [r2, #12]
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	000186a0 	.word	0x000186a0
 8003148:	001e847f 	.word	0x001e847f
 800314c:	003d08ff 	.word	0x003d08ff
 8003150:	431bde83 	.word	0x431bde83
 8003154:	10624dd3 	.word	0x10624dd3

08003158 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	461a      	mov	r2, r3
 8003166:	4603      	mov	r3, r0
 8003168:	817b      	strh	r3, [r7, #10]
 800316a:	460b      	mov	r3, r1
 800316c:	813b      	strh	r3, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003172:	f7ff fb85 	bl	8002880 <HAL_GetTick>
 8003176:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b20      	cmp	r3, #32
 8003182:	f040 80d9 	bne.w	8003338 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2319      	movs	r3, #25
 800318c:	2201      	movs	r2, #1
 800318e:	496d      	ldr	r1, [pc, #436]	; (8003344 <HAL_I2C_Mem_Write+0x1ec>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f965 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
 800319e:	e0cc      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Mem_Write+0x56>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0c5      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d007      	beq.n	80031d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2221      	movs	r2, #33	; 0x21
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2240      	movs	r2, #64	; 0x40
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a4d      	ldr	r2, [pc, #308]	; (8003348 <HAL_I2C_Mem_Write+0x1f0>)
 8003214:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003216:	88f8      	ldrh	r0, [r7, #6]
 8003218:	893a      	ldrh	r2, [r7, #8]
 800321a:	8979      	ldrh	r1, [r7, #10]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4603      	mov	r3, r0
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f890 	bl	800334c <I2C_RequestMemoryWrite>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d052      	beq.n	80032d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e081      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f9e6 	bl	800360c <I2C_WaitOnTXEFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b04      	cmp	r3, #4
 800324c:	d107      	bne.n	800325e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06b      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	781a      	ldrb	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d11b      	bne.n	80032d8 <HAL_I2C_Mem_Write+0x180>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d017      	beq.n	80032d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	781a      	ldrb	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1aa      	bne.n	8003236 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f9d2 	bl	800368e <I2C_WaitOnBTFFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d107      	bne.n	8003308 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e016      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	00100002 	.word	0x00100002
 8003348:	ffff0000 	.word	0xffff0000

0800334c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	817b      	strh	r3, [r7, #10]
 800335e:	460b      	mov	r3, r1
 8003360:	813b      	strh	r3, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003374:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	2200      	movs	r2, #0
 800337e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f86c 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e05f      	b.n	8003452 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003392:	897b      	ldrh	r3, [r7, #10]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	492d      	ldr	r1, [pc, #180]	; (800345c <I2C_RequestMemoryWrite+0x110>)
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f8b0 	bl	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e04c      	b.n	8003452 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	6a39      	ldr	r1, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f91a 	bl	800360c <I2C_WaitOnTXEFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d107      	bne.n	80033f6 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e02b      	b.n	8003452 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	611a      	str	r2, [r3, #16]
 800340a:	e021      	b.n	8003450 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800340c:	893b      	ldrh	r3, [r7, #8]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	b29b      	uxth	r3, r3
 8003412:	b2da      	uxtb	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341c:	6a39      	ldr	r1, [r7, #32]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f8f4 	bl	800360c <I2C_WaitOnTXEFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	2b04      	cmp	r3, #4
 8003430:	d107      	bne.n	8003442 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e005      	b.n	8003452 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003446:	893b      	ldrh	r3, [r7, #8]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	00010002 	.word	0x00010002

08003460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	e025      	b.n	80034be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d021      	beq.n	80034be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	f7ff fa01 	bl	8002880 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d116      	bne.n	80034be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f043 0220 	orr.w	r2, r3, #32
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e023      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d10d      	bne.n	80034e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	43da      	mvns	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4013      	ands	r3, r2
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf0c      	ite	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	2300      	movne	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	e00c      	b.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	429a      	cmp	r2, r3
 8003502:	d0b6      	beq.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800351c:	e051      	b.n	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352c:	d123      	bne.n	8003576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003546:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f043 0204 	orr.w	r2, r3, #4
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e046      	b.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d021      	beq.n	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7ff f97f 	bl	8002880 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d116      	bne.n	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e020      	b.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10c      	bne.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4013      	ands	r3, r2
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	e00b      	b.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	43da      	mvns	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	4013      	ands	r3, r2
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	bf14      	ite	ne
 80035f8:	2301      	movne	r3, #1
 80035fa:	2300      	moveq	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d18d      	bne.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003618:	e02d      	b.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f878 	bl	8003710 <I2C_IsAcknowledgeFailed>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e02d      	b.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d021      	beq.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7ff f925 	bl	8002880 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d116      	bne.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e007      	b.n	8003686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003680:	2b80      	cmp	r3, #128	; 0x80
 8003682:	d1ca      	bne.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800369a:	e02d      	b.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f837 	bl	8003710 <I2C_IsAcknowledgeFailed>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e02d      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b2:	d021      	beq.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7ff f8e4 	bl	8002880 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d116      	bne.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e007      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b04      	cmp	r3, #4
 8003704:	d1ca      	bne.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003726:	d11b      	bne.n	8003760 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003730:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f043 0204 	orr.w	r2, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e26c      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8087 	beq.w	800389a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800378c:	4b92      	ldr	r3, [pc, #584]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 030c 	and.w	r3, r3, #12
 8003794:	2b04      	cmp	r3, #4
 8003796:	d00c      	beq.n	80037b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003798:	4b8f      	ldr	r3, [pc, #572]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d112      	bne.n	80037ca <HAL_RCC_OscConfig+0x5e>
 80037a4:	4b8c      	ldr	r3, [pc, #560]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b0:	d10b      	bne.n	80037ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b2:	4b89      	ldr	r3, [pc, #548]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d06c      	beq.n	8003898 <HAL_RCC_OscConfig+0x12c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d168      	bne.n	8003898 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e246      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x76>
 80037d4:	4b80      	ldr	r3, [pc, #512]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a7f      	ldr	r2, [pc, #508]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e02e      	b.n	8003840 <HAL_RCC_OscConfig+0xd4>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x98>
 80037ea:	4b7b      	ldr	r3, [pc, #492]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a7a      	ldr	r2, [pc, #488]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b78      	ldr	r3, [pc, #480]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a77      	ldr	r2, [pc, #476]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e01d      	b.n	8003840 <HAL_RCC_OscConfig+0xd4>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0xbc>
 800380e:	4b72      	ldr	r3, [pc, #456]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a71      	ldr	r2, [pc, #452]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 8003814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b6f      	ldr	r3, [pc, #444]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6e      	ldr	r2, [pc, #440]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0xd4>
 8003828:	4b6b      	ldr	r3, [pc, #428]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a6a      	ldr	r2, [pc, #424]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 800382e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b68      	ldr	r3, [pc, #416]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a67      	ldr	r2, [pc, #412]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 800383a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7ff f81a 	bl	8002880 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003850:	f7ff f816 	bl	8002880 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1fa      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b5d      	ldr	r3, [pc, #372]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0xe4>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7ff f806 	bl	8002880 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7ff f802 	bl	8002880 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e1e6      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388a:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x10c>
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d063      	beq.n	800396e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a6:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038b2:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d11c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x18c>
 80038be:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d116      	bne.n	80038f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_RCC_OscConfig+0x176>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d001      	beq.n	80038e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e1ba      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e2:	4b3d      	ldr	r3, [pc, #244]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4939      	ldr	r1, [pc, #228]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f6:	e03a      	b.n	800396e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d020      	beq.n	8003942 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fe ffbb 	bl	8002880 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390e:	f7fe ffb7 	bl	8002880 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e19b      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003920:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392c:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4927      	ldr	r1, [pc, #156]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	e015      	b.n	800396e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <HAL_RCC_OscConfig+0x270>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe ff9a 	bl	8002880 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003950:	f7fe ff96 	bl	8002880 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e17a      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d03a      	beq.n	80039f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d019      	beq.n	80039b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003982:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <HAL_RCC_OscConfig+0x274>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003988:	f7fe ff7a 	bl	8002880 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003990:	f7fe ff76 	bl	8002880 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e15a      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039ae:	2001      	movs	r0, #1
 80039b0:	f000 fada 	bl	8003f68 <RCC_Delay>
 80039b4:	e01c      	b.n	80039f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_RCC_OscConfig+0x274>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039bc:	f7fe ff60 	bl	8002880 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c2:	e00f      	b.n	80039e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c4:	f7fe ff5c 	bl	8002880 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d908      	bls.n	80039e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e140      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000
 80039dc:	42420000 	.word	0x42420000
 80039e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e4:	4b9e      	ldr	r3, [pc, #632]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e9      	bne.n	80039c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80a6 	beq.w	8003b4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fe:	2300      	movs	r3, #0
 8003a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a02:	4b97      	ldr	r3, [pc, #604]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10d      	bne.n	8003a2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0e:	4b94      	ldr	r3, [pc, #592]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	4a93      	ldr	r2, [pc, #588]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a18:	61d3      	str	r3, [r2, #28]
 8003a1a:	4b91      	ldr	r3, [pc, #580]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2a:	4b8e      	ldr	r3, [pc, #568]	; (8003c64 <HAL_RCC_OscConfig+0x4f8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a36:	4b8b      	ldr	r3, [pc, #556]	; (8003c64 <HAL_RCC_OscConfig+0x4f8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a8a      	ldr	r2, [pc, #552]	; (8003c64 <HAL_RCC_OscConfig+0x4f8>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7fe ff1d 	bl	8002880 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fe ff19 	bl	8002880 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b64      	cmp	r3, #100	; 0x64
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e0fd      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	4b81      	ldr	r3, [pc, #516]	; (8003c64 <HAL_RCC_OscConfig+0x4f8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x312>
 8003a70:	4b7b      	ldr	r3, [pc, #492]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	4a7a      	ldr	r2, [pc, #488]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	6213      	str	r3, [r2, #32]
 8003a7c:	e02d      	b.n	8003ada <HAL_RCC_OscConfig+0x36e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x334>
 8003a86:	4b76      	ldr	r3, [pc, #472]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4a75      	ldr	r2, [pc, #468]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	6213      	str	r3, [r2, #32]
 8003a92:	4b73      	ldr	r3, [pc, #460]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	4a72      	ldr	r2, [pc, #456]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003a98:	f023 0304 	bic.w	r3, r3, #4
 8003a9c:	6213      	str	r3, [r2, #32]
 8003a9e:	e01c      	b.n	8003ada <HAL_RCC_OscConfig+0x36e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d10c      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x356>
 8003aa8:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	4a6c      	ldr	r2, [pc, #432]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003aae:	f043 0304 	orr.w	r3, r3, #4
 8003ab2:	6213      	str	r3, [r2, #32]
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4a69      	ldr	r2, [pc, #420]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	6213      	str	r3, [r2, #32]
 8003ac0:	e00b      	b.n	8003ada <HAL_RCC_OscConfig+0x36e>
 8003ac2:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	4a66      	ldr	r2, [pc, #408]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	6213      	str	r3, [r2, #32]
 8003ace:	4b64      	ldr	r3, [pc, #400]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4a63      	ldr	r2, [pc, #396]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003ad4:	f023 0304 	bic.w	r3, r3, #4
 8003ad8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d015      	beq.n	8003b0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae2:	f7fe fecd 	bl	8002880 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae8:	e00a      	b.n	8003b00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aea:	f7fe fec9 	bl	8002880 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e0ab      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b00:	4b57      	ldr	r3, [pc, #348]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0ee      	beq.n	8003aea <HAL_RCC_OscConfig+0x37e>
 8003b0c:	e014      	b.n	8003b38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0e:	f7fe feb7 	bl	8002880 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b14:	e00a      	b.n	8003b2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b16:	f7fe feb3 	bl	8002880 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e095      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2c:	4b4c      	ldr	r3, [pc, #304]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ee      	bne.n	8003b16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3e:	4b48      	ldr	r3, [pc, #288]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	4a47      	ldr	r2, [pc, #284]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8081 	beq.w	8003c56 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b54:	4b42      	ldr	r3, [pc, #264]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d061      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d146      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b68:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <HAL_RCC_OscConfig+0x4fc>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fe87 	bl	8002880 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fe fe83 	bl	8002880 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e067      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9c:	d108      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b9e:	4b30      	ldr	r3, [pc, #192]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	492d      	ldr	r1, [pc, #180]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb0:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a19      	ldr	r1, [r3, #32]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	4927      	ldr	r1, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_OscConfig+0x4fc>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe fe57 	bl	8002880 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fe fe53 	bl	8002880 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e037      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x46a>
 8003bf4:	e02f      	b.n	8003c56 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <HAL_RCC_OscConfig+0x4fc>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fe40 	bl	8002880 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe fe3c 	bl	8002880 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e020      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x498>
 8003c22:	e018      	b.n	8003c56 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e013      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_OscConfig+0x4f4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d001      	beq.n	8003c56 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
 8003c68:	42420060 	.word	0x42420060

08003c6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0d0      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c80:	4b6a      	ldr	r3, [pc, #424]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d910      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b67      	ldr	r3, [pc, #412]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 0207 	bic.w	r2, r3, #7
 8003c96:	4965      	ldr	r1, [pc, #404]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b63      	ldr	r3, [pc, #396]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0b8      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d020      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc8:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce0:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a52      	ldr	r2, [pc, #328]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	494d      	ldr	r1, [pc, #308]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d040      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d115      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e07f      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2a:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e073      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3a:	4b3d      	ldr	r3, [pc, #244]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e06b      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4a:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4936      	ldr	r1, [pc, #216]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d5c:	f7fe fd90 	bl	8002880 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fe fd8c 	bl	8002880 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e053      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 020c 	and.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1eb      	bne.n	8003d64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d210      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 0207 	bic.w	r2, r3, #7
 8003da2:	4922      	ldr	r1, [pc, #136]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e032      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4916      	ldr	r1, [pc, #88]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003de6:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	490e      	ldr	r1, [pc, #56]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dfa:	f000 f821 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003dfe:	4601      	mov	r1, r0
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	5cd3      	ldrb	r3, [r2, r3]
 8003e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e12:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1cc>)
 8003e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_ClockConfig+0x1d0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe fcee 	bl	80027fc <HAL_InitTick>

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40022000 	.word	0x40022000
 8003e30:	40021000 	.word	0x40021000
 8003e34:	080080f4 	.word	0x080080f4
 8003e38:	20000400 	.word	0x20000400
 8003e3c:	20000a44 	.word	0x20000a44

08003e40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e40:	b490      	push	{r4, r7}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e46:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e48:	1d3c      	adds	r4, r7, #4
 8003e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e6a:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d002      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x40>
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0x46>
 8003e7e:	e02d      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e80:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e82:	623b      	str	r3, [r7, #32]
      break;
 8003e84:	e02d      	b.n	8003ee2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	0c9b      	lsrs	r3, r3, #18
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e92:	4413      	add	r3, r2
 8003e94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e98:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d013      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	0c5b      	lsrs	r3, r3, #17
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003eb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	; (8003efc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ebe:	fb02 f203 	mul.w	r2, r2, r3
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eca:	e004      	b.n	8003ed6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	4a0c      	ldr	r2, [pc, #48]	; (8003f00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ed0:	fb02 f303 	mul.w	r3, r2, r3
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	623b      	str	r3, [r7, #32]
      break;
 8003eda:	e002      	b.n	8003ee2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ede:	623b      	str	r3, [r7, #32]
      break;
 8003ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3728      	adds	r7, #40	; 0x28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc90      	pop	{r4, r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	080080e0 	.word	0x080080e0
 8003ef4:	080080f0 	.word	0x080080f0
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	007a1200 	.word	0x007a1200
 8003f00:	003d0900 	.word	0x003d0900

08003f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f08:	4b02      	ldr	r3, [pc, #8]	; (8003f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr
 8003f14:	20000400 	.word	0x20000400

08003f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f1c:	f7ff fff2 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f20:	4601      	mov	r1, r0
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	4a03      	ldr	r2, [pc, #12]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	08008104 	.word	0x08008104

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f44:	f7ff ffde 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f48:	4601      	mov	r1, r0
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	0adb      	lsrs	r3, r3, #11
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4a03      	ldr	r2, [pc, #12]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f56:	5cd3      	ldrb	r3, [r2, r3]
 8003f58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40021000 	.word	0x40021000
 8003f64:	08008104 	.word	0x08008104

08003f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <RCC_Delay+0x34>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <RCC_Delay+0x38>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	0a5b      	lsrs	r3, r3, #9
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f84:	bf00      	nop
  }
  while (Delay --);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1e5a      	subs	r2, r3, #1
 8003f8a:	60fa      	str	r2, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f9      	bne.n	8003f84 <RCC_Delay+0x1c>
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000400 	.word	0x20000400
 8003fa0:	10624dd3 	.word	0x10624dd3

08003fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e01d      	b.n	8003ff2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd fc5c 	bl	8001888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f000 fb62 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e01d      	b.n	8004048 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f815 	bl	8004050 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f000 fb37 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
	...

08004064 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d841      	bhi.n	80040f8 <HAL_TIM_IC_Start_IT+0x94>
 8004074:	a201      	add	r2, pc, #4	; (adr r2, 800407c <HAL_TIM_IC_Start_IT+0x18>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	080040b1 	.word	0x080040b1
 8004080:	080040f9 	.word	0x080040f9
 8004084:	080040f9 	.word	0x080040f9
 8004088:	080040f9 	.word	0x080040f9
 800408c:	080040c3 	.word	0x080040c3
 8004090:	080040f9 	.word	0x080040f9
 8004094:	080040f9 	.word	0x080040f9
 8004098:	080040f9 	.word	0x080040f9
 800409c:	080040d5 	.word	0x080040d5
 80040a0:	080040f9 	.word	0x080040f9
 80040a4:	080040f9 	.word	0x080040f9
 80040a8:	080040f9 	.word	0x080040f9
 80040ac:	080040e7 	.word	0x080040e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0202 	orr.w	r2, r2, #2
 80040be:	60da      	str	r2, [r3, #12]
      break;
 80040c0:	e01b      	b.n	80040fa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0204 	orr.w	r2, r2, #4
 80040d0:	60da      	str	r2, [r3, #12]
      break;
 80040d2:	e012      	b.n	80040fa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0208 	orr.w	r2, r2, #8
 80040e2:	60da      	str	r2, [r3, #12]
      break;
 80040e4:	e009      	b.n	80040fa <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0210 	orr.w	r2, r2, #16
 80040f4:	60da      	str	r2, [r3, #12]
      break;
 80040f6:	e000      	b.n	80040fa <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80040f8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2201      	movs	r2, #1
 8004100:	6839      	ldr	r1, [r7, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fcd7 	bl	8004ab6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b06      	cmp	r3, #6
 8004118:	d007      	beq.n	800412a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b02      	cmp	r3, #2
 8004148:	d122      	bne.n	8004190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b02      	cmp	r3, #2
 8004156:	d11b      	bne.n	8004190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0202 	mvn.w	r2, #2
 8004160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7fd fdb0 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 800417c:	e005      	b.n	800418a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fa78 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fa7e 	bl	8004686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b04      	cmp	r3, #4
 800419c:	d122      	bne.n	80041e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d11b      	bne.n	80041e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0204 	mvn.w	r2, #4
 80041b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2202      	movs	r2, #2
 80041ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fd fd86 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 80041d0:	e005      	b.n	80041de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fa4e 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fa54 	bl	8004686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d122      	bne.n	8004238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d11b      	bne.n	8004238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0208 	mvn.w	r2, #8
 8004208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2204      	movs	r2, #4
 800420e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd fd5c 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa24 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fa2a 	bl	8004686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b10      	cmp	r3, #16
 8004244:	d122      	bne.n	800428c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b10      	cmp	r3, #16
 8004252:	d11b      	bne.n	800428c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f06f 0210 	mvn.w	r2, #16
 800425c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2208      	movs	r2, #8
 8004262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd fd32 	bl	8001cdc <HAL_TIM_IC_CaptureCallback>
 8004278:	e005      	b.n	8004286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f9fa 	bl	8004674 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fa00 	bl	8004686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b01      	cmp	r3, #1
 8004298:	d10e      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d107      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0201 	mvn.w	r2, #1
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fd fcba 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	2b80      	cmp	r3, #128	; 0x80
 80042c4:	d10e      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	2b80      	cmp	r3, #128	; 0x80
 80042d2:	d107      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fc5a 	bl	8004b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d10e      	bne.n	8004310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d107      	bne.n	8004310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f9c4 	bl	8004698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b20      	cmp	r3, #32
 800431c:	d10e      	bne.n	800433c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b20      	cmp	r3, #32
 800432a:	d107      	bne.n	800433c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0220 	mvn.w	r2, #32
 8004334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fc25 	bl	8004b86 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_TIM_IC_ConfigChannel+0x1a>
 800435a:	2302      	movs	r3, #2
 800435c:	e08a      	b.n	8004474 <HAL_TIM_IC_ConfigChannel+0x130>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6819      	ldr	r1, [r3, #0]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f000 f9f4 	bl	8004770 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 020c 	bic.w	r2, r2, #12
 8004396:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	619a      	str	r2, [r3, #24]
 80043aa:	e05a      	b.n	8004462 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d11c      	bne.n	80043ec <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6819      	ldr	r1, [r3, #0]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f000 fa5d 	bl	8004880 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6999      	ldr	r1, [r3, #24]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	021a      	lsls	r2, r3, #8
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	619a      	str	r2, [r3, #24]
 80043ea:	e03a      	b.n	8004462 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11b      	bne.n	800442a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f000 faa8 	bl	8004956 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 020c 	bic.w	r2, r2, #12
 8004414:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69d9      	ldr	r1, [r3, #28]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	61da      	str	r2, [r3, #28]
 8004428:	e01b      	b.n	8004462 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	6819      	ldr	r1, [r3, #0]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f000 fac7 	bl	80049cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800444c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69d9      	ldr	r1, [r3, #28]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	021a      	lsls	r2, r3, #8
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_TIM_ConfigClockSource+0x18>
 8004490:	2302      	movs	r3, #2
 8004492:	e0a6      	b.n	80045e2 <HAL_TIM_ConfigClockSource+0x166>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d067      	beq.n	800459c <HAL_TIM_ConfigClockSource+0x120>
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d80b      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x6c>
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d073      	beq.n	80045bc <HAL_TIM_ConfigClockSource+0x140>
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d802      	bhi.n	80044de <HAL_TIM_ConfigClockSource+0x62>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d06f      	beq.n	80045bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80044dc:	e078      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d06c      	beq.n	80045bc <HAL_TIM_ConfigClockSource+0x140>
 80044e2:	2b30      	cmp	r3, #48	; 0x30
 80044e4:	d06a      	beq.n	80045bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044e6:	e073      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044e8:	2b70      	cmp	r3, #112	; 0x70
 80044ea:	d00d      	beq.n	8004508 <HAL_TIM_ConfigClockSource+0x8c>
 80044ec:	2b70      	cmp	r3, #112	; 0x70
 80044ee:	d804      	bhi.n	80044fa <HAL_TIM_ConfigClockSource+0x7e>
 80044f0:	2b50      	cmp	r3, #80	; 0x50
 80044f2:	d033      	beq.n	800455c <HAL_TIM_ConfigClockSource+0xe0>
 80044f4:	2b60      	cmp	r3, #96	; 0x60
 80044f6:	d041      	beq.n	800457c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044f8:	e06a      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fe:	d066      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x152>
 8004500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004504:	d017      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004506:	e063      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6899      	ldr	r1, [r3, #8]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f000 faae 	bl	8004a78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800452a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	609a      	str	r2, [r3, #8]
      break;
 8004534:	e04c      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6899      	ldr	r1, [r3, #8]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f000 fa97 	bl	8004a78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004558:	609a      	str	r2, [r3, #8]
      break;
 800455a:	e039      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	461a      	mov	r2, r3
 800456a:	f000 f95b 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2150      	movs	r1, #80	; 0x50
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa65 	bl	8004a44 <TIM_ITRx_SetConfig>
      break;
 800457a:	e029      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	461a      	mov	r2, r3
 800458a:	f000 f9b5 	bl	80048f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2160      	movs	r1, #96	; 0x60
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fa55 	bl	8004a44 <TIM_ITRx_SetConfig>
      break;
 800459a:	e019      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	461a      	mov	r2, r3
 80045aa:	f000 f93b 	bl	8004824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2140      	movs	r1, #64	; 0x40
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fa45 	bl	8004a44 <TIM_ITRx_SetConfig>
      break;
 80045ba:	e009      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f000 fa3c 	bl	8004a44 <TIM_ITRx_SetConfig>
      break;
 80045cc:	e000      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80045ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b0c      	cmp	r3, #12
 80045fe:	d831      	bhi.n	8004664 <HAL_TIM_ReadCapturedValue+0x78>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800463d 	.word	0x0800463d
 800460c:	08004665 	.word	0x08004665
 8004610:	08004665 	.word	0x08004665
 8004614:	08004665 	.word	0x08004665
 8004618:	08004647 	.word	0x08004647
 800461c:	08004665 	.word	0x08004665
 8004620:	08004665 	.word	0x08004665
 8004624:	08004665 	.word	0x08004665
 8004628:	08004651 	.word	0x08004651
 800462c:	08004665 	.word	0x08004665
 8004630:	08004665 	.word	0x08004665
 8004634:	08004665 	.word	0x08004665
 8004638:	0800465b 	.word	0x0800465b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	60fb      	str	r3, [r7, #12]

      break;
 8004644:	e00f      	b.n	8004666 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	60fb      	str	r3, [r7, #12]

      break;
 800464e:	e00a      	b.n	8004666 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	60fb      	str	r3, [r7, #12]

      break;
 8004658:	e005      	b.n	8004666 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	60fb      	str	r3, [r7, #12]

      break;
 8004662:	e000      	b.n	8004666 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004664:	bf00      	nop
  }

  return tmpreg;
 8004666:	68fb      	ldr	r3, [r7, #12]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop

08004674 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
	...

080046ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a29      	ldr	r2, [pc, #164]	; (8004764 <TIM_Base_SetConfig+0xb8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00b      	beq.n	80046dc <TIM_Base_SetConfig+0x30>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ca:	d007      	beq.n	80046dc <TIM_Base_SetConfig+0x30>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a26      	ldr	r2, [pc, #152]	; (8004768 <TIM_Base_SetConfig+0xbc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_Base_SetConfig+0x30>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a25      	ldr	r2, [pc, #148]	; (800476c <TIM_Base_SetConfig+0xc0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d108      	bne.n	80046ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <TIM_Base_SetConfig+0xb8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00b      	beq.n	800470e <TIM_Base_SetConfig+0x62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fc:	d007      	beq.n	800470e <TIM_Base_SetConfig+0x62>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <TIM_Base_SetConfig+0xbc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_Base_SetConfig+0x62>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a18      	ldr	r2, [pc, #96]	; (800476c <TIM_Base_SetConfig+0xc0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d108      	bne.n	8004720 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a07      	ldr	r2, [pc, #28]	; (8004764 <TIM_Base_SetConfig+0xb8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d103      	bne.n	8004754 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	615a      	str	r2, [r3, #20]
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	bc80      	pop	{r7}
 8004762:	4770      	bx	lr
 8004764:	40012c00 	.word	0x40012c00
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800

08004770 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f023 0201 	bic.w	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <TIM_TI1_SetConfig+0xa8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00b      	beq.n	80047b6 <TIM_TI1_SetConfig+0x46>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a4:	d007      	beq.n	80047b6 <TIM_TI1_SetConfig+0x46>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a1c      	ldr	r2, [pc, #112]	; (800481c <TIM_TI1_SetConfig+0xac>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d003      	beq.n	80047b6 <TIM_TI1_SetConfig+0x46>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <TIM_TI1_SetConfig+0xb0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d101      	bne.n	80047ba <TIM_TI1_SetConfig+0x4a>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <TIM_TI1_SetConfig+0x4c>
 80047ba:	2300      	movs	r3, #0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e003      	b.n	80047da <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f023 030a 	bic.w	r3, r3, #10
 80047f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f003 030a 	and.w	r3, r3, #10
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800

08004824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f023 0201 	bic.w	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 030a 	bic.w	r3, r3, #10
 8004860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	621a      	str	r2, [r3, #32]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0210 	bic.w	r2, r3, #16
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	031b      	lsls	r3, r3, #12
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f023 0210 	bic.w	r2, r3, #16
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004922:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	031b      	lsls	r3, r3, #12
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004934:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr

08004956 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004956:	b480      	push	{r7}
 8004958:	b087      	sub	sp, #28
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004992:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	b2db      	uxtb	r3, r3
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	031b      	lsls	r3, r3, #12
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	031b      	lsls	r3, r3, #12
 8004a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f043 0307 	orr.w	r3, r3, #7
 8004a66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	609a      	str	r2, [r3, #8]
}
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	021a      	lsls	r2, r3, #8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	609a      	str	r2, [r3, #8]
}
 8004aac:	bf00      	nop
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr

08004ab6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b087      	sub	sp, #28
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	2201      	movs	r2, #1
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1a      	ldr	r2, [r3, #32]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	401a      	ands	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1a      	ldr	r2, [r3, #32]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	621a      	str	r2, [r3, #32]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e032      	b.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b4e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr

08004baa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e03f      	b.n	8004c3c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7fc ff1b 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2224      	movs	r2, #36	; 0x24
 8004bda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fb8e 	bl	8005310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c12:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c22:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	f040 8083 	bne.w	8004d6c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_UART_Transmit+0x2e>
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e07b      	b.n	8004d6e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_UART_Transmit+0x40>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e074      	b.n	8004d6e <HAL_UART_Transmit+0x12a>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2221      	movs	r2, #33	; 0x21
 8004c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004c9a:	f7fd fdf1 	bl	8002880 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cac:	e042      	b.n	8004d34 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc4:	d122      	bne.n	8004d0c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2180      	movs	r1, #128	; 0x80
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f9b3 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e046      	b.n	8004d6e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cf2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3302      	adds	r3, #2
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	e017      	b.n	8004d34 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	e013      	b.n	8004d34 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2200      	movs	r2, #0
 8004d14:	2180      	movs	r1, #128	; 0x80
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f990 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e023      	b.n	8004d6e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	60ba      	str	r2, [r7, #8]
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1b7      	bne.n	8004cae <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2140      	movs	r1, #64	; 0x40
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f977 	bl	800503c <UART_WaitOnFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e00a      	b.n	8004d6e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	4613      	mov	r3, r2
 8004d82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d140      	bne.n	8004e12 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_UART_Receive_IT+0x26>
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e039      	b.n	8004e14 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Receive_IT+0x38>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e032      	b.n	8004e14 <HAL_UART_Receive_IT+0x9e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2222      	movs	r2, #34	; 0x22
 8004dd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dec:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0220 	orr.w	r2, r2, #32
 8004e0c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e000      	b.n	8004e14 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004e12:	2302      	movs	r3, #2
  }
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10d      	bne.n	8004e72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_UART_IRQHandler+0x52>
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f9ce 	bl	800520c <UART_Receive_IT>
      return;
 8004e70:	e0cc      	b.n	800500c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80ab 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x1b0>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_UART_IRQHandler+0x70>
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80a0 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x90>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea8:	f043 0201 	orr.w	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_UART_IRQHandler+0xb0>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec8:	f043 0202 	orr.w	r2, r3, #2
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_UART_IRQHandler+0xd0>
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee8:	f043 0204 	orr.w	r2, r3, #4
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_UART_IRQHandler+0xf0>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	f043 0208 	orr.w	r2, r3, #8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d078      	beq.n	800500a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_UART_IRQHandler+0x112>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f96d 	bl	800520c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <HAL_UART_IRQHandler+0x13a>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d031      	beq.n	8004fbe <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8b8 	bl	80050d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d023      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d013      	beq.n	8004fae <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	4a22      	ldr	r2, [pc, #136]	; (8005014 <HAL_UART_IRQHandler+0x1f4>)
 8004f8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fd fdae 	bl	8002af4 <HAL_DMA_Abort_IT>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d016      	beq.n	8004fcc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fac:	e00e      	b.n	8004fcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f83b 	bl	800502a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	e00a      	b.n	8004fcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f837 	bl	800502a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbc:	e006      	b.n	8004fcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f833 	bl	800502a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004fca:	e01e      	b.n	800500a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fcc:	bf00      	nop
    return;
 8004fce:	e01c      	b.n	800500a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d008      	beq.n	8004fec <HAL_UART_IRQHandler+0x1cc>
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f8a4 	bl	8005132 <UART_Transmit_IT>
    return;
 8004fea:	e00f      	b.n	800500c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_UART_IRQHandler+0x1ec>
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f8eb 	bl	80051dc <UART_EndTransmit_IT>
    return;
 8005006:	bf00      	nop
 8005008:	e000      	b.n	800500c <HAL_UART_IRQHandler+0x1ec>
    return;
 800500a:	bf00      	nop
  }
}
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	0800510b 	.word	0x0800510b

08005018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504c:	e02c      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d028      	beq.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <UART_WaitOnFlagUntilTimeout+0x30>
 800505c:	f7fd fc10 	bl	8002880 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	429a      	cmp	r2, r3
 800506a:	d21d      	bcs.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800507a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e00f      	b.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4013      	ands	r3, r2
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	bf0c      	ite	eq
 80050b8:	2301      	moveq	r3, #1
 80050ba:	2300      	movne	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d0c3      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695a      	ldr	r2, [r3, #20]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ff80 	bl	800502a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b21      	cmp	r3, #33	; 0x21
 8005144:	d144      	bne.n	80051d0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514e:	d11a      	bne.n	8005186 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005164:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d105      	bne.n	800517a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	1c9a      	adds	r2, r3, #2
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	621a      	str	r2, [r3, #32]
 8005178:	e00e      	b.n	8005198 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	621a      	str	r2, [r3, #32]
 8005184:	e008      	b.n	8005198 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	1c59      	adds	r1, r3, #1
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6211      	str	r1, [r2, #32]
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4619      	mov	r1, r3
 80051a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10f      	bne.n	80051cc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff ff0b 	bl	8005018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b22      	cmp	r3, #34	; 0x22
 800521e:	d171      	bne.n	8005304 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005228:	d123      	bne.n	8005272 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10e      	bne.n	8005256 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	1c9a      	adds	r2, r3, #2
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
 8005254:	e029      	b.n	80052aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	b29b      	uxth	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
 8005270:	e01b      	b.n	80052aa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6858      	ldr	r0, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	1c59      	adds	r1, r3, #1
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6291      	str	r1, [r2, #40]	; 0x28
 800528a:	b2c2      	uxtb	r2, r0
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e00c      	b.n	80052aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	b2da      	uxtb	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	1c58      	adds	r0, r3, #1
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	6288      	str	r0, [r1, #40]	; 0x28
 80052a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4619      	mov	r1, r3
 80052b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d120      	bne.n	8005300 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0220 	bic.w	r2, r2, #32
 80052cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fd f976 	bl	80025e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e002      	b.n	8005306 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e000      	b.n	8005306 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800534a:	f023 030c 	bic.w	r3, r3, #12
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	430b      	orrs	r3, r1
 8005356:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a52      	ldr	r2, [pc, #328]	; (80054bc <UART_SetConfig+0x1ac>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d14e      	bne.n	8005416 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005378:	f7fe fde2 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 800537c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009a      	lsls	r2, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	fbb2 f3f3 	udiv	r3, r2, r3
 8005394:	4a4a      	ldr	r2, [pc, #296]	; (80054c0 <UART_SetConfig+0x1b0>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	0119      	lsls	r1, r3, #4
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	009a      	lsls	r2, r3, #2
 80053a8:	441a      	add	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80053b4:	4b42      	ldr	r3, [pc, #264]	; (80054c0 <UART_SetConfig+0x1b0>)
 80053b6:	fba3 0302 	umull	r0, r3, r3, r2
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	2064      	movs	r0, #100	; 0x64
 80053be:	fb00 f303 	mul.w	r3, r0, r3
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	3332      	adds	r3, #50	; 0x32
 80053c8:	4a3d      	ldr	r2, [pc, #244]	; (80054c0 <UART_SetConfig+0x1b0>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d4:	4419      	add	r1, r3
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4613      	mov	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	009a      	lsls	r2, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053ec:	4b34      	ldr	r3, [pc, #208]	; (80054c0 <UART_SetConfig+0x1b0>)
 80053ee:	fba3 0302 	umull	r0, r3, r3, r2
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	2064      	movs	r0, #100	; 0x64
 80053f6:	fb00 f303 	mul.w	r3, r0, r3
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	3332      	adds	r3, #50	; 0x32
 8005400:	4a2f      	ldr	r2, [pc, #188]	; (80054c0 <UART_SetConfig+0x1b0>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	f003 020f 	and.w	r2, r3, #15
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	440a      	add	r2, r1
 8005412:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005414:	e04d      	b.n	80054b2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005416:	f7fe fd7f 	bl	8003f18 <HAL_RCC_GetPCLK1Freq>
 800541a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009a      	lsls	r2, r3, #2
 8005426:	441a      	add	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	4a23      	ldr	r2, [pc, #140]	; (80054c0 <UART_SetConfig+0x1b0>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	0119      	lsls	r1, r3, #4
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009a      	lsls	r2, r3, #2
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005452:	4b1b      	ldr	r3, [pc, #108]	; (80054c0 <UART_SetConfig+0x1b0>)
 8005454:	fba3 0302 	umull	r0, r3, r3, r2
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	2064      	movs	r0, #100	; 0x64
 800545c:	fb00 f303 	mul.w	r3, r0, r3
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	3332      	adds	r3, #50	; 0x32
 8005466:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <UART_SetConfig+0x1b0>)
 8005468:	fba2 2303 	umull	r2, r3, r2, r3
 800546c:	095b      	lsrs	r3, r3, #5
 800546e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005472:	4419      	add	r1, r3
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009a      	lsls	r2, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	fbb2 f2f3 	udiv	r2, r2, r3
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <UART_SetConfig+0x1b0>)
 800548c:	fba3 0302 	umull	r0, r3, r3, r2
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	2064      	movs	r0, #100	; 0x64
 8005494:	fb00 f303 	mul.w	r3, r0, r3
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	3332      	adds	r3, #50	; 0x32
 800549e:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <UART_SetConfig+0x1b0>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	f003 020f 	and.w	r2, r3, #15
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	440a      	add	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]
}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40013800 	.word	0x40013800
 80054c0:	51eb851f 	.word	0x51eb851f

080054c4 <__errno>:
 80054c4:	4b01      	ldr	r3, [pc, #4]	; (80054cc <__errno+0x8>)
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	20000a4c 	.word	0x20000a4c

080054d0 <__libc_init_array>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	2500      	movs	r5, #0
 80054d4:	4e0c      	ldr	r6, [pc, #48]	; (8005508 <__libc_init_array+0x38>)
 80054d6:	4c0d      	ldr	r4, [pc, #52]	; (800550c <__libc_init_array+0x3c>)
 80054d8:	1ba4      	subs	r4, r4, r6
 80054da:	10a4      	asrs	r4, r4, #2
 80054dc:	42a5      	cmp	r5, r4
 80054de:	d109      	bne.n	80054f4 <__libc_init_array+0x24>
 80054e0:	f002 fd66 	bl	8007fb0 <_init>
 80054e4:	2500      	movs	r5, #0
 80054e6:	4e0a      	ldr	r6, [pc, #40]	; (8005510 <__libc_init_array+0x40>)
 80054e8:	4c0a      	ldr	r4, [pc, #40]	; (8005514 <__libc_init_array+0x44>)
 80054ea:	1ba4      	subs	r4, r4, r6
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	42a5      	cmp	r5, r4
 80054f0:	d105      	bne.n	80054fe <__libc_init_array+0x2e>
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054f8:	4798      	blx	r3
 80054fa:	3501      	adds	r5, #1
 80054fc:	e7ee      	b.n	80054dc <__libc_init_array+0xc>
 80054fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005502:	4798      	blx	r3
 8005504:	3501      	adds	r5, #1
 8005506:	e7f2      	b.n	80054ee <__libc_init_array+0x1e>
 8005508:	08008be8 	.word	0x08008be8
 800550c:	08008be8 	.word	0x08008be8
 8005510:	08008be8 	.word	0x08008be8
 8005514:	08008bec 	.word	0x08008bec

08005518 <memset>:
 8005518:	4603      	mov	r3, r0
 800551a:	4402      	add	r2, r0
 800551c:	4293      	cmp	r3, r2
 800551e:	d100      	bne.n	8005522 <memset+0xa>
 8005520:	4770      	bx	lr
 8005522:	f803 1b01 	strb.w	r1, [r3], #1
 8005526:	e7f9      	b.n	800551c <memset+0x4>

08005528 <__cvt>:
 8005528:	2b00      	cmp	r3, #0
 800552a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800552e:	461e      	mov	r6, r3
 8005530:	bfbb      	ittet	lt
 8005532:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005536:	461e      	movlt	r6, r3
 8005538:	2300      	movge	r3, #0
 800553a:	232d      	movlt	r3, #45	; 0x2d
 800553c:	b088      	sub	sp, #32
 800553e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005540:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005544:	f027 0720 	bic.w	r7, r7, #32
 8005548:	2f46      	cmp	r7, #70	; 0x46
 800554a:	4614      	mov	r4, r2
 800554c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800554e:	700b      	strb	r3, [r1, #0]
 8005550:	d004      	beq.n	800555c <__cvt+0x34>
 8005552:	2f45      	cmp	r7, #69	; 0x45
 8005554:	d100      	bne.n	8005558 <__cvt+0x30>
 8005556:	3501      	adds	r5, #1
 8005558:	2302      	movs	r3, #2
 800555a:	e000      	b.n	800555e <__cvt+0x36>
 800555c:	2303      	movs	r3, #3
 800555e:	aa07      	add	r2, sp, #28
 8005560:	9204      	str	r2, [sp, #16]
 8005562:	aa06      	add	r2, sp, #24
 8005564:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005568:	e9cd 3500 	strd	r3, r5, [sp]
 800556c:	4622      	mov	r2, r4
 800556e:	4633      	mov	r3, r6
 8005570:	f000 fe16 	bl	80061a0 <_dtoa_r>
 8005574:	2f47      	cmp	r7, #71	; 0x47
 8005576:	4680      	mov	r8, r0
 8005578:	d102      	bne.n	8005580 <__cvt+0x58>
 800557a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800557c:	07db      	lsls	r3, r3, #31
 800557e:	d526      	bpl.n	80055ce <__cvt+0xa6>
 8005580:	2f46      	cmp	r7, #70	; 0x46
 8005582:	eb08 0905 	add.w	r9, r8, r5
 8005586:	d111      	bne.n	80055ac <__cvt+0x84>
 8005588:	f898 3000 	ldrb.w	r3, [r8]
 800558c:	2b30      	cmp	r3, #48	; 0x30
 800558e:	d10a      	bne.n	80055a6 <__cvt+0x7e>
 8005590:	2200      	movs	r2, #0
 8005592:	2300      	movs	r3, #0
 8005594:	4620      	mov	r0, r4
 8005596:	4631      	mov	r1, r6
 8005598:	f7fb fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800559c:	b918      	cbnz	r0, 80055a6 <__cvt+0x7e>
 800559e:	f1c5 0501 	rsb	r5, r5, #1
 80055a2:	f8ca 5000 	str.w	r5, [sl]
 80055a6:	f8da 3000 	ldr.w	r3, [sl]
 80055aa:	4499      	add	r9, r3
 80055ac:	2200      	movs	r2, #0
 80055ae:	2300      	movs	r3, #0
 80055b0:	4620      	mov	r0, r4
 80055b2:	4631      	mov	r1, r6
 80055b4:	f7fb f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80055b8:	b938      	cbnz	r0, 80055ca <__cvt+0xa2>
 80055ba:	2230      	movs	r2, #48	; 0x30
 80055bc:	9b07      	ldr	r3, [sp, #28]
 80055be:	454b      	cmp	r3, r9
 80055c0:	d205      	bcs.n	80055ce <__cvt+0xa6>
 80055c2:	1c59      	adds	r1, r3, #1
 80055c4:	9107      	str	r1, [sp, #28]
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e7f8      	b.n	80055bc <__cvt+0x94>
 80055ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80055ce:	4640      	mov	r0, r8
 80055d0:	9b07      	ldr	r3, [sp, #28]
 80055d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80055d4:	eba3 0308 	sub.w	r3, r3, r8
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	b008      	add	sp, #32
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080055e0 <__exponent>:
 80055e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055e2:	2900      	cmp	r1, #0
 80055e4:	bfb4      	ite	lt
 80055e6:	232d      	movlt	r3, #45	; 0x2d
 80055e8:	232b      	movge	r3, #43	; 0x2b
 80055ea:	4604      	mov	r4, r0
 80055ec:	bfb8      	it	lt
 80055ee:	4249      	neglt	r1, r1
 80055f0:	2909      	cmp	r1, #9
 80055f2:	f804 2b02 	strb.w	r2, [r4], #2
 80055f6:	7043      	strb	r3, [r0, #1]
 80055f8:	dd21      	ble.n	800563e <__exponent+0x5e>
 80055fa:	f10d 0307 	add.w	r3, sp, #7
 80055fe:	461f      	mov	r7, r3
 8005600:	260a      	movs	r6, #10
 8005602:	fb91 f5f6 	sdiv	r5, r1, r6
 8005606:	fb06 1115 	mls	r1, r6, r5, r1
 800560a:	2d09      	cmp	r5, #9
 800560c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005610:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005614:	f103 32ff 	add.w	r2, r3, #4294967295
 8005618:	4629      	mov	r1, r5
 800561a:	dc09      	bgt.n	8005630 <__exponent+0x50>
 800561c:	3130      	adds	r1, #48	; 0x30
 800561e:	3b02      	subs	r3, #2
 8005620:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005624:	42bb      	cmp	r3, r7
 8005626:	4622      	mov	r2, r4
 8005628:	d304      	bcc.n	8005634 <__exponent+0x54>
 800562a:	1a10      	subs	r0, r2, r0
 800562c:	b003      	add	sp, #12
 800562e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005630:	4613      	mov	r3, r2
 8005632:	e7e6      	b.n	8005602 <__exponent+0x22>
 8005634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005638:	f804 2b01 	strb.w	r2, [r4], #1
 800563c:	e7f2      	b.n	8005624 <__exponent+0x44>
 800563e:	2330      	movs	r3, #48	; 0x30
 8005640:	4419      	add	r1, r3
 8005642:	7083      	strb	r3, [r0, #2]
 8005644:	1d02      	adds	r2, r0, #4
 8005646:	70c1      	strb	r1, [r0, #3]
 8005648:	e7ef      	b.n	800562a <__exponent+0x4a>
	...

0800564c <_printf_float>:
 800564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005650:	b091      	sub	sp, #68	; 0x44
 8005652:	460c      	mov	r4, r1
 8005654:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005656:	4693      	mov	fp, r2
 8005658:	461e      	mov	r6, r3
 800565a:	4605      	mov	r5, r0
 800565c:	f001 fcce 	bl	8006ffc <_localeconv_r>
 8005660:	6803      	ldr	r3, [r0, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	9309      	str	r3, [sp, #36]	; 0x24
 8005666:	f7fa fd73 	bl	8000150 <strlen>
 800566a:	2300      	movs	r3, #0
 800566c:	930e      	str	r3, [sp, #56]	; 0x38
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	900a      	str	r0, [sp, #40]	; 0x28
 8005672:	3307      	adds	r3, #7
 8005674:	f023 0307 	bic.w	r3, r3, #7
 8005678:	f103 0208 	add.w	r2, r3, #8
 800567c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005680:	f8d4 a000 	ldr.w	sl, [r4]
 8005684:	603a      	str	r2, [r7, #0]
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800568e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005696:	930b      	str	r3, [sp, #44]	; 0x2c
 8005698:	f04f 32ff 	mov.w	r2, #4294967295
 800569c:	4ba6      	ldr	r3, [pc, #664]	; (8005938 <_printf_float+0x2ec>)
 800569e:	4638      	mov	r0, r7
 80056a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056a2:	f7fb f9b3 	bl	8000a0c <__aeabi_dcmpun>
 80056a6:	bb68      	cbnz	r0, 8005704 <_printf_float+0xb8>
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	4ba2      	ldr	r3, [pc, #648]	; (8005938 <_printf_float+0x2ec>)
 80056ae:	4638      	mov	r0, r7
 80056b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056b2:	f7fb f98d 	bl	80009d0 <__aeabi_dcmple>
 80056b6:	bb28      	cbnz	r0, 8005704 <_printf_float+0xb8>
 80056b8:	2200      	movs	r2, #0
 80056ba:	2300      	movs	r3, #0
 80056bc:	4638      	mov	r0, r7
 80056be:	4649      	mov	r1, r9
 80056c0:	f7fb f97c 	bl	80009bc <__aeabi_dcmplt>
 80056c4:	b110      	cbz	r0, 80056cc <_printf_float+0x80>
 80056c6:	232d      	movs	r3, #45	; 0x2d
 80056c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056cc:	4f9b      	ldr	r7, [pc, #620]	; (800593c <_printf_float+0x2f0>)
 80056ce:	4b9c      	ldr	r3, [pc, #624]	; (8005940 <_printf_float+0x2f4>)
 80056d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056d4:	bf98      	it	ls
 80056d6:	461f      	movls	r7, r3
 80056d8:	2303      	movs	r3, #3
 80056da:	f04f 0900 	mov.w	r9, #0
 80056de:	6123      	str	r3, [r4, #16]
 80056e0:	f02a 0304 	bic.w	r3, sl, #4
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	9600      	str	r6, [sp, #0]
 80056e8:	465b      	mov	r3, fp
 80056ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80056ec:	4621      	mov	r1, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f9e2 	bl	8005ab8 <_printf_common>
 80056f4:	3001      	adds	r0, #1
 80056f6:	f040 8090 	bne.w	800581a <_printf_float+0x1ce>
 80056fa:	f04f 30ff 	mov.w	r0, #4294967295
 80056fe:	b011      	add	sp, #68	; 0x44
 8005700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005704:	463a      	mov	r2, r7
 8005706:	464b      	mov	r3, r9
 8005708:	4638      	mov	r0, r7
 800570a:	4649      	mov	r1, r9
 800570c:	f7fb f97e 	bl	8000a0c <__aeabi_dcmpun>
 8005710:	b110      	cbz	r0, 8005718 <_printf_float+0xcc>
 8005712:	4f8c      	ldr	r7, [pc, #560]	; (8005944 <_printf_float+0x2f8>)
 8005714:	4b8c      	ldr	r3, [pc, #560]	; (8005948 <_printf_float+0x2fc>)
 8005716:	e7db      	b.n	80056d0 <_printf_float+0x84>
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800571e:	1c59      	adds	r1, r3, #1
 8005720:	a80d      	add	r0, sp, #52	; 0x34
 8005722:	a90e      	add	r1, sp, #56	; 0x38
 8005724:	d140      	bne.n	80057a8 <_printf_float+0x15c>
 8005726:	2306      	movs	r3, #6
 8005728:	6063      	str	r3, [r4, #4]
 800572a:	f04f 0c00 	mov.w	ip, #0
 800572e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005732:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005736:	6863      	ldr	r3, [r4, #4]
 8005738:	6022      	str	r2, [r4, #0]
 800573a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	463a      	mov	r2, r7
 8005742:	464b      	mov	r3, r9
 8005744:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005748:	4628      	mov	r0, r5
 800574a:	f7ff feed 	bl	8005528 <__cvt>
 800574e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005752:	2b47      	cmp	r3, #71	; 0x47
 8005754:	4607      	mov	r7, r0
 8005756:	d109      	bne.n	800576c <_printf_float+0x120>
 8005758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800575a:	1cd8      	adds	r0, r3, #3
 800575c:	db02      	blt.n	8005764 <_printf_float+0x118>
 800575e:	6862      	ldr	r2, [r4, #4]
 8005760:	4293      	cmp	r3, r2
 8005762:	dd47      	ble.n	80057f4 <_printf_float+0x1a8>
 8005764:	f1a8 0802 	sub.w	r8, r8, #2
 8005768:	fa5f f888 	uxtb.w	r8, r8
 800576c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005770:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005772:	d824      	bhi.n	80057be <_printf_float+0x172>
 8005774:	3901      	subs	r1, #1
 8005776:	4642      	mov	r2, r8
 8005778:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800577c:	910d      	str	r1, [sp, #52]	; 0x34
 800577e:	f7ff ff2f 	bl	80055e0 <__exponent>
 8005782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005784:	4681      	mov	r9, r0
 8005786:	1813      	adds	r3, r2, r0
 8005788:	2a01      	cmp	r2, #1
 800578a:	6123      	str	r3, [r4, #16]
 800578c:	dc02      	bgt.n	8005794 <_printf_float+0x148>
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	07d1      	lsls	r1, r2, #31
 8005792:	d501      	bpl.n	8005798 <_printf_float+0x14c>
 8005794:	3301      	adds	r3, #1
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0a2      	beq.n	80056e6 <_printf_float+0x9a>
 80057a0:	232d      	movs	r3, #45	; 0x2d
 80057a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057a6:	e79e      	b.n	80056e6 <_printf_float+0x9a>
 80057a8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80057ac:	f000 816e 	beq.w	8005a8c <_printf_float+0x440>
 80057b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80057b4:	d1b9      	bne.n	800572a <_printf_float+0xde>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1b7      	bne.n	800572a <_printf_float+0xde>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e7b4      	b.n	8005728 <_printf_float+0xdc>
 80057be:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80057c2:	d119      	bne.n	80057f8 <_printf_float+0x1ac>
 80057c4:	2900      	cmp	r1, #0
 80057c6:	6863      	ldr	r3, [r4, #4]
 80057c8:	dd0c      	ble.n	80057e4 <_printf_float+0x198>
 80057ca:	6121      	str	r1, [r4, #16]
 80057cc:	b913      	cbnz	r3, 80057d4 <_printf_float+0x188>
 80057ce:	6822      	ldr	r2, [r4, #0]
 80057d0:	07d2      	lsls	r2, r2, #31
 80057d2:	d502      	bpl.n	80057da <_printf_float+0x18e>
 80057d4:	3301      	adds	r3, #1
 80057d6:	440b      	add	r3, r1
 80057d8:	6123      	str	r3, [r4, #16]
 80057da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057dc:	f04f 0900 	mov.w	r9, #0
 80057e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80057e2:	e7d9      	b.n	8005798 <_printf_float+0x14c>
 80057e4:	b913      	cbnz	r3, 80057ec <_printf_float+0x1a0>
 80057e6:	6822      	ldr	r2, [r4, #0]
 80057e8:	07d0      	lsls	r0, r2, #31
 80057ea:	d501      	bpl.n	80057f0 <_printf_float+0x1a4>
 80057ec:	3302      	adds	r3, #2
 80057ee:	e7f3      	b.n	80057d8 <_printf_float+0x18c>
 80057f0:	2301      	movs	r3, #1
 80057f2:	e7f1      	b.n	80057d8 <_printf_float+0x18c>
 80057f4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80057f8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80057fc:	4293      	cmp	r3, r2
 80057fe:	db05      	blt.n	800580c <_printf_float+0x1c0>
 8005800:	6822      	ldr	r2, [r4, #0]
 8005802:	6123      	str	r3, [r4, #16]
 8005804:	07d1      	lsls	r1, r2, #31
 8005806:	d5e8      	bpl.n	80057da <_printf_float+0x18e>
 8005808:	3301      	adds	r3, #1
 800580a:	e7e5      	b.n	80057d8 <_printf_float+0x18c>
 800580c:	2b00      	cmp	r3, #0
 800580e:	bfcc      	ite	gt
 8005810:	2301      	movgt	r3, #1
 8005812:	f1c3 0302 	rsble	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	e7de      	b.n	80057d8 <_printf_float+0x18c>
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	055a      	lsls	r2, r3, #21
 800581e:	d407      	bmi.n	8005830 <_printf_float+0x1e4>
 8005820:	6923      	ldr	r3, [r4, #16]
 8005822:	463a      	mov	r2, r7
 8005824:	4659      	mov	r1, fp
 8005826:	4628      	mov	r0, r5
 8005828:	47b0      	blx	r6
 800582a:	3001      	adds	r0, #1
 800582c:	d129      	bne.n	8005882 <_printf_float+0x236>
 800582e:	e764      	b.n	80056fa <_printf_float+0xae>
 8005830:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005834:	f240 80d7 	bls.w	80059e6 <_printf_float+0x39a>
 8005838:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800583c:	2200      	movs	r2, #0
 800583e:	2300      	movs	r3, #0
 8005840:	f7fb f8b2 	bl	80009a8 <__aeabi_dcmpeq>
 8005844:	b388      	cbz	r0, 80058aa <_printf_float+0x25e>
 8005846:	2301      	movs	r3, #1
 8005848:	4a40      	ldr	r2, [pc, #256]	; (800594c <_printf_float+0x300>)
 800584a:	4659      	mov	r1, fp
 800584c:	4628      	mov	r0, r5
 800584e:	47b0      	blx	r6
 8005850:	3001      	adds	r0, #1
 8005852:	f43f af52 	beq.w	80056fa <_printf_float+0xae>
 8005856:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800585a:	429a      	cmp	r2, r3
 800585c:	db02      	blt.n	8005864 <_printf_float+0x218>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	07d8      	lsls	r0, r3, #31
 8005862:	d50e      	bpl.n	8005882 <_printf_float+0x236>
 8005864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005868:	4659      	mov	r1, fp
 800586a:	4628      	mov	r0, r5
 800586c:	47b0      	blx	r6
 800586e:	3001      	adds	r0, #1
 8005870:	f43f af43 	beq.w	80056fa <_printf_float+0xae>
 8005874:	2700      	movs	r7, #0
 8005876:	f104 081a 	add.w	r8, r4, #26
 800587a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800587c:	3b01      	subs	r3, #1
 800587e:	42bb      	cmp	r3, r7
 8005880:	dc09      	bgt.n	8005896 <_printf_float+0x24a>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	079f      	lsls	r7, r3, #30
 8005886:	f100 80fd 	bmi.w	8005a84 <_printf_float+0x438>
 800588a:	68e0      	ldr	r0, [r4, #12]
 800588c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800588e:	4298      	cmp	r0, r3
 8005890:	bfb8      	it	lt
 8005892:	4618      	movlt	r0, r3
 8005894:	e733      	b.n	80056fe <_printf_float+0xb2>
 8005896:	2301      	movs	r3, #1
 8005898:	4642      	mov	r2, r8
 800589a:	4659      	mov	r1, fp
 800589c:	4628      	mov	r0, r5
 800589e:	47b0      	blx	r6
 80058a0:	3001      	adds	r0, #1
 80058a2:	f43f af2a 	beq.w	80056fa <_printf_float+0xae>
 80058a6:	3701      	adds	r7, #1
 80058a8:	e7e7      	b.n	800587a <_printf_float+0x22e>
 80058aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	dc2b      	bgt.n	8005908 <_printf_float+0x2bc>
 80058b0:	2301      	movs	r3, #1
 80058b2:	4a26      	ldr	r2, [pc, #152]	; (800594c <_printf_float+0x300>)
 80058b4:	4659      	mov	r1, fp
 80058b6:	4628      	mov	r0, r5
 80058b8:	47b0      	blx	r6
 80058ba:	3001      	adds	r0, #1
 80058bc:	f43f af1d 	beq.w	80056fa <_printf_float+0xae>
 80058c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058c2:	b923      	cbnz	r3, 80058ce <_printf_float+0x282>
 80058c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058c6:	b913      	cbnz	r3, 80058ce <_printf_float+0x282>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	07d9      	lsls	r1, r3, #31
 80058cc:	d5d9      	bpl.n	8005882 <_printf_float+0x236>
 80058ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058d2:	4659      	mov	r1, fp
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b0      	blx	r6
 80058d8:	3001      	adds	r0, #1
 80058da:	f43f af0e 	beq.w	80056fa <_printf_float+0xae>
 80058de:	f04f 0800 	mov.w	r8, #0
 80058e2:	f104 091a 	add.w	r9, r4, #26
 80058e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058e8:	425b      	negs	r3, r3
 80058ea:	4543      	cmp	r3, r8
 80058ec:	dc01      	bgt.n	80058f2 <_printf_float+0x2a6>
 80058ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f0:	e797      	b.n	8005822 <_printf_float+0x1d6>
 80058f2:	2301      	movs	r3, #1
 80058f4:	464a      	mov	r2, r9
 80058f6:	4659      	mov	r1, fp
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b0      	blx	r6
 80058fc:	3001      	adds	r0, #1
 80058fe:	f43f aefc 	beq.w	80056fa <_printf_float+0xae>
 8005902:	f108 0801 	add.w	r8, r8, #1
 8005906:	e7ee      	b.n	80058e6 <_printf_float+0x29a>
 8005908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800590a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800590c:	429a      	cmp	r2, r3
 800590e:	bfa8      	it	ge
 8005910:	461a      	movge	r2, r3
 8005912:	2a00      	cmp	r2, #0
 8005914:	4690      	mov	r8, r2
 8005916:	dd07      	ble.n	8005928 <_printf_float+0x2dc>
 8005918:	4613      	mov	r3, r2
 800591a:	4659      	mov	r1, fp
 800591c:	463a      	mov	r2, r7
 800591e:	4628      	mov	r0, r5
 8005920:	47b0      	blx	r6
 8005922:	3001      	adds	r0, #1
 8005924:	f43f aee9 	beq.w	80056fa <_printf_float+0xae>
 8005928:	f104 031a 	add.w	r3, r4, #26
 800592c:	f04f 0a00 	mov.w	sl, #0
 8005930:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005934:	930b      	str	r3, [sp, #44]	; 0x2c
 8005936:	e015      	b.n	8005964 <_printf_float+0x318>
 8005938:	7fefffff 	.word	0x7fefffff
 800593c:	0800892c 	.word	0x0800892c
 8005940:	08008928 	.word	0x08008928
 8005944:	08008934 	.word	0x08008934
 8005948:	08008930 	.word	0x08008930
 800594c:	08008938 	.word	0x08008938
 8005950:	2301      	movs	r3, #1
 8005952:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005954:	4659      	mov	r1, fp
 8005956:	4628      	mov	r0, r5
 8005958:	47b0      	blx	r6
 800595a:	3001      	adds	r0, #1
 800595c:	f43f aecd 	beq.w	80056fa <_printf_float+0xae>
 8005960:	f10a 0a01 	add.w	sl, sl, #1
 8005964:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005968:	eba9 0308 	sub.w	r3, r9, r8
 800596c:	4553      	cmp	r3, sl
 800596e:	dcef      	bgt.n	8005950 <_printf_float+0x304>
 8005970:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005974:	429a      	cmp	r2, r3
 8005976:	444f      	add	r7, r9
 8005978:	db14      	blt.n	80059a4 <_printf_float+0x358>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	07da      	lsls	r2, r3, #31
 800597e:	d411      	bmi.n	80059a4 <_printf_float+0x358>
 8005980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005982:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005984:	eba3 0209 	sub.w	r2, r3, r9
 8005988:	eba3 0901 	sub.w	r9, r3, r1
 800598c:	4591      	cmp	r9, r2
 800598e:	bfa8      	it	ge
 8005990:	4691      	movge	r9, r2
 8005992:	f1b9 0f00 	cmp.w	r9, #0
 8005996:	dc0d      	bgt.n	80059b4 <_printf_float+0x368>
 8005998:	2700      	movs	r7, #0
 800599a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800599e:	f104 081a 	add.w	r8, r4, #26
 80059a2:	e018      	b.n	80059d6 <_printf_float+0x38a>
 80059a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059a8:	4659      	mov	r1, fp
 80059aa:	4628      	mov	r0, r5
 80059ac:	47b0      	blx	r6
 80059ae:	3001      	adds	r0, #1
 80059b0:	d1e6      	bne.n	8005980 <_printf_float+0x334>
 80059b2:	e6a2      	b.n	80056fa <_printf_float+0xae>
 80059b4:	464b      	mov	r3, r9
 80059b6:	463a      	mov	r2, r7
 80059b8:	4659      	mov	r1, fp
 80059ba:	4628      	mov	r0, r5
 80059bc:	47b0      	blx	r6
 80059be:	3001      	adds	r0, #1
 80059c0:	d1ea      	bne.n	8005998 <_printf_float+0x34c>
 80059c2:	e69a      	b.n	80056fa <_printf_float+0xae>
 80059c4:	2301      	movs	r3, #1
 80059c6:	4642      	mov	r2, r8
 80059c8:	4659      	mov	r1, fp
 80059ca:	4628      	mov	r0, r5
 80059cc:	47b0      	blx	r6
 80059ce:	3001      	adds	r0, #1
 80059d0:	f43f ae93 	beq.w	80056fa <_printf_float+0xae>
 80059d4:	3701      	adds	r7, #1
 80059d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	eba3 0309 	sub.w	r3, r3, r9
 80059e0:	42bb      	cmp	r3, r7
 80059e2:	dcef      	bgt.n	80059c4 <_printf_float+0x378>
 80059e4:	e74d      	b.n	8005882 <_printf_float+0x236>
 80059e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059e8:	2a01      	cmp	r2, #1
 80059ea:	dc01      	bgt.n	80059f0 <_printf_float+0x3a4>
 80059ec:	07db      	lsls	r3, r3, #31
 80059ee:	d538      	bpl.n	8005a62 <_printf_float+0x416>
 80059f0:	2301      	movs	r3, #1
 80059f2:	463a      	mov	r2, r7
 80059f4:	4659      	mov	r1, fp
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b0      	blx	r6
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f ae7d 	beq.w	80056fa <_printf_float+0xae>
 8005a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a04:	4659      	mov	r1, fp
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b0      	blx	r6
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	f107 0701 	add.w	r7, r7, #1
 8005a10:	f43f ae73 	beq.w	80056fa <_printf_float+0xae>
 8005a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005a20:	2300      	movs	r3, #0
 8005a22:	f7fa ffc1 	bl	80009a8 <__aeabi_dcmpeq>
 8005a26:	b9c0      	cbnz	r0, 8005a5a <_printf_float+0x40e>
 8005a28:	4643      	mov	r3, r8
 8005a2a:	463a      	mov	r2, r7
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	4628      	mov	r0, r5
 8005a30:	47b0      	blx	r6
 8005a32:	3001      	adds	r0, #1
 8005a34:	d10d      	bne.n	8005a52 <_printf_float+0x406>
 8005a36:	e660      	b.n	80056fa <_printf_float+0xae>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	4642      	mov	r2, r8
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	4628      	mov	r0, r5
 8005a40:	47b0      	blx	r6
 8005a42:	3001      	adds	r0, #1
 8005a44:	f43f ae59 	beq.w	80056fa <_printf_float+0xae>
 8005a48:	3701      	adds	r7, #1
 8005a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	42bb      	cmp	r3, r7
 8005a50:	dcf2      	bgt.n	8005a38 <_printf_float+0x3ec>
 8005a52:	464b      	mov	r3, r9
 8005a54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a58:	e6e4      	b.n	8005824 <_printf_float+0x1d8>
 8005a5a:	2700      	movs	r7, #0
 8005a5c:	f104 081a 	add.w	r8, r4, #26
 8005a60:	e7f3      	b.n	8005a4a <_printf_float+0x3fe>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7e1      	b.n	8005a2a <_printf_float+0x3de>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4642      	mov	r2, r8
 8005a6a:	4659      	mov	r1, fp
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	47b0      	blx	r6
 8005a70:	3001      	adds	r0, #1
 8005a72:	f43f ae42 	beq.w	80056fa <_printf_float+0xae>
 8005a76:	3701      	adds	r7, #1
 8005a78:	68e3      	ldr	r3, [r4, #12]
 8005a7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	42bb      	cmp	r3, r7
 8005a80:	dcf1      	bgt.n	8005a66 <_printf_float+0x41a>
 8005a82:	e702      	b.n	800588a <_printf_float+0x23e>
 8005a84:	2700      	movs	r7, #0
 8005a86:	f104 0819 	add.w	r8, r4, #25
 8005a8a:	e7f5      	b.n	8005a78 <_printf_float+0x42c>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f43f ae94 	beq.w	80057ba <_printf_float+0x16e>
 8005a92:	f04f 0c00 	mov.w	ip, #0
 8005a96:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005a9a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005a9e:	6022      	str	r2, [r4, #0]
 8005aa0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005aa4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	463a      	mov	r2, r7
 8005aac:	464b      	mov	r3, r9
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f7ff fd3a 	bl	8005528 <__cvt>
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	e64f      	b.n	8005758 <_printf_float+0x10c>

08005ab8 <_printf_common>:
 8005ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005abc:	4691      	mov	r9, r2
 8005abe:	461f      	mov	r7, r3
 8005ac0:	688a      	ldr	r2, [r1, #8]
 8005ac2:	690b      	ldr	r3, [r1, #16]
 8005ac4:	4606      	mov	r6, r0
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	bfb8      	it	lt
 8005aca:	4613      	movlt	r3, r2
 8005acc:	f8c9 3000 	str.w	r3, [r9]
 8005ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ada:	b112      	cbz	r2, 8005ae2 <_printf_common+0x2a>
 8005adc:	3301      	adds	r3, #1
 8005ade:	f8c9 3000 	str.w	r3, [r9]
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	0699      	lsls	r1, r3, #26
 8005ae6:	bf42      	ittt	mi
 8005ae8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005aec:	3302      	addmi	r3, #2
 8005aee:	f8c9 3000 	strmi.w	r3, [r9]
 8005af2:	6825      	ldr	r5, [r4, #0]
 8005af4:	f015 0506 	ands.w	r5, r5, #6
 8005af8:	d107      	bne.n	8005b0a <_printf_common+0x52>
 8005afa:	f104 0a19 	add.w	sl, r4, #25
 8005afe:	68e3      	ldr	r3, [r4, #12]
 8005b00:	f8d9 2000 	ldr.w	r2, [r9]
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	42ab      	cmp	r3, r5
 8005b08:	dc29      	bgt.n	8005b5e <_printf_common+0xa6>
 8005b0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	3300      	adds	r3, #0
 8005b12:	bf18      	it	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	0692      	lsls	r2, r2, #26
 8005b18:	d42e      	bmi.n	8005b78 <_printf_common+0xc0>
 8005b1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b1e:	4639      	mov	r1, r7
 8005b20:	4630      	mov	r0, r6
 8005b22:	47c0      	blx	r8
 8005b24:	3001      	adds	r0, #1
 8005b26:	d021      	beq.n	8005b6c <_printf_common+0xb4>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	68e5      	ldr	r5, [r4, #12]
 8005b2c:	f003 0306 	and.w	r3, r3, #6
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	bf18      	it	ne
 8005b34:	2500      	movne	r5, #0
 8005b36:	f8d9 2000 	ldr.w	r2, [r9]
 8005b3a:	f04f 0900 	mov.w	r9, #0
 8005b3e:	bf08      	it	eq
 8005b40:	1aad      	subeq	r5, r5, r2
 8005b42:	68a3      	ldr	r3, [r4, #8]
 8005b44:	6922      	ldr	r2, [r4, #16]
 8005b46:	bf08      	it	eq
 8005b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	bfc4      	itt	gt
 8005b50:	1a9b      	subgt	r3, r3, r2
 8005b52:	18ed      	addgt	r5, r5, r3
 8005b54:	341a      	adds	r4, #26
 8005b56:	454d      	cmp	r5, r9
 8005b58:	d11a      	bne.n	8005b90 <_printf_common+0xd8>
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	e008      	b.n	8005b70 <_printf_common+0xb8>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	4652      	mov	r2, sl
 8005b62:	4639      	mov	r1, r7
 8005b64:	4630      	mov	r0, r6
 8005b66:	47c0      	blx	r8
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d103      	bne.n	8005b74 <_printf_common+0xbc>
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b74:	3501      	adds	r5, #1
 8005b76:	e7c2      	b.n	8005afe <_printf_common+0x46>
 8005b78:	2030      	movs	r0, #48	; 0x30
 8005b7a:	18e1      	adds	r1, r4, r3
 8005b7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b86:	4422      	add	r2, r4
 8005b88:	3302      	adds	r3, #2
 8005b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b8e:	e7c4      	b.n	8005b1a <_printf_common+0x62>
 8005b90:	2301      	movs	r3, #1
 8005b92:	4622      	mov	r2, r4
 8005b94:	4639      	mov	r1, r7
 8005b96:	4630      	mov	r0, r6
 8005b98:	47c0      	blx	r8
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d0e6      	beq.n	8005b6c <_printf_common+0xb4>
 8005b9e:	f109 0901 	add.w	r9, r9, #1
 8005ba2:	e7d8      	b.n	8005b56 <_printf_common+0x9e>

08005ba4 <_printf_i>:
 8005ba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ba8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005bac:	460c      	mov	r4, r1
 8005bae:	7e09      	ldrb	r1, [r1, #24]
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	296e      	cmp	r1, #110	; 0x6e
 8005bb4:	4617      	mov	r7, r2
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	4698      	mov	r8, r3
 8005bba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bbc:	f000 80b3 	beq.w	8005d26 <_printf_i+0x182>
 8005bc0:	d822      	bhi.n	8005c08 <_printf_i+0x64>
 8005bc2:	2963      	cmp	r1, #99	; 0x63
 8005bc4:	d036      	beq.n	8005c34 <_printf_i+0x90>
 8005bc6:	d80a      	bhi.n	8005bde <_printf_i+0x3a>
 8005bc8:	2900      	cmp	r1, #0
 8005bca:	f000 80b9 	beq.w	8005d40 <_printf_i+0x19c>
 8005bce:	2958      	cmp	r1, #88	; 0x58
 8005bd0:	f000 8083 	beq.w	8005cda <_printf_i+0x136>
 8005bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005bdc:	e032      	b.n	8005c44 <_printf_i+0xa0>
 8005bde:	2964      	cmp	r1, #100	; 0x64
 8005be0:	d001      	beq.n	8005be6 <_printf_i+0x42>
 8005be2:	2969      	cmp	r1, #105	; 0x69
 8005be4:	d1f6      	bne.n	8005bd4 <_printf_i+0x30>
 8005be6:	6820      	ldr	r0, [r4, #0]
 8005be8:	6813      	ldr	r3, [r2, #0]
 8005bea:	0605      	lsls	r5, r0, #24
 8005bec:	f103 0104 	add.w	r1, r3, #4
 8005bf0:	d52a      	bpl.n	8005c48 <_printf_i+0xa4>
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6011      	str	r1, [r2, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	da03      	bge.n	8005c02 <_printf_i+0x5e>
 8005bfa:	222d      	movs	r2, #45	; 0x2d
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c02:	486f      	ldr	r0, [pc, #444]	; (8005dc0 <_printf_i+0x21c>)
 8005c04:	220a      	movs	r2, #10
 8005c06:	e039      	b.n	8005c7c <_printf_i+0xd8>
 8005c08:	2973      	cmp	r1, #115	; 0x73
 8005c0a:	f000 809d 	beq.w	8005d48 <_printf_i+0x1a4>
 8005c0e:	d808      	bhi.n	8005c22 <_printf_i+0x7e>
 8005c10:	296f      	cmp	r1, #111	; 0x6f
 8005c12:	d020      	beq.n	8005c56 <_printf_i+0xb2>
 8005c14:	2970      	cmp	r1, #112	; 0x70
 8005c16:	d1dd      	bne.n	8005bd4 <_printf_i+0x30>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	f043 0320 	orr.w	r3, r3, #32
 8005c1e:	6023      	str	r3, [r4, #0]
 8005c20:	e003      	b.n	8005c2a <_printf_i+0x86>
 8005c22:	2975      	cmp	r1, #117	; 0x75
 8005c24:	d017      	beq.n	8005c56 <_printf_i+0xb2>
 8005c26:	2978      	cmp	r1, #120	; 0x78
 8005c28:	d1d4      	bne.n	8005bd4 <_printf_i+0x30>
 8005c2a:	2378      	movs	r3, #120	; 0x78
 8005c2c:	4865      	ldr	r0, [pc, #404]	; (8005dc4 <_printf_i+0x220>)
 8005c2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c32:	e055      	b.n	8005ce0 <_printf_i+0x13c>
 8005c34:	6813      	ldr	r3, [r2, #0]
 8005c36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c3a:	1d19      	adds	r1, r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6011      	str	r1, [r2, #0]
 8005c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c44:	2301      	movs	r3, #1
 8005c46:	e08c      	b.n	8005d62 <_printf_i+0x1be>
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c4e:	6011      	str	r1, [r2, #0]
 8005c50:	bf18      	it	ne
 8005c52:	b21b      	sxthne	r3, r3
 8005c54:	e7cf      	b.n	8005bf6 <_printf_i+0x52>
 8005c56:	6813      	ldr	r3, [r2, #0]
 8005c58:	6825      	ldr	r5, [r4, #0]
 8005c5a:	1d18      	adds	r0, r3, #4
 8005c5c:	6010      	str	r0, [r2, #0]
 8005c5e:	0628      	lsls	r0, r5, #24
 8005c60:	d501      	bpl.n	8005c66 <_printf_i+0xc2>
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	e002      	b.n	8005c6c <_printf_i+0xc8>
 8005c66:	0668      	lsls	r0, r5, #25
 8005c68:	d5fb      	bpl.n	8005c62 <_printf_i+0xbe>
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	296f      	cmp	r1, #111	; 0x6f
 8005c6e:	bf14      	ite	ne
 8005c70:	220a      	movne	r2, #10
 8005c72:	2208      	moveq	r2, #8
 8005c74:	4852      	ldr	r0, [pc, #328]	; (8005dc0 <_printf_i+0x21c>)
 8005c76:	2100      	movs	r1, #0
 8005c78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c7c:	6865      	ldr	r5, [r4, #4]
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	60a5      	str	r5, [r4, #8]
 8005c82:	f2c0 8095 	blt.w	8005db0 <_printf_i+0x20c>
 8005c86:	6821      	ldr	r1, [r4, #0]
 8005c88:	f021 0104 	bic.w	r1, r1, #4
 8005c8c:	6021      	str	r1, [r4, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d13d      	bne.n	8005d0e <_printf_i+0x16a>
 8005c92:	2d00      	cmp	r5, #0
 8005c94:	f040 808e 	bne.w	8005db4 <_printf_i+0x210>
 8005c98:	4665      	mov	r5, ip
 8005c9a:	2a08      	cmp	r2, #8
 8005c9c:	d10b      	bne.n	8005cb6 <_printf_i+0x112>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	07db      	lsls	r3, r3, #31
 8005ca2:	d508      	bpl.n	8005cb6 <_printf_i+0x112>
 8005ca4:	6923      	ldr	r3, [r4, #16]
 8005ca6:	6862      	ldr	r2, [r4, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	bfde      	ittt	le
 8005cac:	2330      	movle	r3, #48	; 0x30
 8005cae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cb6:	ebac 0305 	sub.w	r3, ip, r5
 8005cba:	6123      	str	r3, [r4, #16]
 8005cbc:	f8cd 8000 	str.w	r8, [sp]
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	aa03      	add	r2, sp, #12
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f7ff fef6 	bl	8005ab8 <_printf_common>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d14d      	bne.n	8005d6c <_printf_i+0x1c8>
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd4:	b005      	add	sp, #20
 8005cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cda:	4839      	ldr	r0, [pc, #228]	; (8005dc0 <_printf_i+0x21c>)
 8005cdc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ce0:	6813      	ldr	r3, [r2, #0]
 8005ce2:	6821      	ldr	r1, [r4, #0]
 8005ce4:	1d1d      	adds	r5, r3, #4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6015      	str	r5, [r2, #0]
 8005cea:	060a      	lsls	r2, r1, #24
 8005cec:	d50b      	bpl.n	8005d06 <_printf_i+0x162>
 8005cee:	07ca      	lsls	r2, r1, #31
 8005cf0:	bf44      	itt	mi
 8005cf2:	f041 0120 	orrmi.w	r1, r1, #32
 8005cf6:	6021      	strmi	r1, [r4, #0]
 8005cf8:	b91b      	cbnz	r3, 8005d02 <_printf_i+0x15e>
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	f022 0220 	bic.w	r2, r2, #32
 8005d00:	6022      	str	r2, [r4, #0]
 8005d02:	2210      	movs	r2, #16
 8005d04:	e7b7      	b.n	8005c76 <_printf_i+0xd2>
 8005d06:	064d      	lsls	r5, r1, #25
 8005d08:	bf48      	it	mi
 8005d0a:	b29b      	uxthmi	r3, r3
 8005d0c:	e7ef      	b.n	8005cee <_printf_i+0x14a>
 8005d0e:	4665      	mov	r5, ip
 8005d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d14:	fb02 3311 	mls	r3, r2, r1, r3
 8005d18:	5cc3      	ldrb	r3, [r0, r3]
 8005d1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d1e:	460b      	mov	r3, r1
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d1f5      	bne.n	8005d10 <_printf_i+0x16c>
 8005d24:	e7b9      	b.n	8005c9a <_printf_i+0xf6>
 8005d26:	6813      	ldr	r3, [r2, #0]
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1d18      	adds	r0, r3, #4
 8005d2c:	6961      	ldr	r1, [r4, #20]
 8005d2e:	6010      	str	r0, [r2, #0]
 8005d30:	0628      	lsls	r0, r5, #24
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	d501      	bpl.n	8005d3a <_printf_i+0x196>
 8005d36:	6019      	str	r1, [r3, #0]
 8005d38:	e002      	b.n	8005d40 <_printf_i+0x19c>
 8005d3a:	066a      	lsls	r2, r5, #25
 8005d3c:	d5fb      	bpl.n	8005d36 <_printf_i+0x192>
 8005d3e:	8019      	strh	r1, [r3, #0]
 8005d40:	2300      	movs	r3, #0
 8005d42:	4665      	mov	r5, ip
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	e7b9      	b.n	8005cbc <_printf_i+0x118>
 8005d48:	6813      	ldr	r3, [r2, #0]
 8005d4a:	1d19      	adds	r1, r3, #4
 8005d4c:	6011      	str	r1, [r2, #0]
 8005d4e:	681d      	ldr	r5, [r3, #0]
 8005d50:	6862      	ldr	r2, [r4, #4]
 8005d52:	2100      	movs	r1, #0
 8005d54:	4628      	mov	r0, r5
 8005d56:	f001 f9cb 	bl	80070f0 <memchr>
 8005d5a:	b108      	cbz	r0, 8005d60 <_printf_i+0x1bc>
 8005d5c:	1b40      	subs	r0, r0, r5
 8005d5e:	6060      	str	r0, [r4, #4]
 8005d60:	6863      	ldr	r3, [r4, #4]
 8005d62:	6123      	str	r3, [r4, #16]
 8005d64:	2300      	movs	r3, #0
 8005d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d6a:	e7a7      	b.n	8005cbc <_printf_i+0x118>
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	462a      	mov	r2, r5
 8005d70:	4639      	mov	r1, r7
 8005d72:	4630      	mov	r0, r6
 8005d74:	47c0      	blx	r8
 8005d76:	3001      	adds	r0, #1
 8005d78:	d0aa      	beq.n	8005cd0 <_printf_i+0x12c>
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	079b      	lsls	r3, r3, #30
 8005d7e:	d413      	bmi.n	8005da8 <_printf_i+0x204>
 8005d80:	68e0      	ldr	r0, [r4, #12]
 8005d82:	9b03      	ldr	r3, [sp, #12]
 8005d84:	4298      	cmp	r0, r3
 8005d86:	bfb8      	it	lt
 8005d88:	4618      	movlt	r0, r3
 8005d8a:	e7a3      	b.n	8005cd4 <_printf_i+0x130>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	464a      	mov	r2, r9
 8005d90:	4639      	mov	r1, r7
 8005d92:	4630      	mov	r0, r6
 8005d94:	47c0      	blx	r8
 8005d96:	3001      	adds	r0, #1
 8005d98:	d09a      	beq.n	8005cd0 <_printf_i+0x12c>
 8005d9a:	3501      	adds	r5, #1
 8005d9c:	68e3      	ldr	r3, [r4, #12]
 8005d9e:	9a03      	ldr	r2, [sp, #12]
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	42ab      	cmp	r3, r5
 8005da4:	dcf2      	bgt.n	8005d8c <_printf_i+0x1e8>
 8005da6:	e7eb      	b.n	8005d80 <_printf_i+0x1dc>
 8005da8:	2500      	movs	r5, #0
 8005daa:	f104 0919 	add.w	r9, r4, #25
 8005dae:	e7f5      	b.n	8005d9c <_printf_i+0x1f8>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ac      	bne.n	8005d0e <_printf_i+0x16a>
 8005db4:	7803      	ldrb	r3, [r0, #0]
 8005db6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dbe:	e76c      	b.n	8005c9a <_printf_i+0xf6>
 8005dc0:	0800893a 	.word	0x0800893a
 8005dc4:	0800894b 	.word	0x0800894b

08005dc8 <iprintf>:
 8005dc8:	b40f      	push	{r0, r1, r2, r3}
 8005dca:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <iprintf+0x2c>)
 8005dcc:	b513      	push	{r0, r1, r4, lr}
 8005dce:	681c      	ldr	r4, [r3, #0]
 8005dd0:	b124      	cbz	r4, 8005ddc <iprintf+0x14>
 8005dd2:	69a3      	ldr	r3, [r4, #24]
 8005dd4:	b913      	cbnz	r3, 8005ddc <iprintf+0x14>
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f001 f886 	bl	8006ee8 <__sinit>
 8005ddc:	ab05      	add	r3, sp, #20
 8005dde:	9a04      	ldr	r2, [sp, #16]
 8005de0:	68a1      	ldr	r1, [r4, #8]
 8005de2:	4620      	mov	r0, r4
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	f001 fea7 	bl	8007b38 <_vfiprintf_r>
 8005dea:	b002      	add	sp, #8
 8005dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df0:	b004      	add	sp, #16
 8005df2:	4770      	bx	lr
 8005df4:	20000a4c 	.word	0x20000a4c

08005df8 <_puts_r>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	460e      	mov	r6, r1
 8005dfc:	4605      	mov	r5, r0
 8005dfe:	b118      	cbz	r0, 8005e08 <_puts_r+0x10>
 8005e00:	6983      	ldr	r3, [r0, #24]
 8005e02:	b90b      	cbnz	r3, 8005e08 <_puts_r+0x10>
 8005e04:	f001 f870 	bl	8006ee8 <__sinit>
 8005e08:	69ab      	ldr	r3, [r5, #24]
 8005e0a:	68ac      	ldr	r4, [r5, #8]
 8005e0c:	b913      	cbnz	r3, 8005e14 <_puts_r+0x1c>
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f001 f86a 	bl	8006ee8 <__sinit>
 8005e14:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <_puts_r+0xac>)
 8005e16:	429c      	cmp	r4, r3
 8005e18:	d117      	bne.n	8005e4a <_puts_r+0x52>
 8005e1a:	686c      	ldr	r4, [r5, #4]
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	071b      	lsls	r3, r3, #28
 8005e20:	d51d      	bpl.n	8005e5e <_puts_r+0x66>
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	b1db      	cbz	r3, 8005e5e <_puts_r+0x66>
 8005e26:	3e01      	subs	r6, #1
 8005e28:	68a3      	ldr	r3, [r4, #8]
 8005e2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	60a3      	str	r3, [r4, #8]
 8005e32:	b9e9      	cbnz	r1, 8005e70 <_puts_r+0x78>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	da2e      	bge.n	8005e96 <_puts_r+0x9e>
 8005e38:	4622      	mov	r2, r4
 8005e3a:	210a      	movs	r1, #10
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f000 f85f 	bl	8005f00 <__swbuf_r>
 8005e42:	3001      	adds	r0, #1
 8005e44:	d011      	beq.n	8005e6a <_puts_r+0x72>
 8005e46:	200a      	movs	r0, #10
 8005e48:	e011      	b.n	8005e6e <_puts_r+0x76>
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <_puts_r+0xb0>)
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	d101      	bne.n	8005e54 <_puts_r+0x5c>
 8005e50:	68ac      	ldr	r4, [r5, #8]
 8005e52:	e7e3      	b.n	8005e1c <_puts_r+0x24>
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <_puts_r+0xb4>)
 8005e56:	429c      	cmp	r4, r3
 8005e58:	bf08      	it	eq
 8005e5a:	68ec      	ldreq	r4, [r5, #12]
 8005e5c:	e7de      	b.n	8005e1c <_puts_r+0x24>
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4628      	mov	r0, r5
 8005e62:	f000 f89f 	bl	8005fa4 <__swsetup_r>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d0dd      	beq.n	8005e26 <_puts_r+0x2e>
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	da04      	bge.n	8005e7e <_puts_r+0x86>
 8005e74:	69a2      	ldr	r2, [r4, #24]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	dc06      	bgt.n	8005e88 <_puts_r+0x90>
 8005e7a:	290a      	cmp	r1, #10
 8005e7c:	d004      	beq.n	8005e88 <_puts_r+0x90>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	6022      	str	r2, [r4, #0]
 8005e84:	7019      	strb	r1, [r3, #0]
 8005e86:	e7cf      	b.n	8005e28 <_puts_r+0x30>
 8005e88:	4622      	mov	r2, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f000 f838 	bl	8005f00 <__swbuf_r>
 8005e90:	3001      	adds	r0, #1
 8005e92:	d1c9      	bne.n	8005e28 <_puts_r+0x30>
 8005e94:	e7e9      	b.n	8005e6a <_puts_r+0x72>
 8005e96:	200a      	movs	r0, #10
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	6022      	str	r2, [r4, #0]
 8005e9e:	7018      	strb	r0, [r3, #0]
 8005ea0:	e7e5      	b.n	8005e6e <_puts_r+0x76>
 8005ea2:	bf00      	nop
 8005ea4:	0800898c 	.word	0x0800898c
 8005ea8:	080089ac 	.word	0x080089ac
 8005eac:	0800896c 	.word	0x0800896c

08005eb0 <puts>:
 8005eb0:	4b02      	ldr	r3, [pc, #8]	; (8005ebc <puts+0xc>)
 8005eb2:	4601      	mov	r1, r0
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	f7ff bf9f 	b.w	8005df8 <_puts_r>
 8005eba:	bf00      	nop
 8005ebc:	20000a4c 	.word	0x20000a4c

08005ec0 <siprintf>:
 8005ec0:	b40e      	push	{r1, r2, r3}
 8005ec2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ec6:	b500      	push	{lr}
 8005ec8:	b09c      	sub	sp, #112	; 0x70
 8005eca:	ab1d      	add	r3, sp, #116	; 0x74
 8005ecc:	9002      	str	r0, [sp, #8]
 8005ece:	9006      	str	r0, [sp, #24]
 8005ed0:	9107      	str	r1, [sp, #28]
 8005ed2:	9104      	str	r1, [sp, #16]
 8005ed4:	4808      	ldr	r0, [pc, #32]	; (8005ef8 <siprintf+0x38>)
 8005ed6:	4909      	ldr	r1, [pc, #36]	; (8005efc <siprintf+0x3c>)
 8005ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005edc:	9105      	str	r1, [sp, #20]
 8005ede:	6800      	ldr	r0, [r0, #0]
 8005ee0:	a902      	add	r1, sp, #8
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	f001 fd08 	bl	80078f8 <_svfiprintf_r>
 8005ee8:	2200      	movs	r2, #0
 8005eea:	9b02      	ldr	r3, [sp, #8]
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	b01c      	add	sp, #112	; 0x70
 8005ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ef4:	b003      	add	sp, #12
 8005ef6:	4770      	bx	lr
 8005ef8:	20000a4c 	.word	0x20000a4c
 8005efc:	ffff0208 	.word	0xffff0208

08005f00 <__swbuf_r>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	460e      	mov	r6, r1
 8005f04:	4614      	mov	r4, r2
 8005f06:	4605      	mov	r5, r0
 8005f08:	b118      	cbz	r0, 8005f12 <__swbuf_r+0x12>
 8005f0a:	6983      	ldr	r3, [r0, #24]
 8005f0c:	b90b      	cbnz	r3, 8005f12 <__swbuf_r+0x12>
 8005f0e:	f000 ffeb 	bl	8006ee8 <__sinit>
 8005f12:	4b21      	ldr	r3, [pc, #132]	; (8005f98 <__swbuf_r+0x98>)
 8005f14:	429c      	cmp	r4, r3
 8005f16:	d12a      	bne.n	8005f6e <__swbuf_r+0x6e>
 8005f18:	686c      	ldr	r4, [r5, #4]
 8005f1a:	69a3      	ldr	r3, [r4, #24]
 8005f1c:	60a3      	str	r3, [r4, #8]
 8005f1e:	89a3      	ldrh	r3, [r4, #12]
 8005f20:	071a      	lsls	r2, r3, #28
 8005f22:	d52e      	bpl.n	8005f82 <__swbuf_r+0x82>
 8005f24:	6923      	ldr	r3, [r4, #16]
 8005f26:	b363      	cbz	r3, 8005f82 <__swbuf_r+0x82>
 8005f28:	6923      	ldr	r3, [r4, #16]
 8005f2a:	6820      	ldr	r0, [r4, #0]
 8005f2c:	b2f6      	uxtb	r6, r6
 8005f2e:	1ac0      	subs	r0, r0, r3
 8005f30:	6963      	ldr	r3, [r4, #20]
 8005f32:	4637      	mov	r7, r6
 8005f34:	4283      	cmp	r3, r0
 8005f36:	dc04      	bgt.n	8005f42 <__swbuf_r+0x42>
 8005f38:	4621      	mov	r1, r4
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 ff6a 	bl	8006e14 <_fflush_r>
 8005f40:	bb28      	cbnz	r0, 8005f8e <__swbuf_r+0x8e>
 8005f42:	68a3      	ldr	r3, [r4, #8]
 8005f44:	3001      	adds	r0, #1
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60a3      	str	r3, [r4, #8]
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	6022      	str	r2, [r4, #0]
 8005f50:	701e      	strb	r6, [r3, #0]
 8005f52:	6963      	ldr	r3, [r4, #20]
 8005f54:	4283      	cmp	r3, r0
 8005f56:	d004      	beq.n	8005f62 <__swbuf_r+0x62>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	07db      	lsls	r3, r3, #31
 8005f5c:	d519      	bpl.n	8005f92 <__swbuf_r+0x92>
 8005f5e:	2e0a      	cmp	r6, #10
 8005f60:	d117      	bne.n	8005f92 <__swbuf_r+0x92>
 8005f62:	4621      	mov	r1, r4
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 ff55 	bl	8006e14 <_fflush_r>
 8005f6a:	b190      	cbz	r0, 8005f92 <__swbuf_r+0x92>
 8005f6c:	e00f      	b.n	8005f8e <__swbuf_r+0x8e>
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <__swbuf_r+0x9c>)
 8005f70:	429c      	cmp	r4, r3
 8005f72:	d101      	bne.n	8005f78 <__swbuf_r+0x78>
 8005f74:	68ac      	ldr	r4, [r5, #8]
 8005f76:	e7d0      	b.n	8005f1a <__swbuf_r+0x1a>
 8005f78:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <__swbuf_r+0xa0>)
 8005f7a:	429c      	cmp	r4, r3
 8005f7c:	bf08      	it	eq
 8005f7e:	68ec      	ldreq	r4, [r5, #12]
 8005f80:	e7cb      	b.n	8005f1a <__swbuf_r+0x1a>
 8005f82:	4621      	mov	r1, r4
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 f80d 	bl	8005fa4 <__swsetup_r>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d0cc      	beq.n	8005f28 <__swbuf_r+0x28>
 8005f8e:	f04f 37ff 	mov.w	r7, #4294967295
 8005f92:	4638      	mov	r0, r7
 8005f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f96:	bf00      	nop
 8005f98:	0800898c 	.word	0x0800898c
 8005f9c:	080089ac 	.word	0x080089ac
 8005fa0:	0800896c 	.word	0x0800896c

08005fa4 <__swsetup_r>:
 8005fa4:	4b32      	ldr	r3, [pc, #200]	; (8006070 <__swsetup_r+0xcc>)
 8005fa6:	b570      	push	{r4, r5, r6, lr}
 8005fa8:	681d      	ldr	r5, [r3, #0]
 8005faa:	4606      	mov	r6, r0
 8005fac:	460c      	mov	r4, r1
 8005fae:	b125      	cbz	r5, 8005fba <__swsetup_r+0x16>
 8005fb0:	69ab      	ldr	r3, [r5, #24]
 8005fb2:	b913      	cbnz	r3, 8005fba <__swsetup_r+0x16>
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f000 ff97 	bl	8006ee8 <__sinit>
 8005fba:	4b2e      	ldr	r3, [pc, #184]	; (8006074 <__swsetup_r+0xd0>)
 8005fbc:	429c      	cmp	r4, r3
 8005fbe:	d10f      	bne.n	8005fe0 <__swsetup_r+0x3c>
 8005fc0:	686c      	ldr	r4, [r5, #4]
 8005fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	0715      	lsls	r5, r2, #28
 8005fca:	d42c      	bmi.n	8006026 <__swsetup_r+0x82>
 8005fcc:	06d0      	lsls	r0, r2, #27
 8005fce:	d411      	bmi.n	8005ff4 <__swsetup_r+0x50>
 8005fd0:	2209      	movs	r2, #9
 8005fd2:	6032      	str	r2, [r6, #0]
 8005fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd8:	81a3      	strh	r3, [r4, #12]
 8005fda:	f04f 30ff 	mov.w	r0, #4294967295
 8005fde:	e03e      	b.n	800605e <__swsetup_r+0xba>
 8005fe0:	4b25      	ldr	r3, [pc, #148]	; (8006078 <__swsetup_r+0xd4>)
 8005fe2:	429c      	cmp	r4, r3
 8005fe4:	d101      	bne.n	8005fea <__swsetup_r+0x46>
 8005fe6:	68ac      	ldr	r4, [r5, #8]
 8005fe8:	e7eb      	b.n	8005fc2 <__swsetup_r+0x1e>
 8005fea:	4b24      	ldr	r3, [pc, #144]	; (800607c <__swsetup_r+0xd8>)
 8005fec:	429c      	cmp	r4, r3
 8005fee:	bf08      	it	eq
 8005ff0:	68ec      	ldreq	r4, [r5, #12]
 8005ff2:	e7e6      	b.n	8005fc2 <__swsetup_r+0x1e>
 8005ff4:	0751      	lsls	r1, r2, #29
 8005ff6:	d512      	bpl.n	800601e <__swsetup_r+0x7a>
 8005ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ffa:	b141      	cbz	r1, 800600e <__swsetup_r+0x6a>
 8005ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006000:	4299      	cmp	r1, r3
 8006002:	d002      	beq.n	800600a <__swsetup_r+0x66>
 8006004:	4630      	mov	r0, r6
 8006006:	f001 fb77 	bl	80076f8 <_free_r>
 800600a:	2300      	movs	r3, #0
 800600c:	6363      	str	r3, [r4, #52]	; 0x34
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006014:	81a3      	strh	r3, [r4, #12]
 8006016:	2300      	movs	r3, #0
 8006018:	6063      	str	r3, [r4, #4]
 800601a:	6923      	ldr	r3, [r4, #16]
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	f043 0308 	orr.w	r3, r3, #8
 8006024:	81a3      	strh	r3, [r4, #12]
 8006026:	6923      	ldr	r3, [r4, #16]
 8006028:	b94b      	cbnz	r3, 800603e <__swsetup_r+0x9a>
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006034:	d003      	beq.n	800603e <__swsetup_r+0x9a>
 8006036:	4621      	mov	r1, r4
 8006038:	4630      	mov	r0, r6
 800603a:	f001 f811 	bl	8007060 <__smakebuf_r>
 800603e:	89a2      	ldrh	r2, [r4, #12]
 8006040:	f012 0301 	ands.w	r3, r2, #1
 8006044:	d00c      	beq.n	8006060 <__swsetup_r+0xbc>
 8006046:	2300      	movs	r3, #0
 8006048:	60a3      	str	r3, [r4, #8]
 800604a:	6963      	ldr	r3, [r4, #20]
 800604c:	425b      	negs	r3, r3
 800604e:	61a3      	str	r3, [r4, #24]
 8006050:	6923      	ldr	r3, [r4, #16]
 8006052:	b953      	cbnz	r3, 800606a <__swsetup_r+0xc6>
 8006054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006058:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800605c:	d1ba      	bne.n	8005fd4 <__swsetup_r+0x30>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	0792      	lsls	r2, r2, #30
 8006062:	bf58      	it	pl
 8006064:	6963      	ldrpl	r3, [r4, #20]
 8006066:	60a3      	str	r3, [r4, #8]
 8006068:	e7f2      	b.n	8006050 <__swsetup_r+0xac>
 800606a:	2000      	movs	r0, #0
 800606c:	e7f7      	b.n	800605e <__swsetup_r+0xba>
 800606e:	bf00      	nop
 8006070:	20000a4c 	.word	0x20000a4c
 8006074:	0800898c 	.word	0x0800898c
 8006078:	080089ac 	.word	0x080089ac
 800607c:	0800896c 	.word	0x0800896c

08006080 <quorem>:
 8006080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	6903      	ldr	r3, [r0, #16]
 8006086:	690c      	ldr	r4, [r1, #16]
 8006088:	4680      	mov	r8, r0
 800608a:	42a3      	cmp	r3, r4
 800608c:	f2c0 8084 	blt.w	8006198 <quorem+0x118>
 8006090:	3c01      	subs	r4, #1
 8006092:	f101 0714 	add.w	r7, r1, #20
 8006096:	f100 0614 	add.w	r6, r0, #20
 800609a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800609e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80060a2:	3501      	adds	r5, #1
 80060a4:	fbb0 f5f5 	udiv	r5, r0, r5
 80060a8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80060ac:	eb06 030c 	add.w	r3, r6, ip
 80060b0:	eb07 090c 	add.w	r9, r7, ip
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	b39d      	cbz	r5, 8006120 <quorem+0xa0>
 80060b8:	f04f 0a00 	mov.w	sl, #0
 80060bc:	4638      	mov	r0, r7
 80060be:	46b6      	mov	lr, r6
 80060c0:	46d3      	mov	fp, sl
 80060c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80060c6:	b293      	uxth	r3, r2
 80060c8:	fb05 a303 	mla	r3, r5, r3, sl
 80060cc:	0c12      	lsrs	r2, r2, #16
 80060ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060d2:	fb05 a202 	mla	r2, r5, r2, sl
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ebab 0303 	sub.w	r3, fp, r3
 80060dc:	f8de b000 	ldr.w	fp, [lr]
 80060e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80060e4:	fa1f fb8b 	uxth.w	fp, fp
 80060e8:	445b      	add	r3, fp
 80060ea:	fa1f fb82 	uxth.w	fp, r2
 80060ee:	f8de 2000 	ldr.w	r2, [lr]
 80060f2:	4581      	cmp	r9, r0
 80060f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80060f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006102:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006106:	f84e 3b04 	str.w	r3, [lr], #4
 800610a:	d2da      	bcs.n	80060c2 <quorem+0x42>
 800610c:	f856 300c 	ldr.w	r3, [r6, ip]
 8006110:	b933      	cbnz	r3, 8006120 <quorem+0xa0>
 8006112:	9b01      	ldr	r3, [sp, #4]
 8006114:	3b04      	subs	r3, #4
 8006116:	429e      	cmp	r6, r3
 8006118:	461a      	mov	r2, r3
 800611a:	d331      	bcc.n	8006180 <quorem+0x100>
 800611c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006120:	4640      	mov	r0, r8
 8006122:	f001 fa13 	bl	800754c <__mcmp>
 8006126:	2800      	cmp	r0, #0
 8006128:	db26      	blt.n	8006178 <quorem+0xf8>
 800612a:	4630      	mov	r0, r6
 800612c:	f04f 0c00 	mov.w	ip, #0
 8006130:	3501      	adds	r5, #1
 8006132:	f857 1b04 	ldr.w	r1, [r7], #4
 8006136:	f8d0 e000 	ldr.w	lr, [r0]
 800613a:	b28b      	uxth	r3, r1
 800613c:	ebac 0303 	sub.w	r3, ip, r3
 8006140:	fa1f f28e 	uxth.w	r2, lr
 8006144:	4413      	add	r3, r2
 8006146:	0c0a      	lsrs	r2, r1, #16
 8006148:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800614c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006150:	b29b      	uxth	r3, r3
 8006152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006156:	45b9      	cmp	r9, r7
 8006158:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800615c:	f840 3b04 	str.w	r3, [r0], #4
 8006160:	d2e7      	bcs.n	8006132 <quorem+0xb2>
 8006162:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006166:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800616a:	b92a      	cbnz	r2, 8006178 <quorem+0xf8>
 800616c:	3b04      	subs	r3, #4
 800616e:	429e      	cmp	r6, r3
 8006170:	461a      	mov	r2, r3
 8006172:	d30b      	bcc.n	800618c <quorem+0x10c>
 8006174:	f8c8 4010 	str.w	r4, [r8, #16]
 8006178:	4628      	mov	r0, r5
 800617a:	b003      	add	sp, #12
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	3b04      	subs	r3, #4
 8006184:	2a00      	cmp	r2, #0
 8006186:	d1c9      	bne.n	800611c <quorem+0x9c>
 8006188:	3c01      	subs	r4, #1
 800618a:	e7c4      	b.n	8006116 <quorem+0x96>
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	3b04      	subs	r3, #4
 8006190:	2a00      	cmp	r2, #0
 8006192:	d1ef      	bne.n	8006174 <quorem+0xf4>
 8006194:	3c01      	subs	r4, #1
 8006196:	e7ea      	b.n	800616e <quorem+0xee>
 8006198:	2000      	movs	r0, #0
 800619a:	e7ee      	b.n	800617a <quorem+0xfa>
 800619c:	0000      	movs	r0, r0
	...

080061a0 <_dtoa_r>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	4616      	mov	r6, r2
 80061a6:	461f      	mov	r7, r3
 80061a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061aa:	b095      	sub	sp, #84	; 0x54
 80061ac:	4604      	mov	r4, r0
 80061ae:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80061b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80061b6:	b93d      	cbnz	r5, 80061c8 <_dtoa_r+0x28>
 80061b8:	2010      	movs	r0, #16
 80061ba:	f000 ff91 	bl	80070e0 <malloc>
 80061be:	6260      	str	r0, [r4, #36]	; 0x24
 80061c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80061c4:	6005      	str	r5, [r0, #0]
 80061c6:	60c5      	str	r5, [r0, #12]
 80061c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061ca:	6819      	ldr	r1, [r3, #0]
 80061cc:	b151      	cbz	r1, 80061e4 <_dtoa_r+0x44>
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	2301      	movs	r3, #1
 80061d2:	4093      	lsls	r3, r2
 80061d4:	604a      	str	r2, [r1, #4]
 80061d6:	608b      	str	r3, [r1, #8]
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 ffd6 	bl	800718a <_Bfree>
 80061de:	2200      	movs	r2, #0
 80061e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	1e3b      	subs	r3, r7, #0
 80061e6:	bfaf      	iteee	ge
 80061e8:	2300      	movge	r3, #0
 80061ea:	2201      	movlt	r2, #1
 80061ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061f0:	9303      	strlt	r3, [sp, #12]
 80061f2:	bfac      	ite	ge
 80061f4:	f8c8 3000 	strge.w	r3, [r8]
 80061f8:	f8c8 2000 	strlt.w	r2, [r8]
 80061fc:	4bae      	ldr	r3, [pc, #696]	; (80064b8 <_dtoa_r+0x318>)
 80061fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006202:	ea33 0308 	bics.w	r3, r3, r8
 8006206:	d11b      	bne.n	8006240 <_dtoa_r+0xa0>
 8006208:	f242 730f 	movw	r3, #9999	; 0x270f
 800620c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	9b02      	ldr	r3, [sp, #8]
 8006212:	b923      	cbnz	r3, 800621e <_dtoa_r+0x7e>
 8006214:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006218:	2800      	cmp	r0, #0
 800621a:	f000 8545 	beq.w	8006ca8 <_dtoa_r+0xb08>
 800621e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006220:	b953      	cbnz	r3, 8006238 <_dtoa_r+0x98>
 8006222:	4ba6      	ldr	r3, [pc, #664]	; (80064bc <_dtoa_r+0x31c>)
 8006224:	e021      	b.n	800626a <_dtoa_r+0xca>
 8006226:	4ba6      	ldr	r3, [pc, #664]	; (80064c0 <_dtoa_r+0x320>)
 8006228:	9306      	str	r3, [sp, #24]
 800622a:	3308      	adds	r3, #8
 800622c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	9806      	ldr	r0, [sp, #24]
 8006232:	b015      	add	sp, #84	; 0x54
 8006234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006238:	4ba0      	ldr	r3, [pc, #640]	; (80064bc <_dtoa_r+0x31c>)
 800623a:	9306      	str	r3, [sp, #24]
 800623c:	3303      	adds	r3, #3
 800623e:	e7f5      	b.n	800622c <_dtoa_r+0x8c>
 8006240:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006244:	2200      	movs	r2, #0
 8006246:	2300      	movs	r3, #0
 8006248:	4630      	mov	r0, r6
 800624a:	4639      	mov	r1, r7
 800624c:	f7fa fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8006250:	4682      	mov	sl, r0
 8006252:	b160      	cbz	r0, 800626e <_dtoa_r+0xce>
 8006254:	2301      	movs	r3, #1
 8006256:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8520 	beq.w	8006ca2 <_dtoa_r+0xb02>
 8006262:	4b98      	ldr	r3, [pc, #608]	; (80064c4 <_dtoa_r+0x324>)
 8006264:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	3b01      	subs	r3, #1
 800626a:	9306      	str	r3, [sp, #24]
 800626c:	e7e0      	b.n	8006230 <_dtoa_r+0x90>
 800626e:	ab12      	add	r3, sp, #72	; 0x48
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	ab13      	add	r3, sp, #76	; 0x4c
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4632      	mov	r2, r6
 8006278:	463b      	mov	r3, r7
 800627a:	4620      	mov	r0, r4
 800627c:	f001 f9de 	bl	800763c <__d2b>
 8006280:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006284:	4683      	mov	fp, r0
 8006286:	2d00      	cmp	r5, #0
 8006288:	d07d      	beq.n	8006386 <_dtoa_r+0x1e6>
 800628a:	46b0      	mov	r8, r6
 800628c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006290:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006294:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006298:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800629c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80062a0:	2200      	movs	r2, #0
 80062a2:	4b89      	ldr	r3, [pc, #548]	; (80064c8 <_dtoa_r+0x328>)
 80062a4:	4640      	mov	r0, r8
 80062a6:	4649      	mov	r1, r9
 80062a8:	f7f9 ff5e 	bl	8000168 <__aeabi_dsub>
 80062ac:	a37c      	add	r3, pc, #496	; (adr r3, 80064a0 <_dtoa_r+0x300>)
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f7fa f911 	bl	80004d8 <__aeabi_dmul>
 80062b6:	a37c      	add	r3, pc, #496	; (adr r3, 80064a8 <_dtoa_r+0x308>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f7f9 ff56 	bl	800016c <__adddf3>
 80062c0:	4606      	mov	r6, r0
 80062c2:	4628      	mov	r0, r5
 80062c4:	460f      	mov	r7, r1
 80062c6:	f7fa f89d 	bl	8000404 <__aeabi_i2d>
 80062ca:	a379      	add	r3, pc, #484	; (adr r3, 80064b0 <_dtoa_r+0x310>)
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	f7fa f902 	bl	80004d8 <__aeabi_dmul>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4630      	mov	r0, r6
 80062da:	4639      	mov	r1, r7
 80062dc:	f7f9 ff46 	bl	800016c <__adddf3>
 80062e0:	4606      	mov	r6, r0
 80062e2:	460f      	mov	r7, r1
 80062e4:	f7fa fba8 	bl	8000a38 <__aeabi_d2iz>
 80062e8:	2200      	movs	r2, #0
 80062ea:	4682      	mov	sl, r0
 80062ec:	2300      	movs	r3, #0
 80062ee:	4630      	mov	r0, r6
 80062f0:	4639      	mov	r1, r7
 80062f2:	f7fa fb63 	bl	80009bc <__aeabi_dcmplt>
 80062f6:	b148      	cbz	r0, 800630c <_dtoa_r+0x16c>
 80062f8:	4650      	mov	r0, sl
 80062fa:	f7fa f883 	bl	8000404 <__aeabi_i2d>
 80062fe:	4632      	mov	r2, r6
 8006300:	463b      	mov	r3, r7
 8006302:	f7fa fb51 	bl	80009a8 <__aeabi_dcmpeq>
 8006306:	b908      	cbnz	r0, 800630c <_dtoa_r+0x16c>
 8006308:	f10a 3aff 	add.w	sl, sl, #4294967295
 800630c:	f1ba 0f16 	cmp.w	sl, #22
 8006310:	d85a      	bhi.n	80063c8 <_dtoa_r+0x228>
 8006312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006316:	496d      	ldr	r1, [pc, #436]	; (80064cc <_dtoa_r+0x32c>)
 8006318:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800631c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006320:	f7fa fb6a 	bl	80009f8 <__aeabi_dcmpgt>
 8006324:	2800      	cmp	r0, #0
 8006326:	d051      	beq.n	80063cc <_dtoa_r+0x22c>
 8006328:	2300      	movs	r3, #0
 800632a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800632e:	930d      	str	r3, [sp, #52]	; 0x34
 8006330:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006332:	1b5d      	subs	r5, r3, r5
 8006334:	1e6b      	subs	r3, r5, #1
 8006336:	9307      	str	r3, [sp, #28]
 8006338:	bf43      	ittte	mi
 800633a:	2300      	movmi	r3, #0
 800633c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006340:	9307      	strmi	r3, [sp, #28]
 8006342:	f04f 0900 	movpl.w	r9, #0
 8006346:	f1ba 0f00 	cmp.w	sl, #0
 800634a:	db41      	blt.n	80063d0 <_dtoa_r+0x230>
 800634c:	9b07      	ldr	r3, [sp, #28]
 800634e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006352:	4453      	add	r3, sl
 8006354:	9307      	str	r3, [sp, #28]
 8006356:	2300      	movs	r3, #0
 8006358:	9308      	str	r3, [sp, #32]
 800635a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800635c:	2b09      	cmp	r3, #9
 800635e:	f200 808f 	bhi.w	8006480 <_dtoa_r+0x2e0>
 8006362:	2b05      	cmp	r3, #5
 8006364:	bfc4      	itt	gt
 8006366:	3b04      	subgt	r3, #4
 8006368:	931e      	strgt	r3, [sp, #120]	; 0x78
 800636a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800636c:	bfc8      	it	gt
 800636e:	2500      	movgt	r5, #0
 8006370:	f1a3 0302 	sub.w	r3, r3, #2
 8006374:	bfd8      	it	le
 8006376:	2501      	movle	r5, #1
 8006378:	2b03      	cmp	r3, #3
 800637a:	f200 808d 	bhi.w	8006498 <_dtoa_r+0x2f8>
 800637e:	e8df f003 	tbb	[pc, r3]
 8006382:	7d7b      	.short	0x7d7b
 8006384:	6f2f      	.short	0x6f2f
 8006386:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800638a:	441d      	add	r5, r3
 800638c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006390:	2820      	cmp	r0, #32
 8006392:	dd13      	ble.n	80063bc <_dtoa_r+0x21c>
 8006394:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006398:	9b02      	ldr	r3, [sp, #8]
 800639a:	fa08 f800 	lsl.w	r8, r8, r0
 800639e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80063a2:	fa23 f000 	lsr.w	r0, r3, r0
 80063a6:	ea48 0000 	orr.w	r0, r8, r0
 80063aa:	f7fa f81b 	bl	80003e4 <__aeabi_ui2d>
 80063ae:	2301      	movs	r3, #1
 80063b0:	4680      	mov	r8, r0
 80063b2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80063b6:	3d01      	subs	r5, #1
 80063b8:	9310      	str	r3, [sp, #64]	; 0x40
 80063ba:	e771      	b.n	80062a0 <_dtoa_r+0x100>
 80063bc:	9b02      	ldr	r3, [sp, #8]
 80063be:	f1c0 0020 	rsb	r0, r0, #32
 80063c2:	fa03 f000 	lsl.w	r0, r3, r0
 80063c6:	e7f0      	b.n	80063aa <_dtoa_r+0x20a>
 80063c8:	2301      	movs	r3, #1
 80063ca:	e7b0      	b.n	800632e <_dtoa_r+0x18e>
 80063cc:	900d      	str	r0, [sp, #52]	; 0x34
 80063ce:	e7af      	b.n	8006330 <_dtoa_r+0x190>
 80063d0:	f1ca 0300 	rsb	r3, sl, #0
 80063d4:	9308      	str	r3, [sp, #32]
 80063d6:	2300      	movs	r3, #0
 80063d8:	eba9 090a 	sub.w	r9, r9, sl
 80063dc:	930c      	str	r3, [sp, #48]	; 0x30
 80063de:	e7bc      	b.n	800635a <_dtoa_r+0x1ba>
 80063e0:	2301      	movs	r3, #1
 80063e2:	9309      	str	r3, [sp, #36]	; 0x24
 80063e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	dd74      	ble.n	80064d4 <_dtoa_r+0x334>
 80063ea:	4698      	mov	r8, r3
 80063ec:	9304      	str	r3, [sp, #16]
 80063ee:	2200      	movs	r2, #0
 80063f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063f2:	6072      	str	r2, [r6, #4]
 80063f4:	2204      	movs	r2, #4
 80063f6:	f102 0014 	add.w	r0, r2, #20
 80063fa:	4298      	cmp	r0, r3
 80063fc:	6871      	ldr	r1, [r6, #4]
 80063fe:	d96e      	bls.n	80064de <_dtoa_r+0x33e>
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fe8e 	bl	8007122 <_Balloc>
 8006406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006408:	6030      	str	r0, [r6, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f1b8 0f0e 	cmp.w	r8, #14
 8006410:	9306      	str	r3, [sp, #24]
 8006412:	f200 80ed 	bhi.w	80065f0 <_dtoa_r+0x450>
 8006416:	2d00      	cmp	r5, #0
 8006418:	f000 80ea 	beq.w	80065f0 <_dtoa_r+0x450>
 800641c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006420:	f1ba 0f00 	cmp.w	sl, #0
 8006424:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006428:	dd77      	ble.n	800651a <_dtoa_r+0x37a>
 800642a:	4a28      	ldr	r2, [pc, #160]	; (80064cc <_dtoa_r+0x32c>)
 800642c:	f00a 030f 	and.w	r3, sl, #15
 8006430:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006434:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006438:	06f0      	lsls	r0, r6, #27
 800643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006442:	d568      	bpl.n	8006516 <_dtoa_r+0x376>
 8006444:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006448:	4b21      	ldr	r3, [pc, #132]	; (80064d0 <_dtoa_r+0x330>)
 800644a:	2503      	movs	r5, #3
 800644c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006450:	f7fa f96c 	bl	800072c <__aeabi_ddiv>
 8006454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006458:	f006 060f 	and.w	r6, r6, #15
 800645c:	4f1c      	ldr	r7, [pc, #112]	; (80064d0 <_dtoa_r+0x330>)
 800645e:	e04f      	b.n	8006500 <_dtoa_r+0x360>
 8006460:	2301      	movs	r3, #1
 8006462:	9309      	str	r3, [sp, #36]	; 0x24
 8006464:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006466:	4453      	add	r3, sl
 8006468:	f103 0801 	add.w	r8, r3, #1
 800646c:	9304      	str	r3, [sp, #16]
 800646e:	4643      	mov	r3, r8
 8006470:	2b01      	cmp	r3, #1
 8006472:	bfb8      	it	lt
 8006474:	2301      	movlt	r3, #1
 8006476:	e7ba      	b.n	80063ee <_dtoa_r+0x24e>
 8006478:	2300      	movs	r3, #0
 800647a:	e7b2      	b.n	80063e2 <_dtoa_r+0x242>
 800647c:	2300      	movs	r3, #0
 800647e:	e7f0      	b.n	8006462 <_dtoa_r+0x2c2>
 8006480:	2501      	movs	r5, #1
 8006482:	2300      	movs	r3, #0
 8006484:	9509      	str	r5, [sp, #36]	; 0x24
 8006486:	931e      	str	r3, [sp, #120]	; 0x78
 8006488:	f04f 33ff 	mov.w	r3, #4294967295
 800648c:	2200      	movs	r2, #0
 800648e:	9304      	str	r3, [sp, #16]
 8006490:	4698      	mov	r8, r3
 8006492:	2312      	movs	r3, #18
 8006494:	921f      	str	r2, [sp, #124]	; 0x7c
 8006496:	e7aa      	b.n	80063ee <_dtoa_r+0x24e>
 8006498:	2301      	movs	r3, #1
 800649a:	9309      	str	r3, [sp, #36]	; 0x24
 800649c:	e7f4      	b.n	8006488 <_dtoa_r+0x2e8>
 800649e:	bf00      	nop
 80064a0:	636f4361 	.word	0x636f4361
 80064a4:	3fd287a7 	.word	0x3fd287a7
 80064a8:	8b60c8b3 	.word	0x8b60c8b3
 80064ac:	3fc68a28 	.word	0x3fc68a28
 80064b0:	509f79fb 	.word	0x509f79fb
 80064b4:	3fd34413 	.word	0x3fd34413
 80064b8:	7ff00000 	.word	0x7ff00000
 80064bc:	08008965 	.word	0x08008965
 80064c0:	0800895c 	.word	0x0800895c
 80064c4:	08008939 	.word	0x08008939
 80064c8:	3ff80000 	.word	0x3ff80000
 80064cc:	080089f8 	.word	0x080089f8
 80064d0:	080089d0 	.word	0x080089d0
 80064d4:	2301      	movs	r3, #1
 80064d6:	9304      	str	r3, [sp, #16]
 80064d8:	4698      	mov	r8, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	e7da      	b.n	8006494 <_dtoa_r+0x2f4>
 80064de:	3101      	adds	r1, #1
 80064e0:	6071      	str	r1, [r6, #4]
 80064e2:	0052      	lsls	r2, r2, #1
 80064e4:	e787      	b.n	80063f6 <_dtoa_r+0x256>
 80064e6:	07f1      	lsls	r1, r6, #31
 80064e8:	d508      	bpl.n	80064fc <_dtoa_r+0x35c>
 80064ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f2:	f7f9 fff1 	bl	80004d8 <__aeabi_dmul>
 80064f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064fa:	3501      	adds	r5, #1
 80064fc:	1076      	asrs	r6, r6, #1
 80064fe:	3708      	adds	r7, #8
 8006500:	2e00      	cmp	r6, #0
 8006502:	d1f0      	bne.n	80064e6 <_dtoa_r+0x346>
 8006504:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800650c:	f7fa f90e 	bl	800072c <__aeabi_ddiv>
 8006510:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006514:	e01b      	b.n	800654e <_dtoa_r+0x3ae>
 8006516:	2502      	movs	r5, #2
 8006518:	e7a0      	b.n	800645c <_dtoa_r+0x2bc>
 800651a:	f000 80a4 	beq.w	8006666 <_dtoa_r+0x4c6>
 800651e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006522:	f1ca 0600 	rsb	r6, sl, #0
 8006526:	4ba0      	ldr	r3, [pc, #640]	; (80067a8 <_dtoa_r+0x608>)
 8006528:	f006 020f 	and.w	r2, r6, #15
 800652c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f7f9 ffd0 	bl	80004d8 <__aeabi_dmul>
 8006538:	2502      	movs	r5, #2
 800653a:	2300      	movs	r3, #0
 800653c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006540:	4f9a      	ldr	r7, [pc, #616]	; (80067ac <_dtoa_r+0x60c>)
 8006542:	1136      	asrs	r6, r6, #4
 8006544:	2e00      	cmp	r6, #0
 8006546:	f040 8083 	bne.w	8006650 <_dtoa_r+0x4b0>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e0      	bne.n	8006510 <_dtoa_r+0x370>
 800654e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 808a 	beq.w	800666a <_dtoa_r+0x4ca>
 8006556:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800655a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800655e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006562:	2200      	movs	r2, #0
 8006564:	4b92      	ldr	r3, [pc, #584]	; (80067b0 <_dtoa_r+0x610>)
 8006566:	f7fa fa29 	bl	80009bc <__aeabi_dcmplt>
 800656a:	2800      	cmp	r0, #0
 800656c:	d07d      	beq.n	800666a <_dtoa_r+0x4ca>
 800656e:	f1b8 0f00 	cmp.w	r8, #0
 8006572:	d07a      	beq.n	800666a <_dtoa_r+0x4ca>
 8006574:	9b04      	ldr	r3, [sp, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	dd36      	ble.n	80065e8 <_dtoa_r+0x448>
 800657a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800657e:	2200      	movs	r2, #0
 8006580:	4b8c      	ldr	r3, [pc, #560]	; (80067b4 <_dtoa_r+0x614>)
 8006582:	f7f9 ffa9 	bl	80004d8 <__aeabi_dmul>
 8006586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800658a:	9e04      	ldr	r6, [sp, #16]
 800658c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006590:	3501      	adds	r5, #1
 8006592:	4628      	mov	r0, r5
 8006594:	f7f9 ff36 	bl	8000404 <__aeabi_i2d>
 8006598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800659c:	f7f9 ff9c 	bl	80004d8 <__aeabi_dmul>
 80065a0:	2200      	movs	r2, #0
 80065a2:	4b85      	ldr	r3, [pc, #532]	; (80067b8 <_dtoa_r+0x618>)
 80065a4:	f7f9 fde2 	bl	800016c <__adddf3>
 80065a8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80065ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065b0:	950b      	str	r5, [sp, #44]	; 0x2c
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	d15c      	bne.n	8006670 <_dtoa_r+0x4d0>
 80065b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ba:	2200      	movs	r2, #0
 80065bc:	4b7f      	ldr	r3, [pc, #508]	; (80067bc <_dtoa_r+0x61c>)
 80065be:	f7f9 fdd3 	bl	8000168 <__aeabi_dsub>
 80065c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065c4:	462b      	mov	r3, r5
 80065c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ca:	f7fa fa15 	bl	80009f8 <__aeabi_dcmpgt>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f040 8281 	bne.w	8006ad6 <_dtoa_r+0x936>
 80065d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065da:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80065de:	f7fa f9ed 	bl	80009bc <__aeabi_dcmplt>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f040 8275 	bne.w	8006ad2 <_dtoa_r+0x932>
 80065e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80065ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f2c0 814b 	blt.w	800688e <_dtoa_r+0x6ee>
 80065f8:	f1ba 0f0e 	cmp.w	sl, #14
 80065fc:	f300 8147 	bgt.w	800688e <_dtoa_r+0x6ee>
 8006600:	4b69      	ldr	r3, [pc, #420]	; (80067a8 <_dtoa_r+0x608>)
 8006602:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800660e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006610:	2b00      	cmp	r3, #0
 8006612:	f280 80d7 	bge.w	80067c4 <_dtoa_r+0x624>
 8006616:	f1b8 0f00 	cmp.w	r8, #0
 800661a:	f300 80d3 	bgt.w	80067c4 <_dtoa_r+0x624>
 800661e:	f040 8257 	bne.w	8006ad0 <_dtoa_r+0x930>
 8006622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006626:	2200      	movs	r2, #0
 8006628:	4b64      	ldr	r3, [pc, #400]	; (80067bc <_dtoa_r+0x61c>)
 800662a:	f7f9 ff55 	bl	80004d8 <__aeabi_dmul>
 800662e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006632:	f7fa f9d7 	bl	80009e4 <__aeabi_dcmpge>
 8006636:	4646      	mov	r6, r8
 8006638:	4647      	mov	r7, r8
 800663a:	2800      	cmp	r0, #0
 800663c:	f040 822d 	bne.w	8006a9a <_dtoa_r+0x8fa>
 8006640:	9b06      	ldr	r3, [sp, #24]
 8006642:	9a06      	ldr	r2, [sp, #24]
 8006644:	1c5d      	adds	r5, r3, #1
 8006646:	2331      	movs	r3, #49	; 0x31
 8006648:	f10a 0a01 	add.w	sl, sl, #1
 800664c:	7013      	strb	r3, [r2, #0]
 800664e:	e228      	b.n	8006aa2 <_dtoa_r+0x902>
 8006650:	07f2      	lsls	r2, r6, #31
 8006652:	d505      	bpl.n	8006660 <_dtoa_r+0x4c0>
 8006654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006658:	f7f9 ff3e 	bl	80004d8 <__aeabi_dmul>
 800665c:	2301      	movs	r3, #1
 800665e:	3501      	adds	r5, #1
 8006660:	1076      	asrs	r6, r6, #1
 8006662:	3708      	adds	r7, #8
 8006664:	e76e      	b.n	8006544 <_dtoa_r+0x3a4>
 8006666:	2502      	movs	r5, #2
 8006668:	e771      	b.n	800654e <_dtoa_r+0x3ae>
 800666a:	4657      	mov	r7, sl
 800666c:	4646      	mov	r6, r8
 800666e:	e790      	b.n	8006592 <_dtoa_r+0x3f2>
 8006670:	4b4d      	ldr	r3, [pc, #308]	; (80067a8 <_dtoa_r+0x608>)
 8006672:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006676:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800667a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d048      	beq.n	8006712 <_dtoa_r+0x572>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	2000      	movs	r0, #0
 8006686:	494e      	ldr	r1, [pc, #312]	; (80067c0 <_dtoa_r+0x620>)
 8006688:	f7fa f850 	bl	800072c <__aeabi_ddiv>
 800668c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006690:	f7f9 fd6a 	bl	8000168 <__aeabi_dsub>
 8006694:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006698:	9d06      	ldr	r5, [sp, #24]
 800669a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800669e:	f7fa f9cb 	bl	8000a38 <__aeabi_d2iz>
 80066a2:	9011      	str	r0, [sp, #68]	; 0x44
 80066a4:	f7f9 feae 	bl	8000404 <__aeabi_i2d>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066b0:	f7f9 fd5a 	bl	8000168 <__aeabi_dsub>
 80066b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ba:	3330      	adds	r3, #48	; 0x30
 80066bc:	f805 3b01 	strb.w	r3, [r5], #1
 80066c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066c4:	f7fa f97a 	bl	80009bc <__aeabi_dcmplt>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d163      	bne.n	8006794 <_dtoa_r+0x5f4>
 80066cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066d0:	2000      	movs	r0, #0
 80066d2:	4937      	ldr	r1, [pc, #220]	; (80067b0 <_dtoa_r+0x610>)
 80066d4:	f7f9 fd48 	bl	8000168 <__aeabi_dsub>
 80066d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066dc:	f7fa f96e 	bl	80009bc <__aeabi_dcmplt>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f040 80b5 	bne.w	8006850 <_dtoa_r+0x6b0>
 80066e6:	9b06      	ldr	r3, [sp, #24]
 80066e8:	1aeb      	subs	r3, r5, r3
 80066ea:	429e      	cmp	r6, r3
 80066ec:	f77f af7c 	ble.w	80065e8 <_dtoa_r+0x448>
 80066f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066f4:	2200      	movs	r2, #0
 80066f6:	4b2f      	ldr	r3, [pc, #188]	; (80067b4 <_dtoa_r+0x614>)
 80066f8:	f7f9 feee 	bl	80004d8 <__aeabi_dmul>
 80066fc:	2200      	movs	r2, #0
 80066fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006706:	4b2b      	ldr	r3, [pc, #172]	; (80067b4 <_dtoa_r+0x614>)
 8006708:	f7f9 fee6 	bl	80004d8 <__aeabi_dmul>
 800670c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006710:	e7c3      	b.n	800669a <_dtoa_r+0x4fa>
 8006712:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006716:	f7f9 fedf 	bl	80004d8 <__aeabi_dmul>
 800671a:	9b06      	ldr	r3, [sp, #24]
 800671c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006720:	199d      	adds	r5, r3, r6
 8006722:	461e      	mov	r6, r3
 8006724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006728:	f7fa f986 	bl	8000a38 <__aeabi_d2iz>
 800672c:	9011      	str	r0, [sp, #68]	; 0x44
 800672e:	f7f9 fe69 	bl	8000404 <__aeabi_i2d>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800673a:	f7f9 fd15 	bl	8000168 <__aeabi_dsub>
 800673e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006744:	3330      	adds	r3, #48	; 0x30
 8006746:	f806 3b01 	strb.w	r3, [r6], #1
 800674a:	42ae      	cmp	r6, r5
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	d124      	bne.n	800679c <_dtoa_r+0x5fc>
 8006752:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006756:	4b1a      	ldr	r3, [pc, #104]	; (80067c0 <_dtoa_r+0x620>)
 8006758:	f7f9 fd08 	bl	800016c <__adddf3>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006764:	f7fa f948 	bl	80009f8 <__aeabi_dcmpgt>
 8006768:	2800      	cmp	r0, #0
 800676a:	d171      	bne.n	8006850 <_dtoa_r+0x6b0>
 800676c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006770:	2000      	movs	r0, #0
 8006772:	4913      	ldr	r1, [pc, #76]	; (80067c0 <_dtoa_r+0x620>)
 8006774:	f7f9 fcf8 	bl	8000168 <__aeabi_dsub>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006780:	f7fa f91c 	bl	80009bc <__aeabi_dcmplt>
 8006784:	2800      	cmp	r0, #0
 8006786:	f43f af2f 	beq.w	80065e8 <_dtoa_r+0x448>
 800678a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800678e:	1e6a      	subs	r2, r5, #1
 8006790:	2b30      	cmp	r3, #48	; 0x30
 8006792:	d001      	beq.n	8006798 <_dtoa_r+0x5f8>
 8006794:	46ba      	mov	sl, r7
 8006796:	e04a      	b.n	800682e <_dtoa_r+0x68e>
 8006798:	4615      	mov	r5, r2
 800679a:	e7f6      	b.n	800678a <_dtoa_r+0x5ea>
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <_dtoa_r+0x614>)
 800679e:	f7f9 fe9b 	bl	80004d8 <__aeabi_dmul>
 80067a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067a6:	e7bd      	b.n	8006724 <_dtoa_r+0x584>
 80067a8:	080089f8 	.word	0x080089f8
 80067ac:	080089d0 	.word	0x080089d0
 80067b0:	3ff00000 	.word	0x3ff00000
 80067b4:	40240000 	.word	0x40240000
 80067b8:	401c0000 	.word	0x401c0000
 80067bc:	40140000 	.word	0x40140000
 80067c0:	3fe00000 	.word	0x3fe00000
 80067c4:	9d06      	ldr	r5, [sp, #24]
 80067c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ce:	4630      	mov	r0, r6
 80067d0:	4639      	mov	r1, r7
 80067d2:	f7f9 ffab 	bl	800072c <__aeabi_ddiv>
 80067d6:	f7fa f92f 	bl	8000a38 <__aeabi_d2iz>
 80067da:	4681      	mov	r9, r0
 80067dc:	f7f9 fe12 	bl	8000404 <__aeabi_i2d>
 80067e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067e4:	f7f9 fe78 	bl	80004d8 <__aeabi_dmul>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4630      	mov	r0, r6
 80067ee:	4639      	mov	r1, r7
 80067f0:	f7f9 fcba 	bl	8000168 <__aeabi_dsub>
 80067f4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80067f8:	f805 6b01 	strb.w	r6, [r5], #1
 80067fc:	9e06      	ldr	r6, [sp, #24]
 80067fe:	4602      	mov	r2, r0
 8006800:	1bae      	subs	r6, r5, r6
 8006802:	45b0      	cmp	r8, r6
 8006804:	460b      	mov	r3, r1
 8006806:	d135      	bne.n	8006874 <_dtoa_r+0x6d4>
 8006808:	f7f9 fcb0 	bl	800016c <__adddf3>
 800680c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006810:	4606      	mov	r6, r0
 8006812:	460f      	mov	r7, r1
 8006814:	f7fa f8f0 	bl	80009f8 <__aeabi_dcmpgt>
 8006818:	b9c8      	cbnz	r0, 800684e <_dtoa_r+0x6ae>
 800681a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800681e:	4630      	mov	r0, r6
 8006820:	4639      	mov	r1, r7
 8006822:	f7fa f8c1 	bl	80009a8 <__aeabi_dcmpeq>
 8006826:	b110      	cbz	r0, 800682e <_dtoa_r+0x68e>
 8006828:	f019 0f01 	tst.w	r9, #1
 800682c:	d10f      	bne.n	800684e <_dtoa_r+0x6ae>
 800682e:	4659      	mov	r1, fp
 8006830:	4620      	mov	r0, r4
 8006832:	f000 fcaa 	bl	800718a <_Bfree>
 8006836:	2300      	movs	r3, #0
 8006838:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800683a:	702b      	strb	r3, [r5, #0]
 800683c:	f10a 0301 	add.w	r3, sl, #1
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006844:	2b00      	cmp	r3, #0
 8006846:	f43f acf3 	beq.w	8006230 <_dtoa_r+0x90>
 800684a:	601d      	str	r5, [r3, #0]
 800684c:	e4f0      	b.n	8006230 <_dtoa_r+0x90>
 800684e:	4657      	mov	r7, sl
 8006850:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006854:	1e6b      	subs	r3, r5, #1
 8006856:	2a39      	cmp	r2, #57	; 0x39
 8006858:	d106      	bne.n	8006868 <_dtoa_r+0x6c8>
 800685a:	9a06      	ldr	r2, [sp, #24]
 800685c:	429a      	cmp	r2, r3
 800685e:	d107      	bne.n	8006870 <_dtoa_r+0x6d0>
 8006860:	2330      	movs	r3, #48	; 0x30
 8006862:	7013      	strb	r3, [r2, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	3701      	adds	r7, #1
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	3201      	adds	r2, #1
 800686c:	701a      	strb	r2, [r3, #0]
 800686e:	e791      	b.n	8006794 <_dtoa_r+0x5f4>
 8006870:	461d      	mov	r5, r3
 8006872:	e7ed      	b.n	8006850 <_dtoa_r+0x6b0>
 8006874:	2200      	movs	r2, #0
 8006876:	4b99      	ldr	r3, [pc, #612]	; (8006adc <_dtoa_r+0x93c>)
 8006878:	f7f9 fe2e 	bl	80004d8 <__aeabi_dmul>
 800687c:	2200      	movs	r2, #0
 800687e:	2300      	movs	r3, #0
 8006880:	4606      	mov	r6, r0
 8006882:	460f      	mov	r7, r1
 8006884:	f7fa f890 	bl	80009a8 <__aeabi_dcmpeq>
 8006888:	2800      	cmp	r0, #0
 800688a:	d09e      	beq.n	80067ca <_dtoa_r+0x62a>
 800688c:	e7cf      	b.n	800682e <_dtoa_r+0x68e>
 800688e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006890:	2a00      	cmp	r2, #0
 8006892:	f000 8088 	beq.w	80069a6 <_dtoa_r+0x806>
 8006896:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006898:	2a01      	cmp	r2, #1
 800689a:	dc6d      	bgt.n	8006978 <_dtoa_r+0x7d8>
 800689c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800689e:	2a00      	cmp	r2, #0
 80068a0:	d066      	beq.n	8006970 <_dtoa_r+0x7d0>
 80068a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068a6:	464d      	mov	r5, r9
 80068a8:	9e08      	ldr	r6, [sp, #32]
 80068aa:	9a07      	ldr	r2, [sp, #28]
 80068ac:	2101      	movs	r1, #1
 80068ae:	441a      	add	r2, r3
 80068b0:	4620      	mov	r0, r4
 80068b2:	4499      	add	r9, r3
 80068b4:	9207      	str	r2, [sp, #28]
 80068b6:	f000 fd08 	bl	80072ca <__i2b>
 80068ba:	4607      	mov	r7, r0
 80068bc:	2d00      	cmp	r5, #0
 80068be:	dd0b      	ble.n	80068d8 <_dtoa_r+0x738>
 80068c0:	9b07      	ldr	r3, [sp, #28]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dd08      	ble.n	80068d8 <_dtoa_r+0x738>
 80068c6:	42ab      	cmp	r3, r5
 80068c8:	bfa8      	it	ge
 80068ca:	462b      	movge	r3, r5
 80068cc:	9a07      	ldr	r2, [sp, #28]
 80068ce:	eba9 0903 	sub.w	r9, r9, r3
 80068d2:	1aed      	subs	r5, r5, r3
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	9307      	str	r3, [sp, #28]
 80068d8:	9b08      	ldr	r3, [sp, #32]
 80068da:	b1eb      	cbz	r3, 8006918 <_dtoa_r+0x778>
 80068dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d065      	beq.n	80069ae <_dtoa_r+0x80e>
 80068e2:	b18e      	cbz	r6, 8006908 <_dtoa_r+0x768>
 80068e4:	4639      	mov	r1, r7
 80068e6:	4632      	mov	r2, r6
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fd8d 	bl	8007408 <__pow5mult>
 80068ee:	465a      	mov	r2, fp
 80068f0:	4601      	mov	r1, r0
 80068f2:	4607      	mov	r7, r0
 80068f4:	4620      	mov	r0, r4
 80068f6:	f000 fcf1 	bl	80072dc <__multiply>
 80068fa:	4659      	mov	r1, fp
 80068fc:	900a      	str	r0, [sp, #40]	; 0x28
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fc43 	bl	800718a <_Bfree>
 8006904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006906:	469b      	mov	fp, r3
 8006908:	9b08      	ldr	r3, [sp, #32]
 800690a:	1b9a      	subs	r2, r3, r6
 800690c:	d004      	beq.n	8006918 <_dtoa_r+0x778>
 800690e:	4659      	mov	r1, fp
 8006910:	4620      	mov	r0, r4
 8006912:	f000 fd79 	bl	8007408 <__pow5mult>
 8006916:	4683      	mov	fp, r0
 8006918:	2101      	movs	r1, #1
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fcd5 	bl	80072ca <__i2b>
 8006920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006922:	4606      	mov	r6, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 81c6 	beq.w	8006cb6 <_dtoa_r+0xb16>
 800692a:	461a      	mov	r2, r3
 800692c:	4601      	mov	r1, r0
 800692e:	4620      	mov	r0, r4
 8006930:	f000 fd6a 	bl	8007408 <__pow5mult>
 8006934:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006936:	4606      	mov	r6, r0
 8006938:	2b01      	cmp	r3, #1
 800693a:	dc3e      	bgt.n	80069ba <_dtoa_r+0x81a>
 800693c:	9b02      	ldr	r3, [sp, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d137      	bne.n	80069b2 <_dtoa_r+0x812>
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006948:	2b00      	cmp	r3, #0
 800694a:	d134      	bne.n	80069b6 <_dtoa_r+0x816>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006952:	0d1b      	lsrs	r3, r3, #20
 8006954:	051b      	lsls	r3, r3, #20
 8006956:	b12b      	cbz	r3, 8006964 <_dtoa_r+0x7c4>
 8006958:	9b07      	ldr	r3, [sp, #28]
 800695a:	f109 0901 	add.w	r9, r9, #1
 800695e:	3301      	adds	r3, #1
 8006960:	9307      	str	r3, [sp, #28]
 8006962:	2301      	movs	r3, #1
 8006964:	9308      	str	r3, [sp, #32]
 8006966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006968:	2b00      	cmp	r3, #0
 800696a:	d128      	bne.n	80069be <_dtoa_r+0x81e>
 800696c:	2001      	movs	r0, #1
 800696e:	e02e      	b.n	80069ce <_dtoa_r+0x82e>
 8006970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006972:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006976:	e796      	b.n	80068a6 <_dtoa_r+0x706>
 8006978:	9b08      	ldr	r3, [sp, #32]
 800697a:	f108 36ff 	add.w	r6, r8, #4294967295
 800697e:	42b3      	cmp	r3, r6
 8006980:	bfb7      	itett	lt
 8006982:	9b08      	ldrlt	r3, [sp, #32]
 8006984:	1b9e      	subge	r6, r3, r6
 8006986:	1af2      	sublt	r2, r6, r3
 8006988:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800698a:	bfbf      	itttt	lt
 800698c:	9608      	strlt	r6, [sp, #32]
 800698e:	189b      	addlt	r3, r3, r2
 8006990:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006992:	2600      	movlt	r6, #0
 8006994:	f1b8 0f00 	cmp.w	r8, #0
 8006998:	bfb9      	ittee	lt
 800699a:	eba9 0508 	sublt.w	r5, r9, r8
 800699e:	2300      	movlt	r3, #0
 80069a0:	464d      	movge	r5, r9
 80069a2:	4643      	movge	r3, r8
 80069a4:	e781      	b.n	80068aa <_dtoa_r+0x70a>
 80069a6:	9e08      	ldr	r6, [sp, #32]
 80069a8:	464d      	mov	r5, r9
 80069aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069ac:	e786      	b.n	80068bc <_dtoa_r+0x71c>
 80069ae:	9a08      	ldr	r2, [sp, #32]
 80069b0:	e7ad      	b.n	800690e <_dtoa_r+0x76e>
 80069b2:	2300      	movs	r3, #0
 80069b4:	e7d6      	b.n	8006964 <_dtoa_r+0x7c4>
 80069b6:	9b02      	ldr	r3, [sp, #8]
 80069b8:	e7d4      	b.n	8006964 <_dtoa_r+0x7c4>
 80069ba:	2300      	movs	r3, #0
 80069bc:	9308      	str	r3, [sp, #32]
 80069be:	6933      	ldr	r3, [r6, #16]
 80069c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80069c4:	6918      	ldr	r0, [r3, #16]
 80069c6:	f000 fc32 	bl	800722e <__hi0bits>
 80069ca:	f1c0 0020 	rsb	r0, r0, #32
 80069ce:	9b07      	ldr	r3, [sp, #28]
 80069d0:	4418      	add	r0, r3
 80069d2:	f010 001f 	ands.w	r0, r0, #31
 80069d6:	d047      	beq.n	8006a68 <_dtoa_r+0x8c8>
 80069d8:	f1c0 0320 	rsb	r3, r0, #32
 80069dc:	2b04      	cmp	r3, #4
 80069de:	dd3b      	ble.n	8006a58 <_dtoa_r+0x8b8>
 80069e0:	9b07      	ldr	r3, [sp, #28]
 80069e2:	f1c0 001c 	rsb	r0, r0, #28
 80069e6:	4481      	add	r9, r0
 80069e8:	4405      	add	r5, r0
 80069ea:	4403      	add	r3, r0
 80069ec:	9307      	str	r3, [sp, #28]
 80069ee:	f1b9 0f00 	cmp.w	r9, #0
 80069f2:	dd05      	ble.n	8006a00 <_dtoa_r+0x860>
 80069f4:	4659      	mov	r1, fp
 80069f6:	464a      	mov	r2, r9
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 fd53 	bl	80074a4 <__lshift>
 80069fe:	4683      	mov	fp, r0
 8006a00:	9b07      	ldr	r3, [sp, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	dd05      	ble.n	8006a12 <_dtoa_r+0x872>
 8006a06:	4631      	mov	r1, r6
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 fd4a 	bl	80074a4 <__lshift>
 8006a10:	4606      	mov	r6, r0
 8006a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a14:	b353      	cbz	r3, 8006a6c <_dtoa_r+0x8cc>
 8006a16:	4631      	mov	r1, r6
 8006a18:	4658      	mov	r0, fp
 8006a1a:	f000 fd97 	bl	800754c <__mcmp>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	da24      	bge.n	8006a6c <_dtoa_r+0x8cc>
 8006a22:	2300      	movs	r3, #0
 8006a24:	4659      	mov	r1, fp
 8006a26:	220a      	movs	r2, #10
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f000 fbc5 	bl	80071b8 <__multadd>
 8006a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a34:	4683      	mov	fp, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 8144 	beq.w	8006cc4 <_dtoa_r+0xb24>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4639      	mov	r1, r7
 8006a40:	220a      	movs	r2, #10
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 fbb8 	bl	80071b8 <__multadd>
 8006a48:	9b04      	ldr	r3, [sp, #16]
 8006a4a:	4607      	mov	r7, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	dc4d      	bgt.n	8006aec <_dtoa_r+0x94c>
 8006a50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	dd4a      	ble.n	8006aec <_dtoa_r+0x94c>
 8006a56:	e011      	b.n	8006a7c <_dtoa_r+0x8dc>
 8006a58:	d0c9      	beq.n	80069ee <_dtoa_r+0x84e>
 8006a5a:	9a07      	ldr	r2, [sp, #28]
 8006a5c:	331c      	adds	r3, #28
 8006a5e:	441a      	add	r2, r3
 8006a60:	4499      	add	r9, r3
 8006a62:	441d      	add	r5, r3
 8006a64:	4613      	mov	r3, r2
 8006a66:	e7c1      	b.n	80069ec <_dtoa_r+0x84c>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	e7f6      	b.n	8006a5a <_dtoa_r+0x8ba>
 8006a6c:	f1b8 0f00 	cmp.w	r8, #0
 8006a70:	dc36      	bgt.n	8006ae0 <_dtoa_r+0x940>
 8006a72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	dd33      	ble.n	8006ae0 <_dtoa_r+0x940>
 8006a78:	f8cd 8010 	str.w	r8, [sp, #16]
 8006a7c:	9b04      	ldr	r3, [sp, #16]
 8006a7e:	b963      	cbnz	r3, 8006a9a <_dtoa_r+0x8fa>
 8006a80:	4631      	mov	r1, r6
 8006a82:	2205      	movs	r2, #5
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 fb97 	bl	80071b8 <__multadd>
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	4658      	mov	r0, fp
 8006a90:	f000 fd5c 	bl	800754c <__mcmp>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	f73f add3 	bgt.w	8006640 <_dtoa_r+0x4a0>
 8006a9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a9c:	9d06      	ldr	r5, [sp, #24]
 8006a9e:	ea6f 0a03 	mvn.w	sl, r3
 8006aa2:	f04f 0900 	mov.w	r9, #0
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 fb6e 	bl	800718a <_Bfree>
 8006aae:	2f00      	cmp	r7, #0
 8006ab0:	f43f aebd 	beq.w	800682e <_dtoa_r+0x68e>
 8006ab4:	f1b9 0f00 	cmp.w	r9, #0
 8006ab8:	d005      	beq.n	8006ac6 <_dtoa_r+0x926>
 8006aba:	45b9      	cmp	r9, r7
 8006abc:	d003      	beq.n	8006ac6 <_dtoa_r+0x926>
 8006abe:	4649      	mov	r1, r9
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fb62 	bl	800718a <_Bfree>
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fb5e 	bl	800718a <_Bfree>
 8006ace:	e6ae      	b.n	800682e <_dtoa_r+0x68e>
 8006ad0:	2600      	movs	r6, #0
 8006ad2:	4637      	mov	r7, r6
 8006ad4:	e7e1      	b.n	8006a9a <_dtoa_r+0x8fa>
 8006ad6:	46ba      	mov	sl, r7
 8006ad8:	4637      	mov	r7, r6
 8006ada:	e5b1      	b.n	8006640 <_dtoa_r+0x4a0>
 8006adc:	40240000 	.word	0x40240000
 8006ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae2:	f8cd 8010 	str.w	r8, [sp, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 80f3 	beq.w	8006cd2 <_dtoa_r+0xb32>
 8006aec:	2d00      	cmp	r5, #0
 8006aee:	dd05      	ble.n	8006afc <_dtoa_r+0x95c>
 8006af0:	4639      	mov	r1, r7
 8006af2:	462a      	mov	r2, r5
 8006af4:	4620      	mov	r0, r4
 8006af6:	f000 fcd5 	bl	80074a4 <__lshift>
 8006afa:	4607      	mov	r7, r0
 8006afc:	9b08      	ldr	r3, [sp, #32]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d04c      	beq.n	8006b9c <_dtoa_r+0x9fc>
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fb0c 	bl	8007122 <_Balloc>
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	f107 010c 	add.w	r1, r7, #12
 8006b12:	3202      	adds	r2, #2
 8006b14:	0092      	lsls	r2, r2, #2
 8006b16:	300c      	adds	r0, #12
 8006b18:	f000 faf8 	bl	800710c <memcpy>
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 fcbf 	bl	80074a4 <__lshift>
 8006b26:	46b9      	mov	r9, r7
 8006b28:	4607      	mov	r7, r0
 8006b2a:	9b06      	ldr	r3, [sp, #24]
 8006b2c:	9307      	str	r3, [sp, #28]
 8006b2e:	9b02      	ldr	r3, [sp, #8]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	9308      	str	r3, [sp, #32]
 8006b36:	4631      	mov	r1, r6
 8006b38:	4658      	mov	r0, fp
 8006b3a:	f7ff faa1 	bl	8006080 <quorem>
 8006b3e:	4649      	mov	r1, r9
 8006b40:	4605      	mov	r5, r0
 8006b42:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b46:	4658      	mov	r0, fp
 8006b48:	f000 fd00 	bl	800754c <__mcmp>
 8006b4c:	463a      	mov	r2, r7
 8006b4e:	9002      	str	r0, [sp, #8]
 8006b50:	4631      	mov	r1, r6
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 fd14 	bl	8007580 <__mdiff>
 8006b58:	68c3      	ldr	r3, [r0, #12]
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	bb03      	cbnz	r3, 8006ba0 <_dtoa_r+0xa00>
 8006b5e:	4601      	mov	r1, r0
 8006b60:	9009      	str	r0, [sp, #36]	; 0x24
 8006b62:	4658      	mov	r0, fp
 8006b64:	f000 fcf2 	bl	800754c <__mcmp>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4620      	mov	r0, r4
 8006b70:	9309      	str	r3, [sp, #36]	; 0x24
 8006b72:	f000 fb0a 	bl	800718a <_Bfree>
 8006b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b78:	b9a3      	cbnz	r3, 8006ba4 <_dtoa_r+0xa04>
 8006b7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b7c:	b992      	cbnz	r2, 8006ba4 <_dtoa_r+0xa04>
 8006b7e:	9a08      	ldr	r2, [sp, #32]
 8006b80:	b982      	cbnz	r2, 8006ba4 <_dtoa_r+0xa04>
 8006b82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b86:	d029      	beq.n	8006bdc <_dtoa_r+0xa3c>
 8006b88:	9b02      	ldr	r3, [sp, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	dd01      	ble.n	8006b92 <_dtoa_r+0x9f2>
 8006b8e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006b92:	9b07      	ldr	r3, [sp, #28]
 8006b94:	1c5d      	adds	r5, r3, #1
 8006b96:	f883 8000 	strb.w	r8, [r3]
 8006b9a:	e784      	b.n	8006aa6 <_dtoa_r+0x906>
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	e7c2      	b.n	8006b26 <_dtoa_r+0x986>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e7e3      	b.n	8006b6c <_dtoa_r+0x9cc>
 8006ba4:	9a02      	ldr	r2, [sp, #8]
 8006ba6:	2a00      	cmp	r2, #0
 8006ba8:	db04      	blt.n	8006bb4 <_dtoa_r+0xa14>
 8006baa:	d123      	bne.n	8006bf4 <_dtoa_r+0xa54>
 8006bac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bae:	bb0a      	cbnz	r2, 8006bf4 <_dtoa_r+0xa54>
 8006bb0:	9a08      	ldr	r2, [sp, #32]
 8006bb2:	b9fa      	cbnz	r2, 8006bf4 <_dtoa_r+0xa54>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	ddec      	ble.n	8006b92 <_dtoa_r+0x9f2>
 8006bb8:	4659      	mov	r1, fp
 8006bba:	2201      	movs	r2, #1
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fc71 	bl	80074a4 <__lshift>
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4683      	mov	fp, r0
 8006bc6:	f000 fcc1 	bl	800754c <__mcmp>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	dc03      	bgt.n	8006bd6 <_dtoa_r+0xa36>
 8006bce:	d1e0      	bne.n	8006b92 <_dtoa_r+0x9f2>
 8006bd0:	f018 0f01 	tst.w	r8, #1
 8006bd4:	d0dd      	beq.n	8006b92 <_dtoa_r+0x9f2>
 8006bd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bda:	d1d8      	bne.n	8006b8e <_dtoa_r+0x9ee>
 8006bdc:	9b07      	ldr	r3, [sp, #28]
 8006bde:	9a07      	ldr	r2, [sp, #28]
 8006be0:	1c5d      	adds	r5, r3, #1
 8006be2:	2339      	movs	r3, #57	; 0x39
 8006be4:	7013      	strb	r3, [r2, #0]
 8006be6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bea:	1e6a      	subs	r2, r5, #1
 8006bec:	2b39      	cmp	r3, #57	; 0x39
 8006bee:	d04d      	beq.n	8006c8c <_dtoa_r+0xaec>
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	e052      	b.n	8006c9a <_dtoa_r+0xafa>
 8006bf4:	9a07      	ldr	r2, [sp, #28]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f102 0501 	add.w	r5, r2, #1
 8006bfc:	dd06      	ble.n	8006c0c <_dtoa_r+0xa6c>
 8006bfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c02:	d0eb      	beq.n	8006bdc <_dtoa_r+0xa3c>
 8006c04:	f108 0801 	add.w	r8, r8, #1
 8006c08:	9b07      	ldr	r3, [sp, #28]
 8006c0a:	e7c4      	b.n	8006b96 <_dtoa_r+0x9f6>
 8006c0c:	9b06      	ldr	r3, [sp, #24]
 8006c0e:	9a04      	ldr	r2, [sp, #16]
 8006c10:	1aeb      	subs	r3, r5, r3
 8006c12:	4293      	cmp	r3, r2
 8006c14:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006c18:	d021      	beq.n	8006c5e <_dtoa_r+0xabe>
 8006c1a:	4659      	mov	r1, fp
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	220a      	movs	r2, #10
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fac9 	bl	80071b8 <__multadd>
 8006c26:	45b9      	cmp	r9, r7
 8006c28:	4683      	mov	fp, r0
 8006c2a:	f04f 0300 	mov.w	r3, #0
 8006c2e:	f04f 020a 	mov.w	r2, #10
 8006c32:	4649      	mov	r1, r9
 8006c34:	4620      	mov	r0, r4
 8006c36:	d105      	bne.n	8006c44 <_dtoa_r+0xaa4>
 8006c38:	f000 fabe 	bl	80071b8 <__multadd>
 8006c3c:	4681      	mov	r9, r0
 8006c3e:	4607      	mov	r7, r0
 8006c40:	9507      	str	r5, [sp, #28]
 8006c42:	e778      	b.n	8006b36 <_dtoa_r+0x996>
 8006c44:	f000 fab8 	bl	80071b8 <__multadd>
 8006c48:	4639      	mov	r1, r7
 8006c4a:	4681      	mov	r9, r0
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	220a      	movs	r2, #10
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 fab1 	bl	80071b8 <__multadd>
 8006c56:	4607      	mov	r7, r0
 8006c58:	e7f2      	b.n	8006c40 <_dtoa_r+0xaa0>
 8006c5a:	f04f 0900 	mov.w	r9, #0
 8006c5e:	4659      	mov	r1, fp
 8006c60:	2201      	movs	r2, #1
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 fc1e 	bl	80074a4 <__lshift>
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4683      	mov	fp, r0
 8006c6c:	f000 fc6e 	bl	800754c <__mcmp>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	dcb8      	bgt.n	8006be6 <_dtoa_r+0xa46>
 8006c74:	d102      	bne.n	8006c7c <_dtoa_r+0xadc>
 8006c76:	f018 0f01 	tst.w	r8, #1
 8006c7a:	d1b4      	bne.n	8006be6 <_dtoa_r+0xa46>
 8006c7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c80:	1e6a      	subs	r2, r5, #1
 8006c82:	2b30      	cmp	r3, #48	; 0x30
 8006c84:	f47f af0f 	bne.w	8006aa6 <_dtoa_r+0x906>
 8006c88:	4615      	mov	r5, r2
 8006c8a:	e7f7      	b.n	8006c7c <_dtoa_r+0xadc>
 8006c8c:	9b06      	ldr	r3, [sp, #24]
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d105      	bne.n	8006c9e <_dtoa_r+0xafe>
 8006c92:	2331      	movs	r3, #49	; 0x31
 8006c94:	9a06      	ldr	r2, [sp, #24]
 8006c96:	f10a 0a01 	add.w	sl, sl, #1
 8006c9a:	7013      	strb	r3, [r2, #0]
 8006c9c:	e703      	b.n	8006aa6 <_dtoa_r+0x906>
 8006c9e:	4615      	mov	r5, r2
 8006ca0:	e7a1      	b.n	8006be6 <_dtoa_r+0xa46>
 8006ca2:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <_dtoa_r+0xb60>)
 8006ca4:	f7ff bae1 	b.w	800626a <_dtoa_r+0xca>
 8006ca8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f47f aabb 	bne.w	8006226 <_dtoa_r+0x86>
 8006cb0:	4b14      	ldr	r3, [pc, #80]	; (8006d04 <_dtoa_r+0xb64>)
 8006cb2:	f7ff bada 	b.w	800626a <_dtoa_r+0xca>
 8006cb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	f77f ae3f 	ble.w	800693c <_dtoa_r+0x79c>
 8006cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cc0:	9308      	str	r3, [sp, #32]
 8006cc2:	e653      	b.n	800696c <_dtoa_r+0x7cc>
 8006cc4:	9b04      	ldr	r3, [sp, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dc03      	bgt.n	8006cd2 <_dtoa_r+0xb32>
 8006cca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	f73f aed5 	bgt.w	8006a7c <_dtoa_r+0x8dc>
 8006cd2:	9d06      	ldr	r5, [sp, #24]
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4658      	mov	r0, fp
 8006cd8:	f7ff f9d2 	bl	8006080 <quorem>
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006ce2:	f805 8b01 	strb.w	r8, [r5], #1
 8006ce6:	9a04      	ldr	r2, [sp, #16]
 8006ce8:	1aeb      	subs	r3, r5, r3
 8006cea:	429a      	cmp	r2, r3
 8006cec:	ddb5      	ble.n	8006c5a <_dtoa_r+0xaba>
 8006cee:	4659      	mov	r1, fp
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	220a      	movs	r2, #10
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 fa5f 	bl	80071b8 <__multadd>
 8006cfa:	4683      	mov	fp, r0
 8006cfc:	e7ea      	b.n	8006cd4 <_dtoa_r+0xb34>
 8006cfe:	bf00      	nop
 8006d00:	08008938 	.word	0x08008938
 8006d04:	0800895c 	.word	0x0800895c

08006d08 <__sflush_r>:
 8006d08:	898a      	ldrh	r2, [r1, #12]
 8006d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0e:	4605      	mov	r5, r0
 8006d10:	0710      	lsls	r0, r2, #28
 8006d12:	460c      	mov	r4, r1
 8006d14:	d458      	bmi.n	8006dc8 <__sflush_r+0xc0>
 8006d16:	684b      	ldr	r3, [r1, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	dc05      	bgt.n	8006d28 <__sflush_r+0x20>
 8006d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dc02      	bgt.n	8006d28 <__sflush_r+0x20>
 8006d22:	2000      	movs	r0, #0
 8006d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d2a:	2e00      	cmp	r6, #0
 8006d2c:	d0f9      	beq.n	8006d22 <__sflush_r+0x1a>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d34:	682f      	ldr	r7, [r5, #0]
 8006d36:	6a21      	ldr	r1, [r4, #32]
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	d032      	beq.n	8006da2 <__sflush_r+0x9a>
 8006d3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	075a      	lsls	r2, r3, #29
 8006d42:	d505      	bpl.n	8006d50 <__sflush_r+0x48>
 8006d44:	6863      	ldr	r3, [r4, #4]
 8006d46:	1ac0      	subs	r0, r0, r3
 8006d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d4a:	b10b      	cbz	r3, 8006d50 <__sflush_r+0x48>
 8006d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d4e:	1ac0      	subs	r0, r0, r3
 8006d50:	2300      	movs	r3, #0
 8006d52:	4602      	mov	r2, r0
 8006d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d56:	6a21      	ldr	r1, [r4, #32]
 8006d58:	4628      	mov	r0, r5
 8006d5a:	47b0      	blx	r6
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	d106      	bne.n	8006d70 <__sflush_r+0x68>
 8006d62:	6829      	ldr	r1, [r5, #0]
 8006d64:	291d      	cmp	r1, #29
 8006d66:	d848      	bhi.n	8006dfa <__sflush_r+0xf2>
 8006d68:	4a29      	ldr	r2, [pc, #164]	; (8006e10 <__sflush_r+0x108>)
 8006d6a:	40ca      	lsrs	r2, r1
 8006d6c:	07d6      	lsls	r6, r2, #31
 8006d6e:	d544      	bpl.n	8006dfa <__sflush_r+0xf2>
 8006d70:	2200      	movs	r2, #0
 8006d72:	6062      	str	r2, [r4, #4]
 8006d74:	6922      	ldr	r2, [r4, #16]
 8006d76:	04d9      	lsls	r1, r3, #19
 8006d78:	6022      	str	r2, [r4, #0]
 8006d7a:	d504      	bpl.n	8006d86 <__sflush_r+0x7e>
 8006d7c:	1c42      	adds	r2, r0, #1
 8006d7e:	d101      	bne.n	8006d84 <__sflush_r+0x7c>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b903      	cbnz	r3, 8006d86 <__sflush_r+0x7e>
 8006d84:	6560      	str	r0, [r4, #84]	; 0x54
 8006d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d88:	602f      	str	r7, [r5, #0]
 8006d8a:	2900      	cmp	r1, #0
 8006d8c:	d0c9      	beq.n	8006d22 <__sflush_r+0x1a>
 8006d8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d92:	4299      	cmp	r1, r3
 8006d94:	d002      	beq.n	8006d9c <__sflush_r+0x94>
 8006d96:	4628      	mov	r0, r5
 8006d98:	f000 fcae 	bl	80076f8 <_free_r>
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	6360      	str	r0, [r4, #52]	; 0x34
 8006da0:	e7c0      	b.n	8006d24 <__sflush_r+0x1c>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4628      	mov	r0, r5
 8006da6:	47b0      	blx	r6
 8006da8:	1c41      	adds	r1, r0, #1
 8006daa:	d1c8      	bne.n	8006d3e <__sflush_r+0x36>
 8006dac:	682b      	ldr	r3, [r5, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0c5      	beq.n	8006d3e <__sflush_r+0x36>
 8006db2:	2b1d      	cmp	r3, #29
 8006db4:	d001      	beq.n	8006dba <__sflush_r+0xb2>
 8006db6:	2b16      	cmp	r3, #22
 8006db8:	d101      	bne.n	8006dbe <__sflush_r+0xb6>
 8006dba:	602f      	str	r7, [r5, #0]
 8006dbc:	e7b1      	b.n	8006d22 <__sflush_r+0x1a>
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc4:	81a3      	strh	r3, [r4, #12]
 8006dc6:	e7ad      	b.n	8006d24 <__sflush_r+0x1c>
 8006dc8:	690f      	ldr	r7, [r1, #16]
 8006dca:	2f00      	cmp	r7, #0
 8006dcc:	d0a9      	beq.n	8006d22 <__sflush_r+0x1a>
 8006dce:	0793      	lsls	r3, r2, #30
 8006dd0:	bf18      	it	ne
 8006dd2:	2300      	movne	r3, #0
 8006dd4:	680e      	ldr	r6, [r1, #0]
 8006dd6:	bf08      	it	eq
 8006dd8:	694b      	ldreq	r3, [r1, #20]
 8006dda:	eba6 0807 	sub.w	r8, r6, r7
 8006dde:	600f      	str	r7, [r1, #0]
 8006de0:	608b      	str	r3, [r1, #8]
 8006de2:	f1b8 0f00 	cmp.w	r8, #0
 8006de6:	dd9c      	ble.n	8006d22 <__sflush_r+0x1a>
 8006de8:	4643      	mov	r3, r8
 8006dea:	463a      	mov	r2, r7
 8006dec:	6a21      	ldr	r1, [r4, #32]
 8006dee:	4628      	mov	r0, r5
 8006df0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006df2:	47b0      	blx	r6
 8006df4:	2800      	cmp	r0, #0
 8006df6:	dc06      	bgt.n	8006e06 <__sflush_r+0xfe>
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dfe:	81a3      	strh	r3, [r4, #12]
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	e78e      	b.n	8006d24 <__sflush_r+0x1c>
 8006e06:	4407      	add	r7, r0
 8006e08:	eba8 0800 	sub.w	r8, r8, r0
 8006e0c:	e7e9      	b.n	8006de2 <__sflush_r+0xda>
 8006e0e:	bf00      	nop
 8006e10:	20400001 	.word	0x20400001

08006e14 <_fflush_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	690b      	ldr	r3, [r1, #16]
 8006e18:	4605      	mov	r5, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	b1db      	cbz	r3, 8006e56 <_fflush_r+0x42>
 8006e1e:	b118      	cbz	r0, 8006e28 <_fflush_r+0x14>
 8006e20:	6983      	ldr	r3, [r0, #24]
 8006e22:	b90b      	cbnz	r3, 8006e28 <_fflush_r+0x14>
 8006e24:	f000 f860 	bl	8006ee8 <__sinit>
 8006e28:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <_fflush_r+0x48>)
 8006e2a:	429c      	cmp	r4, r3
 8006e2c:	d109      	bne.n	8006e42 <_fflush_r+0x2e>
 8006e2e:	686c      	ldr	r4, [r5, #4]
 8006e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e34:	b17b      	cbz	r3, 8006e56 <_fflush_r+0x42>
 8006e36:	4621      	mov	r1, r4
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3e:	f7ff bf63 	b.w	8006d08 <__sflush_r>
 8006e42:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <_fflush_r+0x4c>)
 8006e44:	429c      	cmp	r4, r3
 8006e46:	d101      	bne.n	8006e4c <_fflush_r+0x38>
 8006e48:	68ac      	ldr	r4, [r5, #8]
 8006e4a:	e7f1      	b.n	8006e30 <_fflush_r+0x1c>
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <_fflush_r+0x50>)
 8006e4e:	429c      	cmp	r4, r3
 8006e50:	bf08      	it	eq
 8006e52:	68ec      	ldreq	r4, [r5, #12]
 8006e54:	e7ec      	b.n	8006e30 <_fflush_r+0x1c>
 8006e56:	2000      	movs	r0, #0
 8006e58:	bd38      	pop	{r3, r4, r5, pc}
 8006e5a:	bf00      	nop
 8006e5c:	0800898c 	.word	0x0800898c
 8006e60:	080089ac 	.word	0x080089ac
 8006e64:	0800896c 	.word	0x0800896c

08006e68 <std>:
 8006e68:	2300      	movs	r3, #0
 8006e6a:	b510      	push	{r4, lr}
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e72:	6083      	str	r3, [r0, #8]
 8006e74:	8181      	strh	r1, [r0, #12]
 8006e76:	6643      	str	r3, [r0, #100]	; 0x64
 8006e78:	81c2      	strh	r2, [r0, #14]
 8006e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e7e:	6183      	str	r3, [r0, #24]
 8006e80:	4619      	mov	r1, r3
 8006e82:	2208      	movs	r2, #8
 8006e84:	305c      	adds	r0, #92	; 0x5c
 8006e86:	f7fe fb47 	bl	8005518 <memset>
 8006e8a:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <std+0x38>)
 8006e8c:	6224      	str	r4, [r4, #32]
 8006e8e:	6263      	str	r3, [r4, #36]	; 0x24
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <std+0x3c>)
 8006e92:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e94:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <std+0x40>)
 8006e96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e98:	4b04      	ldr	r3, [pc, #16]	; (8006eac <std+0x44>)
 8006e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	bf00      	nop
 8006ea0:	08007d85 	.word	0x08007d85
 8006ea4:	08007da7 	.word	0x08007da7
 8006ea8:	08007ddf 	.word	0x08007ddf
 8006eac:	08007e03 	.word	0x08007e03

08006eb0 <_cleanup_r>:
 8006eb0:	4901      	ldr	r1, [pc, #4]	; (8006eb8 <_cleanup_r+0x8>)
 8006eb2:	f000 b885 	b.w	8006fc0 <_fwalk_reent>
 8006eb6:	bf00      	nop
 8006eb8:	08006e15 	.word	0x08006e15

08006ebc <__sfmoreglue>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	2568      	movs	r5, #104	; 0x68
 8006ec0:	1e4a      	subs	r2, r1, #1
 8006ec2:	4355      	muls	r5, r2
 8006ec4:	460e      	mov	r6, r1
 8006ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eca:	f000 fc61 	bl	8007790 <_malloc_r>
 8006ece:	4604      	mov	r4, r0
 8006ed0:	b140      	cbz	r0, 8006ee4 <__sfmoreglue+0x28>
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ed8:	300c      	adds	r0, #12
 8006eda:	60a0      	str	r0, [r4, #8]
 8006edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ee0:	f7fe fb1a 	bl	8005518 <memset>
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}

08006ee8 <__sinit>:
 8006ee8:	6983      	ldr	r3, [r0, #24]
 8006eea:	b510      	push	{r4, lr}
 8006eec:	4604      	mov	r4, r0
 8006eee:	bb33      	cbnz	r3, 8006f3e <__sinit+0x56>
 8006ef0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006ef4:	6503      	str	r3, [r0, #80]	; 0x50
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <__sinit+0x58>)
 8006ef8:	4a12      	ldr	r2, [pc, #72]	; (8006f44 <__sinit+0x5c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6282      	str	r2, [r0, #40]	; 0x28
 8006efe:	4298      	cmp	r0, r3
 8006f00:	bf04      	itt	eq
 8006f02:	2301      	moveq	r3, #1
 8006f04:	6183      	streq	r3, [r0, #24]
 8006f06:	f000 f81f 	bl	8006f48 <__sfp>
 8006f0a:	6060      	str	r0, [r4, #4]
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f000 f81b 	bl	8006f48 <__sfp>
 8006f12:	60a0      	str	r0, [r4, #8]
 8006f14:	4620      	mov	r0, r4
 8006f16:	f000 f817 	bl	8006f48 <__sfp>
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	60e0      	str	r0, [r4, #12]
 8006f1e:	2104      	movs	r1, #4
 8006f20:	6860      	ldr	r0, [r4, #4]
 8006f22:	f7ff ffa1 	bl	8006e68 <std>
 8006f26:	2201      	movs	r2, #1
 8006f28:	2109      	movs	r1, #9
 8006f2a:	68a0      	ldr	r0, [r4, #8]
 8006f2c:	f7ff ff9c 	bl	8006e68 <std>
 8006f30:	2202      	movs	r2, #2
 8006f32:	2112      	movs	r1, #18
 8006f34:	68e0      	ldr	r0, [r4, #12]
 8006f36:	f7ff ff97 	bl	8006e68 <std>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	61a3      	str	r3, [r4, #24]
 8006f3e:	bd10      	pop	{r4, pc}
 8006f40:	08008924 	.word	0x08008924
 8006f44:	08006eb1 	.word	0x08006eb1

08006f48 <__sfp>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	4b1b      	ldr	r3, [pc, #108]	; (8006fb8 <__sfp+0x70>)
 8006f4c:	4607      	mov	r7, r0
 8006f4e:	681e      	ldr	r6, [r3, #0]
 8006f50:	69b3      	ldr	r3, [r6, #24]
 8006f52:	b913      	cbnz	r3, 8006f5a <__sfp+0x12>
 8006f54:	4630      	mov	r0, r6
 8006f56:	f7ff ffc7 	bl	8006ee8 <__sinit>
 8006f5a:	3648      	adds	r6, #72	; 0x48
 8006f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	d503      	bpl.n	8006f6c <__sfp+0x24>
 8006f64:	6833      	ldr	r3, [r6, #0]
 8006f66:	b133      	cbz	r3, 8006f76 <__sfp+0x2e>
 8006f68:	6836      	ldr	r6, [r6, #0]
 8006f6a:	e7f7      	b.n	8006f5c <__sfp+0x14>
 8006f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f70:	b16d      	cbz	r5, 8006f8e <__sfp+0x46>
 8006f72:	3468      	adds	r4, #104	; 0x68
 8006f74:	e7f4      	b.n	8006f60 <__sfp+0x18>
 8006f76:	2104      	movs	r1, #4
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f7ff ff9f 	bl	8006ebc <__sfmoreglue>
 8006f7e:	6030      	str	r0, [r6, #0]
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d1f1      	bne.n	8006f68 <__sfp+0x20>
 8006f84:	230c      	movs	r3, #12
 8006f86:	4604      	mov	r4, r0
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f8e:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <__sfp+0x74>)
 8006f90:	6665      	str	r5, [r4, #100]	; 0x64
 8006f92:	e9c4 5500 	strd	r5, r5, [r4]
 8006f96:	60a5      	str	r5, [r4, #8]
 8006f98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006f9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	4629      	mov	r1, r5
 8006fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fa8:	f7fe fab6 	bl	8005518 <memset>
 8006fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fb4:	e7e9      	b.n	8006f8a <__sfp+0x42>
 8006fb6:	bf00      	nop
 8006fb8:	08008924 	.word	0x08008924
 8006fbc:	ffff0001 	.word	0xffff0001

08006fc0 <_fwalk_reent>:
 8006fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	4680      	mov	r8, r0
 8006fc6:	4689      	mov	r9, r1
 8006fc8:	2600      	movs	r6, #0
 8006fca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fce:	b914      	cbnz	r4, 8006fd6 <_fwalk_reent+0x16>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006fda:	3f01      	subs	r7, #1
 8006fdc:	d501      	bpl.n	8006fe2 <_fwalk_reent+0x22>
 8006fde:	6824      	ldr	r4, [r4, #0]
 8006fe0:	e7f5      	b.n	8006fce <_fwalk_reent+0xe>
 8006fe2:	89ab      	ldrh	r3, [r5, #12]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d907      	bls.n	8006ff8 <_fwalk_reent+0x38>
 8006fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fec:	3301      	adds	r3, #1
 8006fee:	d003      	beq.n	8006ff8 <_fwalk_reent+0x38>
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	47c8      	blx	r9
 8006ff6:	4306      	orrs	r6, r0
 8006ff8:	3568      	adds	r5, #104	; 0x68
 8006ffa:	e7ee      	b.n	8006fda <_fwalk_reent+0x1a>

08006ffc <_localeconv_r>:
 8006ffc:	4b04      	ldr	r3, [pc, #16]	; (8007010 <_localeconv_r+0x14>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6a18      	ldr	r0, [r3, #32]
 8007002:	4b04      	ldr	r3, [pc, #16]	; (8007014 <_localeconv_r+0x18>)
 8007004:	2800      	cmp	r0, #0
 8007006:	bf08      	it	eq
 8007008:	4618      	moveq	r0, r3
 800700a:	30f0      	adds	r0, #240	; 0xf0
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000a4c 	.word	0x20000a4c
 8007014:	20000ab0 	.word	0x20000ab0

08007018 <__swhatbuf_r>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	460e      	mov	r6, r1
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	b096      	sub	sp, #88	; 0x58
 8007022:	2900      	cmp	r1, #0
 8007024:	4614      	mov	r4, r2
 8007026:	461d      	mov	r5, r3
 8007028:	da07      	bge.n	800703a <__swhatbuf_r+0x22>
 800702a:	2300      	movs	r3, #0
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	89b3      	ldrh	r3, [r6, #12]
 8007030:	061a      	lsls	r2, r3, #24
 8007032:	d410      	bmi.n	8007056 <__swhatbuf_r+0x3e>
 8007034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007038:	e00e      	b.n	8007058 <__swhatbuf_r+0x40>
 800703a:	466a      	mov	r2, sp
 800703c:	f000 ff08 	bl	8007e50 <_fstat_r>
 8007040:	2800      	cmp	r0, #0
 8007042:	dbf2      	blt.n	800702a <__swhatbuf_r+0x12>
 8007044:	9a01      	ldr	r2, [sp, #4]
 8007046:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800704a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800704e:	425a      	negs	r2, r3
 8007050:	415a      	adcs	r2, r3
 8007052:	602a      	str	r2, [r5, #0]
 8007054:	e7ee      	b.n	8007034 <__swhatbuf_r+0x1c>
 8007056:	2340      	movs	r3, #64	; 0x40
 8007058:	2000      	movs	r0, #0
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	b016      	add	sp, #88	; 0x58
 800705e:	bd70      	pop	{r4, r5, r6, pc}

08007060 <__smakebuf_r>:
 8007060:	898b      	ldrh	r3, [r1, #12]
 8007062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007064:	079d      	lsls	r5, r3, #30
 8007066:	4606      	mov	r6, r0
 8007068:	460c      	mov	r4, r1
 800706a:	d507      	bpl.n	800707c <__smakebuf_r+0x1c>
 800706c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	2301      	movs	r3, #1
 8007076:	6163      	str	r3, [r4, #20]
 8007078:	b002      	add	sp, #8
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	ab01      	add	r3, sp, #4
 800707e:	466a      	mov	r2, sp
 8007080:	f7ff ffca 	bl	8007018 <__swhatbuf_r>
 8007084:	9900      	ldr	r1, [sp, #0]
 8007086:	4605      	mov	r5, r0
 8007088:	4630      	mov	r0, r6
 800708a:	f000 fb81 	bl	8007790 <_malloc_r>
 800708e:	b948      	cbnz	r0, 80070a4 <__smakebuf_r+0x44>
 8007090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007094:	059a      	lsls	r2, r3, #22
 8007096:	d4ef      	bmi.n	8007078 <__smakebuf_r+0x18>
 8007098:	f023 0303 	bic.w	r3, r3, #3
 800709c:	f043 0302 	orr.w	r3, r3, #2
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	e7e3      	b.n	800706c <__smakebuf_r+0xc>
 80070a4:	4b0d      	ldr	r3, [pc, #52]	; (80070dc <__smakebuf_r+0x7c>)
 80070a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	6020      	str	r0, [r4, #0]
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	9b00      	ldr	r3, [sp, #0]
 80070b4:	6120      	str	r0, [r4, #16]
 80070b6:	6163      	str	r3, [r4, #20]
 80070b8:	9b01      	ldr	r3, [sp, #4]
 80070ba:	b15b      	cbz	r3, 80070d4 <__smakebuf_r+0x74>
 80070bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c0:	4630      	mov	r0, r6
 80070c2:	f000 fed7 	bl	8007e74 <_isatty_r>
 80070c6:	b128      	cbz	r0, 80070d4 <__smakebuf_r+0x74>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	431d      	orrs	r5, r3
 80070d8:	81a5      	strh	r5, [r4, #12]
 80070da:	e7cd      	b.n	8007078 <__smakebuf_r+0x18>
 80070dc:	08006eb1 	.word	0x08006eb1

080070e0 <malloc>:
 80070e0:	4b02      	ldr	r3, [pc, #8]	; (80070ec <malloc+0xc>)
 80070e2:	4601      	mov	r1, r0
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	f000 bb53 	b.w	8007790 <_malloc_r>
 80070ea:	bf00      	nop
 80070ec:	20000a4c 	.word	0x20000a4c

080070f0 <memchr>:
 80070f0:	b510      	push	{r4, lr}
 80070f2:	b2c9      	uxtb	r1, r1
 80070f4:	4402      	add	r2, r0
 80070f6:	4290      	cmp	r0, r2
 80070f8:	4603      	mov	r3, r0
 80070fa:	d101      	bne.n	8007100 <memchr+0x10>
 80070fc:	2300      	movs	r3, #0
 80070fe:	e003      	b.n	8007108 <memchr+0x18>
 8007100:	781c      	ldrb	r4, [r3, #0]
 8007102:	3001      	adds	r0, #1
 8007104:	428c      	cmp	r4, r1
 8007106:	d1f6      	bne.n	80070f6 <memchr+0x6>
 8007108:	4618      	mov	r0, r3
 800710a:	bd10      	pop	{r4, pc}

0800710c <memcpy>:
 800710c:	b510      	push	{r4, lr}
 800710e:	1e43      	subs	r3, r0, #1
 8007110:	440a      	add	r2, r1
 8007112:	4291      	cmp	r1, r2
 8007114:	d100      	bne.n	8007118 <memcpy+0xc>
 8007116:	bd10      	pop	{r4, pc}
 8007118:	f811 4b01 	ldrb.w	r4, [r1], #1
 800711c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007120:	e7f7      	b.n	8007112 <memcpy+0x6>

08007122 <_Balloc>:
 8007122:	b570      	push	{r4, r5, r6, lr}
 8007124:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007126:	4604      	mov	r4, r0
 8007128:	460e      	mov	r6, r1
 800712a:	b93d      	cbnz	r5, 800713c <_Balloc+0x1a>
 800712c:	2010      	movs	r0, #16
 800712e:	f7ff ffd7 	bl	80070e0 <malloc>
 8007132:	6260      	str	r0, [r4, #36]	; 0x24
 8007134:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007138:	6005      	str	r5, [r0, #0]
 800713a:	60c5      	str	r5, [r0, #12]
 800713c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800713e:	68eb      	ldr	r3, [r5, #12]
 8007140:	b183      	cbz	r3, 8007164 <_Balloc+0x42>
 8007142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800714a:	b9b8      	cbnz	r0, 800717c <_Balloc+0x5a>
 800714c:	2101      	movs	r1, #1
 800714e:	fa01 f506 	lsl.w	r5, r1, r6
 8007152:	1d6a      	adds	r2, r5, #5
 8007154:	0092      	lsls	r2, r2, #2
 8007156:	4620      	mov	r0, r4
 8007158:	f000 fabf 	bl	80076da <_calloc_r>
 800715c:	b160      	cbz	r0, 8007178 <_Balloc+0x56>
 800715e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007162:	e00e      	b.n	8007182 <_Balloc+0x60>
 8007164:	2221      	movs	r2, #33	; 0x21
 8007166:	2104      	movs	r1, #4
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fab6 	bl	80076da <_calloc_r>
 800716e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007170:	60e8      	str	r0, [r5, #12]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e4      	bne.n	8007142 <_Balloc+0x20>
 8007178:	2000      	movs	r0, #0
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	6802      	ldr	r2, [r0, #0]
 800717e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007182:	2300      	movs	r3, #0
 8007184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007188:	e7f7      	b.n	800717a <_Balloc+0x58>

0800718a <_Bfree>:
 800718a:	b570      	push	{r4, r5, r6, lr}
 800718c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800718e:	4606      	mov	r6, r0
 8007190:	460d      	mov	r5, r1
 8007192:	b93c      	cbnz	r4, 80071a4 <_Bfree+0x1a>
 8007194:	2010      	movs	r0, #16
 8007196:	f7ff ffa3 	bl	80070e0 <malloc>
 800719a:	6270      	str	r0, [r6, #36]	; 0x24
 800719c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071a0:	6004      	str	r4, [r0, #0]
 80071a2:	60c4      	str	r4, [r0, #12]
 80071a4:	b13d      	cbz	r5, 80071b6 <_Bfree+0x2c>
 80071a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80071a8:	686a      	ldr	r2, [r5, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071b0:	6029      	str	r1, [r5, #0]
 80071b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80071b6:	bd70      	pop	{r4, r5, r6, pc}

080071b8 <__multadd>:
 80071b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071bc:	461f      	mov	r7, r3
 80071be:	4606      	mov	r6, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	2300      	movs	r3, #0
 80071c4:	690d      	ldr	r5, [r1, #16]
 80071c6:	f101 0c14 	add.w	ip, r1, #20
 80071ca:	f8dc 0000 	ldr.w	r0, [ip]
 80071ce:	3301      	adds	r3, #1
 80071d0:	b281      	uxth	r1, r0
 80071d2:	fb02 7101 	mla	r1, r2, r1, r7
 80071d6:	0c00      	lsrs	r0, r0, #16
 80071d8:	0c0f      	lsrs	r7, r1, #16
 80071da:	fb02 7000 	mla	r0, r2, r0, r7
 80071de:	b289      	uxth	r1, r1
 80071e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80071e4:	429d      	cmp	r5, r3
 80071e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80071ea:	f84c 1b04 	str.w	r1, [ip], #4
 80071ee:	dcec      	bgt.n	80071ca <__multadd+0x12>
 80071f0:	b1d7      	cbz	r7, 8007228 <__multadd+0x70>
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	42ab      	cmp	r3, r5
 80071f6:	dc12      	bgt.n	800721e <__multadd+0x66>
 80071f8:	6861      	ldr	r1, [r4, #4]
 80071fa:	4630      	mov	r0, r6
 80071fc:	3101      	adds	r1, #1
 80071fe:	f7ff ff90 	bl	8007122 <_Balloc>
 8007202:	4680      	mov	r8, r0
 8007204:	6922      	ldr	r2, [r4, #16]
 8007206:	f104 010c 	add.w	r1, r4, #12
 800720a:	3202      	adds	r2, #2
 800720c:	0092      	lsls	r2, r2, #2
 800720e:	300c      	adds	r0, #12
 8007210:	f7ff ff7c 	bl	800710c <memcpy>
 8007214:	4621      	mov	r1, r4
 8007216:	4630      	mov	r0, r6
 8007218:	f7ff ffb7 	bl	800718a <_Bfree>
 800721c:	4644      	mov	r4, r8
 800721e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007222:	3501      	adds	r5, #1
 8007224:	615f      	str	r7, [r3, #20]
 8007226:	6125      	str	r5, [r4, #16]
 8007228:	4620      	mov	r0, r4
 800722a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800722e <__hi0bits>:
 800722e:	0c02      	lsrs	r2, r0, #16
 8007230:	0412      	lsls	r2, r2, #16
 8007232:	4603      	mov	r3, r0
 8007234:	b9b2      	cbnz	r2, 8007264 <__hi0bits+0x36>
 8007236:	0403      	lsls	r3, r0, #16
 8007238:	2010      	movs	r0, #16
 800723a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800723e:	bf04      	itt	eq
 8007240:	021b      	lsleq	r3, r3, #8
 8007242:	3008      	addeq	r0, #8
 8007244:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007248:	bf04      	itt	eq
 800724a:	011b      	lsleq	r3, r3, #4
 800724c:	3004      	addeq	r0, #4
 800724e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007252:	bf04      	itt	eq
 8007254:	009b      	lsleq	r3, r3, #2
 8007256:	3002      	addeq	r0, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	db06      	blt.n	800726a <__hi0bits+0x3c>
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	d503      	bpl.n	8007268 <__hi0bits+0x3a>
 8007260:	3001      	adds	r0, #1
 8007262:	4770      	bx	lr
 8007264:	2000      	movs	r0, #0
 8007266:	e7e8      	b.n	800723a <__hi0bits+0xc>
 8007268:	2020      	movs	r0, #32
 800726a:	4770      	bx	lr

0800726c <__lo0bits>:
 800726c:	6803      	ldr	r3, [r0, #0]
 800726e:	4601      	mov	r1, r0
 8007270:	f013 0207 	ands.w	r2, r3, #7
 8007274:	d00b      	beq.n	800728e <__lo0bits+0x22>
 8007276:	07da      	lsls	r2, r3, #31
 8007278:	d423      	bmi.n	80072c2 <__lo0bits+0x56>
 800727a:	0798      	lsls	r0, r3, #30
 800727c:	bf49      	itett	mi
 800727e:	085b      	lsrmi	r3, r3, #1
 8007280:	089b      	lsrpl	r3, r3, #2
 8007282:	2001      	movmi	r0, #1
 8007284:	600b      	strmi	r3, [r1, #0]
 8007286:	bf5c      	itt	pl
 8007288:	600b      	strpl	r3, [r1, #0]
 800728a:	2002      	movpl	r0, #2
 800728c:	4770      	bx	lr
 800728e:	b298      	uxth	r0, r3
 8007290:	b9a8      	cbnz	r0, 80072be <__lo0bits+0x52>
 8007292:	2010      	movs	r0, #16
 8007294:	0c1b      	lsrs	r3, r3, #16
 8007296:	f013 0fff 	tst.w	r3, #255	; 0xff
 800729a:	bf04      	itt	eq
 800729c:	0a1b      	lsreq	r3, r3, #8
 800729e:	3008      	addeq	r0, #8
 80072a0:	071a      	lsls	r2, r3, #28
 80072a2:	bf04      	itt	eq
 80072a4:	091b      	lsreq	r3, r3, #4
 80072a6:	3004      	addeq	r0, #4
 80072a8:	079a      	lsls	r2, r3, #30
 80072aa:	bf04      	itt	eq
 80072ac:	089b      	lsreq	r3, r3, #2
 80072ae:	3002      	addeq	r0, #2
 80072b0:	07da      	lsls	r2, r3, #31
 80072b2:	d402      	bmi.n	80072ba <__lo0bits+0x4e>
 80072b4:	085b      	lsrs	r3, r3, #1
 80072b6:	d006      	beq.n	80072c6 <__lo0bits+0x5a>
 80072b8:	3001      	adds	r0, #1
 80072ba:	600b      	str	r3, [r1, #0]
 80072bc:	4770      	bx	lr
 80072be:	4610      	mov	r0, r2
 80072c0:	e7e9      	b.n	8007296 <__lo0bits+0x2a>
 80072c2:	2000      	movs	r0, #0
 80072c4:	4770      	bx	lr
 80072c6:	2020      	movs	r0, #32
 80072c8:	4770      	bx	lr

080072ca <__i2b>:
 80072ca:	b510      	push	{r4, lr}
 80072cc:	460c      	mov	r4, r1
 80072ce:	2101      	movs	r1, #1
 80072d0:	f7ff ff27 	bl	8007122 <_Balloc>
 80072d4:	2201      	movs	r2, #1
 80072d6:	6144      	str	r4, [r0, #20]
 80072d8:	6102      	str	r2, [r0, #16]
 80072da:	bd10      	pop	{r4, pc}

080072dc <__multiply>:
 80072dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	4614      	mov	r4, r2
 80072e2:	690a      	ldr	r2, [r1, #16]
 80072e4:	6923      	ldr	r3, [r4, #16]
 80072e6:	4688      	mov	r8, r1
 80072e8:	429a      	cmp	r2, r3
 80072ea:	bfbe      	ittt	lt
 80072ec:	460b      	movlt	r3, r1
 80072ee:	46a0      	movlt	r8, r4
 80072f0:	461c      	movlt	r4, r3
 80072f2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072f6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007302:	eb07 0609 	add.w	r6, r7, r9
 8007306:	42b3      	cmp	r3, r6
 8007308:	bfb8      	it	lt
 800730a:	3101      	addlt	r1, #1
 800730c:	f7ff ff09 	bl	8007122 <_Balloc>
 8007310:	f100 0514 	add.w	r5, r0, #20
 8007314:	462b      	mov	r3, r5
 8007316:	2200      	movs	r2, #0
 8007318:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800731c:	4573      	cmp	r3, lr
 800731e:	d316      	bcc.n	800734e <__multiply+0x72>
 8007320:	f104 0214 	add.w	r2, r4, #20
 8007324:	f108 0114 	add.w	r1, r8, #20
 8007328:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800732c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	9b00      	ldr	r3, [sp, #0]
 8007334:	9201      	str	r2, [sp, #4]
 8007336:	4293      	cmp	r3, r2
 8007338:	d80c      	bhi.n	8007354 <__multiply+0x78>
 800733a:	2e00      	cmp	r6, #0
 800733c:	dd03      	ble.n	8007346 <__multiply+0x6a>
 800733e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007342:	2b00      	cmp	r3, #0
 8007344:	d05d      	beq.n	8007402 <__multiply+0x126>
 8007346:	6106      	str	r6, [r0, #16]
 8007348:	b003      	add	sp, #12
 800734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734e:	f843 2b04 	str.w	r2, [r3], #4
 8007352:	e7e3      	b.n	800731c <__multiply+0x40>
 8007354:	f8b2 b000 	ldrh.w	fp, [r2]
 8007358:	f1bb 0f00 	cmp.w	fp, #0
 800735c:	d023      	beq.n	80073a6 <__multiply+0xca>
 800735e:	4689      	mov	r9, r1
 8007360:	46ac      	mov	ip, r5
 8007362:	f04f 0800 	mov.w	r8, #0
 8007366:	f859 4b04 	ldr.w	r4, [r9], #4
 800736a:	f8dc a000 	ldr.w	sl, [ip]
 800736e:	b2a3      	uxth	r3, r4
 8007370:	fa1f fa8a 	uxth.w	sl, sl
 8007374:	fb0b a303 	mla	r3, fp, r3, sl
 8007378:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800737c:	f8dc 4000 	ldr.w	r4, [ip]
 8007380:	4443      	add	r3, r8
 8007382:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007386:	fb0b 840a 	mla	r4, fp, sl, r8
 800738a:	46e2      	mov	sl, ip
 800738c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007390:	b29b      	uxth	r3, r3
 8007392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007396:	454f      	cmp	r7, r9
 8007398:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800739c:	f84a 3b04 	str.w	r3, [sl], #4
 80073a0:	d82b      	bhi.n	80073fa <__multiply+0x11e>
 80073a2:	f8cc 8004 	str.w	r8, [ip, #4]
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	3204      	adds	r2, #4
 80073aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80073ae:	f1ba 0f00 	cmp.w	sl, #0
 80073b2:	d020      	beq.n	80073f6 <__multiply+0x11a>
 80073b4:	4689      	mov	r9, r1
 80073b6:	46a8      	mov	r8, r5
 80073b8:	f04f 0b00 	mov.w	fp, #0
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	f8b9 c000 	ldrh.w	ip, [r9]
 80073c2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	fb0a 440c 	mla	r4, sl, ip, r4
 80073cc:	46c4      	mov	ip, r8
 80073ce:	445c      	add	r4, fp
 80073d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80073d4:	f84c 3b04 	str.w	r3, [ip], #4
 80073d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80073dc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	fb0a b303 	mla	r3, sl, r3, fp
 80073e6:	454f      	cmp	r7, r9
 80073e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80073ec:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80073f0:	d805      	bhi.n	80073fe <__multiply+0x122>
 80073f2:	f8c8 3004 	str.w	r3, [r8, #4]
 80073f6:	3504      	adds	r5, #4
 80073f8:	e79b      	b.n	8007332 <__multiply+0x56>
 80073fa:	46d4      	mov	ip, sl
 80073fc:	e7b3      	b.n	8007366 <__multiply+0x8a>
 80073fe:	46e0      	mov	r8, ip
 8007400:	e7dd      	b.n	80073be <__multiply+0xe2>
 8007402:	3e01      	subs	r6, #1
 8007404:	e799      	b.n	800733a <__multiply+0x5e>
	...

08007408 <__pow5mult>:
 8007408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800740c:	4615      	mov	r5, r2
 800740e:	f012 0203 	ands.w	r2, r2, #3
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	d007      	beq.n	8007428 <__pow5mult+0x20>
 8007418:	4c21      	ldr	r4, [pc, #132]	; (80074a0 <__pow5mult+0x98>)
 800741a:	3a01      	subs	r2, #1
 800741c:	2300      	movs	r3, #0
 800741e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007422:	f7ff fec9 	bl	80071b8 <__multadd>
 8007426:	4607      	mov	r7, r0
 8007428:	10ad      	asrs	r5, r5, #2
 800742a:	d035      	beq.n	8007498 <__pow5mult+0x90>
 800742c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800742e:	b93c      	cbnz	r4, 8007440 <__pow5mult+0x38>
 8007430:	2010      	movs	r0, #16
 8007432:	f7ff fe55 	bl	80070e0 <malloc>
 8007436:	6270      	str	r0, [r6, #36]	; 0x24
 8007438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800743c:	6004      	str	r4, [r0, #0]
 800743e:	60c4      	str	r4, [r0, #12]
 8007440:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007448:	b94c      	cbnz	r4, 800745e <__pow5mult+0x56>
 800744a:	f240 2171 	movw	r1, #625	; 0x271
 800744e:	4630      	mov	r0, r6
 8007450:	f7ff ff3b 	bl	80072ca <__i2b>
 8007454:	2300      	movs	r3, #0
 8007456:	4604      	mov	r4, r0
 8007458:	f8c8 0008 	str.w	r0, [r8, #8]
 800745c:	6003      	str	r3, [r0, #0]
 800745e:	f04f 0800 	mov.w	r8, #0
 8007462:	07eb      	lsls	r3, r5, #31
 8007464:	d50a      	bpl.n	800747c <__pow5mult+0x74>
 8007466:	4639      	mov	r1, r7
 8007468:	4622      	mov	r2, r4
 800746a:	4630      	mov	r0, r6
 800746c:	f7ff ff36 	bl	80072dc <__multiply>
 8007470:	4681      	mov	r9, r0
 8007472:	4639      	mov	r1, r7
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff fe88 	bl	800718a <_Bfree>
 800747a:	464f      	mov	r7, r9
 800747c:	106d      	asrs	r5, r5, #1
 800747e:	d00b      	beq.n	8007498 <__pow5mult+0x90>
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	b938      	cbnz	r0, 8007494 <__pow5mult+0x8c>
 8007484:	4622      	mov	r2, r4
 8007486:	4621      	mov	r1, r4
 8007488:	4630      	mov	r0, r6
 800748a:	f7ff ff27 	bl	80072dc <__multiply>
 800748e:	6020      	str	r0, [r4, #0]
 8007490:	f8c0 8000 	str.w	r8, [r0]
 8007494:	4604      	mov	r4, r0
 8007496:	e7e4      	b.n	8007462 <__pow5mult+0x5a>
 8007498:	4638      	mov	r0, r7
 800749a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800749e:	bf00      	nop
 80074a0:	08008ac0 	.word	0x08008ac0

080074a4 <__lshift>:
 80074a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	460c      	mov	r4, r1
 80074aa:	4607      	mov	r7, r0
 80074ac:	4616      	mov	r6, r2
 80074ae:	6923      	ldr	r3, [r4, #16]
 80074b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074b4:	eb0a 0903 	add.w	r9, sl, r3
 80074b8:	6849      	ldr	r1, [r1, #4]
 80074ba:	68a3      	ldr	r3, [r4, #8]
 80074bc:	f109 0501 	add.w	r5, r9, #1
 80074c0:	42ab      	cmp	r3, r5
 80074c2:	db32      	blt.n	800752a <__lshift+0x86>
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff fe2c 	bl	8007122 <_Balloc>
 80074ca:	2300      	movs	r3, #0
 80074cc:	4680      	mov	r8, r0
 80074ce:	461a      	mov	r2, r3
 80074d0:	f100 0114 	add.w	r1, r0, #20
 80074d4:	4553      	cmp	r3, sl
 80074d6:	db2b      	blt.n	8007530 <__lshift+0x8c>
 80074d8:	6920      	ldr	r0, [r4, #16]
 80074da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074de:	f104 0314 	add.w	r3, r4, #20
 80074e2:	f016 021f 	ands.w	r2, r6, #31
 80074e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074ee:	d025      	beq.n	800753c <__lshift+0x98>
 80074f0:	2000      	movs	r0, #0
 80074f2:	f1c2 0e20 	rsb	lr, r2, #32
 80074f6:	468a      	mov	sl, r1
 80074f8:	681e      	ldr	r6, [r3, #0]
 80074fa:	4096      	lsls	r6, r2
 80074fc:	4330      	orrs	r0, r6
 80074fe:	f84a 0b04 	str.w	r0, [sl], #4
 8007502:	f853 0b04 	ldr.w	r0, [r3], #4
 8007506:	459c      	cmp	ip, r3
 8007508:	fa20 f00e 	lsr.w	r0, r0, lr
 800750c:	d814      	bhi.n	8007538 <__lshift+0x94>
 800750e:	6048      	str	r0, [r1, #4]
 8007510:	b108      	cbz	r0, 8007516 <__lshift+0x72>
 8007512:	f109 0502 	add.w	r5, r9, #2
 8007516:	3d01      	subs	r5, #1
 8007518:	4638      	mov	r0, r7
 800751a:	f8c8 5010 	str.w	r5, [r8, #16]
 800751e:	4621      	mov	r1, r4
 8007520:	f7ff fe33 	bl	800718a <_Bfree>
 8007524:	4640      	mov	r0, r8
 8007526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752a:	3101      	adds	r1, #1
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	e7c7      	b.n	80074c0 <__lshift+0x1c>
 8007530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007534:	3301      	adds	r3, #1
 8007536:	e7cd      	b.n	80074d4 <__lshift+0x30>
 8007538:	4651      	mov	r1, sl
 800753a:	e7dc      	b.n	80074f6 <__lshift+0x52>
 800753c:	3904      	subs	r1, #4
 800753e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007542:	459c      	cmp	ip, r3
 8007544:	f841 2f04 	str.w	r2, [r1, #4]!
 8007548:	d8f9      	bhi.n	800753e <__lshift+0x9a>
 800754a:	e7e4      	b.n	8007516 <__lshift+0x72>

0800754c <__mcmp>:
 800754c:	6903      	ldr	r3, [r0, #16]
 800754e:	690a      	ldr	r2, [r1, #16]
 8007550:	b530      	push	{r4, r5, lr}
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	d10c      	bne.n	8007570 <__mcmp+0x24>
 8007556:	0092      	lsls	r2, r2, #2
 8007558:	3014      	adds	r0, #20
 800755a:	3114      	adds	r1, #20
 800755c:	1884      	adds	r4, r0, r2
 800755e:	4411      	add	r1, r2
 8007560:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007564:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007568:	4295      	cmp	r5, r2
 800756a:	d003      	beq.n	8007574 <__mcmp+0x28>
 800756c:	d305      	bcc.n	800757a <__mcmp+0x2e>
 800756e:	2301      	movs	r3, #1
 8007570:	4618      	mov	r0, r3
 8007572:	bd30      	pop	{r4, r5, pc}
 8007574:	42a0      	cmp	r0, r4
 8007576:	d3f3      	bcc.n	8007560 <__mcmp+0x14>
 8007578:	e7fa      	b.n	8007570 <__mcmp+0x24>
 800757a:	f04f 33ff 	mov.w	r3, #4294967295
 800757e:	e7f7      	b.n	8007570 <__mcmp+0x24>

08007580 <__mdiff>:
 8007580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007584:	460d      	mov	r5, r1
 8007586:	4607      	mov	r7, r0
 8007588:	4611      	mov	r1, r2
 800758a:	4628      	mov	r0, r5
 800758c:	4614      	mov	r4, r2
 800758e:	f7ff ffdd 	bl	800754c <__mcmp>
 8007592:	1e06      	subs	r6, r0, #0
 8007594:	d108      	bne.n	80075a8 <__mdiff+0x28>
 8007596:	4631      	mov	r1, r6
 8007598:	4638      	mov	r0, r7
 800759a:	f7ff fdc2 	bl	8007122 <_Balloc>
 800759e:	2301      	movs	r3, #1
 80075a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	bfa4      	itt	ge
 80075aa:	4623      	movge	r3, r4
 80075ac:	462c      	movge	r4, r5
 80075ae:	4638      	mov	r0, r7
 80075b0:	6861      	ldr	r1, [r4, #4]
 80075b2:	bfa6      	itte	ge
 80075b4:	461d      	movge	r5, r3
 80075b6:	2600      	movge	r6, #0
 80075b8:	2601      	movlt	r6, #1
 80075ba:	f7ff fdb2 	bl	8007122 <_Balloc>
 80075be:	f04f 0e00 	mov.w	lr, #0
 80075c2:	60c6      	str	r6, [r0, #12]
 80075c4:	692b      	ldr	r3, [r5, #16]
 80075c6:	6926      	ldr	r6, [r4, #16]
 80075c8:	f104 0214 	add.w	r2, r4, #20
 80075cc:	f105 0914 	add.w	r9, r5, #20
 80075d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80075d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80075d8:	f100 0114 	add.w	r1, r0, #20
 80075dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80075e0:	f859 5b04 	ldr.w	r5, [r9], #4
 80075e4:	fa1f f38a 	uxth.w	r3, sl
 80075e8:	4473      	add	r3, lr
 80075ea:	b2ac      	uxth	r4, r5
 80075ec:	1b1b      	subs	r3, r3, r4
 80075ee:	0c2c      	lsrs	r4, r5, #16
 80075f0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80075f4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80075fe:	45c8      	cmp	r8, r9
 8007600:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007604:	4694      	mov	ip, r2
 8007606:	f841 4b04 	str.w	r4, [r1], #4
 800760a:	d8e7      	bhi.n	80075dc <__mdiff+0x5c>
 800760c:	45bc      	cmp	ip, r7
 800760e:	d304      	bcc.n	800761a <__mdiff+0x9a>
 8007610:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007614:	b183      	cbz	r3, 8007638 <__mdiff+0xb8>
 8007616:	6106      	str	r6, [r0, #16]
 8007618:	e7c4      	b.n	80075a4 <__mdiff+0x24>
 800761a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800761e:	b2a2      	uxth	r2, r4
 8007620:	4472      	add	r2, lr
 8007622:	1413      	asrs	r3, r2, #16
 8007624:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007628:	b292      	uxth	r2, r2
 800762a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800762e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007632:	f841 2b04 	str.w	r2, [r1], #4
 8007636:	e7e9      	b.n	800760c <__mdiff+0x8c>
 8007638:	3e01      	subs	r6, #1
 800763a:	e7e9      	b.n	8007610 <__mdiff+0x90>

0800763c <__d2b>:
 800763c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007640:	461c      	mov	r4, r3
 8007642:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007646:	2101      	movs	r1, #1
 8007648:	4690      	mov	r8, r2
 800764a:	f7ff fd6a 	bl	8007122 <_Balloc>
 800764e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007652:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007656:	4607      	mov	r7, r0
 8007658:	bb34      	cbnz	r4, 80076a8 <__d2b+0x6c>
 800765a:	9201      	str	r2, [sp, #4]
 800765c:	f1b8 0200 	subs.w	r2, r8, #0
 8007660:	d027      	beq.n	80076b2 <__d2b+0x76>
 8007662:	a802      	add	r0, sp, #8
 8007664:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007668:	f7ff fe00 	bl	800726c <__lo0bits>
 800766c:	9900      	ldr	r1, [sp, #0]
 800766e:	b1f0      	cbz	r0, 80076ae <__d2b+0x72>
 8007670:	9a01      	ldr	r2, [sp, #4]
 8007672:	f1c0 0320 	rsb	r3, r0, #32
 8007676:	fa02 f303 	lsl.w	r3, r2, r3
 800767a:	430b      	orrs	r3, r1
 800767c:	40c2      	lsrs	r2, r0
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	9201      	str	r2, [sp, #4]
 8007682:	9b01      	ldr	r3, [sp, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	bf14      	ite	ne
 8007688:	2102      	movne	r1, #2
 800768a:	2101      	moveq	r1, #1
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	6139      	str	r1, [r7, #16]
 8007690:	b1c4      	cbz	r4, 80076c4 <__d2b+0x88>
 8007692:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007696:	4404      	add	r4, r0
 8007698:	6034      	str	r4, [r6, #0]
 800769a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800769e:	6028      	str	r0, [r5, #0]
 80076a0:	4638      	mov	r0, r7
 80076a2:	b002      	add	sp, #8
 80076a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80076ac:	e7d5      	b.n	800765a <__d2b+0x1e>
 80076ae:	6179      	str	r1, [r7, #20]
 80076b0:	e7e7      	b.n	8007682 <__d2b+0x46>
 80076b2:	a801      	add	r0, sp, #4
 80076b4:	f7ff fdda 	bl	800726c <__lo0bits>
 80076b8:	2101      	movs	r1, #1
 80076ba:	9b01      	ldr	r3, [sp, #4]
 80076bc:	6139      	str	r1, [r7, #16]
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	3020      	adds	r0, #32
 80076c2:	e7e5      	b.n	8007690 <__d2b+0x54>
 80076c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80076cc:	6030      	str	r0, [r6, #0]
 80076ce:	6918      	ldr	r0, [r3, #16]
 80076d0:	f7ff fdad 	bl	800722e <__hi0bits>
 80076d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80076d8:	e7e1      	b.n	800769e <__d2b+0x62>

080076da <_calloc_r>:
 80076da:	b538      	push	{r3, r4, r5, lr}
 80076dc:	fb02 f401 	mul.w	r4, r2, r1
 80076e0:	4621      	mov	r1, r4
 80076e2:	f000 f855 	bl	8007790 <_malloc_r>
 80076e6:	4605      	mov	r5, r0
 80076e8:	b118      	cbz	r0, 80076f2 <_calloc_r+0x18>
 80076ea:	4622      	mov	r2, r4
 80076ec:	2100      	movs	r1, #0
 80076ee:	f7fd ff13 	bl	8005518 <memset>
 80076f2:	4628      	mov	r0, r5
 80076f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080076f8 <_free_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4605      	mov	r5, r0
 80076fc:	2900      	cmp	r1, #0
 80076fe:	d043      	beq.n	8007788 <_free_r+0x90>
 8007700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007704:	1f0c      	subs	r4, r1, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	bfb8      	it	lt
 800770a:	18e4      	addlt	r4, r4, r3
 800770c:	f000 fbff 	bl	8007f0e <__malloc_lock>
 8007710:	4a1e      	ldr	r2, [pc, #120]	; (800778c <_free_r+0x94>)
 8007712:	6813      	ldr	r3, [r2, #0]
 8007714:	4610      	mov	r0, r2
 8007716:	b933      	cbnz	r3, 8007726 <_free_r+0x2e>
 8007718:	6063      	str	r3, [r4, #4]
 800771a:	6014      	str	r4, [r2, #0]
 800771c:	4628      	mov	r0, r5
 800771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007722:	f000 bbf5 	b.w	8007f10 <__malloc_unlock>
 8007726:	42a3      	cmp	r3, r4
 8007728:	d90b      	bls.n	8007742 <_free_r+0x4a>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	1862      	adds	r2, r4, r1
 800772e:	4293      	cmp	r3, r2
 8007730:	bf01      	itttt	eq
 8007732:	681a      	ldreq	r2, [r3, #0]
 8007734:	685b      	ldreq	r3, [r3, #4]
 8007736:	1852      	addeq	r2, r2, r1
 8007738:	6022      	streq	r2, [r4, #0]
 800773a:	6063      	str	r3, [r4, #4]
 800773c:	6004      	str	r4, [r0, #0]
 800773e:	e7ed      	b.n	800771c <_free_r+0x24>
 8007740:	4613      	mov	r3, r2
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	b10a      	cbz	r2, 800774a <_free_r+0x52>
 8007746:	42a2      	cmp	r2, r4
 8007748:	d9fa      	bls.n	8007740 <_free_r+0x48>
 800774a:	6819      	ldr	r1, [r3, #0]
 800774c:	1858      	adds	r0, r3, r1
 800774e:	42a0      	cmp	r0, r4
 8007750:	d10b      	bne.n	800776a <_free_r+0x72>
 8007752:	6820      	ldr	r0, [r4, #0]
 8007754:	4401      	add	r1, r0
 8007756:	1858      	adds	r0, r3, r1
 8007758:	4282      	cmp	r2, r0
 800775a:	6019      	str	r1, [r3, #0]
 800775c:	d1de      	bne.n	800771c <_free_r+0x24>
 800775e:	6810      	ldr	r0, [r2, #0]
 8007760:	6852      	ldr	r2, [r2, #4]
 8007762:	4401      	add	r1, r0
 8007764:	6019      	str	r1, [r3, #0]
 8007766:	605a      	str	r2, [r3, #4]
 8007768:	e7d8      	b.n	800771c <_free_r+0x24>
 800776a:	d902      	bls.n	8007772 <_free_r+0x7a>
 800776c:	230c      	movs	r3, #12
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	e7d4      	b.n	800771c <_free_r+0x24>
 8007772:	6820      	ldr	r0, [r4, #0]
 8007774:	1821      	adds	r1, r4, r0
 8007776:	428a      	cmp	r2, r1
 8007778:	bf01      	itttt	eq
 800777a:	6811      	ldreq	r1, [r2, #0]
 800777c:	6852      	ldreq	r2, [r2, #4]
 800777e:	1809      	addeq	r1, r1, r0
 8007780:	6021      	streq	r1, [r4, #0]
 8007782:	6062      	str	r2, [r4, #4]
 8007784:	605c      	str	r4, [r3, #4]
 8007786:	e7c9      	b.n	800771c <_free_r+0x24>
 8007788:	bd38      	pop	{r3, r4, r5, pc}
 800778a:	bf00      	nop
 800778c:	20000d14 	.word	0x20000d14

08007790 <_malloc_r>:
 8007790:	b570      	push	{r4, r5, r6, lr}
 8007792:	1ccd      	adds	r5, r1, #3
 8007794:	f025 0503 	bic.w	r5, r5, #3
 8007798:	3508      	adds	r5, #8
 800779a:	2d0c      	cmp	r5, #12
 800779c:	bf38      	it	cc
 800779e:	250c      	movcc	r5, #12
 80077a0:	2d00      	cmp	r5, #0
 80077a2:	4606      	mov	r6, r0
 80077a4:	db01      	blt.n	80077aa <_malloc_r+0x1a>
 80077a6:	42a9      	cmp	r1, r5
 80077a8:	d903      	bls.n	80077b2 <_malloc_r+0x22>
 80077aa:	230c      	movs	r3, #12
 80077ac:	6033      	str	r3, [r6, #0]
 80077ae:	2000      	movs	r0, #0
 80077b0:	bd70      	pop	{r4, r5, r6, pc}
 80077b2:	f000 fbac 	bl	8007f0e <__malloc_lock>
 80077b6:	4a21      	ldr	r2, [pc, #132]	; (800783c <_malloc_r+0xac>)
 80077b8:	6814      	ldr	r4, [r2, #0]
 80077ba:	4621      	mov	r1, r4
 80077bc:	b991      	cbnz	r1, 80077e4 <_malloc_r+0x54>
 80077be:	4c20      	ldr	r4, [pc, #128]	; (8007840 <_malloc_r+0xb0>)
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	b91b      	cbnz	r3, 80077cc <_malloc_r+0x3c>
 80077c4:	4630      	mov	r0, r6
 80077c6:	f000 facd 	bl	8007d64 <_sbrk_r>
 80077ca:	6020      	str	r0, [r4, #0]
 80077cc:	4629      	mov	r1, r5
 80077ce:	4630      	mov	r0, r6
 80077d0:	f000 fac8 	bl	8007d64 <_sbrk_r>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d124      	bne.n	8007822 <_malloc_r+0x92>
 80077d8:	230c      	movs	r3, #12
 80077da:	4630      	mov	r0, r6
 80077dc:	6033      	str	r3, [r6, #0]
 80077de:	f000 fb97 	bl	8007f10 <__malloc_unlock>
 80077e2:	e7e4      	b.n	80077ae <_malloc_r+0x1e>
 80077e4:	680b      	ldr	r3, [r1, #0]
 80077e6:	1b5b      	subs	r3, r3, r5
 80077e8:	d418      	bmi.n	800781c <_malloc_r+0x8c>
 80077ea:	2b0b      	cmp	r3, #11
 80077ec:	d90f      	bls.n	800780e <_malloc_r+0x7e>
 80077ee:	600b      	str	r3, [r1, #0]
 80077f0:	18cc      	adds	r4, r1, r3
 80077f2:	50cd      	str	r5, [r1, r3]
 80077f4:	4630      	mov	r0, r6
 80077f6:	f000 fb8b 	bl	8007f10 <__malloc_unlock>
 80077fa:	f104 000b 	add.w	r0, r4, #11
 80077fe:	1d23      	adds	r3, r4, #4
 8007800:	f020 0007 	bic.w	r0, r0, #7
 8007804:	1ac3      	subs	r3, r0, r3
 8007806:	d0d3      	beq.n	80077b0 <_malloc_r+0x20>
 8007808:	425a      	negs	r2, r3
 800780a:	50e2      	str	r2, [r4, r3]
 800780c:	e7d0      	b.n	80077b0 <_malloc_r+0x20>
 800780e:	684b      	ldr	r3, [r1, #4]
 8007810:	428c      	cmp	r4, r1
 8007812:	bf16      	itet	ne
 8007814:	6063      	strne	r3, [r4, #4]
 8007816:	6013      	streq	r3, [r2, #0]
 8007818:	460c      	movne	r4, r1
 800781a:	e7eb      	b.n	80077f4 <_malloc_r+0x64>
 800781c:	460c      	mov	r4, r1
 800781e:	6849      	ldr	r1, [r1, #4]
 8007820:	e7cc      	b.n	80077bc <_malloc_r+0x2c>
 8007822:	1cc4      	adds	r4, r0, #3
 8007824:	f024 0403 	bic.w	r4, r4, #3
 8007828:	42a0      	cmp	r0, r4
 800782a:	d005      	beq.n	8007838 <_malloc_r+0xa8>
 800782c:	1a21      	subs	r1, r4, r0
 800782e:	4630      	mov	r0, r6
 8007830:	f000 fa98 	bl	8007d64 <_sbrk_r>
 8007834:	3001      	adds	r0, #1
 8007836:	d0cf      	beq.n	80077d8 <_malloc_r+0x48>
 8007838:	6025      	str	r5, [r4, #0]
 800783a:	e7db      	b.n	80077f4 <_malloc_r+0x64>
 800783c:	20000d14 	.word	0x20000d14
 8007840:	20000d18 	.word	0x20000d18

08007844 <__ssputs_r>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	688e      	ldr	r6, [r1, #8]
 800784a:	4682      	mov	sl, r0
 800784c:	429e      	cmp	r6, r3
 800784e:	460c      	mov	r4, r1
 8007850:	4690      	mov	r8, r2
 8007852:	4699      	mov	r9, r3
 8007854:	d837      	bhi.n	80078c6 <__ssputs_r+0x82>
 8007856:	898a      	ldrh	r2, [r1, #12]
 8007858:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800785c:	d031      	beq.n	80078c2 <__ssputs_r+0x7e>
 800785e:	2302      	movs	r3, #2
 8007860:	6825      	ldr	r5, [r4, #0]
 8007862:	6909      	ldr	r1, [r1, #16]
 8007864:	1a6f      	subs	r7, r5, r1
 8007866:	6965      	ldr	r5, [r4, #20]
 8007868:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800786c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007870:	f109 0301 	add.w	r3, r9, #1
 8007874:	443b      	add	r3, r7
 8007876:	429d      	cmp	r5, r3
 8007878:	bf38      	it	cc
 800787a:	461d      	movcc	r5, r3
 800787c:	0553      	lsls	r3, r2, #21
 800787e:	d530      	bpl.n	80078e2 <__ssputs_r+0x9e>
 8007880:	4629      	mov	r1, r5
 8007882:	f7ff ff85 	bl	8007790 <_malloc_r>
 8007886:	4606      	mov	r6, r0
 8007888:	b950      	cbnz	r0, 80078a0 <__ssputs_r+0x5c>
 800788a:	230c      	movs	r3, #12
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	f8ca 3000 	str.w	r3, [sl]
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800789a:	81a3      	strh	r3, [r4, #12]
 800789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a0:	463a      	mov	r2, r7
 80078a2:	6921      	ldr	r1, [r4, #16]
 80078a4:	f7ff fc32 	bl	800710c <memcpy>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	6126      	str	r6, [r4, #16]
 80078b6:	443e      	add	r6, r7
 80078b8:	6026      	str	r6, [r4, #0]
 80078ba:	464e      	mov	r6, r9
 80078bc:	6165      	str	r5, [r4, #20]
 80078be:	1bed      	subs	r5, r5, r7
 80078c0:	60a5      	str	r5, [r4, #8]
 80078c2:	454e      	cmp	r6, r9
 80078c4:	d900      	bls.n	80078c8 <__ssputs_r+0x84>
 80078c6:	464e      	mov	r6, r9
 80078c8:	4632      	mov	r2, r6
 80078ca:	4641      	mov	r1, r8
 80078cc:	6820      	ldr	r0, [r4, #0]
 80078ce:	f000 fb05 	bl	8007edc <memmove>
 80078d2:	68a3      	ldr	r3, [r4, #8]
 80078d4:	2000      	movs	r0, #0
 80078d6:	1b9b      	subs	r3, r3, r6
 80078d8:	60a3      	str	r3, [r4, #8]
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	441e      	add	r6, r3
 80078de:	6026      	str	r6, [r4, #0]
 80078e0:	e7dc      	b.n	800789c <__ssputs_r+0x58>
 80078e2:	462a      	mov	r2, r5
 80078e4:	f000 fb15 	bl	8007f12 <_realloc_r>
 80078e8:	4606      	mov	r6, r0
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d1e2      	bne.n	80078b4 <__ssputs_r+0x70>
 80078ee:	6921      	ldr	r1, [r4, #16]
 80078f0:	4650      	mov	r0, sl
 80078f2:	f7ff ff01 	bl	80076f8 <_free_r>
 80078f6:	e7c8      	b.n	800788a <__ssputs_r+0x46>

080078f8 <_svfiprintf_r>:
 80078f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	461d      	mov	r5, r3
 80078fe:	898b      	ldrh	r3, [r1, #12]
 8007900:	b09d      	sub	sp, #116	; 0x74
 8007902:	061f      	lsls	r7, r3, #24
 8007904:	4680      	mov	r8, r0
 8007906:	460c      	mov	r4, r1
 8007908:	4616      	mov	r6, r2
 800790a:	d50f      	bpl.n	800792c <_svfiprintf_r+0x34>
 800790c:	690b      	ldr	r3, [r1, #16]
 800790e:	b96b      	cbnz	r3, 800792c <_svfiprintf_r+0x34>
 8007910:	2140      	movs	r1, #64	; 0x40
 8007912:	f7ff ff3d 	bl	8007790 <_malloc_r>
 8007916:	6020      	str	r0, [r4, #0]
 8007918:	6120      	str	r0, [r4, #16]
 800791a:	b928      	cbnz	r0, 8007928 <_svfiprintf_r+0x30>
 800791c:	230c      	movs	r3, #12
 800791e:	f8c8 3000 	str.w	r3, [r8]
 8007922:	f04f 30ff 	mov.w	r0, #4294967295
 8007926:	e0c8      	b.n	8007aba <_svfiprintf_r+0x1c2>
 8007928:	2340      	movs	r3, #64	; 0x40
 800792a:	6163      	str	r3, [r4, #20]
 800792c:	2300      	movs	r3, #0
 800792e:	9309      	str	r3, [sp, #36]	; 0x24
 8007930:	2320      	movs	r3, #32
 8007932:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007936:	2330      	movs	r3, #48	; 0x30
 8007938:	f04f 0b01 	mov.w	fp, #1
 800793c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007940:	9503      	str	r5, [sp, #12]
 8007942:	4637      	mov	r7, r6
 8007944:	463d      	mov	r5, r7
 8007946:	f815 3b01 	ldrb.w	r3, [r5], #1
 800794a:	b10b      	cbz	r3, 8007950 <_svfiprintf_r+0x58>
 800794c:	2b25      	cmp	r3, #37	; 0x25
 800794e:	d13e      	bne.n	80079ce <_svfiprintf_r+0xd6>
 8007950:	ebb7 0a06 	subs.w	sl, r7, r6
 8007954:	d00b      	beq.n	800796e <_svfiprintf_r+0x76>
 8007956:	4653      	mov	r3, sl
 8007958:	4632      	mov	r2, r6
 800795a:	4621      	mov	r1, r4
 800795c:	4640      	mov	r0, r8
 800795e:	f7ff ff71 	bl	8007844 <__ssputs_r>
 8007962:	3001      	adds	r0, #1
 8007964:	f000 80a4 	beq.w	8007ab0 <_svfiprintf_r+0x1b8>
 8007968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796a:	4453      	add	r3, sl
 800796c:	9309      	str	r3, [sp, #36]	; 0x24
 800796e:	783b      	ldrb	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 809d 	beq.w	8007ab0 <_svfiprintf_r+0x1b8>
 8007976:	2300      	movs	r3, #0
 8007978:	f04f 32ff 	mov.w	r2, #4294967295
 800797c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	9307      	str	r3, [sp, #28]
 8007984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007988:	931a      	str	r3, [sp, #104]	; 0x68
 800798a:	462f      	mov	r7, r5
 800798c:	2205      	movs	r2, #5
 800798e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007992:	4850      	ldr	r0, [pc, #320]	; (8007ad4 <_svfiprintf_r+0x1dc>)
 8007994:	f7ff fbac 	bl	80070f0 <memchr>
 8007998:	9b04      	ldr	r3, [sp, #16]
 800799a:	b9d0      	cbnz	r0, 80079d2 <_svfiprintf_r+0xda>
 800799c:	06d9      	lsls	r1, r3, #27
 800799e:	bf44      	itt	mi
 80079a0:	2220      	movmi	r2, #32
 80079a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079a6:	071a      	lsls	r2, r3, #28
 80079a8:	bf44      	itt	mi
 80079aa:	222b      	movmi	r2, #43	; 0x2b
 80079ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079b0:	782a      	ldrb	r2, [r5, #0]
 80079b2:	2a2a      	cmp	r2, #42	; 0x2a
 80079b4:	d015      	beq.n	80079e2 <_svfiprintf_r+0xea>
 80079b6:	462f      	mov	r7, r5
 80079b8:	2000      	movs	r0, #0
 80079ba:	250a      	movs	r5, #10
 80079bc:	9a07      	ldr	r2, [sp, #28]
 80079be:	4639      	mov	r1, r7
 80079c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079c4:	3b30      	subs	r3, #48	; 0x30
 80079c6:	2b09      	cmp	r3, #9
 80079c8:	d94d      	bls.n	8007a66 <_svfiprintf_r+0x16e>
 80079ca:	b1b8      	cbz	r0, 80079fc <_svfiprintf_r+0x104>
 80079cc:	e00f      	b.n	80079ee <_svfiprintf_r+0xf6>
 80079ce:	462f      	mov	r7, r5
 80079d0:	e7b8      	b.n	8007944 <_svfiprintf_r+0x4c>
 80079d2:	4a40      	ldr	r2, [pc, #256]	; (8007ad4 <_svfiprintf_r+0x1dc>)
 80079d4:	463d      	mov	r5, r7
 80079d6:	1a80      	subs	r0, r0, r2
 80079d8:	fa0b f000 	lsl.w	r0, fp, r0
 80079dc:	4318      	orrs	r0, r3
 80079de:	9004      	str	r0, [sp, #16]
 80079e0:	e7d3      	b.n	800798a <_svfiprintf_r+0x92>
 80079e2:	9a03      	ldr	r2, [sp, #12]
 80079e4:	1d11      	adds	r1, r2, #4
 80079e6:	6812      	ldr	r2, [r2, #0]
 80079e8:	9103      	str	r1, [sp, #12]
 80079ea:	2a00      	cmp	r2, #0
 80079ec:	db01      	blt.n	80079f2 <_svfiprintf_r+0xfa>
 80079ee:	9207      	str	r2, [sp, #28]
 80079f0:	e004      	b.n	80079fc <_svfiprintf_r+0x104>
 80079f2:	4252      	negs	r2, r2
 80079f4:	f043 0302 	orr.w	r3, r3, #2
 80079f8:	9207      	str	r2, [sp, #28]
 80079fa:	9304      	str	r3, [sp, #16]
 80079fc:	783b      	ldrb	r3, [r7, #0]
 80079fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007a00:	d10c      	bne.n	8007a1c <_svfiprintf_r+0x124>
 8007a02:	787b      	ldrb	r3, [r7, #1]
 8007a04:	2b2a      	cmp	r3, #42	; 0x2a
 8007a06:	d133      	bne.n	8007a70 <_svfiprintf_r+0x178>
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	3702      	adds	r7, #2
 8007a0c:	1d1a      	adds	r2, r3, #4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	9203      	str	r2, [sp, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bfb8      	it	lt
 8007a16:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a1a:	9305      	str	r3, [sp, #20]
 8007a1c:	4d2e      	ldr	r5, [pc, #184]	; (8007ad8 <_svfiprintf_r+0x1e0>)
 8007a1e:	2203      	movs	r2, #3
 8007a20:	7839      	ldrb	r1, [r7, #0]
 8007a22:	4628      	mov	r0, r5
 8007a24:	f7ff fb64 	bl	80070f0 <memchr>
 8007a28:	b138      	cbz	r0, 8007a3a <_svfiprintf_r+0x142>
 8007a2a:	2340      	movs	r3, #64	; 0x40
 8007a2c:	1b40      	subs	r0, r0, r5
 8007a2e:	fa03 f000 	lsl.w	r0, r3, r0
 8007a32:	9b04      	ldr	r3, [sp, #16]
 8007a34:	3701      	adds	r7, #1
 8007a36:	4303      	orrs	r3, r0
 8007a38:	9304      	str	r3, [sp, #16]
 8007a3a:	7839      	ldrb	r1, [r7, #0]
 8007a3c:	2206      	movs	r2, #6
 8007a3e:	4827      	ldr	r0, [pc, #156]	; (8007adc <_svfiprintf_r+0x1e4>)
 8007a40:	1c7e      	adds	r6, r7, #1
 8007a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a46:	f7ff fb53 	bl	80070f0 <memchr>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d038      	beq.n	8007ac0 <_svfiprintf_r+0x1c8>
 8007a4e:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <_svfiprintf_r+0x1e8>)
 8007a50:	bb13      	cbnz	r3, 8007a98 <_svfiprintf_r+0x1a0>
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	3307      	adds	r3, #7
 8007a56:	f023 0307 	bic.w	r3, r3, #7
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	9303      	str	r3, [sp, #12]
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	444b      	add	r3, r9
 8007a62:	9309      	str	r3, [sp, #36]	; 0x24
 8007a64:	e76d      	b.n	8007942 <_svfiprintf_r+0x4a>
 8007a66:	fb05 3202 	mla	r2, r5, r2, r3
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	e7a6      	b.n	80079be <_svfiprintf_r+0xc6>
 8007a70:	2300      	movs	r3, #0
 8007a72:	250a      	movs	r5, #10
 8007a74:	4619      	mov	r1, r3
 8007a76:	3701      	adds	r7, #1
 8007a78:	9305      	str	r3, [sp, #20]
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a80:	3a30      	subs	r2, #48	; 0x30
 8007a82:	2a09      	cmp	r2, #9
 8007a84:	d903      	bls.n	8007a8e <_svfiprintf_r+0x196>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0c8      	beq.n	8007a1c <_svfiprintf_r+0x124>
 8007a8a:	9105      	str	r1, [sp, #20]
 8007a8c:	e7c6      	b.n	8007a1c <_svfiprintf_r+0x124>
 8007a8e:	fb05 2101 	mla	r1, r5, r1, r2
 8007a92:	2301      	movs	r3, #1
 8007a94:	4607      	mov	r7, r0
 8007a96:	e7f0      	b.n	8007a7a <_svfiprintf_r+0x182>
 8007a98:	ab03      	add	r3, sp, #12
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <_svfiprintf_r+0x1ec>)
 8007aa0:	a904      	add	r1, sp, #16
 8007aa2:	4640      	mov	r0, r8
 8007aa4:	f7fd fdd2 	bl	800564c <_printf_float>
 8007aa8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007aac:	4681      	mov	r9, r0
 8007aae:	d1d6      	bne.n	8007a5e <_svfiprintf_r+0x166>
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	065b      	lsls	r3, r3, #25
 8007ab4:	f53f af35 	bmi.w	8007922 <_svfiprintf_r+0x2a>
 8007ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007aba:	b01d      	add	sp, #116	; 0x74
 8007abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac0:	ab03      	add	r3, sp, #12
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <_svfiprintf_r+0x1ec>)
 8007ac8:	a904      	add	r1, sp, #16
 8007aca:	4640      	mov	r0, r8
 8007acc:	f7fe f86a 	bl	8005ba4 <_printf_i>
 8007ad0:	e7ea      	b.n	8007aa8 <_svfiprintf_r+0x1b0>
 8007ad2:	bf00      	nop
 8007ad4:	08008acc 	.word	0x08008acc
 8007ad8:	08008ad2 	.word	0x08008ad2
 8007adc:	08008ad6 	.word	0x08008ad6
 8007ae0:	0800564d 	.word	0x0800564d
 8007ae4:	08007845 	.word	0x08007845

08007ae8 <__sfputc_r>:
 8007ae8:	6893      	ldr	r3, [r2, #8]
 8007aea:	b410      	push	{r4}
 8007aec:	3b01      	subs	r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	6093      	str	r3, [r2, #8]
 8007af2:	da07      	bge.n	8007b04 <__sfputc_r+0x1c>
 8007af4:	6994      	ldr	r4, [r2, #24]
 8007af6:	42a3      	cmp	r3, r4
 8007af8:	db01      	blt.n	8007afe <__sfputc_r+0x16>
 8007afa:	290a      	cmp	r1, #10
 8007afc:	d102      	bne.n	8007b04 <__sfputc_r+0x1c>
 8007afe:	bc10      	pop	{r4}
 8007b00:	f7fe b9fe 	b.w	8005f00 <__swbuf_r>
 8007b04:	6813      	ldr	r3, [r2, #0]
 8007b06:	1c58      	adds	r0, r3, #1
 8007b08:	6010      	str	r0, [r2, #0]
 8007b0a:	7019      	strb	r1, [r3, #0]
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	bc10      	pop	{r4}
 8007b10:	4770      	bx	lr

08007b12 <__sfputs_r>:
 8007b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b14:	4606      	mov	r6, r0
 8007b16:	460f      	mov	r7, r1
 8007b18:	4614      	mov	r4, r2
 8007b1a:	18d5      	adds	r5, r2, r3
 8007b1c:	42ac      	cmp	r4, r5
 8007b1e:	d101      	bne.n	8007b24 <__sfputs_r+0x12>
 8007b20:	2000      	movs	r0, #0
 8007b22:	e007      	b.n	8007b34 <__sfputs_r+0x22>
 8007b24:	463a      	mov	r2, r7
 8007b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7ff ffdc 	bl	8007ae8 <__sfputc_r>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	d1f3      	bne.n	8007b1c <__sfputs_r+0xa>
 8007b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b38 <_vfiprintf_r>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	b09d      	sub	sp, #116	; 0x74
 8007b40:	4617      	mov	r7, r2
 8007b42:	461d      	mov	r5, r3
 8007b44:	4606      	mov	r6, r0
 8007b46:	b118      	cbz	r0, 8007b50 <_vfiprintf_r+0x18>
 8007b48:	6983      	ldr	r3, [r0, #24]
 8007b4a:	b90b      	cbnz	r3, 8007b50 <_vfiprintf_r+0x18>
 8007b4c:	f7ff f9cc 	bl	8006ee8 <__sinit>
 8007b50:	4b7c      	ldr	r3, [pc, #496]	; (8007d44 <_vfiprintf_r+0x20c>)
 8007b52:	429c      	cmp	r4, r3
 8007b54:	d158      	bne.n	8007c08 <_vfiprintf_r+0xd0>
 8007b56:	6874      	ldr	r4, [r6, #4]
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	0718      	lsls	r0, r3, #28
 8007b5c:	d55e      	bpl.n	8007c1c <_vfiprintf_r+0xe4>
 8007b5e:	6923      	ldr	r3, [r4, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d05b      	beq.n	8007c1c <_vfiprintf_r+0xe4>
 8007b64:	2300      	movs	r3, #0
 8007b66:	9309      	str	r3, [sp, #36]	; 0x24
 8007b68:	2320      	movs	r3, #32
 8007b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b6e:	2330      	movs	r3, #48	; 0x30
 8007b70:	f04f 0b01 	mov.w	fp, #1
 8007b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b78:	9503      	str	r5, [sp, #12]
 8007b7a:	46b8      	mov	r8, r7
 8007b7c:	4645      	mov	r5, r8
 8007b7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b82:	b10b      	cbz	r3, 8007b88 <_vfiprintf_r+0x50>
 8007b84:	2b25      	cmp	r3, #37	; 0x25
 8007b86:	d154      	bne.n	8007c32 <_vfiprintf_r+0xfa>
 8007b88:	ebb8 0a07 	subs.w	sl, r8, r7
 8007b8c:	d00b      	beq.n	8007ba6 <_vfiprintf_r+0x6e>
 8007b8e:	4653      	mov	r3, sl
 8007b90:	463a      	mov	r2, r7
 8007b92:	4621      	mov	r1, r4
 8007b94:	4630      	mov	r0, r6
 8007b96:	f7ff ffbc 	bl	8007b12 <__sfputs_r>
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	f000 80c2 	beq.w	8007d24 <_vfiprintf_r+0x1ec>
 8007ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba2:	4453      	add	r3, sl
 8007ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba6:	f898 3000 	ldrb.w	r3, [r8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 80ba 	beq.w	8007d24 <_vfiprintf_r+0x1ec>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bba:	9304      	str	r3, [sp, #16]
 8007bbc:	9307      	str	r3, [sp, #28]
 8007bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8007bc4:	46a8      	mov	r8, r5
 8007bc6:	2205      	movs	r2, #5
 8007bc8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007bcc:	485e      	ldr	r0, [pc, #376]	; (8007d48 <_vfiprintf_r+0x210>)
 8007bce:	f7ff fa8f 	bl	80070f0 <memchr>
 8007bd2:	9b04      	ldr	r3, [sp, #16]
 8007bd4:	bb78      	cbnz	r0, 8007c36 <_vfiprintf_r+0xfe>
 8007bd6:	06d9      	lsls	r1, r3, #27
 8007bd8:	bf44      	itt	mi
 8007bda:	2220      	movmi	r2, #32
 8007bdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007be0:	071a      	lsls	r2, r3, #28
 8007be2:	bf44      	itt	mi
 8007be4:	222b      	movmi	r2, #43	; 0x2b
 8007be6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007bea:	782a      	ldrb	r2, [r5, #0]
 8007bec:	2a2a      	cmp	r2, #42	; 0x2a
 8007bee:	d02a      	beq.n	8007c46 <_vfiprintf_r+0x10e>
 8007bf0:	46a8      	mov	r8, r5
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	250a      	movs	r5, #10
 8007bf6:	9a07      	ldr	r2, [sp, #28]
 8007bf8:	4641      	mov	r1, r8
 8007bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bfe:	3b30      	subs	r3, #48	; 0x30
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	d969      	bls.n	8007cd8 <_vfiprintf_r+0x1a0>
 8007c04:	b360      	cbz	r0, 8007c60 <_vfiprintf_r+0x128>
 8007c06:	e024      	b.n	8007c52 <_vfiprintf_r+0x11a>
 8007c08:	4b50      	ldr	r3, [pc, #320]	; (8007d4c <_vfiprintf_r+0x214>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d101      	bne.n	8007c12 <_vfiprintf_r+0xda>
 8007c0e:	68b4      	ldr	r4, [r6, #8]
 8007c10:	e7a2      	b.n	8007b58 <_vfiprintf_r+0x20>
 8007c12:	4b4f      	ldr	r3, [pc, #316]	; (8007d50 <_vfiprintf_r+0x218>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	bf08      	it	eq
 8007c18:	68f4      	ldreq	r4, [r6, #12]
 8007c1a:	e79d      	b.n	8007b58 <_vfiprintf_r+0x20>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7fe f9c0 	bl	8005fa4 <__swsetup_r>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d09d      	beq.n	8007b64 <_vfiprintf_r+0x2c>
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	b01d      	add	sp, #116	; 0x74
 8007c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c32:	46a8      	mov	r8, r5
 8007c34:	e7a2      	b.n	8007b7c <_vfiprintf_r+0x44>
 8007c36:	4a44      	ldr	r2, [pc, #272]	; (8007d48 <_vfiprintf_r+0x210>)
 8007c38:	4645      	mov	r5, r8
 8007c3a:	1a80      	subs	r0, r0, r2
 8007c3c:	fa0b f000 	lsl.w	r0, fp, r0
 8007c40:	4318      	orrs	r0, r3
 8007c42:	9004      	str	r0, [sp, #16]
 8007c44:	e7be      	b.n	8007bc4 <_vfiprintf_r+0x8c>
 8007c46:	9a03      	ldr	r2, [sp, #12]
 8007c48:	1d11      	adds	r1, r2, #4
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	9103      	str	r1, [sp, #12]
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	db01      	blt.n	8007c56 <_vfiprintf_r+0x11e>
 8007c52:	9207      	str	r2, [sp, #28]
 8007c54:	e004      	b.n	8007c60 <_vfiprintf_r+0x128>
 8007c56:	4252      	negs	r2, r2
 8007c58:	f043 0302 	orr.w	r3, r3, #2
 8007c5c:	9207      	str	r2, [sp, #28]
 8007c5e:	9304      	str	r3, [sp, #16]
 8007c60:	f898 3000 	ldrb.w	r3, [r8]
 8007c64:	2b2e      	cmp	r3, #46	; 0x2e
 8007c66:	d10e      	bne.n	8007c86 <_vfiprintf_r+0x14e>
 8007c68:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c6e:	d138      	bne.n	8007ce2 <_vfiprintf_r+0x1aa>
 8007c70:	9b03      	ldr	r3, [sp, #12]
 8007c72:	f108 0802 	add.w	r8, r8, #2
 8007c76:	1d1a      	adds	r2, r3, #4
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	9203      	str	r2, [sp, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bfb8      	it	lt
 8007c80:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c84:	9305      	str	r3, [sp, #20]
 8007c86:	4d33      	ldr	r5, [pc, #204]	; (8007d54 <_vfiprintf_r+0x21c>)
 8007c88:	2203      	movs	r2, #3
 8007c8a:	f898 1000 	ldrb.w	r1, [r8]
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f7ff fa2e 	bl	80070f0 <memchr>
 8007c94:	b140      	cbz	r0, 8007ca8 <_vfiprintf_r+0x170>
 8007c96:	2340      	movs	r3, #64	; 0x40
 8007c98:	1b40      	subs	r0, r0, r5
 8007c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c9e:	9b04      	ldr	r3, [sp, #16]
 8007ca0:	f108 0801 	add.w	r8, r8, #1
 8007ca4:	4303      	orrs	r3, r0
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	f898 1000 	ldrb.w	r1, [r8]
 8007cac:	2206      	movs	r2, #6
 8007cae:	482a      	ldr	r0, [pc, #168]	; (8007d58 <_vfiprintf_r+0x220>)
 8007cb0:	f108 0701 	add.w	r7, r8, #1
 8007cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cb8:	f7ff fa1a 	bl	80070f0 <memchr>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d037      	beq.n	8007d30 <_vfiprintf_r+0x1f8>
 8007cc0:	4b26      	ldr	r3, [pc, #152]	; (8007d5c <_vfiprintf_r+0x224>)
 8007cc2:	bb1b      	cbnz	r3, 8007d0c <_vfiprintf_r+0x1d4>
 8007cc4:	9b03      	ldr	r3, [sp, #12]
 8007cc6:	3307      	adds	r3, #7
 8007cc8:	f023 0307 	bic.w	r3, r3, #7
 8007ccc:	3308      	adds	r3, #8
 8007cce:	9303      	str	r3, [sp, #12]
 8007cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd2:	444b      	add	r3, r9
 8007cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd6:	e750      	b.n	8007b7a <_vfiprintf_r+0x42>
 8007cd8:	fb05 3202 	mla	r2, r5, r2, r3
 8007cdc:	2001      	movs	r0, #1
 8007cde:	4688      	mov	r8, r1
 8007ce0:	e78a      	b.n	8007bf8 <_vfiprintf_r+0xc0>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	250a      	movs	r5, #10
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	f108 0801 	add.w	r8, r8, #1
 8007cec:	9305      	str	r3, [sp, #20]
 8007cee:	4640      	mov	r0, r8
 8007cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf4:	3a30      	subs	r2, #48	; 0x30
 8007cf6:	2a09      	cmp	r2, #9
 8007cf8:	d903      	bls.n	8007d02 <_vfiprintf_r+0x1ca>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d0c3      	beq.n	8007c86 <_vfiprintf_r+0x14e>
 8007cfe:	9105      	str	r1, [sp, #20]
 8007d00:	e7c1      	b.n	8007c86 <_vfiprintf_r+0x14e>
 8007d02:	fb05 2101 	mla	r1, r5, r1, r2
 8007d06:	2301      	movs	r3, #1
 8007d08:	4680      	mov	r8, r0
 8007d0a:	e7f0      	b.n	8007cee <_vfiprintf_r+0x1b6>
 8007d0c:	ab03      	add	r3, sp, #12
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	4622      	mov	r2, r4
 8007d12:	4b13      	ldr	r3, [pc, #76]	; (8007d60 <_vfiprintf_r+0x228>)
 8007d14:	a904      	add	r1, sp, #16
 8007d16:	4630      	mov	r0, r6
 8007d18:	f7fd fc98 	bl	800564c <_printf_float>
 8007d1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d20:	4681      	mov	r9, r0
 8007d22:	d1d5      	bne.n	8007cd0 <_vfiprintf_r+0x198>
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	065b      	lsls	r3, r3, #25
 8007d28:	f53f af7e 	bmi.w	8007c28 <_vfiprintf_r+0xf0>
 8007d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d2e:	e77d      	b.n	8007c2c <_vfiprintf_r+0xf4>
 8007d30:	ab03      	add	r3, sp, #12
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	4622      	mov	r2, r4
 8007d36:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <_vfiprintf_r+0x228>)
 8007d38:	a904      	add	r1, sp, #16
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7fd ff32 	bl	8005ba4 <_printf_i>
 8007d40:	e7ec      	b.n	8007d1c <_vfiprintf_r+0x1e4>
 8007d42:	bf00      	nop
 8007d44:	0800898c 	.word	0x0800898c
 8007d48:	08008acc 	.word	0x08008acc
 8007d4c:	080089ac 	.word	0x080089ac
 8007d50:	0800896c 	.word	0x0800896c
 8007d54:	08008ad2 	.word	0x08008ad2
 8007d58:	08008ad6 	.word	0x08008ad6
 8007d5c:	0800564d 	.word	0x0800564d
 8007d60:	08007b13 	.word	0x08007b13

08007d64 <_sbrk_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	2300      	movs	r3, #0
 8007d68:	4c05      	ldr	r4, [pc, #20]	; (8007d80 <_sbrk_r+0x1c>)
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	4608      	mov	r0, r1
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	f7f9 fcba 	bl	80016e8 <_sbrk>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	d102      	bne.n	8007d7e <_sbrk_r+0x1a>
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	b103      	cbz	r3, 8007d7e <_sbrk_r+0x1a>
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	20000e80 	.word	0x20000e80

08007d84 <__sread>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	460c      	mov	r4, r1
 8007d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d8c:	f000 f8e8 	bl	8007f60 <_read_r>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	bfab      	itete	ge
 8007d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d96:	89a3      	ldrhlt	r3, [r4, #12]
 8007d98:	181b      	addge	r3, r3, r0
 8007d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d9e:	bfac      	ite	ge
 8007da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007da2:	81a3      	strhlt	r3, [r4, #12]
 8007da4:	bd10      	pop	{r4, pc}

08007da6 <__swrite>:
 8007da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007daa:	461f      	mov	r7, r3
 8007dac:	898b      	ldrh	r3, [r1, #12]
 8007dae:	4605      	mov	r5, r0
 8007db0:	05db      	lsls	r3, r3, #23
 8007db2:	460c      	mov	r4, r1
 8007db4:	4616      	mov	r6, r2
 8007db6:	d505      	bpl.n	8007dc4 <__swrite+0x1e>
 8007db8:	2302      	movs	r3, #2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc0:	f000 f868 	bl	8007e94 <_lseek_r>
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	4632      	mov	r2, r6
 8007dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dcc:	81a3      	strh	r3, [r4, #12]
 8007dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dd2:	463b      	mov	r3, r7
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dda:	f000 b817 	b.w	8007e0c <_write_r>

08007dde <__sseek>:
 8007dde:	b510      	push	{r4, lr}
 8007de0:	460c      	mov	r4, r1
 8007de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de6:	f000 f855 	bl	8007e94 <_lseek_r>
 8007dea:	1c43      	adds	r3, r0, #1
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	bf15      	itete	ne
 8007df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dfa:	81a3      	strheq	r3, [r4, #12]
 8007dfc:	bf18      	it	ne
 8007dfe:	81a3      	strhne	r3, [r4, #12]
 8007e00:	bd10      	pop	{r4, pc}

08007e02 <__sclose>:
 8007e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e06:	f000 b813 	b.w	8007e30 <_close_r>
	...

08007e0c <_write_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4605      	mov	r5, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	4611      	mov	r1, r2
 8007e14:	2200      	movs	r2, #0
 8007e16:	4c05      	ldr	r4, [pc, #20]	; (8007e2c <_write_r+0x20>)
 8007e18:	6022      	str	r2, [r4, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f7f9 fc17 	bl	800164e <_write>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_write_r+0x1e>
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_write_r+0x1e>
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20000e80 	.word	0x20000e80

08007e30 <_close_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	2300      	movs	r3, #0
 8007e34:	4c05      	ldr	r4, [pc, #20]	; (8007e4c <_close_r+0x1c>)
 8007e36:	4605      	mov	r5, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	6023      	str	r3, [r4, #0]
 8007e3c:	f7f9 fc23 	bl	8001686 <_close>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_close_r+0x1a>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_close_r+0x1a>
 8007e48:	602b      	str	r3, [r5, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20000e80 	.word	0x20000e80

08007e50 <_fstat_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	2300      	movs	r3, #0
 8007e54:	4c06      	ldr	r4, [pc, #24]	; (8007e70 <_fstat_r+0x20>)
 8007e56:	4605      	mov	r5, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	f7f9 fc1d 	bl	800169c <_fstat>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d102      	bne.n	8007e6c <_fstat_r+0x1c>
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	b103      	cbz	r3, 8007e6c <_fstat_r+0x1c>
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	bd38      	pop	{r3, r4, r5, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000e80 	.word	0x20000e80

08007e74 <_isatty_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	2300      	movs	r3, #0
 8007e78:	4c05      	ldr	r4, [pc, #20]	; (8007e90 <_isatty_r+0x1c>)
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	6023      	str	r3, [r4, #0]
 8007e80:	f7f9 fc1b 	bl	80016ba <_isatty>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	d102      	bne.n	8007e8e <_isatty_r+0x1a>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	b103      	cbz	r3, 8007e8e <_isatty_r+0x1a>
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	20000e80 	.word	0x20000e80

08007e94 <_lseek_r>:
 8007e94:	b538      	push	{r3, r4, r5, lr}
 8007e96:	4605      	mov	r5, r0
 8007e98:	4608      	mov	r0, r1
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4c05      	ldr	r4, [pc, #20]	; (8007eb4 <_lseek_r+0x20>)
 8007ea0:	6022      	str	r2, [r4, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f7f9 fc13 	bl	80016ce <_lseek>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d102      	bne.n	8007eb2 <_lseek_r+0x1e>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	b103      	cbz	r3, 8007eb2 <_lseek_r+0x1e>
 8007eb0:	602b      	str	r3, [r5, #0]
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
 8007eb4:	20000e80 	.word	0x20000e80

08007eb8 <__ascii_mbtowc>:
 8007eb8:	b082      	sub	sp, #8
 8007eba:	b901      	cbnz	r1, 8007ebe <__ascii_mbtowc+0x6>
 8007ebc:	a901      	add	r1, sp, #4
 8007ebe:	b142      	cbz	r2, 8007ed2 <__ascii_mbtowc+0x1a>
 8007ec0:	b14b      	cbz	r3, 8007ed6 <__ascii_mbtowc+0x1e>
 8007ec2:	7813      	ldrb	r3, [r2, #0]
 8007ec4:	600b      	str	r3, [r1, #0]
 8007ec6:	7812      	ldrb	r2, [r2, #0]
 8007ec8:	1c10      	adds	r0, r2, #0
 8007eca:	bf18      	it	ne
 8007ecc:	2001      	movne	r0, #1
 8007ece:	b002      	add	sp, #8
 8007ed0:	4770      	bx	lr
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	e7fb      	b.n	8007ece <__ascii_mbtowc+0x16>
 8007ed6:	f06f 0001 	mvn.w	r0, #1
 8007eda:	e7f8      	b.n	8007ece <__ascii_mbtowc+0x16>

08007edc <memmove>:
 8007edc:	4288      	cmp	r0, r1
 8007ede:	b510      	push	{r4, lr}
 8007ee0:	eb01 0302 	add.w	r3, r1, r2
 8007ee4:	d807      	bhi.n	8007ef6 <memmove+0x1a>
 8007ee6:	1e42      	subs	r2, r0, #1
 8007ee8:	4299      	cmp	r1, r3
 8007eea:	d00a      	beq.n	8007f02 <memmove+0x26>
 8007eec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ef0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ef4:	e7f8      	b.n	8007ee8 <memmove+0xc>
 8007ef6:	4283      	cmp	r3, r0
 8007ef8:	d9f5      	bls.n	8007ee6 <memmove+0xa>
 8007efa:	1881      	adds	r1, r0, r2
 8007efc:	1ad2      	subs	r2, r2, r3
 8007efe:	42d3      	cmn	r3, r2
 8007f00:	d100      	bne.n	8007f04 <memmove+0x28>
 8007f02:	bd10      	pop	{r4, pc}
 8007f04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007f0c:	e7f7      	b.n	8007efe <memmove+0x22>

08007f0e <__malloc_lock>:
 8007f0e:	4770      	bx	lr

08007f10 <__malloc_unlock>:
 8007f10:	4770      	bx	lr

08007f12 <_realloc_r>:
 8007f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f14:	4607      	mov	r7, r0
 8007f16:	4614      	mov	r4, r2
 8007f18:	460e      	mov	r6, r1
 8007f1a:	b921      	cbnz	r1, 8007f26 <_realloc_r+0x14>
 8007f1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f20:	4611      	mov	r1, r2
 8007f22:	f7ff bc35 	b.w	8007790 <_malloc_r>
 8007f26:	b922      	cbnz	r2, 8007f32 <_realloc_r+0x20>
 8007f28:	f7ff fbe6 	bl	80076f8 <_free_r>
 8007f2c:	4625      	mov	r5, r4
 8007f2e:	4628      	mov	r0, r5
 8007f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f32:	f000 f834 	bl	8007f9e <_malloc_usable_size_r>
 8007f36:	42a0      	cmp	r0, r4
 8007f38:	d20f      	bcs.n	8007f5a <_realloc_r+0x48>
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f7ff fc27 	bl	8007790 <_malloc_r>
 8007f42:	4605      	mov	r5, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d0f2      	beq.n	8007f2e <_realloc_r+0x1c>
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	f7ff f8de 	bl	800710c <memcpy>
 8007f50:	4631      	mov	r1, r6
 8007f52:	4638      	mov	r0, r7
 8007f54:	f7ff fbd0 	bl	80076f8 <_free_r>
 8007f58:	e7e9      	b.n	8007f2e <_realloc_r+0x1c>
 8007f5a:	4635      	mov	r5, r6
 8007f5c:	e7e7      	b.n	8007f2e <_realloc_r+0x1c>
	...

08007f60 <_read_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4605      	mov	r5, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	4611      	mov	r1, r2
 8007f68:	2200      	movs	r2, #0
 8007f6a:	4c05      	ldr	r4, [pc, #20]	; (8007f80 <_read_r+0x20>)
 8007f6c:	6022      	str	r2, [r4, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7f9 fb50 	bl	8001614 <_read>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_read_r+0x1e>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_read_r+0x1e>
 8007f7c:	602b      	str	r3, [r5, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	20000e80 	.word	0x20000e80

08007f84 <__ascii_wctomb>:
 8007f84:	b149      	cbz	r1, 8007f9a <__ascii_wctomb+0x16>
 8007f86:	2aff      	cmp	r2, #255	; 0xff
 8007f88:	bf8b      	itete	hi
 8007f8a:	238a      	movhi	r3, #138	; 0x8a
 8007f8c:	700a      	strbls	r2, [r1, #0]
 8007f8e:	6003      	strhi	r3, [r0, #0]
 8007f90:	2001      	movls	r0, #1
 8007f92:	bf88      	it	hi
 8007f94:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f98:	4770      	bx	lr
 8007f9a:	4608      	mov	r0, r1
 8007f9c:	4770      	bx	lr

08007f9e <_malloc_usable_size_r>:
 8007f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fa2:	1f18      	subs	r0, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bfbc      	itt	lt
 8007fa8:	580b      	ldrlt	r3, [r1, r0]
 8007faa:	18c0      	addlt	r0, r0, r3
 8007fac:	4770      	bx	lr
	...

08007fb0 <_init>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr

08007fbc <_fini>:
 8007fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fbe:	bf00      	nop
 8007fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fc2:	bc08      	pop	{r3}
 8007fc4:	469e      	mov	lr, r3
 8007fc6:	4770      	bx	lr
