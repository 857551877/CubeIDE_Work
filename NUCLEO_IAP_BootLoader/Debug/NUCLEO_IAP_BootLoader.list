
NUCLEO_IAP_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003718  08003718  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003718  08003718  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003718  08003718  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000070  08003790  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08003790  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008df3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f7c  00000000  00000000  00028e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a8  00000000  00000000  0002ae08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000790  00000000  00000000  0002b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014ec6  00000000  00000000  0002be40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008969  00000000  00000000  00040d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006be14  00000000  00000000  0004966f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000285c  00000000  00000000  000b5500  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003614 	.word	0x08003614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003614 	.word	0x08003614

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b29      	ldr	r3, [pc, #164]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a28      	ldr	r2, [pc, #160]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b26      	ldr	r3, [pc, #152]	; (8000208 <MX_GPIO_Init+0xbc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b23      	ldr	r3, [pc, #140]	; (8000208 <MX_GPIO_Init+0xbc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a22      	ldr	r2, [pc, #136]	; (8000208 <MX_GPIO_Init+0xbc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b20      	ldr	r3, [pc, #128]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b1d      	ldr	r3, [pc, #116]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1c      	ldr	r2, [pc, #112]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <MX_GPIO_Init+0xbc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b17      	ldr	r3, [pc, #92]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a16      	ldr	r2, [pc, #88]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b14      	ldr	r3, [pc, #80]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4811      	ldr	r0, [pc, #68]	; (800020c <MX_GPIO_Init+0xc0>)
 80001c6:	f001 f996 	bl	80014f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	480c      	ldr	r0, [pc, #48]	; (8000210 <MX_GPIO_Init+0xc4>)
 80001e0:	f001 f818 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001e4:	2320      	movs	r3, #32
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4804      	ldr	r0, [pc, #16]	; (800020c <MX_GPIO_Init+0xc0>)
 80001fc:	f001 f80a 	bl	8001214 <HAL_GPIO_Init>

}
 8000200:	bf00      	nop
 8000202:	3720      	adds	r7, #32
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40021000 	.word	0x40021000
 800020c:	40010800 	.word	0x40010800
 8000210:	40011000 	.word	0x40011000

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f000 fbf4 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f82e 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f7ff ff94 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000224:	f000 face 	bl	80007c4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000228:	f000 faa2 	bl	8000770 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 800022c:	2201      	movs	r2, #1
 800022e:	490f      	ldr	r1, [pc, #60]	; (800026c <main+0x58>)
 8000230:	480f      	ldr	r0, [pc, #60]	; (8000270 <main+0x5c>)
 8000232:	f001 fe7b 	bl	8001f2c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) { //user app
 8000236:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023a:	480e      	ldr	r0, [pc, #56]	; (8000274 <main+0x60>)
 800023c:	f001 f944 	bl	80014c8 <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d007      	beq.n	8000256 <main+0x42>
		 // printf("button is up\r\n");
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	2120      	movs	r1, #32
 800024a:	480b      	ldr	r0, [pc, #44]	; (8000278 <main+0x64>)
 800024c:	f001 f953 	bl	80014f6 <HAL_GPIO_WritePin>
		  go2APP();
 8000250:	f000 f856 	bl	8000300 <go2APP>
 8000254:	e7ef      	b.n	8000236 <main+0x22>
	  } else { //bootloader
		 // printf("button is down\r\n");

		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000256:	2201      	movs	r2, #1
 8000258:	2120      	movs	r1, #32
 800025a:	4807      	ldr	r0, [pc, #28]	; (8000278 <main+0x64>)
 800025c:	f001 f94b 	bl	80014f6 <HAL_GPIO_WritePin>

		  Download_App();
 8000260:	f000 f90e 	bl	8000480 <Download_App>
		  go2APP();
 8000264:	f000 f84c 	bl	8000300 <go2APP>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) { //user app
 8000268:	e7e5      	b.n	8000236 <main+0x22>
 800026a:	bf00      	nop
 800026c:	20000538 	.word	0x20000538
 8000270:	2000053c 	.word	0x2000053c
 8000274:	40011000 	.word	0x40011000
 8000278:	40010800 	.word	0x40010800

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fa1e 	bl	80026cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a6:	2310      	movs	r3, #16
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002aa:	2302      	movs	r3, #2
 80002ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002ae:	2300      	movs	r3, #0
 80002b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	f107 0318 	add.w	r3, r7, #24
 80002bc:	4618      	mov	r0, r3
 80002be:	f001 f933 	bl	8001528 <HAL_RCC_OscConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c8:	f000 f91c 	bl	8000504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	230f      	movs	r3, #15
 80002ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d0:	2302      	movs	r3, #2
 80002d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fb9e 	bl	8001a28 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002f2:	f000 f907 	bl	8000504 <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3740      	adds	r7, #64	; 0x40
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <go2APP>:
/* USER CODE BEGIN 4 */

#define FLASH_APP_ADDR 0x8008000
typedef void (*pFunction)(void);

void go2APP(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
  pFunction Jump_To_Application;

  //printf("BOOTLOADER Start\n");

  //Check
  if (((*(__IO uint32_t*) FLASH_APP_ADDR) & 0x2FFE0000) == 0x20000000) {
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <go2APP+0x4c>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <go2APP+0x50>)
 800030c:	4013      	ands	r3, r2
 800030e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000312:	d113      	bne.n	800033c <go2APP+0x3c>
    printf("APP Start...\n");
 8000314:	480f      	ldr	r0, [pc, #60]	; (8000354 <go2APP+0x54>)
 8000316:	f002 fa69 	bl	80027ec <puts>
    HAL_Delay(100);
 800031a:	2064      	movs	r0, #100	; 0x64
 800031c:	f000 fbd4 	bl	8000ac8 <HAL_Delay>
    // Jump to user application //
    JumpAddress = *(__IO uint32_t*) (FLASH_APP_ADDR + 4);
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <go2APP+0x58>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	60fb      	str	r3, [r7, #12]
    Jump_To_Application = (pFunction) JumpAddress;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	60bb      	str	r3, [r7, #8]
    // Initialize user application's Stack Pointer //
    __set_MSP(*(__IO uint32_t*) FLASH_APP_ADDR);
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <go2APP+0x4c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f383 8808 	msr	MSP, r3
    Jump_To_Application();
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	4798      	blx	r3
  } else {
    printf("No APP found!!!\n");
  }
}
 800033a:	e002      	b.n	8000342 <go2APP+0x42>
    printf("No APP found!!!\n");
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <go2APP+0x5c>)
 800033e:	f002 fa55 	bl	80027ec <puts>
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	08008000 	.word	0x08008000
 8000350:	2ffe0000 	.word	0x2ffe0000
 8000354:	0800362c 	.word	0x0800362c
 8000358:	08008004 	.word	0x08008004
 800035c:	0800363c 	.word	0x0800363c

08000360 <HAL_UART_RxCpltCallback>:


//UART接收中断
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance) {
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <HAL_UART_RxCpltCallback+0x48>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	429a      	cmp	r2, r3
 8000372:	d115      	bne.n	80003a0 <HAL_UART_RxCpltCallback+0x40>
		if(Rx_Line_Flag == 0) {
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <HAL_UART_RxCpltCallback+0x4c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10c      	bne.n	8000396 <HAL_UART_RxCpltCallback+0x36>
				if(Rx_Buffer_Size == 0){
					Rx_Line_Flag = 0;
				}
				Rx_Buffer_Size = 0;
			}else {*/ //不必要有这段
				Uart1_Rx_Buffer[Rx_Buffer_Size] = Uart1_Rx_Char;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <HAL_UART_RxCpltCallback+0x50>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	461a      	mov	r2, r3
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_UART_RxCpltCallback+0x54>)
 8000384:	7819      	ldrb	r1, [r3, #0]
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <HAL_UART_RxCpltCallback+0x58>)
 8000388:	5499      	strb	r1, [r3, r2]
				Rx_Buffer_Size++;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <HAL_UART_RxCpltCallback+0x50>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <HAL_UART_RxCpltCallback+0x50>)
 8000394:	701a      	strb	r2, [r3, #0]
			//}

		}
		HAL_UART_Receive_IT(&huart1,&Uart1_Rx_Char,1);
 8000396:	2201      	movs	r2, #1
 8000398:	4906      	ldr	r1, [pc, #24]	; (80003b4 <HAL_UART_RxCpltCallback+0x54>)
 800039a:	4803      	ldr	r0, [pc, #12]	; (80003a8 <HAL_UART_RxCpltCallback+0x48>)
 800039c:	f001 fdc6 	bl	8001f2c <HAL_UART_Receive_IT>
	}
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	2000053c 	.word	0x2000053c
 80003ac:	20000123 	.word	0x20000123
 80003b0:	20000122 	.word	0x20000122
 80003b4:	20000538 	.word	0x20000538
 80003b8:	2000008c 	.word	0x2000008c

080003bc <Data_Manage>:

uint8_t Flash_Data_Buffer[1024] = {0};
uint8_t Flash_Data_Frame_Num = 0;
uint32_t Flash_Page_Num = 0;
void Data_Manage(uint8_t Is_Last_Page) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]

	if(Is_Last_Page == 0) {
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d134      	bne.n	8000436 <Data_Manage+0x7a>
		for(uint8_t i = 0; i < 128; i++) {
 80003cc:	2300      	movs	r3, #0
 80003ce:	73fb      	strb	r3, [r7, #15]
 80003d0:	e00d      	b.n	80003ee <Data_Manage+0x32>
			Flash_Data_Buffer[Flash_Data_Frame_Num * 128 + i] = Uart1_Rx_Buffer[3 + i];
 80003d2:	7bfb      	ldrb	r3, [r7, #15]
 80003d4:	1cda      	adds	r2, r3, #3
 80003d6:	4b24      	ldr	r3, [pc, #144]	; (8000468 <Data_Manage+0xac>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	01d9      	lsls	r1, r3, #7
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	440b      	add	r3, r1
 80003e0:	4922      	ldr	r1, [pc, #136]	; (800046c <Data_Manage+0xb0>)
 80003e2:	5c89      	ldrb	r1, [r1, r2]
 80003e4:	4a22      	ldr	r2, [pc, #136]	; (8000470 <Data_Manage+0xb4>)
 80003e6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 128; i++) {
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	3301      	adds	r3, #1
 80003ec:	73fb      	strb	r3, [r7, #15]
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	daed      	bge.n	80003d2 <Data_Manage+0x16>
		}
		Flash_Data_Frame_Num++;
 80003f6:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <Data_Manage+0xac>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	3301      	adds	r3, #1
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <Data_Manage+0xac>)
 8000400:	701a      	strb	r2, [r3, #0]
		if(Flash_Data_Frame_Num == 8) {
 8000402:	4b19      	ldr	r3, [pc, #100]	; (8000468 <Data_Manage+0xac>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b08      	cmp	r3, #8
 8000408:	d129      	bne.n	800045e <Data_Manage+0xa2>
			Flash_Write_Page(0x08008000 + Flash_Page_Num * 0x400, Flash_Data_Buffer);
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <Data_Manage+0xb8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000412:	3320      	adds	r3, #32
 8000414:	029b      	lsls	r3, r3, #10
 8000416:	4916      	ldr	r1, [pc, #88]	; (8000470 <Data_Manage+0xb4>)
 8000418:	4618      	mov	r0, r3
 800041a:	f000 fab4 	bl	8000986 <Flash_Write_Page>

			uint8_t t =  *(uint8_t *)0x080083ff;
 800041e:	4b16      	ldr	r3, [pc, #88]	; (8000478 <Data_Manage+0xbc>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	737b      	strb	r3, [r7, #13]

			Flash_Page_Num++;
 8000424:	4b13      	ldr	r3, [pc, #76]	; (8000474 <Data_Manage+0xb8>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	4a12      	ldr	r2, [pc, #72]	; (8000474 <Data_Manage+0xb8>)
 800042c:	6013      	str	r3, [r2, #0]
			Flash_Data_Frame_Num = 0;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <Data_Manage+0xac>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000434:	e013      	b.n	800045e <Data_Manage+0xa2>
	} else if(Is_Last_Page == 1) {
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d110      	bne.n	800045e <Data_Manage+0xa2>
		if(Flash_Data_Frame_Num != 0) {
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <Data_Manage+0xac>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d00c      	beq.n	800045e <Data_Manage+0xa2>
			Flash_Write_Page(0x08008000 + Flash_Page_Num * 0x400, Flash_Data_Buffer);
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <Data_Manage+0xb8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800044c:	3320      	adds	r3, #32
 800044e:	029b      	lsls	r3, r3, #10
 8000450:	4907      	ldr	r1, [pc, #28]	; (8000470 <Data_Manage+0xb4>)
 8000452:	4618      	mov	r0, r3
 8000454:	f000 fa97 	bl	8000986 <Flash_Write_Page>
			uint8_t t =  *(uint8_t *)0x08008131;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <Data_Manage+0xc0>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	73bb      	strb	r3, [r7, #14]
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000524 	.word	0x20000524
 800046c:	2000008c 	.word	0x2000008c
 8000470:	20000124 	.word	0x20000124
 8000474:	20000528 	.word	0x20000528
 8000478:	080083ff 	.word	0x080083ff
 800047c:	08008131 	.word	0x08008131

08000480 <Download_App>:


void Download_App(void) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0

	  //printf("C\r\n");
	  printf("C\n");
 8000486:	481b      	ldr	r0, [pc, #108]	; (80004f4 <Download_App+0x74>)
 8000488:	f002 f9b0 	bl	80027ec <puts>
	 // int i = 0;
	  uint8_t ReceiveFile_End_Flag = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	73fb      	strb	r3, [r7, #15]
	  uint8_t temp[10] = {0}, i = 0;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	811a      	strh	r2, [r3, #8]
 800049a:	2300      	movs	r3, #0
 800049c:	73bb      	strb	r3, [r7, #14]
	 // uint8_t Last_Buffer_Size = 0;
	  while(1) {

		  if(Rx_Buffer_Size == 133) { //一帧数据接受完成
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <Download_App+0x78>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b85      	cmp	r3, #133	; 0x85
 80004a4:	d114      	bne.n	80004d0 <Download_App+0x50>

			  if(Uart1_Rx_Buffer[1] == 0) { //为起始帧
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <Download_App+0x7c>)
 80004a8:	785b      	ldrb	r3, [r3, #1]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d106      	bne.n	80004bc <Download_App+0x3c>
				  printf("%c", 6);//返回ACK
 80004ae:	2006      	movs	r0, #6
 80004b0:	f002 f92c 	bl	800270c <putchar>
				  printf("C\n");
 80004b4:	480f      	ldr	r0, [pc, #60]	; (80004f4 <Download_App+0x74>)
 80004b6:	f002 f999 	bl	80027ec <puts>
 80004ba:	e006      	b.n	80004ca <Download_App+0x4a>
			  } else {  //每一帧正文数据  在printf前处理

				  Data_Manage(0);
 80004bc:	2000      	movs	r0, #0
 80004be:	f7ff ff7d 	bl	80003bc <Data_Manage>

				  printf("%c\n", 6);//返回ACK
 80004c2:	2106      	movs	r1, #6
 80004c4:	480e      	ldr	r0, [pc, #56]	; (8000500 <Download_App+0x80>)
 80004c6:	f002 f909 	bl	80026dc <iprintf>

			  //Rx_Buffer_Size = 0;
			 // printf("%c", 6);
			 // printf("C\r\n");
			//  i++;
			  Rx_Buffer_Size = 0;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <Download_App+0x78>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
		    }


	 	//  if((Rx_Buffer_Size - Last_Buffer_Size) == 1 && Rx_Buffer_Size == 1) { //检查第一位
		  	  if(Rx_Buffer_Size == 1) {
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <Download_App+0x78>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d1e2      	bne.n	800049e <Download_App+0x1e>
	 		 // temp[i] = Uart1_Rx_Buffer[0];
	 		  //i++;

			  if(Uart1_Rx_Buffer[0] == 4) { //文件传送结束
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <Download_App+0x7c>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b04      	cmp	r3, #4
 80004de:	d1de      	bne.n	800049e <Download_App+0x1e>
					  printf("C\r\n");
					  //ReceiveFile_End_Flag = 1;
					  Rx_Buffer_Size = 0;
				  }
					*/
				  if(ReceiveFile_End_Flag == 0) { //发送方发送的第一个EOT 此处处理收尾
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1db      	bne.n	800049e <Download_App+0x1e>

					  Data_Manage(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f7ff ff68 	bl	80003bc <Data_Manage>


					  return;
 80004ec:	bf00      	nop
	 	// Last_Buffer_Size = Rx_Buffer_Size;
	  }



}
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	0800364c 	.word	0x0800364c
 80004f8:	20000122 	.word	0x20000122
 80004fc:	2000008c 	.word	0x2000008c
 8000500:	08003650 	.word	0x08003650

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_MspInit+0x5c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x5c>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_MspInit+0x60>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_MspInit+0x60>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	40010000 	.word	0x40010000

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <HardFault_Handler+0x4>

08000586 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <MemManage_Handler+0x4>

0800058c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <BusFault_Handler+0x4>

08000592 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <UsageFault_Handler+0x4>

08000598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c0:	f000 fa66 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <USART1_IRQHandler+0x10>)
 80005ce:	f001 fd01 	bl	8001fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000053c 	.word	0x2000053c

080005dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	e00a      	b.n	8000604 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ee:	f3af 8000 	nop.w
 80005f2:	4601      	mov	r1, r0
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	60ba      	str	r2, [r7, #8]
 80005fa:	b2ca      	uxtb	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	dbf0      	blt.n	80005ee <_read+0x12>
	}

return len;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b086      	sub	sp, #24
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	e009      	b.n	800063c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	60ba      	str	r2, [r7, #8]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f000 f971 	bl	8000918 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3301      	adds	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	dbf1      	blt.n	8000628 <_write+0x12>
	}
	return len;
 8000644:	687b      	ldr	r3, [r7, #4]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <_close>:

int _close(int file)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
	return -1;
 8000656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000674:	605a      	str	r2, [r3, #4]
	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <_isatty>:

int _isatty(int file)
{
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
	return 1;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000696:	b480      	push	{r7}
 8000698:	b085      	sub	sp, #20
 800069a:	af00      	add	r7, sp, #0
 800069c:	60f8      	str	r0, [r7, #12]
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	607a      	str	r2, [r7, #4]
	return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
	...

080006b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <_sbrk+0x50>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <_sbrk+0x16>
		heap_end = &end;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <_sbrk+0x50>)
 80006c2:	4a10      	ldr	r2, [pc, #64]	; (8000704 <_sbrk+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <_sbrk+0x50>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <_sbrk+0x50>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	466a      	mov	r2, sp
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d907      	bls.n	80006ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80006da:	f001 ffcd 	bl	8002678 <__errno>
 80006de:	4602      	mov	r2, r0
 80006e0:	230c      	movs	r3, #12
 80006e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	e006      	b.n	80006f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <_sbrk+0x50>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	4a03      	ldr	r2, [pc, #12]	; (8000700 <_sbrk+0x50>)
 80006f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000052c 	.word	0x2000052c
 8000704:	200005e8 	.word	0x200005e8

08000708 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <SystemInit+0x5c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <SystemInit+0x5c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <SystemInit+0x5c>)
 800071a:	685a      	ldr	r2, [r3, #4]
 800071c:	4911      	ldr	r1, [pc, #68]	; (8000764 <SystemInit+0x5c>)
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <SystemInit+0x60>)
 8000720:	4013      	ands	r3, r2
 8000722:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <SystemInit+0x5c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <SystemInit+0x5c>)
 800072a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800072e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000732:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <SystemInit+0x5c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <SystemInit+0x5c>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <SystemInit+0x5c>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <SystemInit+0x5c>)
 8000746:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800074a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <SystemInit+0x5c>)
 800074e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000752:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <SystemInit+0x64>)
 8000756:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800075a:	609a      	str	r2, [r3, #8]
#endif 
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40021000 	.word	0x40021000
 8000768:	f8ff0000 	.word	0xf8ff0000
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_USART1_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 80007a8:	f001 fada 	bl	8001d60 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f7ff fea7 	bl	8000504 <Error_Handler>
  }

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000053c 	.word	0x2000053c
 80007c0:	40013800 	.word	0x40013800

080007c4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_USART2_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART2_UART_Init+0x4c>)
 80007fc:	f001 fab0 	bl	8001d60 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f7ff fe7d 	bl	8000504 <Error_Handler>
  }

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000057c 	.word	0x2000057c
 8000814:	40004400 	.word	0x40004400

08000818 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a35      	ldr	r2, [pc, #212]	; (8000908 <HAL_UART_MspInit+0xf0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d13a      	bne.n	80008ae <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000838:	4b34      	ldr	r3, [pc, #208]	; (800090c <HAL_UART_MspInit+0xf4>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a33      	ldr	r2, [pc, #204]	; (800090c <HAL_UART_MspInit+0xf4>)
 800083e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <HAL_UART_MspInit+0xf4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b2e      	ldr	r3, [pc, #184]	; (800090c <HAL_UART_MspInit+0xf4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a2d      	ldr	r2, [pc, #180]	; (800090c <HAL_UART_MspInit+0xf4>)
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b2b      	ldr	r3, [pc, #172]	; (800090c <HAL_UART_MspInit+0xf4>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0304 	and.w	r3, r3, #4
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	4619      	mov	r1, r3
 800087c:	4824      	ldr	r0, [pc, #144]	; (8000910 <HAL_UART_MspInit+0xf8>)
 800087e:	f000 fcc9 	bl	8001214 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4619      	mov	r1, r3
 8000896:	481e      	ldr	r0, [pc, #120]	; (8000910 <HAL_UART_MspInit+0xf8>)
 8000898:	f000 fcbc 	bl	8001214 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2025      	movs	r0, #37	; 0x25
 80008a2:	f000 fa0a 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008a6:	2025      	movs	r0, #37	; 0x25
 80008a8:	f000 fa23 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008ac:	e028      	b.n	8000900 <HAL_UART_MspInit+0xe8>
  else if(uartHandle->Instance==USART2)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a18      	ldr	r2, [pc, #96]	; (8000914 <HAL_UART_MspInit+0xfc>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d123      	bne.n	8000900 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_UART_MspInit+0xf4>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	4a13      	ldr	r2, [pc, #76]	; (800090c <HAL_UART_MspInit+0xf4>)
 80008be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c2:	61d3      	str	r3, [r2, #28]
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_UART_MspInit+0xf4>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_UART_MspInit+0xf4>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <HAL_UART_MspInit+0xf4>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_UART_MspInit+0xf4>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0304 	and.w	r3, r3, #4
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008e8:	230c      	movs	r3, #12
 80008ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2302      	movs	r3, #2
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	4619      	mov	r1, r3
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <HAL_UART_MspInit+0xf8>)
 80008fc:	f000 fc8a 	bl	8001214 <HAL_GPIO_Init>
}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40013800 	.word	0x40013800
 800090c:	40021000 	.word	0x40021000
 8000910:	40010800 	.word	0x40010800
 8000914:	40004400 	.word	0x40004400

08000918 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000920:	1d39      	adds	r1, r7, #4
 8000922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000926:	2201      	movs	r2, #1
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <__io_putchar+0x20>)
 800092a:	f001 fa66 	bl	8001dfa <HAL_UART_Transmit>
  return ch;
 800092e:	687b      	ldr	r3, [r7, #4]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000053c 	.word	0x2000053c

0800093c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800093c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800093e:	e003      	b.n	8000948 <LoopCopyDataInit>

08000940 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000942:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000944:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000946:	3104      	adds	r1, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000948:	480a      	ldr	r0, [pc, #40]	; (8000974 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800094c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800094e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000950:	d3f6      	bcc.n	8000940 <CopyDataInit>
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000954:	e002      	b.n	800095c <LoopFillZerobss>

08000956 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000958:	f842 3b04 	str.w	r3, [r2], #4

0800095c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800095e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000960:	d3f9      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000962:	f7ff fed1 	bl	8000708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000966:	f001 fe8d 	bl	8002684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fc53 	bl	8000214 <main>
  bx lr
 800096e:	4770      	bx	lr
  ldr r3, =_sidata
 8000970:	08003720 	.word	0x08003720
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000978:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800097c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000980:	200005e4 	.word	0x200005e4

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>

08000986 <Flash_Write_Page>:
#include "flash.h"


uint8_t Flash_Write_Page(uint32_t Flash_Address, uint32_t *Data_Address) {
 8000986:	b590      	push	{r4, r7, lr}
 8000988:	b089      	sub	sp, #36	; 0x24
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]

	HAL_FLASH_Unlock(); //Unlock
 8000990:	f000 fab0 	bl	8000ef4 <HAL_FLASH_Unlock>

	uint32_t PageError;
	FLASH_EraseInitTypeDef EraseInitStruct; //erase Struct init
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; //erase a page
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.PageAddress = Flash_Address;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = 1; //1 page
 800099c:	2301      	movs	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 80009a0:	f107 0218 	add.w	r2, r7, #24
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fb8a 	bl	80010c4 <HAL_FLASHEx_Erase>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <Flash_Write_Page+0x34>
		return 1; //erase error occur
 80009b6:	2301      	movs	r3, #1
 80009b8:	e020      	b.n	80009fc <Flash_Write_Page+0x76>
	}

	for(uint32_t i = 0; i < 256; i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	e017      	b.n	80009f0 <Flash_Write_Page+0x6a>
		//if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address + i * 4, *(Data_Address + i * 4)) != HAL_OK) {
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address + i * 4, *(Data_Address + i)) != HAL_OK) {
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	009a      	lsls	r2, r3, #2
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	18d1      	adds	r1, r2, r3
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f04f 0400 	mov.w	r4, #0
 80009d6:	461a      	mov	r2, r3
 80009d8:	4623      	mov	r3, r4
 80009da:	2002      	movs	r0, #2
 80009dc:	f000 fa1a 	bl	8000e14 <HAL_FLASH_Program>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <Flash_Write_Page+0x64>
			return 2; //Flash program error occur
 80009e6:	2302      	movs	r3, #2
 80009e8:	e008      	b.n	80009fc <Flash_Write_Page+0x76>
	for(uint32_t i = 0; i < 256; i++) {
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3301      	adds	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	2bff      	cmp	r3, #255	; 0xff
 80009f4:	d9e4      	bls.n	80009c0 <Flash_Write_Page+0x3a>


	}


	HAL_FLASH_Lock(); //Lock
 80009f6:	f000 faa3 	bl	8000f40 <HAL_FLASH_Lock>

	return 0;
 80009fa:	2300      	movs	r3, #0

}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3724      	adds	r7, #36	; 0x24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd90      	pop	{r4, r7, pc}

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f945 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff fd76 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f95d 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f925 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	200005bc 	.word	0x200005bc

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	200005bc 	.word	0x200005bc

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff fff0 	bl	8000ab4 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_Delay+0x40>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffe0 	bl	8000ab4 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000008 	.word	0x20000008

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4906      	ldr	r1, [pc, #24]	; (8000ba4 <__NVIC_EnableIRQ+0x34>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff90 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff2d 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff42 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff90 	bl	8000bfc <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5f 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff35 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d005      	beq.n	8000d4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2204      	movs	r2, #4
 8000d42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e051      	b.n	8000dee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 020e 	bic.w	r2, r2, #14
 8000d58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <HAL_DMA_Abort_IT+0xd0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d029      	beq.n	8000dc8 <HAL_DMA_Abort_IT+0xa0>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <HAL_DMA_Abort_IT+0xd4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d022      	beq.n	8000dc4 <HAL_DMA_Abort_IT+0x9c>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <HAL_DMA_Abort_IT+0xd8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d01a      	beq.n	8000dbe <HAL_DMA_Abort_IT+0x96>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <HAL_DMA_Abort_IT+0xdc>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d012      	beq.n	8000db8 <HAL_DMA_Abort_IT+0x90>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <HAL_DMA_Abort_IT+0xe0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d00a      	beq.n	8000db2 <HAL_DMA_Abort_IT+0x8a>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <HAL_DMA_Abort_IT+0xe4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d102      	bne.n	8000dac <HAL_DMA_Abort_IT+0x84>
 8000da6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000daa:	e00e      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db0:	e00b      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	e008      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbc:	e005      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc2:	e002      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	e000      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <HAL_DMA_Abort_IT+0xe8>)
 8000dcc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	4798      	blx	r3
    } 
  }
  return status;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40020008 	.word	0x40020008
 8000dfc:	4002001c 	.word	0x4002001c
 8000e00:	40020030 	.word	0x40020030
 8000e04:	40020044 	.word	0x40020044
 8000e08:	40020058 	.word	0x40020058
 8000e0c:	4002006c 	.word	0x4002006c
 8000e10:	40020000 	.word	0x40020000

08000e14 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <HAL_FLASH_Program+0xd8>)
 8000e30:	7e1b      	ldrb	r3, [r3, #24]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d101      	bne.n	8000e3a <HAL_FLASH_Program+0x26>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e054      	b.n	8000ee4 <HAL_FLASH_Program+0xd0>
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <HAL_FLASH_Program+0xd8>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e44:	f000 f8a8 	bl	8000f98 <FLASH_WaitForLastOperation>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d144      	bne.n	8000edc <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d102      	bne.n	8000e5e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	757b      	strb	r3, [r7, #21]
 8000e5c:	e007      	b.n	8000e6e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d102      	bne.n	8000e6a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000e64:	2302      	movs	r3, #2
 8000e66:	757b      	strb	r3, [r7, #21]
 8000e68:	e001      	b.n	8000e6e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75bb      	strb	r3, [r7, #22]
 8000e72:	e02d      	b.n	8000ed0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000e74:	7dbb      	ldrb	r3, [r7, #22]
 8000e76:	005a      	lsls	r2, r3, #1
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	eb02 0c03 	add.w	ip, r2, r3
 8000e7e:	7dbb      	ldrb	r3, [r7, #22]
 8000e80:	0119      	lsls	r1, r3, #4
 8000e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e86:	f1c1 0620 	rsb	r6, r1, #32
 8000e8a:	f1a1 0020 	sub.w	r0, r1, #32
 8000e8e:	fa22 f401 	lsr.w	r4, r2, r1
 8000e92:	fa03 f606 	lsl.w	r6, r3, r6
 8000e96:	4334      	orrs	r4, r6
 8000e98:	fa23 f000 	lsr.w	r0, r3, r0
 8000e9c:	4304      	orrs	r4, r0
 8000e9e:	fa23 f501 	lsr.w	r5, r3, r1
 8000ea2:	b2a3      	uxth	r3, r4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4660      	mov	r0, ip
 8000ea8:	f000 f85a 	bl	8000f60 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000eac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eb0:	f000 f872 	bl	8000f98 <FLASH_WaitForLastOperation>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_FLASH_Program+0xdc>)
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_FLASH_Program+0xdc>)
 8000ebe:	f023 0301 	bic.w	r3, r3, #1
 8000ec2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d107      	bne.n	8000eda <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000eca:	7dbb      	ldrb	r3, [r7, #22]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	75bb      	strb	r3, [r7, #22]
 8000ed0:	7dba      	ldrb	r2, [r7, #22]
 8000ed2:	7d7b      	ldrb	r3, [r7, #21]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d3cd      	bcc.n	8000e74 <HAL_FLASH_Program+0x60>
 8000ed8:	e000      	b.n	8000edc <HAL_FLASH_Program+0xc8>
      {
        break;
 8000eda:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_FLASH_Program+0xd8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	761a      	strb	r2, [r3, #24]

  return status;
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eec:	200005c0 	.word	0x200005c0
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_FLASH_Unlock+0x40>)
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00d      	beq.n	8000f26 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_FLASH_Unlock+0x40>)
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_FLASH_Unlock+0x44>)
 8000f0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_FLASH_Unlock+0x40>)
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_FLASH_Unlock+0x48>)
 8000f14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <HAL_FLASH_Unlock+0x40>)
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40022000 	.word	0x40022000
 8000f38:	45670123 	.word	0x45670123
 8000f3c:	cdef89ab 	.word	0xcdef89ab

08000f40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_FLASH_Lock+0x1c>)
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_FLASH_Lock+0x1c>)
 8000f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40022000 	.word	0x40022000

08000f60 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <FLASH_Program_HalfWord+0x30>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <FLASH_Program_HalfWord+0x34>)
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <FLASH_Program_HalfWord+0x34>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	887a      	ldrh	r2, [r7, #2]
 8000f82:	801a      	strh	r2, [r3, #0]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200005c0 	.word	0x200005c0
 8000f94:	40022000 	.word	0x40022000

08000f98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff fd88 	bl	8000ab4 <HAL_GetTick>
 8000fa4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fa6:	e010      	b.n	8000fca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fae:	d00c      	beq.n	8000fca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d007      	beq.n	8000fc6 <FLASH_WaitForLastOperation+0x2e>
 8000fb6:	f7ff fd7d 	bl	8000ab4 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d201      	bcs.n	8000fca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e025      	b.n	8001016 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <FLASH_WaitForLastOperation+0x88>)
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1e8      	bne.n	8000fa8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <FLASH_WaitForLastOperation+0x88>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <FLASH_WaitForLastOperation+0x88>)
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <FLASH_WaitForLastOperation+0x88>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10b      	bne.n	800100c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <FLASH_WaitForLastOperation+0x88>)
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d105      	bne.n	800100c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <FLASH_WaitForLastOperation+0x88>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800100c:	f000 f80a 	bl	8001024 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000

08001024 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <FLASH_SetErrorCode+0x98>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	2b00      	cmp	r3, #0
 8001038:	d009      	beq.n	800104e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <FLASH_SetErrorCode+0x9c>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	4a1f      	ldr	r2, [pc, #124]	; (80010c0 <FLASH_SetErrorCode+0x9c>)
 8001044:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f043 0310 	orr.w	r3, r3, #16
 800104c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <FLASH_SetErrorCode+0x98>)
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d009      	beq.n	800106e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <FLASH_SetErrorCode+0x9c>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <FLASH_SetErrorCode+0x9c>)
 8001064:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <FLASH_SetErrorCode+0x98>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <FLASH_SetErrorCode+0x9c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f043 0304 	orr.w	r3, r3, #4
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <FLASH_SetErrorCode+0x9c>)
 8001084:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <FLASH_SetErrorCode+0x98>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <FLASH_SetErrorCode+0x98>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f240 1201 	movw	r2, #257	; 0x101
 8001098:	4293      	cmp	r3, r2
 800109a:	d106      	bne.n	80010aa <FLASH_SetErrorCode+0x86>
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <FLASH_SetErrorCode+0x98>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <FLASH_SetErrorCode+0x98>)
 80010a2:	f023 0301 	bic.w	r3, r3, #1
 80010a6:	61d3      	str	r3, [r2, #28]
}  
 80010a8:	e002      	b.n	80010b0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <FLASH_SetErrorCode+0x98>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	60d3      	str	r3, [r2, #12]
}  
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40022000 	.word	0x40022000
 80010c0:	200005c0 	.word	0x200005c0

080010c4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010d6:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <HAL_FLASHEx_Erase+0xd0>)
 80010d8:	7e1b      	ldrb	r3, [r3, #24]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <HAL_FLASHEx_Erase+0x1e>
 80010de:	2302      	movs	r3, #2
 80010e0:	e053      	b.n	800118a <HAL_FLASHEx_Erase+0xc6>
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_FLASHEx_Erase+0xd0>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d116      	bne.n	800111e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010f4:	f7ff ff50 	bl	8000f98 <FLASH_WaitForLastOperation>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d141      	bne.n	8001182 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 f84c 	bl	800119c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001104:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001108:	f7ff ff46 	bl	8000f98 <FLASH_WaitForLastOperation>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_FLASHEx_Erase+0xd4>)
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	4a20      	ldr	r2, [pc, #128]	; (8001198 <HAL_FLASHEx_Erase+0xd4>)
 8001116:	f023 0304 	bic.w	r3, r3, #4
 800111a:	6113      	str	r3, [r2, #16]
 800111c:	e031      	b.n	8001182 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800111e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001122:	f7ff ff39 	bl	8000f98 <FLASH_WaitForLastOperation>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d12a      	bne.n	8001182 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f04f 32ff 	mov.w	r2, #4294967295
 8001132:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	e019      	b.n	8001170 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800113c:	68b8      	ldr	r0, [r7, #8]
 800113e:	f000 f849 	bl	80011d4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001142:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001146:	f7ff ff27 	bl	8000f98 <FLASH_WaitForLastOperation>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_FLASHEx_Erase+0xd4>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	4a11      	ldr	r2, [pc, #68]	; (8001198 <HAL_FLASHEx_Erase+0xd4>)
 8001154:	f023 0302 	bic.w	r3, r3, #2
 8001158:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	601a      	str	r2, [r3, #0]
            break;
 8001166:	e00c      	b.n	8001182 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800116e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	029a      	lsls	r2, r3, #10
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3dc      	bcc.n	800113c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_FLASHEx_Erase+0xd0>)
 8001184:	2200      	movs	r2, #0
 8001186:	761a      	strb	r2, [r3, #24]

  return status;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200005c0 	.word	0x200005c0
 8001198:	40022000 	.word	0x40022000

0800119c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <FLASH_MassErase+0x30>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <FLASH_MassErase+0x34>)
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <FLASH_MassErase+0x34>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <FLASH_MassErase+0x34>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <FLASH_MassErase+0x34>)
 80011bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	200005c0 	.word	0x200005c0
 80011d0:	40022000 	.word	0x40022000

080011d4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <FLASH_PageErase+0x38>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <FLASH_PageErase+0x3c>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <FLASH_PageErase+0x3c>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80011ee:	4a08      	ldr	r2, [pc, #32]	; (8001210 <FLASH_PageErase+0x3c>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <FLASH_PageErase+0x3c>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	4a05      	ldr	r2, [pc, #20]	; (8001210 <FLASH_PageErase+0x3c>)
 80011fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	200005c0 	.word	0x200005c0
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b08b      	sub	sp, #44	; 0x2c
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	e127      	b.n	8001478 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001228:	2201      	movs	r2, #1
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 8116 	bne.w	8001472 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b12      	cmp	r3, #18
 800124c:	d034      	beq.n	80012b8 <HAL_GPIO_Init+0xa4>
 800124e:	2b12      	cmp	r3, #18
 8001250:	d80d      	bhi.n	800126e <HAL_GPIO_Init+0x5a>
 8001252:	2b02      	cmp	r3, #2
 8001254:	d02b      	beq.n	80012ae <HAL_GPIO_Init+0x9a>
 8001256:	2b02      	cmp	r3, #2
 8001258:	d804      	bhi.n	8001264 <HAL_GPIO_Init+0x50>
 800125a:	2b00      	cmp	r3, #0
 800125c:	d031      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
 800125e:	2b01      	cmp	r3, #1
 8001260:	d01c      	beq.n	800129c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001262:	e048      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001264:	2b03      	cmp	r3, #3
 8001266:	d043      	beq.n	80012f0 <HAL_GPIO_Init+0xdc>
 8001268:	2b11      	cmp	r3, #17
 800126a:	d01b      	beq.n	80012a4 <HAL_GPIO_Init+0x90>
          break;
 800126c:	e043      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800126e:	4a89      	ldr	r2, [pc, #548]	; (8001494 <HAL_GPIO_Init+0x280>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d026      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
 8001274:	4a87      	ldr	r2, [pc, #540]	; (8001494 <HAL_GPIO_Init+0x280>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d806      	bhi.n	8001288 <HAL_GPIO_Init+0x74>
 800127a:	4a87      	ldr	r2, [pc, #540]	; (8001498 <HAL_GPIO_Init+0x284>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d020      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
 8001280:	4a86      	ldr	r2, [pc, #536]	; (800149c <HAL_GPIO_Init+0x288>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d01d      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
          break;
 8001286:	e036      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001288:	4a85      	ldr	r2, [pc, #532]	; (80014a0 <HAL_GPIO_Init+0x28c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d019      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
 800128e:	4a85      	ldr	r2, [pc, #532]	; (80014a4 <HAL_GPIO_Init+0x290>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d016      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
 8001294:	4a84      	ldr	r2, [pc, #528]	; (80014a8 <HAL_GPIO_Init+0x294>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0xae>
          break;
 800129a:	e02c      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e028      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	3304      	adds	r3, #4
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e023      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	3308      	adds	r3, #8
 80012b4:	623b      	str	r3, [r7, #32]
          break;
 80012b6:	e01e      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	330c      	adds	r3, #12
 80012be:	623b      	str	r3, [r7, #32]
          break;
 80012c0:	e019      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ca:	2304      	movs	r3, #4
 80012cc:	623b      	str	r3, [r7, #32]
          break;
 80012ce:	e012      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d105      	bne.n	80012e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d8:	2308      	movs	r3, #8
 80012da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	611a      	str	r2, [r3, #16]
          break;
 80012e2:	e008      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	615a      	str	r2, [r3, #20]
          break;
 80012ee:	e002      	b.n	80012f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
          break;
 80012f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2bff      	cmp	r3, #255	; 0xff
 80012fa:	d801      	bhi.n	8001300 <HAL_GPIO_Init+0xec>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	e001      	b.n	8001304 <HAL_GPIO_Init+0xf0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3304      	adds	r3, #4
 8001304:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2bff      	cmp	r3, #255	; 0xff
 800130a:	d802      	bhi.n	8001312 <HAL_GPIO_Init+0xfe>
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	e002      	b.n	8001318 <HAL_GPIO_Init+0x104>
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	3b08      	subs	r3, #8
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	210f      	movs	r1, #15
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	401a      	ands	r2, r3
 800132a:	6a39      	ldr	r1, [r7, #32]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	431a      	orrs	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 8096 	beq.w	8001472 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001346:	4b59      	ldr	r3, [pc, #356]	; (80014ac <HAL_GPIO_Init+0x298>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a58      	ldr	r2, [pc, #352]	; (80014ac <HAL_GPIO_Init+0x298>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b56      	ldr	r3, [pc, #344]	; (80014ac <HAL_GPIO_Init+0x298>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800135e:	4a54      	ldr	r2, [pc, #336]	; (80014b0 <HAL_GPIO_Init+0x29c>)
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4013      	ands	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x2a0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x19e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x2a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x19a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a49      	ldr	r2, [pc, #292]	; (80014bc <HAL_GPIO_Init+0x2a8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x196>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a48      	ldr	r2, [pc, #288]	; (80014c0 <HAL_GPIO_Init+0x2ac>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x192>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x1a0>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x1a0>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x1a0>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x1a0>
 80013b2:	2300      	movs	r3, #0
 80013b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013c4:	493a      	ldr	r1, [pc, #232]	; (80014b0 <HAL_GPIO_Init+0x29c>)
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013de:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4938      	ldr	r1, [pc, #224]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
 80013ea:	e006      	b.n	80013fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ec:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4933      	ldr	r1, [pc, #204]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	492e      	ldr	r1, [pc, #184]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
 8001412:	e006      	b.n	8001422 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	43db      	mvns	r3, r3
 800141c:	4929      	ldr	r1, [pc, #164]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800141e:	4013      	ands	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	4924      	ldr	r1, [pc, #144]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	608b      	str	r3, [r1, #8]
 800143a:	e006      	b.n	800144a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	43db      	mvns	r3, r3
 8001444:	491f      	ldr	r1, [pc, #124]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001446:	4013      	ands	r3, r2
 8001448:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	491a      	ldr	r1, [pc, #104]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	60cb      	str	r3, [r1, #12]
 8001462:	e006      	b.n	8001472 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	43db      	mvns	r3, r3
 800146c:	4915      	ldr	r1, [pc, #84]	; (80014c4 <HAL_GPIO_Init+0x2b0>)
 800146e:	4013      	ands	r3, r2
 8001470:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	3301      	adds	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	fa22 f303 	lsr.w	r3, r2, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	f47f aed0 	bne.w	8001228 <HAL_GPIO_Init+0x14>
  }
}
 8001488:	bf00      	nop
 800148a:	372c      	adds	r7, #44	; 0x2c
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	10210000 	.word	0x10210000
 8001498:	10110000 	.word	0x10110000
 800149c:	10120000 	.word	0x10120000
 80014a0:	10310000 	.word	0x10310000
 80014a4:	10320000 	.word	0x10320000
 80014a8:	10220000 	.word	0x10220000
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010000 	.word	0x40010000
 80014b4:	40010800 	.word	0x40010800
 80014b8:	40010c00 	.word	0x40010c00
 80014bc:	40011000 	.word	0x40011000
 80014c0:	40011400 	.word	0x40011400
 80014c4:	40010400 	.word	0x40010400

080014c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e0:	2301      	movs	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e001      	b.n	80014ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	807b      	strh	r3, [r7, #2]
 8001502:	4613      	mov	r3, r2
 8001504:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001506:	787b      	ldrb	r3, [r7, #1]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800150c:	887a      	ldrh	r2, [r7, #2]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001512:	e003      	b.n	800151c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	041a      	lsls	r2, r3, #16
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	611a      	str	r2, [r3, #16]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
	...

08001528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e26c      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8087 	beq.w	8001656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001548:	4b92      	ldr	r3, [pc, #584]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b04      	cmp	r3, #4
 8001552:	d00c      	beq.n	800156e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001554:	4b8f      	ldr	r3, [pc, #572]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b08      	cmp	r3, #8
 800155e:	d112      	bne.n	8001586 <HAL_RCC_OscConfig+0x5e>
 8001560:	4b8c      	ldr	r3, [pc, #560]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d10b      	bne.n	8001586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156e:	4b89      	ldr	r3, [pc, #548]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d06c      	beq.n	8001654 <HAL_RCC_OscConfig+0x12c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d168      	bne.n	8001654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e246      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x76>
 8001590:	4b80      	ldr	r3, [pc, #512]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a7f      	ldr	r2, [pc, #508]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e02e      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x98>
 80015a6:	4b7b      	ldr	r3, [pc, #492]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7a      	ldr	r2, [pc, #488]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b78      	ldr	r3, [pc, #480]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a77      	ldr	r2, [pc, #476]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e01d      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0xbc>
 80015ca:	4b72      	ldr	r3, [pc, #456]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a71      	ldr	r2, [pc, #452]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6e      	ldr	r2, [pc, #440]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 80015e4:	4b6b      	ldr	r3, [pc, #428]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6a      	ldr	r2, [pc, #424]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b68      	ldr	r3, [pc, #416]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a67      	ldr	r2, [pc, #412]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fa56 	bl	8000ab4 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fa52 	bl	8000ab4 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e1fa      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0xe4>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fa42 	bl	8000ab4 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fa3e 	bl	8000ab4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1e6      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x10c>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d063      	beq.n	800172a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001662:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800166e:	4b49      	ldr	r3, [pc, #292]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d11c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x18c>
 800167a:	4b46      	ldr	r3, [pc, #280]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d116      	bne.n	80016b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	4b43      	ldr	r3, [pc, #268]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_RCC_OscConfig+0x176>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e1ba      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4939      	ldr	r1, [pc, #228]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	e03a      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff f9f7 	bl	8000ab4 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff f9f3 	bl	8000ab4 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e19b      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4927      	ldr	r1, [pc, #156]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff f9d6 	bl	8000ab4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff f9d2 	bl	8000ab4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e17a      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d03a      	beq.n	80017ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d019      	beq.n	8001772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_RCC_OscConfig+0x274>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7ff f9b6 	bl	8000ab4 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7ff f9b2 	bl	8000ab4 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e15a      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f000 fada 	bl	8001d24 <RCC_Delay>
 8001770:	e01c      	b.n	80017ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RCC_OscConfig+0x274>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7ff f99c 	bl	8000ab4 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177e:	e00f      	b.n	80017a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff f998 	bl	8000ab4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d908      	bls.n	80017a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e140      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	42420000 	.word	0x42420000
 800179c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	4b9e      	ldr	r3, [pc, #632]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e9      	bne.n	8001780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a6 	beq.w	8001906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017be:	4b97      	ldr	r3, [pc, #604]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10d      	bne.n	80017e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b94      	ldr	r3, [pc, #592]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a93      	ldr	r2, [pc, #588]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b91      	ldr	r3, [pc, #580]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e2:	2301      	movs	r3, #1
 80017e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b8e      	ldr	r3, [pc, #568]	; (8001a20 <HAL_RCC_OscConfig+0x4f8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d118      	bne.n	8001824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4b8b      	ldr	r3, [pc, #556]	; (8001a20 <HAL_RCC_OscConfig+0x4f8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a8a      	ldr	r2, [pc, #552]	; (8001a20 <HAL_RCC_OscConfig+0x4f8>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff f959 	bl	8000ab4 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001806:	f7ff f955 	bl	8000ab4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b64      	cmp	r3, #100	; 0x64
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0fd      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <HAL_RCC_OscConfig+0x4f8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x312>
 800182c:	4b7b      	ldr	r3, [pc, #492]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a7a      	ldr	r2, [pc, #488]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	e02d      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x334>
 8001842:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4a75      	ldr	r2, [pc, #468]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6213      	str	r3, [r2, #32]
 800184e:	4b73      	ldr	r3, [pc, #460]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a72      	ldr	r2, [pc, #456]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	e01c      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d10c      	bne.n	800187e <HAL_RCC_OscConfig+0x356>
 8001864:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a6c      	ldr	r2, [pc, #432]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4a69      	ldr	r2, [pc, #420]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6213      	str	r3, [r2, #32]
 800187c:	e00b      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a66      	ldr	r2, [pc, #408]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6213      	str	r3, [r2, #32]
 800188a:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4a63      	ldr	r2, [pc, #396]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff f909 	bl	8000ab4 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff f905 	bl	8000ab4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0ab      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ee      	beq.n	80018a6 <HAL_RCC_OscConfig+0x37e>
 80018c8:	e014      	b.n	80018f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f8f3 	bl	8000ab4 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff f8ef 	bl	8000ab4 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e095      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	4b4c      	ldr	r3, [pc, #304]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1ee      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fa:	4b48      	ldr	r3, [pc, #288]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a47      	ldr	r2, [pc, #284]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8081 	beq.w	8001a12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001910:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d061      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d146      	bne.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <HAL_RCC_OscConfig+0x4fc>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff f8c3 	bl	8000ab4 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff f8bf 	bl	8000ab4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e067      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001944:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d108      	bne.n	800196c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	492d      	ldr	r1, [pc, #180]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a19      	ldr	r1, [r3, #32]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	430b      	orrs	r3, r1
 800197e:	4927      	ldr	r1, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_OscConfig+0x4fc>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff f893 	bl	8000ab4 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff f88f 	bl	8000ab4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e037      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x46a>
 80019b0:	e02f      	b.n	8001a12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_RCC_OscConfig+0x4fc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff f87c 	bl	8000ab4 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f878 	bl	8000ab4 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e020      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x498>
 80019de:	e018      	b.n	8001a12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e013      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
 8001a24:	42420060 	.word	0x42420060

08001a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0d0      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b6a      	ldr	r3, [pc, #424]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d910      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 0207 	bic.w	r2, r3, #7
 8001a52:	4965      	ldr	r1, [pc, #404]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b63      	ldr	r3, [pc, #396]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0b8      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a84:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	494d      	ldr	r1, [pc, #308]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d040      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d115      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e07f      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	4b41      	ldr	r3, [pc, #260]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e073      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e06b      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b39      	ldr	r3, [pc, #228]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4936      	ldr	r1, [pc, #216]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b18:	f7fe ffcc 	bl	8000ab4 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7fe ffc8 	bl	8000ab4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e053      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d210      	bcs.n	8001b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 0207 	bic.w	r2, r3, #7
 8001b5e:	4922      	ldr	r1, [pc, #136]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e032      	b.n	8001bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4916      	ldr	r1, [pc, #88]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	490e      	ldr	r1, [pc, #56]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bb6:	f000 f821 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001bba:	4601      	mov	r1, r0
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc8:	5cd3      	ldrb	r3, [r2, r3]
 8001bca:	fa21 f303 	lsr.w	r3, r1, r3
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe ff2a 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40022000 	.word	0x40022000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	08003668 	.word	0x08003668
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bfc:	b490      	push	{r4, r7}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c02:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c04:	1d3c      	adds	r4, r7, #4
 8001c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c0c:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c26:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d002      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x40>
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x46>
 8001c3a:	e02d      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c3e:	623b      	str	r3, [r7, #32]
      break;
 8001c40:	e02d      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	0c9b      	lsrs	r3, r3, #18
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c4e:	4413      	add	r3, r2
 8001c50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0c5b      	lsrs	r3, r3, #17
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c6e:	4413      	add	r3, r2
 8001c70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c7a:	fb02 f203 	mul.w	r2, r2, r3
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
 8001c86:	e004      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	623b      	str	r3, [r7, #32]
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c9a:	623b      	str	r3, [r7, #32]
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc90      	pop	{r4, r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	08003654 	.word	0x08003654
 8001cb0:	08003664 	.word	0x08003664
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	007a1200 	.word	0x007a1200
 8001cbc:	003d0900 	.word	0x003d0900

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	f7ff fff2 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08003678 	.word	0x08003678

08001cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d00:	f7ff ffde 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001d04:	4601      	mov	r1, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0adb      	lsrs	r3, r3, #11
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08003678 	.word	0x08003678

08001d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <RCC_Delay+0x34>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <RCC_Delay+0x38>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	0a5b      	lsrs	r3, r3, #9
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d40:	bf00      	nop
  }
  while (Delay --);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	60fa      	str	r2, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f9      	bne.n	8001d40 <RCC_Delay+0x1c>
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	10624dd3 	.word	0x10624dd3

08001d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e03f      	b.n	8001df2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fd46 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	; 0x24
 8001d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fb8d 	bl	80024c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2220      	movs	r2, #32
 8001de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b088      	sub	sp, #32
 8001dfe:	af02      	add	r7, sp, #8
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	f040 8083 	bne.w	8001f22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_UART_Transmit+0x2e>
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e07b      	b.n	8001f24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_UART_Transmit+0x40>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e074      	b.n	8001f24 <HAL_UART_Transmit+0x12a>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2221      	movs	r2, #33	; 0x21
 8001e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e50:	f7fe fe30 	bl	8000ab4 <HAL_GetTick>
 8001e54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	88fa      	ldrh	r2, [r7, #6]
 8001e5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	88fa      	ldrh	r2, [r7, #6]
 8001e60:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e62:	e042      	b.n	8001eea <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e7a:	d122      	bne.n	8001ec2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f9b2 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e046      	b.n	8001f24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ea8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d103      	bne.n	8001eba <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	e017      	b.n	8001eea <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	e013      	b.n	8001eea <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f98f 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e023      	b.n	8001f24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60ba      	str	r2, [r7, #8]
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1b7      	bne.n	8001e64 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2200      	movs	r2, #0
 8001efc:	2140      	movs	r1, #64	; 0x40
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f976 	bl	80021f0 <UART_WaitOnFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e00a      	b.n	8001f24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
  }
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	4613      	mov	r3, r2
 8001f38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d140      	bne.n	8001fc8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_UART_Receive_IT+0x26>
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e039      	b.n	8001fca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_UART_Receive_IT+0x38>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e032      	b.n	8001fca <HAL_UART_Receive_IT+0x9e>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	88fa      	ldrh	r2, [r7, #6]
 8001f76:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2222      	movs	r2, #34	; 0x22
 8001f88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0220 	orr.w	r2, r2, #32
 8001fc2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10d      	bne.n	8002026 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_UART_IRQHandler+0x52>
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f9ce 	bl	80023c0 <UART_Receive_IT>
      return;
 8002024:	e0cc      	b.n	80021c0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80ab 	beq.w	8002184 <HAL_UART_IRQHandler+0x1b0>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_UART_IRQHandler+0x70>
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80a0 	beq.w	8002184 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_UART_IRQHandler+0x90>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_UART_IRQHandler+0xb0>
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207c:	f043 0202 	orr.w	r2, r3, #2
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_UART_IRQHandler+0xd0>
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209c:	f043 0204 	orr.w	r2, r3, #4
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_UART_IRQHandler+0xf0>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	f043 0208 	orr.w	r2, r3, #8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d078      	beq.n	80021be <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_UART_IRQHandler+0x112>
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f96d 	bl	80023c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <HAL_UART_IRQHandler+0x13a>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d031      	beq.n	8002172 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8b8 	bl	8002284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d023      	beq.n	800216a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002130:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	2b00      	cmp	r3, #0
 8002138:	d013      	beq.n	8002162 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213e:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <HAL_UART_IRQHandler+0x1f4>)
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fdee 	bl	8000d28 <HAL_DMA_Abort_IT>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800215c:	4610      	mov	r0, r2
 800215e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002160:	e00e      	b.n	8002180 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f83b 	bl	80021de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002168:	e00a      	b.n	8002180 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f837 	bl	80021de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002170:	e006      	b.n	8002180 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f833 	bl	80021de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800217e:	e01e      	b.n	80021be <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002180:	bf00      	nop
    return;
 8002182:	e01c      	b.n	80021be <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_UART_IRQHandler+0x1cc>
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f8a4 	bl	80022e6 <UART_Transmit_IT>
    return;
 800219e:	e00f      	b.n	80021c0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_UART_IRQHandler+0x1ec>
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f8eb 	bl	8002390 <UART_EndTransmit_IT>
    return;
 80021ba:	bf00      	nop
 80021bc:	e000      	b.n	80021c0 <HAL_UART_IRQHandler+0x1ec>
    return;
 80021be:	bf00      	nop
  }
}
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	080022bf 	.word	0x080022bf

080021cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002200:	e02c      	b.n	800225c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d028      	beq.n	800225c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <UART_WaitOnFlagUntilTimeout+0x30>
 8002210:	f7fe fc50 	bl	8000ab4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	429a      	cmp	r2, r3
 800221e:	d21d      	bcs.n	800225c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800222e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e00f      	b.n	800227c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4013      	ands	r3, r2
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	429a      	cmp	r2, r3
 8002278:	d0c3      	beq.n	8002202 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800229a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff ff80 	bl	80021de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b21      	cmp	r3, #33	; 0x21
 80022f8:	d144      	bne.n	8002384 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002302:	d11a      	bne.n	800233a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002318:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	1c9a      	adds	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	621a      	str	r2, [r3, #32]
 800232c:	e00e      	b.n	800234c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	621a      	str	r2, [r3, #32]
 8002338:	e008      	b.n	800234c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	1c59      	adds	r1, r3, #1
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6211      	str	r1, [r2, #32]
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29b      	uxth	r3, r3
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4619      	mov	r1, r3
 800235a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10f      	bne.n	8002380 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800237e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff0b 	bl	80021cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b22      	cmp	r3, #34	; 0x22
 80023d2:	d171      	bne.n	80024b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023dc:	d123      	bne.n	8002426 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10e      	bne.n	800240a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	1c9a      	adds	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
 8002408:	e029      	b.n	800245e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	b29b      	uxth	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
 8002424:	e01b      	b.n	800245e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10a      	bne.n	8002444 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6858      	ldr	r0, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	1c59      	adds	r1, r3, #1
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6291      	str	r1, [r2, #40]	; 0x28
 800243e:	b2c2      	uxtb	r2, r0
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e00c      	b.n	800245e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	1c58      	adds	r0, r3, #1
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	6288      	str	r0, [r1, #40]	; 0x28
 8002456:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4619      	mov	r1, r3
 800246c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800246e:	2b00      	cmp	r3, #0
 8002470:	d120      	bne.n	80024b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0220 	bic.w	r2, r2, #32
 8002480:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002490:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fd ff58 	bl	8000360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	e002      	b.n	80024ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80024fe:	f023 030c 	bic.w	r3, r3, #12
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	430b      	orrs	r3, r1
 800250a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a52      	ldr	r2, [pc, #328]	; (8002670 <UART_SetConfig+0x1ac>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d14e      	bne.n	80025ca <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800252c:	f7ff fbe6 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 8002530:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	009a      	lsls	r2, r3, #2
 800253c:	441a      	add	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <UART_SetConfig+0x1b0>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	0119      	lsls	r1, r3, #4
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	009a      	lsls	r2, r3, #2
 800255c:	441a      	add	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	fbb2 f2f3 	udiv	r2, r2, r3
 8002568:	4b42      	ldr	r3, [pc, #264]	; (8002674 <UART_SetConfig+0x1b0>)
 800256a:	fba3 0302 	umull	r0, r3, r3, r2
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2064      	movs	r0, #100	; 0x64
 8002572:	fb00 f303 	mul.w	r3, r0, r3
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	3332      	adds	r3, #50	; 0x32
 800257c:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <UART_SetConfig+0x1b0>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002588:	4419      	add	r1, r3
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009a      	lsls	r2, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a0:	4b34      	ldr	r3, [pc, #208]	; (8002674 <UART_SetConfig+0x1b0>)
 80025a2:	fba3 0302 	umull	r0, r3, r3, r2
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	2064      	movs	r0, #100	; 0x64
 80025aa:	fb00 f303 	mul.w	r3, r0, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	3332      	adds	r3, #50	; 0x32
 80025b4:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <UART_SetConfig+0x1b0>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	f003 020f 	and.w	r2, r3, #15
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	440a      	add	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80025c8:	e04d      	b.n	8002666 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80025ca:	f7ff fb83 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80025ce:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	009a      	lsls	r2, r3, #2
 80025da:	441a      	add	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4a23      	ldr	r2, [pc, #140]	; (8002674 <UART_SetConfig+0x1b0>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	0119      	lsls	r1, r3, #4
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	009a      	lsls	r2, r3, #2
 80025fa:	441a      	add	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	fbb2 f2f3 	udiv	r2, r2, r3
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <UART_SetConfig+0x1b0>)
 8002608:	fba3 0302 	umull	r0, r3, r3, r2
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	2064      	movs	r0, #100	; 0x64
 8002610:	fb00 f303 	mul.w	r3, r0, r3
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	3332      	adds	r3, #50	; 0x32
 800261a:	4a16      	ldr	r2, [pc, #88]	; (8002674 <UART_SetConfig+0x1b0>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002626:	4419      	add	r1, r3
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	009a      	lsls	r2, r3, #2
 8002632:	441a      	add	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	fbb2 f2f3 	udiv	r2, r2, r3
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <UART_SetConfig+0x1b0>)
 8002640:	fba3 0302 	umull	r0, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2064      	movs	r0, #100	; 0x64
 8002648:	fb00 f303 	mul.w	r3, r0, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	3332      	adds	r3, #50	; 0x32
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <UART_SetConfig+0x1b0>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	f003 020f 	and.w	r2, r3, #15
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	440a      	add	r2, r1
 8002664:	609a      	str	r2, [r3, #8]
}
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40013800 	.word	0x40013800
 8002674:	51eb851f 	.word	0x51eb851f

08002678 <__errno>:
 8002678:	4b01      	ldr	r3, [pc, #4]	; (8002680 <__errno+0x8>)
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	2000000c 	.word	0x2000000c

08002684 <__libc_init_array>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	2500      	movs	r5, #0
 8002688:	4e0c      	ldr	r6, [pc, #48]	; (80026bc <__libc_init_array+0x38>)
 800268a:	4c0d      	ldr	r4, [pc, #52]	; (80026c0 <__libc_init_array+0x3c>)
 800268c:	1ba4      	subs	r4, r4, r6
 800268e:	10a4      	asrs	r4, r4, #2
 8002690:	42a5      	cmp	r5, r4
 8002692:	d109      	bne.n	80026a8 <__libc_init_array+0x24>
 8002694:	f000 ffbe 	bl	8003614 <_init>
 8002698:	2500      	movs	r5, #0
 800269a:	4e0a      	ldr	r6, [pc, #40]	; (80026c4 <__libc_init_array+0x40>)
 800269c:	4c0a      	ldr	r4, [pc, #40]	; (80026c8 <__libc_init_array+0x44>)
 800269e:	1ba4      	subs	r4, r4, r6
 80026a0:	10a4      	asrs	r4, r4, #2
 80026a2:	42a5      	cmp	r5, r4
 80026a4:	d105      	bne.n	80026b2 <__libc_init_array+0x2e>
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026ac:	4798      	blx	r3
 80026ae:	3501      	adds	r5, #1
 80026b0:	e7ee      	b.n	8002690 <__libc_init_array+0xc>
 80026b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026b6:	4798      	blx	r3
 80026b8:	3501      	adds	r5, #1
 80026ba:	e7f2      	b.n	80026a2 <__libc_init_array+0x1e>
 80026bc:	08003718 	.word	0x08003718
 80026c0:	08003718 	.word	0x08003718
 80026c4:	08003718 	.word	0x08003718
 80026c8:	0800371c 	.word	0x0800371c

080026cc <memset>:
 80026cc:	4603      	mov	r3, r0
 80026ce:	4402      	add	r2, r0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d100      	bne.n	80026d6 <memset+0xa>
 80026d4:	4770      	bx	lr
 80026d6:	f803 1b01 	strb.w	r1, [r3], #1
 80026da:	e7f9      	b.n	80026d0 <memset+0x4>

080026dc <iprintf>:
 80026dc:	b40f      	push	{r0, r1, r2, r3}
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <iprintf+0x2c>)
 80026e0:	b513      	push	{r0, r1, r4, lr}
 80026e2:	681c      	ldr	r4, [r3, #0]
 80026e4:	b124      	cbz	r4, 80026f0 <iprintf+0x14>
 80026e6:	69a3      	ldr	r3, [r4, #24]
 80026e8:	b913      	cbnz	r3, 80026f0 <iprintf+0x14>
 80026ea:	4620      	mov	r0, r4
 80026ec:	f000 fa36 	bl	8002b5c <__sinit>
 80026f0:	ab05      	add	r3, sp, #20
 80026f2:	9a04      	ldr	r2, [sp, #16]
 80026f4:	68a1      	ldr	r1, [r4, #8]
 80026f6:	4620      	mov	r0, r4
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	f000 fbeb 	bl	8002ed4 <_vfiprintf_r>
 80026fe:	b002      	add	sp, #8
 8002700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002704:	b004      	add	sp, #16
 8002706:	4770      	bx	lr
 8002708:	2000000c 	.word	0x2000000c

0800270c <putchar>:
 800270c:	b538      	push	{r3, r4, r5, lr}
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <putchar+0x24>)
 8002710:	4605      	mov	r5, r0
 8002712:	681c      	ldr	r4, [r3, #0]
 8002714:	b124      	cbz	r4, 8002720 <putchar+0x14>
 8002716:	69a3      	ldr	r3, [r4, #24]
 8002718:	b913      	cbnz	r3, 8002720 <putchar+0x14>
 800271a:	4620      	mov	r0, r4
 800271c:	f000 fa1e 	bl	8002b5c <__sinit>
 8002720:	68a2      	ldr	r2, [r4, #8]
 8002722:	4629      	mov	r1, r5
 8002724:	4620      	mov	r0, r4
 8002726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800272a:	f000 be71 	b.w	8003410 <_putc_r>
 800272e:	bf00      	nop
 8002730:	2000000c 	.word	0x2000000c

08002734 <_puts_r>:
 8002734:	b570      	push	{r4, r5, r6, lr}
 8002736:	460e      	mov	r6, r1
 8002738:	4605      	mov	r5, r0
 800273a:	b118      	cbz	r0, 8002744 <_puts_r+0x10>
 800273c:	6983      	ldr	r3, [r0, #24]
 800273e:	b90b      	cbnz	r3, 8002744 <_puts_r+0x10>
 8002740:	f000 fa0c 	bl	8002b5c <__sinit>
 8002744:	69ab      	ldr	r3, [r5, #24]
 8002746:	68ac      	ldr	r4, [r5, #8]
 8002748:	b913      	cbnz	r3, 8002750 <_puts_r+0x1c>
 800274a:	4628      	mov	r0, r5
 800274c:	f000 fa06 	bl	8002b5c <__sinit>
 8002750:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <_puts_r+0xac>)
 8002752:	429c      	cmp	r4, r3
 8002754:	d117      	bne.n	8002786 <_puts_r+0x52>
 8002756:	686c      	ldr	r4, [r5, #4]
 8002758:	89a3      	ldrh	r3, [r4, #12]
 800275a:	071b      	lsls	r3, r3, #28
 800275c:	d51d      	bpl.n	800279a <_puts_r+0x66>
 800275e:	6923      	ldr	r3, [r4, #16]
 8002760:	b1db      	cbz	r3, 800279a <_puts_r+0x66>
 8002762:	3e01      	subs	r6, #1
 8002764:	68a3      	ldr	r3, [r4, #8]
 8002766:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800276a:	3b01      	subs	r3, #1
 800276c:	60a3      	str	r3, [r4, #8]
 800276e:	b9e9      	cbnz	r1, 80027ac <_puts_r+0x78>
 8002770:	2b00      	cmp	r3, #0
 8002772:	da2e      	bge.n	80027d2 <_puts_r+0x9e>
 8002774:	4622      	mov	r2, r4
 8002776:	210a      	movs	r1, #10
 8002778:	4628      	mov	r0, r5
 800277a:	f000 f83f 	bl	80027fc <__swbuf_r>
 800277e:	3001      	adds	r0, #1
 8002780:	d011      	beq.n	80027a6 <_puts_r+0x72>
 8002782:	200a      	movs	r0, #10
 8002784:	e011      	b.n	80027aa <_puts_r+0x76>
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <_puts_r+0xb0>)
 8002788:	429c      	cmp	r4, r3
 800278a:	d101      	bne.n	8002790 <_puts_r+0x5c>
 800278c:	68ac      	ldr	r4, [r5, #8]
 800278e:	e7e3      	b.n	8002758 <_puts_r+0x24>
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <_puts_r+0xb4>)
 8002792:	429c      	cmp	r4, r3
 8002794:	bf08      	it	eq
 8002796:	68ec      	ldreq	r4, [r5, #12]
 8002798:	e7de      	b.n	8002758 <_puts_r+0x24>
 800279a:	4621      	mov	r1, r4
 800279c:	4628      	mov	r0, r5
 800279e:	f000 f87f 	bl	80028a0 <__swsetup_r>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d0dd      	beq.n	8002762 <_puts_r+0x2e>
 80027a6:	f04f 30ff 	mov.w	r0, #4294967295
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	da04      	bge.n	80027ba <_puts_r+0x86>
 80027b0:	69a2      	ldr	r2, [r4, #24]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	dc06      	bgt.n	80027c4 <_puts_r+0x90>
 80027b6:	290a      	cmp	r1, #10
 80027b8:	d004      	beq.n	80027c4 <_puts_r+0x90>
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	6022      	str	r2, [r4, #0]
 80027c0:	7019      	strb	r1, [r3, #0]
 80027c2:	e7cf      	b.n	8002764 <_puts_r+0x30>
 80027c4:	4622      	mov	r2, r4
 80027c6:	4628      	mov	r0, r5
 80027c8:	f000 f818 	bl	80027fc <__swbuf_r>
 80027cc:	3001      	adds	r0, #1
 80027ce:	d1c9      	bne.n	8002764 <_puts_r+0x30>
 80027d0:	e7e9      	b.n	80027a6 <_puts_r+0x72>
 80027d2:	200a      	movs	r0, #10
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	6022      	str	r2, [r4, #0]
 80027da:	7018      	strb	r0, [r3, #0]
 80027dc:	e7e5      	b.n	80027aa <_puts_r+0x76>
 80027de:	bf00      	nop
 80027e0:	080036a4 	.word	0x080036a4
 80027e4:	080036c4 	.word	0x080036c4
 80027e8:	08003684 	.word	0x08003684

080027ec <puts>:
 80027ec:	4b02      	ldr	r3, [pc, #8]	; (80027f8 <puts+0xc>)
 80027ee:	4601      	mov	r1, r0
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	f7ff bf9f 	b.w	8002734 <_puts_r>
 80027f6:	bf00      	nop
 80027f8:	2000000c 	.word	0x2000000c

080027fc <__swbuf_r>:
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	460e      	mov	r6, r1
 8002800:	4614      	mov	r4, r2
 8002802:	4605      	mov	r5, r0
 8002804:	b118      	cbz	r0, 800280e <__swbuf_r+0x12>
 8002806:	6983      	ldr	r3, [r0, #24]
 8002808:	b90b      	cbnz	r3, 800280e <__swbuf_r+0x12>
 800280a:	f000 f9a7 	bl	8002b5c <__sinit>
 800280e:	4b21      	ldr	r3, [pc, #132]	; (8002894 <__swbuf_r+0x98>)
 8002810:	429c      	cmp	r4, r3
 8002812:	d12a      	bne.n	800286a <__swbuf_r+0x6e>
 8002814:	686c      	ldr	r4, [r5, #4]
 8002816:	69a3      	ldr	r3, [r4, #24]
 8002818:	60a3      	str	r3, [r4, #8]
 800281a:	89a3      	ldrh	r3, [r4, #12]
 800281c:	071a      	lsls	r2, r3, #28
 800281e:	d52e      	bpl.n	800287e <__swbuf_r+0x82>
 8002820:	6923      	ldr	r3, [r4, #16]
 8002822:	b363      	cbz	r3, 800287e <__swbuf_r+0x82>
 8002824:	6923      	ldr	r3, [r4, #16]
 8002826:	6820      	ldr	r0, [r4, #0]
 8002828:	b2f6      	uxtb	r6, r6
 800282a:	1ac0      	subs	r0, r0, r3
 800282c:	6963      	ldr	r3, [r4, #20]
 800282e:	4637      	mov	r7, r6
 8002830:	4283      	cmp	r3, r0
 8002832:	dc04      	bgt.n	800283e <__swbuf_r+0x42>
 8002834:	4621      	mov	r1, r4
 8002836:	4628      	mov	r0, r5
 8002838:	f000 f926 	bl	8002a88 <_fflush_r>
 800283c:	bb28      	cbnz	r0, 800288a <__swbuf_r+0x8e>
 800283e:	68a3      	ldr	r3, [r4, #8]
 8002840:	3001      	adds	r0, #1
 8002842:	3b01      	subs	r3, #1
 8002844:	60a3      	str	r3, [r4, #8]
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	6022      	str	r2, [r4, #0]
 800284c:	701e      	strb	r6, [r3, #0]
 800284e:	6963      	ldr	r3, [r4, #20]
 8002850:	4283      	cmp	r3, r0
 8002852:	d004      	beq.n	800285e <__swbuf_r+0x62>
 8002854:	89a3      	ldrh	r3, [r4, #12]
 8002856:	07db      	lsls	r3, r3, #31
 8002858:	d519      	bpl.n	800288e <__swbuf_r+0x92>
 800285a:	2e0a      	cmp	r6, #10
 800285c:	d117      	bne.n	800288e <__swbuf_r+0x92>
 800285e:	4621      	mov	r1, r4
 8002860:	4628      	mov	r0, r5
 8002862:	f000 f911 	bl	8002a88 <_fflush_r>
 8002866:	b190      	cbz	r0, 800288e <__swbuf_r+0x92>
 8002868:	e00f      	b.n	800288a <__swbuf_r+0x8e>
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <__swbuf_r+0x9c>)
 800286c:	429c      	cmp	r4, r3
 800286e:	d101      	bne.n	8002874 <__swbuf_r+0x78>
 8002870:	68ac      	ldr	r4, [r5, #8]
 8002872:	e7d0      	b.n	8002816 <__swbuf_r+0x1a>
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <__swbuf_r+0xa0>)
 8002876:	429c      	cmp	r4, r3
 8002878:	bf08      	it	eq
 800287a:	68ec      	ldreq	r4, [r5, #12]
 800287c:	e7cb      	b.n	8002816 <__swbuf_r+0x1a>
 800287e:	4621      	mov	r1, r4
 8002880:	4628      	mov	r0, r5
 8002882:	f000 f80d 	bl	80028a0 <__swsetup_r>
 8002886:	2800      	cmp	r0, #0
 8002888:	d0cc      	beq.n	8002824 <__swbuf_r+0x28>
 800288a:	f04f 37ff 	mov.w	r7, #4294967295
 800288e:	4638      	mov	r0, r7
 8002890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002892:	bf00      	nop
 8002894:	080036a4 	.word	0x080036a4
 8002898:	080036c4 	.word	0x080036c4
 800289c:	08003684 	.word	0x08003684

080028a0 <__swsetup_r>:
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <__swsetup_r+0xcc>)
 80028a2:	b570      	push	{r4, r5, r6, lr}
 80028a4:	681d      	ldr	r5, [r3, #0]
 80028a6:	4606      	mov	r6, r0
 80028a8:	460c      	mov	r4, r1
 80028aa:	b125      	cbz	r5, 80028b6 <__swsetup_r+0x16>
 80028ac:	69ab      	ldr	r3, [r5, #24]
 80028ae:	b913      	cbnz	r3, 80028b6 <__swsetup_r+0x16>
 80028b0:	4628      	mov	r0, r5
 80028b2:	f000 f953 	bl	8002b5c <__sinit>
 80028b6:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <__swsetup_r+0xd0>)
 80028b8:	429c      	cmp	r4, r3
 80028ba:	d10f      	bne.n	80028dc <__swsetup_r+0x3c>
 80028bc:	686c      	ldr	r4, [r5, #4]
 80028be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	0715      	lsls	r5, r2, #28
 80028c6:	d42c      	bmi.n	8002922 <__swsetup_r+0x82>
 80028c8:	06d0      	lsls	r0, r2, #27
 80028ca:	d411      	bmi.n	80028f0 <__swsetup_r+0x50>
 80028cc:	2209      	movs	r2, #9
 80028ce:	6032      	str	r2, [r6, #0]
 80028d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d4:	81a3      	strh	r3, [r4, #12]
 80028d6:	f04f 30ff 	mov.w	r0, #4294967295
 80028da:	e03e      	b.n	800295a <__swsetup_r+0xba>
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <__swsetup_r+0xd4>)
 80028de:	429c      	cmp	r4, r3
 80028e0:	d101      	bne.n	80028e6 <__swsetup_r+0x46>
 80028e2:	68ac      	ldr	r4, [r5, #8]
 80028e4:	e7eb      	b.n	80028be <__swsetup_r+0x1e>
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <__swsetup_r+0xd8>)
 80028e8:	429c      	cmp	r4, r3
 80028ea:	bf08      	it	eq
 80028ec:	68ec      	ldreq	r4, [r5, #12]
 80028ee:	e7e6      	b.n	80028be <__swsetup_r+0x1e>
 80028f0:	0751      	lsls	r1, r2, #29
 80028f2:	d512      	bpl.n	800291a <__swsetup_r+0x7a>
 80028f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028f6:	b141      	cbz	r1, 800290a <__swsetup_r+0x6a>
 80028f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028fc:	4299      	cmp	r1, r3
 80028fe:	d002      	beq.n	8002906 <__swsetup_r+0x66>
 8002900:	4630      	mov	r0, r6
 8002902:	f000 fa19 	bl	8002d38 <_free_r>
 8002906:	2300      	movs	r3, #0
 8002908:	6363      	str	r3, [r4, #52]	; 0x34
 800290a:	89a3      	ldrh	r3, [r4, #12]
 800290c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002910:	81a3      	strh	r3, [r4, #12]
 8002912:	2300      	movs	r3, #0
 8002914:	6063      	str	r3, [r4, #4]
 8002916:	6923      	ldr	r3, [r4, #16]
 8002918:	6023      	str	r3, [r4, #0]
 800291a:	89a3      	ldrh	r3, [r4, #12]
 800291c:	f043 0308 	orr.w	r3, r3, #8
 8002920:	81a3      	strh	r3, [r4, #12]
 8002922:	6923      	ldr	r3, [r4, #16]
 8002924:	b94b      	cbnz	r3, 800293a <__swsetup_r+0x9a>
 8002926:	89a3      	ldrh	r3, [r4, #12]
 8002928:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800292c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002930:	d003      	beq.n	800293a <__swsetup_r+0x9a>
 8002932:	4621      	mov	r1, r4
 8002934:	4630      	mov	r0, r6
 8002936:	f000 f9bf 	bl	8002cb8 <__smakebuf_r>
 800293a:	89a2      	ldrh	r2, [r4, #12]
 800293c:	f012 0301 	ands.w	r3, r2, #1
 8002940:	d00c      	beq.n	800295c <__swsetup_r+0xbc>
 8002942:	2300      	movs	r3, #0
 8002944:	60a3      	str	r3, [r4, #8]
 8002946:	6963      	ldr	r3, [r4, #20]
 8002948:	425b      	negs	r3, r3
 800294a:	61a3      	str	r3, [r4, #24]
 800294c:	6923      	ldr	r3, [r4, #16]
 800294e:	b953      	cbnz	r3, 8002966 <__swsetup_r+0xc6>
 8002950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002954:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002958:	d1ba      	bne.n	80028d0 <__swsetup_r+0x30>
 800295a:	bd70      	pop	{r4, r5, r6, pc}
 800295c:	0792      	lsls	r2, r2, #30
 800295e:	bf58      	it	pl
 8002960:	6963      	ldrpl	r3, [r4, #20]
 8002962:	60a3      	str	r3, [r4, #8]
 8002964:	e7f2      	b.n	800294c <__swsetup_r+0xac>
 8002966:	2000      	movs	r0, #0
 8002968:	e7f7      	b.n	800295a <__swsetup_r+0xba>
 800296a:	bf00      	nop
 800296c:	2000000c 	.word	0x2000000c
 8002970:	080036a4 	.word	0x080036a4
 8002974:	080036c4 	.word	0x080036c4
 8002978:	08003684 	.word	0x08003684

0800297c <__sflush_r>:
 800297c:	898a      	ldrh	r2, [r1, #12]
 800297e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002982:	4605      	mov	r5, r0
 8002984:	0710      	lsls	r0, r2, #28
 8002986:	460c      	mov	r4, r1
 8002988:	d458      	bmi.n	8002a3c <__sflush_r+0xc0>
 800298a:	684b      	ldr	r3, [r1, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	dc05      	bgt.n	800299c <__sflush_r+0x20>
 8002990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	dc02      	bgt.n	800299c <__sflush_r+0x20>
 8002996:	2000      	movs	r0, #0
 8002998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800299c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800299e:	2e00      	cmp	r6, #0
 80029a0:	d0f9      	beq.n	8002996 <__sflush_r+0x1a>
 80029a2:	2300      	movs	r3, #0
 80029a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80029a8:	682f      	ldr	r7, [r5, #0]
 80029aa:	6a21      	ldr	r1, [r4, #32]
 80029ac:	602b      	str	r3, [r5, #0]
 80029ae:	d032      	beq.n	8002a16 <__sflush_r+0x9a>
 80029b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80029b2:	89a3      	ldrh	r3, [r4, #12]
 80029b4:	075a      	lsls	r2, r3, #29
 80029b6:	d505      	bpl.n	80029c4 <__sflush_r+0x48>
 80029b8:	6863      	ldr	r3, [r4, #4]
 80029ba:	1ac0      	subs	r0, r0, r3
 80029bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029be:	b10b      	cbz	r3, 80029c4 <__sflush_r+0x48>
 80029c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029c2:	1ac0      	subs	r0, r0, r3
 80029c4:	2300      	movs	r3, #0
 80029c6:	4602      	mov	r2, r0
 80029c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029ca:	6a21      	ldr	r1, [r4, #32]
 80029cc:	4628      	mov	r0, r5
 80029ce:	47b0      	blx	r6
 80029d0:	1c43      	adds	r3, r0, #1
 80029d2:	89a3      	ldrh	r3, [r4, #12]
 80029d4:	d106      	bne.n	80029e4 <__sflush_r+0x68>
 80029d6:	6829      	ldr	r1, [r5, #0]
 80029d8:	291d      	cmp	r1, #29
 80029da:	d848      	bhi.n	8002a6e <__sflush_r+0xf2>
 80029dc:	4a29      	ldr	r2, [pc, #164]	; (8002a84 <__sflush_r+0x108>)
 80029de:	40ca      	lsrs	r2, r1
 80029e0:	07d6      	lsls	r6, r2, #31
 80029e2:	d544      	bpl.n	8002a6e <__sflush_r+0xf2>
 80029e4:	2200      	movs	r2, #0
 80029e6:	6062      	str	r2, [r4, #4]
 80029e8:	6922      	ldr	r2, [r4, #16]
 80029ea:	04d9      	lsls	r1, r3, #19
 80029ec:	6022      	str	r2, [r4, #0]
 80029ee:	d504      	bpl.n	80029fa <__sflush_r+0x7e>
 80029f0:	1c42      	adds	r2, r0, #1
 80029f2:	d101      	bne.n	80029f8 <__sflush_r+0x7c>
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	b903      	cbnz	r3, 80029fa <__sflush_r+0x7e>
 80029f8:	6560      	str	r0, [r4, #84]	; 0x54
 80029fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029fc:	602f      	str	r7, [r5, #0]
 80029fe:	2900      	cmp	r1, #0
 8002a00:	d0c9      	beq.n	8002996 <__sflush_r+0x1a>
 8002a02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a06:	4299      	cmp	r1, r3
 8002a08:	d002      	beq.n	8002a10 <__sflush_r+0x94>
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	f000 f994 	bl	8002d38 <_free_r>
 8002a10:	2000      	movs	r0, #0
 8002a12:	6360      	str	r0, [r4, #52]	; 0x34
 8002a14:	e7c0      	b.n	8002998 <__sflush_r+0x1c>
 8002a16:	2301      	movs	r3, #1
 8002a18:	4628      	mov	r0, r5
 8002a1a:	47b0      	blx	r6
 8002a1c:	1c41      	adds	r1, r0, #1
 8002a1e:	d1c8      	bne.n	80029b2 <__sflush_r+0x36>
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0c5      	beq.n	80029b2 <__sflush_r+0x36>
 8002a26:	2b1d      	cmp	r3, #29
 8002a28:	d001      	beq.n	8002a2e <__sflush_r+0xb2>
 8002a2a:	2b16      	cmp	r3, #22
 8002a2c:	d101      	bne.n	8002a32 <__sflush_r+0xb6>
 8002a2e:	602f      	str	r7, [r5, #0]
 8002a30:	e7b1      	b.n	8002996 <__sflush_r+0x1a>
 8002a32:	89a3      	ldrh	r3, [r4, #12]
 8002a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a38:	81a3      	strh	r3, [r4, #12]
 8002a3a:	e7ad      	b.n	8002998 <__sflush_r+0x1c>
 8002a3c:	690f      	ldr	r7, [r1, #16]
 8002a3e:	2f00      	cmp	r7, #0
 8002a40:	d0a9      	beq.n	8002996 <__sflush_r+0x1a>
 8002a42:	0793      	lsls	r3, r2, #30
 8002a44:	bf18      	it	ne
 8002a46:	2300      	movne	r3, #0
 8002a48:	680e      	ldr	r6, [r1, #0]
 8002a4a:	bf08      	it	eq
 8002a4c:	694b      	ldreq	r3, [r1, #20]
 8002a4e:	eba6 0807 	sub.w	r8, r6, r7
 8002a52:	600f      	str	r7, [r1, #0]
 8002a54:	608b      	str	r3, [r1, #8]
 8002a56:	f1b8 0f00 	cmp.w	r8, #0
 8002a5a:	dd9c      	ble.n	8002996 <__sflush_r+0x1a>
 8002a5c:	4643      	mov	r3, r8
 8002a5e:	463a      	mov	r2, r7
 8002a60:	6a21      	ldr	r1, [r4, #32]
 8002a62:	4628      	mov	r0, r5
 8002a64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a66:	47b0      	blx	r6
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	dc06      	bgt.n	8002a7a <__sflush_r+0xfe>
 8002a6c:	89a3      	ldrh	r3, [r4, #12]
 8002a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a72:	81a3      	strh	r3, [r4, #12]
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	e78e      	b.n	8002998 <__sflush_r+0x1c>
 8002a7a:	4407      	add	r7, r0
 8002a7c:	eba8 0800 	sub.w	r8, r8, r0
 8002a80:	e7e9      	b.n	8002a56 <__sflush_r+0xda>
 8002a82:	bf00      	nop
 8002a84:	20400001 	.word	0x20400001

08002a88 <_fflush_r>:
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	690b      	ldr	r3, [r1, #16]
 8002a8c:	4605      	mov	r5, r0
 8002a8e:	460c      	mov	r4, r1
 8002a90:	b1db      	cbz	r3, 8002aca <_fflush_r+0x42>
 8002a92:	b118      	cbz	r0, 8002a9c <_fflush_r+0x14>
 8002a94:	6983      	ldr	r3, [r0, #24]
 8002a96:	b90b      	cbnz	r3, 8002a9c <_fflush_r+0x14>
 8002a98:	f000 f860 	bl	8002b5c <__sinit>
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <_fflush_r+0x48>)
 8002a9e:	429c      	cmp	r4, r3
 8002aa0:	d109      	bne.n	8002ab6 <_fflush_r+0x2e>
 8002aa2:	686c      	ldr	r4, [r5, #4]
 8002aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aa8:	b17b      	cbz	r3, 8002aca <_fflush_r+0x42>
 8002aaa:	4621      	mov	r1, r4
 8002aac:	4628      	mov	r0, r5
 8002aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ab2:	f7ff bf63 	b.w	800297c <__sflush_r>
 8002ab6:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <_fflush_r+0x4c>)
 8002ab8:	429c      	cmp	r4, r3
 8002aba:	d101      	bne.n	8002ac0 <_fflush_r+0x38>
 8002abc:	68ac      	ldr	r4, [r5, #8]
 8002abe:	e7f1      	b.n	8002aa4 <_fflush_r+0x1c>
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <_fflush_r+0x50>)
 8002ac2:	429c      	cmp	r4, r3
 8002ac4:	bf08      	it	eq
 8002ac6:	68ec      	ldreq	r4, [r5, #12]
 8002ac8:	e7ec      	b.n	8002aa4 <_fflush_r+0x1c>
 8002aca:	2000      	movs	r0, #0
 8002acc:	bd38      	pop	{r3, r4, r5, pc}
 8002ace:	bf00      	nop
 8002ad0:	080036a4 	.word	0x080036a4
 8002ad4:	080036c4 	.word	0x080036c4
 8002ad8:	08003684 	.word	0x08003684

08002adc <std>:
 8002adc:	2300      	movs	r3, #0
 8002ade:	b510      	push	{r4, lr}
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ae6:	6083      	str	r3, [r0, #8]
 8002ae8:	8181      	strh	r1, [r0, #12]
 8002aea:	6643      	str	r3, [r0, #100]	; 0x64
 8002aec:	81c2      	strh	r2, [r0, #14]
 8002aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002af2:	6183      	str	r3, [r0, #24]
 8002af4:	4619      	mov	r1, r3
 8002af6:	2208      	movs	r2, #8
 8002af8:	305c      	adds	r0, #92	; 0x5c
 8002afa:	f7ff fde7 	bl	80026cc <memset>
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <std+0x38>)
 8002b00:	6224      	str	r4, [r4, #32]
 8002b02:	6263      	str	r3, [r4, #36]	; 0x24
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <std+0x3c>)
 8002b06:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <std+0x40>)
 8002b0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <std+0x44>)
 8002b0e:	6323      	str	r3, [r4, #48]	; 0x30
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	bf00      	nop
 8002b14:	0800349d 	.word	0x0800349d
 8002b18:	080034bf 	.word	0x080034bf
 8002b1c:	080034f7 	.word	0x080034f7
 8002b20:	0800351b 	.word	0x0800351b

08002b24 <_cleanup_r>:
 8002b24:	4901      	ldr	r1, [pc, #4]	; (8002b2c <_cleanup_r+0x8>)
 8002b26:	f000 b885 	b.w	8002c34 <_fwalk_reent>
 8002b2a:	bf00      	nop
 8002b2c:	08002a89 	.word	0x08002a89

08002b30 <__sfmoreglue>:
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	2568      	movs	r5, #104	; 0x68
 8002b34:	1e4a      	subs	r2, r1, #1
 8002b36:	4355      	muls	r5, r2
 8002b38:	460e      	mov	r6, r1
 8002b3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b3e:	f000 f947 	bl	8002dd0 <_malloc_r>
 8002b42:	4604      	mov	r4, r0
 8002b44:	b140      	cbz	r0, 8002b58 <__sfmoreglue+0x28>
 8002b46:	2100      	movs	r1, #0
 8002b48:	e9c0 1600 	strd	r1, r6, [r0]
 8002b4c:	300c      	adds	r0, #12
 8002b4e:	60a0      	str	r0, [r4, #8]
 8002b50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b54:	f7ff fdba 	bl	80026cc <memset>
 8002b58:	4620      	mov	r0, r4
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}

08002b5c <__sinit>:
 8002b5c:	6983      	ldr	r3, [r0, #24]
 8002b5e:	b510      	push	{r4, lr}
 8002b60:	4604      	mov	r4, r0
 8002b62:	bb33      	cbnz	r3, 8002bb2 <__sinit+0x56>
 8002b64:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002b68:	6503      	str	r3, [r0, #80]	; 0x50
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <__sinit+0x58>)
 8002b6c:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <__sinit+0x5c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6282      	str	r2, [r0, #40]	; 0x28
 8002b72:	4298      	cmp	r0, r3
 8002b74:	bf04      	itt	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	6183      	streq	r3, [r0, #24]
 8002b7a:	f000 f81f 	bl	8002bbc <__sfp>
 8002b7e:	6060      	str	r0, [r4, #4]
 8002b80:	4620      	mov	r0, r4
 8002b82:	f000 f81b 	bl	8002bbc <__sfp>
 8002b86:	60a0      	str	r0, [r4, #8]
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f000 f817 	bl	8002bbc <__sfp>
 8002b8e:	2200      	movs	r2, #0
 8002b90:	60e0      	str	r0, [r4, #12]
 8002b92:	2104      	movs	r1, #4
 8002b94:	6860      	ldr	r0, [r4, #4]
 8002b96:	f7ff ffa1 	bl	8002adc <std>
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2109      	movs	r1, #9
 8002b9e:	68a0      	ldr	r0, [r4, #8]
 8002ba0:	f7ff ff9c 	bl	8002adc <std>
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	2112      	movs	r1, #18
 8002ba8:	68e0      	ldr	r0, [r4, #12]
 8002baa:	f7ff ff97 	bl	8002adc <std>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61a3      	str	r3, [r4, #24]
 8002bb2:	bd10      	pop	{r4, pc}
 8002bb4:	08003680 	.word	0x08003680
 8002bb8:	08002b25 	.word	0x08002b25

08002bbc <__sfp>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <__sfp+0x70>)
 8002bc0:	4607      	mov	r7, r0
 8002bc2:	681e      	ldr	r6, [r3, #0]
 8002bc4:	69b3      	ldr	r3, [r6, #24]
 8002bc6:	b913      	cbnz	r3, 8002bce <__sfp+0x12>
 8002bc8:	4630      	mov	r0, r6
 8002bca:	f7ff ffc7 	bl	8002b5c <__sinit>
 8002bce:	3648      	adds	r6, #72	; 0x48
 8002bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	d503      	bpl.n	8002be0 <__sfp+0x24>
 8002bd8:	6833      	ldr	r3, [r6, #0]
 8002bda:	b133      	cbz	r3, 8002bea <__sfp+0x2e>
 8002bdc:	6836      	ldr	r6, [r6, #0]
 8002bde:	e7f7      	b.n	8002bd0 <__sfp+0x14>
 8002be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002be4:	b16d      	cbz	r5, 8002c02 <__sfp+0x46>
 8002be6:	3468      	adds	r4, #104	; 0x68
 8002be8:	e7f4      	b.n	8002bd4 <__sfp+0x18>
 8002bea:	2104      	movs	r1, #4
 8002bec:	4638      	mov	r0, r7
 8002bee:	f7ff ff9f 	bl	8002b30 <__sfmoreglue>
 8002bf2:	6030      	str	r0, [r6, #0]
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d1f1      	bne.n	8002bdc <__sfp+0x20>
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4620      	mov	r0, r4
 8002c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <__sfp+0x74>)
 8002c04:	6665      	str	r5, [r4, #100]	; 0x64
 8002c06:	e9c4 5500 	strd	r5, r5, [r4]
 8002c0a:	60a5      	str	r5, [r4, #8]
 8002c0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002c10:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002c14:	2208      	movs	r2, #8
 8002c16:	4629      	mov	r1, r5
 8002c18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c1c:	f7ff fd56 	bl	80026cc <memset>
 8002c20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c28:	e7e9      	b.n	8002bfe <__sfp+0x42>
 8002c2a:	bf00      	nop
 8002c2c:	08003680 	.word	0x08003680
 8002c30:	ffff0001 	.word	0xffff0001

08002c34 <_fwalk_reent>:
 8002c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c38:	4680      	mov	r8, r0
 8002c3a:	4689      	mov	r9, r1
 8002c3c:	2600      	movs	r6, #0
 8002c3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c42:	b914      	cbnz	r4, 8002c4a <_fwalk_reent+0x16>
 8002c44:	4630      	mov	r0, r6
 8002c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c4a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002c4e:	3f01      	subs	r7, #1
 8002c50:	d501      	bpl.n	8002c56 <_fwalk_reent+0x22>
 8002c52:	6824      	ldr	r4, [r4, #0]
 8002c54:	e7f5      	b.n	8002c42 <_fwalk_reent+0xe>
 8002c56:	89ab      	ldrh	r3, [r5, #12]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d907      	bls.n	8002c6c <_fwalk_reent+0x38>
 8002c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c60:	3301      	adds	r3, #1
 8002c62:	d003      	beq.n	8002c6c <_fwalk_reent+0x38>
 8002c64:	4629      	mov	r1, r5
 8002c66:	4640      	mov	r0, r8
 8002c68:	47c8      	blx	r9
 8002c6a:	4306      	orrs	r6, r0
 8002c6c:	3568      	adds	r5, #104	; 0x68
 8002c6e:	e7ee      	b.n	8002c4e <_fwalk_reent+0x1a>

08002c70 <__swhatbuf_r>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	460e      	mov	r6, r1
 8002c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c78:	b096      	sub	sp, #88	; 0x58
 8002c7a:	2900      	cmp	r1, #0
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	da07      	bge.n	8002c92 <__swhatbuf_r+0x22>
 8002c82:	2300      	movs	r3, #0
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	89b3      	ldrh	r3, [r6, #12]
 8002c88:	061a      	lsls	r2, r3, #24
 8002c8a:	d410      	bmi.n	8002cae <__swhatbuf_r+0x3e>
 8002c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c90:	e00e      	b.n	8002cb0 <__swhatbuf_r+0x40>
 8002c92:	466a      	mov	r2, sp
 8002c94:	f000 fc68 	bl	8003568 <_fstat_r>
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	dbf2      	blt.n	8002c82 <__swhatbuf_r+0x12>
 8002c9c:	9a01      	ldr	r2, [sp, #4]
 8002c9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ca6:	425a      	negs	r2, r3
 8002ca8:	415a      	adcs	r2, r3
 8002caa:	602a      	str	r2, [r5, #0]
 8002cac:	e7ee      	b.n	8002c8c <__swhatbuf_r+0x1c>
 8002cae:	2340      	movs	r3, #64	; 0x40
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	6023      	str	r3, [r4, #0]
 8002cb4:	b016      	add	sp, #88	; 0x58
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}

08002cb8 <__smakebuf_r>:
 8002cb8:	898b      	ldrh	r3, [r1, #12]
 8002cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cbc:	079d      	lsls	r5, r3, #30
 8002cbe:	4606      	mov	r6, r0
 8002cc0:	460c      	mov	r4, r1
 8002cc2:	d507      	bpl.n	8002cd4 <__smakebuf_r+0x1c>
 8002cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	6123      	str	r3, [r4, #16]
 8002ccc:	2301      	movs	r3, #1
 8002cce:	6163      	str	r3, [r4, #20]
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	ab01      	add	r3, sp, #4
 8002cd6:	466a      	mov	r2, sp
 8002cd8:	f7ff ffca 	bl	8002c70 <__swhatbuf_r>
 8002cdc:	9900      	ldr	r1, [sp, #0]
 8002cde:	4605      	mov	r5, r0
 8002ce0:	4630      	mov	r0, r6
 8002ce2:	f000 f875 	bl	8002dd0 <_malloc_r>
 8002ce6:	b948      	cbnz	r0, 8002cfc <__smakebuf_r+0x44>
 8002ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cec:	059a      	lsls	r2, r3, #22
 8002cee:	d4ef      	bmi.n	8002cd0 <__smakebuf_r+0x18>
 8002cf0:	f023 0303 	bic.w	r3, r3, #3
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	81a3      	strh	r3, [r4, #12]
 8002cfa:	e7e3      	b.n	8002cc4 <__smakebuf_r+0xc>
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <__smakebuf_r+0x7c>)
 8002cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d00:	89a3      	ldrh	r3, [r4, #12]
 8002d02:	6020      	str	r0, [r4, #0]
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	81a3      	strh	r3, [r4, #12]
 8002d0a:	9b00      	ldr	r3, [sp, #0]
 8002d0c:	6120      	str	r0, [r4, #16]
 8002d0e:	6163      	str	r3, [r4, #20]
 8002d10:	9b01      	ldr	r3, [sp, #4]
 8002d12:	b15b      	cbz	r3, 8002d2c <__smakebuf_r+0x74>
 8002d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d18:	4630      	mov	r0, r6
 8002d1a:	f000 fc37 	bl	800358c <_isatty_r>
 8002d1e:	b128      	cbz	r0, 8002d2c <__smakebuf_r+0x74>
 8002d20:	89a3      	ldrh	r3, [r4, #12]
 8002d22:	f023 0303 	bic.w	r3, r3, #3
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	81a3      	strh	r3, [r4, #12]
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	431d      	orrs	r5, r3
 8002d30:	81a5      	strh	r5, [r4, #12]
 8002d32:	e7cd      	b.n	8002cd0 <__smakebuf_r+0x18>
 8002d34:	08002b25 	.word	0x08002b25

08002d38 <_free_r>:
 8002d38:	b538      	push	{r3, r4, r5, lr}
 8002d3a:	4605      	mov	r5, r0
 8002d3c:	2900      	cmp	r1, #0
 8002d3e:	d043      	beq.n	8002dc8 <_free_r+0x90>
 8002d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d44:	1f0c      	subs	r4, r1, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bfb8      	it	lt
 8002d4a:	18e4      	addlt	r4, r4, r3
 8002d4c:	f000 fc4e 	bl	80035ec <__malloc_lock>
 8002d50:	4a1e      	ldr	r2, [pc, #120]	; (8002dcc <_free_r+0x94>)
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	4610      	mov	r0, r2
 8002d56:	b933      	cbnz	r3, 8002d66 <_free_r+0x2e>
 8002d58:	6063      	str	r3, [r4, #4]
 8002d5a:	6014      	str	r4, [r2, #0]
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d62:	f000 bc44 	b.w	80035ee <__malloc_unlock>
 8002d66:	42a3      	cmp	r3, r4
 8002d68:	d90b      	bls.n	8002d82 <_free_r+0x4a>
 8002d6a:	6821      	ldr	r1, [r4, #0]
 8002d6c:	1862      	adds	r2, r4, r1
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf01      	itttt	eq
 8002d72:	681a      	ldreq	r2, [r3, #0]
 8002d74:	685b      	ldreq	r3, [r3, #4]
 8002d76:	1852      	addeq	r2, r2, r1
 8002d78:	6022      	streq	r2, [r4, #0]
 8002d7a:	6063      	str	r3, [r4, #4]
 8002d7c:	6004      	str	r4, [r0, #0]
 8002d7e:	e7ed      	b.n	8002d5c <_free_r+0x24>
 8002d80:	4613      	mov	r3, r2
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	b10a      	cbz	r2, 8002d8a <_free_r+0x52>
 8002d86:	42a2      	cmp	r2, r4
 8002d88:	d9fa      	bls.n	8002d80 <_free_r+0x48>
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	1858      	adds	r0, r3, r1
 8002d8e:	42a0      	cmp	r0, r4
 8002d90:	d10b      	bne.n	8002daa <_free_r+0x72>
 8002d92:	6820      	ldr	r0, [r4, #0]
 8002d94:	4401      	add	r1, r0
 8002d96:	1858      	adds	r0, r3, r1
 8002d98:	4282      	cmp	r2, r0
 8002d9a:	6019      	str	r1, [r3, #0]
 8002d9c:	d1de      	bne.n	8002d5c <_free_r+0x24>
 8002d9e:	6810      	ldr	r0, [r2, #0]
 8002da0:	6852      	ldr	r2, [r2, #4]
 8002da2:	4401      	add	r1, r0
 8002da4:	6019      	str	r1, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	e7d8      	b.n	8002d5c <_free_r+0x24>
 8002daa:	d902      	bls.n	8002db2 <_free_r+0x7a>
 8002dac:	230c      	movs	r3, #12
 8002dae:	602b      	str	r3, [r5, #0]
 8002db0:	e7d4      	b.n	8002d5c <_free_r+0x24>
 8002db2:	6820      	ldr	r0, [r4, #0]
 8002db4:	1821      	adds	r1, r4, r0
 8002db6:	428a      	cmp	r2, r1
 8002db8:	bf01      	itttt	eq
 8002dba:	6811      	ldreq	r1, [r2, #0]
 8002dbc:	6852      	ldreq	r2, [r2, #4]
 8002dbe:	1809      	addeq	r1, r1, r0
 8002dc0:	6021      	streq	r1, [r4, #0]
 8002dc2:	6062      	str	r2, [r4, #4]
 8002dc4:	605c      	str	r4, [r3, #4]
 8002dc6:	e7c9      	b.n	8002d5c <_free_r+0x24>
 8002dc8:	bd38      	pop	{r3, r4, r5, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000530 	.word	0x20000530

08002dd0 <_malloc_r>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	1ccd      	adds	r5, r1, #3
 8002dd4:	f025 0503 	bic.w	r5, r5, #3
 8002dd8:	3508      	adds	r5, #8
 8002dda:	2d0c      	cmp	r5, #12
 8002ddc:	bf38      	it	cc
 8002dde:	250c      	movcc	r5, #12
 8002de0:	2d00      	cmp	r5, #0
 8002de2:	4606      	mov	r6, r0
 8002de4:	db01      	blt.n	8002dea <_malloc_r+0x1a>
 8002de6:	42a9      	cmp	r1, r5
 8002de8:	d903      	bls.n	8002df2 <_malloc_r+0x22>
 8002dea:	230c      	movs	r3, #12
 8002dec:	6033      	str	r3, [r6, #0]
 8002dee:	2000      	movs	r0, #0
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
 8002df2:	f000 fbfb 	bl	80035ec <__malloc_lock>
 8002df6:	4a21      	ldr	r2, [pc, #132]	; (8002e7c <_malloc_r+0xac>)
 8002df8:	6814      	ldr	r4, [r2, #0]
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	b991      	cbnz	r1, 8002e24 <_malloc_r+0x54>
 8002dfe:	4c20      	ldr	r4, [pc, #128]	; (8002e80 <_malloc_r+0xb0>)
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	b91b      	cbnz	r3, 8002e0c <_malloc_r+0x3c>
 8002e04:	4630      	mov	r0, r6
 8002e06:	f000 fb39 	bl	800347c <_sbrk_r>
 8002e0a:	6020      	str	r0, [r4, #0]
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	4630      	mov	r0, r6
 8002e10:	f000 fb34 	bl	800347c <_sbrk_r>
 8002e14:	1c43      	adds	r3, r0, #1
 8002e16:	d124      	bne.n	8002e62 <_malloc_r+0x92>
 8002e18:	230c      	movs	r3, #12
 8002e1a:	4630      	mov	r0, r6
 8002e1c:	6033      	str	r3, [r6, #0]
 8002e1e:	f000 fbe6 	bl	80035ee <__malloc_unlock>
 8002e22:	e7e4      	b.n	8002dee <_malloc_r+0x1e>
 8002e24:	680b      	ldr	r3, [r1, #0]
 8002e26:	1b5b      	subs	r3, r3, r5
 8002e28:	d418      	bmi.n	8002e5c <_malloc_r+0x8c>
 8002e2a:	2b0b      	cmp	r3, #11
 8002e2c:	d90f      	bls.n	8002e4e <_malloc_r+0x7e>
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	18cc      	adds	r4, r1, r3
 8002e32:	50cd      	str	r5, [r1, r3]
 8002e34:	4630      	mov	r0, r6
 8002e36:	f000 fbda 	bl	80035ee <__malloc_unlock>
 8002e3a:	f104 000b 	add.w	r0, r4, #11
 8002e3e:	1d23      	adds	r3, r4, #4
 8002e40:	f020 0007 	bic.w	r0, r0, #7
 8002e44:	1ac3      	subs	r3, r0, r3
 8002e46:	d0d3      	beq.n	8002df0 <_malloc_r+0x20>
 8002e48:	425a      	negs	r2, r3
 8002e4a:	50e2      	str	r2, [r4, r3]
 8002e4c:	e7d0      	b.n	8002df0 <_malloc_r+0x20>
 8002e4e:	684b      	ldr	r3, [r1, #4]
 8002e50:	428c      	cmp	r4, r1
 8002e52:	bf16      	itet	ne
 8002e54:	6063      	strne	r3, [r4, #4]
 8002e56:	6013      	streq	r3, [r2, #0]
 8002e58:	460c      	movne	r4, r1
 8002e5a:	e7eb      	b.n	8002e34 <_malloc_r+0x64>
 8002e5c:	460c      	mov	r4, r1
 8002e5e:	6849      	ldr	r1, [r1, #4]
 8002e60:	e7cc      	b.n	8002dfc <_malloc_r+0x2c>
 8002e62:	1cc4      	adds	r4, r0, #3
 8002e64:	f024 0403 	bic.w	r4, r4, #3
 8002e68:	42a0      	cmp	r0, r4
 8002e6a:	d005      	beq.n	8002e78 <_malloc_r+0xa8>
 8002e6c:	1a21      	subs	r1, r4, r0
 8002e6e:	4630      	mov	r0, r6
 8002e70:	f000 fb04 	bl	800347c <_sbrk_r>
 8002e74:	3001      	adds	r0, #1
 8002e76:	d0cf      	beq.n	8002e18 <_malloc_r+0x48>
 8002e78:	6025      	str	r5, [r4, #0]
 8002e7a:	e7db      	b.n	8002e34 <_malloc_r+0x64>
 8002e7c:	20000530 	.word	0x20000530
 8002e80:	20000534 	.word	0x20000534

08002e84 <__sfputc_r>:
 8002e84:	6893      	ldr	r3, [r2, #8]
 8002e86:	b410      	push	{r4}
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	6093      	str	r3, [r2, #8]
 8002e8e:	da07      	bge.n	8002ea0 <__sfputc_r+0x1c>
 8002e90:	6994      	ldr	r4, [r2, #24]
 8002e92:	42a3      	cmp	r3, r4
 8002e94:	db01      	blt.n	8002e9a <__sfputc_r+0x16>
 8002e96:	290a      	cmp	r1, #10
 8002e98:	d102      	bne.n	8002ea0 <__sfputc_r+0x1c>
 8002e9a:	bc10      	pop	{r4}
 8002e9c:	f7ff bcae 	b.w	80027fc <__swbuf_r>
 8002ea0:	6813      	ldr	r3, [r2, #0]
 8002ea2:	1c58      	adds	r0, r3, #1
 8002ea4:	6010      	str	r0, [r2, #0]
 8002ea6:	7019      	strb	r1, [r3, #0]
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	bc10      	pop	{r4}
 8002eac:	4770      	bx	lr

08002eae <__sfputs_r>:
 8002eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb0:	4606      	mov	r6, r0
 8002eb2:	460f      	mov	r7, r1
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	18d5      	adds	r5, r2, r3
 8002eb8:	42ac      	cmp	r4, r5
 8002eba:	d101      	bne.n	8002ec0 <__sfputs_r+0x12>
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	e007      	b.n	8002ed0 <__sfputs_r+0x22>
 8002ec0:	463a      	mov	r2, r7
 8002ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	f7ff ffdc 	bl	8002e84 <__sfputc_r>
 8002ecc:	1c43      	adds	r3, r0, #1
 8002ece:	d1f3      	bne.n	8002eb8 <__sfputs_r+0xa>
 8002ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ed4 <_vfiprintf_r>:
 8002ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed8:	460c      	mov	r4, r1
 8002eda:	b09d      	sub	sp, #116	; 0x74
 8002edc:	4617      	mov	r7, r2
 8002ede:	461d      	mov	r5, r3
 8002ee0:	4606      	mov	r6, r0
 8002ee2:	b118      	cbz	r0, 8002eec <_vfiprintf_r+0x18>
 8002ee4:	6983      	ldr	r3, [r0, #24]
 8002ee6:	b90b      	cbnz	r3, 8002eec <_vfiprintf_r+0x18>
 8002ee8:	f7ff fe38 	bl	8002b5c <__sinit>
 8002eec:	4b7c      	ldr	r3, [pc, #496]	; (80030e0 <_vfiprintf_r+0x20c>)
 8002eee:	429c      	cmp	r4, r3
 8002ef0:	d158      	bne.n	8002fa4 <_vfiprintf_r+0xd0>
 8002ef2:	6874      	ldr	r4, [r6, #4]
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	0718      	lsls	r0, r3, #28
 8002ef8:	d55e      	bpl.n	8002fb8 <_vfiprintf_r+0xe4>
 8002efa:	6923      	ldr	r3, [r4, #16]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05b      	beq.n	8002fb8 <_vfiprintf_r+0xe4>
 8002f00:	2300      	movs	r3, #0
 8002f02:	9309      	str	r3, [sp, #36]	; 0x24
 8002f04:	2320      	movs	r3, #32
 8002f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f0a:	2330      	movs	r3, #48	; 0x30
 8002f0c:	f04f 0b01 	mov.w	fp, #1
 8002f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f14:	9503      	str	r5, [sp, #12]
 8002f16:	46b8      	mov	r8, r7
 8002f18:	4645      	mov	r5, r8
 8002f1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f1e:	b10b      	cbz	r3, 8002f24 <_vfiprintf_r+0x50>
 8002f20:	2b25      	cmp	r3, #37	; 0x25
 8002f22:	d154      	bne.n	8002fce <_vfiprintf_r+0xfa>
 8002f24:	ebb8 0a07 	subs.w	sl, r8, r7
 8002f28:	d00b      	beq.n	8002f42 <_vfiprintf_r+0x6e>
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	463a      	mov	r2, r7
 8002f2e:	4621      	mov	r1, r4
 8002f30:	4630      	mov	r0, r6
 8002f32:	f7ff ffbc 	bl	8002eae <__sfputs_r>
 8002f36:	3001      	adds	r0, #1
 8002f38:	f000 80c2 	beq.w	80030c0 <_vfiprintf_r+0x1ec>
 8002f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f3e:	4453      	add	r3, sl
 8002f40:	9309      	str	r3, [sp, #36]	; 0x24
 8002f42:	f898 3000 	ldrb.w	r3, [r8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80ba 	beq.w	80030c0 <_vfiprintf_r+0x1ec>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f56:	9304      	str	r3, [sp, #16]
 8002f58:	9307      	str	r3, [sp, #28]
 8002f5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f5e:	931a      	str	r3, [sp, #104]	; 0x68
 8002f60:	46a8      	mov	r8, r5
 8002f62:	2205      	movs	r2, #5
 8002f64:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002f68:	485e      	ldr	r0, [pc, #376]	; (80030e4 <_vfiprintf_r+0x210>)
 8002f6a:	f000 fb31 	bl	80035d0 <memchr>
 8002f6e:	9b04      	ldr	r3, [sp, #16]
 8002f70:	bb78      	cbnz	r0, 8002fd2 <_vfiprintf_r+0xfe>
 8002f72:	06d9      	lsls	r1, r3, #27
 8002f74:	bf44      	itt	mi
 8002f76:	2220      	movmi	r2, #32
 8002f78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f7c:	071a      	lsls	r2, r3, #28
 8002f7e:	bf44      	itt	mi
 8002f80:	222b      	movmi	r2, #43	; 0x2b
 8002f82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f86:	782a      	ldrb	r2, [r5, #0]
 8002f88:	2a2a      	cmp	r2, #42	; 0x2a
 8002f8a:	d02a      	beq.n	8002fe2 <_vfiprintf_r+0x10e>
 8002f8c:	46a8      	mov	r8, r5
 8002f8e:	2000      	movs	r0, #0
 8002f90:	250a      	movs	r5, #10
 8002f92:	9a07      	ldr	r2, [sp, #28]
 8002f94:	4641      	mov	r1, r8
 8002f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f9a:	3b30      	subs	r3, #48	; 0x30
 8002f9c:	2b09      	cmp	r3, #9
 8002f9e:	d969      	bls.n	8003074 <_vfiprintf_r+0x1a0>
 8002fa0:	b360      	cbz	r0, 8002ffc <_vfiprintf_r+0x128>
 8002fa2:	e024      	b.n	8002fee <_vfiprintf_r+0x11a>
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <_vfiprintf_r+0x214>)
 8002fa6:	429c      	cmp	r4, r3
 8002fa8:	d101      	bne.n	8002fae <_vfiprintf_r+0xda>
 8002faa:	68b4      	ldr	r4, [r6, #8]
 8002fac:	e7a2      	b.n	8002ef4 <_vfiprintf_r+0x20>
 8002fae:	4b4f      	ldr	r3, [pc, #316]	; (80030ec <_vfiprintf_r+0x218>)
 8002fb0:	429c      	cmp	r4, r3
 8002fb2:	bf08      	it	eq
 8002fb4:	68f4      	ldreq	r4, [r6, #12]
 8002fb6:	e79d      	b.n	8002ef4 <_vfiprintf_r+0x20>
 8002fb8:	4621      	mov	r1, r4
 8002fba:	4630      	mov	r0, r6
 8002fbc:	f7ff fc70 	bl	80028a0 <__swsetup_r>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d09d      	beq.n	8002f00 <_vfiprintf_r+0x2c>
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	b01d      	add	sp, #116	; 0x74
 8002fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fce:	46a8      	mov	r8, r5
 8002fd0:	e7a2      	b.n	8002f18 <_vfiprintf_r+0x44>
 8002fd2:	4a44      	ldr	r2, [pc, #272]	; (80030e4 <_vfiprintf_r+0x210>)
 8002fd4:	4645      	mov	r5, r8
 8002fd6:	1a80      	subs	r0, r0, r2
 8002fd8:	fa0b f000 	lsl.w	r0, fp, r0
 8002fdc:	4318      	orrs	r0, r3
 8002fde:	9004      	str	r0, [sp, #16]
 8002fe0:	e7be      	b.n	8002f60 <_vfiprintf_r+0x8c>
 8002fe2:	9a03      	ldr	r2, [sp, #12]
 8002fe4:	1d11      	adds	r1, r2, #4
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	9103      	str	r1, [sp, #12]
 8002fea:	2a00      	cmp	r2, #0
 8002fec:	db01      	blt.n	8002ff2 <_vfiprintf_r+0x11e>
 8002fee:	9207      	str	r2, [sp, #28]
 8002ff0:	e004      	b.n	8002ffc <_vfiprintf_r+0x128>
 8002ff2:	4252      	negs	r2, r2
 8002ff4:	f043 0302 	orr.w	r3, r3, #2
 8002ff8:	9207      	str	r2, [sp, #28]
 8002ffa:	9304      	str	r3, [sp, #16]
 8002ffc:	f898 3000 	ldrb.w	r3, [r8]
 8003000:	2b2e      	cmp	r3, #46	; 0x2e
 8003002:	d10e      	bne.n	8003022 <_vfiprintf_r+0x14e>
 8003004:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003008:	2b2a      	cmp	r3, #42	; 0x2a
 800300a:	d138      	bne.n	800307e <_vfiprintf_r+0x1aa>
 800300c:	9b03      	ldr	r3, [sp, #12]
 800300e:	f108 0802 	add.w	r8, r8, #2
 8003012:	1d1a      	adds	r2, r3, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	9203      	str	r2, [sp, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	bfb8      	it	lt
 800301c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003020:	9305      	str	r3, [sp, #20]
 8003022:	4d33      	ldr	r5, [pc, #204]	; (80030f0 <_vfiprintf_r+0x21c>)
 8003024:	2203      	movs	r2, #3
 8003026:	f898 1000 	ldrb.w	r1, [r8]
 800302a:	4628      	mov	r0, r5
 800302c:	f000 fad0 	bl	80035d0 <memchr>
 8003030:	b140      	cbz	r0, 8003044 <_vfiprintf_r+0x170>
 8003032:	2340      	movs	r3, #64	; 0x40
 8003034:	1b40      	subs	r0, r0, r5
 8003036:	fa03 f000 	lsl.w	r0, r3, r0
 800303a:	9b04      	ldr	r3, [sp, #16]
 800303c:	f108 0801 	add.w	r8, r8, #1
 8003040:	4303      	orrs	r3, r0
 8003042:	9304      	str	r3, [sp, #16]
 8003044:	f898 1000 	ldrb.w	r1, [r8]
 8003048:	2206      	movs	r2, #6
 800304a:	482a      	ldr	r0, [pc, #168]	; (80030f4 <_vfiprintf_r+0x220>)
 800304c:	f108 0701 	add.w	r7, r8, #1
 8003050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003054:	f000 fabc 	bl	80035d0 <memchr>
 8003058:	2800      	cmp	r0, #0
 800305a:	d037      	beq.n	80030cc <_vfiprintf_r+0x1f8>
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <_vfiprintf_r+0x224>)
 800305e:	bb1b      	cbnz	r3, 80030a8 <_vfiprintf_r+0x1d4>
 8003060:	9b03      	ldr	r3, [sp, #12]
 8003062:	3307      	adds	r3, #7
 8003064:	f023 0307 	bic.w	r3, r3, #7
 8003068:	3308      	adds	r3, #8
 800306a:	9303      	str	r3, [sp, #12]
 800306c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800306e:	444b      	add	r3, r9
 8003070:	9309      	str	r3, [sp, #36]	; 0x24
 8003072:	e750      	b.n	8002f16 <_vfiprintf_r+0x42>
 8003074:	fb05 3202 	mla	r2, r5, r2, r3
 8003078:	2001      	movs	r0, #1
 800307a:	4688      	mov	r8, r1
 800307c:	e78a      	b.n	8002f94 <_vfiprintf_r+0xc0>
 800307e:	2300      	movs	r3, #0
 8003080:	250a      	movs	r5, #10
 8003082:	4619      	mov	r1, r3
 8003084:	f108 0801 	add.w	r8, r8, #1
 8003088:	9305      	str	r3, [sp, #20]
 800308a:	4640      	mov	r0, r8
 800308c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003090:	3a30      	subs	r2, #48	; 0x30
 8003092:	2a09      	cmp	r2, #9
 8003094:	d903      	bls.n	800309e <_vfiprintf_r+0x1ca>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0c3      	beq.n	8003022 <_vfiprintf_r+0x14e>
 800309a:	9105      	str	r1, [sp, #20]
 800309c:	e7c1      	b.n	8003022 <_vfiprintf_r+0x14e>
 800309e:	fb05 2101 	mla	r1, r5, r1, r2
 80030a2:	2301      	movs	r3, #1
 80030a4:	4680      	mov	r8, r0
 80030a6:	e7f0      	b.n	800308a <_vfiprintf_r+0x1b6>
 80030a8:	ab03      	add	r3, sp, #12
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	4622      	mov	r2, r4
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <_vfiprintf_r+0x228>)
 80030b0:	a904      	add	r1, sp, #16
 80030b2:	4630      	mov	r0, r6
 80030b4:	f3af 8000 	nop.w
 80030b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030bc:	4681      	mov	r9, r0
 80030be:	d1d5      	bne.n	800306c <_vfiprintf_r+0x198>
 80030c0:	89a3      	ldrh	r3, [r4, #12]
 80030c2:	065b      	lsls	r3, r3, #25
 80030c4:	f53f af7e 	bmi.w	8002fc4 <_vfiprintf_r+0xf0>
 80030c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030ca:	e77d      	b.n	8002fc8 <_vfiprintf_r+0xf4>
 80030cc:	ab03      	add	r3, sp, #12
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	4622      	mov	r2, r4
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <_vfiprintf_r+0x228>)
 80030d4:	a904      	add	r1, sp, #16
 80030d6:	4630      	mov	r0, r6
 80030d8:	f000 f888 	bl	80031ec <_printf_i>
 80030dc:	e7ec      	b.n	80030b8 <_vfiprintf_r+0x1e4>
 80030de:	bf00      	nop
 80030e0:	080036a4 	.word	0x080036a4
 80030e4:	080036e4 	.word	0x080036e4
 80030e8:	080036c4 	.word	0x080036c4
 80030ec:	08003684 	.word	0x08003684
 80030f0:	080036ea 	.word	0x080036ea
 80030f4:	080036ee 	.word	0x080036ee
 80030f8:	00000000 	.word	0x00000000
 80030fc:	08002eaf 	.word	0x08002eaf

08003100 <_printf_common>:
 8003100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003104:	4691      	mov	r9, r2
 8003106:	461f      	mov	r7, r3
 8003108:	688a      	ldr	r2, [r1, #8]
 800310a:	690b      	ldr	r3, [r1, #16]
 800310c:	4606      	mov	r6, r0
 800310e:	4293      	cmp	r3, r2
 8003110:	bfb8      	it	lt
 8003112:	4613      	movlt	r3, r2
 8003114:	f8c9 3000 	str.w	r3, [r9]
 8003118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800311c:	460c      	mov	r4, r1
 800311e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003122:	b112      	cbz	r2, 800312a <_printf_common+0x2a>
 8003124:	3301      	adds	r3, #1
 8003126:	f8c9 3000 	str.w	r3, [r9]
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	0699      	lsls	r1, r3, #26
 800312e:	bf42      	ittt	mi
 8003130:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003134:	3302      	addmi	r3, #2
 8003136:	f8c9 3000 	strmi.w	r3, [r9]
 800313a:	6825      	ldr	r5, [r4, #0]
 800313c:	f015 0506 	ands.w	r5, r5, #6
 8003140:	d107      	bne.n	8003152 <_printf_common+0x52>
 8003142:	f104 0a19 	add.w	sl, r4, #25
 8003146:	68e3      	ldr	r3, [r4, #12]
 8003148:	f8d9 2000 	ldr.w	r2, [r9]
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	42ab      	cmp	r3, r5
 8003150:	dc29      	bgt.n	80031a6 <_printf_common+0xa6>
 8003152:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003156:	6822      	ldr	r2, [r4, #0]
 8003158:	3300      	adds	r3, #0
 800315a:	bf18      	it	ne
 800315c:	2301      	movne	r3, #1
 800315e:	0692      	lsls	r2, r2, #26
 8003160:	d42e      	bmi.n	80031c0 <_printf_common+0xc0>
 8003162:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003166:	4639      	mov	r1, r7
 8003168:	4630      	mov	r0, r6
 800316a:	47c0      	blx	r8
 800316c:	3001      	adds	r0, #1
 800316e:	d021      	beq.n	80031b4 <_printf_common+0xb4>
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	68e5      	ldr	r5, [r4, #12]
 8003174:	f003 0306 	and.w	r3, r3, #6
 8003178:	2b04      	cmp	r3, #4
 800317a:	bf18      	it	ne
 800317c:	2500      	movne	r5, #0
 800317e:	f8d9 2000 	ldr.w	r2, [r9]
 8003182:	f04f 0900 	mov.w	r9, #0
 8003186:	bf08      	it	eq
 8003188:	1aad      	subeq	r5, r5, r2
 800318a:	68a3      	ldr	r3, [r4, #8]
 800318c:	6922      	ldr	r2, [r4, #16]
 800318e:	bf08      	it	eq
 8003190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003194:	4293      	cmp	r3, r2
 8003196:	bfc4      	itt	gt
 8003198:	1a9b      	subgt	r3, r3, r2
 800319a:	18ed      	addgt	r5, r5, r3
 800319c:	341a      	adds	r4, #26
 800319e:	454d      	cmp	r5, r9
 80031a0:	d11a      	bne.n	80031d8 <_printf_common+0xd8>
 80031a2:	2000      	movs	r0, #0
 80031a4:	e008      	b.n	80031b8 <_printf_common+0xb8>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4652      	mov	r2, sl
 80031aa:	4639      	mov	r1, r7
 80031ac:	4630      	mov	r0, r6
 80031ae:	47c0      	blx	r8
 80031b0:	3001      	adds	r0, #1
 80031b2:	d103      	bne.n	80031bc <_printf_common+0xbc>
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031bc:	3501      	adds	r5, #1
 80031be:	e7c2      	b.n	8003146 <_printf_common+0x46>
 80031c0:	2030      	movs	r0, #48	; 0x30
 80031c2:	18e1      	adds	r1, r4, r3
 80031c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031ce:	4422      	add	r2, r4
 80031d0:	3302      	adds	r3, #2
 80031d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031d6:	e7c4      	b.n	8003162 <_printf_common+0x62>
 80031d8:	2301      	movs	r3, #1
 80031da:	4622      	mov	r2, r4
 80031dc:	4639      	mov	r1, r7
 80031de:	4630      	mov	r0, r6
 80031e0:	47c0      	blx	r8
 80031e2:	3001      	adds	r0, #1
 80031e4:	d0e6      	beq.n	80031b4 <_printf_common+0xb4>
 80031e6:	f109 0901 	add.w	r9, r9, #1
 80031ea:	e7d8      	b.n	800319e <_printf_common+0x9e>

080031ec <_printf_i>:
 80031ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80031f4:	460c      	mov	r4, r1
 80031f6:	7e09      	ldrb	r1, [r1, #24]
 80031f8:	b085      	sub	sp, #20
 80031fa:	296e      	cmp	r1, #110	; 0x6e
 80031fc:	4617      	mov	r7, r2
 80031fe:	4606      	mov	r6, r0
 8003200:	4698      	mov	r8, r3
 8003202:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003204:	f000 80b3 	beq.w	800336e <_printf_i+0x182>
 8003208:	d822      	bhi.n	8003250 <_printf_i+0x64>
 800320a:	2963      	cmp	r1, #99	; 0x63
 800320c:	d036      	beq.n	800327c <_printf_i+0x90>
 800320e:	d80a      	bhi.n	8003226 <_printf_i+0x3a>
 8003210:	2900      	cmp	r1, #0
 8003212:	f000 80b9 	beq.w	8003388 <_printf_i+0x19c>
 8003216:	2958      	cmp	r1, #88	; 0x58
 8003218:	f000 8083 	beq.w	8003322 <_printf_i+0x136>
 800321c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003220:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003224:	e032      	b.n	800328c <_printf_i+0xa0>
 8003226:	2964      	cmp	r1, #100	; 0x64
 8003228:	d001      	beq.n	800322e <_printf_i+0x42>
 800322a:	2969      	cmp	r1, #105	; 0x69
 800322c:	d1f6      	bne.n	800321c <_printf_i+0x30>
 800322e:	6820      	ldr	r0, [r4, #0]
 8003230:	6813      	ldr	r3, [r2, #0]
 8003232:	0605      	lsls	r5, r0, #24
 8003234:	f103 0104 	add.w	r1, r3, #4
 8003238:	d52a      	bpl.n	8003290 <_printf_i+0xa4>
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6011      	str	r1, [r2, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	da03      	bge.n	800324a <_printf_i+0x5e>
 8003242:	222d      	movs	r2, #45	; 0x2d
 8003244:	425b      	negs	r3, r3
 8003246:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800324a:	486f      	ldr	r0, [pc, #444]	; (8003408 <_printf_i+0x21c>)
 800324c:	220a      	movs	r2, #10
 800324e:	e039      	b.n	80032c4 <_printf_i+0xd8>
 8003250:	2973      	cmp	r1, #115	; 0x73
 8003252:	f000 809d 	beq.w	8003390 <_printf_i+0x1a4>
 8003256:	d808      	bhi.n	800326a <_printf_i+0x7e>
 8003258:	296f      	cmp	r1, #111	; 0x6f
 800325a:	d020      	beq.n	800329e <_printf_i+0xb2>
 800325c:	2970      	cmp	r1, #112	; 0x70
 800325e:	d1dd      	bne.n	800321c <_printf_i+0x30>
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	f043 0320 	orr.w	r3, r3, #32
 8003266:	6023      	str	r3, [r4, #0]
 8003268:	e003      	b.n	8003272 <_printf_i+0x86>
 800326a:	2975      	cmp	r1, #117	; 0x75
 800326c:	d017      	beq.n	800329e <_printf_i+0xb2>
 800326e:	2978      	cmp	r1, #120	; 0x78
 8003270:	d1d4      	bne.n	800321c <_printf_i+0x30>
 8003272:	2378      	movs	r3, #120	; 0x78
 8003274:	4865      	ldr	r0, [pc, #404]	; (800340c <_printf_i+0x220>)
 8003276:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800327a:	e055      	b.n	8003328 <_printf_i+0x13c>
 800327c:	6813      	ldr	r3, [r2, #0]
 800327e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003282:	1d19      	adds	r1, r3, #4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6011      	str	r1, [r2, #0]
 8003288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800328c:	2301      	movs	r3, #1
 800328e:	e08c      	b.n	80033aa <_printf_i+0x1be>
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003296:	6011      	str	r1, [r2, #0]
 8003298:	bf18      	it	ne
 800329a:	b21b      	sxthne	r3, r3
 800329c:	e7cf      	b.n	800323e <_printf_i+0x52>
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	6825      	ldr	r5, [r4, #0]
 80032a2:	1d18      	adds	r0, r3, #4
 80032a4:	6010      	str	r0, [r2, #0]
 80032a6:	0628      	lsls	r0, r5, #24
 80032a8:	d501      	bpl.n	80032ae <_printf_i+0xc2>
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	e002      	b.n	80032b4 <_printf_i+0xc8>
 80032ae:	0668      	lsls	r0, r5, #25
 80032b0:	d5fb      	bpl.n	80032aa <_printf_i+0xbe>
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	296f      	cmp	r1, #111	; 0x6f
 80032b6:	bf14      	ite	ne
 80032b8:	220a      	movne	r2, #10
 80032ba:	2208      	moveq	r2, #8
 80032bc:	4852      	ldr	r0, [pc, #328]	; (8003408 <_printf_i+0x21c>)
 80032be:	2100      	movs	r1, #0
 80032c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032c4:	6865      	ldr	r5, [r4, #4]
 80032c6:	2d00      	cmp	r5, #0
 80032c8:	60a5      	str	r5, [r4, #8]
 80032ca:	f2c0 8095 	blt.w	80033f8 <_printf_i+0x20c>
 80032ce:	6821      	ldr	r1, [r4, #0]
 80032d0:	f021 0104 	bic.w	r1, r1, #4
 80032d4:	6021      	str	r1, [r4, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d13d      	bne.n	8003356 <_printf_i+0x16a>
 80032da:	2d00      	cmp	r5, #0
 80032dc:	f040 808e 	bne.w	80033fc <_printf_i+0x210>
 80032e0:	4665      	mov	r5, ip
 80032e2:	2a08      	cmp	r2, #8
 80032e4:	d10b      	bne.n	80032fe <_printf_i+0x112>
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	07db      	lsls	r3, r3, #31
 80032ea:	d508      	bpl.n	80032fe <_printf_i+0x112>
 80032ec:	6923      	ldr	r3, [r4, #16]
 80032ee:	6862      	ldr	r2, [r4, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	bfde      	ittt	le
 80032f4:	2330      	movle	r3, #48	; 0x30
 80032f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032fe:	ebac 0305 	sub.w	r3, ip, r5
 8003302:	6123      	str	r3, [r4, #16]
 8003304:	f8cd 8000 	str.w	r8, [sp]
 8003308:	463b      	mov	r3, r7
 800330a:	aa03      	add	r2, sp, #12
 800330c:	4621      	mov	r1, r4
 800330e:	4630      	mov	r0, r6
 8003310:	f7ff fef6 	bl	8003100 <_printf_common>
 8003314:	3001      	adds	r0, #1
 8003316:	d14d      	bne.n	80033b4 <_printf_i+0x1c8>
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	b005      	add	sp, #20
 800331e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003322:	4839      	ldr	r0, [pc, #228]	; (8003408 <_printf_i+0x21c>)
 8003324:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003328:	6813      	ldr	r3, [r2, #0]
 800332a:	6821      	ldr	r1, [r4, #0]
 800332c:	1d1d      	adds	r5, r3, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6015      	str	r5, [r2, #0]
 8003332:	060a      	lsls	r2, r1, #24
 8003334:	d50b      	bpl.n	800334e <_printf_i+0x162>
 8003336:	07ca      	lsls	r2, r1, #31
 8003338:	bf44      	itt	mi
 800333a:	f041 0120 	orrmi.w	r1, r1, #32
 800333e:	6021      	strmi	r1, [r4, #0]
 8003340:	b91b      	cbnz	r3, 800334a <_printf_i+0x15e>
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	f022 0220 	bic.w	r2, r2, #32
 8003348:	6022      	str	r2, [r4, #0]
 800334a:	2210      	movs	r2, #16
 800334c:	e7b7      	b.n	80032be <_printf_i+0xd2>
 800334e:	064d      	lsls	r5, r1, #25
 8003350:	bf48      	it	mi
 8003352:	b29b      	uxthmi	r3, r3
 8003354:	e7ef      	b.n	8003336 <_printf_i+0x14a>
 8003356:	4665      	mov	r5, ip
 8003358:	fbb3 f1f2 	udiv	r1, r3, r2
 800335c:	fb02 3311 	mls	r3, r2, r1, r3
 8003360:	5cc3      	ldrb	r3, [r0, r3]
 8003362:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003366:	460b      	mov	r3, r1
 8003368:	2900      	cmp	r1, #0
 800336a:	d1f5      	bne.n	8003358 <_printf_i+0x16c>
 800336c:	e7b9      	b.n	80032e2 <_printf_i+0xf6>
 800336e:	6813      	ldr	r3, [r2, #0]
 8003370:	6825      	ldr	r5, [r4, #0]
 8003372:	1d18      	adds	r0, r3, #4
 8003374:	6961      	ldr	r1, [r4, #20]
 8003376:	6010      	str	r0, [r2, #0]
 8003378:	0628      	lsls	r0, r5, #24
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	d501      	bpl.n	8003382 <_printf_i+0x196>
 800337e:	6019      	str	r1, [r3, #0]
 8003380:	e002      	b.n	8003388 <_printf_i+0x19c>
 8003382:	066a      	lsls	r2, r5, #25
 8003384:	d5fb      	bpl.n	800337e <_printf_i+0x192>
 8003386:	8019      	strh	r1, [r3, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	4665      	mov	r5, ip
 800338c:	6123      	str	r3, [r4, #16]
 800338e:	e7b9      	b.n	8003304 <_printf_i+0x118>
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	1d19      	adds	r1, r3, #4
 8003394:	6011      	str	r1, [r2, #0]
 8003396:	681d      	ldr	r5, [r3, #0]
 8003398:	6862      	ldr	r2, [r4, #4]
 800339a:	2100      	movs	r1, #0
 800339c:	4628      	mov	r0, r5
 800339e:	f000 f917 	bl	80035d0 <memchr>
 80033a2:	b108      	cbz	r0, 80033a8 <_printf_i+0x1bc>
 80033a4:	1b40      	subs	r0, r0, r5
 80033a6:	6060      	str	r0, [r4, #4]
 80033a8:	6863      	ldr	r3, [r4, #4]
 80033aa:	6123      	str	r3, [r4, #16]
 80033ac:	2300      	movs	r3, #0
 80033ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b2:	e7a7      	b.n	8003304 <_printf_i+0x118>
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	462a      	mov	r2, r5
 80033b8:	4639      	mov	r1, r7
 80033ba:	4630      	mov	r0, r6
 80033bc:	47c0      	blx	r8
 80033be:	3001      	adds	r0, #1
 80033c0:	d0aa      	beq.n	8003318 <_printf_i+0x12c>
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	079b      	lsls	r3, r3, #30
 80033c6:	d413      	bmi.n	80033f0 <_printf_i+0x204>
 80033c8:	68e0      	ldr	r0, [r4, #12]
 80033ca:	9b03      	ldr	r3, [sp, #12]
 80033cc:	4298      	cmp	r0, r3
 80033ce:	bfb8      	it	lt
 80033d0:	4618      	movlt	r0, r3
 80033d2:	e7a3      	b.n	800331c <_printf_i+0x130>
 80033d4:	2301      	movs	r3, #1
 80033d6:	464a      	mov	r2, r9
 80033d8:	4639      	mov	r1, r7
 80033da:	4630      	mov	r0, r6
 80033dc:	47c0      	blx	r8
 80033de:	3001      	adds	r0, #1
 80033e0:	d09a      	beq.n	8003318 <_printf_i+0x12c>
 80033e2:	3501      	adds	r5, #1
 80033e4:	68e3      	ldr	r3, [r4, #12]
 80033e6:	9a03      	ldr	r2, [sp, #12]
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	42ab      	cmp	r3, r5
 80033ec:	dcf2      	bgt.n	80033d4 <_printf_i+0x1e8>
 80033ee:	e7eb      	b.n	80033c8 <_printf_i+0x1dc>
 80033f0:	2500      	movs	r5, #0
 80033f2:	f104 0919 	add.w	r9, r4, #25
 80033f6:	e7f5      	b.n	80033e4 <_printf_i+0x1f8>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ac      	bne.n	8003356 <_printf_i+0x16a>
 80033fc:	7803      	ldrb	r3, [r0, #0]
 80033fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003402:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003406:	e76c      	b.n	80032e2 <_printf_i+0xf6>
 8003408:	080036f5 	.word	0x080036f5
 800340c:	08003706 	.word	0x08003706

08003410 <_putc_r>:
 8003410:	b570      	push	{r4, r5, r6, lr}
 8003412:	460d      	mov	r5, r1
 8003414:	4614      	mov	r4, r2
 8003416:	4606      	mov	r6, r0
 8003418:	b118      	cbz	r0, 8003422 <_putc_r+0x12>
 800341a:	6983      	ldr	r3, [r0, #24]
 800341c:	b90b      	cbnz	r3, 8003422 <_putc_r+0x12>
 800341e:	f7ff fb9d 	bl	8002b5c <__sinit>
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <_putc_r+0x60>)
 8003424:	429c      	cmp	r4, r3
 8003426:	d112      	bne.n	800344e <_putc_r+0x3e>
 8003428:	6874      	ldr	r4, [r6, #4]
 800342a:	68a3      	ldr	r3, [r4, #8]
 800342c:	3b01      	subs	r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	60a3      	str	r3, [r4, #8]
 8003432:	da16      	bge.n	8003462 <_putc_r+0x52>
 8003434:	69a2      	ldr	r2, [r4, #24]
 8003436:	4293      	cmp	r3, r2
 8003438:	db02      	blt.n	8003440 <_putc_r+0x30>
 800343a:	b2eb      	uxtb	r3, r5
 800343c:	2b0a      	cmp	r3, #10
 800343e:	d110      	bne.n	8003462 <_putc_r+0x52>
 8003440:	4622      	mov	r2, r4
 8003442:	4629      	mov	r1, r5
 8003444:	4630      	mov	r0, r6
 8003446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800344a:	f7ff b9d7 	b.w	80027fc <__swbuf_r>
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <_putc_r+0x64>)
 8003450:	429c      	cmp	r4, r3
 8003452:	d101      	bne.n	8003458 <_putc_r+0x48>
 8003454:	68b4      	ldr	r4, [r6, #8]
 8003456:	e7e8      	b.n	800342a <_putc_r+0x1a>
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <_putc_r+0x68>)
 800345a:	429c      	cmp	r4, r3
 800345c:	bf08      	it	eq
 800345e:	68f4      	ldreq	r4, [r6, #12]
 8003460:	e7e3      	b.n	800342a <_putc_r+0x1a>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	b2e8      	uxtb	r0, r5
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	6022      	str	r2, [r4, #0]
 800346a:	701d      	strb	r5, [r3, #0]
 800346c:	bd70      	pop	{r4, r5, r6, pc}
 800346e:	bf00      	nop
 8003470:	080036a4 	.word	0x080036a4
 8003474:	080036c4 	.word	0x080036c4
 8003478:	08003684 	.word	0x08003684

0800347c <_sbrk_r>:
 800347c:	b538      	push	{r3, r4, r5, lr}
 800347e:	2300      	movs	r3, #0
 8003480:	4c05      	ldr	r4, [pc, #20]	; (8003498 <_sbrk_r+0x1c>)
 8003482:	4605      	mov	r5, r0
 8003484:	4608      	mov	r0, r1
 8003486:	6023      	str	r3, [r4, #0]
 8003488:	f7fd f912 	bl	80006b0 <_sbrk>
 800348c:	1c43      	adds	r3, r0, #1
 800348e:	d102      	bne.n	8003496 <_sbrk_r+0x1a>
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	b103      	cbz	r3, 8003496 <_sbrk_r+0x1a>
 8003494:	602b      	str	r3, [r5, #0]
 8003496:	bd38      	pop	{r3, r4, r5, pc}
 8003498:	200005e0 	.word	0x200005e0

0800349c <__sread>:
 800349c:	b510      	push	{r4, lr}
 800349e:	460c      	mov	r4, r1
 80034a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a4:	f000 f8a4 	bl	80035f0 <_read_r>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	bfab      	itete	ge
 80034ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034ae:	89a3      	ldrhlt	r3, [r4, #12]
 80034b0:	181b      	addge	r3, r3, r0
 80034b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034b6:	bfac      	ite	ge
 80034b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80034ba:	81a3      	strhlt	r3, [r4, #12]
 80034bc:	bd10      	pop	{r4, pc}

080034be <__swrite>:
 80034be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c2:	461f      	mov	r7, r3
 80034c4:	898b      	ldrh	r3, [r1, #12]
 80034c6:	4605      	mov	r5, r0
 80034c8:	05db      	lsls	r3, r3, #23
 80034ca:	460c      	mov	r4, r1
 80034cc:	4616      	mov	r6, r2
 80034ce:	d505      	bpl.n	80034dc <__swrite+0x1e>
 80034d0:	2302      	movs	r3, #2
 80034d2:	2200      	movs	r2, #0
 80034d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d8:	f000 f868 	bl	80035ac <_lseek_r>
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	4632      	mov	r2, r6
 80034e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e4:	81a3      	strh	r3, [r4, #12]
 80034e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034ea:	463b      	mov	r3, r7
 80034ec:	4628      	mov	r0, r5
 80034ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034f2:	f000 b817 	b.w	8003524 <_write_r>

080034f6 <__sseek>:
 80034f6:	b510      	push	{r4, lr}
 80034f8:	460c      	mov	r4, r1
 80034fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fe:	f000 f855 	bl	80035ac <_lseek_r>
 8003502:	1c43      	adds	r3, r0, #1
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	bf15      	itete	ne
 8003508:	6560      	strne	r0, [r4, #84]	; 0x54
 800350a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800350e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003512:	81a3      	strheq	r3, [r4, #12]
 8003514:	bf18      	it	ne
 8003516:	81a3      	strhne	r3, [r4, #12]
 8003518:	bd10      	pop	{r4, pc}

0800351a <__sclose>:
 800351a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800351e:	f000 b813 	b.w	8003548 <_close_r>
	...

08003524 <_write_r>:
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	4605      	mov	r5, r0
 8003528:	4608      	mov	r0, r1
 800352a:	4611      	mov	r1, r2
 800352c:	2200      	movs	r2, #0
 800352e:	4c05      	ldr	r4, [pc, #20]	; (8003544 <_write_r+0x20>)
 8003530:	6022      	str	r2, [r4, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	f7fd f86f 	bl	8000616 <_write>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d102      	bne.n	8003542 <_write_r+0x1e>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	b103      	cbz	r3, 8003542 <_write_r+0x1e>
 8003540:	602b      	str	r3, [r5, #0]
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	200005e0 	.word	0x200005e0

08003548 <_close_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	2300      	movs	r3, #0
 800354c:	4c05      	ldr	r4, [pc, #20]	; (8003564 <_close_r+0x1c>)
 800354e:	4605      	mov	r5, r0
 8003550:	4608      	mov	r0, r1
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	f7fd f87b 	bl	800064e <_close>
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	d102      	bne.n	8003562 <_close_r+0x1a>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	b103      	cbz	r3, 8003562 <_close_r+0x1a>
 8003560:	602b      	str	r3, [r5, #0]
 8003562:	bd38      	pop	{r3, r4, r5, pc}
 8003564:	200005e0 	.word	0x200005e0

08003568 <_fstat_r>:
 8003568:	b538      	push	{r3, r4, r5, lr}
 800356a:	2300      	movs	r3, #0
 800356c:	4c06      	ldr	r4, [pc, #24]	; (8003588 <_fstat_r+0x20>)
 800356e:	4605      	mov	r5, r0
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	6023      	str	r3, [r4, #0]
 8003576:	f7fd f875 	bl	8000664 <_fstat>
 800357a:	1c43      	adds	r3, r0, #1
 800357c:	d102      	bne.n	8003584 <_fstat_r+0x1c>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	b103      	cbz	r3, 8003584 <_fstat_r+0x1c>
 8003582:	602b      	str	r3, [r5, #0]
 8003584:	bd38      	pop	{r3, r4, r5, pc}
 8003586:	bf00      	nop
 8003588:	200005e0 	.word	0x200005e0

0800358c <_isatty_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	2300      	movs	r3, #0
 8003590:	4c05      	ldr	r4, [pc, #20]	; (80035a8 <_isatty_r+0x1c>)
 8003592:	4605      	mov	r5, r0
 8003594:	4608      	mov	r0, r1
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	f7fd f873 	bl	8000682 <_isatty>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	d102      	bne.n	80035a6 <_isatty_r+0x1a>
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	b103      	cbz	r3, 80035a6 <_isatty_r+0x1a>
 80035a4:	602b      	str	r3, [r5, #0]
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
 80035a8:	200005e0 	.word	0x200005e0

080035ac <_lseek_r>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	4605      	mov	r5, r0
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	2200      	movs	r2, #0
 80035b6:	4c05      	ldr	r4, [pc, #20]	; (80035cc <_lseek_r+0x20>)
 80035b8:	6022      	str	r2, [r4, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7fd f86b 	bl	8000696 <_lseek>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d102      	bne.n	80035ca <_lseek_r+0x1e>
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	b103      	cbz	r3, 80035ca <_lseek_r+0x1e>
 80035c8:	602b      	str	r3, [r5, #0]
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	200005e0 	.word	0x200005e0

080035d0 <memchr>:
 80035d0:	b510      	push	{r4, lr}
 80035d2:	b2c9      	uxtb	r1, r1
 80035d4:	4402      	add	r2, r0
 80035d6:	4290      	cmp	r0, r2
 80035d8:	4603      	mov	r3, r0
 80035da:	d101      	bne.n	80035e0 <memchr+0x10>
 80035dc:	2300      	movs	r3, #0
 80035de:	e003      	b.n	80035e8 <memchr+0x18>
 80035e0:	781c      	ldrb	r4, [r3, #0]
 80035e2:	3001      	adds	r0, #1
 80035e4:	428c      	cmp	r4, r1
 80035e6:	d1f6      	bne.n	80035d6 <memchr+0x6>
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd10      	pop	{r4, pc}

080035ec <__malloc_lock>:
 80035ec:	4770      	bx	lr

080035ee <__malloc_unlock>:
 80035ee:	4770      	bx	lr

080035f0 <_read_r>:
 80035f0:	b538      	push	{r3, r4, r5, lr}
 80035f2:	4605      	mov	r5, r0
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	2200      	movs	r2, #0
 80035fa:	4c05      	ldr	r4, [pc, #20]	; (8003610 <_read_r+0x20>)
 80035fc:	6022      	str	r2, [r4, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	f7fc ffec 	bl	80005dc <_read>
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d102      	bne.n	800360e <_read_r+0x1e>
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	b103      	cbz	r3, 800360e <_read_r+0x1e>
 800360c:	602b      	str	r3, [r5, #0]
 800360e:	bd38      	pop	{r3, r4, r5, pc}
 8003610:	200005e0 	.word	0x200005e0

08003614 <_init>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr

08003620 <_fini>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	bf00      	nop
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr
