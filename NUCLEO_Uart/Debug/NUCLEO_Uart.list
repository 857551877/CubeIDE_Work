
NUCLEO_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002724  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002910  08002910  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002910  08002910  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002910  08002910  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08002988  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002988  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006817  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016ca  00000000  00000000  000268b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  00027f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f0  00000000  00000000  00028648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014343  00000000  00000000  00028c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000651c  00000000  00000000  0003cf7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b373  00000000  00000000  00043497  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ae80a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002048  00000000  00000000  000ae888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002818 	.word	0x08002818

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002818 	.word	0x08002818

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <MX_GPIO_Init+0xcc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2120      	movs	r1, #32
 80001c4:	4815      	ldr	r0, [pc, #84]	; (800021c <MX_GPIO_Init+0xd0>)
 80001c6:	f000 fda7 	bl	8000d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80001ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001d8:	f107 0310 	add.w	r3, r7, #16
 80001dc:	4619      	mov	r1, r3
 80001de:	4811      	ldr	r0, [pc, #68]	; (8000224 <MX_GPIO_Init+0xd8>)
 80001e0:	f000 fc40 	bl	8000a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80001e4:	2320      	movs	r3, #32
 80001e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <MX_GPIO_Init+0xd0>)
 80001fc:	f000 fc32 	bl	8000a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2100      	movs	r1, #0
 8000204:	2028      	movs	r0, #40	; 0x28
 8000206:	f000 fbf6 	bl	80009f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	; 0x28
 800020c:	f000 fc0f 	bl	8000a2e <HAL_NVIC_EnableIRQ>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	10110000 	.word	0x10110000
 8000224:	40011000 	.word	0x40011000

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 faa9 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f821 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f7ff ff89 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800023a:	f000 f9bd 	bl	80005b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800023e:	f000 f991 	bl	8000564 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  char String[10] = "gagdag";
 8000242:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <main+0x48>)
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	e892 0003 	ldmia.w	r2, {r0, r1}
 800024a:	6018      	str	r0, [r3, #0]
 800024c:	3304      	adds	r3, #4
 800024e:	8019      	strh	r1, [r3, #0]
 8000250:	3302      	adds	r3, #2
 8000252:	0c0a      	lsrs	r2, r1, #16
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	f107 030b 	add.w	r3, r7, #11
 800025a:	2200      	movs	r2, #0
 800025c:	801a      	strh	r2, [r3, #0]
 800025e:	709a      	strb	r2, [r3, #2]
  uint16_t a = 10;
 8000260:	230a      	movs	r3, #10
 8000262:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf("Uart test!!\n",a);
 8000264:	89fb      	ldrh	r3, [r7, #14]
 8000266:	4619      	mov	r1, r3
 8000268:	4802      	ldr	r0, [pc, #8]	; (8000274 <main+0x4c>)
 800026a:	f001 fbe7 	bl	8001a3c <iprintf>
  {
 800026e:	e7f9      	b.n	8000264 <main+0x3c>
 8000270:	08002840 	.word	0x08002840
 8000274:	08002830 	.word	0x08002830

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	; 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fbd0 	bl	8001a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2310      	movs	r3, #16
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002aa:	2300      	movs	r3, #0
 80002ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0318 	add.w	r3, r7, #24
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fd67 	bl	8000d8c <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002c4:	f000 f819 	bl	80002fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	2302      	movs	r3, #2
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2102      	movs	r1, #2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 ffd2 	bl	800128c <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ee:	f000 f804 	bl	80002fa <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3740      	adds	r7, #64	; 0x40
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
	...

08000308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <HAL_MspInit+0x5c>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a14      	ldr	r2, [pc, #80]	; (8000364 <HAL_MspInit+0x5c>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b12      	ldr	r3, [pc, #72]	; (8000364 <HAL_MspInit+0x5c>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
 8000324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <HAL_MspInit+0x5c>)
 8000328:	69db      	ldr	r3, [r3, #28]
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <HAL_MspInit+0x5c>)
 800032c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000330:	61d3      	str	r3, [r2, #28]
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <HAL_MspInit+0x5c>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800033e:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <HAL_MspInit+0x60>)
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	4a04      	ldr	r2, [pc, #16]	; (8000368 <HAL_MspInit+0x60>)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035a:	bf00      	nop
 800035c:	3714      	adds	r7, #20
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40021000 	.word	0x40021000
 8000368:	40010000 	.word	0x40010000

0800036c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800037c:	e7fe      	b.n	800037c <HardFault_Handler+0x4>

0800037e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000382:	e7fe      	b.n	8000382 <MemManage_Handler+0x4>

08000384 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000388:	e7fe      	b.n	8000388 <BusFault_Handler+0x4>

0800038a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800038e:	e7fe      	b.n	800038e <UsageFault_Handler+0x4>

08000390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b8:	f000 fa2a 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}

080003c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80003c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80003c8:	f000 fcbe 	bl	8000d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	e00a      	b.n	80003f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003e2:	f3af 8000 	nop.w
 80003e6:	4601      	mov	r1, r0
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	1c5a      	adds	r2, r3, #1
 80003ec:	60ba      	str	r2, [r7, #8]
 80003ee:	b2ca      	uxtb	r2, r1
 80003f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	3301      	adds	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
 80003f8:	697a      	ldr	r2, [r7, #20]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	dbf0      	blt.n	80003e2 <_read+0x12>
	}

return len;
 8000400:	687b      	ldr	r3, [r7, #4]
}
 8000402:	4618      	mov	r0, r3
 8000404:	3718      	adds	r7, #24
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b086      	sub	sp, #24
 800040e:	af00      	add	r7, sp, #0
 8000410:	60f8      	str	r0, [r7, #12]
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]
 800041a:	e009      	b.n	8000430 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	4618      	mov	r0, r3
 8000426:	f000 f975 	bl	8000714 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	3301      	adds	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	697a      	ldr	r2, [r7, #20]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	429a      	cmp	r2, r3
 8000436:	dbf1      	blt.n	800041c <_write+0x12>
	}
	return len;
 8000438:	687b      	ldr	r3, [r7, #4]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3718      	adds	r7, #24
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_close>:

int _close(int file)
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
	return -1;
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800044e:	4618      	mov	r0, r3
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000468:	605a      	str	r2, [r3, #4]
	return 0;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <_isatty>:

int _isatty(int file)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
	return 1;
 800047e:	2301      	movs	r3, #1
}
 8000480:	4618      	mov	r0, r3
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800048a:	b480      	push	{r7}
 800048c:	b085      	sub	sp, #20
 800048e:	af00      	add	r7, sp, #0
 8000490:	60f8      	str	r0, [r7, #12]
 8000492:	60b9      	str	r1, [r7, #8]
 8000494:	607a      	str	r2, [r7, #4]
	return 0;
 8000496:	2300      	movs	r3, #0
}
 8000498:	4618      	mov	r0, r3
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
	...

080004a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <_sbrk+0x50>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <_sbrk+0x16>
		heap_end = &end;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <_sbrk+0x50>)
 80004b6:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <_sbrk+0x54>)
 80004b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <_sbrk+0x50>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <_sbrk+0x50>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4413      	add	r3, r2
 80004c8:	466a      	mov	r2, sp
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d907      	bls.n	80004de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004ce:	f001 fa83 	bl	80019d8 <__errno>
 80004d2:	4602      	mov	r2, r0
 80004d4:	230c      	movs	r3, #12
 80004d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295
 80004dc:	e006      	b.n	80004ec <_sbrk+0x48>
	}

	heap_end += incr;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <_sbrk+0x50>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <_sbrk+0x50>)
 80004e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000008c 	.word	0x2000008c
 80004f8:	20000120 	.word	0x20000120

080004fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <SystemInit+0x5c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a14      	ldr	r2, [pc, #80]	; (8000558 <SystemInit+0x5c>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <SystemInit+0x5c>)
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	4911      	ldr	r1, [pc, #68]	; (8000558 <SystemInit+0x5c>)
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <SystemInit+0x60>)
 8000514:	4013      	ands	r3, r2
 8000516:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <SystemInit+0x5c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <SystemInit+0x5c>)
 800051e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000526:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <SystemInit+0x5c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <SystemInit+0x5c>)
 800052e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000532:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <SystemInit+0x5c>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <SystemInit+0x5c>)
 800053a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800053e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <SystemInit+0x5c>)
 8000542:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000546:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <SystemInit+0x64>)
 800054a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800054e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000
 800055c:	f8ff0000 	.word	0xf8ff0000
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <MX_USART1_UART_Init+0x50>)
 800056c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 800058a:	220c      	movs	r2, #12
 800058c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 800059c:	f001 f812 	bl	80015c4 <HAL_UART_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005a6:	f7ff fea8 	bl	80002fa <Error_Handler>
  }

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000098 	.word	0x20000098
 80005b4:	40013800 	.word	0x40013800

080005b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_USART2_UART_Init+0x4c>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <MX_USART2_UART_Init+0x50>)
 80005c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_USART2_UART_Init+0x4c>)
 80005c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_USART2_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART2_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_USART2_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART2_UART_Init+0x4c>)
 80005de:	220c      	movs	r2, #12
 80005e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_USART2_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART2_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_USART2_UART_Init+0x4c>)
 80005f0:	f000 ffe8 	bl	80015c4 <HAL_UART_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005fa:	f7ff fe7e 	bl	80002fa <Error_Handler>
  }

}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000d8 	.word	0x200000d8
 8000608:	40004400 	.word	0x40004400

0800060c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0318 	add.w	r3, r7, #24
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a37      	ldr	r2, [pc, #220]	; (8000704 <HAL_UART_MspInit+0xf8>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d132      	bne.n	8000692 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800062c:	4b36      	ldr	r3, [pc, #216]	; (8000708 <HAL_UART_MspInit+0xfc>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a35      	ldr	r2, [pc, #212]	; (8000708 <HAL_UART_MspInit+0xfc>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b33      	ldr	r3, [pc, #204]	; (8000708 <HAL_UART_MspInit+0xfc>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <HAL_UART_MspInit+0xfc>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <HAL_UART_MspInit+0xfc>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <HAL_UART_MspInit+0xfc>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800065c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	4619      	mov	r1, r3
 8000670:	4826      	ldr	r0, [pc, #152]	; (800070c <HAL_UART_MspInit+0x100>)
 8000672:	f000 f9f7 	bl	8000a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4619      	mov	r1, r3
 800068a:	4820      	ldr	r0, [pc, #128]	; (800070c <HAL_UART_MspInit+0x100>)
 800068c:	f000 f9ea 	bl	8000a64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000690:	e034      	b.n	80006fc <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a1e      	ldr	r2, [pc, #120]	; (8000710 <HAL_UART_MspInit+0x104>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d12f      	bne.n	80006fc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <HAL_UART_MspInit+0xfc>)
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	4a19      	ldr	r2, [pc, #100]	; (8000708 <HAL_UART_MspInit+0xfc>)
 80006a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a6:	61d3      	str	r3, [r2, #28]
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <HAL_UART_MspInit+0xfc>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_UART_MspInit+0xfc>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <HAL_UART_MspInit+0xfc>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <HAL_UART_MspInit+0xfc>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006cc:	2304      	movs	r3, #4
 80006ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0318 	add.w	r3, r7, #24
 80006dc:	4619      	mov	r1, r3
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <HAL_UART_MspInit+0x100>)
 80006e0:	f000 f9c0 	bl	8000a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006e4:	2308      	movs	r3, #8
 80006e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0318 	add.w	r3, r7, #24
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_UART_MspInit+0x100>)
 80006f8:	f000 f9b4 	bl	8000a64 <HAL_GPIO_Init>
}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40013800 	.word	0x40013800
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800
 8000710:	40004400 	.word	0x40004400

08000714 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800071c:	1d39      	adds	r1, r7, #4
 800071e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000722:	2201      	movs	r2, #1
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <__io_putchar+0x20>)
 8000726:	f000 ff9a 	bl	800165e <HAL_UART_Transmit>
  return ch;
 800072a:	687b      	ldr	r3, [r7, #4]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000098 	.word	0x20000098

08000738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000738:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800073a:	e003      	b.n	8000744 <LoopCopyDataInit>

0800073c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800073e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000740:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000742:	3104      	adds	r1, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000744:	480a      	ldr	r0, [pc, #40]	; (8000770 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000748:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800074a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800074c:	d3f6      	bcc.n	800073c <CopyDataInit>
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000750:	e002      	b.n	8000758 <LoopFillZerobss>

08000752 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000754:	f842 3b04 	str.w	r3, [r2], #4

08000758 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800075a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800075c:	d3f9      	bcc.n	8000752 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800075e:	f7ff fecd 	bl	80004fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000762:	f001 f93f 	bl	80019e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fd5f 	bl	8000228 <main>
  bx lr
 800076a:	4770      	bx	lr
  ldr r3, =_sidata
 800076c:	08002918 	.word	0x08002918
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000774:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000778:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800077c:	20000120 	.word	0x20000120

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f923 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f808 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff fdb2 	bl	8000308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x54>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x58>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f93b 	bl	8000a4a <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00e      	b.n	80007fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d80a      	bhi.n	80007fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f000 f903 	bl	80009f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <HAL_InitTick+0x5c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000000 	.word	0x20000000
 8000808:	20000008 	.word	0x20000008
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x20>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a03      	ldr	r2, [pc, #12]	; (8000830 <HAL_IncTick+0x20>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000008 	.word	0x20000008
 8000830:	20000118 	.word	0x20000118

08000834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <HAL_GetTick+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000118 	.word	0x20000118

08000848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000864:	4013      	ands	r3, r2
 8000866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087a:	4a04      	ldr	r2, [pc, #16]	; (800088c <__NVIC_SetPriorityGrouping+0x44>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	60d3      	str	r3, [r2, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	f003 0307 	and.w	r3, r3, #7
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db0b      	blt.n	80008d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f003 021f 	and.w	r2, r3, #31
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <__NVIC_EnableIRQ+0x34>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	095b      	lsrs	r3, r3, #5
 80008cc:	2001      	movs	r0, #1
 80008ce:	fa00 f202 	lsl.w	r2, r0, r2
 80008d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	e000e100 	.word	0xe000e100

080008e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	db0a      	blt.n	800090e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	490c      	ldr	r1, [pc, #48]	; (8000930 <__NVIC_SetPriority+0x4c>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	0112      	lsls	r2, r2, #4
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	440b      	add	r3, r1
 8000908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800090c:	e00a      	b.n	8000924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4908      	ldr	r1, [pc, #32]	; (8000934 <__NVIC_SetPriority+0x50>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	f003 030f 	and.w	r3, r3, #15
 800091a:	3b04      	subs	r3, #4
 800091c:	0112      	lsls	r2, r2, #4
 800091e:	b2d2      	uxtb	r2, r2
 8000920:	440b      	add	r3, r1
 8000922:	761a      	strb	r2, [r3, #24]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	f1c3 0307 	rsb	r3, r3, #7
 8000952:	2b04      	cmp	r3, #4
 8000954:	bf28      	it	cs
 8000956:	2304      	movcs	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3304      	adds	r3, #4
 800095e:	2b06      	cmp	r3, #6
 8000960:	d902      	bls.n	8000968 <NVIC_EncodePriority+0x30>
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3b03      	subs	r3, #3
 8000966:	e000      	b.n	800096a <NVIC_EncodePriority+0x32>
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43da      	mvns	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	401a      	ands	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43d9      	mvns	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	4313      	orrs	r3, r2
         );
}
 8000992:	4618      	mov	r0, r3
 8000994:	3724      	adds	r7, #36	; 0x24
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ac:	d301      	bcc.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00f      	b.n	80009d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <SysTick_Config+0x40>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	210f      	movs	r1, #15
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f7ff ff90 	bl	80008e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <SysTick_Config+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <SysTick_Config+0x40>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff2d 	bl	8000848 <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff42 	bl	8000890 <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ff90 	bl	8000938 <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff5f 	bl	80008e4 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff35 	bl	80008ac <__NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffa2 	bl	800099c <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b08b      	sub	sp, #44	; 0x2c
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a76:	e127      	b.n	8000cc8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	f040 8116 	bne.w	8000cc2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d034      	beq.n	8000b08 <HAL_GPIO_Init+0xa4>
 8000a9e:	2b12      	cmp	r3, #18
 8000aa0:	d80d      	bhi.n	8000abe <HAL_GPIO_Init+0x5a>
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d02b      	beq.n	8000afe <HAL_GPIO_Init+0x9a>
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d804      	bhi.n	8000ab4 <HAL_GPIO_Init+0x50>
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d031      	beq.n	8000b12 <HAL_GPIO_Init+0xae>
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d01c      	beq.n	8000aec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ab2:	e048      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d043      	beq.n	8000b40 <HAL_GPIO_Init+0xdc>
 8000ab8:	2b11      	cmp	r3, #17
 8000aba:	d01b      	beq.n	8000af4 <HAL_GPIO_Init+0x90>
          break;
 8000abc:	e043      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000abe:	4a89      	ldr	r2, [pc, #548]	; (8000ce4 <HAL_GPIO_Init+0x280>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d026      	beq.n	8000b12 <HAL_GPIO_Init+0xae>
 8000ac4:	4a87      	ldr	r2, [pc, #540]	; (8000ce4 <HAL_GPIO_Init+0x280>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d806      	bhi.n	8000ad8 <HAL_GPIO_Init+0x74>
 8000aca:	4a87      	ldr	r2, [pc, #540]	; (8000ce8 <HAL_GPIO_Init+0x284>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d020      	beq.n	8000b12 <HAL_GPIO_Init+0xae>
 8000ad0:	4a86      	ldr	r2, [pc, #536]	; (8000cec <HAL_GPIO_Init+0x288>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d01d      	beq.n	8000b12 <HAL_GPIO_Init+0xae>
          break;
 8000ad6:	e036      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ad8:	4a85      	ldr	r2, [pc, #532]	; (8000cf0 <HAL_GPIO_Init+0x28c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d019      	beq.n	8000b12 <HAL_GPIO_Init+0xae>
 8000ade:	4a85      	ldr	r2, [pc, #532]	; (8000cf4 <HAL_GPIO_Init+0x290>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d016      	beq.n	8000b12 <HAL_GPIO_Init+0xae>
 8000ae4:	4a84      	ldr	r2, [pc, #528]	; (8000cf8 <HAL_GPIO_Init+0x294>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d013      	beq.n	8000b12 <HAL_GPIO_Init+0xae>
          break;
 8000aea:	e02c      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e028      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	3304      	adds	r3, #4
 8000afa:	623b      	str	r3, [r7, #32]
          break;
 8000afc:	e023      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	3308      	adds	r3, #8
 8000b04:	623b      	str	r3, [r7, #32]
          break;
 8000b06:	e01e      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	330c      	adds	r3, #12
 8000b0e:	623b      	str	r3, [r7, #32]
          break;
 8000b10:	e019      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e012      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d105      	bne.n	8000b34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	611a      	str	r2, [r3, #16]
          break;
 8000b32:	e008      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b34:	2308      	movs	r3, #8
 8000b36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	615a      	str	r2, [r3, #20]
          break;
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	2bff      	cmp	r3, #255	; 0xff
 8000b4a:	d801      	bhi.n	8000b50 <HAL_GPIO_Init+0xec>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	e001      	b.n	8000b54 <HAL_GPIO_Init+0xf0>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3304      	adds	r3, #4
 8000b54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	2bff      	cmp	r3, #255	; 0xff
 8000b5a:	d802      	bhi.n	8000b62 <HAL_GPIO_Init+0xfe>
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	e002      	b.n	8000b68 <HAL_GPIO_Init+0x104>
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	3b08      	subs	r3, #8
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	210f      	movs	r1, #15
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	401a      	ands	r2, r3
 8000b7a:	6a39      	ldr	r1, [r7, #32]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	431a      	orrs	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f000 8096 	beq.w	8000cc2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b96:	4b59      	ldr	r3, [pc, #356]	; (8000cfc <HAL_GPIO_Init+0x298>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a58      	ldr	r2, [pc, #352]	; (8000cfc <HAL_GPIO_Init+0x298>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b56      	ldr	r3, [pc, #344]	; (8000cfc <HAL_GPIO_Init+0x298>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bae:	4a54      	ldr	r2, [pc, #336]	; (8000d00 <HAL_GPIO_Init+0x29c>)
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	f003 0303 	and.w	r3, r3, #3
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a4b      	ldr	r2, [pc, #300]	; (8000d04 <HAL_GPIO_Init+0x2a0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d013      	beq.n	8000c02 <HAL_GPIO_Init+0x19e>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a4a      	ldr	r2, [pc, #296]	; (8000d08 <HAL_GPIO_Init+0x2a4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d00d      	beq.n	8000bfe <HAL_GPIO_Init+0x19a>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a49      	ldr	r2, [pc, #292]	; (8000d0c <HAL_GPIO_Init+0x2a8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d007      	beq.n	8000bfa <HAL_GPIO_Init+0x196>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <HAL_GPIO_Init+0x2ac>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_GPIO_Init+0x192>
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e006      	b.n	8000c04 <HAL_GPIO_Init+0x1a0>
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	e004      	b.n	8000c04 <HAL_GPIO_Init+0x1a0>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e002      	b.n	8000c04 <HAL_GPIO_Init+0x1a0>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e000      	b.n	8000c04 <HAL_GPIO_Init+0x1a0>
 8000c02:	2300      	movs	r3, #0
 8000c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c06:	f002 0203 	and.w	r2, r2, #3
 8000c0a:	0092      	lsls	r2, r2, #2
 8000c0c:	4093      	lsls	r3, r2
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c14:	493a      	ldr	r1, [pc, #232]	; (8000d00 <HAL_GPIO_Init+0x29c>)
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c2e:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4938      	ldr	r1, [pc, #224]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]
 8000c3a:	e006      	b.n	8000c4a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c3c:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	4933      	ldr	r1, [pc, #204]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c46:	4013      	ands	r3, r2
 8000c48:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	492e      	ldr	r1, [pc, #184]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	604b      	str	r3, [r1, #4]
 8000c62:	e006      	b.n	8000c72 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	4929      	ldr	r1, [pc, #164]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c6e:	4013      	ands	r3, r2
 8000c70:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d006      	beq.n	8000c8c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	4924      	ldr	r1, [pc, #144]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	608b      	str	r3, [r1, #8]
 8000c8a:	e006      	b.n	8000c9a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	491f      	ldr	r1, [pc, #124]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d006      	beq.n	8000cb4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	491a      	ldr	r1, [pc, #104]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60cb      	str	r3, [r1, #12]
 8000cb2:	e006      	b.n	8000cc2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	4915      	ldr	r1, [pc, #84]	; (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f47f aed0 	bne.w	8000a78 <HAL_GPIO_Init+0x14>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	372c      	adds	r7, #44	; 0x2c
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	10210000 	.word	0x10210000
 8000ce8:	10110000 	.word	0x10110000
 8000cec:	10120000 	.word	0x10120000
 8000cf0:	10310000 	.word	0x10310000
 8000cf4:	10320000 	.word	0x10320000
 8000cf8:	10220000 	.word	0x10220000
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010000 	.word	0x40010000
 8000d04:	40010800 	.word	0x40010800
 8000d08:	40010c00 	.word	0x40010c00
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	40011400 	.word	0x40011400
 8000d14:	40010400 	.word	0x40010400

08000d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
 8000d24:	4613      	mov	r3, r2
 8000d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d28:	787b      	ldrb	r3, [r7, #1]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d2e:	887a      	ldrh	r2, [r7, #2]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d34:	e003      	b.n	8000d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	041a      	lsls	r2, r3, #16
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	611a      	str	r2, [r3, #16]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d54:	695a      	ldr	r2, [r3, #20]
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d006      	beq.n	8000d6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f806 	bl	8000d78 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40010400 	.word	0x40010400

08000d78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e26c      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 8087 	beq.w	8000eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dac:	4b92      	ldr	r3, [pc, #584]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d00c      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db8:	4b8f      	ldr	r3, [pc, #572]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	d112      	bne.n	8000dea <HAL_RCC_OscConfig+0x5e>
 8000dc4:	4b8c      	ldr	r3, [pc, #560]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd0:	d10b      	bne.n	8000dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd2:	4b89      	ldr	r3, [pc, #548]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d06c      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x12c>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d168      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e246      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df2:	d106      	bne.n	8000e02 <HAL_RCC_OscConfig+0x76>
 8000df4:	4b80      	ldr	r3, [pc, #512]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a7f      	ldr	r2, [pc, #508]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e02e      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0x98>
 8000e0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a7a      	ldr	r2, [pc, #488]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	4b78      	ldr	r3, [pc, #480]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a77      	ldr	r2, [pc, #476]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e01d      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0xbc>
 8000e2e:	4b72      	ldr	r3, [pc, #456]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a71      	ldr	r2, [pc, #452]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b6f      	ldr	r3, [pc, #444]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a6e      	ldr	r2, [pc, #440]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e00b      	b.n	8000e60 <HAL_RCC_OscConfig+0xd4>
 8000e48:	4b6b      	ldr	r3, [pc, #428]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a6a      	ldr	r2, [pc, #424]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a67      	ldr	r2, [pc, #412]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d013      	beq.n	8000e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e68:	f7ff fce4 	bl	8000834 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e70:	f7ff fce0 	bl	8000834 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b64      	cmp	r3, #100	; 0x64
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e1fa      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e82:	4b5d      	ldr	r3, [pc, #372]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f0      	beq.n	8000e70 <HAL_RCC_OscConfig+0xe4>
 8000e8e:	e014      	b.n	8000eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fcd0 	bl	8000834 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fccc 	bl	8000834 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	; 0x64
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e1e6      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eaa:	4b53      	ldr	r3, [pc, #332]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x10c>
 8000eb6:	e000      	b.n	8000eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d063      	beq.n	8000f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ec6:	4b4c      	ldr	r3, [pc, #304]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ed2:	4b49      	ldr	r3, [pc, #292]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d11c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x18c>
 8000ede:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d116      	bne.n	8000f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eea:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <HAL_RCC_OscConfig+0x176>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d001      	beq.n	8000f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e1ba      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f02:	4b3d      	ldr	r3, [pc, #244]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4939      	ldr	r1, [pc, #228]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	e03a      	b.n	8000f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d020      	beq.n	8000f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <HAL_RCC_OscConfig+0x270>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fc85 	bl	8000834 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f2e:	f7ff fc81 	bl	8000834 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e19b      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4927      	ldr	r1, [pc, #156]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
 8000f60:	e015      	b.n	8000f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_RCC_OscConfig+0x270>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc64 	bl	8000834 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff fc60 	bl	8000834 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e17a      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f0      	bne.n	8000f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d03a      	beq.n	8001010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d019      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_RCC_OscConfig+0x274>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fc44 	bl	8000834 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fc40 	bl	8000834 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e15a      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 fada 	bl	8001588 <RCC_Delay>
 8000fd4:	e01c      	b.n	8001010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_RCC_OscConfig+0x274>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fc2a 	bl	8000834 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe2:	e00f      	b.n	8001004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fc26 	bl	8000834 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d908      	bls.n	8001004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e140      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	42420000 	.word	0x42420000
 8001000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001004:	4b9e      	ldr	r3, [pc, #632]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1e9      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80a6 	beq.w	800116a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001022:	4b97      	ldr	r3, [pc, #604]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10d      	bne.n	800104a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b94      	ldr	r3, [pc, #592]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a93      	ldr	r2, [pc, #588]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b91      	ldr	r3, [pc, #580]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001046:	2301      	movs	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104a:	4b8e      	ldr	r3, [pc, #568]	; (8001284 <HAL_RCC_OscConfig+0x4f8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001052:	2b00      	cmp	r3, #0
 8001054:	d118      	bne.n	8001088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001056:	4b8b      	ldr	r3, [pc, #556]	; (8001284 <HAL_RCC_OscConfig+0x4f8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a8a      	ldr	r2, [pc, #552]	; (8001284 <HAL_RCC_OscConfig+0x4f8>)
 800105c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001062:	f7ff fbe7 	bl	8000834 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800106a:	f7ff fbe3 	bl	8000834 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b64      	cmp	r3, #100	; 0x64
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e0fd      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	4b81      	ldr	r3, [pc, #516]	; (8001284 <HAL_RCC_OscConfig+0x4f8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d106      	bne.n	800109e <HAL_RCC_OscConfig+0x312>
 8001090:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4a7a      	ldr	r2, [pc, #488]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6213      	str	r3, [r2, #32]
 800109c:	e02d      	b.n	80010fa <HAL_RCC_OscConfig+0x36e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x334>
 80010a6:	4b76      	ldr	r3, [pc, #472]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a75      	ldr	r2, [pc, #468]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	4b73      	ldr	r3, [pc, #460]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a72      	ldr	r2, [pc, #456]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	6213      	str	r3, [r2, #32]
 80010be:	e01c      	b.n	80010fa <HAL_RCC_OscConfig+0x36e>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d10c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x356>
 80010c8:	4b6d      	ldr	r3, [pc, #436]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	4a6c      	ldr	r2, [pc, #432]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6213      	str	r3, [r2, #32]
 80010d4:	4b6a      	ldr	r3, [pc, #424]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a69      	ldr	r2, [pc, #420]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	e00b      	b.n	80010fa <HAL_RCC_OscConfig+0x36e>
 80010e2:	4b67      	ldr	r3, [pc, #412]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4a66      	ldr	r2, [pc, #408]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	6213      	str	r3, [r2, #32]
 80010ee:	4b64      	ldr	r3, [pc, #400]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a63      	ldr	r2, [pc, #396]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	f023 0304 	bic.w	r3, r3, #4
 80010f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d015      	beq.n	800112e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001102:	f7ff fb97 	bl	8000834 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800110a:	f7ff fb93 	bl	8000834 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f241 3288 	movw	r2, #5000	; 0x1388
 8001118:	4293      	cmp	r3, r2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e0ab      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001120:	4b57      	ldr	r3, [pc, #348]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0ee      	beq.n	800110a <HAL_RCC_OscConfig+0x37e>
 800112c:	e014      	b.n	8001158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fb81 	bl	8000834 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001134:	e00a      	b.n	800114c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f7ff fb7d 	bl	8000834 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f241 3288 	movw	r2, #5000	; 0x1388
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e095      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800114c:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1ee      	bne.n	8001136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d105      	bne.n	800116a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800115e:	4b48      	ldr	r3, [pc, #288]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a47      	ldr	r2, [pc, #284]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8081 	beq.w	8001276 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001174:	4b42      	ldr	r3, [pc, #264]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b08      	cmp	r3, #8
 800117e:	d061      	beq.n	8001244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d146      	bne.n	8001216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001188:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <HAL_RCC_OscConfig+0x4fc>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fb51 	bl	8000834 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001196:	f7ff fb4d 	bl	8000834 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e067      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a8:	4b35      	ldr	r3, [pc, #212]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d108      	bne.n	80011d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011be:	4b30      	ldr	r3, [pc, #192]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	492d      	ldr	r1, [pc, #180]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a19      	ldr	r1, [r3, #32]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	430b      	orrs	r3, r1
 80011e2:	4927      	ldr	r1, [pc, #156]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_RCC_OscConfig+0x4fc>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fb21 	bl	8000834 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f6:	f7ff fb1d 	bl	8000834 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e037      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x46a>
 8001214:	e02f      	b.n	8001276 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_RCC_OscConfig+0x4fc>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fb0a 	bl	8000834 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001224:	f7ff fb06 	bl	8000834 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e020      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x498>
 8001242:	e018      	b.n	8001276 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e013      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_OscConfig+0x4f4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	429a      	cmp	r2, r3
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800126e:	429a      	cmp	r2, r3
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	40007000 	.word	0x40007000
 8001288:	42420060 	.word	0x42420060

0800128c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0d0      	b.n	8001442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012a0:	4b6a      	ldr	r3, [pc, #424]	; (800144c <HAL_RCC_ClockConfig+0x1c0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d910      	bls.n	80012d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ae:	4b67      	ldr	r3, [pc, #412]	; (800144c <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 0207 	bic.w	r2, r3, #7
 80012b6:	4965      	ldr	r1, [pc, #404]	; (800144c <HAL_RCC_ClockConfig+0x1c0>)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012be:	4b63      	ldr	r3, [pc, #396]	; (800144c <HAL_RCC_ClockConfig+0x1c0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0b8      	b.n	8001442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d020      	beq.n	800131e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012e8:	4b59      	ldr	r3, [pc, #356]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4a58      	ldr	r2, [pc, #352]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 80012ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001300:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a52      	ldr	r2, [pc, #328]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800130a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800130c:	4b50      	ldr	r3, [pc, #320]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	494d      	ldr	r1, [pc, #308]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	4313      	orrs	r3, r2
 800131c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d040      	beq.n	80013ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d107      	bne.n	8001342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b47      	ldr	r3, [pc, #284]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d115      	bne.n	800136a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e07f      	b.n	8001442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d107      	bne.n	800135a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134a:	4b41      	ldr	r3, [pc, #260]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e073      	b.n	8001442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e06b      	b.n	8001442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f023 0203 	bic.w	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4936      	ldr	r1, [pc, #216]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800137c:	f7ff fa5a 	bl	8000834 <HAL_GetTick>
 8001380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001382:	e00a      	b.n	800139a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001384:	f7ff fa56 	bl	8000834 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001392:	4293      	cmp	r3, r2
 8001394:	d901      	bls.n	800139a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e053      	b.n	8001442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 020c 	and.w	r2, r3, #12
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d1eb      	bne.n	8001384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_RCC_ClockConfig+0x1c0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d210      	bcs.n	80013dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 0207 	bic.w	r2, r3, #7
 80013c2:	4922      	ldr	r1, [pc, #136]	; (800144c <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e032      	b.n	8001442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d008      	beq.n	80013fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4916      	ldr	r1, [pc, #88]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d009      	beq.n	800141a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	490e      	ldr	r1, [pc, #56]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	4313      	orrs	r3, r2
 8001418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800141a:	f000 f821 	bl	8001460 <HAL_RCC_GetSysClockFreq>
 800141e:	4601      	mov	r1, r0
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_RCC_ClockConfig+0x1c8>)
 800142c:	5cd3      	ldrb	r3, [r2, r3]
 800142e:	fa21 f303 	lsr.w	r3, r1, r3
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <HAL_RCC_ClockConfig+0x1cc>)
 8001434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_RCC_ClockConfig+0x1d0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f9b8 	bl	80007b0 <HAL_InitTick>

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40022000 	.word	0x40022000
 8001450:	40021000 	.word	0x40021000
 8001454:	08002860 	.word	0x08002860
 8001458:	20000000 	.word	0x20000000
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001460:	b490      	push	{r4, r7}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001468:	1d3c      	adds	r4, r7, #4
 800146a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800148a:	4b23      	ldr	r3, [pc, #140]	; (8001518 <HAL_RCC_GetSysClockFreq+0xb8>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d002      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0x40>
 800149a:	2b08      	cmp	r3, #8
 800149c:	d003      	beq.n	80014a6 <HAL_RCC_GetSysClockFreq+0x46>
 800149e:	e02d      	b.n	80014fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014a0:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014a2:	623b      	str	r3, [r7, #32]
      break;
 80014a4:	e02d      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	0c9b      	lsrs	r3, r3, #18
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014b2:	4413      	add	r3, r2
 80014b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	0c5b      	lsrs	r3, r3, #17
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014d2:	4413      	add	r3, r2
 80014d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014de:	fb02 f203 	mul.w	r2, r2, r3
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ea:	e004      	b.n	80014f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4a0c      	ldr	r2, [pc, #48]	; (8001520 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	623b      	str	r3, [r7, #32]
      break;
 80014fa:	e002      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014fe:	623b      	str	r3, [r7, #32]
      break;
 8001500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001502:	6a3b      	ldr	r3, [r7, #32]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bc90      	pop	{r4, r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	0800284c 	.word	0x0800284c
 8001514:	0800285c 	.word	0x0800285c
 8001518:	40021000 	.word	0x40021000
 800151c:	007a1200 	.word	0x007a1200
 8001520:	003d0900 	.word	0x003d0900

08001524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001528:	4b02      	ldr	r3, [pc, #8]	; (8001534 <HAL_RCC_GetHCLKFreq+0x10>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	20000000 	.word	0x20000000

08001538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800153c:	f7ff fff2 	bl	8001524 <HAL_RCC_GetHCLKFreq>
 8001540:	4601      	mov	r1, r0
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	4a03      	ldr	r2, [pc, #12]	; (800155c <HAL_RCC_GetPCLK1Freq+0x24>)
 800154e:	5cd3      	ldrb	r3, [r2, r3]
 8001550:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001554:	4618      	mov	r0, r3
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000
 800155c:	08002870 	.word	0x08002870

08001560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001564:	f7ff ffde 	bl	8001524 <HAL_RCC_GetHCLKFreq>
 8001568:	4601      	mov	r1, r0
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	0adb      	lsrs	r3, r3, #11
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	4a03      	ldr	r2, [pc, #12]	; (8001584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	fa21 f303 	lsr.w	r3, r1, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000
 8001584:	08002870 	.word	0x08002870

08001588 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <RCC_Delay+0x34>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <RCC_Delay+0x38>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	0a5b      	lsrs	r3, r3, #9
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015a4:	bf00      	nop
  }
  while (Delay --);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	60fa      	str	r2, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f9      	bne.n	80015a4 <RCC_Delay+0x1c>
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000000 	.word	0x20000000
 80015c0:	10624dd3 	.word	0x10624dd3

080015c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e03f      	b.n	8001656 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff f80e 	bl	800060c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2224      	movs	r2, #36	; 0x24
 80015f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f90b 	bl	8001824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800161c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800162c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800163c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2220      	movs	r2, #32
 8001648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b088      	sub	sp, #32
 8001662:	af02      	add	r7, sp, #8
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4613      	mov	r3, r2
 800166c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b20      	cmp	r3, #32
 800167c:	f040 8083 	bne.w	8001786 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <HAL_UART_Transmit+0x2e>
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e07b      	b.n	8001788 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_UART_Transmit+0x40>
 800169a:	2302      	movs	r3, #2
 800169c:	e074      	b.n	8001788 <HAL_UART_Transmit+0x12a>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2221      	movs	r2, #33	; 0x21
 80016b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80016b4:	f7ff f8be 	bl	8000834 <HAL_GetTick>
 80016b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	88fa      	ldrh	r2, [r7, #6]
 80016be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	88fa      	ldrh	r2, [r7, #6]
 80016c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016c6:	e042      	b.n	800174e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016de:	d122      	bne.n	8001726 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2200      	movs	r2, #0
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f850 	bl	8001790 <UART_WaitOnFlagUntilTimeout>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e046      	b.n	8001788 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800170c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3302      	adds	r3, #2
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	e017      	b.n	800174e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3301      	adds	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	e013      	b.n	800174e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2200      	movs	r2, #0
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f82d 	bl	8001790 <UART_WaitOnFlagUntilTimeout>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e023      	b.n	8001788 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	60ba      	str	r2, [r7, #8]
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001752:	b29b      	uxth	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1b7      	bne.n	80016c8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2200      	movs	r2, #0
 8001760:	2140      	movs	r1, #64	; 0x40
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f814 	bl	8001790 <UART_WaitOnFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e00a      	b.n	8001788 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2220      	movs	r2, #32
 8001776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001786:	2302      	movs	r3, #2
  }
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	4613      	mov	r3, r2
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017a0:	e02c      	b.n	80017fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d028      	beq.n	80017fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80017b0:	f7ff f840 	bl	8000834 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d21d      	bcs.n	80017fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2220      	movs	r2, #32
 80017e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2220      	movs	r2, #32
 80017ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e00f      	b.n	800181c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	4013      	ands	r3, r2
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	429a      	cmp	r2, r3
 800180a:	bf0c      	ite	eq
 800180c:	2301      	moveq	r3, #1
 800180e:	2300      	movne	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	429a      	cmp	r2, r3
 8001818:	d0c3      	beq.n	80017a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	4313      	orrs	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800185e:	f023 030c 	bic.w	r3, r3, #12
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	430b      	orrs	r3, r1
 800186a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <UART_SetConfig+0x1ac>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d14e      	bne.n	800192a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800188c:	f7ff fe68 	bl	8001560 <HAL_RCC_GetPCLK2Freq>
 8001890:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	009a      	lsls	r2, r3, #2
 800189c:	441a      	add	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	4a4a      	ldr	r2, [pc, #296]	; (80019d4 <UART_SetConfig+0x1b0>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	0119      	lsls	r1, r3, #4
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009a      	lsls	r2, r3, #2
 80018bc:	441a      	add	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018c8:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <UART_SetConfig+0x1b0>)
 80018ca:	fba3 0302 	umull	r0, r3, r3, r2
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2064      	movs	r0, #100	; 0x64
 80018d2:	fb00 f303 	mul.w	r3, r0, r3
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	3332      	adds	r3, #50	; 0x32
 80018dc:	4a3d      	ldr	r2, [pc, #244]	; (80019d4 <UART_SetConfig+0x1b0>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e8:	4419      	add	r1, r3
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	009a      	lsls	r2, r3, #2
 80018f4:	441a      	add	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001900:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <UART_SetConfig+0x1b0>)
 8001902:	fba3 0302 	umull	r0, r3, r3, r2
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2064      	movs	r0, #100	; 0x64
 800190a:	fb00 f303 	mul.w	r3, r0, r3
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	3332      	adds	r3, #50	; 0x32
 8001914:	4a2f      	ldr	r2, [pc, #188]	; (80019d4 <UART_SetConfig+0x1b0>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	f003 020f 	and.w	r2, r3, #15
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	440a      	add	r2, r1
 8001926:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001928:	e04d      	b.n	80019c6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800192a:	f7ff fe05 	bl	8001538 <HAL_RCC_GetPCLK1Freq>
 800192e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	009a      	lsls	r2, r3, #2
 800193a:	441a      	add	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <UART_SetConfig+0x1b0>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	0119      	lsls	r1, r3, #4
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	009a      	lsls	r2, r3, #2
 800195a:	441a      	add	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	fbb2 f2f3 	udiv	r2, r2, r3
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <UART_SetConfig+0x1b0>)
 8001968:	fba3 0302 	umull	r0, r3, r3, r2
 800196c:	095b      	lsrs	r3, r3, #5
 800196e:	2064      	movs	r0, #100	; 0x64
 8001970:	fb00 f303 	mul.w	r3, r0, r3
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	3332      	adds	r3, #50	; 0x32
 800197a:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <UART_SetConfig+0x1b0>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	095b      	lsrs	r3, r3, #5
 8001982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001986:	4419      	add	r1, r3
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	009a      	lsls	r2, r3, #2
 8001992:	441a      	add	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	fbb2 f2f3 	udiv	r2, r2, r3
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <UART_SetConfig+0x1b0>)
 80019a0:	fba3 0302 	umull	r0, r3, r3, r2
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	2064      	movs	r0, #100	; 0x64
 80019a8:	fb00 f303 	mul.w	r3, r0, r3
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	3332      	adds	r3, #50	; 0x32
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <UART_SetConfig+0x1b0>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	f003 020f 	and.w	r2, r3, #15
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	440a      	add	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40013800 	.word	0x40013800
 80019d4:	51eb851f 	.word	0x51eb851f

080019d8 <__errno>:
 80019d8:	4b01      	ldr	r3, [pc, #4]	; (80019e0 <__errno+0x8>)
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	2000000c 	.word	0x2000000c

080019e4 <__libc_init_array>:
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	2500      	movs	r5, #0
 80019e8:	4e0c      	ldr	r6, [pc, #48]	; (8001a1c <__libc_init_array+0x38>)
 80019ea:	4c0d      	ldr	r4, [pc, #52]	; (8001a20 <__libc_init_array+0x3c>)
 80019ec:	1ba4      	subs	r4, r4, r6
 80019ee:	10a4      	asrs	r4, r4, #2
 80019f0:	42a5      	cmp	r5, r4
 80019f2:	d109      	bne.n	8001a08 <__libc_init_array+0x24>
 80019f4:	f000 ff10 	bl	8002818 <_init>
 80019f8:	2500      	movs	r5, #0
 80019fa:	4e0a      	ldr	r6, [pc, #40]	; (8001a24 <__libc_init_array+0x40>)
 80019fc:	4c0a      	ldr	r4, [pc, #40]	; (8001a28 <__libc_init_array+0x44>)
 80019fe:	1ba4      	subs	r4, r4, r6
 8001a00:	10a4      	asrs	r4, r4, #2
 8001a02:	42a5      	cmp	r5, r4
 8001a04:	d105      	bne.n	8001a12 <__libc_init_array+0x2e>
 8001a06:	bd70      	pop	{r4, r5, r6, pc}
 8001a08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a0c:	4798      	blx	r3
 8001a0e:	3501      	adds	r5, #1
 8001a10:	e7ee      	b.n	80019f0 <__libc_init_array+0xc>
 8001a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a16:	4798      	blx	r3
 8001a18:	3501      	adds	r5, #1
 8001a1a:	e7f2      	b.n	8001a02 <__libc_init_array+0x1e>
 8001a1c:	08002910 	.word	0x08002910
 8001a20:	08002910 	.word	0x08002910
 8001a24:	08002910 	.word	0x08002910
 8001a28:	08002914 	.word	0x08002914

08001a2c <memset>:
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4402      	add	r2, r0
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d100      	bne.n	8001a36 <memset+0xa>
 8001a34:	4770      	bx	lr
 8001a36:	f803 1b01 	strb.w	r1, [r3], #1
 8001a3a:	e7f9      	b.n	8001a30 <memset+0x4>

08001a3c <iprintf>:
 8001a3c:	b40f      	push	{r0, r1, r2, r3}
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <iprintf+0x2c>)
 8001a40:	b513      	push	{r0, r1, r4, lr}
 8001a42:	681c      	ldr	r4, [r3, #0]
 8001a44:	b124      	cbz	r4, 8001a50 <iprintf+0x14>
 8001a46:	69a3      	ldr	r3, [r4, #24]
 8001a48:	b913      	cbnz	r3, 8001a50 <iprintf+0x14>
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f000 f84e 	bl	8001aec <__sinit>
 8001a50:	ab05      	add	r3, sp, #20
 8001a52:	9a04      	ldr	r2, [sp, #16]
 8001a54:	68a1      	ldr	r1, [r4, #8]
 8001a56:	4620      	mov	r0, r4
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	f000 f953 	bl	8001d04 <_vfiprintf_r>
 8001a5e:	b002      	add	sp, #8
 8001a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a64:	b004      	add	sp, #16
 8001a66:	4770      	bx	lr
 8001a68:	2000000c 	.word	0x2000000c

08001a6c <std>:
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	b510      	push	{r4, lr}
 8001a70:	4604      	mov	r4, r0
 8001a72:	e9c0 3300 	strd	r3, r3, [r0]
 8001a76:	6083      	str	r3, [r0, #8]
 8001a78:	8181      	strh	r1, [r0, #12]
 8001a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8001a7c:	81c2      	strh	r2, [r0, #14]
 8001a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a82:	6183      	str	r3, [r0, #24]
 8001a84:	4619      	mov	r1, r3
 8001a86:	2208      	movs	r2, #8
 8001a88:	305c      	adds	r0, #92	; 0x5c
 8001a8a:	f7ff ffcf 	bl	8001a2c <memset>
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <std+0x38>)
 8001a90:	6224      	str	r4, [r4, #32]
 8001a92:	6263      	str	r3, [r4, #36]	; 0x24
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <std+0x3c>)
 8001a96:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <std+0x40>)
 8001a9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <std+0x44>)
 8001a9e:	6323      	str	r3, [r4, #48]	; 0x30
 8001aa0:	bd10      	pop	{r4, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08002261 	.word	0x08002261
 8001aa8:	08002283 	.word	0x08002283
 8001aac:	080022bb 	.word	0x080022bb
 8001ab0:	080022df 	.word	0x080022df

08001ab4 <_cleanup_r>:
 8001ab4:	4901      	ldr	r1, [pc, #4]	; (8001abc <_cleanup_r+0x8>)
 8001ab6:	f000 b885 	b.w	8001bc4 <_fwalk_reent>
 8001aba:	bf00      	nop
 8001abc:	080025b9 	.word	0x080025b9

08001ac0 <__sfmoreglue>:
 8001ac0:	b570      	push	{r4, r5, r6, lr}
 8001ac2:	2568      	movs	r5, #104	; 0x68
 8001ac4:	1e4a      	subs	r2, r1, #1
 8001ac6:	4355      	muls	r5, r2
 8001ac8:	460e      	mov	r6, r1
 8001aca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ace:	f000 f897 	bl	8001c00 <_malloc_r>
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	b140      	cbz	r0, 8001ae8 <__sfmoreglue+0x28>
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	e9c0 1600 	strd	r1, r6, [r0]
 8001adc:	300c      	adds	r0, #12
 8001ade:	60a0      	str	r0, [r4, #8]
 8001ae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ae4:	f7ff ffa2 	bl	8001a2c <memset>
 8001ae8:	4620      	mov	r0, r4
 8001aea:	bd70      	pop	{r4, r5, r6, pc}

08001aec <__sinit>:
 8001aec:	6983      	ldr	r3, [r0, #24]
 8001aee:	b510      	push	{r4, lr}
 8001af0:	4604      	mov	r4, r0
 8001af2:	bb33      	cbnz	r3, 8001b42 <__sinit+0x56>
 8001af4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001af8:	6503      	str	r3, [r0, #80]	; 0x50
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <__sinit+0x58>)
 8001afc:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <__sinit+0x5c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6282      	str	r2, [r0, #40]	; 0x28
 8001b02:	4298      	cmp	r0, r3
 8001b04:	bf04      	itt	eq
 8001b06:	2301      	moveq	r3, #1
 8001b08:	6183      	streq	r3, [r0, #24]
 8001b0a:	f000 f81f 	bl	8001b4c <__sfp>
 8001b0e:	6060      	str	r0, [r4, #4]
 8001b10:	4620      	mov	r0, r4
 8001b12:	f000 f81b 	bl	8001b4c <__sfp>
 8001b16:	60a0      	str	r0, [r4, #8]
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f000 f817 	bl	8001b4c <__sfp>
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60e0      	str	r0, [r4, #12]
 8001b22:	2104      	movs	r1, #4
 8001b24:	6860      	ldr	r0, [r4, #4]
 8001b26:	f7ff ffa1 	bl	8001a6c <std>
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2109      	movs	r1, #9
 8001b2e:	68a0      	ldr	r0, [r4, #8]
 8001b30:	f7ff ff9c 	bl	8001a6c <std>
 8001b34:	2202      	movs	r2, #2
 8001b36:	2112      	movs	r1, #18
 8001b38:	68e0      	ldr	r0, [r4, #12]
 8001b3a:	f7ff ff97 	bl	8001a6c <std>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61a3      	str	r3, [r4, #24]
 8001b42:	bd10      	pop	{r4, pc}
 8001b44:	08002878 	.word	0x08002878
 8001b48:	08001ab5 	.word	0x08001ab5

08001b4c <__sfp>:
 8001b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <__sfp+0x70>)
 8001b50:	4607      	mov	r7, r0
 8001b52:	681e      	ldr	r6, [r3, #0]
 8001b54:	69b3      	ldr	r3, [r6, #24]
 8001b56:	b913      	cbnz	r3, 8001b5e <__sfp+0x12>
 8001b58:	4630      	mov	r0, r6
 8001b5a:	f7ff ffc7 	bl	8001aec <__sinit>
 8001b5e:	3648      	adds	r6, #72	; 0x48
 8001b60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	d503      	bpl.n	8001b70 <__sfp+0x24>
 8001b68:	6833      	ldr	r3, [r6, #0]
 8001b6a:	b133      	cbz	r3, 8001b7a <__sfp+0x2e>
 8001b6c:	6836      	ldr	r6, [r6, #0]
 8001b6e:	e7f7      	b.n	8001b60 <__sfp+0x14>
 8001b70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001b74:	b16d      	cbz	r5, 8001b92 <__sfp+0x46>
 8001b76:	3468      	adds	r4, #104	; 0x68
 8001b78:	e7f4      	b.n	8001b64 <__sfp+0x18>
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	4638      	mov	r0, r7
 8001b7e:	f7ff ff9f 	bl	8001ac0 <__sfmoreglue>
 8001b82:	6030      	str	r0, [r6, #0]
 8001b84:	2800      	cmp	r0, #0
 8001b86:	d1f1      	bne.n	8001b6c <__sfp+0x20>
 8001b88:	230c      	movs	r3, #12
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	4620      	mov	r0, r4
 8001b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <__sfp+0x74>)
 8001b94:	6665      	str	r5, [r4, #100]	; 0x64
 8001b96:	e9c4 5500 	strd	r5, r5, [r4]
 8001b9a:	60a5      	str	r5, [r4, #8]
 8001b9c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001ba0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001bac:	f7ff ff3e 	bl	8001a2c <memset>
 8001bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001bb8:	e7e9      	b.n	8001b8e <__sfp+0x42>
 8001bba:	bf00      	nop
 8001bbc:	08002878 	.word	0x08002878
 8001bc0:	ffff0001 	.word	0xffff0001

08001bc4 <_fwalk_reent>:
 8001bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bc8:	4680      	mov	r8, r0
 8001bca:	4689      	mov	r9, r1
 8001bcc:	2600      	movs	r6, #0
 8001bce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001bd2:	b914      	cbnz	r4, 8001bda <_fwalk_reent+0x16>
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bda:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001bde:	3f01      	subs	r7, #1
 8001be0:	d501      	bpl.n	8001be6 <_fwalk_reent+0x22>
 8001be2:	6824      	ldr	r4, [r4, #0]
 8001be4:	e7f5      	b.n	8001bd2 <_fwalk_reent+0xe>
 8001be6:	89ab      	ldrh	r3, [r5, #12]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d907      	bls.n	8001bfc <_fwalk_reent+0x38>
 8001bec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	d003      	beq.n	8001bfc <_fwalk_reent+0x38>
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	4640      	mov	r0, r8
 8001bf8:	47c8      	blx	r9
 8001bfa:	4306      	orrs	r6, r0
 8001bfc:	3568      	adds	r5, #104	; 0x68
 8001bfe:	e7ee      	b.n	8001bde <_fwalk_reent+0x1a>

08001c00 <_malloc_r>:
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	1ccd      	adds	r5, r1, #3
 8001c04:	f025 0503 	bic.w	r5, r5, #3
 8001c08:	3508      	adds	r5, #8
 8001c0a:	2d0c      	cmp	r5, #12
 8001c0c:	bf38      	it	cc
 8001c0e:	250c      	movcc	r5, #12
 8001c10:	2d00      	cmp	r5, #0
 8001c12:	4606      	mov	r6, r0
 8001c14:	db01      	blt.n	8001c1a <_malloc_r+0x1a>
 8001c16:	42a9      	cmp	r1, r5
 8001c18:	d903      	bls.n	8001c22 <_malloc_r+0x22>
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	6033      	str	r3, [r6, #0]
 8001c1e:	2000      	movs	r0, #0
 8001c20:	bd70      	pop	{r4, r5, r6, pc}
 8001c22:	f000 fd77 	bl	8002714 <__malloc_lock>
 8001c26:	4a21      	ldr	r2, [pc, #132]	; (8001cac <_malloc_r+0xac>)
 8001c28:	6814      	ldr	r4, [r2, #0]
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	b991      	cbnz	r1, 8001c54 <_malloc_r+0x54>
 8001c2e:	4c20      	ldr	r4, [pc, #128]	; (8001cb0 <_malloc_r+0xb0>)
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	b91b      	cbnz	r3, 8001c3c <_malloc_r+0x3c>
 8001c34:	4630      	mov	r0, r6
 8001c36:	f000 fb03 	bl	8002240 <_sbrk_r>
 8001c3a:	6020      	str	r0, [r4, #0]
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	4630      	mov	r0, r6
 8001c40:	f000 fafe 	bl	8002240 <_sbrk_r>
 8001c44:	1c43      	adds	r3, r0, #1
 8001c46:	d124      	bne.n	8001c92 <_malloc_r+0x92>
 8001c48:	230c      	movs	r3, #12
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	6033      	str	r3, [r6, #0]
 8001c4e:	f000 fd62 	bl	8002716 <__malloc_unlock>
 8001c52:	e7e4      	b.n	8001c1e <_malloc_r+0x1e>
 8001c54:	680b      	ldr	r3, [r1, #0]
 8001c56:	1b5b      	subs	r3, r3, r5
 8001c58:	d418      	bmi.n	8001c8c <_malloc_r+0x8c>
 8001c5a:	2b0b      	cmp	r3, #11
 8001c5c:	d90f      	bls.n	8001c7e <_malloc_r+0x7e>
 8001c5e:	600b      	str	r3, [r1, #0]
 8001c60:	18cc      	adds	r4, r1, r3
 8001c62:	50cd      	str	r5, [r1, r3]
 8001c64:	4630      	mov	r0, r6
 8001c66:	f000 fd56 	bl	8002716 <__malloc_unlock>
 8001c6a:	f104 000b 	add.w	r0, r4, #11
 8001c6e:	1d23      	adds	r3, r4, #4
 8001c70:	f020 0007 	bic.w	r0, r0, #7
 8001c74:	1ac3      	subs	r3, r0, r3
 8001c76:	d0d3      	beq.n	8001c20 <_malloc_r+0x20>
 8001c78:	425a      	negs	r2, r3
 8001c7a:	50e2      	str	r2, [r4, r3]
 8001c7c:	e7d0      	b.n	8001c20 <_malloc_r+0x20>
 8001c7e:	684b      	ldr	r3, [r1, #4]
 8001c80:	428c      	cmp	r4, r1
 8001c82:	bf16      	itet	ne
 8001c84:	6063      	strne	r3, [r4, #4]
 8001c86:	6013      	streq	r3, [r2, #0]
 8001c88:	460c      	movne	r4, r1
 8001c8a:	e7eb      	b.n	8001c64 <_malloc_r+0x64>
 8001c8c:	460c      	mov	r4, r1
 8001c8e:	6849      	ldr	r1, [r1, #4]
 8001c90:	e7cc      	b.n	8001c2c <_malloc_r+0x2c>
 8001c92:	1cc4      	adds	r4, r0, #3
 8001c94:	f024 0403 	bic.w	r4, r4, #3
 8001c98:	42a0      	cmp	r0, r4
 8001c9a:	d005      	beq.n	8001ca8 <_malloc_r+0xa8>
 8001c9c:	1a21      	subs	r1, r4, r0
 8001c9e:	4630      	mov	r0, r6
 8001ca0:	f000 face 	bl	8002240 <_sbrk_r>
 8001ca4:	3001      	adds	r0, #1
 8001ca6:	d0cf      	beq.n	8001c48 <_malloc_r+0x48>
 8001ca8:	6025      	str	r5, [r4, #0]
 8001caa:	e7db      	b.n	8001c64 <_malloc_r+0x64>
 8001cac:	20000090 	.word	0x20000090
 8001cb0:	20000094 	.word	0x20000094

08001cb4 <__sfputc_r>:
 8001cb4:	6893      	ldr	r3, [r2, #8]
 8001cb6:	b410      	push	{r4}
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	6093      	str	r3, [r2, #8]
 8001cbe:	da07      	bge.n	8001cd0 <__sfputc_r+0x1c>
 8001cc0:	6994      	ldr	r4, [r2, #24]
 8001cc2:	42a3      	cmp	r3, r4
 8001cc4:	db01      	blt.n	8001cca <__sfputc_r+0x16>
 8001cc6:	290a      	cmp	r1, #10
 8001cc8:	d102      	bne.n	8001cd0 <__sfputc_r+0x1c>
 8001cca:	bc10      	pop	{r4}
 8001ccc:	f000 bb0c 	b.w	80022e8 <__swbuf_r>
 8001cd0:	6813      	ldr	r3, [r2, #0]
 8001cd2:	1c58      	adds	r0, r3, #1
 8001cd4:	6010      	str	r0, [r2, #0]
 8001cd6:	7019      	strb	r1, [r3, #0]
 8001cd8:	4608      	mov	r0, r1
 8001cda:	bc10      	pop	{r4}
 8001cdc:	4770      	bx	lr

08001cde <__sfputs_r>:
 8001cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce0:	4606      	mov	r6, r0
 8001ce2:	460f      	mov	r7, r1
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	18d5      	adds	r5, r2, r3
 8001ce8:	42ac      	cmp	r4, r5
 8001cea:	d101      	bne.n	8001cf0 <__sfputs_r+0x12>
 8001cec:	2000      	movs	r0, #0
 8001cee:	e007      	b.n	8001d00 <__sfputs_r+0x22>
 8001cf0:	463a      	mov	r2, r7
 8001cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	f7ff ffdc 	bl	8001cb4 <__sfputc_r>
 8001cfc:	1c43      	adds	r3, r0, #1
 8001cfe:	d1f3      	bne.n	8001ce8 <__sfputs_r+0xa>
 8001d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d04 <_vfiprintf_r>:
 8001d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d08:	460c      	mov	r4, r1
 8001d0a:	b09d      	sub	sp, #116	; 0x74
 8001d0c:	4617      	mov	r7, r2
 8001d0e:	461d      	mov	r5, r3
 8001d10:	4606      	mov	r6, r0
 8001d12:	b118      	cbz	r0, 8001d1c <_vfiprintf_r+0x18>
 8001d14:	6983      	ldr	r3, [r0, #24]
 8001d16:	b90b      	cbnz	r3, 8001d1c <_vfiprintf_r+0x18>
 8001d18:	f7ff fee8 	bl	8001aec <__sinit>
 8001d1c:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <_vfiprintf_r+0x20c>)
 8001d1e:	429c      	cmp	r4, r3
 8001d20:	d158      	bne.n	8001dd4 <_vfiprintf_r+0xd0>
 8001d22:	6874      	ldr	r4, [r6, #4]
 8001d24:	89a3      	ldrh	r3, [r4, #12]
 8001d26:	0718      	lsls	r0, r3, #28
 8001d28:	d55e      	bpl.n	8001de8 <_vfiprintf_r+0xe4>
 8001d2a:	6923      	ldr	r3, [r4, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d05b      	beq.n	8001de8 <_vfiprintf_r+0xe4>
 8001d30:	2300      	movs	r3, #0
 8001d32:	9309      	str	r3, [sp, #36]	; 0x24
 8001d34:	2320      	movs	r3, #32
 8001d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d3a:	2330      	movs	r3, #48	; 0x30
 8001d3c:	f04f 0b01 	mov.w	fp, #1
 8001d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d44:	9503      	str	r5, [sp, #12]
 8001d46:	46b8      	mov	r8, r7
 8001d48:	4645      	mov	r5, r8
 8001d4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001d4e:	b10b      	cbz	r3, 8001d54 <_vfiprintf_r+0x50>
 8001d50:	2b25      	cmp	r3, #37	; 0x25
 8001d52:	d154      	bne.n	8001dfe <_vfiprintf_r+0xfa>
 8001d54:	ebb8 0a07 	subs.w	sl, r8, r7
 8001d58:	d00b      	beq.n	8001d72 <_vfiprintf_r+0x6e>
 8001d5a:	4653      	mov	r3, sl
 8001d5c:	463a      	mov	r2, r7
 8001d5e:	4621      	mov	r1, r4
 8001d60:	4630      	mov	r0, r6
 8001d62:	f7ff ffbc 	bl	8001cde <__sfputs_r>
 8001d66:	3001      	adds	r0, #1
 8001d68:	f000 80c2 	beq.w	8001ef0 <_vfiprintf_r+0x1ec>
 8001d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d6e:	4453      	add	r3, sl
 8001d70:	9309      	str	r3, [sp, #36]	; 0x24
 8001d72:	f898 3000 	ldrb.w	r3, [r8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80ba 	beq.w	8001ef0 <_vfiprintf_r+0x1ec>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d86:	9304      	str	r3, [sp, #16]
 8001d88:	9307      	str	r3, [sp, #28]
 8001d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8001d90:	46a8      	mov	r8, r5
 8001d92:	2205      	movs	r2, #5
 8001d94:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001d98:	485e      	ldr	r0, [pc, #376]	; (8001f14 <_vfiprintf_r+0x210>)
 8001d9a:	f000 fcad 	bl	80026f8 <memchr>
 8001d9e:	9b04      	ldr	r3, [sp, #16]
 8001da0:	bb78      	cbnz	r0, 8001e02 <_vfiprintf_r+0xfe>
 8001da2:	06d9      	lsls	r1, r3, #27
 8001da4:	bf44      	itt	mi
 8001da6:	2220      	movmi	r2, #32
 8001da8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001dac:	071a      	lsls	r2, r3, #28
 8001dae:	bf44      	itt	mi
 8001db0:	222b      	movmi	r2, #43	; 0x2b
 8001db2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001db6:	782a      	ldrb	r2, [r5, #0]
 8001db8:	2a2a      	cmp	r2, #42	; 0x2a
 8001dba:	d02a      	beq.n	8001e12 <_vfiprintf_r+0x10e>
 8001dbc:	46a8      	mov	r8, r5
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	250a      	movs	r5, #10
 8001dc2:	9a07      	ldr	r2, [sp, #28]
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dca:	3b30      	subs	r3, #48	; 0x30
 8001dcc:	2b09      	cmp	r3, #9
 8001dce:	d969      	bls.n	8001ea4 <_vfiprintf_r+0x1a0>
 8001dd0:	b360      	cbz	r0, 8001e2c <_vfiprintf_r+0x128>
 8001dd2:	e024      	b.n	8001e1e <_vfiprintf_r+0x11a>
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <_vfiprintf_r+0x214>)
 8001dd6:	429c      	cmp	r4, r3
 8001dd8:	d101      	bne.n	8001dde <_vfiprintf_r+0xda>
 8001dda:	68b4      	ldr	r4, [r6, #8]
 8001ddc:	e7a2      	b.n	8001d24 <_vfiprintf_r+0x20>
 8001dde:	4b4f      	ldr	r3, [pc, #316]	; (8001f1c <_vfiprintf_r+0x218>)
 8001de0:	429c      	cmp	r4, r3
 8001de2:	bf08      	it	eq
 8001de4:	68f4      	ldreq	r4, [r6, #12]
 8001de6:	e79d      	b.n	8001d24 <_vfiprintf_r+0x20>
 8001de8:	4621      	mov	r1, r4
 8001dea:	4630      	mov	r0, r6
 8001dec:	f000 fae0 	bl	80023b0 <__swsetup_r>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d09d      	beq.n	8001d30 <_vfiprintf_r+0x2c>
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	b01d      	add	sp, #116	; 0x74
 8001dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dfe:	46a8      	mov	r8, r5
 8001e00:	e7a2      	b.n	8001d48 <_vfiprintf_r+0x44>
 8001e02:	4a44      	ldr	r2, [pc, #272]	; (8001f14 <_vfiprintf_r+0x210>)
 8001e04:	4645      	mov	r5, r8
 8001e06:	1a80      	subs	r0, r0, r2
 8001e08:	fa0b f000 	lsl.w	r0, fp, r0
 8001e0c:	4318      	orrs	r0, r3
 8001e0e:	9004      	str	r0, [sp, #16]
 8001e10:	e7be      	b.n	8001d90 <_vfiprintf_r+0x8c>
 8001e12:	9a03      	ldr	r2, [sp, #12]
 8001e14:	1d11      	adds	r1, r2, #4
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	9103      	str	r1, [sp, #12]
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	db01      	blt.n	8001e22 <_vfiprintf_r+0x11e>
 8001e1e:	9207      	str	r2, [sp, #28]
 8001e20:	e004      	b.n	8001e2c <_vfiprintf_r+0x128>
 8001e22:	4252      	negs	r2, r2
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	9207      	str	r2, [sp, #28]
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	f898 3000 	ldrb.w	r3, [r8]
 8001e30:	2b2e      	cmp	r3, #46	; 0x2e
 8001e32:	d10e      	bne.n	8001e52 <_vfiprintf_r+0x14e>
 8001e34:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001e38:	2b2a      	cmp	r3, #42	; 0x2a
 8001e3a:	d138      	bne.n	8001eae <_vfiprintf_r+0x1aa>
 8001e3c:	9b03      	ldr	r3, [sp, #12]
 8001e3e:	f108 0802 	add.w	r8, r8, #2
 8001e42:	1d1a      	adds	r2, r3, #4
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	9203      	str	r2, [sp, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bfb8      	it	lt
 8001e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e50:	9305      	str	r3, [sp, #20]
 8001e52:	4d33      	ldr	r5, [pc, #204]	; (8001f20 <_vfiprintf_r+0x21c>)
 8001e54:	2203      	movs	r2, #3
 8001e56:	f898 1000 	ldrb.w	r1, [r8]
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	f000 fc4c 	bl	80026f8 <memchr>
 8001e60:	b140      	cbz	r0, 8001e74 <_vfiprintf_r+0x170>
 8001e62:	2340      	movs	r3, #64	; 0x40
 8001e64:	1b40      	subs	r0, r0, r5
 8001e66:	fa03 f000 	lsl.w	r0, r3, r0
 8001e6a:	9b04      	ldr	r3, [sp, #16]
 8001e6c:	f108 0801 	add.w	r8, r8, #1
 8001e70:	4303      	orrs	r3, r0
 8001e72:	9304      	str	r3, [sp, #16]
 8001e74:	f898 1000 	ldrb.w	r1, [r8]
 8001e78:	2206      	movs	r2, #6
 8001e7a:	482a      	ldr	r0, [pc, #168]	; (8001f24 <_vfiprintf_r+0x220>)
 8001e7c:	f108 0701 	add.w	r7, r8, #1
 8001e80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e84:	f000 fc38 	bl	80026f8 <memchr>
 8001e88:	2800      	cmp	r0, #0
 8001e8a:	d037      	beq.n	8001efc <_vfiprintf_r+0x1f8>
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <_vfiprintf_r+0x224>)
 8001e8e:	bb1b      	cbnz	r3, 8001ed8 <_vfiprintf_r+0x1d4>
 8001e90:	9b03      	ldr	r3, [sp, #12]
 8001e92:	3307      	adds	r3, #7
 8001e94:	f023 0307 	bic.w	r3, r3, #7
 8001e98:	3308      	adds	r3, #8
 8001e9a:	9303      	str	r3, [sp, #12]
 8001e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e9e:	444b      	add	r3, r9
 8001ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ea2:	e750      	b.n	8001d46 <_vfiprintf_r+0x42>
 8001ea4:	fb05 3202 	mla	r2, r5, r2, r3
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	4688      	mov	r8, r1
 8001eac:	e78a      	b.n	8001dc4 <_vfiprintf_r+0xc0>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	250a      	movs	r5, #10
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f108 0801 	add.w	r8, r8, #1
 8001eb8:	9305      	str	r3, [sp, #20]
 8001eba:	4640      	mov	r0, r8
 8001ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ec0:	3a30      	subs	r2, #48	; 0x30
 8001ec2:	2a09      	cmp	r2, #9
 8001ec4:	d903      	bls.n	8001ece <_vfiprintf_r+0x1ca>
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0c3      	beq.n	8001e52 <_vfiprintf_r+0x14e>
 8001eca:	9105      	str	r1, [sp, #20]
 8001ecc:	e7c1      	b.n	8001e52 <_vfiprintf_r+0x14e>
 8001ece:	fb05 2101 	mla	r1, r5, r1, r2
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	4680      	mov	r8, r0
 8001ed6:	e7f0      	b.n	8001eba <_vfiprintf_r+0x1b6>
 8001ed8:	ab03      	add	r3, sp, #12
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	4622      	mov	r2, r4
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <_vfiprintf_r+0x228>)
 8001ee0:	a904      	add	r1, sp, #16
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001eec:	4681      	mov	r9, r0
 8001eee:	d1d5      	bne.n	8001e9c <_vfiprintf_r+0x198>
 8001ef0:	89a3      	ldrh	r3, [r4, #12]
 8001ef2:	065b      	lsls	r3, r3, #25
 8001ef4:	f53f af7e 	bmi.w	8001df4 <_vfiprintf_r+0xf0>
 8001ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001efa:	e77d      	b.n	8001df8 <_vfiprintf_r+0xf4>
 8001efc:	ab03      	add	r3, sp, #12
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	4622      	mov	r2, r4
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <_vfiprintf_r+0x228>)
 8001f04:	a904      	add	r1, sp, #16
 8001f06:	4630      	mov	r0, r6
 8001f08:	f000 f888 	bl	800201c <_printf_i>
 8001f0c:	e7ec      	b.n	8001ee8 <_vfiprintf_r+0x1e4>
 8001f0e:	bf00      	nop
 8001f10:	0800289c 	.word	0x0800289c
 8001f14:	080028dc 	.word	0x080028dc
 8001f18:	080028bc 	.word	0x080028bc
 8001f1c:	0800287c 	.word	0x0800287c
 8001f20:	080028e2 	.word	0x080028e2
 8001f24:	080028e6 	.word	0x080028e6
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	08001cdf 	.word	0x08001cdf

08001f30 <_printf_common>:
 8001f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f34:	4691      	mov	r9, r2
 8001f36:	461f      	mov	r7, r3
 8001f38:	688a      	ldr	r2, [r1, #8]
 8001f3a:	690b      	ldr	r3, [r1, #16]
 8001f3c:	4606      	mov	r6, r0
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	bfb8      	it	lt
 8001f42:	4613      	movlt	r3, r2
 8001f44:	f8c9 3000 	str.w	r3, [r9]
 8001f48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f4c:	460c      	mov	r4, r1
 8001f4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f52:	b112      	cbz	r2, 8001f5a <_printf_common+0x2a>
 8001f54:	3301      	adds	r3, #1
 8001f56:	f8c9 3000 	str.w	r3, [r9]
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	0699      	lsls	r1, r3, #26
 8001f5e:	bf42      	ittt	mi
 8001f60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001f64:	3302      	addmi	r3, #2
 8001f66:	f8c9 3000 	strmi.w	r3, [r9]
 8001f6a:	6825      	ldr	r5, [r4, #0]
 8001f6c:	f015 0506 	ands.w	r5, r5, #6
 8001f70:	d107      	bne.n	8001f82 <_printf_common+0x52>
 8001f72:	f104 0a19 	add.w	sl, r4, #25
 8001f76:	68e3      	ldr	r3, [r4, #12]
 8001f78:	f8d9 2000 	ldr.w	r2, [r9]
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	42ab      	cmp	r3, r5
 8001f80:	dc29      	bgt.n	8001fd6 <_printf_common+0xa6>
 8001f82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001f86:	6822      	ldr	r2, [r4, #0]
 8001f88:	3300      	adds	r3, #0
 8001f8a:	bf18      	it	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	0692      	lsls	r2, r2, #26
 8001f90:	d42e      	bmi.n	8001ff0 <_printf_common+0xc0>
 8001f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f96:	4639      	mov	r1, r7
 8001f98:	4630      	mov	r0, r6
 8001f9a:	47c0      	blx	r8
 8001f9c:	3001      	adds	r0, #1
 8001f9e:	d021      	beq.n	8001fe4 <_printf_common+0xb4>
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	68e5      	ldr	r5, [r4, #12]
 8001fa4:	f003 0306 	and.w	r3, r3, #6
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	bf18      	it	ne
 8001fac:	2500      	movne	r5, #0
 8001fae:	f8d9 2000 	ldr.w	r2, [r9]
 8001fb2:	f04f 0900 	mov.w	r9, #0
 8001fb6:	bf08      	it	eq
 8001fb8:	1aad      	subeq	r5, r5, r2
 8001fba:	68a3      	ldr	r3, [r4, #8]
 8001fbc:	6922      	ldr	r2, [r4, #16]
 8001fbe:	bf08      	it	eq
 8001fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	bfc4      	itt	gt
 8001fc8:	1a9b      	subgt	r3, r3, r2
 8001fca:	18ed      	addgt	r5, r5, r3
 8001fcc:	341a      	adds	r4, #26
 8001fce:	454d      	cmp	r5, r9
 8001fd0:	d11a      	bne.n	8002008 <_printf_common+0xd8>
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	e008      	b.n	8001fe8 <_printf_common+0xb8>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	4652      	mov	r2, sl
 8001fda:	4639      	mov	r1, r7
 8001fdc:	4630      	mov	r0, r6
 8001fde:	47c0      	blx	r8
 8001fe0:	3001      	adds	r0, #1
 8001fe2:	d103      	bne.n	8001fec <_printf_common+0xbc>
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fec:	3501      	adds	r5, #1
 8001fee:	e7c2      	b.n	8001f76 <_printf_common+0x46>
 8001ff0:	2030      	movs	r0, #48	; 0x30
 8001ff2:	18e1      	adds	r1, r4, r3
 8001ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ffe:	4422      	add	r2, r4
 8002000:	3302      	adds	r3, #2
 8002002:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002006:	e7c4      	b.n	8001f92 <_printf_common+0x62>
 8002008:	2301      	movs	r3, #1
 800200a:	4622      	mov	r2, r4
 800200c:	4639      	mov	r1, r7
 800200e:	4630      	mov	r0, r6
 8002010:	47c0      	blx	r8
 8002012:	3001      	adds	r0, #1
 8002014:	d0e6      	beq.n	8001fe4 <_printf_common+0xb4>
 8002016:	f109 0901 	add.w	r9, r9, #1
 800201a:	e7d8      	b.n	8001fce <_printf_common+0x9e>

0800201c <_printf_i>:
 800201c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002020:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002024:	460c      	mov	r4, r1
 8002026:	7e09      	ldrb	r1, [r1, #24]
 8002028:	b085      	sub	sp, #20
 800202a:	296e      	cmp	r1, #110	; 0x6e
 800202c:	4617      	mov	r7, r2
 800202e:	4606      	mov	r6, r0
 8002030:	4698      	mov	r8, r3
 8002032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002034:	f000 80b3 	beq.w	800219e <_printf_i+0x182>
 8002038:	d822      	bhi.n	8002080 <_printf_i+0x64>
 800203a:	2963      	cmp	r1, #99	; 0x63
 800203c:	d036      	beq.n	80020ac <_printf_i+0x90>
 800203e:	d80a      	bhi.n	8002056 <_printf_i+0x3a>
 8002040:	2900      	cmp	r1, #0
 8002042:	f000 80b9 	beq.w	80021b8 <_printf_i+0x19c>
 8002046:	2958      	cmp	r1, #88	; 0x58
 8002048:	f000 8083 	beq.w	8002152 <_printf_i+0x136>
 800204c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002050:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002054:	e032      	b.n	80020bc <_printf_i+0xa0>
 8002056:	2964      	cmp	r1, #100	; 0x64
 8002058:	d001      	beq.n	800205e <_printf_i+0x42>
 800205a:	2969      	cmp	r1, #105	; 0x69
 800205c:	d1f6      	bne.n	800204c <_printf_i+0x30>
 800205e:	6820      	ldr	r0, [r4, #0]
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	0605      	lsls	r5, r0, #24
 8002064:	f103 0104 	add.w	r1, r3, #4
 8002068:	d52a      	bpl.n	80020c0 <_printf_i+0xa4>
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6011      	str	r1, [r2, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	da03      	bge.n	800207a <_printf_i+0x5e>
 8002072:	222d      	movs	r2, #45	; 0x2d
 8002074:	425b      	negs	r3, r3
 8002076:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800207a:	486f      	ldr	r0, [pc, #444]	; (8002238 <_printf_i+0x21c>)
 800207c:	220a      	movs	r2, #10
 800207e:	e039      	b.n	80020f4 <_printf_i+0xd8>
 8002080:	2973      	cmp	r1, #115	; 0x73
 8002082:	f000 809d 	beq.w	80021c0 <_printf_i+0x1a4>
 8002086:	d808      	bhi.n	800209a <_printf_i+0x7e>
 8002088:	296f      	cmp	r1, #111	; 0x6f
 800208a:	d020      	beq.n	80020ce <_printf_i+0xb2>
 800208c:	2970      	cmp	r1, #112	; 0x70
 800208e:	d1dd      	bne.n	800204c <_printf_i+0x30>
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	f043 0320 	orr.w	r3, r3, #32
 8002096:	6023      	str	r3, [r4, #0]
 8002098:	e003      	b.n	80020a2 <_printf_i+0x86>
 800209a:	2975      	cmp	r1, #117	; 0x75
 800209c:	d017      	beq.n	80020ce <_printf_i+0xb2>
 800209e:	2978      	cmp	r1, #120	; 0x78
 80020a0:	d1d4      	bne.n	800204c <_printf_i+0x30>
 80020a2:	2378      	movs	r3, #120	; 0x78
 80020a4:	4865      	ldr	r0, [pc, #404]	; (800223c <_printf_i+0x220>)
 80020a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020aa:	e055      	b.n	8002158 <_printf_i+0x13c>
 80020ac:	6813      	ldr	r3, [r2, #0]
 80020ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020b2:	1d19      	adds	r1, r3, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6011      	str	r1, [r2, #0]
 80020b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020bc:	2301      	movs	r3, #1
 80020be:	e08c      	b.n	80021da <_printf_i+0x1be>
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020c6:	6011      	str	r1, [r2, #0]
 80020c8:	bf18      	it	ne
 80020ca:	b21b      	sxthne	r3, r3
 80020cc:	e7cf      	b.n	800206e <_printf_i+0x52>
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	6825      	ldr	r5, [r4, #0]
 80020d2:	1d18      	adds	r0, r3, #4
 80020d4:	6010      	str	r0, [r2, #0]
 80020d6:	0628      	lsls	r0, r5, #24
 80020d8:	d501      	bpl.n	80020de <_printf_i+0xc2>
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	e002      	b.n	80020e4 <_printf_i+0xc8>
 80020de:	0668      	lsls	r0, r5, #25
 80020e0:	d5fb      	bpl.n	80020da <_printf_i+0xbe>
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	296f      	cmp	r1, #111	; 0x6f
 80020e6:	bf14      	ite	ne
 80020e8:	220a      	movne	r2, #10
 80020ea:	2208      	moveq	r2, #8
 80020ec:	4852      	ldr	r0, [pc, #328]	; (8002238 <_printf_i+0x21c>)
 80020ee:	2100      	movs	r1, #0
 80020f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020f4:	6865      	ldr	r5, [r4, #4]
 80020f6:	2d00      	cmp	r5, #0
 80020f8:	60a5      	str	r5, [r4, #8]
 80020fa:	f2c0 8095 	blt.w	8002228 <_printf_i+0x20c>
 80020fe:	6821      	ldr	r1, [r4, #0]
 8002100:	f021 0104 	bic.w	r1, r1, #4
 8002104:	6021      	str	r1, [r4, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d13d      	bne.n	8002186 <_printf_i+0x16a>
 800210a:	2d00      	cmp	r5, #0
 800210c:	f040 808e 	bne.w	800222c <_printf_i+0x210>
 8002110:	4665      	mov	r5, ip
 8002112:	2a08      	cmp	r2, #8
 8002114:	d10b      	bne.n	800212e <_printf_i+0x112>
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	07db      	lsls	r3, r3, #31
 800211a:	d508      	bpl.n	800212e <_printf_i+0x112>
 800211c:	6923      	ldr	r3, [r4, #16]
 800211e:	6862      	ldr	r2, [r4, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	bfde      	ittt	le
 8002124:	2330      	movle	r3, #48	; 0x30
 8002126:	f805 3c01 	strble.w	r3, [r5, #-1]
 800212a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800212e:	ebac 0305 	sub.w	r3, ip, r5
 8002132:	6123      	str	r3, [r4, #16]
 8002134:	f8cd 8000 	str.w	r8, [sp]
 8002138:	463b      	mov	r3, r7
 800213a:	aa03      	add	r2, sp, #12
 800213c:	4621      	mov	r1, r4
 800213e:	4630      	mov	r0, r6
 8002140:	f7ff fef6 	bl	8001f30 <_printf_common>
 8002144:	3001      	adds	r0, #1
 8002146:	d14d      	bne.n	80021e4 <_printf_i+0x1c8>
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	b005      	add	sp, #20
 800214e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002152:	4839      	ldr	r0, [pc, #228]	; (8002238 <_printf_i+0x21c>)
 8002154:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	6821      	ldr	r1, [r4, #0]
 800215c:	1d1d      	adds	r5, r3, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6015      	str	r5, [r2, #0]
 8002162:	060a      	lsls	r2, r1, #24
 8002164:	d50b      	bpl.n	800217e <_printf_i+0x162>
 8002166:	07ca      	lsls	r2, r1, #31
 8002168:	bf44      	itt	mi
 800216a:	f041 0120 	orrmi.w	r1, r1, #32
 800216e:	6021      	strmi	r1, [r4, #0]
 8002170:	b91b      	cbnz	r3, 800217a <_printf_i+0x15e>
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	f022 0220 	bic.w	r2, r2, #32
 8002178:	6022      	str	r2, [r4, #0]
 800217a:	2210      	movs	r2, #16
 800217c:	e7b7      	b.n	80020ee <_printf_i+0xd2>
 800217e:	064d      	lsls	r5, r1, #25
 8002180:	bf48      	it	mi
 8002182:	b29b      	uxthmi	r3, r3
 8002184:	e7ef      	b.n	8002166 <_printf_i+0x14a>
 8002186:	4665      	mov	r5, ip
 8002188:	fbb3 f1f2 	udiv	r1, r3, r2
 800218c:	fb02 3311 	mls	r3, r2, r1, r3
 8002190:	5cc3      	ldrb	r3, [r0, r3]
 8002192:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002196:	460b      	mov	r3, r1
 8002198:	2900      	cmp	r1, #0
 800219a:	d1f5      	bne.n	8002188 <_printf_i+0x16c>
 800219c:	e7b9      	b.n	8002112 <_printf_i+0xf6>
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	6825      	ldr	r5, [r4, #0]
 80021a2:	1d18      	adds	r0, r3, #4
 80021a4:	6961      	ldr	r1, [r4, #20]
 80021a6:	6010      	str	r0, [r2, #0]
 80021a8:	0628      	lsls	r0, r5, #24
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	d501      	bpl.n	80021b2 <_printf_i+0x196>
 80021ae:	6019      	str	r1, [r3, #0]
 80021b0:	e002      	b.n	80021b8 <_printf_i+0x19c>
 80021b2:	066a      	lsls	r2, r5, #25
 80021b4:	d5fb      	bpl.n	80021ae <_printf_i+0x192>
 80021b6:	8019      	strh	r1, [r3, #0]
 80021b8:	2300      	movs	r3, #0
 80021ba:	4665      	mov	r5, ip
 80021bc:	6123      	str	r3, [r4, #16]
 80021be:	e7b9      	b.n	8002134 <_printf_i+0x118>
 80021c0:	6813      	ldr	r3, [r2, #0]
 80021c2:	1d19      	adds	r1, r3, #4
 80021c4:	6011      	str	r1, [r2, #0]
 80021c6:	681d      	ldr	r5, [r3, #0]
 80021c8:	6862      	ldr	r2, [r4, #4]
 80021ca:	2100      	movs	r1, #0
 80021cc:	4628      	mov	r0, r5
 80021ce:	f000 fa93 	bl	80026f8 <memchr>
 80021d2:	b108      	cbz	r0, 80021d8 <_printf_i+0x1bc>
 80021d4:	1b40      	subs	r0, r0, r5
 80021d6:	6060      	str	r0, [r4, #4]
 80021d8:	6863      	ldr	r3, [r4, #4]
 80021da:	6123      	str	r3, [r4, #16]
 80021dc:	2300      	movs	r3, #0
 80021de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021e2:	e7a7      	b.n	8002134 <_printf_i+0x118>
 80021e4:	6923      	ldr	r3, [r4, #16]
 80021e6:	462a      	mov	r2, r5
 80021e8:	4639      	mov	r1, r7
 80021ea:	4630      	mov	r0, r6
 80021ec:	47c0      	blx	r8
 80021ee:	3001      	adds	r0, #1
 80021f0:	d0aa      	beq.n	8002148 <_printf_i+0x12c>
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	079b      	lsls	r3, r3, #30
 80021f6:	d413      	bmi.n	8002220 <_printf_i+0x204>
 80021f8:	68e0      	ldr	r0, [r4, #12]
 80021fa:	9b03      	ldr	r3, [sp, #12]
 80021fc:	4298      	cmp	r0, r3
 80021fe:	bfb8      	it	lt
 8002200:	4618      	movlt	r0, r3
 8002202:	e7a3      	b.n	800214c <_printf_i+0x130>
 8002204:	2301      	movs	r3, #1
 8002206:	464a      	mov	r2, r9
 8002208:	4639      	mov	r1, r7
 800220a:	4630      	mov	r0, r6
 800220c:	47c0      	blx	r8
 800220e:	3001      	adds	r0, #1
 8002210:	d09a      	beq.n	8002148 <_printf_i+0x12c>
 8002212:	3501      	adds	r5, #1
 8002214:	68e3      	ldr	r3, [r4, #12]
 8002216:	9a03      	ldr	r2, [sp, #12]
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	42ab      	cmp	r3, r5
 800221c:	dcf2      	bgt.n	8002204 <_printf_i+0x1e8>
 800221e:	e7eb      	b.n	80021f8 <_printf_i+0x1dc>
 8002220:	2500      	movs	r5, #0
 8002222:	f104 0919 	add.w	r9, r4, #25
 8002226:	e7f5      	b.n	8002214 <_printf_i+0x1f8>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ac      	bne.n	8002186 <_printf_i+0x16a>
 800222c:	7803      	ldrb	r3, [r0, #0]
 800222e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002232:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002236:	e76c      	b.n	8002112 <_printf_i+0xf6>
 8002238:	080028ed 	.word	0x080028ed
 800223c:	080028fe 	.word	0x080028fe

08002240 <_sbrk_r>:
 8002240:	b538      	push	{r3, r4, r5, lr}
 8002242:	2300      	movs	r3, #0
 8002244:	4c05      	ldr	r4, [pc, #20]	; (800225c <_sbrk_r+0x1c>)
 8002246:	4605      	mov	r5, r0
 8002248:	4608      	mov	r0, r1
 800224a:	6023      	str	r3, [r4, #0]
 800224c:	f7fe f92a 	bl	80004a4 <_sbrk>
 8002250:	1c43      	adds	r3, r0, #1
 8002252:	d102      	bne.n	800225a <_sbrk_r+0x1a>
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	b103      	cbz	r3, 800225a <_sbrk_r+0x1a>
 8002258:	602b      	str	r3, [r5, #0]
 800225a:	bd38      	pop	{r3, r4, r5, pc}
 800225c:	2000011c 	.word	0x2000011c

08002260 <__sread>:
 8002260:	b510      	push	{r4, lr}
 8002262:	460c      	mov	r4, r1
 8002264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002268:	f000 faa2 	bl	80027b0 <_read_r>
 800226c:	2800      	cmp	r0, #0
 800226e:	bfab      	itete	ge
 8002270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002272:	89a3      	ldrhlt	r3, [r4, #12]
 8002274:	181b      	addge	r3, r3, r0
 8002276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800227a:	bfac      	ite	ge
 800227c:	6563      	strge	r3, [r4, #84]	; 0x54
 800227e:	81a3      	strhlt	r3, [r4, #12]
 8002280:	bd10      	pop	{r4, pc}

08002282 <__swrite>:
 8002282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002286:	461f      	mov	r7, r3
 8002288:	898b      	ldrh	r3, [r1, #12]
 800228a:	4605      	mov	r5, r0
 800228c:	05db      	lsls	r3, r3, #23
 800228e:	460c      	mov	r4, r1
 8002290:	4616      	mov	r6, r2
 8002292:	d505      	bpl.n	80022a0 <__swrite+0x1e>
 8002294:	2302      	movs	r3, #2
 8002296:	2200      	movs	r2, #0
 8002298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800229c:	f000 f9b6 	bl	800260c <_lseek_r>
 80022a0:	89a3      	ldrh	r3, [r4, #12]
 80022a2:	4632      	mov	r2, r6
 80022a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022a8:	81a3      	strh	r3, [r4, #12]
 80022aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022ae:	463b      	mov	r3, r7
 80022b0:	4628      	mov	r0, r5
 80022b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022b6:	f000 b869 	b.w	800238c <_write_r>

080022ba <__sseek>:
 80022ba:	b510      	push	{r4, lr}
 80022bc:	460c      	mov	r4, r1
 80022be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c2:	f000 f9a3 	bl	800260c <_lseek_r>
 80022c6:	1c43      	adds	r3, r0, #1
 80022c8:	89a3      	ldrh	r3, [r4, #12]
 80022ca:	bf15      	itete	ne
 80022cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80022ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022d6:	81a3      	strheq	r3, [r4, #12]
 80022d8:	bf18      	it	ne
 80022da:	81a3      	strhne	r3, [r4, #12]
 80022dc:	bd10      	pop	{r4, pc}

080022de <__sclose>:
 80022de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e2:	f000 b8d3 	b.w	800248c <_close_r>
	...

080022e8 <__swbuf_r>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	460e      	mov	r6, r1
 80022ec:	4614      	mov	r4, r2
 80022ee:	4605      	mov	r5, r0
 80022f0:	b118      	cbz	r0, 80022fa <__swbuf_r+0x12>
 80022f2:	6983      	ldr	r3, [r0, #24]
 80022f4:	b90b      	cbnz	r3, 80022fa <__swbuf_r+0x12>
 80022f6:	f7ff fbf9 	bl	8001aec <__sinit>
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <__swbuf_r+0x98>)
 80022fc:	429c      	cmp	r4, r3
 80022fe:	d12a      	bne.n	8002356 <__swbuf_r+0x6e>
 8002300:	686c      	ldr	r4, [r5, #4]
 8002302:	69a3      	ldr	r3, [r4, #24]
 8002304:	60a3      	str	r3, [r4, #8]
 8002306:	89a3      	ldrh	r3, [r4, #12]
 8002308:	071a      	lsls	r2, r3, #28
 800230a:	d52e      	bpl.n	800236a <__swbuf_r+0x82>
 800230c:	6923      	ldr	r3, [r4, #16]
 800230e:	b363      	cbz	r3, 800236a <__swbuf_r+0x82>
 8002310:	6923      	ldr	r3, [r4, #16]
 8002312:	6820      	ldr	r0, [r4, #0]
 8002314:	b2f6      	uxtb	r6, r6
 8002316:	1ac0      	subs	r0, r0, r3
 8002318:	6963      	ldr	r3, [r4, #20]
 800231a:	4637      	mov	r7, r6
 800231c:	4283      	cmp	r3, r0
 800231e:	dc04      	bgt.n	800232a <__swbuf_r+0x42>
 8002320:	4621      	mov	r1, r4
 8002322:	4628      	mov	r0, r5
 8002324:	f000 f948 	bl	80025b8 <_fflush_r>
 8002328:	bb28      	cbnz	r0, 8002376 <__swbuf_r+0x8e>
 800232a:	68a3      	ldr	r3, [r4, #8]
 800232c:	3001      	adds	r0, #1
 800232e:	3b01      	subs	r3, #1
 8002330:	60a3      	str	r3, [r4, #8]
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	6022      	str	r2, [r4, #0]
 8002338:	701e      	strb	r6, [r3, #0]
 800233a:	6963      	ldr	r3, [r4, #20]
 800233c:	4283      	cmp	r3, r0
 800233e:	d004      	beq.n	800234a <__swbuf_r+0x62>
 8002340:	89a3      	ldrh	r3, [r4, #12]
 8002342:	07db      	lsls	r3, r3, #31
 8002344:	d519      	bpl.n	800237a <__swbuf_r+0x92>
 8002346:	2e0a      	cmp	r6, #10
 8002348:	d117      	bne.n	800237a <__swbuf_r+0x92>
 800234a:	4621      	mov	r1, r4
 800234c:	4628      	mov	r0, r5
 800234e:	f000 f933 	bl	80025b8 <_fflush_r>
 8002352:	b190      	cbz	r0, 800237a <__swbuf_r+0x92>
 8002354:	e00f      	b.n	8002376 <__swbuf_r+0x8e>
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <__swbuf_r+0x9c>)
 8002358:	429c      	cmp	r4, r3
 800235a:	d101      	bne.n	8002360 <__swbuf_r+0x78>
 800235c:	68ac      	ldr	r4, [r5, #8]
 800235e:	e7d0      	b.n	8002302 <__swbuf_r+0x1a>
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <__swbuf_r+0xa0>)
 8002362:	429c      	cmp	r4, r3
 8002364:	bf08      	it	eq
 8002366:	68ec      	ldreq	r4, [r5, #12]
 8002368:	e7cb      	b.n	8002302 <__swbuf_r+0x1a>
 800236a:	4621      	mov	r1, r4
 800236c:	4628      	mov	r0, r5
 800236e:	f000 f81f 	bl	80023b0 <__swsetup_r>
 8002372:	2800      	cmp	r0, #0
 8002374:	d0cc      	beq.n	8002310 <__swbuf_r+0x28>
 8002376:	f04f 37ff 	mov.w	r7, #4294967295
 800237a:	4638      	mov	r0, r7
 800237c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800237e:	bf00      	nop
 8002380:	0800289c 	.word	0x0800289c
 8002384:	080028bc 	.word	0x080028bc
 8002388:	0800287c 	.word	0x0800287c

0800238c <_write_r>:
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	4605      	mov	r5, r0
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	2200      	movs	r2, #0
 8002396:	4c05      	ldr	r4, [pc, #20]	; (80023ac <_write_r+0x20>)
 8002398:	6022      	str	r2, [r4, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	f7fe f835 	bl	800040a <_write>
 80023a0:	1c43      	adds	r3, r0, #1
 80023a2:	d102      	bne.n	80023aa <_write_r+0x1e>
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	b103      	cbz	r3, 80023aa <_write_r+0x1e>
 80023a8:	602b      	str	r3, [r5, #0]
 80023aa:	bd38      	pop	{r3, r4, r5, pc}
 80023ac:	2000011c 	.word	0x2000011c

080023b0 <__swsetup_r>:
 80023b0:	4b32      	ldr	r3, [pc, #200]	; (800247c <__swsetup_r+0xcc>)
 80023b2:	b570      	push	{r4, r5, r6, lr}
 80023b4:	681d      	ldr	r5, [r3, #0]
 80023b6:	4606      	mov	r6, r0
 80023b8:	460c      	mov	r4, r1
 80023ba:	b125      	cbz	r5, 80023c6 <__swsetup_r+0x16>
 80023bc:	69ab      	ldr	r3, [r5, #24]
 80023be:	b913      	cbnz	r3, 80023c6 <__swsetup_r+0x16>
 80023c0:	4628      	mov	r0, r5
 80023c2:	f7ff fb93 	bl	8001aec <__sinit>
 80023c6:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <__swsetup_r+0xd0>)
 80023c8:	429c      	cmp	r4, r3
 80023ca:	d10f      	bne.n	80023ec <__swsetup_r+0x3c>
 80023cc:	686c      	ldr	r4, [r5, #4]
 80023ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	0715      	lsls	r5, r2, #28
 80023d6:	d42c      	bmi.n	8002432 <__swsetup_r+0x82>
 80023d8:	06d0      	lsls	r0, r2, #27
 80023da:	d411      	bmi.n	8002400 <__swsetup_r+0x50>
 80023dc:	2209      	movs	r2, #9
 80023de:	6032      	str	r2, [r6, #0]
 80023e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e4:	81a3      	strh	r3, [r4, #12]
 80023e6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ea:	e03e      	b.n	800246a <__swsetup_r+0xba>
 80023ec:	4b25      	ldr	r3, [pc, #148]	; (8002484 <__swsetup_r+0xd4>)
 80023ee:	429c      	cmp	r4, r3
 80023f0:	d101      	bne.n	80023f6 <__swsetup_r+0x46>
 80023f2:	68ac      	ldr	r4, [r5, #8]
 80023f4:	e7eb      	b.n	80023ce <__swsetup_r+0x1e>
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <__swsetup_r+0xd8>)
 80023f8:	429c      	cmp	r4, r3
 80023fa:	bf08      	it	eq
 80023fc:	68ec      	ldreq	r4, [r5, #12]
 80023fe:	e7e6      	b.n	80023ce <__swsetup_r+0x1e>
 8002400:	0751      	lsls	r1, r2, #29
 8002402:	d512      	bpl.n	800242a <__swsetup_r+0x7a>
 8002404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002406:	b141      	cbz	r1, 800241a <__swsetup_r+0x6a>
 8002408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800240c:	4299      	cmp	r1, r3
 800240e:	d002      	beq.n	8002416 <__swsetup_r+0x66>
 8002410:	4630      	mov	r0, r6
 8002412:	f000 f981 	bl	8002718 <_free_r>
 8002416:	2300      	movs	r3, #0
 8002418:	6363      	str	r3, [r4, #52]	; 0x34
 800241a:	89a3      	ldrh	r3, [r4, #12]
 800241c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002420:	81a3      	strh	r3, [r4, #12]
 8002422:	2300      	movs	r3, #0
 8002424:	6063      	str	r3, [r4, #4]
 8002426:	6923      	ldr	r3, [r4, #16]
 8002428:	6023      	str	r3, [r4, #0]
 800242a:	89a3      	ldrh	r3, [r4, #12]
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	81a3      	strh	r3, [r4, #12]
 8002432:	6923      	ldr	r3, [r4, #16]
 8002434:	b94b      	cbnz	r3, 800244a <__swsetup_r+0x9a>
 8002436:	89a3      	ldrh	r3, [r4, #12]
 8002438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800243c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002440:	d003      	beq.n	800244a <__swsetup_r+0x9a>
 8002442:	4621      	mov	r1, r4
 8002444:	4630      	mov	r0, r6
 8002446:	f000 f917 	bl	8002678 <__smakebuf_r>
 800244a:	89a2      	ldrh	r2, [r4, #12]
 800244c:	f012 0301 	ands.w	r3, r2, #1
 8002450:	d00c      	beq.n	800246c <__swsetup_r+0xbc>
 8002452:	2300      	movs	r3, #0
 8002454:	60a3      	str	r3, [r4, #8]
 8002456:	6963      	ldr	r3, [r4, #20]
 8002458:	425b      	negs	r3, r3
 800245a:	61a3      	str	r3, [r4, #24]
 800245c:	6923      	ldr	r3, [r4, #16]
 800245e:	b953      	cbnz	r3, 8002476 <__swsetup_r+0xc6>
 8002460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002464:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002468:	d1ba      	bne.n	80023e0 <__swsetup_r+0x30>
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	0792      	lsls	r2, r2, #30
 800246e:	bf58      	it	pl
 8002470:	6963      	ldrpl	r3, [r4, #20]
 8002472:	60a3      	str	r3, [r4, #8]
 8002474:	e7f2      	b.n	800245c <__swsetup_r+0xac>
 8002476:	2000      	movs	r0, #0
 8002478:	e7f7      	b.n	800246a <__swsetup_r+0xba>
 800247a:	bf00      	nop
 800247c:	2000000c 	.word	0x2000000c
 8002480:	0800289c 	.word	0x0800289c
 8002484:	080028bc 	.word	0x080028bc
 8002488:	0800287c 	.word	0x0800287c

0800248c <_close_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	2300      	movs	r3, #0
 8002490:	4c05      	ldr	r4, [pc, #20]	; (80024a8 <_close_r+0x1c>)
 8002492:	4605      	mov	r5, r0
 8002494:	4608      	mov	r0, r1
 8002496:	6023      	str	r3, [r4, #0]
 8002498:	f7fd ffd3 	bl	8000442 <_close>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	d102      	bne.n	80024a6 <_close_r+0x1a>
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	b103      	cbz	r3, 80024a6 <_close_r+0x1a>
 80024a4:	602b      	str	r3, [r5, #0]
 80024a6:	bd38      	pop	{r3, r4, r5, pc}
 80024a8:	2000011c 	.word	0x2000011c

080024ac <__sflush_r>:
 80024ac:	898a      	ldrh	r2, [r1, #12]
 80024ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b2:	4605      	mov	r5, r0
 80024b4:	0710      	lsls	r0, r2, #28
 80024b6:	460c      	mov	r4, r1
 80024b8:	d458      	bmi.n	800256c <__sflush_r+0xc0>
 80024ba:	684b      	ldr	r3, [r1, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	dc05      	bgt.n	80024cc <__sflush_r+0x20>
 80024c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	dc02      	bgt.n	80024cc <__sflush_r+0x20>
 80024c6:	2000      	movs	r0, #0
 80024c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d0f9      	beq.n	80024c6 <__sflush_r+0x1a>
 80024d2:	2300      	movs	r3, #0
 80024d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80024d8:	682f      	ldr	r7, [r5, #0]
 80024da:	6a21      	ldr	r1, [r4, #32]
 80024dc:	602b      	str	r3, [r5, #0]
 80024de:	d032      	beq.n	8002546 <__sflush_r+0x9a>
 80024e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024e2:	89a3      	ldrh	r3, [r4, #12]
 80024e4:	075a      	lsls	r2, r3, #29
 80024e6:	d505      	bpl.n	80024f4 <__sflush_r+0x48>
 80024e8:	6863      	ldr	r3, [r4, #4]
 80024ea:	1ac0      	subs	r0, r0, r3
 80024ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024ee:	b10b      	cbz	r3, 80024f4 <__sflush_r+0x48>
 80024f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024f2:	1ac0      	subs	r0, r0, r3
 80024f4:	2300      	movs	r3, #0
 80024f6:	4602      	mov	r2, r0
 80024f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024fa:	6a21      	ldr	r1, [r4, #32]
 80024fc:	4628      	mov	r0, r5
 80024fe:	47b0      	blx	r6
 8002500:	1c43      	adds	r3, r0, #1
 8002502:	89a3      	ldrh	r3, [r4, #12]
 8002504:	d106      	bne.n	8002514 <__sflush_r+0x68>
 8002506:	6829      	ldr	r1, [r5, #0]
 8002508:	291d      	cmp	r1, #29
 800250a:	d848      	bhi.n	800259e <__sflush_r+0xf2>
 800250c:	4a29      	ldr	r2, [pc, #164]	; (80025b4 <__sflush_r+0x108>)
 800250e:	40ca      	lsrs	r2, r1
 8002510:	07d6      	lsls	r6, r2, #31
 8002512:	d544      	bpl.n	800259e <__sflush_r+0xf2>
 8002514:	2200      	movs	r2, #0
 8002516:	6062      	str	r2, [r4, #4]
 8002518:	6922      	ldr	r2, [r4, #16]
 800251a:	04d9      	lsls	r1, r3, #19
 800251c:	6022      	str	r2, [r4, #0]
 800251e:	d504      	bpl.n	800252a <__sflush_r+0x7e>
 8002520:	1c42      	adds	r2, r0, #1
 8002522:	d101      	bne.n	8002528 <__sflush_r+0x7c>
 8002524:	682b      	ldr	r3, [r5, #0]
 8002526:	b903      	cbnz	r3, 800252a <__sflush_r+0x7e>
 8002528:	6560      	str	r0, [r4, #84]	; 0x54
 800252a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800252c:	602f      	str	r7, [r5, #0]
 800252e:	2900      	cmp	r1, #0
 8002530:	d0c9      	beq.n	80024c6 <__sflush_r+0x1a>
 8002532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002536:	4299      	cmp	r1, r3
 8002538:	d002      	beq.n	8002540 <__sflush_r+0x94>
 800253a:	4628      	mov	r0, r5
 800253c:	f000 f8ec 	bl	8002718 <_free_r>
 8002540:	2000      	movs	r0, #0
 8002542:	6360      	str	r0, [r4, #52]	; 0x34
 8002544:	e7c0      	b.n	80024c8 <__sflush_r+0x1c>
 8002546:	2301      	movs	r3, #1
 8002548:	4628      	mov	r0, r5
 800254a:	47b0      	blx	r6
 800254c:	1c41      	adds	r1, r0, #1
 800254e:	d1c8      	bne.n	80024e2 <__sflush_r+0x36>
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0c5      	beq.n	80024e2 <__sflush_r+0x36>
 8002556:	2b1d      	cmp	r3, #29
 8002558:	d001      	beq.n	800255e <__sflush_r+0xb2>
 800255a:	2b16      	cmp	r3, #22
 800255c:	d101      	bne.n	8002562 <__sflush_r+0xb6>
 800255e:	602f      	str	r7, [r5, #0]
 8002560:	e7b1      	b.n	80024c6 <__sflush_r+0x1a>
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002568:	81a3      	strh	r3, [r4, #12]
 800256a:	e7ad      	b.n	80024c8 <__sflush_r+0x1c>
 800256c:	690f      	ldr	r7, [r1, #16]
 800256e:	2f00      	cmp	r7, #0
 8002570:	d0a9      	beq.n	80024c6 <__sflush_r+0x1a>
 8002572:	0793      	lsls	r3, r2, #30
 8002574:	bf18      	it	ne
 8002576:	2300      	movne	r3, #0
 8002578:	680e      	ldr	r6, [r1, #0]
 800257a:	bf08      	it	eq
 800257c:	694b      	ldreq	r3, [r1, #20]
 800257e:	eba6 0807 	sub.w	r8, r6, r7
 8002582:	600f      	str	r7, [r1, #0]
 8002584:	608b      	str	r3, [r1, #8]
 8002586:	f1b8 0f00 	cmp.w	r8, #0
 800258a:	dd9c      	ble.n	80024c6 <__sflush_r+0x1a>
 800258c:	4643      	mov	r3, r8
 800258e:	463a      	mov	r2, r7
 8002590:	6a21      	ldr	r1, [r4, #32]
 8002592:	4628      	mov	r0, r5
 8002594:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002596:	47b0      	blx	r6
 8002598:	2800      	cmp	r0, #0
 800259a:	dc06      	bgt.n	80025aa <__sflush_r+0xfe>
 800259c:	89a3      	ldrh	r3, [r4, #12]
 800259e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a2:	81a3      	strh	r3, [r4, #12]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	e78e      	b.n	80024c8 <__sflush_r+0x1c>
 80025aa:	4407      	add	r7, r0
 80025ac:	eba8 0800 	sub.w	r8, r8, r0
 80025b0:	e7e9      	b.n	8002586 <__sflush_r+0xda>
 80025b2:	bf00      	nop
 80025b4:	20400001 	.word	0x20400001

080025b8 <_fflush_r>:
 80025b8:	b538      	push	{r3, r4, r5, lr}
 80025ba:	690b      	ldr	r3, [r1, #16]
 80025bc:	4605      	mov	r5, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	b1db      	cbz	r3, 80025fa <_fflush_r+0x42>
 80025c2:	b118      	cbz	r0, 80025cc <_fflush_r+0x14>
 80025c4:	6983      	ldr	r3, [r0, #24]
 80025c6:	b90b      	cbnz	r3, 80025cc <_fflush_r+0x14>
 80025c8:	f7ff fa90 	bl	8001aec <__sinit>
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <_fflush_r+0x48>)
 80025ce:	429c      	cmp	r4, r3
 80025d0:	d109      	bne.n	80025e6 <_fflush_r+0x2e>
 80025d2:	686c      	ldr	r4, [r5, #4]
 80025d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025d8:	b17b      	cbz	r3, 80025fa <_fflush_r+0x42>
 80025da:	4621      	mov	r1, r4
 80025dc:	4628      	mov	r0, r5
 80025de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025e2:	f7ff bf63 	b.w	80024ac <__sflush_r>
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <_fflush_r+0x4c>)
 80025e8:	429c      	cmp	r4, r3
 80025ea:	d101      	bne.n	80025f0 <_fflush_r+0x38>
 80025ec:	68ac      	ldr	r4, [r5, #8]
 80025ee:	e7f1      	b.n	80025d4 <_fflush_r+0x1c>
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <_fflush_r+0x50>)
 80025f2:	429c      	cmp	r4, r3
 80025f4:	bf08      	it	eq
 80025f6:	68ec      	ldreq	r4, [r5, #12]
 80025f8:	e7ec      	b.n	80025d4 <_fflush_r+0x1c>
 80025fa:	2000      	movs	r0, #0
 80025fc:	bd38      	pop	{r3, r4, r5, pc}
 80025fe:	bf00      	nop
 8002600:	0800289c 	.word	0x0800289c
 8002604:	080028bc 	.word	0x080028bc
 8002608:	0800287c 	.word	0x0800287c

0800260c <_lseek_r>:
 800260c:	b538      	push	{r3, r4, r5, lr}
 800260e:	4605      	mov	r5, r0
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	2200      	movs	r2, #0
 8002616:	4c05      	ldr	r4, [pc, #20]	; (800262c <_lseek_r+0x20>)
 8002618:	6022      	str	r2, [r4, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	f7fd ff35 	bl	800048a <_lseek>
 8002620:	1c43      	adds	r3, r0, #1
 8002622:	d102      	bne.n	800262a <_lseek_r+0x1e>
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	b103      	cbz	r3, 800262a <_lseek_r+0x1e>
 8002628:	602b      	str	r3, [r5, #0]
 800262a:	bd38      	pop	{r3, r4, r5, pc}
 800262c:	2000011c 	.word	0x2000011c

08002630 <__swhatbuf_r>:
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	460e      	mov	r6, r1
 8002634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002638:	b096      	sub	sp, #88	; 0x58
 800263a:	2900      	cmp	r1, #0
 800263c:	4614      	mov	r4, r2
 800263e:	461d      	mov	r5, r3
 8002640:	da07      	bge.n	8002652 <__swhatbuf_r+0x22>
 8002642:	2300      	movs	r3, #0
 8002644:	602b      	str	r3, [r5, #0]
 8002646:	89b3      	ldrh	r3, [r6, #12]
 8002648:	061a      	lsls	r2, r3, #24
 800264a:	d410      	bmi.n	800266e <__swhatbuf_r+0x3e>
 800264c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002650:	e00e      	b.n	8002670 <__swhatbuf_r+0x40>
 8002652:	466a      	mov	r2, sp
 8002654:	f000 f8be 	bl	80027d4 <_fstat_r>
 8002658:	2800      	cmp	r0, #0
 800265a:	dbf2      	blt.n	8002642 <__swhatbuf_r+0x12>
 800265c:	9a01      	ldr	r2, [sp, #4]
 800265e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002662:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002666:	425a      	negs	r2, r3
 8002668:	415a      	adcs	r2, r3
 800266a:	602a      	str	r2, [r5, #0]
 800266c:	e7ee      	b.n	800264c <__swhatbuf_r+0x1c>
 800266e:	2340      	movs	r3, #64	; 0x40
 8002670:	2000      	movs	r0, #0
 8002672:	6023      	str	r3, [r4, #0]
 8002674:	b016      	add	sp, #88	; 0x58
 8002676:	bd70      	pop	{r4, r5, r6, pc}

08002678 <__smakebuf_r>:
 8002678:	898b      	ldrh	r3, [r1, #12]
 800267a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800267c:	079d      	lsls	r5, r3, #30
 800267e:	4606      	mov	r6, r0
 8002680:	460c      	mov	r4, r1
 8002682:	d507      	bpl.n	8002694 <__smakebuf_r+0x1c>
 8002684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002688:	6023      	str	r3, [r4, #0]
 800268a:	6123      	str	r3, [r4, #16]
 800268c:	2301      	movs	r3, #1
 800268e:	6163      	str	r3, [r4, #20]
 8002690:	b002      	add	sp, #8
 8002692:	bd70      	pop	{r4, r5, r6, pc}
 8002694:	ab01      	add	r3, sp, #4
 8002696:	466a      	mov	r2, sp
 8002698:	f7ff ffca 	bl	8002630 <__swhatbuf_r>
 800269c:	9900      	ldr	r1, [sp, #0]
 800269e:	4605      	mov	r5, r0
 80026a0:	4630      	mov	r0, r6
 80026a2:	f7ff faad 	bl	8001c00 <_malloc_r>
 80026a6:	b948      	cbnz	r0, 80026bc <__smakebuf_r+0x44>
 80026a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026ac:	059a      	lsls	r2, r3, #22
 80026ae:	d4ef      	bmi.n	8002690 <__smakebuf_r+0x18>
 80026b0:	f023 0303 	bic.w	r3, r3, #3
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	81a3      	strh	r3, [r4, #12]
 80026ba:	e7e3      	b.n	8002684 <__smakebuf_r+0xc>
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <__smakebuf_r+0x7c>)
 80026be:	62b3      	str	r3, [r6, #40]	; 0x28
 80026c0:	89a3      	ldrh	r3, [r4, #12]
 80026c2:	6020      	str	r0, [r4, #0]
 80026c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c8:	81a3      	strh	r3, [r4, #12]
 80026ca:	9b00      	ldr	r3, [sp, #0]
 80026cc:	6120      	str	r0, [r4, #16]
 80026ce:	6163      	str	r3, [r4, #20]
 80026d0:	9b01      	ldr	r3, [sp, #4]
 80026d2:	b15b      	cbz	r3, 80026ec <__smakebuf_r+0x74>
 80026d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026d8:	4630      	mov	r0, r6
 80026da:	f000 f88d 	bl	80027f8 <_isatty_r>
 80026de:	b128      	cbz	r0, 80026ec <__smakebuf_r+0x74>
 80026e0:	89a3      	ldrh	r3, [r4, #12]
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	81a3      	strh	r3, [r4, #12]
 80026ec:	89a3      	ldrh	r3, [r4, #12]
 80026ee:	431d      	orrs	r5, r3
 80026f0:	81a5      	strh	r5, [r4, #12]
 80026f2:	e7cd      	b.n	8002690 <__smakebuf_r+0x18>
 80026f4:	08001ab5 	.word	0x08001ab5

080026f8 <memchr>:
 80026f8:	b510      	push	{r4, lr}
 80026fa:	b2c9      	uxtb	r1, r1
 80026fc:	4402      	add	r2, r0
 80026fe:	4290      	cmp	r0, r2
 8002700:	4603      	mov	r3, r0
 8002702:	d101      	bne.n	8002708 <memchr+0x10>
 8002704:	2300      	movs	r3, #0
 8002706:	e003      	b.n	8002710 <memchr+0x18>
 8002708:	781c      	ldrb	r4, [r3, #0]
 800270a:	3001      	adds	r0, #1
 800270c:	428c      	cmp	r4, r1
 800270e:	d1f6      	bne.n	80026fe <memchr+0x6>
 8002710:	4618      	mov	r0, r3
 8002712:	bd10      	pop	{r4, pc}

08002714 <__malloc_lock>:
 8002714:	4770      	bx	lr

08002716 <__malloc_unlock>:
 8002716:	4770      	bx	lr

08002718 <_free_r>:
 8002718:	b538      	push	{r3, r4, r5, lr}
 800271a:	4605      	mov	r5, r0
 800271c:	2900      	cmp	r1, #0
 800271e:	d043      	beq.n	80027a8 <_free_r+0x90>
 8002720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002724:	1f0c      	subs	r4, r1, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	bfb8      	it	lt
 800272a:	18e4      	addlt	r4, r4, r3
 800272c:	f7ff fff2 	bl	8002714 <__malloc_lock>
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <_free_r+0x94>)
 8002732:	6813      	ldr	r3, [r2, #0]
 8002734:	4610      	mov	r0, r2
 8002736:	b933      	cbnz	r3, 8002746 <_free_r+0x2e>
 8002738:	6063      	str	r3, [r4, #4]
 800273a:	6014      	str	r4, [r2, #0]
 800273c:	4628      	mov	r0, r5
 800273e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002742:	f7ff bfe8 	b.w	8002716 <__malloc_unlock>
 8002746:	42a3      	cmp	r3, r4
 8002748:	d90b      	bls.n	8002762 <_free_r+0x4a>
 800274a:	6821      	ldr	r1, [r4, #0]
 800274c:	1862      	adds	r2, r4, r1
 800274e:	4293      	cmp	r3, r2
 8002750:	bf01      	itttt	eq
 8002752:	681a      	ldreq	r2, [r3, #0]
 8002754:	685b      	ldreq	r3, [r3, #4]
 8002756:	1852      	addeq	r2, r2, r1
 8002758:	6022      	streq	r2, [r4, #0]
 800275a:	6063      	str	r3, [r4, #4]
 800275c:	6004      	str	r4, [r0, #0]
 800275e:	e7ed      	b.n	800273c <_free_r+0x24>
 8002760:	4613      	mov	r3, r2
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	b10a      	cbz	r2, 800276a <_free_r+0x52>
 8002766:	42a2      	cmp	r2, r4
 8002768:	d9fa      	bls.n	8002760 <_free_r+0x48>
 800276a:	6819      	ldr	r1, [r3, #0]
 800276c:	1858      	adds	r0, r3, r1
 800276e:	42a0      	cmp	r0, r4
 8002770:	d10b      	bne.n	800278a <_free_r+0x72>
 8002772:	6820      	ldr	r0, [r4, #0]
 8002774:	4401      	add	r1, r0
 8002776:	1858      	adds	r0, r3, r1
 8002778:	4282      	cmp	r2, r0
 800277a:	6019      	str	r1, [r3, #0]
 800277c:	d1de      	bne.n	800273c <_free_r+0x24>
 800277e:	6810      	ldr	r0, [r2, #0]
 8002780:	6852      	ldr	r2, [r2, #4]
 8002782:	4401      	add	r1, r0
 8002784:	6019      	str	r1, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	e7d8      	b.n	800273c <_free_r+0x24>
 800278a:	d902      	bls.n	8002792 <_free_r+0x7a>
 800278c:	230c      	movs	r3, #12
 800278e:	602b      	str	r3, [r5, #0]
 8002790:	e7d4      	b.n	800273c <_free_r+0x24>
 8002792:	6820      	ldr	r0, [r4, #0]
 8002794:	1821      	adds	r1, r4, r0
 8002796:	428a      	cmp	r2, r1
 8002798:	bf01      	itttt	eq
 800279a:	6811      	ldreq	r1, [r2, #0]
 800279c:	6852      	ldreq	r2, [r2, #4]
 800279e:	1809      	addeq	r1, r1, r0
 80027a0:	6021      	streq	r1, [r4, #0]
 80027a2:	6062      	str	r2, [r4, #4]
 80027a4:	605c      	str	r4, [r3, #4]
 80027a6:	e7c9      	b.n	800273c <_free_r+0x24>
 80027a8:	bd38      	pop	{r3, r4, r5, pc}
 80027aa:	bf00      	nop
 80027ac:	20000090 	.word	0x20000090

080027b0 <_read_r>:
 80027b0:	b538      	push	{r3, r4, r5, lr}
 80027b2:	4605      	mov	r5, r0
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	2200      	movs	r2, #0
 80027ba:	4c05      	ldr	r4, [pc, #20]	; (80027d0 <_read_r+0x20>)
 80027bc:	6022      	str	r2, [r4, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	f7fd fe06 	bl	80003d0 <_read>
 80027c4:	1c43      	adds	r3, r0, #1
 80027c6:	d102      	bne.n	80027ce <_read_r+0x1e>
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	b103      	cbz	r3, 80027ce <_read_r+0x1e>
 80027cc:	602b      	str	r3, [r5, #0]
 80027ce:	bd38      	pop	{r3, r4, r5, pc}
 80027d0:	2000011c 	.word	0x2000011c

080027d4 <_fstat_r>:
 80027d4:	b538      	push	{r3, r4, r5, lr}
 80027d6:	2300      	movs	r3, #0
 80027d8:	4c06      	ldr	r4, [pc, #24]	; (80027f4 <_fstat_r+0x20>)
 80027da:	4605      	mov	r5, r0
 80027dc:	4608      	mov	r0, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	6023      	str	r3, [r4, #0]
 80027e2:	f7fd fe39 	bl	8000458 <_fstat>
 80027e6:	1c43      	adds	r3, r0, #1
 80027e8:	d102      	bne.n	80027f0 <_fstat_r+0x1c>
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	b103      	cbz	r3, 80027f0 <_fstat_r+0x1c>
 80027ee:	602b      	str	r3, [r5, #0]
 80027f0:	bd38      	pop	{r3, r4, r5, pc}
 80027f2:	bf00      	nop
 80027f4:	2000011c 	.word	0x2000011c

080027f8 <_isatty_r>:
 80027f8:	b538      	push	{r3, r4, r5, lr}
 80027fa:	2300      	movs	r3, #0
 80027fc:	4c05      	ldr	r4, [pc, #20]	; (8002814 <_isatty_r+0x1c>)
 80027fe:	4605      	mov	r5, r0
 8002800:	4608      	mov	r0, r1
 8002802:	6023      	str	r3, [r4, #0]
 8002804:	f7fd fe37 	bl	8000476 <_isatty>
 8002808:	1c43      	adds	r3, r0, #1
 800280a:	d102      	bne.n	8002812 <_isatty_r+0x1a>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	b103      	cbz	r3, 8002812 <_isatty_r+0x1a>
 8002810:	602b      	str	r3, [r5, #0]
 8002812:	bd38      	pop	{r3, r4, r5, pc}
 8002814:	2000011c 	.word	0x2000011c

08002818 <_init>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr

08002824 <_fini>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr
